[
{"content":{"body":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","msgtype":"m.text","org.matrix.msc1767.text":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"ts":1657327522808,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aTtgVor5Wc8wsWA8zkUQIRRmwEuXT3GFjyBIkwfHmCc"},
{"content":{"body":" * I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","m.new_content":{"body":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","msgtype":"m.text","org.matrix.msc1767.text":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"m.relates_to":{"event_id":"$aTtgVor5Wc8wsWA8zkUQIRRmwEuXT3GFjyBIkwfHmCc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"ts":1657327529908,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$AOhlC0dfIu5HQAlyMDzxRzM6Z6vY2HoD-XzIirXBeNM"},
{"content":{"body":"Have a question","msgtype":"m.text","org.matrix.msc1767.text":"Have a question"},"ts":1657336918290,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Fs1-PIxtcsXhcaGm8Hf_uEnul3aKxrnPqdoBoVxHFss"},
{"content":{"body":"for example, I have a `const a = new Module(source, hook, meta)`","format":"org.matrix.custom.html","formatted_body":"for example, I have a <code>const a = new Module(source, hook, meta)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, I have a `const a = new Module(source, hook, meta)`","mimetype":"text/plain"},{"body":"for example, I have a <code>const a = new Module(source, hook, meta)</code>","mimetype":"text/html"}]},"ts":1657336946025,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$b9rFrcLu33tAtrBiHi2wVT63OgQQncbWi3oplDFo_xE"},
{"content":{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"ts":1657337000646,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$uvHQMUAbUAH12oJDeNcpP_rBnM8FVSio1lWg2aU25Jw"},
{"content":{"body":" * in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":" * in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","m.new_content":{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uvHQMUAbUAH12oJDeNcpP_rBnM8FVSio1lWg2aU25Jw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":" * in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"ts":1657337007237,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$v4uGSjo3grX3j1irl6D2IDAO3JTcKc_4BRYSxnh-2TE"},
{"content":{"body":"Once per object identity.","msgtype":"m.text","org.matrix.msc1767.text":"Once per object identity."},"ts":1657337748302,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8OuCnDOwqu19cATbojL5xuveT0xOVjI9bYPkKWDVWJk"},
{"content":{"body":"even it is used in multiple realms?","msgtype":"m.text","org.matrix.msc1767.text":"even it is used in multiple realms?"},"ts":1657339119318,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$pjOi7b5FzUneNpSFg0LOELyI_CSegRkuBZkLQLkgj8o"},
{"content":{"body":"That is my understanding.","msgtype":"m.text","org.matrix.msc1767.text":"That is my understanding."},"ts":1657339132904,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Aq4iFfrn3_SxTWiKYVYVufhfxetEhCDFurY9KxWFQAE"},
{"content":{"body":"My understanding at the moment is that a module block corresponds to a `Module` instance, so locally it will only initialize once. But, every time a `Module` gets serialized and deserialized, it emerges as a new `Module` instance on the far side. The only parts of the module instance that are serialized are the `source` and `importMeta`, to the extent that `importMeta` is serializable, and the module instance is not memoized by the receiver.","format":"org.matrix.custom.html","formatted_body":"My understanding at the moment is that a module block corresponds to a <code>Module</code> instance, so locally it will only initialize once. But, every time a <code>Module</code> gets serialized and deserialized, it emerges as a new <code>Module</code> instance on the far side. The only parts of the module instance that are serialized are the <code>source</code> and <code>importMeta</code>, to the extent that <code>importMeta</code> is serializable, and the module instance is not memoized by the receiver.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My understanding at the moment is that a module block corresponds to a `Module` instance, so locally it will only initialize once. But, every time a `Module` gets serialized and deserialized, it emerges as a new `Module` instance on the far side. The only parts of the module instance that are serialized are the `source` and `importMeta`, to the extent that `importMeta` is serializable, and the module instance is not memoized by the receiver.","mimetype":"text/plain"},{"body":"My understanding at the moment is that a module block corresponds to a <code>Module</code> instance, so locally it will only initialize once. But, every time a <code>Module</code> gets serialized and deserialized, it emerges as a new <code>Module</code> instance on the far side. The only parts of the module instance that are serialized are the <code>source</code> and <code>importMeta</code>, to the extent that <code>importMeta</code> is serializable, and the module instance is not memoized by the receiver.","mimetype":"text/html"}]},"ts":1657339177752,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Y8y-HPCF4DrNOnk-2hu8nnTYENykJ9B9SgETGpxnCuk"},
{"content":{"body":"The new `Module` instance would inherit the receiver execution environment’s import hook.","format":"org.matrix.custom.html","formatted_body":"The new <code>Module</code> instance would inherit the receiver execution environment’s import hook.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The new `Module` instance would inherit the receiver execution environment’s import hook.","mimetype":"text/plain"},{"body":"The new <code>Module</code> instance would inherit the receiver execution environment’s import hook.","mimetype":"text/html"}]},"ts":1657339222038,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZRpKtxO99itZZUtj4_wimPoG5PmuehMuoTZuYpaiWwk"},
{"content":{"body":"The module instance also has the [[Context]] internal slot that binds it to the original realm, so the namespace’s objects are guaranteed to be from the originating realm.","msgtype":"m.text","org.matrix.msc1767.text":"The module instance also has the [[Context]] internal slot that binds it to the original realm, so the namespace’s objects are guaranteed to be from the originating realm."},"ts":1657339300369,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lB4rjlW5wd4aMOEgPu6UxZywKfE3wPBN4Bqbs_2scrU"},
{"content":{"body":"If we’re talking about same-origin `<iframe>` realms, still once because single identity.","format":"org.matrix.custom.html","formatted_body":"If we’re talking about same-origin <code>&lt;iframe&gt;</code> realms, still once because single identity.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we’re talking about same-origin `<iframe>` realms, still once because single identity.","mimetype":"text/plain"},{"body":"If we’re talking about same-origin <code>&lt;iframe&gt;</code> realms, still once because single identity.","mimetype":"text/html"}]},"ts":1657339351719,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O2mEF9VOK3K3LcvnW-jIDbYzYeOqSojIugakYkRi680"},
{"content":{"body":"If we’re talking about shadow realms, once per transit.","msgtype":"m.text","org.matrix.msc1767.text":"If we’re talking about shadow realms, once per transit."},"ts":1657339369600,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1e0gOkCqzdiM4exfJG0J0U4zOCue05EQFJkDCk0LeVA"},
{"content":{"body":"Though with shadow realms, assuming Static Module Records are treated as immutable after construction, transmitting between shadow realms or even between threads of the same process can be optimized. You still get fresh instances of the `Module` object, though.","format":"org.matrix.custom.html","formatted_body":"Though with shadow realms, assuming Static Module Records are treated as immutable after construction, transmitting between shadow realms or even between threads of the same process can be optimized. You still get fresh instances of the <code>Module</code> object, though.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though with shadow realms, assuming Static Module Records are treated as immutable after construction, transmitting between shadow realms or even between threads of the same process can be optimized. You still get fresh instances of the `Module` object, though.","mimetype":"text/plain"},{"body":"Though with shadow realms, assuming Static Module Records are treated as immutable after construction, transmitting between shadow realms or even between threads of the same process can be optimized. You still get fresh instances of the <code>Module</code> object, though.","mimetype":"text/html"}]},"ts":1657339461313,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dhsX-sVZu8ZaBk_cytDTuy7cFJUsXycq4EtfcFp8xRU"},
{"content":{"body":"And the reasoning for module fragments is that every module fragment has a unique `ModuleSource` consisting of the fragment and all the fragments it transitively depends upon, so each fragment is effectively equivalent to a single module block.","format":"org.matrix.custom.html","formatted_body":"And the reasoning for module fragments is that every module fragment has a unique <code>ModuleSource</code> consisting of the fragment and all the fragments it transitively depends upon, so each fragment is effectively equivalent to a single module block.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And the reasoning for module fragments is that every module fragment has a unique `ModuleSource` consisting of the fragment and all the fragments it transitively depends upon, so each fragment is effectively equivalent to a single module block.","mimetype":"text/plain"},{"body":"And the reasoning for module fragments is that every module fragment has a unique <code>ModuleSource</code> consisting of the fragment and all the fragments it transitively depends upon, so each fragment is effectively equivalent to a single module block.","mimetype":"text/html"}]},"ts":1657339576688,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$UkJqJPskuU3FTDwtIZncY9fz0xNAZwE466sIw_RvuJg"},
{"content":{"body":"I think there are still open questions about the local semantics, like whether each evaluation of a module fragment produces a new `Module` instance, thus a new identity, thus a new namespace instance.","format":"org.matrix.custom.html","formatted_body":"I think there are still open questions about the local semantics, like whether each evaluation of a module fragment produces a new <code>Module</code> instance, thus a new identity, thus a new namespace instance.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think there are still open questions about the local semantics, like whether each evaluation of a module fragment produces a new `Module` instance, thus a new identity, thus a new namespace instance.","mimetype":"text/plain"},{"body":"I think there are still open questions about the local semantics, like whether each evaluation of a module fragment produces a new <code>Module</code> instance, thus a new identity, thus a new namespace instance.","mimetype":"text/html"}]},"ts":1657339739418,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Mw6dD_15EZPJ2NHXg3egslg7vNFgVOwZIDtZXPe79nE"},
{"content":{"body":"I suspect that’s the only reasonable answer, since module instances are superficially mutable. Having a singleton would create a covert communication channel.","msgtype":"m.text","org.matrix.msc1767.text":"I suspect that’s the only reasonable answer, since module instances are superficially mutable. Having a singleton would create a covert communication channel."},"ts":1657339798745,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$a1DIbmFreKPS2mmH4Bcw5LYtFl0KHrXVU2ES8yWelm0"},
{"content":{"body":"The one hard rule is that a module block can’t write itself into the remote module map using the local key.","msgtype":"m.text","org.matrix.msc1767.text":"The one hard rule is that a module block can’t write itself into the remote module map using the local key."},"ts":1657339882226,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dS0JmuME_FN7UJKQJZVk4sTZwKeIcdQzI9jSs8iUNvE"},
{"content":{"body":"> <@jackworks:matrix.org> even it is used in multiple realms?\n\nI can’t understand a case where multiple realms would permit importing the same Module. It seems like it should typically throw.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24pjOi7b5FzUneNpSFg0LOELyI_CSegRkuBZkLQLkgj8o\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>even it is used in multiple realms?</blockquote></mx-reply>I can’t understand a case where multiple realms would permit importing the same Module. It seems like it should typically throw.","m.relates_to":{"m.in_reply_to":{"event_id":"$pjOi7b5FzUneNpSFg0LOELyI_CSegRkuBZkLQLkgj8o"}},"msgtype":"m.text"},"ts":1657343320977,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o_DYkWeGeOWdX60ShIEnNp332UwrnYmFAVFAgyy1Zgw"},
{"content":{"body":"> <@littledan:matrix.org> I can’t understand a case where multiple realms would permit importing the same Module. It seems like it should typically throw.\n\nCreate 2 modules in 2 realms, and the import hook returns the same module object, does that module return by the import hook evaluate twice? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$o_DYkWeGeOWdX60ShIEnNp332UwrnYmFAVFAgyy1Zgw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />I can’t understand a case where multiple realms would permit importing the same Module. It seems like it should typically throw.</blockquote></mx-reply>Create 2 modules in 2 realms, and the import hook returns the same module object, does that module return by the import hook evaluate twice?","m.relates_to":{"m.in_reply_to":{"event_id":"$o_DYkWeGeOWdX60ShIEnNp332UwrnYmFAVFAgyy1Zgw"}},"msgtype":"m.text"},"ts":1657343623928,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$GY818Xxo5lR3nZFxoLdOJacVkXLCQxX5KEdz2y80tsI"},
{"content":{"body":"My contention is that a well-behaved importHook would not do that ","format":"org.matrix.custom.html","formatted_body":"My contention is that a well-behaved importHook would not do that","msgtype":"m.text"},"ts":1657343997822,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eBNNrNEM51hh26ow4vJgfdsZLYfq8mf_KCgf-GUDgQs"},
{"content":{"body":"But it is possible ","msgtype":"m.text"},"ts":1657344087898,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$AcDVihrXF85F6xu6J-EX7dPrbYuMGQguTyL8TtWHw68"},
{"content":{"body":"It simplifies a lot of things to have each Module run at most once","msgtype":"m.text"},"ts":1657344145490,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MPDLr3ilM8d7wIi0FjsyXElbr5kY34YOCh1fc0moy0w"},
{"content":{"body":"It is possible to use a Proxy in a poorly behaved way. We will need to define some kind of semantics for this case, but it doesn’t need to be pretty/perfect IMO","msgtype":"m.text"},"ts":1657344202802,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vzKPSG-M1WAIgmdo-RdOKSw4MExaUr3cU_sd_LHQKiI"},
{"content":{"body":"* It is possible to use a Proxy in a poorly behaved way. We will need to define some kind of semantics for this case, but it doesn’t need to be pretty/perfect IMO","format":"org.matrix.custom.html","formatted_body":"* (null)","m.new_content":{"body":"It is possible to use a Proxy in a poorly behaved way. We will need to define some kind of semantics for this case, but it doesn’t need to be pretty/perfect IMO","msgtype":"m.text"},"m.relates_to":{"event_id":"$vzKPSG-M1WAIgmdo-RdOKSw4MExaUr3cU_sd_LHQKiI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657344207089,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hp-Q_BYtxn3OUpMN2fGb3My41a6ujcc540k93hz5zLc"},
{"content":{"body":"* It simplifies a lot of things to have each Module run at most once","format":"org.matrix.custom.html","formatted_body":"* (null)","m.new_content":{"body":"It simplifies a lot of things to have each Module run at most once","msgtype":"m.text"},"m.relates_to":{"event_id":"$MPDLr3ilM8d7wIi0FjsyXElbr5kY34YOCh1fc0moy0w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657344225079,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Bw1QFxwAYtxMMgYXrxRs1UIntGOXRA1F5lwTZNVBDf8"},
{"content":{"body":"You’re suggesting that the dynamic import from one realm would fail to import a module from a realm with the wrong [[Context]]? (This seems fine to me.)","msgtype":"m.text","org.matrix.msc1767.text":"You’re suggesting that the dynamic import from one realm would fail to import a module from a realm with the wrong [[Context]]? (This seems fine to me.)"},"ts":1657344274714,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Gxg0s7RG6ZWAXwlhWn2qgG3ZXCNX5dbBCo6myoCLM9w"},
{"content":{"body":"I too am fine with rough edges for same-origin-iframes. The language doesn’t set a high bar for sensible interactions with mixed intrinsics.","msgtype":"m.text","org.matrix.msc1767.text":"I too am fine with rough edges for same-origin-iframes. The language doesn’t set a high bar for sensible interactions with mixed intrinsics."},"ts":1657344351976,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$sEcQWKugQNAI2Dm6q4LoXwa6hQjOMR_zUuvh48a7_Gc"},
{"content":{"body":"+10000","msgtype":"m.text"},"ts":1657344458092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XiAGP2BDHY2mfWACbP3zFPcgXP0aXoPqWvAwE_00Hak"},
{"content":{"body":"We may want to think about if we want a generic mechanism to serialize a Module over a ShadowRealm boundary but the answer isn’t “it’s the same one”","msgtype":"m.text"},"ts":1657344506338,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZIUjpbuWcxFYq16QuB8BnsVtTF728sJezZD6MLhxpKs"},
{"content":{"body":"I’m also not sure that there’s any meaningful way to distinguish dynamic import of a module from one realm to another. My impression is that using dynamic import to kick off the module system is not much more than a cute way to spell `Module.prototype.importMe`. The module object is important, the `import` “function” doesn’t exist.","format":"org.matrix.custom.html","formatted_body":"I’m also not sure that there’s any meaningful way to distinguish dynamic import of a module from one realm to another. My impression is that using dynamic import to kick off the module system is not much more than a cute way to spell <code>Module.prototype.importMe</code>. The module object is important, the <code>import</code> “function” doesn’t exist.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’m also not sure that there’s any meaningful way to distinguish dynamic import of a module from one realm to another. My impression is that using dynamic import to kick off the module system is not much more than a cute way to spell `Module.prototype.importMe`. The module object is important, the `import` “function” doesn’t exist.","mimetype":"text/plain"},{"body":"I’m also not sure that there’s any meaningful way to distinguish dynamic import of a module from one realm to another. My impression is that using dynamic import to kick off the module system is not much more than a cute way to spell <code>Module.prototype.importMe</code>. The module object is important, the <code>import</code> “function” doesn’t exist.","mimetype":"text/html"}]},"ts":1657344599705,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZVOMDs5Q74Gw1IDRdcgfBjZW7cMcKadGu47WBDRfCTc"},
{"content":{"body":"Right, since this is done by the importHook","msgtype":"m.text"},"ts":1657344669612,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mOjOKSwuAcIw9iv1bP-OqOXjpKASm3jzzRq597NJnZs"},
{"content":{"body":"Caridy did pass an idea in my direction that the `import` syntax _could_ convey a referrer. I think we both realized that it shouldn’t.","format":"org.matrix.custom.html","formatted_body":"Caridy did pass an idea in my direction that the <code>import</code> syntax <em>could</em> convey a referrer. I think we both realized that it shouldn’t.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Caridy did pass an idea in my direction that the `import` syntax _could_ convey a referrer. I think we both realized that it shouldn’t.","mimetype":"text/plain"},{"body":"Caridy did pass an idea in my direction that the <code>import</code> syntax <em>could</em> convey a referrer. I think we both realized that it shouldn’t.","mimetype":"text/html"}]},"ts":1657344719249,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$vBQ5IcF26ZnzkEBzs5O0xSy8pWX_3Q-YhFFzfGu03rk"},
{"content":{"body":"There’s just no need since the module has an associated importMeta, and it would cause more problems than it would solve.","msgtype":"m.text","org.matrix.msc1767.text":"There’s just no need since the module has an associated importMeta, and it would cause more problems than it would solve."},"ts":1657344756431,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Q6DwkBo-UR-EBqvhlmce4BiFeJ450xzSb0hWJCLlqLs"},
{"content":{"body":"As much as I love dynamic scoping, this situation calls for lexical ","format":"org.matrix.custom.html","formatted_body":"As much as I love dynamic scoping, this situation calls for lexical","msgtype":"m.text"},"ts":1657344802977,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zVLBkVh30n6L4HhLuB26Y-kuRY1QOSQodefBFO7p4IQ"},
{"content":{"body":"Can’t tell if joke, but I’ll chuckle anyway.","msgtype":"m.text","org.matrix.msc1767.text":"Can’t tell if joke, but I’ll chuckle anyway."},"ts":1657344823723,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7nztqmnPXWBAidSU6tBg3NOONeKU1yT0aHWpbSFJY0Q"},
{"content":{"body":"I do love dynamic scoping… I don’t imagine I have many allies here in that","msgtype":"m.text"},"ts":1657344854621,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bV1dJWTJVvkJJYOhkGLsoR1uacN-0LEemdgd90SYRcM"},
{"content":{"body":"I might have been at some point. Maybe when I’m writing `bash`. I’d like to think I’d enjoy abusing gensyms and dynamic scope in Lisp.","format":"org.matrix.custom.html","formatted_body":"I might have been at some point. Maybe when I’m writing <code>bash</code>. I’d like to think I’d enjoy abusing gensyms and dynamic scope in Lisp.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I might have been at some point. Maybe when I’m writing `bash`. I’d like to think I’d enjoy abusing gensyms and dynamic scope in Lisp.","mimetype":"text/plain"},{"body":"I might have been at some point. Maybe when I’m writing <code>bash</code>. I’d like to think I’d enjoy abusing gensyms and dynamic scope in Lisp.","mimetype":"text/html"}]},"ts":1657344907693,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TARfMMGmgXu3_lkeHLSwA3fLk1vF-oK5DlgF8lZaBJI"},
{"content":{"body":"Good feature for doing donuts in the parking lot and feeling clever.","msgtype":"m.text","org.matrix.msc1767.text":"Good feature for doing donuts in the parking lot and feeling clever."},"ts":1657344955671,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0DWVBJrTxOffVhCzYGXcIsfG4maechLiOg1hDU2l96o"},
{"content":{"body":"Well it’s kinda what react-redux is based on, and I can’t think of a better design","msgtype":"m.text"},"ts":1657345052541,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1G_wnxOMlgw4LlBnkH7aNWIBaUpcEbhzQgze-DM7nZU"},
{"content":{"body":"Factor makes heavy use of dynamic scoping too… helps when you have a stack-based language ","format":"org.matrix.custom.html","formatted_body":"Factor makes heavy use of dynamic scoping too… helps when you have a stack-based language","msgtype":"m.text"},"ts":1657345078477,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yC920T_7yFOcQ-5Xe4VR-d173xENGZwSnLvmqcnpjiE"},
{"content":{"body":"What the hell, I’ll join you deep off-topic…","msgtype":"m.text","org.matrix.msc1767.text":"What the hell, I’ll join you deep off-topic…"},"ts":1657345136580,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Jkx6nxbAZkL0UG-NlwAbn9MjDj5fVUHIFmo3wd_37jE"},
{"content":{"body":"At some point when I was between jobs, I did an experimental component-based web framework I called Guten Tags.","msgtype":"m.text","org.matrix.msc1767.text":"At some point when I was between jobs, I did an experimental component-based web framework I called Guten Tags."},"ts":1657345176660,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Zxf1gwL7Vw8etmjidoQzSiqOH52cJVERP7ibh38uT9c"},
{"content":{"body":"It’s sort of a “What if HTML smelled more like Lisp”","msgtype":"m.text","org.matrix.msc1767.text":"It’s sort of a “What if HTML smelled more like Lisp”"},"ts":1657345224029,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0922nkz1Aon59URcSMTUMO5NzmhlGxZxfV1BCx1o2iA"},
{"content":{"body":"So a tag on one level was effectively a function application that produced a component at that position in the surrounding context.","msgtype":"m.text","org.matrix.msc1767.text":"So a tag on one level was effectively a function application that produced a component at that position in the surrounding context."},"ts":1657345267910,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fNv5jo2obp781N5PIGCMz48p_bdUIH1WhfioFwL-KaU"},
{"content":{"body":"And on the level below that, tags were arguments, which would produce fragments.","msgtype":"m.text","org.matrix.msc1767.text":"And on the level below that, tags were arguments, which would produce fragments."},"ts":1657345284686,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$x3INTi6ZzXSC_V8O9KZL5LHDLdz3E7mcXCAbt9ubgG8"},
{"content":{"body":"And you’d just import tags from other Guten Tag modules, which of course also looked like HTML.","msgtype":"m.text","org.matrix.msc1767.text":"And you’d just import tags from other Guten Tag modules, which of course also looked like HTML."},"ts":1657345325727,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9JbKGULfC9xzfJ7ml1HVJ18g9OtfuBBpBIqf9EEYnB8"},
{"content":{"body":"But it had a sort of hybrid of lexical and dynamic scoping inspired by CSS selectors like `:hover`.","format":"org.matrix.custom.html","formatted_body":"But it had a sort of hybrid of lexical and dynamic scoping inspired by CSS selectors like <code>:hover</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But it had a sort of hybrid of lexical and dynamic scoping inspired by CSS selectors like `:hover`.","mimetype":"text/plain"},{"body":"But it had a sort of hybrid of lexical and dynamic scoping inspired by CSS selectors like <code>:hover</code>.","mimetype":"text/html"}]},"ts":1657345376882,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rqbskdCIu_U-Q31KbPUIg2VZ5l1nsndtLCrKmlS1cww"},
{"content":{"body":"So, imagine that HTML element id’s are lexically scoped.","msgtype":"m.text","org.matrix.msc1767.text":"So, imagine that HTML element id’s are lexically scoped."},"ts":1657345409926,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jkHI7ObPAJdC_bzqdWOi4brAdD4ZnrimpqpiuFCKun8"},
{"content":{"body":"But HTML elements are just instances of fragments from a different lexical closure that has its own id namespace.","msgtype":"m.text","org.matrix.msc1767.text":"But HTML elements are just instances of fragments from a different lexical closure that has its own id namespace."},"ts":1657345461272,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dhdy4VRJsIGlkQFbbf21GzawoMqKNL-E5EECZVydNiM"},
{"content":{"body":"So, it had this notation that was like `lexicalId:dynamicId`","format":"org.matrix.custom.html","formatted_body":"So, it had this notation that was like <code>lexicalId:dynamicId</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, it had this notation that was like `lexicalId:dynamicId`","mimetype":"text/plain"},{"body":"So, it had this notation that was like <code>lexicalId:dynamicId</code>","mimetype":"text/html"}]},"ts":1657345495199,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TtV97v7cuLGE_qrN7aXcs32e-RlCm93xH2Bvg1suxT4"},
{"content":{"body":"Was sort-of like `<repeat id=loop value=todos><input type=\"text\" value=todos:iteration></repeat>`, where `iteration` was a name identified in the lexical scope of the repetition.","format":"org.matrix.custom.html","formatted_body":"Was sort-of like <code>&lt;repeat id=loop value=todos&gt;&lt;input type=&quot;text&quot; value=todos:iteration&gt;&lt;/repeat&gt;</code>, where <code>iteration</code> was a name identified in the lexical scope of the repetition.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Was sort-of like `<repeat id=loop value=todos><input type=\"text\" value=todos:iteration></repeat>`, where `iteration` was a name identified in the lexical scope of the repetition.","mimetype":"text/plain"},{"body":"Was sort-of like <code>&lt;repeat id=loop value=todos&gt;&lt;input type=&quot;text&quot; value=todos:iteration&gt;&lt;/repeat&gt;</code>, where <code>iteration</code> was a name identified in the lexical scope of the repetition.","mimetype":"text/html"}]},"ts":1657345649908,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NhreOAzqi6XCpgrl0WQuf00jLnhL83vW8ZLpa_11bi0"},
{"content":{"body":"That’d project into the real DOM as just a reactive sequence of inputs with their value reactively bound to the their respective iterand.","msgtype":"m.text","org.matrix.msc1767.text":"That’d project into the real DOM as just a reactive sequence of inputs with their value reactively bound to the their respective iterand."},"ts":1657345786694,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$z-M6wv8gH55RmkfxglVFj3XQ5HFHpVlmOOk9UYnu57I"},
{"content":{"body":"oh, looks like 3rd party SMR cannot fully emulate ES Module?","msgtype":"m.text","org.matrix.msc1767.text":"oh, looks like 3rd party SMR cannot fully emulate ES Module?"},"ts":1657374081406,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ojcrJSx45QrTTCcr-KMXdp88m-YsHhGokX-N3kPmTJ0"},
{"content":{"body":"consider this code:\n\n```js\n// a\nimport { f_b } from 'b'\nconsole.log(f_b)\nexport function f_a() {}\n\n// b\nimport { f_a } from 'a'\nconsole.log(f_a)\nexport function f_b() {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>consider this code:</p>\n<pre><code class=\"language-js\">// a\nimport { f_b } from 'b'\nconsole.log(f_b)\nexport function f_a() {}\n\n// b\nimport { f_a } from 'a'\nconsole.log(f_a)\nexport function f_b() {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"consider this code:\n\n```js\n// a\nimport { f_b } from 'b'\nconsole.log(f_b)\nexport function f_a() {}\n\n// b\nimport { f_a } from 'a'\nconsole.log(f_a)\nexport function f_b() {}\n```","mimetype":"text/plain"},{"body":"<p>consider this code:</p>\n<pre><code class=\"language-js\">// a\nimport { f_b } from 'b'\nconsole.log(f_b)\nexport function f_a() {}\n\n// b\nimport { f_a } from 'a'\nconsole.log(f_a)\nexport function f_b() {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657374144235,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9o9i4KX9EwX256HCrUDLAZPfaCHBArU9FiCliuvrOww"},
{"content":{"body":"It will be converted to:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>It will be converted to:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It will be converted to:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","mimetype":"text/plain"},{"body":"<p>It will be converted to:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657374302908,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$_Gc3Mmfj_j_ITOqLFvcXLop5RQU9V5MeBMTBiCUReGw"},
{"content":{"body":" * The best I can do using the ThirdPartyModuleRecord is this:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","m.new_content":{"body":"The best I can do using the ThirdPartyModuleRecord is this:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The best I can do using the ThirdPartyModuleRecord is this:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","mimetype":"text/plain"},{"body":"<p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_Gc3Mmfj_j_ITOqLFvcXLop5RQU9V5MeBMTBiCUReGw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The best I can do using the ThirdPartyModuleRecord is this:\n\n```js\nconst a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n```","mimetype":"text/plain"},{"body":" * <p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: &quot;f_a&quot; }, { import: &quot;f_b&quot;, from: &quot;b&quot; }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: &quot;f_b&quot; }, { import: &quot;f_a&quot;, from: &quot;a&quot; }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657374443413,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$My8gzEm2nMCLYA1d7FdGnjqiu4VStkQfAHZzzwViMJo"},
{"content":{"body":"> <@jackworks:matrix.org> The best I can do using the ThirdPartyModuleRecord is this:\n> \n> ```js\n> const a = {\n>     bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n>     initialize(env) {\n>         function f_a() {}\n>         env.f_a = f_a\n>         console.log(env.f_b)\n>     }\n> }\n> \n> const b = {\n>     bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n>     initialize(env) {\n>         function f_b() {}\n>         env.f_b = f_b\n>         console.log(env.f_a)\n>     }\n> }\n> ```\n\nThis cannot emulate the ES Module above, because it is basically the equivalent of `export let f_a = ...` instead of `export function f_a() ...`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_Gc3Mmfj_j_ITOqLFvcXLop5RQU9V5MeBMTBiCUReGw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n</blockquote></mx-reply>This cannot emulate the ES Module above, because it is basically the equivalent of <code>export let f_a = ...</code> instead of <code>export function f_a() ...</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$_Gc3Mmfj_j_ITOqLFvcXLop5RQU9V5MeBMTBiCUReGw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> The best I can do using the ThirdPartyModuleRecord is this:\n> \n> ```js\n> const a = {\n>     bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n>     initialize(env) {\n>         function f_a() {}\n>         env.f_a = f_a\n>         console.log(env.f_b)\n>     }\n> }\n> \n> const b = {\n>     bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n>     initialize(env) {\n>         function f_b() {}\n>         env.f_b = f_b\n>         console.log(env.f_a)\n>     }\n> }\n> ```\n\nThis cannot emulate the ES Module above, because it is basically the equivalent of `export let f_a = ...` instead of `export function f_a() ...`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_Gc3Mmfj_j_ITOqLFvcXLop5RQU9V5MeBMTBiCUReGw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>The best I can do using the ThirdPartyModuleRecord is this:</p>\n<pre><code class=\"language-js\">const a = {\n    bindings: [{ export: \"f_a\" }, { import: \"f_b\", from: \"b\" }],\n    initialize(env) {\n        function f_a() {}\n        env.f_a = f_a\n        console.log(env.f_b)\n    }\n}\n\nconst b = {\n    bindings: [{ export: \"f_b\" }, { import: \"f_a\", from: \"a\" }],\n    initialize(env) {\n        function f_b() {}\n        env.f_b = f_b\n        console.log(env.f_a)\n    }\n}\n</code></pre>\n</blockquote></mx-reply>This cannot emulate the ES Module above, because it is basically the equivalent of <code>export let f_a = ...</code> instead of <code>export function f_a() ...</code>","mimetype":"text/html"}]},"ts":1657374549048,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Xf1udU1xv14-kIKs4I78CNpNxxuwaD1bWO7WIZLYlE0"},
{"content":{"body":"And SystemJS format can emulate this behavior:\n\n```js\nSystem.register([\n    \"b\"\n], function(_export, _context) {\n    \"use strict\";\n    var f_b;\n    function f_a() {}\n    _export(\"f_a\", f_a);\n    return {\n        setters: [\n            function(_b) {\n                f_b = _b.f_b;\n            }\n        ],\n        execute: function() {\n            console.log(f_b);\n        }\n    };\n});\n```\n\nThere are 2 stages in system js, the hoisted function declaration is set in stage 1, and the actual runtime code is run in stage 2 (`execute`).","format":"org.matrix.custom.html","formatted_body":"<p>And SystemJS format can emulate this behavior:</p>\n<pre><code class=\"language-js\">System.register([\n    &quot;b&quot;\n], function(_export, _context) {\n    &quot;use strict&quot;;\n    var f_b;\n    function f_a() {}\n    _export(&quot;f_a&quot;, f_a);\n    return {\n        setters: [\n            function(_b) {\n                f_b = _b.f_b;\n            }\n        ],\n        execute: function() {\n            console.log(f_b);\n        }\n    };\n});\n</code></pre>\n<p>There are 2 stages in system js, the hoisted function declaration is set in stage 1, and the actual runtime code is run in stage 2 (<code>execute</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And SystemJS format can emulate this behavior:\n\n```js\nSystem.register([\n    \"b\"\n], function(_export, _context) {\n    \"use strict\";\n    var f_b;\n    function f_a() {}\n    _export(\"f_a\", f_a);\n    return {\n        setters: [\n            function(_b) {\n                f_b = _b.f_b;\n            }\n        ],\n        execute: function() {\n            console.log(f_b);\n        }\n    };\n});\n```\n\nThere are 2 stages in system js, the hoisted function declaration is set in stage 1, and the actual runtime code is run in stage 2 (`execute`).","mimetype":"text/plain"},{"body":"<p>And SystemJS format can emulate this behavior:</p>\n<pre><code class=\"language-js\">System.register([\n    &quot;b&quot;\n], function(_export, _context) {\n    &quot;use strict&quot;;\n    var f_b;\n    function f_a() {}\n    _export(&quot;f_a&quot;, f_a);\n    return {\n        setters: [\n            function(_b) {\n                f_b = _b.f_b;\n            }\n        ],\n        execute: function() {\n            console.log(f_b);\n        }\n    };\n});\n</code></pre>\n<p>There are 2 stages in system js, the hoisted function declaration is set in stage 1, and the actual runtime code is run in stage 2 (<code>execute</code>).</p>\n","mimetype":"text/html"}]},"ts":1657374647856,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FVVKZJo3RgxGTJPfDHqS6R6k-QaaW6lu5hrdEytSWvc"},
{"content":{"body":"I wonder if we can solve this problem in ThirdPartyModuleRecord (or it's new name `VirtualModule`?)","format":"org.matrix.custom.html","formatted_body":"I wonder if we can solve this problem in ThirdPartyModuleRecord (or it's new name <code>VirtualModule</code>?)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder if we can solve this problem in ThirdPartyModuleRecord (or it's new name `VirtualModule`?)","mimetype":"text/plain"},{"body":"I wonder if we can solve this problem in ThirdPartyModuleRecord (or it's new name <code>VirtualModule</code>?)","mimetype":"text/html"}]},"ts":1657374709057,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$96hK_57a6Z7iCBwdtQo7OIG5eQpM8skYISBvEQneEzk"},
{"content":{"body":"Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","format":"org.matrix.custom.html","formatted_body":"Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","mimetype":"text/plain"},{"body":"Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","mimetype":"text/html"}]},"ts":1657375187523,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SvnB_cS8135XIuNMA8BD8TJio_pTas7g3AiuDKMtdSE"},
{"content":{"body":" * Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","format":"org.matrix.custom.html","formatted_body":" * Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","m.new_content":{"body":"Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","format":"org.matrix.custom.html","formatted_body":"Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","mimetype":"text/plain"},{"body":"Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$SvnB_cS8135XIuNMA8BD8TJio_pTas7g3AiuDKMtdSE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Also, I cannot emulate both `export var` (No TDZ) and `export let` (TDZ) without 2 stage initialization","mimetype":"text/plain"},{"body":" * Also, I cannot emulate both <code>export var</code> (No TDZ) and <code>export let</code> (TDZ) without 2 stage initialization","mimetype":"text/html"}]},"ts":1657375197951,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LRq02QDxUy2f88KGZPBmLiXal9S8ee1chJCFAdueLy0"}
]