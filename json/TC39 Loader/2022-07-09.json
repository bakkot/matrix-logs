[
{"content":{"body":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","msgtype":"m.text","org.matrix.msc1767.text":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"ts":1657327522808,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aTtgVor5Wc8wsWA8zkUQIRRmwEuXT3GFjyBIkwfHmCc"},
{"content":{"body":" * I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","m.new_content":{"body":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","msgtype":"m.text","org.matrix.msc1767.text":"I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"m.relates_to":{"event_id":"$aTtgVor5Wc8wsWA8zkUQIRRmwEuXT3GFjyBIkwfHmCc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I’m working on a sketch of what a user code Compartment looks like through the lens of Module, ModuleSource, and ExecutionContext https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"ts":1657327529908,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$AOhlC0dfIu5HQAlyMDzxRzM6Z6vY2HoD-XzIirXBeNM"},
{"content":{"body":"Have a question","msgtype":"m.text","org.matrix.msc1767.text":"Have a question"},"ts":1657336918290,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Fs1-PIxtcsXhcaGm8Hf_uEnul3aKxrnPqdoBoVxHFss"},
{"content":{"body":"for example, I have a `const a = new Module(source, hook, meta)`","format":"org.matrix.custom.html","formatted_body":"for example, I have a <code>const a = new Module(source, hook, meta)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, I have a `const a = new Module(source, hook, meta)`","mimetype":"text/plain"},{"body":"for example, I have a <code>const a = new Module(source, hook, meta)</code>","mimetype":"text/html"}]},"ts":1657336946025,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$b9rFrcLu33tAtrBiHi2wVT63OgQQncbWi3oplDFo_xE"},
{"content":{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"ts":1657337000646,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$uvHQMUAbUAH12oJDeNcpP_rBnM8FVSio1lWg2aU25Jw"},
{"content":{"body":" * in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":" * in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","m.new_content":{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","format":"org.matrix.custom.html","formatted_body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":"in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uvHQMUAbUAH12oJDeNcpP_rBnM8FVSio1lWg2aU25Jw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * in which level it will execute twice? in different Realm? or in different `Module` constructor?","mimetype":"text/plain"},{"body":" * in which level it will execute twice? in different Realm? or in different <code>Module</code> constructor?","mimetype":"text/html"}]},"ts":1657337007237,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$v4uGSjo3grX3j1irl6D2IDAO3JTcKc_4BRYSxnh-2TE"},
{"content":{"body":"Once per object identity.","msgtype":"m.text","org.matrix.msc1767.text":"Once per object identity."},"ts":1657337748302,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8OuCnDOwqu19cATbojL5xuveT0xOVjI9bYPkKWDVWJk"},
{"content":{"body":"even it is used in multiple realms?","msgtype":"m.text","org.matrix.msc1767.text":"even it is used in multiple realms?"},"ts":1657339119318,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$pjOi7b5FzUneNpSFg0LOELyI_CSegRkuBZkLQLkgj8o"},
{"content":{"body":"That is my understanding.","msgtype":"m.text","org.matrix.msc1767.text":"That is my understanding."},"ts":1657339132904,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Aq4iFfrn3_SxTWiKYVYVufhfxetEhCDFurY9KxWFQAE"},
{"content":{"body":"My understanding at the moment is that a module block corresponds to a `Module` instance, so locally it will only initialize once. But, every time a `Module` gets serialized and deserialized, it emerges as a new `Module` instance on the far side. The only parts of the module instance that are serialized are the `source` and `importMeta`, to the extent that `importMeta` is serializable, and the module instance is not memoized by the receiver.","format":"org.matrix.custom.html","formatted_body":"My understanding at the moment is that a module block corresponds to a <code>Module</code> instance, so locally it will only initialize once. But, every time a <code>Module</code> gets serialized and deserialized, it emerges as a new <code>Module</code> instance on the far side. The only parts of the module instance that are serialized are the <code>source</code> and <code>importMeta</code>, to the extent that <code>importMeta</code> is serializable, and the module instance is not memoized by the receiver.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My understanding at the moment is that a module block corresponds to a `Module` instance, so locally it will only initialize once. But, every time a `Module` gets serialized and deserialized, it emerges as a new `Module` instance on the far side. The only parts of the module instance that are serialized are the `source` and `importMeta`, to the extent that `importMeta` is serializable, and the module instance is not memoized by the receiver.","mimetype":"text/plain"},{"body":"My understanding at the moment is that a module block corresponds to a <code>Module</code> instance, so locally it will only initialize once. But, every time a <code>Module</code> gets serialized and deserialized, it emerges as a new <code>Module</code> instance on the far side. The only parts of the module instance that are serialized are the <code>source</code> and <code>importMeta</code>, to the extent that <code>importMeta</code> is serializable, and the module instance is not memoized by the receiver.","mimetype":"text/html"}]},"ts":1657339177752,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Y8y-HPCF4DrNOnk-2hu8nnTYENykJ9B9SgETGpxnCuk"}
]