[
{"content":{"body":"thanks kris, you represented it really well -- listening to the feedback section now","msgtype":"m.text","org.matrix.msc1767.text":"thanks kris, you represented it really well -- listening to the feedback section now"},"ts":1668066615922,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2mk2U584YtZ-l8yYa1hxReG18T3dboSBmOD1K3Q2Glk"},
{"content":{"body":"I'm curious, does the re-entrancy problem discussed, or the potential of it, also exist in dynamic import? because by the time you can trigger a lazy module that operates on an already imported module, is if you are at the ancestor module that imports both. that means that C has already evaluated, and it's state is set. B is similar to an async dynamic import, but without the async tick. Why does the re-entrancy hazard come up only in the case where there is no async tick?","msgtype":"m.text","org.matrix.msc1767.text":"I'm curious, does the re-entrancy problem discussed, or the potential of it, also exist in dynamic import? because by the time you can trigger a lazy module that operates on an already imported module, is if you are at the ancestor module that imports both. that means that C has already evaluated, and it's state is set. B is similar to an async dynamic import, but without the async tick. Why does the re-entrancy hazard come up only in the case where there is no async tick?"},"ts":1668068248043,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$T57Ywfo0sWL4_-paPZl3Kfy1FISedF9N1Unu-S8PD7w"},
{"content":{"body":"I think I don't quite understand what the hazard is, curious to hear more","msgtype":"m.text","org.matrix.msc1767.text":"I think I don't quite understand what the hazard is, curious to hear more"},"ts":1668068377691,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VtZpIVe95zCjA3DCox18qiONC7OEXo1SyGWTfjN5E5Y"},
{"content":{"body":"as for providing a low level api, yes this is also a possibility. I think there is benefit to having syntax however, because even within firefox we had 3 separate implementations and that is just in one code base. One used common js, one used our JSM loader, and one was iirc a mix of the two","msgtype":"m.text","org.matrix.msc1767.text":"as for providing a low level api, yes this is also a possibility. I think there is benefit to having syntax however, because even within firefox we had 3 separate implementations and that is just in one code base. One used common js, one used our JSM loader, and one was iirc a mix of the two"},"ts":1668068441435,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$vcFj6TnNc8eqieu-R5i8O9IF8qGh0OHTURLqKISE0Uc"},
{"content":{"body":"I can also write mark directly about this, I just haven't had time","msgtype":"m.text","org.matrix.msc1767.text":"I can also write mark directly about this, I just haven't had time"},"ts":1668068509234,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$UqoPGjy5HfGM49AHE8usbZuymzF3EDe6LWNT3TBMZ5Q"},
{"content":{"body":"Reentrancy can only occur when one module’s stack runs on another module’s stack. Even with dynamic import today, there is no such possibility.","msgtype":"m.text","org.matrix.msc1767.text":"Reentrancy can only occur when one module’s stack runs on another module’s stack. Even with dynamic import today, there is no such possibility."},"ts":1668087901653,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Z4tIIwhds_RRna-aYTgodj9GmEPHfnxgiiGf1yjc5LI"},
{"content":{"body":"So the shape of a reentrancy hazard in composition with deferred (synchronous) import would necessarily involve a callback. We haven’t yet successfully formulated a case where there’s an observable behavior difference, but we’re betting that there is one. I think we’re less sure that it constitutes a hazard.","msgtype":"m.text","org.matrix.msc1767.text":"So the shape of a reentrancy hazard in composition with deferred (synchronous) import would necessarily involve a callback. We haven’t yet successfully formulated a case where there’s an observable behavior difference, but we’re betting that there is one. I think we’re less sure that it constitutes a hazard."},"ts":1668088115363,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zsfHWHhoWPUaIgYznFJHCTd04Rl2LewI2Nj_Lt-BRfM"},
{"content":{"body":"And we’re looking for composition hazards, not security hazards.","msgtype":"m.text","org.matrix.msc1767.text":"And we’re looking for composition hazards, not security hazards."},"ts":1668088168888,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bzXY1DoMTvkTS8n7stV1uUm1T5fxjUkmcUi_aXBZ12Q"},
{"content":{"body":"Kris Kowal: calling a function in a cycle to a module that is not already executed sounds like the same issue to me?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: calling a function in a cycle to a module that is not already executed sounds like the same issue to me?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: calling a function in a cycle to a module that is not already executed sounds like the same issue to me?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: calling a function in a cycle to a module that is not already executed sounds like the same issue to me?","mimetype":"text/html"}]},"ts":1668095853297,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$AIfL-YjiWN6gsZQZleazI8IYRH80ryH56568-lAytWE"},
{"content":{"body":"a.js -> b.js -> a.js something like `import { bfn } from './b.js'; export function afn () {};` and `import { afn } from './a.js'; export function bfn () {}; afn('called before executed')`","format":"org.matrix.custom.html","formatted_body":"a.js -&gt; b.js -&gt; a.js something like <code>import { bfn } from './b.js'; export function afn () {};</code> and <code>import { afn } from './a.js'; export function bfn () {}; afn('called before executed')</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a.js -> b.js -> a.js something like `import { bfn } from './b.js'; export function afn () {};` and `import { afn } from './a.js'; export function bfn () {}; afn('called before executed')`","mimetype":"text/plain"},{"body":"a.js -&gt; b.js -&gt; a.js something like <code>import { bfn } from './b.js'; export function afn () {};</code> and <code>import { afn } from './a.js'; export function bfn () {}; afn('called before executed')</code>","mimetype":"text/html"}]},"ts":1668096000731,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Xh04P9d4Cj84PP5FGT3Yfqyn0l8cEOMyoHjljY3zKNw"},
{"content":{"body":"Similar. With a cycle, every module necessarily participates in the cycle voluntarily. The question is whether a set of modules can be correct in isolation and break when a deferred import gets introduced.","msgtype":"m.text","org.matrix.msc1767.text":"Similar. With a cycle, every module necessarily participates in the cycle voluntarily. The question is whether a set of modules can be correct in isolation and break when a deferred import gets introduced."},"ts":1668099414208,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gJdfuedzXCwxNtI1-WCCFHVEzS71k8pNESu_y8BcC94"},
{"content":{"body":"Acutally is it even the same with the cycle stuff since what one is executing is an interior function as opposed to the outer evaluation scope","msgtype":"m.text","org.matrix.msc1767.text":"Acutally is it even the same with the cycle stuff since what one is executing is an interior function as opposed to the outer evaluation scope"},"ts":1668101703626,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ZHkBMadPypf2uZzMCgVAXk0xAUFDAu91v2wlpzBJcJw"},
{"content":{"body":"I can appreciate that is a difference, thanks for explaining! I think I've got it...","msgtype":"m.text","org.matrix.msc1767.text":"I can appreciate that is a difference, thanks for explaining! I think I've got it..."},"ts":1668101719764,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$mJLiDidat7xQwMdw4HXhGz1Xy2ETJe-5RGYzdBp1aMM"},
{"content":{"body":"that said, I think this is very much a fundamental tradeoff of the concept of sync deferred evaluation itself, as opposed to being a design concern","msgtype":"m.text","org.matrix.msc1767.text":"that said, I think this is very much a fundamental tradeoff of the concept of sync deferred evaluation itself, as opposed to being a design concern"},"ts":1668101751570,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$GgdVR8hyM0823Q85cmw03YvAqW18ck7NdB2ZAgnowr8"},
{"content":{"body":"Do you take design concern in this case to mean a point on which multiple avenues are possible that fulfill the requirements of deferred evaluation?","msgtype":"m.text","org.matrix.msc1767.text":"Do you take design concern in this case to mean a point on which multiple avenues are possible that fulfill the requirements of deferred evaluation?"},"ts":1668102249542,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-CyuWZAVFvlKuTxLfMdrvee-UQzaOQl8FkaQHI2CIuY"},
{"content":{"body":"Also, I take for granted that if there is a hazard inherent to deferred evaluation, this hazard is intrinsic to CommonJS, and nobody’s told me about a bad experience yet.","msgtype":"m.text","org.matrix.msc1767.text":"Also, I take for granted that if there is a hazard inherent to deferred evaluation, this hazard is intrinsic to CommonJS, and nobody’s told me about a bad experience yet."},"ts":1668102371037,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MN-7NJ0cC0284oOxlIZFzBAYSmRovNah6YB103pVZgI"}
]