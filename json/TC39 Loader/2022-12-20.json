[
{"content":{"body":"I'll join the meeting ~10 minutes late","msgtype":"m.text"},"ts":1671555460420,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W5_VlQEELHA0-QZjrVXaMveWG1GRZrUL2NpGENfM_EQ"},
{"content":{"body":"The latest iteration of the syntax proposal as discussed:\n\nhttps://gist.github.com/lucacasonato/6f7db6a449fd7e047999343810309ca0\n\n- Only \"as\" is part of the cache key and it is interpreted exclusively by the host hook. It can be any primitive (including records & tuples when they ship).\n- All other keys in the import options are not cache keys, and are defined and interpreted exclusively by ECMA262. They are never passed to host hooks or the compartments import hook.\n\n","format":"org.matrix.custom.html","formatted_body":"<p>The latest iteration of the syntax proposal as discussed:</p>\n<p>https://gist.github.com/lucacasonato/6f7db6a449fd7e047999343810309ca0</p>\n<ul>\n<li>Only &quot;as&quot; is part of the cache key and it is interpreted exclusively by the host hook. It can be any primitive (including records &amp; tuples when they ship).</li>\n<li>All other keys in the import options are not cache keys, and are defined and interpreted exclusively by ECMA262. They are never passed to host hooks or the compartments import hook.</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The latest iteration of the syntax proposal as discussed:\n\nhttps://gist.github.com/lucacasonato/6f7db6a449fd7e047999343810309ca0\n\n- Only \"as\" is part of the cache key and it is interpreted exclusively by the host hook. It can be any primitive (including records & tuples when they ship).\n- All other keys in the import options are not cache keys, and are defined and interpreted exclusively by ECMA262. They are never passed to host hooks or the compartments import hook.\n\n","mimetype":"text/plain"},{"body":"<p>The latest iteration of the syntax proposal as discussed:</p>\n<p>https://gist.github.com/lucacasonato/6f7db6a449fd7e047999343810309ca0</p>\n<ul>\n<li>Only &quot;as&quot; is part of the cache key and it is interpreted exclusively by the host hook. It can be any primitive (including records &amp; tuples when they ship).</li>\n<li>All other keys in the import options are not cache keys, and are defined and interpreted exclusively by ECMA262. They are never passed to host hooks or the compartments import hook.</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1671561624419,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$k8RCPPJsVDvEAk5YENu0qpsYaKeJpsnBYn-tIbUNVyc"},
{"content":{"body":"Justin Ridgewell, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an `as <primitive>` + records and tuples as primitives would suffice.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an <code>as &lt;primitive&gt;</code> + records and tuples as primitives would suffice.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an `as <primitive>` + records and tuples as primitives would suffice.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an <code>as &lt;primitive&gt;</code> + records and tuples as primitives would suffice.","mimetype":"text/html"}]},"ts":1671562876683,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zIyUV0B_ySd5GTr_oiTuuurks_3EsVN7hPJY6W1ajWc"},
{"content":{"body":"Let’s get this written up in our minutes. Thank you Luca Casonato ","format":"org.matrix.custom.html","formatted_body":"Let’s get this written up in our minutes. Thank you <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Let’s get this written up in our minutes. Thank you Luca Casonato ","mimetype":"text/plain"},{"body":"Let’s get this written up in our minutes. Thank you <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","mimetype":"text/html"}]},"ts":1671562890487,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fs_jLu8seYWJpjD5knsyFz6veM5sXOQFYRfjzvuQwsk"},
{"content":{"body":"huh, what's the rationale for the # being in the syntax?","msgtype":"m.text","org.matrix.msc1767.text":"huh, what's the rationale for the # being in the syntax?"},"ts":1671563692143,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jetYVgtpabvXP6noi72MNwcgr-JgtjjHRfXmgm-AtK8"},
{"content":{"body":"not all primitives can be included (e.g., symbols can't) so conceiving of this as \"primitives\" seems a little funny","msgtype":"m.text","org.matrix.msc1767.text":"not all primitives can be included (e.g., symbols can't) so conceiving of this as \"primitives\" seems a little funny"},"ts":1671563729482,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zfr3U9Iy9YZ7swfb_qMyma0dy6HnNFctHcCgFnZtf50"},
{"content":{"body":"The reified value corresponding to the syntax must be a primitive.","msgtype":"m.text","org.matrix.msc1767.text":"The reified value corresponding to the syntax must be a primitive."},"ts":1671563780314,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_0lMfWFqNnHwjguijT_kBv28IhfcqHGeOHGWIlKRBd4"},
{"content":{"body":"ah, OK, why?","msgtype":"m.text","org.matrix.msc1767.text":"ah, OK, why?"},"ts":1671563788594,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Rpz-3U3nBpEH7HE2UHseT91ZEBuuv2StGdCy54l042g"},
{"content":{"body":"In order to ensure that the cache key is canonical.","msgtype":"m.text","org.matrix.msc1767.text":"In order to ensure that the cache key is canonical."},"ts":1671563809909,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IMWL-gMy9D0x7zalJX0YTqzdOgIRZ2n5WKAHVqK8pP8"},
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1671563827252,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gSvHn3aoh5w9VgqWvi29a78rjmW6d6H4RHIAubAklio"},
{"content":{"body":"Also, given that this is occurring pre-evaluating, that imposes some limits on what’s expressible.","msgtype":"m.text","org.matrix.msc1767.text":"Also, given that this is occurring pre-evaluating, that imposes some limits on what’s expressible."},"ts":1671563837754,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LH1E8WmvAmNBrkCDkXHOomckIu-64caUBufnOjFXlfI"},
{"content":{"body":"well.... we should keep in mind the possibility that R&T won't go to Stage 3 in their current form","msgtype":"m.text","org.matrix.msc1767.text":"well.... we should keep in mind the possibility that R&T won't go to Stage 3 in their current form"},"ts":1671563857541,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HFuJb6OuqxUpqH0X9O-Np86Onr02tCuxyba0TmRgd10"},
{"content":{"body":"I don't even know if we have consensus on having any kind of syntax for them, at this point.","msgtype":"m.text","org.matrix.msc1767.text":"I don't even know if we have consensus on having any kind of syntax for them, at this point."},"ts":1671563874475,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XGzFF3O_rkJHVsU2D7uFeBCyZTZqwFcrqF1PgEI1sYU"},
{"content":{"body":"That is to say, however the value is lifted off the page, it has to occur in the parse phase, not the evaluation phase, and not in a lexical scope, so what’s expressible is inherently limited. I don’t have strong feelings about how that’s expressed syntactically.","msgtype":"m.text","org.matrix.msc1767.text":"That is to say, however the value is lifted off the page, it has to occur in the parse phase, not the evaluation phase, and not in a lexical scope, so what’s expressible is inherently limited. I don’t have strong feelings about how that’s expressed syntactically."},"ts":1671563891887,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZXFgZx9d-O-cbSj6tejPSOZ6NquE-af5iK3NPwhHEd0"},
{"content":{"body":"Yeah, we’re aware that this is precarious.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, we’re aware that this is precarious."},"ts":1671563918959,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$48rDHa5WGZZGWECz06q4M3fmJsYk0Uu9SEmzz--J2bw"},
{"content":{"body":"(R&T syntax obviously doesn't imply that it doesn't contain expressions)","msgtype":"m.text","org.matrix.msc1767.text":"(R&T syntax obviously doesn't imply that it doesn't contain expressions)"},"ts":1671563995265,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m7Z31FFcp9xcdOfSiPQYZXJSJHB1WNmrzyU-kLUhFFM"},
{"content":{"body":"As solutions go, this so far uniquely addresses all the concerns of both cache key formation, separation of the cache key namespace from non-cache key namespace, and extensibility in bundlers such that the portions participating in the cache key are visible to importHook.","msgtype":"m.text","org.matrix.msc1767.text":"As solutions go, this so far uniquely addresses all the concerns of both cache key formation, separation of the cache key namespace from non-cache key namespace, and extensibility in bundlers such that the portions participating in the cache key are visible to importHook."},"ts":1671564001153,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SQZwNTLXaXHs-pm5OUQVYakOfY0hAJuIpswZg6iABjI"},
{"content":{"body":"also why not : after as? does that indicate that it's part of the cache key?","msgtype":"m.text","org.matrix.msc1767.text":"also why not : after as? does that indicate that it's part of the cache key?"},"ts":1671564009567,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JinQkxwgX2Ni9ITuGlHSVljn3BfeTK_uZcjz6uaEUHY"},
{"content":{"body":" * also why not : after as? does that indicate that it's part of the cache key?","m.new_content":{"body":"also why not : after as? does that indicate that it's part of the cache key?","msgtype":"m.text","org.matrix.msc1767.text":"also why not : after as? does that indicate that it's part of the cache key?"},"m.relates_to":{"event_id":"$JinQkxwgX2Ni9ITuGlHSVljn3BfeTK_uZcjz6uaEUHY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * also why not : after as? does that indicate that it's part of the cache key?"},"ts":1671564020446,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p6mSQ9ER51jb9pQgC5n5_LhnqPsF2dwZDKgNCXhRvbw"},
{"content":{"body":"Yes, `as` indicates both that it participates in the cache key, allows for composite cache keys, and threading to import hook.","format":"org.matrix.custom.html","formatted_body":"Yes, <code>as</code> indicates both that it participates in the cache key, allows for composite cache keys, and threading to import hook.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, `as` indicates both that it participates in the cache key, allows for composite cache keys, and threading to import hook.","mimetype":"text/plain"},{"body":"Yes, <code>as</code> indicates both that it participates in the cache key, allows for composite cache keys, and threading to import hook.","mimetype":"text/html"}]},"ts":1671564034484,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lLhhXXjb9B6svSrrhFICr4rdr8hoytoVffqEoT8mXaw"},
{"content":{"body":"well, I'm not sure if using the : for the other keys does a great job indicating that visually","msgtype":"m.text","org.matrix.msc1767.text":"well, I'm not sure if using the : for the other keys does a great job indicating that visually"},"ts":1671564056011,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C_XvSYNsGyK15SEki-aZlGCMfMkF8Opog5sk8mayBYo"},
{"content":{"body":"as opposed to just, remembering the name","msgtype":"m.text","org.matrix.msc1767.text":"as opposed to just, remembering the name"},"ts":1671564067438,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uw5-lteStMSbPhQzAeanQa0gYHe9dVm0npW8uoGIqAc"},
{"content":{"body":"Using the colon is not germane, I think.","msgtype":"m.text","org.matrix.msc1767.text":"Using the colon is not germane, I think."},"ts":1671564076224,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ge-_7ZF0W1bFDYXF9PV9qD9EIG0CZ9tjEwmaHhFMcWs"},
{"content":{"body":"anyway: I'm happy with the general design of having `as` participate in the cache key, and the other keys are defined by ecma262 and do not","format":"org.matrix.custom.html","formatted_body":"anyway: I'm happy with the general design of having <code>as</code> participate in the cache key, and the other keys are defined by ecma262 and do not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"anyway: I'm happy with the general design of having `as` participate in the cache key, and the other keys are defined by ecma262 and do not","mimetype":"text/plain"},{"body":"anyway: I'm happy with the general design of having <code>as</code> participate in the cache key, and the other keys are defined by ecma262 and do not","mimetype":"text/html"}]},"ts":1671564100978,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kboNR8HS0grUFtxjd6sAc7gTchx-yba4C6yn0hHpCK8"},
{"content":{"body":"That is to say, we’re looking for any syntactic solution with the properties:\n1. distinguishes cache key from not\n2. if cache key, also visible to import hook\n3. cache key is extensible\n4. cache key canonicalizes order","format":"org.matrix.custom.html","formatted_body":"<p>That is to say, we’re looking for any syntactic solution with the properties:</p>\n<ol>\n<li>distinguishes cache key from not</li>\n<li>if cache key, also visible to import hook</li>\n<li>cache key is extensible</li>\n<li>cache key canonicalizes order</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That is to say, we’re looking for any syntactic solution with the properties:\n1. distinguishes cache key from not\n2. if cache key, also visible to import hook\n3. cache key is extensible\n4. cache key canonicalizes order","mimetype":"text/plain"},{"body":"<p>That is to say, we’re looking for any syntactic solution with the properties:</p>\n<ol>\n<li>distinguishes cache key from not</li>\n<li>if cache key, also visible to import hook</li>\n<li>cache key is extensible</li>\n<li>cache key canonicalizes order</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1671564143391,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jWxreYI2gvZCXRNi3bNXVt0kPwflug5yHy5abpihlgc"},
{"content":{"body":"Should we still design things (e.g., import()'s second arg, the thing passed to importHook) to allow more keys in the cache besides `as`, even if we don't define them yet?","format":"org.matrix.custom.html","formatted_body":"Should we still design things (e.g., import()'s second arg, the thing passed to importHook) to allow more keys in the cache besides <code>as</code>, even if we don't define them yet?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Should we still design things (e.g., import()'s second arg, the thing passed to importHook) to allow more keys in the cache besides `as`, even if we don't define them yet?","mimetype":"text/plain"},{"body":"Should we still design things (e.g., import()'s second arg, the thing passed to importHook) to allow more keys in the cache besides <code>as</code>, even if we don't define them yet?","mimetype":"text/html"}]},"ts":1671564161472,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aHaPf96oK-9vQbWwrLyDIGZdPOzYOl5EfRI66g7swQQ"},
{"content":{"body":"We also have general support among participants that dynamic `import(x, bag)` corresponds 1:1 to a shallow static import syntax managed by 262.","format":"org.matrix.custom.html","formatted_body":"We also have general support among participants that dynamic <code>import(x, bag)</code> corresponds 1:1 to a shallow static import syntax managed by 262.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We also have general support among participants that dynamic `import(x, bag)` corresponds 1:1 to a shallow static import syntax managed by 262.","mimetype":"text/plain"},{"body":"We also have general support among participants that dynamic <code>import(x, bag)</code> corresponds 1:1 to a shallow static import syntax managed by 262.","mimetype":"text/html"}]},"ts":1671564194919,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$m6QWdq8EcFG04uJm6SZdbE4fYK4L67xtC01QQtLoUlQ"},
{"content":{"body":"Yes. That’s the direction supported by everyone on the call.","msgtype":"m.text","org.matrix.msc1767.text":"Yes. That’s the direction supported by everyone on the call."},"ts":1671564228054,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KQvT4Nhk-TNRC8I9ZhV7xSgnlPua-4A2ERTM7OfkHVg"},
{"content":{"body":"> <@kriskowal:matrix.org> We also have general support among participants that dynamic `import(x, bag)` corresponds 1:1 to a shallow static import syntax managed by 262.\n\nI see, that sounds ideal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$m6QWdq8EcFG04uJm6SZdbE4fYK4L67xtC01QQtLoUlQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We also have general support among participants that dynamic <code>import(x, bag)</code> corresponds 1:1 to a shallow static import syntax managed by 262.</blockquote></mx-reply>I see, that sounds ideal","m.relates_to":{"m.in_reply_to":{"event_id":"$m6QWdq8EcFG04uJm6SZdbE4fYK4L67xtC01QQtLoUlQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> We also have general support among participants that dynamic `import(x, bag)` corresponds 1:1 to a shallow static import syntax managed by 262.\n\nI see, that sounds ideal","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$m6QWdq8EcFG04uJm6SZdbE4fYK4L67xtC01QQtLoUlQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We also have general support among participants that dynamic <code>import(x, bag)</code> corresponds 1:1 to a shallow static import syntax managed by 262.</blockquote></mx-reply>I see, that sounds ideal","mimetype":"text/html"}]},"ts":1671564235732,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5BohKzi46JDbaySj32P0135WSmxkJnCy8SSTxMU0QCg"},
{"content":{"body":"yeah this sounds like a huge amount of progress that you all made","msgtype":"m.text","org.matrix.msc1767.text":"yeah this sounds like a huge amount of progress that you all made"},"ts":1671564274954,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nuAxsKA_UIm8tHfbpDE4YWlq-DFyZwfQft0EFr8HUOg"},
{"content":{"body":"who were the attendees participating in the agreement?","msgtype":"m.text","org.matrix.msc1767.text":"who were the attendees participating in the agreement?"},"ts":1671564282979,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jfjfaqpIxEcr-VYIN42BApI2TGUgu0M2xppVSH131eA"},
{"content":{"body":"That is to say, what gets plucked from the options bag is determined by 262, and anything else would presumably get ignored. What gets threaded to importHook is just specifier and `as`. Every other key has behavior well-defined in 262.","format":"org.matrix.custom.html","formatted_body":"That is to say, what gets plucked from the options bag is determined by 262, and anything else would presumably get ignored. What gets threaded to importHook is just specifier and <code>as</code>. Every other key has behavior well-defined in 262.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That is to say, what gets plucked from the options bag is determined by 262, and anything else would presumably get ignored. What gets threaded to importHook is just specifier and `as`. Every other key has behavior well-defined in 262.","mimetype":"text/plain"},{"body":"That is to say, what gets plucked from the options bag is determined by 262, and anything else would presumably get ignored. What gets threaded to importHook is just specifier and <code>as</code>. Every other key has behavior well-defined in 262.","mimetype":"text/html"}]},"ts":1671564317850,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DUZ4jBjoMo1UdAu8DV9wiF6DZtkF2HRRPK7zMHstHvw"},
{"content":{"body":"hmm, ignored, and not treated as an error?","msgtype":"m.text","org.matrix.msc1767.text":"hmm, ignored, and not treated as an error?"},"ts":1671564360137,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l3TTXrmTawiA7Nz7a-njPFuBD4R5E0LOKdIfVKyH6vo"},
{"content":{"body":"Present and participating on todays call were Justin Ridgewell nicolo-ribaudo yulia guybedford Luca Casonato and myself. Mathieu Hofman and Richard Gibson observed. Please forgive any omissions!","format":"org.matrix.custom.html","formatted_body":"Present and participating on todays call were <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> and myself. <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> and <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> observed. Please forgive any omissions!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Present and participating on todays call were Justin Ridgewell nicolo-ribaudo yulia guybedford Luca Casonato and myself. Mathieu Hofman and Richard Gibson observed. Please forgive any omissions!","mimetype":"text/plain"},{"body":"Present and participating on todays call were <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> and myself. <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> and <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> observed. Please forgive any omissions!","mimetype":"text/html"}]},"ts":1671564375369,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Il0d9tMHafmFLcmN7-totvkWosjykPIWYfWOkB_bfSo"},
{"content":{"body":"(I've heard arguments on both sides and was personally leaning towards \"error\")","msgtype":"m.text","org.matrix.msc1767.text":"(I've heard arguments on both sides and was personally leaning towards \"error\")"},"ts":1671564375645,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ii3YeSz09pe-nW0Xk3LS0DSacYG4nqtPPyYc2AGef_U"},
{"content":{"body":"> <@littledan:matrix.org> hmm, ignored, and not treated as an error?\n\nI say presumably because that detail was not discussed, but forward compatibility is desirable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$l3TTXrmTawiA7Nz7a-njPFuBD4R5E0LOKdIfVKyH6vo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>hmm, ignored, and not treated as an error?</blockquote></mx-reply>I say presumably because that detail was not discussed, but forward compatibility is desirable.","m.relates_to":{"m.in_reply_to":{"event_id":"$l3TTXrmTawiA7Nz7a-njPFuBD4R5E0LOKdIfVKyH6vo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> hmm, ignored, and not treated as an error?\n\nI say presumably because that detail was not discussed, but forward compatibility is desirable.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$l3TTXrmTawiA7Nz7a-njPFuBD4R5E0LOKdIfVKyH6vo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>hmm, ignored, and not treated as an error?</blockquote></mx-reply>I say presumably because that detail was not discussed, but forward compatibility is desirable.","mimetype":"text/html"}]},"ts":1671564395358,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EMcmhcBqI-ezmj9gtfUftozyqadc9c7ztj25mUj7MP0"},
{"content":{"body":"Yeah, I could be swayed either way.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I could be swayed either way."},"ts":1671564409046,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KS41B13Y68tdQW4zJqnp_V99rydxAEvxN9jD8t7Czwg"},
{"content":{"body":"forward compatibility cuts both ways","msgtype":"m.text","org.matrix.msc1767.text":"forward compatibility cuts both ways"},"ts":1671564411518,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4fCH7MWFev1bf4bkUwztVP6lBOTOuQgj_lU4Kh5G8AU"},
{"content":{"body":"or, I guess leans towards error","msgtype":"m.text","org.matrix.msc1767.text":"or, I guess leans towards error"},"ts":1671564423006,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Tbg7mrUJ6r864bWcb3v2WQqo1uKB6N4f3IMex8YEajA"},
{"content":{"body":"the counterargument is \"upgrade path\" which is a bit different","msgtype":"m.text","org.matrix.msc1767.text":"the counterargument is \"upgrade path\" which is a bit different"},"ts":1671564448585,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$E0DvGduDp_26bhrPlJaB-HKJTnHEwvDTbzKqbrAnedA"},
{"content":{"body":"Again, I’ve not thought in depth on that detail. I’m presuming from the hip.","msgtype":"m.text","org.matrix.msc1767.text":"Again, I’ve not thought in depth on that detail. I’m presuming from the hip."},"ts":1671564457077,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BHgZI3JT39v1rS_2NfX9NU5LQnmUHiYRUmmbcKfNxNE"},
{"content":{"body":" * Again, I’ve not thought in depth on that detail. I’m presuming from the hip.","m.new_content":{"body":"Again, I’ve not thought in depth on that detail. I’m presuming from the hip.","msgtype":"m.text","org.matrix.msc1767.text":"Again, I’ve not thought in depth on that detail. I’m presuming from the hip."},"m.relates_to":{"event_id":"$BHgZI3JT39v1rS_2NfX9NU5LQnmUHiYRUmmbcKfNxNE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Again, I’ve not thought in depth on that detail. I’m presuming from the hip."},"ts":1671564460210,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HX6ss1f9STWkHZoT9zyI0VrfHnYLVYYVWmqxVilLf-o"},
{"content":{"body":"well, anyway, I'm extremely happy with this direction, and looking forward to the details being spelled out. Did someone sign up for that part?","msgtype":"m.text","org.matrix.msc1767.text":"well, anyway, I'm extremely happy with this direction, and looking forward to the details being spelled out. Did someone sign up for that part?"},"ts":1671564556892,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1F5EE8fLqypQWuCCV7k8Jh6haMAA_fcjwvfVyLlazIo"},
{"content":{"body":"In any case, it was a good conversation and we found that there’s not a great deal of disagreement in abstract and we just need to get more concrete about one of the many possible directions. Possibly a statement of some kind about vision for evolution of this keyspace and how we accommodate it. guybedford expressly doesn’t want to push in that direction and recognizes that import reflection needs a color for that bikeshed, just doesn’t have strong color preferences. Just a preference not to be blocked on the issue for long.","format":"org.matrix.custom.html","formatted_body":"In any case, it was a good conversation and we found that there’s not a great deal of disagreement in abstract and we just need to get more concrete about one of the many possible directions. Possibly a statement of some kind about vision for evolution of this keyspace and how we accommodate it. <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> expressly doesn’t want to push in that direction and recognizes that import reflection needs a color for that bikeshed, just doesn’t have strong color preferences. Just a preference not to be blocked on the issue for long.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In any case, it was a good conversation and we found that there’s not a great deal of disagreement in abstract and we just need to get more concrete about one of the many possible directions. Possibly a statement of some kind about vision for evolution of this keyspace and how we accommodate it. guybedford expressly doesn’t want to push in that direction and recognizes that import reflection needs a color for that bikeshed, just doesn’t have strong color preferences. Just a preference not to be blocked on the issue for long.","mimetype":"text/plain"},{"body":"In any case, it was a good conversation and we found that there’s not a great deal of disagreement in abstract and we just need to get more concrete about one of the many possible directions. Possibly a statement of some kind about vision for evolution of this keyspace and how we accommodate it. <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> expressly doesn’t want to push in that direction and recognizes that import reflection needs a color for that bikeshed, just doesn’t have strong color preferences. Just a preference not to be blocked on the issue for long.","mimetype":"text/html"}]},"ts":1671564616563,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZlXHX6qVQb1HwfFoj2Ap0bg0mNl3qo3tJKCJ71_fOo4"},
{"content":{"body":"I’m personally hoping you’re up for writing something up, littledan.","format":"org.matrix.custom.html","formatted_body":"I’m personally hoping you’re up for writing something up, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’m personally hoping you’re up for writing something up, littledan.","mimetype":"text/plain"},{"body":"I’m personally hoping you’re up for writing something up, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>.","mimetype":"text/html"}]},"ts":1671564667323,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DEy1KPv_Grwmabd-FmfKdVEsockgczuwZaSqG65Qhk0"},
{"content":{"body":"hides","msgtype":"m.emote","org.matrix.msc1767.text":"hides"},"ts":1671564675345,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ngs1amzQLXYHTyUqmER5NMo0r36cscRu1rA2sGwH2sc"},
{"content":{"body":"can I nominate... anyone but me to do this?","msgtype":"m.text","org.matrix.msc1767.text":"can I nominate... anyone but me to do this?"},"ts":1671564689659,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$601rCYNbSKNorzYaOTLe0GoV0UBFSUg2InzDWIxSABQ"},
{"content":{"body":"all of you who were in the discussion would be good","msgtype":"m.text","org.matrix.msc1767.text":"all of you who were in the discussion would be good"},"ts":1671564697928,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r3CMo_675YJMsfThOSj7IDvycJjeNaZZ_vfFjp16OUE"},
{"content":{"body":"> <@kriskowal:matrix.org> Justin Ridgewell, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an `as <primitive>` + records and tuples as primitives would suffice.\n\nYes, having some extensible mechanism that feeds into the cache key is a necessity for things we want to implement in our bundler. If we want to specify that as allowing records, that fine, though I don't see much difference between a record cache key and cache that does a shallow (non-ordered) equality of a static object literal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$zIyUV0B_ySd5GTr_oiTuuurks_3EsVN7hPJY6W1ajWc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an <code>as &lt;primitive&gt;</code> + records and tuples as primitives would suffice.</blockquote></mx-reply>Yes, having some extensible mechanism that feeds into the cache key is a necessity for things we want to implement in our bundler. If we want to specify that as allowing records, that fine, though I don't see much difference between a record cache key and cache that does a shallow (non-ordered) equality of a static object literal.","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$zIyUV0B_ySd5GTr_oiTuuurks_3EsVN7hPJY6W1ajWc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Justin Ridgewell, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an `as <primitive>` + records and tuples as primitives would suffice.\n\nYes, having some extensible mechanism that feeds into the cache key is a necessity for things we want to implement in our bundler. If we want to specify that as allowing records, that fine, though I don't see much difference between a record cache key and cache that does a shallow (non-ordered) equality of a static object literal.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$zIyUV0B_ySd5GTr_oiTuuurks_3EsVN7hPJY6W1ajWc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>, for the record, please confirm your position is that a mechanism that feeds into the cache key is necessary, and an <code>as &lt;primitive&gt;</code> + records and tuples as primitives would suffice.</blockquote></mx-reply>Yes, having some extensible mechanism that feeds into the cache key is a necessity for things we want to implement in our bundler. If we want to specify that as allowing records, that fine, though I don't see much difference between a record cache key and cache that does a shallow (non-ordered) equality of a static object literal.","mimetype":"text/html"}]},"ts":1671567397019,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bjz7uxHMcUYSiWAGoxu8fceKGRulzAZGUsn3sjgfFus"},
{"content":{"body":"well, one difference is Records don't exist yet...","msgtype":"m.text","org.matrix.msc1767.text":"well, one difference is Records don't exist yet..."},"ts":1671567701571,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YV6ci9Ars4jtHAULBfwQEO2ixzJtBVpoyJrd4_EYTu0"},
{"content":{"body":"As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","format":"org.matrix.custom.html","formatted_body":"<p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","mimetype":"text/plain"},{"body":"<p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","mimetype":"text/html"}]},"ts":1671567737462,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WqTUu-9PQasg1_ZpCWZDSSAW2Qu7By-hcG0yzWzNbCU"},
{"content":{"body":" * As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","format":"org.matrix.custom.html","formatted_body":" * <p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","m.new_content":{"body":"As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","format":"org.matrix.custom.html","formatted_body":"<p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","mimetype":"text/plain"},{"body":"<p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WqTUu-9PQasg1_ZpCWZDSSAW2Qu7By-hcG0yzWzNbCU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * As for why an extensible value that participates in a cache key is necessary, we can draw from the `@next/font` [examples](https://nextjs.org/docs/basic-features/font-optimization#google-fonts).\n\nCurrently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the `as` record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.","mimetype":"text/plain"},{"body":" * <p>As for why an extensible value that participates in a cache key is necessary, we can draw from the <code>@next/font</code> <a href=\"https://nextjs.org/docs/basic-features/font-optimization#google-fonts\">examples</a>.</p>\n<p>Currently, you have a runtime function that has to be invoked with options, but if that function escapes the callgraph at all, it's not possible to analyze anymore. I'd be ideal if we can move all these settings into the <code>as</code> record, so that we have a guaranteed static analyzable syntax (this is standard static syntax improves ergonomics vs dynamic evaluation). I've actually reliazed last week that this is all dev facing, I failed to consider that when I was describing this previously.</p>\n","mimetype":"text/html"}]},"ts":1671567780510,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_PPgM0net2llmav1aF2i87I_VNyd8mVTw0ILGKeLkhQ"},
{"content":{"body":"so the syntax will help explain the limitations on usage, making it non-escaping by construction?","msgtype":"m.text","org.matrix.msc1767.text":"so the syntax will help explain the limitations on usage, making it non-escaping by construction?"},"ts":1671567845950,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$53USvbSacePhGGuN150ulknVe-20l8vze1sM5QK2dNY"},
{"content":{"body":"I kinda thought that having it refuse to build with a descriptive error message would be enough","msgtype":"m.text","org.matrix.msc1767.text":"I kinda thought that having it refuse to build with a descriptive error message would be enough"},"ts":1671567876856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0KPCD2bpE9YtT1wqJusNOmfGUGaYuo4DM5VefR5sa2g"}
]