[
{"content":{"body":"> <@kriskowal:matrix.org> And `Evaluators` give us another box, where we can capture the dynamic `import` behavior for non-modules. Out of these primitives, `Compartment` can be implemented in user code.\n\nI have been out of this conversation for a while, but thinking about this, I'm wondering if an `evaluator.createModuleSource(moduleSourceString): ModuleSource` would make sense. It would clearly be tied to making new evaluators, in a way that can be denied independently from `ModuleSource` existence. However while I believe an evaluator holds its own module graph, I don't think ModuleSource participate in that graph since they're just unevaluated source representation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Cwc9qZApVXDxVkHKJQzDF3nXxUOpE80T2t_MCXp0FL0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And <code>Evaluators</code> give us another box, where we can capture the dynamic <code>import</code> behavior for non-modules. Out of these primitives, <code>Compartment</code> can be implemented in user code.</blockquote></mx-reply>I have been out of this conversation for a while, but thinking about this, I'm wondering if an <code>evaluator.createModuleSource(moduleSourceString): ModuleSource</code> would make sense. It would clearly be tied to making new evaluators, in a way that can be denied independently from <code>ModuleSource</code> existence. However while I believe an evaluator holds its own module graph, I don't think ModuleSource participate in that graph since they're just unevaluated source representation.","m.relates_to":{"m.in_reply_to":{"event_id":"$Cwc9qZApVXDxVkHKJQzDF3nXxUOpE80T2t_MCXp0FL0"}},"msgtype":"m.text"},"ts":1674747559972,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SiNgeW9X4Ey1mTZ55OSaNaXhJmLvOGLFNpCLxPFe58E"}
]