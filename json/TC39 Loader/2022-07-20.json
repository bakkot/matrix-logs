[
{"content":{"body":"> <@littledan:matrix.org> I like the `import(..., {xyzkey: \"module\"})` syntax presented; I think we could use some bikeshedding on the key\n\nI suspect that ljharb’s objection could be resolved by changing the form to `import(string, {module: true})` (the name in syntax appears in the options bag)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$hFql9IGrYhhUL8sl2MI9w9OgbF_VuYOfaRL84r_wwF4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I like the <code>import(..., {xyzkey: \"module\"})</code> syntax presented; I think we could use some bikeshedding on the key</blockquote></mx-reply>I suspect that <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>’s objection could be resolved by changing the form to <code>import(string, {module: true})</code> (the name in syntax appears in the options bag)","m.relates_to":{"m.in_reply_to":{"event_id":"$hFql9IGrYhhUL8sl2MI9w9OgbF_VuYOfaRL84r_wwF4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I like the `import(..., {xyzkey: \"module\"})` syntax presented; I think we could use some bikeshedding on the key\n\nI suspect that ljharb’s objection could be resolved by changing the form to `import(string, {module: true})` (the name in syntax appears in the options bag)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$hFql9IGrYhhUL8sl2MI9w9OgbF_VuYOfaRL84r_wwF4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I like the <code>import(..., {xyzkey: \"module\"})</code> syntax presented; I think we could use some bikeshedding on the key</blockquote></mx-reply>I suspect that <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>’s objection could be resolved by changing the form to <code>import(string, {module: true})</code> (the name in syntax appears in the options bag)","mimetype":"text/html"}]},"ts":1658339564859,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Wf4LNfXu9UhfanSRW21awlr_lr8ubMnccFW0WJY4Z28"},
{"content":{"body":"ah I like that option","msgtype":"m.text","org.matrix.msc1767.text":"ah I like that option"},"ts":1658339597051,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$znGa4GtN4Q-O4Ms4Bgejs7zzEGVekN2rY79sfuCkDYs"},
{"content":{"body":"And I would be fine with that. `reflect` is hedging on coherence with assets, which is unknown.","format":"org.matrix.custom.html","formatted_body":"And I would be fine with that. <code>reflect</code> is hedging on coherence with assets, which is unknown.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And I would be fine with that. `reflect` is hedging on coherence with assets, which is unknown.","mimetype":"text/plain"},{"body":"And I would be fine with that. <code>reflect</code> is hedging on coherence with assets, which is unknown.","mimetype":"text/html"}]},"ts":1658339600246,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ynk_c80ccRQHM7QeFUnMq84ZV6fmzj4uRgxxDARGc9I"},
{"content":{"body":"well, assets could just be a separate key","msgtype":"m.text","org.matrix.msc1767.text":"well, assets could just be a separate key"},"ts":1658339613553,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uGY2rMGt2ZPLdy8TUBFR3OuCM7fuV21WvuwkuUYswts"},
{"content":{"body":"And I’m fine with that too.","msgtype":"m.text","org.matrix.msc1767.text":"And I’m fine with that too."},"ts":1658339621089,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FXkmfUOoYJJX5ngI4_FUJj_XPaV6-pZTuKLNMiFlCIw"},
{"content":{"body":"Or `import.module(string)`, so that the words are also in the same order","format":"org.matrix.custom.html","formatted_body":"Or <code>import.module(string)</code>, so that the words are also in the same order","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or `import.module(string)`, so that the words are also in the same order","mimetype":"text/plain"},{"body":"Or <code>import.module(string)</code>, so that the words are also in the same order","mimetype":"text/html"}]},"ts":1658339637010,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ijklLHkzLb4LBaztbYuV5ADvydAmCBTI5EANLxVJ8kQ"},
{"content":{"body":"both of those would address my mirroring constraint yes","msgtype":"m.text","org.matrix.msc1767.text":"both of those would address my mirroring constraint yes"},"ts":1658339642214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4_1msurBVz__bYQLeUlQnHU8OZh1cX9U9jjKCdK53-0"},
{"content":{"body":"there's tons of ways to do so; i have no strong opinion on the best way","msgtype":"m.text","org.matrix.msc1767.text":"there's tons of ways to do so; i have no strong opinion on the best way"},"ts":1658339651251,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pdmSj1ZbalELA-hL5gn5MayfAk50nipjCZVtFFx_FvY"},
{"content":{"body":" * both of those would address my mirroring constraint yes","m.new_content":{"body":"both of those would address my mirroring constraint yes","msgtype":"m.text","org.matrix.msc1767.text":"both of those would address my mirroring constraint yes"},"m.relates_to":{"event_id":"$4_1msurBVz__bYQLeUlQnHU8OZh1cX9U9jjKCdK53-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * both of those would address my mirroring constraint yes"},"ts":1658339658926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YHW_v_9O_PQsOapaB0eJNgyc9d52lGrAGDMibnECRFo"},
{"content":{"body":"Your constraint is valid.","msgtype":"m.text","org.matrix.msc1767.text":"Your constraint is valid."},"ts":1658339679422,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RUcpBP4bhEmngg1Mifg0loLsvn5bA5BJnsOdObqLVuQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Or `import.module(string)`, so that the words are also in the same order\n\nI would want `const myImport = async (...rest) => import(...rest)` to be sufficient to drop import from 2nd to 1st class and handle all the things import does, so I’m leaning away from a syntactic solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ijklLHkzLb4LBaztbYuV5ADvydAmCBTI5EANLxVJ8kQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Or <code>import.module(string)</code>, so that the words are also in the same order</blockquote></mx-reply>I would want <code>const myImport = async (...rest) =&gt; import(...rest)</code> to be sufficient to drop import from 2nd to 1st class and handle all the things import does, so I’m leaning away from a syntactic solution.","m.relates_to":{"m.in_reply_to":{"event_id":"$ijklLHkzLb4LBaztbYuV5ADvydAmCBTI5EANLxVJ8kQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> Or `import.module(string)`, so that the words are also in the same order\n\nI would want `const myImport = async (...rest) => import(...rest)` to be sufficient to drop import from 2nd to 1st class and handle all the things import does, so I’m leaning away from a syntactic solution.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ijklLHkzLb4LBaztbYuV5ADvydAmCBTI5EANLxVJ8kQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Or <code>import.module(string)</code>, so that the words are also in the same order</blockquote></mx-reply>I would want <code>const myImport = async (...rest) =&gt; import(...rest)</code> to be sufficient to drop import from 2nd to 1st class and handle all the things import does, so I’m leaning away from a syntactic solution.","mimetype":"text/html"}]},"ts":1658340604365,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Wq6hGeNlkaTFELnvwauoHvY7WsHReZvLY13GlaEzWGg"}
]