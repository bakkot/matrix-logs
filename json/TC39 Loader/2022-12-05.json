[
{"content":{"body":"lol I'm going to be extremely dead at our meeting tomorrow, after a whole-day Ecma GA meeting","msgtype":"m.text","org.matrix.msc1767.text":"lol I'm going to be extremely dead at our meeting tomorrow, after a whole-day Ecma GA meeting"},"ts":1670276459415,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UMeogqTEbUe_cPVVDQhG0P--gci_SwQI8-jJQPZY9A4"},
{"content":{"body":"Anyway I'd like us to discuss this somewhat urgent issue of the relationship between import assertions and HTML--the web platform might not actually support module types in the \"assertion\" style we were imagining. https://github.com/tc39/proposal-import-assertions/issues/125","msgtype":"m.text","org.matrix.msc1767.text":"Anyway I'd like us to discuss this somewhat urgent issue of the relationship between import assertions and HTML--the web platform might not actually support module types in the \"assertion\" style we were imagining. https://github.com/tc39/proposal-import-assertions/issues/125"},"ts":1670276524984,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VNX3YclksCicaszQ-uPlJ48-bRsOtbiUsY81PwNPSDY"},
{"content":{"body":"I've invited Anne van Kesteren as our special guest (now of WebKit, formerly Mozilla)","msgtype":"m.text","org.matrix.msc1767.text":"I've invited Anne van Kesteren as our special guest (now of WebKit, formerly Mozilla)"},"ts":1670276549933,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cxwhx8Bl_Cpab7swH6MUltD-otT9Xb_tGi5Rzu7BJcI"},
{"content":{"body":"This is time-sensitive both because the proposal is already at Stage 3 and because it's under consideration for \"Interop 2023\", which would accelerate its implementation in other browsers","msgtype":"m.text","org.matrix.msc1767.text":"This is time-sensitive both because the proposal is already at Stage 3 and because it's under consideration for \"Interop 2023\", which would accelerate its implementation in other browsers"},"ts":1670276587297,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VU7uXw8suXJnHb8mzRlEsvZJMsaybCh0U1Ww7mCayYQ"},
{"content":{"body":"Always good to cross paths with Anne. Thank you for reminding me that this is an odd-numbered week.","msgtype":"m.text","org.matrix.msc1767.text":"Always good to cross paths with Anne. Thank you for reminding me that this is an odd-numbered week."},"ts":1670276621025,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rjZ-uky3PuRJj8qmgapj9mqQZujLNkXZjw-DGGGMdIw"},
{"content":{"body":"Fundamentally, the problem is: The Web actually wants to make requests to the server in different ways depending on which kind of resource is anticipated. That changes the interpretation of the module and is not consistent with the \"assertion\" invariant.","msgtype":"m.text","org.matrix.msc1767.text":"Fundamentally, the problem is: The Web actually wants to make requests to the server in different ways depending on which kind of resource is anticipated. That changes the interpretation of the module and is not consistent with the \"assertion\" invariant."},"ts":1670276636521,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IQnE1LKzz54zz0X9qySIHDRTMSNr8UVnloVQCSN_uz4"},
{"content":{"body":"I'd add: the fact that HTML folks have been discussing this idea for a year and didn't notice the mismatch is kinda a mark against the \"assertion\" mental model. (The initial discussion was about CSP checks on the response, but the HTML people should've been thinking about the effects on the request too, which isn't as obvious to us humble TC39 folks)","msgtype":"m.text","org.matrix.msc1767.text":"I'd add: the fact that HTML folks have been discussing this idea for a year and didn't notice the mismatch is kinda a mark against the \"assertion\" mental model. (The initial discussion was about CSP checks on the response, but the HTML people should've been thinking about the effects on the request too, which isn't as obvious to us humble TC39 folks)"},"ts":1670276710093,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gnAbo5MhOvoKTTX0zgfUarlHL2cKbk9fyVBPDdcNUpc"},
{"content":{"body":"In my estimate, that will force our hand into incorporating the type in the module instance’s memo. At least we can be explicit about that in 262 now that we’ve borged the logic for loading.","msgtype":"m.text","org.matrix.msc1767.text":"In my estimate, that will force our hand into incorporating the type in the module instance’s memo. At least we can be explicit about that in 262 now that we’ve borged the logic for loading."},"ts":1670276752024,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7w1rN9yRBibQ6txHAqyIBDV4clUrgVUXhVZuiL7etaU"},
{"content":{"body":"well, it'd be as simple as deleting a line","msgtype":"m.text","org.matrix.msc1767.text":"well, it'd be as simple as deleting a line"},"ts":1670276771578,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HSh_oE4zsfauKl4Xo4TasXsWT9Rnmkh1GjcFM6Znfyk"},
{"content":{"body":"And if we entertain this, I’m in favor of renaming `assert` to `with` as soon as possible.","format":"org.matrix.custom.html","formatted_body":"And if we entertain this, I’m in favor of renaming <code>assert</code> to <code>with</code> as soon as possible.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And if we entertain this, I’m in favor of renaming `assert` to `with` as soon as possible.","mimetype":"text/plain"},{"body":"And if we entertain this, I’m in favor of renaming <code>assert</code> to <code>with</code> as soon as possible.","mimetype":"text/html"}]},"ts":1670276778190,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KDjjz9EoyRTQ4SVvGt1RWyMghnwby-NfZU_wUPpHTZg"},
{"content":{"body":"but, we'd have to think about the implications...","msgtype":"m.text","org.matrix.msc1767.text":"but, we'd have to think about the implications..."},"ts":1670276787970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nFuaKQOZ0dmRpPCsBejyje54-9txLVln2sfnRhvFudw"},
{"content":{"body":"yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","format":"org.matrix.custom.html","formatted_body":"yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/plain"},{"body":"yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$KDjjz9EoyRTQ4SVvGt1RWyMghnwby-NfZU_wUPpHTZg"}}},"ts":1670276825280,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$isL6ljsSeRl5gD1-NCuxr9A9yUIOqP8skVBP1nByO-4"},
{"content":{"body":"we'll need to think about whether this is the change we want to make","msgtype":"m.text","org.matrix.msc1767.text":"we'll need to think about whether this is the change we want to make"},"ts":1670276839590,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0-_3RRtbuanhRElu58h0Tl8El64S_34HhMv5sHVIfXc"},
{"content":{"body":"It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","format":"org.matrix.custom.html","formatted_body":"It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/plain"},{"body":"It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/html"}]},"ts":1670276845986,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_XdCSBrAau2Mh7bvbXsxvyNyFWM9PAzh3p06YIXUvSc"},
{"content":{"body":"> <@kriskowal:matrix.org> And if we entertain this, I’m in favor of renaming `assert` to `with` as soon as possible.\n\n * yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$KDjjz9EoyRTQ4SVvGt1RWyMghnwby-NfZU_wUPpHTZg?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And if we entertain this, I’m in favor of renaming <code>assert</code> to <code>with</code> as soon as possible.</blockquote></mx-reply> * yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","m.new_content":{"body":"yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","format":"org.matrix.custom.html","formatted_body":"yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/plain"},{"body":"yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$isL6ljsSeRl5gD1-NCuxr9A9yUIOqP8skVBP1nByO-4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> And if we entertain this, I’m in favor of renaming `assert` to `with` as soon as possible.\n\n * yes, certainly the keyword `assert` doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$KDjjz9EoyRTQ4SVvGt1RWyMghnwby-NfZU_wUPpHTZg?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And if we entertain this, I’m in favor of renaming <code>assert</code> to <code>with</code> as soon as possible.</blockquote></mx-reply> * yes, certainly the keyword <code>assert</code> doesn't make any sense at all if we made that simple change you're thinking of","mimetype":"text/html"}]},"ts":1670276854271,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$468ObF37IHuO0NYVfxsDLaXtlU_zfVK5I0WeLjPfR-4"},
{"content":{"body":" * It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","format":"org.matrix.custom.html","formatted_body":" * It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","m.new_content":{"body":"It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","format":"org.matrix.custom.html","formatted_body":"It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/plain"},{"body":"It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_XdCSBrAau2Mh7bvbXsxvyNyFWM9PAzh3p06YIXUvSc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/plain"},{"body":" * It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.","mimetype":"text/html"}]},"ts":1670276867707,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BoWBnXCcvvQQ2JyiiJX2Ku8exoq0opYo8uDcVOrV4qs"},
{"content":{"body":"As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","format":"org.matrix.custom.html","formatted_body":"As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","mimetype":"text/plain"},{"body":"As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","mimetype":"text/html"}]},"ts":1670276902298,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1RLWceRvc0rbeVdyjvpwh2DV6gF6q5UNkJeh8b3r3nc"},
{"content":{"body":" * As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","format":"org.matrix.custom.html","formatted_body":" * As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","m.new_content":{"body":"As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","format":"org.matrix.custom.html","formatted_body":"As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","mimetype":"text/plain"},{"body":"As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$1RLWceRvc0rbeVdyjvpwh2DV6gF6q5UNkJeh8b3r3nc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * As a safety, we’d probably also want the `Module` to have a `type` so the importing `Module` can make sure it gets what it asked for.","mimetype":"text/plain"},{"body":" * As a safety, we’d probably also want the <code>Module</code> to have a <code>type</code> so the importing <code>Module</code> can make sure it gets what it asked for.","mimetype":"text/html"}]},"ts":1670276914753,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qnZxezQHOqYW0UPbNJMnPGlflTVHV7dZGK6LyOrnVHU"},
{"content":{"body":"Otherwise we have a maybe-ignore-the-requested-type footgun.","msgtype":"m.text","org.matrix.msc1767.text":"Otherwise we have a maybe-ignore-the-requested-type footgun."},"ts":1670276938486,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$D7MgCoH_guWr7-tQFHlqtomtx800tm7ZDXU6RaMgi6k"},
{"content":{"body":"It’s a considerable complication, but if it’s table stakes, we can do it.","msgtype":"m.text","org.matrix.msc1767.text":"It’s a considerable complication, but if it’s table stakes, we can do it."},"ts":1670276981119,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JevDwWejNBZ4Uc5RnRY8kz_O9P1U_wo8wcOyUktOBSQ"},
{"content":{"body":"The two things which would be strongly dispreferrable to me are:\n- If HTML gets to have special rights around how to use the type (or other arguments) that  other environments/hooks don't see, assuming HTML uses them in a significant-enough way\n- If HTML does a willful violation (or violates a _should_ recommendation) around how assertions are used--we're designing this largely for HTML, so everything really should match up","format":"org.matrix.custom.html","formatted_body":"<p>The two things which would be strongly dispreferrable to me are:</p>\n<ul>\n<li>If HTML gets to have special rights around how to use the type (or other arguments) that  other environments/hooks don't see, assuming HTML uses them in a significant-enough way</li>\n<li>If HTML does a willful violation (or violates a <em>should</em> recommendation) around how assertions are used--we're designing this largely for HTML, so everything really should match up</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The two things which would be strongly dispreferrable to me are:\n- If HTML gets to have special rights around how to use the type (or other arguments) that  other environments/hooks don't see, assuming HTML uses them in a significant-enough way\n- If HTML does a willful violation (or violates a _should_ recommendation) around how assertions are used--we're designing this largely for HTML, so everything really should match up","mimetype":"text/plain"},{"body":"<p>The two things which would be strongly dispreferrable to me are:</p>\n<ul>\n<li>If HTML gets to have special rights around how to use the type (or other arguments) that  other environments/hooks don't see, assuming HTML uses them in a significant-enough way</li>\n<li>If HTML does a willful violation (or violates a <em>should</em> recommendation) around how assertions are used--we're designing this largely for HTML, so everything really should match up</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1670276994210,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JCHEvEb4CuILJ3D2CkrmNG-Vp_SjVyNwkeH4kX19XmU"},
{"content":{"body":"I actually noticed that the HTML spec says it is a willful violation when it actually isn't! I need to file an issue on that","msgtype":"m.text","org.matrix.msc1767.text":"I actually noticed that the HTML spec says it is a willful violation when it actually isn't! I need to file an issue on that"},"ts":1670277009196,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0EkcAP77DzYvE87JqzgttsJv89w062CJni0-gMvzcfc"},
{"content":{"body":"How is it not a willful violation if the author knew to write that it was a willful violation (as opposed to accidental?)","msgtype":"m.text","org.matrix.msc1767.text":"How is it not a willful violation if the author knew to write that it was a willful violation (as opposed to accidental?)"},"ts":1670277046218,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QE---WrGu5MEIhxI89HDD3kvSSdDlK79B47GiSOjeVE"},
{"content":{"body":"Change of authors?","msgtype":"m.text","org.matrix.msc1767.text":"Change of authors?"},"ts":1670277069267,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$CAxS0jpgAEhuHzK1iJ_wtoODY2-H7ezpvOxZbCW79us"},
{"content":{"body":"I'd categorize HTML's current use of the assertion--just to duplicate a cache entry but not to actually make the request differently--as a not-significant-enough way of using the type which makes it not so bad that it's omitted from the import hook ","msgtype":"m.text","org.matrix.msc1767.text":"I'd categorize HTML's current use of the assertion--just to duplicate a cache entry but not to actually make the request differently--as a not-significant-enough way of using the type which makes it not so bad that it's omitted from the import hook "},"ts":1670277091473,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z2onq3BQT6hovq--6OPlgq7wwiji9Dqi7ScicG13DsQ"},
{"content":{"body":"it was a willful violation in a previous draft. We went out of our way to make it not a violation, but I guess that wasn't noticed by the editors of HTML.","msgtype":"m.text","org.matrix.msc1767.text":"it was a willful violation in a previous draft. We went out of our way to make it not a violation, but I guess that wasn't noticed by the editors of HTML."},"ts":1670277118870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lgmrn3TldN0lmaiFmnmss_xLPpjWGmSuNNFvum2yzhs"},
{"content":{"body":"I must have missed that gambit.","msgtype":"m.text","org.matrix.msc1767.text":"I must have missed that gambit."},"ts":1670277137575,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pDBW7qRQULUxajGtzZHF4BEAnkev86wXHoc6tD7vgfw"},
{"content":{"body":"and there were lots of strong opinions flying around, including strong expectations that we wouldn't ever have alignment (from both sides!)","msgtype":"m.text","org.matrix.msc1767.text":"and there were lots of strong opinions flying around, including strong expectations that we wouldn't ever have alignment (from both sides!)"},"ts":1670277146481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xgupFS1WT0SiGdu0BNzPDEsAbbR4oWiWSEkeGpbUzeI"},
{"content":{"body":"I agree creating a duplicate cache entry as a side-effect is expressible with an importHook without threading the `type`, and is at least required for other kinds of redirects.","format":"org.matrix.custom.html","formatted_body":"I agree creating a duplicate cache entry as a side-effect is expressible with an importHook without threading the <code>type</code>, and is at least required for other kinds of redirects.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree creating a duplicate cache entry as a side-effect is expressible with an importHook without threading the `type`, and is at least required for other kinds of redirects.","mimetype":"text/plain"},{"body":"I agree creating a duplicate cache entry as a side-effect is expressible with an importHook without threading the <code>type</code>, and is at least required for other kinds of redirects.","mimetype":"text/html"}]},"ts":1670277202097,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DLNJIxvm12M9Ju8ZHKLRVHOShyFogjtUJTAlLBvBhE0"},
{"content":{"body":"oh it is?","msgtype":"m.text","org.matrix.msc1767.text":"oh it is?"},"ts":1670277214153,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ei_LvCoRJIYaatvtVvZQbVZ_8LrPuopxXdyaJ2Pb2II"},
{"content":{"body":"that's not what I was saying but it's sort of a relief if so","msgtype":"m.text","org.matrix.msc1767.text":"that's not what I was saying but it's sort of a relief if so"},"ts":1670277223761,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ssLEwMDaeMiodJnb4yNcHzAn1kMe_tLZbXt2I059Xy8"},
{"content":{"body":"Ah, well, maybe not so great for `type` not to be virtualizable.","format":"org.matrix.custom.html","formatted_body":"Ah, well, maybe not so great for <code>type</code> not to be virtualizable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, well, maybe not so great for `type` not to be virtualizable.","mimetype":"text/plain"},{"body":"Ah, well, maybe not so great for <code>type</code> not to be virtualizable.","mimetype":"text/html"}]},"ts":1670277254681,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8VQZd9zRKALB_XgZp3bbmVge8Hfcd38rNYrO5OB-ztQ"},
{"content":{"body":"> <@kriskowal:matrix.org> It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.\n\nWe will need to think about whether we want to just thread through one parameter or multiple. If it's just one, maybe we should go back and think about that nice-looking `as` syntax which Guy initially used to present import reflection...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_XdCSBrAau2Mh7bvbXsxvyNyFWM9PAzh3p06YIXUvSc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.</blockquote></mx-reply>We will need to think about whether we want to just thread through one parameter or multiple. If it's just one, maybe we should go back and think about that nice-looking <code>as</code> syntax which Guy initially used to present import reflection...","m.relates_to":{"m.in_reply_to":{"event_id":"$_XdCSBrAau2Mh7bvbXsxvyNyFWM9PAzh3p06YIXUvSc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> It’d imply that `importHook` needs to accept the `type` as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.\n\nWe will need to think about whether we want to just thread through one parameter or multiple. If it's just one, maybe we should go back and think about that nice-looking `as` syntax which Guy initially used to present import reflection...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_XdCSBrAau2Mh7bvbXsxvyNyFWM9PAzh3p06YIXUvSc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It’d imply that <code>importHook</code> needs to accept the <code>type</code> as an optional argument. We would want to be very clear that this is the only additional term of the module memo keyspace we’re considering.</blockquote></mx-reply>We will need to think about whether we want to just thread through one parameter or multiple. If it's just one, maybe we should go back and think about that nice-looking <code>as</code> syntax which Guy initially used to present import reflection...","mimetype":"text/html"}]},"ts":1670277266863,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Edqb2OS8i6YHYHUkCvzPpCT8jxaknPgW0PN07iSnKF8"},
{"content":{"body":"we tried to be super general with import assertions but then we don't really have enough supporting use cases","msgtype":"m.text","org.matrix.msc1767.text":"we tried to be super general with import assertions but then we don't really have enough supporting use cases"},"ts":1670277282969,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hHTIY8QHsf_YwXBI9dDhKe3oKixtN_pjOaN8qr-bTzk"},
{"content":{"body":"But `importHook` does need to make notes about redirects and symbolic links in some cases, so it produces consistent results for all ways to address an identical module.","format":"org.matrix.custom.html","formatted_body":"But <code>importHook</code> does need to make notes about redirects and symbolic links in some cases, so it produces consistent results for all ways to address an identical module.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But `importHook` does need to make notes about redirects and symbolic links in some cases, so it produces consistent results for all ways to address an identical module.","mimetype":"text/plain"},{"body":"But <code>importHook</code> does need to make notes about redirects and symbolic links in some cases, so it produces consistent results for all ways to address an identical module.","mimetype":"text/html"}]},"ts":1670277292862,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Fm4-1unLQ-N91FOeVs-awmYhwk0HgUwpTg9533GrWRk"},
{"content":{"body":"I guess it just makes those notes for node-like environments. In the web it doesn't/","msgtype":"m.text","org.matrix.msc1767.text":"I guess it just makes those notes for node-like environments. In the web it doesn't/"},"ts":1670277314173,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$s3UQlNRWdxunxzQp9sReol3DhXHe2nGXANwzfLDRw0o"},
{"content":{"body":"it just identifies them as different modules","msgtype":"m.text","org.matrix.msc1767.text":"it just identifies them as different modules"},"ts":1670277327839,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wW7KJj7-rS7XIhvwysDKmKoErry-i1A_iGLbB-S75hU"},
{"content":{"body":"I’m pretty sure import reflection is orthogonal.","msgtype":"m.text","org.matrix.msc1767.text":"I’m pretty sure import reflection is orthogonal."},"ts":1670277334973,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Kl3Ug6dV3FLponl1LWpNHMlsgEx5L8HsDRo_s72hQtM"},
{"content":{"body":"> <@littledan:matrix.org> it just identifies them as different modules\n\nPresumably import-map is doing the work of emulating what Node.js does for a published artifact.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$wW7KJj7-rS7XIhvwysDKmKoErry-i1A_iGLbB-S75hU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>it just identifies them as different modules</blockquote></mx-reply>Presumably import-map is doing the work of emulating what Node.js does for a published artifact.","m.relates_to":{"m.in_reply_to":{"event_id":"$wW7KJj7-rS7XIhvwysDKmKoErry-i1A_iGLbB-S75hU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> it just identifies them as different modules\n\nPresumably import-map is doing the work of emulating what Node.js does for a published artifact.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$wW7KJj7-rS7XIhvwysDKmKoErry-i1A_iGLbB-S75hU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>it just identifies them as different modules</blockquote></mx-reply>Presumably import-map is doing the work of emulating what Node.js does for a published artifact.","mimetype":"text/html"}]},"ts":1670277374903,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O9ukt9Rc5L7GCKQl-ckEZ6NvLSfmmz_JnTxD-aqqerw"},
{"content":{"body":"> <@kriskowal:matrix.org> I’m pretty sure import reflection is orthogonal.\n\nwell, I don't want to drag import reflection down with this--if we want import reflection to create something which can be statically imported within a nested module, it is definitely a different construct. Let's focus on import assertions by themselves first and then figure out how it relates to all the other module proposals.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Kl3Ug6dV3FLponl1LWpNHMlsgEx5L8HsDRo_s72hQtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I’m pretty sure import reflection is orthogonal.</blockquote></mx-reply>well, I don't want to drag import reflection down with this--if we want import reflection to create something which can be statically imported within a nested module, it is definitely a different construct. Let's focus on import assertions by themselves first and then figure out how it relates to all the other module proposals.","m.relates_to":{"m.in_reply_to":{"event_id":"$Kl3Ug6dV3FLponl1LWpNHMlsgEx5L8HsDRo_s72hQtM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I’m pretty sure import reflection is orthogonal.\n\nwell, I don't want to drag import reflection down with this--if we want import reflection to create something which can be statically imported within a nested module, it is definitely a different construct. Let's focus on import assertions by themselves first and then figure out how it relates to all the other module proposals.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Kl3Ug6dV3FLponl1LWpNHMlsgEx5L8HsDRo_s72hQtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I’m pretty sure import reflection is orthogonal.</blockquote></mx-reply>well, I don't want to drag import reflection down with this--if we want import reflection to create something which can be statically imported within a nested module, it is definitely a different construct. Let's focus on import assertions by themselves first and then figure out how it relates to all the other module proposals.","mimetype":"text/html"}]},"ts":1670277403609,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zmagQYxrWzOaSfNSsMSKBdKKHRb8FCpKsqSQ_LnWY84"},
{"content":{"body":"Aye.","msgtype":"m.text","org.matrix.msc1767.text":"Aye."},"ts":1670277419409,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PTIz9zEtT8hEVNwy61AclU2m2qkCGRVDLxgRHIxZNOY"},
{"content":{"body":"> <@kriskowal:matrix.org> Presumably import-map is doing the work of emulating what Node.js does for a published artifact.\n\nNot really... it just doesn't attempt to solve this redirect problem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$O9ukt9Rc5L7GCKQl-ckEZ6NvLSfmmz_JnTxD-aqqerw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Presumably import-map is doing the work of emulating what Node.js does for a published artifact.</blockquote></mx-reply>Not really... it just doesn't attempt to solve this redirect problem","m.relates_to":{"m.in_reply_to":{"event_id":"$O9ukt9Rc5L7GCKQl-ckEZ6NvLSfmmz_JnTxD-aqqerw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Presumably import-map is doing the work of emulating what Node.js does for a published artifact.\n\nNot really... it just doesn't attempt to solve this redirect problem","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$O9ukt9Rc5L7GCKQl-ckEZ6NvLSfmmz_JnTxD-aqqerw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Presumably import-map is doing the work of emulating what Node.js does for a published artifact.</blockquote></mx-reply>Not really... it just doesn't attempt to solve this redirect problem","mimetype":"text/html"}]},"ts":1670277420723,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JZMbUbB8EfsuF4MsaYfZi_z_xrIilSabezm9BzUxDEA"},
{"content":{"body":"That’s surprising.","msgtype":"m.text","org.matrix.msc1767.text":"That’s surprising."},"ts":1670277450905,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ksfiKDot7eRa3xg2ZsI9JrGgaCUHVr0kx6PTRQIdpDA"},
{"content":{"body":"I mean, native modules on the web omit solutions to lots of problems... and they aren't used so much... maybe there's a connection","msgtype":"m.text","org.matrix.msc1767.text":"I mean, native modules on the web omit solutions to lots of problems... and they aren't used so much... maybe there's a connection"},"ts":1670277469161,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yJUgXRdop63vAOgGPW1CpvlfW6GSpbmWhs9RPnH7mRY"},
{"content":{"body":"There is no emoji for my face right now.","msgtype":"m.text","org.matrix.msc1767.text":"There is no emoji for my face right now."},"ts":1670277505901,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rmxcc9xpnKZSbBxyEo7AIQO9UNNk0YPvsFyO530AVZE"},
{"content":{"body":"In any case, this is a good topic for the agenda and I look forward to it.","msgtype":"m.text","org.matrix.msc1767.text":"In any case, this is a good topic for the agenda and I look forward to it."},"ts":1670277548496,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$R0acOtsi8Bx9i0VJ4eJUuTOTBLUc4Tzu9Xf4Tj49uvo"},
{"content":{"body":"I’m also interested in discussing how we go forward given bakkot’s express desire to “not introduce another path to eval”. That’s the one piece of feedback I believe we either need to address or argue around to advance Layer 0. I think there’s a coherent thinner sliver we can bring to the next plenary, where there are module sources but no ModuleSource, where we recover Layere 0 (grammar validation) Layer 1 (binding reflection) with a `Module.parse`.","format":"org.matrix.custom.html","formatted_body":"I’m also interested in discussing how we go forward given bakkot’s express desire to “not introduce another path to eval”. That’s the one piece of feedback I believe we either need to address or argue around to advance Layer 0. I think there’s a coherent thinner sliver we can bring to the next plenary, where there are module sources but no ModuleSource, where we recover Layere 0 (grammar validation) Layer 1 (binding reflection) with a <code>Module.parse</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’m also interested in discussing how we go forward given bakkot’s express desire to “not introduce another path to eval”. That’s the one piece of feedback I believe we either need to address or argue around to advance Layer 0. I think there’s a coherent thinner sliver we can bring to the next plenary, where there are module sources but no ModuleSource, where we recover Layere 0 (grammar validation) Layer 1 (binding reflection) with a `Module.parse`.","mimetype":"text/plain"},{"body":"I’m also interested in discussing how we go forward given bakkot’s express desire to “not introduce another path to eval”. That’s the one piece of feedback I believe we either need to address or argue around to advance Layer 0. I think there’s a coherent thinner sliver we can bring to the next plenary, where there are module sources but no ModuleSource, where we recover Layere 0 (grammar validation) Layer 1 (binding reflection) with a <code>Module.parse</code>.","mimetype":"text/html"}]},"ts":1670277735305,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qQB29kyZ2IYQZ56hXXSgGFwzDYSxm22Xx1_RFMVSiis"},
{"content":{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","format":"org.matrix.custom.html","formatted_body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","mimetype":"text/plain"},{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","mimetype":"text/html"}]},"ts":1670277813592,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NPfsQtYy3bunfC-KblxQp1uDN0Hn8F12IZA4DRO4EkU"},
{"content":{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')`","format":"org.matrix.custom.html","formatted_body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code>","m.new_content":{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')`","format":"org.matrix.custom.html","formatted_body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')`","mimetype":"text/plain"},{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$NPfsQtYy3bunfC-KblxQp1uDN0Hn8F12IZA4DRO4EkU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')`","mimetype":"text/plain"},{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code>","mimetype":"text/html"}]},"ts":1670277827303,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jRN77RpsvTqm-XCAuY6NAZhfUz55keQEgsQ15gHpuyg"},
{"content":{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","format":"org.matrix.custom.html","formatted_body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","m.new_content":{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","format":"org.matrix.custom.html","formatted_body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","mimetype":"text/plain"},{"body":"I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$NPfsQtYy3bunfC-KblxQp1uDN0Hn8F12IZA4DRO4EkU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to `Module.parse(source); (0, eval)('module {${source}}')` (note ticks to avoid confusing markdown)","mimetype":"text/plain"},{"body":" * I believe that maneuver still covers most of the motivating use cases, given that we grudgingly can fall back to <code>Module.parse(source); (0, eval)('module {${source}}')</code> (note ticks to avoid confusing markdown)","mimetype":"text/html"}]},"ts":1670277841285,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0XWoyZkKmn8W6i7c8puH7LOrPhUQCBWgP4aKTlwxir0"},
{"content":{"body":"And of course, that also allows us to revisit `ModuleSource` when less reasonable folks come out with picks and torches some years hence.","format":"org.matrix.custom.html","formatted_body":"And of course, that also allows us to revisit <code>ModuleSource</code> when less reasonable folks come out with picks and torches some years hence.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And of course, that also allows us to revisit `ModuleSource` when less reasonable folks come out with picks and torches some years hence.","mimetype":"text/plain"},{"body":"And of course, that also allows us to revisit <code>ModuleSource</code> when less reasonable folks come out with picks and torches some years hence.","mimetype":"text/html"}]},"ts":1670277899396,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$n0x4FruIlGmH0-593yC1zXYJ1H7HSEcCwcXVG8MOYG0"},
{"content":{"body":"huh, I think it'd be fine to have the ModuleSource class, and just its constructor throws","msgtype":"m.text","org.matrix.msc1767.text":"huh, I think it'd be fine to have the ModuleSource class, and just its constructor throws"},"ts":1670277985778,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v_QTDJt1vFQmEdwyIRlGManfDjIbcQ05XzlFbNo770k"},
{"content":{"body":"And, on the other hand, to make sure we’ve communicated the mitigating nuances of our design, I think we should separate `ModuleSource` into another layer and explain its mitigating qualities for CSP, just in case that was missed.","format":"org.matrix.custom.html","formatted_body":"And, on the other hand, to make sure we’ve communicated the mitigating nuances of our design, I think we should separate <code>ModuleSource</code> into another layer and explain its mitigating qualities for CSP, just in case that was missed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And, on the other hand, to make sure we’ve communicated the mitigating nuances of our design, I think we should separate `ModuleSource` into another layer and explain its mitigating qualities for CSP, just in case that was missed.","mimetype":"text/plain"},{"body":"And, on the other hand, to make sure we’ve communicated the mitigating nuances of our design, I think we should separate <code>ModuleSource</code> into another layer and explain its mitigating qualities for CSP, just in case that was missed.","mimetype":"text/html"}]},"ts":1670277998560,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SYHynKWQOclv4KDTwCZSvQkNVvvMugml-iw1J-VEoBY"},
{"content":{"body":"like the whole same design, just without that part","msgtype":"m.text","org.matrix.msc1767.text":"like the whole same design, just without that part"},"ts":1670278006640,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PYv-sdj_RZvlnd6ycG8CFrfHBpLfn9BZtJYlnUYBK7I"},
{"content":{"body":"yes the fallback would be bad due to injection...","msgtype":"m.text","org.matrix.msc1767.text":"yes the fallback would be bad due to injection..."},"ts":1670278017741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UNkjuKiQ8DVMp4GKMzPj8VWkDCxVPYsruA2VtMX7gyw"},
{"content":{"body":"Yeah, I’m okay with that too, though it’s not necessary.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I’m okay with that too, though it’s not necessary."},"ts":1670278025906,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hI0xyZbpp3sHJdX6EJEKHYtLuiF4EOjIXBZ8nJfEc5s"},
{"content":{"body":"Wait Module.parse? Wouldn't that be another path to eval?","msgtype":"m.text","org.matrix.msc1767.text":"Wait Module.parse? Wouldn't that be another path to eval?"},"ts":1670278036718,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Flw2C5BDu5rOviQVUWgjECU_Iq7zv_MMd45o9fyG9OY"},
{"content":{"body":"I thought bakkot was saying we should'nt have that","msgtype":"m.text","org.matrix.msc1767.text":"I thought bakkot was saying we should'nt have that"},"ts":1670278042302,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hqHQS0McLF_pwk1Z_uRoHrn2ibnT_TGfwdE7GM3Tjf0"},
{"content":{"body":"Right the fallback would be bad for injection, but as long as you `Module.parse` first, safety is recoverable.","format":"org.matrix.custom.html","formatted_body":"Right the fallback would be bad for injection, but as long as you <code>Module.parse</code> first, safety is recoverable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Right the fallback would be bad for injection, but as long as you `Module.parse` first, safety is recoverable.","mimetype":"text/plain"},{"body":"Right the fallback would be bad for injection, but as long as you <code>Module.parse</code> first, safety is recoverable.","mimetype":"text/html"}]},"ts":1670278058629,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EpiX6BYD1fbrzBvlrceLjNP_jd3jvc76YEGr0YrC3bU"},
{"content":{"body":"well but would bakkot be OK with Module.parse?","msgtype":"m.text","org.matrix.msc1767.text":"well but would bakkot be OK with Module.parse?"},"ts":1670278076558,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jBc7ZB8iUu2B3sON20BwpgVCiQe4hgzz1UVuBGkOVrQ"},
{"content":{"body":"No, `Module.parse` gives you parse but not eval, and doesn’t provide an object you can expect to pass to `Module`, so therefore no path from arbitrary string to evaluation.","format":"org.matrix.custom.html","formatted_body":"No, <code>Module.parse</code> gives you parse but not eval, and doesn’t provide an object you can expect to pass to <code>Module</code>, so therefore no path from arbitrary string to evaluation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"No, `Module.parse` gives you parse but not eval, and doesn’t provide an object you can expect to pass to `Module`, so therefore no path from arbitrary string to evaluation.","mimetype":"text/plain"},{"body":"No, <code>Module.parse</code> gives you parse but not eval, and doesn’t provide an object you can expect to pass to <code>Module</code>, so therefore no path from arbitrary string to evaluation.","mimetype":"text/html"}]},"ts":1670278097913,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XF9mjwM-kuRWliJmTQKR0vh-rQWK-8fQDALPTLXtEXQ"},
{"content":{"body":"what does it return?","msgtype":"m.text","org.matrix.msc1767.text":"what does it return?"},"ts":1670278106567,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HNgxU7Z6BWU231txJkaWL2WjkiAb7rjREUN0t_Y-ZLo"},
{"content":{"body":"That’s a question I need to ask.","msgtype":"m.text","org.matrix.msc1767.text":"That’s a question I need to ask."},"ts":1670278108696,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iTDUEQILCwEyAkGWSK6e8jb6DYsiAU1Jq2q7sGCTifE"},
{"content":{"body":"`Module.parse` would return `{ bindings }`.","format":"org.matrix.custom.html","formatted_body":"<code>Module.parse</code> would return <code>{ bindings }</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Module.parse` would return `{ bindings }`.","mimetype":"text/plain"},{"body":"<code>Module.parse</code> would return <code>{ bindings }</code>.","mimetype":"text/html"}]},"ts":1670278123087,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yX2FwpQBFwTLSMF2o-EwBnC2Lo8PJu8rZmTSM1wzzBo"},
{"content":{"body":"Or throw `SyntaxError`.","format":"org.matrix.custom.html","formatted_body":"Or throw <code>SyntaxError</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or throw `SyntaxError`.","mimetype":"text/plain"},{"body":"Or throw <code>SyntaxError</code>.","mimetype":"text/html"}]},"ts":1670278160905,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HNomXTe0QKzP0WYrmEl5rZWZlMaWMT4ptIf4oKzA-eA"},
{"content":{"body":"I'm not really convinced... I think we should be making more of an all-or-nothing decision","msgtype":"m.text","org.matrix.msc1767.text":"I'm not really convinced... I think we should be making more of an all-or-nothing decision"},"ts":1670278163185,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zk9gCnjAj8a0xerJXn82z_k5X0CjaQ3LgthG_rv609E"},
{"content":{"body":"(I'm open to being persuaded)","msgtype":"m.text","org.matrix.msc1767.text":"(I'm open to being persuaded)"},"ts":1670278191980,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8Ug52E53xPHlkJQxxD_z7uOZHPKpg-uKsuIfZEu07IA"},
{"content":{"body":"My preference is to convince all relevant parties that what we’ve already proposed is good.","msgtype":"m.text","org.matrix.msc1767.text":"My preference is to convince all relevant parties that what we’ve already proposed is good."},"ts":1670278204856,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$AuoKsATf5PdyQWtoPZ3_gEIAk_RQjwtLMKi1XK50vc4"},
{"content":{"body":"Yeah I like the ModuleSource constructor","msgtype":"m.text","org.matrix.msc1767.text":"Yeah I like the ModuleSource constructor"},"ts":1670278239278,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7i1Mvf93KcwSwQHrPCDx91Dl4Kxaj-R0xswOWRUanzA"},
{"content":{"body":"But barring that, I’d like to make monotonic incremental progress and not preclude the possibility of going back for what’s left behind.","msgtype":"m.text","org.matrix.msc1767.text":"But barring that, I’d like to make monotonic incremental progress and not preclude the possibility of going back for what’s left behind."},"ts":1670278264513,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FhRLfhkNBdvJakTV3oMlIodTTOTXB7NQB2BBgnYHaeE"},
{"content":{"body":"it would certainly have to be taken seriously as another entrypoint to eval, I agree with that","msgtype":"m.text","org.matrix.msc1767.text":"it would certainly have to be taken seriously as another entrypoint to eval, I agree with that"},"ts":1670278273537,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K5GdeA8MIkqNk9H65M5F2hsvcJhLVwP_zK8YHlprGmA"},
{"content":{"body":"Same.","msgtype":"m.text","org.matrix.msc1767.text":"Same."},"ts":1670278285767,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XZfTH6sBTLZzcxXneZnY1HlbBqxcKJw9sqr9whvJJs0"},
{"content":{"body":"I will now feed the child. Back in a bit.","msgtype":"m.text","org.matrix.msc1767.text":"I will now feed the child. Back in a bit."},"ts":1670278293613,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$3tDoqPHgNgNUu0BWLEl85lILooeDXOTGS5kjWbcTNp8"},
{"content":{"body":"And back.","msgtype":"m.text","org.matrix.msc1767.text":"And back."},"ts":1670282324175,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fXcXV8BHYQeW1fQJA7r9d9iot4MYwb5mEFWZbsaKUlI"}
]