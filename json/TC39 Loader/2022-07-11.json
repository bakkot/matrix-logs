[
{"content":{"body":"yulia: Welcome back. Hope you’re feeling better.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: Welcome back. Hope you’re feeling better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: Welcome back. Hope you’re feeling better.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: Welcome back. Hope you’re feeling better.","mimetype":"text/html"}]},"ts":1657551908596,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$U7e21yiItMJqStwA34kU54p5gLYnDPZSB0pXv7n9B1k"},
{"content":{"body":"thank you!","msgtype":"m.text","org.matrix.msc1767.text":"thank you!"},"ts":1657551918996,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Z1vy4yZX36CjZvLLiRn9JOfggsJHtEcKByrBPFum0kA"},
{"content":{"body":"i am still catching up on things","msgtype":"m.text","org.matrix.msc1767.text":"i am still catching up on things"},"ts":1657551925003,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Nvjz2MmE7otFwDlKJ8J7dD07243tc-PEOIwh7mnI-JY"},
{"content":{"body":"i did see the mention regarding whether or not the lazy loader case is subsumed by exposing the loader internals. it is something i've thought of a lot myself","msgtype":"m.text","org.matrix.msc1767.text":"i did see the mention regarding whether or not the lazy loader case is subsumed by exposing the loader internals. it is something i've thought of a lot myself"},"ts":1657551950615,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7TObQts9jOlIZw06bYtwey7tKTdPqObfz7ZWbGWIsvs"},
{"content":{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`","format":"org.matrix.custom.html","formatted_body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`","mimetype":"text/plain"},{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>","mimetype":"text/html"}]},"ts":1657552015634,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$z3uvXyy6UvFu_S6e20MIqYRhda6ZGa7h9PzXfwQyXms"},
{"content":{"body":"so, I think there is still a reason to explore a higher level, opinionated api -- it may communicate programmer intention better","msgtype":"m.text","org.matrix.msc1767.text":"so, I think there is still a reason to explore a higher level, opinionated api -- it may communicate programmer intention better"},"ts":1657552040389,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$J0-1gvIrwrmMoJsapdiAn-0odYI6Hum5TamCzjrg96A"},
{"content":{"body":"i need to catch up on the discussions that happened here more first, before anything","msgtype":"m.text","org.matrix.msc1767.text":"i need to catch up on the discussions that happened here more first, before anything"},"ts":1657552078835,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1MidDlrQEIdeSl00SYBqeRLQJk-WEj6LjLRMJ1YK5LI"},
{"content":{"body":" * I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`. This achieves the same goal as `lazyInit`, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc. ","format":"org.matrix.custom.html","formatted_body":" * I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>. This achieves the same goal as <code>lazyInit</code>, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc.","m.new_content":{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`. This achieves the same goal as `lazyInit`, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc. ","format":"org.matrix.custom.html","formatted_body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>. This achieves the same goal as <code>lazyInit</code>, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`. This achieves the same goal as `lazyInit`, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc. ","mimetype":"text/plain"},{"body":"I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>. This achieves the same goal as <code>lazyInit</code>, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$z3uvXyy6UvFu_S6e20MIqYRhda6ZGa7h9PzXfwQyXms","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that `lazy` doesn't mean much to them. It is more of a hint for engines. People however resonated with something like `pure` or `library`. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like `lazyInit`. This achieves the same goal as `lazyInit`, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc. ","mimetype":"text/plain"},{"body":" * I had some feedback from developers recently, who are concerned that things are about to get a lot more complicated, and also that <code>lazy</code> doesn't mean much to them. It is more of a hint for engines. People however resonated with something like <code>pure</code> or <code>library</code>. These terms may be more meaningful from a developer perspective than exposing low level blocks (which are independently useful), or something to oriented towards engines like <code>lazyInit</code>. This achieves the same goal as <code>lazyInit</code>, but is meaningful for both engines and developers on the same rubric. No global state modification, safe to defer, etc.","mimetype":"text/html"}]},"ts":1657552381063,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$61rBfYvYN6tentgAKsT18Locbw9IlHncn1KlDR3DnVw"},
{"content":{"body":"Having both high and low level APIs sounds reasonable to me. That reasoning might apply to compartments, though the low-level design would certainly inform the high-level design. I sketched high-level Compartment in terms of low-level Module and ModuleSource. https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c","msgtype":"m.text","org.matrix.msc1767.text":"Having both high and low level APIs sounds reasonable to me. That reasoning might apply to compartments, though the low-level design would certainly inform the high-level design. I sketched high-level Compartment in terms of low-level Module and ModuleSource. https://gist.github.com/kriskowal/f48fb0c68a70ccbde7cd32c85cddc63c"},"ts":1657565273090,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DJBHwA4LA-TJJb8YT05cj4q5DR4eIn9JvxOqo-XA4y4"},
{"content":{"body":"I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.","msgtype":"m.text","org.matrix.msc1767.text":"I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium."},"ts":1657565486822,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU"},
{"content":{"body":"In any case, for plenary, I hope to have a deck ready tomorrow that shares an update on the evolution of the compartments proposal over the last couple of years that decomposes it into smaller proposals, starting with low-level first-class Module and ModuleSource and ending in Compartment.","msgtype":"m.text","org.matrix.msc1767.text":"In any case, for plenary, I hope to have a deck ready tomorrow that shares an update on the evolution of the compartments proposal over the last couple of years that decomposes it into smaller proposals, starting with low-level first-class Module and ModuleSource and ending in Compartment."},"ts":1657565723751,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$k5DGzz9yLUzq83v0ADjFBezkyixVTKAPfy0WKTfmtes"},
{"content":{"body":"There appear to be four separable layers.","msgtype":"m.text","org.matrix.msc1767.text":"There appear to be four separable layers."},"ts":1657565750821,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zqRGmSVZ1W_dws_ljKOJO9g0dXpq14vY3Cx-Zt3XITI"},
{"content":{"body":"btw could we get a volunteer to run the next call?","msgtype":"m.text","org.matrix.msc1767.text":"btw could we get a volunteer to run the next call?"},"ts":1657574059645,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h7nkGe9xr3OVZAu6745IYz7PFagr_e_zE8t3omnOi1w"},
{"content":{"body":"by \"run the next call\" do you mean what I did in the last call or something else?","msgtype":"m.text","org.matrix.msc1767.text":"by \"run the next call\" do you mean what I did in the last call or something else?"},"ts":1657575454376,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ROMoYHR0WXtToPox4FBwYz6mvYkMTD3TO8ojuh4X888"},
{"content":{"body":"I'm fine repeating what I did","msgtype":"m.text","org.matrix.msc1767.text":"I'm fine repeating what I did"},"ts":1657575459525,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$W7wIwLgFeCmqTUduZCu9VV4IEdKfD18NQpTrTfKBd7I"}
]