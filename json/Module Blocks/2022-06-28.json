[
{"content":{"body":"Finally getting back around to catching up on chat log and reviewing nicolo-ribaudoâ€™s issue and PR. Sorry for the absence, had a fire at work.","format":"org.matrix.custom.html","formatted_body":"Finally getting back around to catching up on chat log and reviewing <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>â€™s issue and PR. Sorry for the absence, had a fire at work.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Finally getting back around to catching up on chat log and reviewing nicolo-ribaudoâ€™s issue and PR. Sorry for the absence, had a fire at work.","mimetype":"text/plain"},{"body":"Finally getting back around to catching up on chat log and reviewing <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>â€™s issue and PR. Sorry for the absence, had a fire at work.","mimetype":"text/html"}]},"ts":1656409727148,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$Pz2y8tudDuYjxCAnaje6MW13kyaVwnhEMby5x8PDOnw"},
{"content":{"body":"Catching up on the discussion, seems like it was really fruitful.","msgtype":"m.text","org.matrix.msc1767.text":"Catching up on the discussion, seems like it was really fruitful."},"ts":1656409739934,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$pQgFd7n0N0vFA6EGbPmfOEEPvbZ7tz_PZ1McIrooy9o"},
{"content":{"body":"Thanks for merging!","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for merging!"},"ts":1656410364958,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xo4m15YnCdsVRecXRNWgFKJiyiuQ_VgK4aRYN--JGxk"},
{"content":{"body":"Btw, could you rename `master` to `main`? (because we should do it, and because it's annoying that my muscle memory is `git checkout main` but it fails in that repo ðŸ˜…)","format":"org.matrix.custom.html","formatted_body":"Btw, could you rename <code>master</code> to <code>main</code>? (because we should do it, and because it's annoying that my muscle memory is <code>git checkout main</code> but it fails in that repo ðŸ˜…)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Btw, could you rename `master` to `main`? (because we should do it, and because it's annoying that my muscle memory is `git checkout main` but it fails in that repo ðŸ˜…)","mimetype":"text/plain"},{"body":"Btw, could you rename <code>master</code> to <code>main</code>? (because we should do it, and because it's annoying that my muscle memory is <code>git checkout main</code> but it fails in that repo ðŸ˜…)","mimetype":"text/html"}]},"ts":1656410426644,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YPucp09kffnxuK3yF2MAcyAVRUFNW-ojAfluh4IJVMg"},
{"content":{"body":"oh absolutely","msgtype":"m.text","org.matrix.msc1767.text":"oh absolutely"},"ts":1656410434489,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$xrXkSTxkvzsl_hJ2rkGpm5so-n2HPZqFaad-ADExua8"},
{"content":{"body":"will do that now","msgtype":"m.text","org.matrix.msc1767.text":"will do that now"},"ts":1656410436015,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$z_xsI5jk-PUQ83-SF9ND6_OE8rp7cPvvYaFwkJRKLg0"},
{"content":{"body":"(and remove the function expressions from the spec)","msgtype":"m.text","org.matrix.msc1767.text":"(and remove the function expressions from the spec)"},"ts":1656410442032,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$8PhQKoexDY-hG5iPKvGR9JWkKLfS13lF0fe8mQcMorY"},
{"content":{"body":"Thank you!","msgtype":"m.text","org.matrix.msc1767.text":"Thank you!"},"ts":1656410496223,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vm5kSx4ix7DP_SWz2_zl0ur0Yc0us7-pXykvDBSjZXo"},
{"content":{"body":"Done","msgtype":"m.text","org.matrix.msc1767.text":"Done"},"ts":1656410520084,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$COhBtOwjg59GR5d7ee8FH25XHLFtGs5YOGBWw27PNNw"},
{"content":{"body":"Do we want to arrange a sync between Surma, Nicolo and me on module blocks some time soon?","msgtype":"m.text","org.matrix.msc1767.text":"Do we want to arrange a sync between Surma, Nicolo and me on module blocks some time soon?"},"ts":1656419473407,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iQBl8i3fKVO23n9QRsS69Fu2vgEDDHqaplBKRxy6A4Q"},
{"content":{"body":"could be with others too but especially I want to make sure to catch up with Surma","msgtype":"m.text","org.matrix.msc1767.text":"could be with others too but especially I want to make sure to catch up with Surma"},"ts":1656419537598,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u9ficVQ7DY3N8qn-if9Gx9tvQrUbrcUd_HT10bxPQzA"},
{"content":{"body":"I'm game!","msgtype":"m.text"},"ts":1656419674507,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$NSuuxvBW4M6JAtYrVuVMSDGpsl4t--Iz4Ad-ydMlMCg"},
{"content":{"body":"Sure! If you want to do it today, I'm free at 16 CEST (in 1:15 hours) or 19 CEST","msgtype":"m.text"},"ts":1656420258611,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hXxhxgir5_jzRJP0lWSmQ75m9bG9ONkXSW1tEb97HcY"},
{"content":{"body":"Otherwise tomorrow ","msgtype":"m.text"},"ts":1656420265981,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$L5cpKlH2_daUpbUgqPFTp3q1XuWfp5aVahzE5bjPPDg"},
{"content":{"body":"Yeah I'm free then if Surma is","msgtype":"m.text","org.matrix.msc1767.text":"Yeah I'm free then if Surma is"},"ts":1656420287477,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iGs_YttJE0EX45A3TAFaD3p3K4k5P0JxYf4BtEKIZos"},
{"content":{"body":"No sorry, today is meeting extravaganze for me. Tomorrow?","msgtype":"m.text","org.matrix.msc1767.text":"No sorry, today is meeting extravaganze for me. Tomorrow?"},"ts":1656421006883,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$5Euov6JhaljeBpSoCVBaGREYK8m1ZFd1qZiUzduA3zQ"},
{"content":{"body":"Tomorrow between 15 and 18 CEST? (between 24 and 27 hours from now)","msgtype":"m.text"},"ts":1656421382203,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dxl9ntn8SIbDpNK9vAu1OSI7glOSh3w4iF1sz-B68Ik"},
{"content":{"body":"Yup, Iâ€™m free","msgtype":"m.text","org.matrix.msc1767.text":"Yup, Iâ€™m free"},"ts":1656424981217,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$N7Btra3v9qIrdZQMm51YuJ7Py4I0QtLZjFgKdkvmm88"},
{"content":{"body":"Regarding \"keeping the same `import.meta.url`\": that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:\n```js\nawait import(\"./foo.js\");\nconst foo = module {\n  await import(\"./foo.js\");\n};\n```\nThis should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).\n\nIn practice this will mean passing something like _parentModule_.[[HostData]] to _moduleBlock_.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding &quot;keeping the same <code>import.meta.url</code>&quot;: that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:</p>\n<pre><code class=\"language-js\">await import(&quot;./foo.js&quot;);\nconst foo = module {\n  await import(&quot;./foo.js&quot;);\n};\n</code></pre>\n<p>This should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).</p>\n<p>In practice this will mean passing something like <em>parentModule</em>.[[HostData]] to <em>moduleBlock</em>.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Regarding \"keeping the same `import.meta.url`\": that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:\n```js\nawait import(\"./foo.js\");\nconst foo = module {\n  await import(\"./foo.js\");\n};\n```\nThis should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).\n\nIn practice this will mean passing something like _parentModule_.[[HostData]] to _moduleBlock_.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.","mimetype":"text/plain"},{"body":"<p>Regarding &quot;keeping the same <code>import.meta.url</code>&quot;: that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:</p>\n<pre><code class=\"language-js\">await import(&quot;./foo.js&quot;);\nconst foo = module {\n  await import(&quot;./foo.js&quot;);\n};\n</code></pre>\n<p>This should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).</p>\n<p>In practice this will mean passing something like <em>parentModule</em>.[[HostData]] to <em>moduleBlock</em>.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.</p>\n","mimetype":"text/html"}]},"ts":1656431903570,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3O5YhnMAgMwBUcxj_a-N-gqdXPzt4d-MCFfr7k6JRMk"},
{"content":{"body":"I think the same import.meta object should be used, and the same referrer *module* should be passed up to HTML (rather than passing the module block up)","format":"org.matrix.custom.html","formatted_body":"I think the same import.meta object should be used, and the same referrer <em>module</em> should be passed up to HTML (rather than passing the module block up)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the same import.meta object should be used, and the same referrer *module* should be passed up to HTML (rather than passing the module block up)","mimetype":"text/plain"},{"body":"I think the same import.meta object should be used, and the same referrer <em>module</em> should be passed up to HTML (rather than passing the module block up)","mimetype":"text/html"}]},"ts":1656431940369,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Cqek4SdGLLNVV6IQmWhzn64H1xR8XdOX0mtK8HiIkvs"},
{"content":{"body":"is this what your patch does?","msgtype":"m.text","org.matrix.msc1767.text":"is this what your patch does?"},"ts":1656431952218,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$62nfITItDnrFhaHPavwpMzigwb2S-6IPmQI6QLWY1Jo"},
{"content":{"body":"No, my patch didn't take care of that yet","msgtype":"m.text","org.matrix.msc1767.text":"No, my patch didn't take care of that yet"},"ts":1656431968608,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JpGX_HapCRPNp6iAVPxh_miH9jRk2o5-Drg8hSWyWUk"},
{"content":{"body":"You cannot use the same `import.meta` object, because they could be in different realms","format":"org.matrix.custom.html","formatted_body":"You cannot use the same <code>import.meta</code> object, because they could be in different realms","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You cannot use the same `import.meta` object, because they could be in different realms","mimetype":"text/plain"},{"body":"You cannot use the same <code>import.meta</code> object, because they could be in different realms","mimetype":"text/html"}]},"ts":1656431981747,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2OK21BZkhfTEymfwxlgdxq1HIaJEDA0S9ws1w6-04y0"},
{"content":{"body":"oh right of course... it should be the same referrer module, and then the host will probably build an import.meta which has the same import.meta.url","msgtype":"m.text","org.matrix.msc1767.text":"oh right of course... it should be the same referrer module, and then the host will probably build an import.meta which has the same import.meta.url"},"ts":1656432352602,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yXR7JdnPjAR4fdpFzOh0zC-W3DF9WK3ELAwPRFbMSzo"},
{"content":{"body":"this would compromise a goal that Jordan has, where the import.meta.url would be the same for two different modules... but this is already the case if you have multiple <script type=module> things on the same page","msgtype":"m.text","org.matrix.msc1767.text":"this would compromise a goal that Jordan has, where the import.meta.url would be the same for two different modules... but this is already the case if you have multiple <script type=module> things on the same page"},"ts":1656432399838,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iXp6JBoffol8NtbP71c1S0cF7WSbLSIGlyNUFQy8cm8"},
{"content":{"body":"if you have two script type modules on the same page, they'd have the same import.meta.url but the second one might not necessarily evaluate, right?","msgtype":"m.text","org.matrix.msc1767.text":"if you have two script type modules on the same page, they'd have the same import.meta.url but the second one might not necessarily evaluate, right?"},"ts":1656433422389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aN-yXctqFJ8rRjJjl18bEazuZ0rIrBobS397ZpqTR5E"},
{"content":{"body":"(eg it'd be nondeterministic whether you got 1 or 2 evaluations)","msgtype":"m.text","org.matrix.msc1767.text":"(eg it'd be nondeterministic whether you got 1 or 2 evaluations)"},"ts":1656433435194,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WiRxT_JFcshRLSbxIOTvo0qSTwSDVIioL7iNlH76WqA"},
{"content":{"body":" * (eg it'd be nondeterministic whether you got 1 or 2 evaluations)","m.new_content":{"body":"(eg it'd be nondeterministic whether you got 1 or 2 evaluations)","msgtype":"m.text","org.matrix.msc1767.text":"(eg it'd be nondeterministic whether you got 1 or 2 evaluations)"},"m.relates_to":{"event_id":"$WiRxT_JFcshRLSbxIOTvo0qSTwSDVIioL7iNlH76WqA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (eg it'd be nondeterministic whether you got 1 or 2 evaluations)"},"ts":1656433454310,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SfTycGzjT0N1zgEt-EK8rkWz6E5P-1glbiKPkZTNYms"},
{"content":{"body":"not sure what you mean by nondeterministic","msgtype":"m.text","org.matrix.msc1767.text":"not sure what you mean by nondeterministic"},"ts":1656433455499,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TiHJwUYLYOvXVAcdPldWhFk2OhjWjHDAqjPzF9kbIgY"},
{"content":{"body":"like it would depend on network conditions and the state of the cache","msgtype":"m.text","org.matrix.msc1767.text":"like it would depend on network conditions and the state of the cache"},"ts":1656433464274,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1c9ykfjO-p4R7NVpTworcPy-Ykcqngs2OxzlIXpi_jA"},
{"content":{"body":"if the first one loaded fast enough, the second one would use the cached version, i think?","msgtype":"m.text","org.matrix.msc1767.text":"if the first one loaded fast enough, the second one would use the cached version, i think?"},"ts":1656433477077,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RgnRgttg1bfRs0ZpCpRUToBGob-ksAIhVoux-kqUM8o"},
{"content":{"body":"Yeah a race condition like that would be bad; could you say more about how that would come up?","msgtype":"m.text","org.matrix.msc1767.text":"Yeah a race condition like that would be bad; could you say more about how that would come up?"},"ts":1656433491105,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nXFoQ88E1ZUil3vnLwpIc8_rg25r7JFGWTzGoG8GmDw"},
{"content":{"body":"i think that's already the case tho","msgtype":"m.text","org.matrix.msc1767.text":"i think that's already the case tho"},"ts":1656433508379,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FjkoZhvcxkXhLuDfnRlcYJjEWJ20vYfgRfITHNhZ4fU"},
{"content":{"body":"like if you have a module that does a console.log, and you do `await import(path); import(path)`, you'd get one log, but if you did `import(path); import(path);` you'd _probably_ get two logs but maybe you'd get one","format":"org.matrix.custom.html","formatted_body":"like if you have a module that does a console.log, and you do <code>await import(path); import(path)</code>, you'd get one log, but if you did <code>import(path); import(path);</code> you'd <em>probably</em> get two logs but maybe you'd get one","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you have a module that does a console.log, and you do `await import(path); import(path)`, you'd get one log, but if you did `import(path); import(path);` you'd _probably_ get two logs but maybe you'd get one","mimetype":"text/plain"},{"body":"like if you have a module that does a console.log, and you do <code>await import(path); import(path)</code>, you'd get one log, but if you did <code>import(path); import(path);</code> you'd <em>probably</em> get two logs but maybe you'd get one","mimetype":"text/html"}]},"ts":1656433546992,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jSs7-PCe-G3yGyMnYL6Ys0OqAx4QnDobCH3OAPKmXb8"},
{"content":{"body":"I mean sure if you have script tags for external things they could not run based on what the server does, network conditions, etc. But I don't understand the race condition/caching issue","msgtype":"m.text","org.matrix.msc1767.text":"I mean sure if you have script tags for external things they could not run based on what the server does, network conditions, etc. But I don't understand the race condition/caching issue"},"ts":1656433547207,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ctrIfUipH1I552mQCp7oifwrIhmodBZd1TRYYAE0v0g"},
{"content":{"body":"I think if you do `import(path); import(path)` you're pretty guaranteed to get just one log","format":"org.matrix.custom.html","formatted_body":"I think if you do <code>import(path); import(path)</code> you're pretty guaranteed to get just one log","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think if you do `import(path); import(path)` you're pretty guaranteed to get just one log","mimetype":"text/plain"},{"body":"I think if you do <code>import(path); import(path)</code> you're pretty guaranteed to get just one log","mimetype":"text/html"}]},"ts":1656433578030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dN5JPj3LTTpW5CUUaZ6ACrf2-KwkFdhFr9bsIqhT-U8"},
{"content":{"body":"hm, iirc we had to relax the constraint about that with import assertions because HTML didn't want to guarantee the caching","msgtype":"m.text","org.matrix.msc1767.text":"hm, iirc we had to relax the constraint about that with import assertions because HTML didn't want to guarantee the caching"},"ts":1656433613626,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RfKxPXF0vvWEoGxpHTQTPlxzMt92zjU5wzMmlr_mi4U"},
{"content":{"body":"I don't think it's relaxed in practice. HTML may do two fetches but definitely not evaluate the same JS code twice","msgtype":"m.text","org.matrix.msc1767.text":"I don't think it's relaxed in practice. HTML may do two fetches but definitely not evaluate the same JS code twice"},"ts":1656433658672,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_-Kww5NIfrZClcUujc6cajTorzsfFAUec1LOcIn_1aI"},
{"content":{"body":"that's the reason I was OK with it, since the right caching behavior happens in practice","msgtype":"m.text","org.matrix.msc1767.text":"that's the reason I was OK with it, since the right caching behavior happens in practice"},"ts":1656433694900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PRNygsdT4uUnNYEKrVSFBfMumOg5NEL9n_1i94W65tc"},
{"content":{"body":"(anyway your code sample didn't contain import assertions so this doesn't come up)","msgtype":"m.text","org.matrix.msc1767.text":"(anyway your code sample didn't contain import assertions so this doesn't come up)"},"ts":1656433713025,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aANdjRa_spg0ZHTmLj3z7hO6Eab3cskXBcfUD5j_Czo"},
{"content":{"body":"hmm, ok","msgtype":"m.text","org.matrix.msc1767.text":"hmm, ok"},"ts":1656433719979,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mWAxXBZg0O_QdhzYxd6WpXWvfewV4T7keqFlkJ6HwAc"},
{"content":{"body":"well, if you're unconvinced we can talk this through","msgtype":"m.text","org.matrix.msc1767.text":"well, if you're unconvinced we can talk this through"},"ts":1656433766981,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ujk61qC260Bo8F3vPB1cntWDuMwBKQ2ydLtdahMIGws"},
{"content":{"body":"are you referring to the restrictions in the JS spec or the behavior of HTML + JS?","msgtype":"m.text","org.matrix.msc1767.text":"are you referring to the restrictions in the JS spec or the behavior of HTML + JS?"},"ts":1656433790044,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AlOBsOp9ubb_e6BPXtYGUcVBsOtbuRnAL6CDAZp2kiA"},
{"content":{"body":"Iâ€™m pretty sure only one eval is guaranteed.","msgtype":"m.text","org.matrix.msc1767.text":"Iâ€™m pretty sure only one eval is guaranteed."},"ts":1656433997112,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$mkjPHs24jJHmpUemI7N2bowh1Zr6Oc6Kv-X6ct6GaIQ"},
{"content":{"body":"IIRC, Chrome even fires only one request because it dedupes those requests via the module map","msgtype":"m.text","org.matrix.msc1767.text":"IIRC, Chrome even fires only one request because it dedupes those requests via the module map"},"ts":1656434043893,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$xVg7Z-mo9xlUy5v2A9eaCGAucWQKHVaG38_usj4dfOw"},
{"content":{"body":"hmm, if it dedups those requests via the module map then maybe we should change the HTML spec back to what I initially proposed rather than the version Domenic insisted on","msgtype":"m.text","org.matrix.msc1767.text":"hmm, if it dedups those requests via the module map then maybe we should change the HTML spec back to what I initially proposed rather than the version Domenic insisted on"},"ts":1656434075451,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fM-YW4sZV-AUo0EKA6XI3qY2QqfXV5X1sts_SFtiko4"},
{"content":{"body":"I mean we should verify....","msgtype":"m.text","org.matrix.msc1767.text":"I mean we should verify...."},"ts":1656434089314,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$nYIVOUx3IYwo_AGB4l9pWM36pdcxXgEW-6WIQhNX3ZI"},
{"content":{"body":"Donâ€™t hold me to this ðŸ˜…","msgtype":"m.text","org.matrix.msc1767.text":"Donâ€™t hold me to this ðŸ˜…"},"ts":1656434097378,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$ZMib7fQZehZA7Ia_TzkXdJ0AvmVhp7uJ_qkoWZmrlr0"},
{"content":{"body":"well, I already had a long argument about this topic; I don't feel like raising it again myself, but if you verify this then I'm happy to follow through to codify that strategy","msgtype":"m.text","org.matrix.msc1767.text":"well, I already had a long argument about this topic; I don't feel like raising it again myself, but if you verify this then I'm happy to follow through to codify that strategy"},"ts":1656434137987,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rQ0aozoejYew5geciA-zay-X06r8_96ddLDm3z15Wmg"},
{"content":{"body":"Letâ€™s chat this through tomorrow so I can properly understand whatâ€™s going on","msgtype":"m.text","org.matrix.msc1767.text":"Letâ€™s chat this through tomorrow so I can properly understand whatâ€™s going on"},"ts":1656434160762,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$-1RJAM1k-HZno4iXkHiStgYGRIrFdKvEOzR2ljdsYJY"},
{"content":{"body":"I know for a fact that Chrome only fetched each specifier once per realm.","msgtype":"m.text"},"ts":1656435088309,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$N8Di8TQh8XKWfW8T9VGPTGYT8o7-V9wgm-AXWZAqUSQ"},
{"content":{"body":"Deno does the same too, and it implements there HTML module loader pretty exactly ","format":"org.matrix.custom.html","formatted_body":"Deno does the same too, and it implements there HTML module loader pretty exactly","msgtype":"m.text"},"ts":1656435123541,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$2V0HiUrEapvVT7cLCtDrlEVPZvguSXMJ5Unp7sRHR-Y"},
{"content":{"body":"In this case, we should probably go back to having the module map key not contain the import assertion","msgtype":"m.text","org.matrix.msc1767.text":"In this case, we should probably go back to having the module map key not contain the import assertion"},"ts":1656435155725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZNCfcijA6STGsMLrWJ6aZTe78JAgDoLWM-WFzdXvHQY"},
{"content":{"body":"I think a lot of the above conversation presumes that the module memo key and `import.meta.url` are the same. Within my current mental model, I would expect module script tags to have the same `import.meta.url` but maybe a gensym key for the module map, a key comprised of the referrer and something like a sequence number, or no key at all, similar to what Iâ€™d expect of module blocks. I would expect the referrer to be the same in all these cases as well, but I do not expect a referrer to be sufficient to uniquely address a module instance.","format":"org.matrix.custom.html","formatted_body":"I think a lot of the above conversation presumes that the module memo key and <code>import.meta.url</code> are the same. Within my current mental model, I would expect module script tags to have the same <code>import.meta.url</code> but maybe a gensym key for the module map, a key comprised of the referrer and something like a sequence number, or no key at all, similar to what Iâ€™d expect of module blocks. I would expect the referrer to be the same in all these cases as well, but I do not expect a referrer to be sufficient to uniquely address a module instance.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think a lot of the above conversation presumes that the module memo key and `import.meta.url` are the same. Within my current mental model, I would expect module script tags to have the same `import.meta.url` but maybe a gensym key for the module map, a key comprised of the referrer and something like a sequence number, or no key at all, similar to what Iâ€™d expect of module blocks. I would expect the referrer to be the same in all these cases as well, but I do not expect a referrer to be sufficient to uniquely address a module instance.","mimetype":"text/plain"},{"body":"I think a lot of the above conversation presumes that the module memo key and <code>import.meta.url</code> are the same. Within my current mental model, I would expect module script tags to have the same <code>import.meta.url</code> but maybe a gensym key for the module map, a key comprised of the referrer and something like a sequence number, or no key at all, similar to what Iâ€™d expect of module blocks. I would expect the referrer to be the same in all these cases as well, but I do not expect a referrer to be sufficient to uniquely address a module instance.","mimetype":"text/html"}]},"ts":1656440988770,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$j-_Q-qKZPSGY1gch2JiYSjdDHdEKhXuffL1SAtWmsHw"},
{"content":{"body":"However, if there truly is a constraint that there be one module instance per referrer per realm (eventually per loader), that can be made to work for loaders. I donâ€™t think that can be made to work for blocks and fragments, even in the base case of just one block.","msgtype":"m.text","org.matrix.msc1767.text":"However, if there truly is a constraint that there be one module instance per referrer per realm (eventually per loader), that can be made to work for loaders. I donâ€™t think that can be made to work for blocks and fragments, even in the base case of just one block."},"ts":1656441174840,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-9gduSbDWqmsb4Zk_AX6qXl7280THhpGZZbtfWOWIMg"},
{"content":{"body":"Oh, Surma, I am available to reprise my presentation with you, if thatâ€™s useful.","msgtype":"m.text","org.matrix.msc1767.text":"Oh, Surma, I am available to reprise my presentation with you, if thatâ€™s useful."},"ts":1656441229703,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$a4-c1k1xfzG9g0CqefOW6GJpcTEY49h0t73JrBnKKlI"},
{"content":{"body":"(not sure I fully follow, but i don't think `import.meta.url` works as a unique identifier for a module even right now)","msgtype":"m.text"},"ts":1656441256409,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$83gyisZ-EljwopbzaAEtBRM7nZCPRBl6wOiE6FLKbcU"},
{"content":{"body":"I agree. I might be misunderstanding the proposed constraint.","msgtype":"m.text","org.matrix.msc1767.text":"I agree. I might be misunderstanding the proposed constraint."},"ts":1656441276455,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1rbOP3fFCnQ8-M3jwx1RNlBUPhY2GrJxpao0BZd_uWw"},
{"content":{"body":"I might take you up on that. Thanks for offering! I'll catch up with some folks and see if i still have mental gaps","msgtype":"m.text"},"ts":1656441285910,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$fdvHo6PKA0eeWlYM27X3z5c5ZgcNjrY4-ke_CbKhZCk"}
]