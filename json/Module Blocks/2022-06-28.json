[
{"content":{"body":"Finally getting back around to catching up on chat log and reviewing nicolo-ribaudoâ€™s issue and PR. Sorry for the absence, had a fire at work.","format":"org.matrix.custom.html","formatted_body":"Finally getting back around to catching up on chat log and reviewing <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>â€™s issue and PR. Sorry for the absence, had a fire at work.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Finally getting back around to catching up on chat log and reviewing nicolo-ribaudoâ€™s issue and PR. Sorry for the absence, had a fire at work.","mimetype":"text/plain"},{"body":"Finally getting back around to catching up on chat log and reviewing <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>â€™s issue and PR. Sorry for the absence, had a fire at work.","mimetype":"text/html"}]},"ts":1656409727148,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$Pz2y8tudDuYjxCAnaje6MW13kyaVwnhEMby5x8PDOnw"},
{"content":{"body":"Catching up on the discussion, seems like it was really fruitful.","msgtype":"m.text","org.matrix.msc1767.text":"Catching up on the discussion, seems like it was really fruitful."},"ts":1656409739934,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$pQgFd7n0N0vFA6EGbPmfOEEPvbZ7tz_PZ1McIrooy9o"},
{"content":{"body":"Thanks for merging!","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for merging!"},"ts":1656410364958,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xo4m15YnCdsVRecXRNWgFKJiyiuQ_VgK4aRYN--JGxk"},
{"content":{"body":"Btw, could you rename `master` to `main`? (because we should do it, and because it's annoying that my muscle memory is `git checkout main` but it fails in that repo ðŸ˜…)","format":"org.matrix.custom.html","formatted_body":"Btw, could you rename <code>master</code> to <code>main</code>? (because we should do it, and because it's annoying that my muscle memory is <code>git checkout main</code> but it fails in that repo ðŸ˜…)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Btw, could you rename `master` to `main`? (because we should do it, and because it's annoying that my muscle memory is `git checkout main` but it fails in that repo ðŸ˜…)","mimetype":"text/plain"},{"body":"Btw, could you rename <code>master</code> to <code>main</code>? (because we should do it, and because it's annoying that my muscle memory is <code>git checkout main</code> but it fails in that repo ðŸ˜…)","mimetype":"text/html"}]},"ts":1656410426644,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YPucp09kffnxuK3yF2MAcyAVRUFNW-ojAfluh4IJVMg"},
{"content":{"body":"oh absolutely","msgtype":"m.text","org.matrix.msc1767.text":"oh absolutely"},"ts":1656410434489,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$xrXkSTxkvzsl_hJ2rkGpm5so-n2HPZqFaad-ADExua8"},
{"content":{"body":"will do that now","msgtype":"m.text","org.matrix.msc1767.text":"will do that now"},"ts":1656410436015,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$z_xsI5jk-PUQ83-SF9ND6_OE8rp7cPvvYaFwkJRKLg0"},
{"content":{"body":"(and remove the function expressions from the spec)","msgtype":"m.text","org.matrix.msc1767.text":"(and remove the function expressions from the spec)"},"ts":1656410442032,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$8PhQKoexDY-hG5iPKvGR9JWkKLfS13lF0fe8mQcMorY"},
{"content":{"body":"Thank you!","msgtype":"m.text","org.matrix.msc1767.text":"Thank you!"},"ts":1656410496223,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vm5kSx4ix7DP_SWz2_zl0ur0Yc0us7-pXykvDBSjZXo"},
{"content":{"body":"Done","msgtype":"m.text","org.matrix.msc1767.text":"Done"},"ts":1656410520084,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$COhBtOwjg59GR5d7ee8FH25XHLFtGs5YOGBWw27PNNw"},
{"content":{"body":"Do we want to arrange a sync between Surma, Nicolo and me on module blocks some time soon?","msgtype":"m.text","org.matrix.msc1767.text":"Do we want to arrange a sync between Surma, Nicolo and me on module blocks some time soon?"},"ts":1656419473407,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iQBl8i3fKVO23n9QRsS69Fu2vgEDDHqaplBKRxy6A4Q"},
{"content":{"body":"could be with others too but especially I want to make sure to catch up with Surma","msgtype":"m.text","org.matrix.msc1767.text":"could be with others too but especially I want to make sure to catch up with Surma"},"ts":1656419537598,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u9ficVQ7DY3N8qn-if9Gx9tvQrUbrcUd_HT10bxPQzA"},
{"content":{"body":"I'm game!","msgtype":"m.text"},"ts":1656419674507,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$NSuuxvBW4M6JAtYrVuVMSDGpsl4t--Iz4Ad-ydMlMCg"},
{"content":{"body":"Sure! If you want to do it today, I'm free at 16 CEST (in 1:15 hours) or 19 CEST","msgtype":"m.text"},"ts":1656420258611,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hXxhxgir5_jzRJP0lWSmQ75m9bG9ONkXSW1tEb97HcY"},
{"content":{"body":"Otherwise tomorrow ","msgtype":"m.text"},"ts":1656420265981,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$L5cpKlH2_daUpbUgqPFTp3q1XuWfp5aVahzE5bjPPDg"},
{"content":{"body":"Yeah I'm free then if Surma is","msgtype":"m.text","org.matrix.msc1767.text":"Yeah I'm free then if Surma is"},"ts":1656420287477,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iGs_YttJE0EX45A3TAFaD3p3K4k5P0JxYf4BtEKIZos"},
{"content":{"body":"No sorry, today is meeting extravaganze for me. Tomorrow?","msgtype":"m.text","org.matrix.msc1767.text":"No sorry, today is meeting extravaganze for me. Tomorrow?"},"ts":1656421006883,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$5Euov6JhaljeBpSoCVBaGREYK8m1ZFd1qZiUzduA3zQ"},
{"content":{"body":"Tomorrow between 15 and 18 CEST? (between 24 and 27 hours from now)","msgtype":"m.text"},"ts":1656421382203,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dxl9ntn8SIbDpNK9vAu1OSI7glOSh3w4iF1sz-B68Ik"},
{"content":{"body":"Yup, Iâ€™m free","msgtype":"m.text","org.matrix.msc1767.text":"Yup, Iâ€™m free"},"ts":1656424981217,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$N7Btra3v9qIrdZQMm51YuJ7Py4I0QtLZjFgKdkvmm88"},
{"content":{"body":"Regarding \"keeping the same `import.meta.url`\": that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:\n```js\nawait import(\"./foo.js\");\nconst foo = module {\n  await import(\"./foo.js\");\n};\n```\nThis should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).\n\nIn practice this will mean passing something like _parentModule_.[[HostData]] to _moduleBlock_.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding &quot;keeping the same <code>import.meta.url</code>&quot;: that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:</p>\n<pre><code class=\"language-js\">await import(&quot;./foo.js&quot;);\nconst foo = module {\n  await import(&quot;./foo.js&quot;);\n};\n</code></pre>\n<p>This should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).</p>\n<p>In practice this will mean passing something like <em>parentModule</em>.[[HostData]] to <em>moduleBlock</em>.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Regarding \"keeping the same `import.meta.url`\": that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:\n```js\nawait import(\"./foo.js\");\nconst foo = module {\n  await import(\"./foo.js\");\n};\n```\nThis should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).\n\nIn practice this will mean passing something like _parentModule_.[[HostData]] to _moduleBlock_.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.","mimetype":"text/plain"},{"body":"<p>Regarding &quot;keeping the same <code>import.meta.url</code>&quot;: that is something that should be done at the HTML level, and in ecma262 we just have to make sure to pass enough info to host hooks to make it possible. However, I would also like to guarantee that, when running in the same realm, the two dynamic imports in this file always return the same module:</p>\n<pre><code class=\"language-js\">await import(&quot;./foo.js&quot;);\nconst foo = module {\n  await import(&quot;./foo.js&quot;);\n};\n</code></pre>\n<p>This should be done at the ecma262 level, similarly to how it's already guaranteed when they are in the same module (in a pre-module-blocks world).</p>\n<p>In practice this will mean passing something like <em>parentModule</em>.[[HostData]] to <em>moduleBlock</em>.[[HostData]], however we might need to do it using a new host-reserved slot (for example, the currently non-existing [[Referrer]] mentioned in the loaders room) that is guaranteed to be realm-agnostic (because the same module block could be instantiated in multiple realms). This is because [[HostData]] can currently be anything.</p>\n","mimetype":"text/html"}]},"ts":1656431903570,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3O5YhnMAgMwBUcxj_a-N-gqdXPzt4d-MCFfr7k6JRMk"},
{"content":{"body":"I think the same import.meta object should be used, and the same referrer *module* should be passed up to HTML (rather than passing the module block up)","format":"org.matrix.custom.html","formatted_body":"I think the same import.meta object should be used, and the same referrer <em>module</em> should be passed up to HTML (rather than passing the module block up)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the same import.meta object should be used, and the same referrer *module* should be passed up to HTML (rather than passing the module block up)","mimetype":"text/plain"},{"body":"I think the same import.meta object should be used, and the same referrer <em>module</em> should be passed up to HTML (rather than passing the module block up)","mimetype":"text/html"}]},"ts":1656431940369,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Cqek4SdGLLNVV6IQmWhzn64H1xR8XdOX0mtK8HiIkvs"},
{"content":{"body":"is this what your patch does?","msgtype":"m.text","org.matrix.msc1767.text":"is this what your patch does?"},"ts":1656431952218,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$62nfITItDnrFhaHPavwpMzigwb2S-6IPmQI6QLWY1Jo"},
{"content":{"body":"No, my patch didn't take care of that yet","msgtype":"m.text","org.matrix.msc1767.text":"No, my patch didn't take care of that yet"},"ts":1656431968608,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JpGX_HapCRPNp6iAVPxh_miH9jRk2o5-Drg8hSWyWUk"},
{"content":{"body":"You cannot use the same `import.meta` object, because they could be in different realms","format":"org.matrix.custom.html","formatted_body":"You cannot use the same <code>import.meta</code> object, because they could be in different realms","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You cannot use the same `import.meta` object, because they could be in different realms","mimetype":"text/plain"},{"body":"You cannot use the same <code>import.meta</code> object, because they could be in different realms","mimetype":"text/html"}]},"ts":1656431981747,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2OK21BZkhfTEymfwxlgdxq1HIaJEDA0S9ws1w6-04y0"},
{"content":{"body":"oh right of course... it should be the same referrer module, and then the host will probably build an import.meta which has the same import.meta.url","msgtype":"m.text","org.matrix.msc1767.text":"oh right of course... it should be the same referrer module, and then the host will probably build an import.meta which has the same import.meta.url"},"ts":1656432352602,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yXR7JdnPjAR4fdpFzOh0zC-W3DF9WK3ELAwPRFbMSzo"},
{"content":{"body":"this would compromise a goal that Jordan has, where the import.meta.url would be the same for two different modules... but this is already the case if you have multiple <script type=module> things on the same page","msgtype":"m.text","org.matrix.msc1767.text":"this would compromise a goal that Jordan has, where the import.meta.url would be the same for two different modules... but this is already the case if you have multiple <script type=module> things on the same page"},"ts":1656432399838,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iXp6JBoffol8NtbP71c1S0cF7WSbLSIGlyNUFQy8cm8"}
]