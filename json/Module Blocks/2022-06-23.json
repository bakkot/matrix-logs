[
{"content":{"body":"Just to register my personal preference regarding module blocks and idempotence: import(module {}) should be analogous to eval. The module should always be evaluated and should not be memoized, even by a gensym. That would provide a consistent experience even in the case where the module gets transported or returned. Also means that the loader doesn’t retain the resulting graph of module instances, so some things could be collected earlier. That doesn’t preclude user code memoizing the result, even using the identity of the block as a memo key. In short, I strongly prefer to avoid inconsistent behavior between local and remote versions of import(block).","msgtype":"m.text","org.matrix.msc1767.text":"Just to register my personal preference regarding module blocks and idempotence: import(module {}) should be analogous to eval. The module should always be evaluated and should not be memoized, even by a gensym. That would provide a consistent experience even in the case where the module gets transported or returned. Also means that the loader doesn’t retain the resulting graph of module instances, so some things could be collected earlier. That doesn’t preclude user code memoizing the result, even using the identity of the block as a memo key. In short, I strongly prefer to avoid inconsistent behavior between local and remote versions of import(block)."},"ts":1655964759236,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FndVL9IrFTkK7lgo08EIkXiCkS3CusS8A4iAryiImqs"},
{"content":{"body":"Kris Kowal On the other hand `import(\"data:text/javascript, ...\")` is memoized, and it's the closest thing we have to module blocks ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>On the other hand `import(\"data:text/javascript, ...\")` is memoized, and it's the closest thing we have to module blocks ","msgtype":"m.text"},"ts":1655969156671,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Fnh-ZRawTGW-M78BjlUWdtxkQfgVXpDy0ePqFFcLQ6E"},
{"content":{"body":"Even if being a primitive does not suffer from the structured clone problem ","msgtype":"m.text"},"ts":1655969238420,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q8XkJzawn3454s_eBlidwtbQSIsMeutAhFfE8Ad5MZM"}
]