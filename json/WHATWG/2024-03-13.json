[
{"content":{"body":"Seems like the sort of thing where if your concern was interop, step 1 would be an exhaustive test suite.","m.mentions":{},"msgtype":"m.text"},"ts":1710293087287,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Fu1IsGIRYoNutZmmnKZMXLOkGIPmbcUzxJzP2rjXkI0"},
{"content":{"body":"I guess my biggest concern is whether we can maybe prevent other implementors from spending time evaluating that algorithm, if it‘s not actually important or useful for it to be actually be implemented as-is to the letter of the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1710293366575,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Pk9rdLY0uXsUxOdXprzPntJS3fyP7pBioZgAJhTipA8"},
{"content":{"body":"It’s not clear to me at least what the algorithm is actually based on","m.mentions":{},"msgtype":"m.text"},"ts":1710293385717,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$b2Zex3Z9p8eRrGNLD30-peNQAiLmTqlFgkLzJUZIS-k"},
{"content":{"body":"For example, was is written based on reading the double definition in the IEEE 754 spec and then attempting to put together an algorithm for parsing that? Or else was it written by looking at existing parsing code for double-parsing functions (`strtod` or whatever)?","format":"org.matrix.custom.html","formatted_body":"For example, was is written based on reading the double definition in the IEEE 754 spec and then attempting to put together an algorithm for parsing that? Or else was it written by looking at existing parsing code for double-parsing functions (<code>strtod</code> or whatever)?","m.mentions":{},"msgtype":"m.text"},"ts":1710293486757,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$J4gvGLxBwWfINdq8tuL4r2fJ6ZvsiyTvmBEaFKe6gM8"},
{"content":{"body":"I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like\n> _Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as [double-conversion](https://github.com/google/double-conversion) and [fast_float](https://github.com/fastfloat/fast_float)._\n…or whatever similar wording we might be able to get agreement on.","format":"org.matrix.custom.html","formatted_body":"<p>I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like</p>\n<blockquote>\n<p><em>Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as <a href=\"https://github.com/google/double-conversion\">double-conversion</a> and <a href=\"https://github.com/fastfloat/fast_float\">fast_float</a>.</em><br>…or whatever similar wording we might be able to get agreement on.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710293756894,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$MXJLq2AwMv4nhmeKpuw745z-K1CrmtgCbTavqodVpIA"},
{"content":{"body":" * I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like\n\n> _Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as [double-conversion](https://github.com/google/double-conversion) and [fast\\_float](https://github.com/fastfloat/fast_float)._\n\n…or whatever similar wording we might be able to get agreement on.","format":"org.matrix.custom.html","formatted_body":" * <p>I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like</p>\n<blockquote>\n<p><em>Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as <a href=\"https://github.com/google/double-conversion\">double-conversion</a> and <a href=\"https://github.com/fastfloat/fast_float\">fast_float</a>.</em></p>\n</blockquote>\n<p>…or whatever similar wording we might be able to get agreement on.</p>\n","m.mentions":{},"m.new_content":{"body":"I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like\n\n> _Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as [double-conversion](https://github.com/google/double-conversion) and [fast\\_float](https://github.com/fastfloat/fast_float)._\n\n…or whatever similar wording we might be able to get agreement on.","format":"org.matrix.custom.html","formatted_body":"<p>I would personally be happy with us just adding a non-normative Note to the end or that algorithm, saying something like</p>\n<blockquote>\n<p><em>Note: In practice, rather than handcrafting an implementation of the above algorithm, most existing implementations use double-parsing functions from libraries such as <a href=\"https://github.com/google/double-conversion\">double-conversion</a> and <a href=\"https://github.com/fastfloat/fast_float\">fast_float</a>.</em></p>\n</blockquote>\n<p>…or whatever similar wording we might be able to get agreement on.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MXJLq2AwMv4nhmeKpuw745z-K1CrmtgCbTavqodVpIA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710293773598,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$JnOyxKxFKxX1pzCoFSAmmmgPFw5zmuhSwwT6Zl4onFg"},
{"content":{"body":"I think it’s also worth noting that the ES spec doesn’t rely on the HTML floating-point algorithm for double parsing, and I think the CSS spec doesn’t either.\n\nAnd so also worth noting that because of that, implementations do double-parsing in places in their code other than just for HTML attribute values — notably, in the JavaScript-handling sources, and in the CSS sources.\n\nAnd so, in the engine sources, implementations have common/shared code for double-parsing that‘s called into from the HTML-attribute parsing code, and the JavaScript parsing code, and the CSS parsing code.\n\nGiven all that, it seems very unlikely that any engine over the long run is going to have a specific implementation of the HTML floating-point algorithm that’s separate from their shared double-parsing code. (I realize that Ladybird does now, but I think that’s likely to change eventually — for various reasons, maybe including performance.)","m.mentions":{},"msgtype":"m.text"},"ts":1710294360641,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$R_IrwaTtRtLd9S4Cvyj5omFNGe5VGoetoVqS9YuvsbY"},
{"content":{"body":"I’m personally happy with the existing level of WPT coverage that we have for this — with https://github.com/web-platform-tests/wpt/pull/44355 now merged. What I’m less happy about is the effect it may have for causing implementors be unaware that existing engines don’t implement the algorithm as-is, and for causing implementors to potentially waste time.","m.mentions":{},"msgtype":"m.text"},"ts":1710294819305,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$2tSU-kp_k-rI6e3SyYxkxabVuQ2b06-3Ipy0CE05eTE"},
{"content":{"body":"I mean, in general it's pretty rare to implement spec algorithms as-is, especially for low-level stuff like numbers and strings. https://infra.spec.whatwg.org/#algorithm-conformance and all that.","m.mentions":{},"msgtype":"m.text"},"ts":1710294901488,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$GxnOOEjGC-3i56p5kU0tez6GRLi8fsHj0O0nCg8gS2o"},
{"content":{"body":"True, but in most cases what’s implemented in engines is an algorithm that’s handcrafted to be a workalike that’s functionally equivalent to the spec algorithm — rather than instead being implemented by just calling some code in a third-party library that you don’t know actually fully conforms to the requirements in the spec as written.","m.mentions":{},"msgtype":"m.text"},"ts":1710295084322,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$_DVKh4iOQm8r4z4Yx2CuZ4Tt56rRXl9drU1fUm3QaUI"}
]