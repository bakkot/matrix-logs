[
{"content":{"body":"sideshowbarker: Domenic: if you could look at https://github.com/whatwg/dom/pull/1004 at least up until line 2100 that'd be terrific","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: if you could look at https://github.com/whatwg/dom/pull/1004 at least up until line 2100 that'd be terrific","msgtype":"m.text"},"ts":1627996892095,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$nbJX1FpcISfunEH0U8iTOFe0UjM5fZRYq2SSDjYToT4"},
{"content":{"body":"annevk: will look now","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: will look now","msgtype":"m.text"},"ts":1627997277256,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$qIMYQ7WXKNFBpWp2TOhH-PoyOxvaSNSmtOvcoTTE6wA"},
{"content":{"body":"Thanks sideshowbarker. To be clear though, I was thinking of aligning more prose with this new model if it looks good. There's actually quite a lot of text is impacted.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>. To be clear though, I was thinking of aligning more prose with this new model if it looks good. There's actually quite a lot of text is impacted.","msgtype":"m.text"},"ts":1628002405299,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$3fniKDJBsGW46lub_-ZBuvQ4eVz5vRHLthxYyCajuPI"},
{"content":{"body":"annevk: so you want suggestions on what else needs to be changed?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: so you want suggestions on what else needs to be changed?","msgtype":"m.text"},"ts":1628002440639,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Z-vxOWX_K6D7zGq5T_Uv8G5Fo4a6026INI8h0S-yDYQ"},
{"content":{"body":"sideshowbarker: no, just if this direction looks good as a thing to expand upon; I can find the rest :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: no, just if this direction looks good as a thing to expand upon; I can find the rest :-)","msgtype":"m.text"},"ts":1628002465726,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$UH9brwBEbnr_0yCIB7YoPMM4wrBKkNGz8-4IO5XzTgg"},
{"content":{"body":"OK, I think in general it’s definitely an improvement","msgtype":"m.text"},"ts":1628002483918,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$62qkSratFuXLAk9BJ-CetwxyT5PPYbV5VVeWpYyFTbQ"},
{"content":{"body":"I am as usual more interested in the use case of web developers reading the spec than I am for implementors","msgtype":"m.text"},"ts":1628002525257,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$GsAk5vixac3YSzul8oiMqcZQ67I0UUAv0EuL5Fi7aPA"},
{"content":{"body":"as far as implementors, I get the impression that the existing spec works well overall for anybody implementing/writing code from it","msgtype":"m.text"},"ts":1628002585269,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Hifw0M0u-Ae1JXfxTNUkXJr6EmRLvXCbX1dazQrptnc"},
{"content":{"body":" * as far as implementors, I get the impression that the existing spec works well overall for anybody implementing/writing code from it","m.new_content":{"body":"as far as implementors, I get the impression that the existing spec works well overall for anybody implementing/writing code from it","msgtype":"m.text"},"m.relates_to":{"event_id":"$Hifw0M0u-Ae1JXfxTNUkXJr6EmRLvXCbX1dazQrptnc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628002593776,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$5gVpM1hr8Yc4yCmntI_xDk8L92fFrTbhgxqh5T1iNCk"},
{"content":{"body":"but I think it’s a lot harder for developers to learn from","msgtype":"m.text"},"ts":1628002615931,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Ny-j2iJkVRlyLvXaMTzkMts7WRRQ5LIz8o9gsi5RJ2s"},
{"content":{"body":"Apparently jsdom ran into issues with \"is a Text node\" not clearly including CDATASection nodes","msgtype":"m.text"},"ts":1628002627004,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$GPPMn0smFfdFn9e4KrvhyeyCSh7fjv0y3gtwWjjaXEc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1628002634710,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$XFxV2F6feI2MrGapYB7fHjkvRl62lRcCPYakqDpImGU"},
{"content":{"body":"OK, yeah, I wondered who would actually be implementing these parts at this point","msgtype":"m.text"},"ts":1628002663010,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$qTpR5mmHsGdBclnZiEU7P2VXeLyBZsWeKDt7ZX80ZhE"},
{"content":{"body":"You don't really want to say Text or CDATASection however as otherwise you also need to say Element or HTMLAnchorElement or ... It gets tricky quickly","msgtype":"m.text"},"ts":1628002719298,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$EmZ0mCTKiZsbFWnQcXPRDp6Rpv_BV7PUja5jhFiu1Ik"},
{"content":{"body":"yeah, I can see that","msgtype":"m.text"},"ts":1628002749452,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$gIiFHfv3tvqj78gJ5swuAC9WWencU-6IfU533-BjY6o"},
{"content":{"body":"Anyway, I hope that depending on CharacterData in a number of cases will make that more clear, as well as more clearly explaining what X node is.","msgtype":"m.text"},"ts":1628002754889,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$gu6wvDFztze6FwvVzffnKc7Vn_T_n6k_HGZ_FgNwhOo"},
{"content":{"body":"I have recently been looking at some of the lowe-level DOM-related content at MDN, and to speak generously… it has a lot of room for improvement","msgtype":"m.text"},"ts":1628002826929,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$OW1BvnmqVaHCz-sKRBRbmNPiWHEpqfYQScYVIrXC8Lk"},
{"content":{"body":"there is actually nowhere any good “Introduction to the DOM” for web developers","msgtype":"m.text"},"ts":1628002855943,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$8te0VDvU81ZVHxab8ToFvQzB3Mslw3bKE-iqmSV1An0"},
{"content":{"body":"> <@annevk:mozilla.org> You don't really want to say Text or CDATASection however as otherwise you also need to say Element or HTMLAnchorElement or ... It gets tricky quickly\n\nThe difference is that when working in \"DOM\" code as opposed to \"HTML\" code, it's pretty natural to use .nodeType a lot.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$EmZ0mCTKiZsbFWnQcXPRDp6Rpv_BV7PUja5jhFiu1Ik?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br>You don&#39;t really want to say Text or CDATASection however as otherwise you also need to say Element or HTMLAnchorElement or ... It gets tricky quickly</blockquote></mx-reply>The difference is that when working in &quot;DOM&quot; code as opposed to &quot;HTML&quot; code, it's pretty natural to use .nodeType a lot.","m.relates_to":{"m.in_reply_to":{"event_id":"$EmZ0mCTKiZsbFWnQcXPRDp6Rpv_BV7PUja5jhFiu1Ik"}},"msgtype":"m.text"},"ts":1628002875239,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$FzJLxot0aNVygetyKWF9XcqHugjrPJ3TLYFK7Pu_pSI"},
{"content":{"body":"Domenic: yeah that's fair, but there's nothing that corresponds to nodeType","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: yeah that's fair, but there's nothing that corresponds to nodeType","msgtype":"m.text"},"ts":1628002918359,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$1g2eb2i132J_UOJzVEvuRTw-4W131VruQP_H2T1fihk"},
{"content":{"body":"Yeah it's just very easy to think that \"is a Text node\" means .nodeType === TEXT_NODE","msgtype":"m.text"},"ts":1628002937083,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$GL_O9-HorgezcQYBpDpXjYqEc-AZJHGoOk_DhnPk79U"},
{"content":{"body":"I just opened the PR but if you use \"implements\" that will help.","msgtype":"m.text"},"ts":1628002952291,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Rt_gbSgvO1fng3tpf4HV0_1y4IAzFMCRL8LU85CKheA"},
{"content":{"body":"Hi, I was checking the standard library of the Go programming language and found that the STD3 rules are disabled by default in the current WHATWG URL standard. I was a bit surprised because many Unicode characters in their KC normal forms could introduce forbidden host code points `@`, `#`, `/`, ... that are dangerous or at least misleading. The STD3 check protects us from those dangerous characters. I understand many existing hosts have the underscore `_` in their names that is forbidden by the STD3, but by disabling the entire STD3 check, we become vulnerable to many other attacks based on Unicode normalization. I believe this must have been carefully discussed somewhere within WHATWG. If not, I wonder how I should comment on the current URL standard and propose new changes. I am familiar with GitHub operations but I never interacted with WHATWG before, and would appreciate your guidance in making a proposal.\n\nTL;DR: I wish to add a warning about the danger of disabling the STD3 check and, if an application chooses to disable the STD3 check (possibly to allow the underscore), it should verify that forbidden host code points would never arise from normalization and mapping.","format":"org.matrix.custom.html","formatted_body":"<p>Hi, I was checking the standard library of the Go programming language and found that the STD3 rules are disabled by default in the current WHATWG URL standard. I was a bit surprised because many Unicode characters in their KC normal forms could introduce forbidden host code points <code>@</code>, <code>#</code>, <code>/</code>, ... that are dangerous or at least misleading. The STD3 check protects us from those dangerous characters. I understand many existing hosts have the underscore <code>_</code> in their names that is forbidden by the STD3, but by disabling the entire STD3 check, we become vulnerable to many other attacks based on Unicode normalization. I believe this must have been carefully discussed somewhere within WHATWG. If not, I wonder how I should comment on the current URL standard and propose new changes. I am familiar with GitHub operations but I never interacted with WHATWG before, and would appreciate your guidance in making a proposal.</p>\n<p>TL;DR: I wish to add a warning about the danger of disabling the STD3 check and, if an application chooses to disable the STD3 check (possibly to allow the underscore), it should verify that forbidden host code points would never arise from normalization and mapping.</p>\n","msgtype":"m.text"},"ts":1628015855061,"senderName":"favonia","senderId":"@favonia:matrix.org","id":"$JqAKc6Iej3srKz6HWHedde6OBNtagSF_pBoleZZfLZ0"},
{"content":{"body":"favonia: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@favonia:matrix.org\">favonia</a>: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","msgtype":"m.text"},"ts":1628021536771,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XQ1lGEtWvOC_HKlF88N4Gf1L14gdMAo7IJI0oskYqng"},
{"content":{"body":" * favonia: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@favonia:matrix.org\">favonia</a>: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","m.new_content":{"body":"favonia: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@favonia:matrix.org\">favonia</a>: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser","msgtype":"m.text"},"m.relates_to":{"event_id":"$XQ1lGEtWvOC_HKlF88N4Gf1L14gdMAo7IJI0oskYqng","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628021562938,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XbcG1RPvaM8LQc9lOLCzINC5wxzUqJ5fMtJaHx1df_g"},
{"content":{"body":"> <@domenicdenicola:matrix.org> favonia: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser\n\nAs far as I understand, Step 7 does not prevent such attacks. The attack is that the _same_ URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example: \n```\nhttps://google.com\\uFF03@evil.com\n```\nA parser would give the following results:\n- username: `google.com\\uFF03`\n- host: `evil.com`\n\nBut with its NFKC:\n```\nhttps://google.com#@evil.com\n```\na parser would give these results instead:\n- host: `google.com`\n- fragment: `@evil.com`\n\nSo, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$XQ1lGEtWvOC_HKlF88N4Gf1L14gdMAo7IJI0oskYqng?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@favonia:matrix.org\">favonia</a>: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser</blockquote></mx-reply><p>As far as I understand, Step 7 does not prevent such attacks. The attack is that the <em>same</em> URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:</p>\n<pre><code>https://google.com\\uFF03@evil.com\n</code></pre>\n<p>A parser would give the following results:</p>\n<ul>\n<li>username: <code>google.com\\uFF03</code></li>\n<li>host: <code>evil.com</code></li>\n</ul>\n<p>But with its NFKC:</p>\n<pre><code>https://google.com#@evil.com\n</code></pre>\n<p>a parser would give these results instead:</p>\n<ul>\n<li>host: <code>google.com</code></li>\n<li>fragment: <code>@evil.com</code></li>\n</ul>\n<p>So, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$XQ1lGEtWvOC_HKlF88N4Gf1L14gdMAo7IJI0oskYqng"}},"msgtype":"m.text"},"ts":1628024779998,"senderName":"favonia","senderId":"@favonia:matrix.org","id":"$NUpr_UxqIi1FrZXYurCq16q16CgV5BP9uFCg-S9xPe8"},
{"content":{"body":"> <@domenicdenicola:matrix.org> favonia: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser\n\n * As far as I understand, Step 7 does not prevent such attacks. One attack is that the _same_ URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:\n```\nhttps://google.com\\uFF03@evil.com\n```\n\nA parser would give the following results:\n- username: `google.com\\uFF03`\n- host: `evil.com`\n\nBut with its NFKC:\n```\nhttps://google.com#@evil.com\n```\n\na parser would give these results instead:\n- host: `google.com`\n- fragment: `@evil.com`\n\nSo, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$XQ1lGEtWvOC_HKlF88N4Gf1L14gdMAo7IJI0oskYqng?via=mozilla.org&amp;via=matrix.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@favonia:matrix.org\">favonia</a>: I don't think I understand the issue. Because those are forbidden host code points parsing will fail if they appear. It doesn't matter for the spec whether the parsing fails due to Unicode STD3 checking in step 5 or because of the explicit step 7 in https://url.spec.whatwg.org/#concept-host-parser</blockquote></mx-reply> * <p>As far as I understand, Step 7 does not prevent such attacks. One attack is that the <em>same</em> URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:</p>\n<pre><code>https://google.com\\uFF03@evil.com\n</code></pre>\n<p>A parser would give the following results:</p>\n<ul>\n<li>username: <code>google.com\\uFF03</code></li>\n<li>host: <code>evil.com</code></li>\n</ul>\n<p>But with its NFKC:</p>\n<pre><code>https://google.com#@evil.com\n</code></pre>\n<p>a parser would give these results instead:</p>\n<ul>\n<li>host: <code>google.com</code></li>\n<li>fragment: <code>@evil.com</code></li>\n</ul>\n<p>So, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.</p>\n","m.new_content":{"body":"As far as I understand, Step 7 does not prevent such attacks. One attack is that the _same_ URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:\n```\nhttps://google.com\\uFF03@evil.com\n```\n\nA parser would give the following results:\n- username: `google.com\\uFF03`\n- host: `evil.com`\n\nBut with its NFKC:\n```\nhttps://google.com#@evil.com\n```\n\na parser would give these results instead:\n- host: `google.com`\n- fragment: `@evil.com`\n\nSo, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.","format":"org.matrix.custom.html","formatted_body":"<p>As far as I understand, Step 7 does not prevent such attacks. One attack is that the <em>same</em> URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:</p>\n<pre><code>https://google.com\\uFF03@evil.com\n</code></pre>\n<p>A parser would give the following results:</p>\n<ul>\n<li>username: <code>google.com\\uFF03</code></li>\n<li>host: <code>evil.com</code></li>\n</ul>\n<p>But with its NFKC:</p>\n<pre><code>https://google.com#@evil.com\n</code></pre>\n<p>a parser would give these results instead:</p>\n<ul>\n<li>host: <code>google.com</code></li>\n<li>fragment: <code>@evil.com</code></li>\n</ul>\n<p>So, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$NUpr_UxqIi1FrZXYurCq16q16CgV5BP9uFCg-S9xPe8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628024845388,"senderName":"favonia","senderId":"@favonia:matrix.org","id":"$Q_gsAsjKVMEn6hbq0BPDBOPc4q0hqoSroFQaLvp4Fks"},
{"content":{"body":" * As far as I understand, Step 7 does not prevent such attacks. One attack is that the _same_ URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:\n```\nhttps://google.com\\uFF03@evil.com\n```\n\nA parser would give the following results:\n- username: `google.com\\uFF03`\n- host: `evil.com`\n\nBut with its NFKC (where `\\uFF03` is normalized to `#`):\n```\nhttps://google.com#@evil.com\n```\n\na parser would give these results instead:\n- host: `google.com`\n- fragment: `@evil.com`\n\nSo, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.","format":"org.matrix.custom.html","formatted_body":" * <p>As far as I understand, Step 7 does not prevent such attacks. One attack is that the <em>same</em> URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:</p>\n<pre><code>https://google.com\\uFF03@evil.com\n</code></pre>\n<p>A parser would give the following results:</p>\n<ul>\n<li>username: <code>google.com\\uFF03</code></li>\n<li>host: <code>evil.com</code></li>\n</ul>\n<p>But with its NFKC (where <code>\\uFF03</code> is normalized to <code>#</code>):</p>\n<pre><code>https://google.com#@evil.com\n</code></pre>\n<p>a parser would give these results instead:</p>\n<ul>\n<li>host: <code>google.com</code></li>\n<li>fragment: <code>@evil.com</code></li>\n</ul>\n<p>So, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.</p>\n","m.new_content":{"body":"As far as I understand, Step 7 does not prevent such attacks. One attack is that the _same_ URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:\n```\nhttps://google.com\\uFF03@evil.com\n```\n\nA parser would give the following results:\n- username: `google.com\\uFF03`\n- host: `evil.com`\n\nBut with its NFKC (where `\\uFF03` is normalized to `#`):\n```\nhttps://google.com#@evil.com\n```\n\na parser would give these results instead:\n- host: `google.com`\n- fragment: `@evil.com`\n\nSo, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.","format":"org.matrix.custom.html","formatted_body":"<p>As far as I understand, Step 7 does not prevent such attacks. One attack is that the <em>same</em> URL (record) has multiple Unicode normal forms that would be parsed differently. Here is an example:</p>\n<pre><code>https://google.com\\uFF03@evil.com\n</code></pre>\n<p>A parser would give the following results:</p>\n<ul>\n<li>username: <code>google.com\\uFF03</code></li>\n<li>host: <code>evil.com</code></li>\n</ul>\n<p>But with its NFKC (where <code>\\uFF03</code> is normalized to <code>#</code>):</p>\n<pre><code>https://google.com#@evil.com\n</code></pre>\n<p>a parser would give these results instead:</p>\n<ul>\n<li>host: <code>google.com</code></li>\n<li>fragment: <code>@evil.com</code></li>\n</ul>\n<p>So, the string and one of its normal forms are both valid URL records, but with different structures. The discrepancies can be exploited in many IDNA-aware applications to fool users or even bypass security checking. This attack is known as HostSplit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$NUpr_UxqIi1FrZXYurCq16q16CgV5BP9uFCg-S9xPe8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628024916298,"senderName":"favonia","senderId":"@favonia:matrix.org","id":"$o8tEaFETcW9jcRe-yl3O58R6sc3CFzx7hYb8SakNSnM"},
{"content":{"body":"That is not how those URLs are parsed","msgtype":"m.text"},"ts":1628025226165,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$zfXTfjrligZyRcFaSdRbn5XfXgbOMeW0o9KdHcGT2tM"},
{"content":{"body":"See https://jsdom.github.io/whatwg-url/#url=aHR0cHM6Ly9nb29nbGUuY29tI0BldmlsLmNvbQ==&base=YWJvdXQ6Ymxhbms=","msgtype":"m.text"},"ts":1628025231903,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$WPxTj4yE2tA50fwdH1hzTnUs-4ScsXbXcDXuNIhELz4"},
{"content":{"body":"and https://jsdom.github.io/whatwg-url/#url=aHR0cHM6Ly9nb29nbGUuY29t77yDQGV2aWwuY29t&base=YWJvdXQ6Ymxhbms=","msgtype":"m.text"},"ts":1628025257860,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$UzB98s1Sjbb_4g1T-HW4eMBupQscPy9ygP1tajAe-90"}
]