[
{"content":{"body":"Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)","format":"org.matrix.custom.html","formatted_body":"Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)","m.mentions":{"user_ids":["@smaug:mozilla.org"]},"msgtype":"m.text"},"ts":1727222615369,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg"},
{"content":{"body":"> <@annevk:matrix.org> Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)\n\nIn short: thinking to have `movedCallback` that has a default implementation of calling `disconnectedCallback(); connectedCallback()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)</blockquote></mx-reply>In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>disconnectedCallback(); connectedCallback()</code>","m.mentions":{"user_ids":["@annevk:matrix.org","@smaug:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg"}},"msgtype":"m.text"},"ts":1727223564870,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$BDFu1kpwRfYvZ4wnYmwvuWsTw91C2cIZzPJzJzsD9EY"},
{"content":{"body":"> <@annevk:matrix.org> Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)\n\n * In short: thinking to have `movedCallback` that has a default implementation of calling `{ disconnectedCallback(); connectedCallback() }`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)</blockquote></mx-reply> * In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>{ disconnectedCallback(); connectedCallback() }</code>","m.mentions":{},"m.new_content":{"body":"In short: thinking to have `movedCallback` that has a default implementation of calling `{ disconnectedCallback(); connectedCallback() }`","format":"org.matrix.custom.html","formatted_body":"In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>{ disconnectedCallback(); connectedCallback() }</code>","m.mentions":{"user_ids":["@annevk:matrix.org","@smaug:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BDFu1kpwRfYvZ4wnYmwvuWsTw91C2cIZzPJzJzsD9EY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727223577737,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$3q-jufqr2BnbDqR14Draolm4E8fIGHmLTbxluS6anug"},
{"content":{"body":"> (I feel the same way about the specification callback.)\n\nResponded to this on the spec thread","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec thread</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727225318520,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$8FfWGRY89xuVZ6kcVCLEg3M6h8NMfGodMoN7ShgoCf8"},
{"content":{"body":" * > (I feel the same way about the specification callback.)\n\nResponded to this on the spec PR thread","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec PR thread</p>\n","m.mentions":{},"m.new_content":{"body":"> (I feel the same way about the specification callback.)\n\nResponded to this on the spec PR thread","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec PR thread</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8FfWGRY89xuVZ6kcVCLEg3M6h8NMfGodMoN7ShgoCf8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727225323553,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$3Ah9LqDKq85U1SPomL6EnNPO2NuMQKqKD89FiN03h4c"},
{"content":{"body":"Ah, that doesn't sound unreasonable.\n\nI was thinking some more about overloading `append()` just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to `append()` the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".","format":"org.matrix.custom.html","formatted_body":"<p>Ah, that doesn't sound unreasonable.</p>\n<p>I was thinking some more about overloading <code>append()</code> just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to <code>append()</code> the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727264153473,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8"},
{"content":{"body":"My impression with \"good first issue\" continues to be that we put more time into marking new comments as spam than it would take us to fix the issue. Now of course the whole idea is that we don't fix the issue so someone gets the opportunity to ease into contributing, but still.","m.mentions":{},"msgtype":"m.text"},"ts":1727269447764,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$1p8kx7zVDgNDtQJAgJeI-norsJNppdG8AR6FDabNs4E"},
{"content":{"body":"> <@annevk:matrix.org> Ah, that doesn't sound unreasonable.\n> \n> I was thinking some more about overloading `append()` just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to `append()` the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".\n\nYea that's what we saw in the prototype, the only way to make this not explode in complexity is if *all* the items you append are moveable (already connected to this document)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><p>Ah, that doesn't sound unreasonable.</p>\n<p>I was thinking some more about overloading <code>append()</code> just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to <code>append()</code> the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".</p>\n</blockquote></mx-reply>Yea that's what we saw in the prototype, the only way to make this not explode in complexity is if <em>all</em> the items you append are moveable (already connected to this document)","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8"}},"msgtype":"m.text"},"ts":1727269610124,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$tbdoWeqldFf8oXcBvDqu_6ZqjtgjVNhMInm6ObntxSc"},
{"content":{"body":"Noam Rosenthal: discussing a bit with smaug this morning we think that it should prolly be `connectedMoveCallback` to match the existing pattern of only firing for connected/disconnected cases and not say, for a move within a disconnected subtree","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: discussing a bit with <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> this morning we think that it should prolly be <code>connectedMoveCallback</code> to match the existing pattern of only firing for connected/disconnected cases and not say, for a move within a disconnected subtree","m.mentions":{"user_ids":["@noamr:matrix.org","@smaug:mozilla.org"]},"msgtype":"m.text"},"ts":1727278008205,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$fZwzfyw_cJfdSQ7UIwus7HkeYH3FevLOau7lrHUg3WE"},
{"content":{"body":"And you'd want oldAncestor (which can be your parent if you are being moved) and newAncestor (which can be your parent if you are being moved) as arguments.","m.mentions":{},"msgtype":"m.text"},"ts":1727278046177,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ZLSltXnz17hJtWLVimFZYJ9fcP-gf-t5CIm0c4x_JKk"},
{"content":{"body":"But the specification-level hook should be more generic and match the existing remove/insert pattern.","m.mentions":{},"msgtype":"m.text"},"ts":1727278086505,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$-XZOKNW0UdZXrVNZDEwRGds2L7-enm99fqzBUKSdRew"},
{"content":{"body":"Richard Gibson: thanks for sharing those IPv6 tidbits, that's terrible 😅","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: thanks for sharing those IPv6 tidbits, that's terrible 😅","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1727278241126,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$z3d9ALMsjXIQqq4fhdvcZKxW_B7UI4I0qpwdzAWV8Yc"},
{"content":{"body":"I've no idea how we could generically handle a network deciding on some prefix. Though maybe we have that information when we do DNS resolving? Hmm.","m.mentions":{},"msgtype":"m.text"},"ts":1727278312319,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$aTYVxoprY8qzyFsNSrfejAOjx6n8N36LugcQ8R1ell0"},
{"content":{"body":"annevk: I didn't understand \"move within a disconnected subtree\". You can't call `moveBefore` inside a disconnected subtree","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I didn't understand \"move within a disconnected subtree\". You can't call <code>moveBefore</code> inside a disconnected subtree","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1727278357245,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$sJG7zorFWLiHbRQkd3i6hA70_ERWw7Jpb0qUPk8fGs0"},
{"content":{"body":"You move the whole subtree","m.mentions":{},"msgtype":"m.text"},"ts":1727278441695,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$knyNeTheK5i-fsjGhNoygMGYZ985HL_nTytMS7ukNzg"},
{"content":{"body":"Noam Rosenthal: oh, we have an is connected precondition? Fair.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: oh, we have an is connected precondition? Fair.","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1727278467767,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ZxpXY36I0D5owd3IPFA6CREW8XVwqwWGlqY7vkVETYk"},
{"content":{"body":"> <@annevk:matrix.org> Noam Rosenthal: discussing a bit with smaug this morning we think that it should prolly be `connectedMoveCallback` to match the existing pattern of only firing for connected/disconnected cases and not say, for a move within a disconnected subtree\n\nDo you mean not firing `disconnectedCallback` at all when you're moved? I want to make sure this doesn't break CEs that don't expect being reparented without those callbacks","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$fZwzfyw_cJfdSQ7UIwus7HkeYH3FevLOau7lrHUg3WE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: discussing a bit with <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> this morning we think that it should prolly be <code>connectedMoveCallback</code> to match the existing pattern of only firing for connected/disconnected cases and not say, for a move within a disconnected subtree</blockquote></mx-reply>Do you mean not firing <code>disconnectedCallback</code> at all when you're moved? I want to make sure this doesn't break CEs that don't expect being reparented without those callbacks","m.mentions":{"user_ids":["@annevk:matrix.org","@smaug:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fZwzfyw_cJfdSQ7UIwus7HkeYH3FevLOau7lrHUg3WE"}},"msgtype":"m.text"},"ts":1727278473036,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ZTYjn66CvvTyom-mGYWrUZY6ZFZOpLjey5PcIetBbzI"},
{"content":{"body":"and in disconnected case there would be no callbacks at all","m.mentions":{},"msgtype":"m.text"},"ts":1727278481299,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$UKVowCMZAJFlWSzcDDsggvoUVLRq_SQ4_OXAcKdwAG8"},
{"content":{"body":"> <@annevk:matrix.org> Noam Rosenthal: oh, we have an is connected precondition? Fair.\n\nYes, everything has to be connected, and (currently) also in the same tree-scope","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$ZxpXY36I0D5owd3IPFA6CREW8XVwqwWGlqY7vkVETYk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: oh, we have an is connected precondition? Fair.</blockquote></mx-reply>Yes, everything has to be connected, and (currently) also in the same tree-scope","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZxpXY36I0D5owd3IPFA6CREW8XVwqwWGlqY7vkVETYk"}},"msgtype":"m.text"},"ts":1727278506027,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$XySy7YucuVx-OkBSASeJcD6ykNrZGox7HKusk42pLTs"},
{"content":{"body":"If disconnected move is not supported you can ignore that caveat.","m.mentions":{},"msgtype":"m.text"},"ts":1727278506292,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$KvqQBqUD9f_kcYmjIlBo9LQBeJu7rRiBklIfx5gRiqQ"},
{"content":{"body":"> <@smaug:mozilla.org> and in disconnected case there would be no callbacks at all\n\nIt would throw an error if you try to move something disconnected","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$UKVowCMZAJFlWSzcDDsggvoUVLRq_SQ4_OXAcKdwAG8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@smaug:mozilla.org\">@smaug:mozilla.org</a><br>and in disconnected case there would be no callbacks at all</blockquote></mx-reply>It would throw an error if you try to move something disconnected","m.mentions":{"user_ids":["@smaug:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UKVowCMZAJFlWSzcDDsggvoUVLRq_SQ4_OXAcKdwAG8"}},"msgtype":"m.text"},"ts":1727278549006,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$r2yvYFbY0VZOsDHc4Zr-TU44-WaBpz9qQ4yhRLXkG4k"},
{"content":{"body":"I think I'd still argue for the same general design for consistency, even if some cases are not supported (atm).","m.mentions":{},"msgtype":"m.text"},"ts":1727278573080,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$pdsU3F7sG5D_2D4tOPwTXTmqEWGF3i-4Wtt8zNKYTaU"},
{"content":{"body":"it would be nonsensical anyway, the iframe etc. is not loaded","m.mentions":{},"msgtype":"m.text"},"ts":1727278577841,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$No56tHZ0xeN-79qjFuTdBMFU-DX9hUQX-mU-l0u7cNA"},
{"content":{"body":"It's more a matter of consistency, but it seems totally reasonable to not support disconnected cases for now (and potentially ever).","m.mentions":{},"msgtype":"m.text"},"ts":1727278639111,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$7B2OyddqNdDSM19DRnIdzfZmFhyqLpWq_AY4GXc3QKU"},
{"content":{"body":"Noam Rosenthal: Going back to your earlier question. I think the default implementation calling the other callbacks is probably fine. I suspect the main feedback is that it should be called `connectedMoveCallback` to match the existing callback naming and that it should have two arguments.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: Going back to your earlier question. I think the default implementation calling the other callbacks is probably fine. I suspect the main feedback is that it should be called <code>connectedMoveCallback</code> to match the existing callback naming and that it should have two arguments.","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1727279073236,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$9BpsxoZdowq46FrGQSDBbGOBhhB62WwqusvglXTph80"},
{"content":{"body":"> <@annevk:matrix.org> Noam Rosenthal: Going back to your earlier question. I think the default implementation calling the other callbacks is probably fine. I suspect the main feedback is that it should be called `connectedMoveCallback` to match the existing callback naming and that it should have two arguments.\n\nThat's SGTM. So `connectedMoveCallback(oldAncestor, newAncestor)` that defaults to `disconnectedCallback(); connectedCallback()` ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$9BpsxoZdowq46FrGQSDBbGOBhhB62WwqusvglXTph80?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: Going back to your earlier question. I think the default implementation calling the other callbacks is probably fine. I suspect the main feedback is that it should be called <code>connectedMoveCallback</code> to match the existing callback naming and that it should have two arguments.</blockquote></mx-reply>That's SGTM. So <code>connectedMoveCallback(oldAncestor, newAncestor)</code> that defaults to <code>disconnectedCallback(); connectedCallback()</code>","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9BpsxoZdowq46FrGQSDBbGOBhhB62WwqusvglXTph80"}},"msgtype":"m.text"},"ts":1727279171814,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$iTNgHIe0J_kKobKg_YZenDmWgetZpaI33O5igM66d2Y"},
{"content":{"body":"Dominic Farolino: ^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: ^^","m.mentions":{"user_ids":["@domfarolino:matrix.org"]},"msgtype":"m.text"},"ts":1727279189702,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$k2gditGJSJllbms8m5ZQUzitB8BW_JbdhC4s0ASfBgE"},
{"content":{"body":"I think the main thing left on the overflow agenda with this is whether we send `focusin`/`focusout` events as a result and similarly `selectionchange`","format":"org.matrix.custom.html","formatted_body":"I think the main thing left on the overflow agenda with this is whether we send <code>focusin</code>/<code>focusout</code> events as a result and similarly <code>selectionchange</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727279248085,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$TT-CXEtxSCvOoO3ESl35PQ093K4SYueRRIYD3xxHI7Q"},
{"content":{"body":"Hmm, smaug do we perhaps only need oldAncestor? It seems like connectedCallback isn't given any argument today. disconnectedCallback isn't either.","format":"org.matrix.custom.html","formatted_body":"Hmm, <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> do we perhaps only need oldAncestor? It seems like connectedCallback isn't given any argument today. disconnectedCallback isn't either.","m.mentions":{"user_ids":["@smaug:mozilla.org"]},"msgtype":"m.text"},"ts":1727279599463,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$SZyBT_A9QFJLYiOYxTvO3t4jSqoxFAtIyNLREXpFjKY"},
{"content":{"body":"ah, true, disconnectedCallback doesn't know it. connectedCallback can check the new ancestor tree","m.mentions":{},"msgtype":"m.text"},"ts":1727279667628,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$to4dcEQThTNKakQ2_FwuN0xD_x1ibv93_qFciXTbxBk"},
{"content":{"body":"`attributeChangedCallback` does, this is perhaps a bit like `ancestorChangedCallback`","format":"org.matrix.custom.html","formatted_body":"<code>attributeChangedCallback</code> does, this is perhaps a bit like <code>ancestorChangedCallback</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727279689105,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$a9MVoB6kflpLibSqJKv8sVL4BgdwWUo6Bs3ReCe2YKI"},
{"content":{"body":"we could always add it later if needed","m.mentions":{},"msgtype":"m.text"},"ts":1727279690961,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$L-VcO1MSK5IjwnZuovyec4pQFoBKOX09rNm9E3Cql3U"},
{"content":{"body":"So no arguments then. Makes sense.","m.mentions":{},"msgtype":"m.text"},"ts":1727279718097,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$H7l6olE_wykIrEAbq7u7F6grxiQT4NXhvVTWo1eAt1w"},
{"content":{"body":"Yea starting simpler and extending later is reasonable","m.mentions":{},"msgtype":"m.text"},"ts":1727279746536,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ptInWxa0L00L6o_HQfHkbULD0UB7qui7tO1dkoGxV6s"},
{"content":{"body":"Just catching up on the moveBefore() stuff (currently in different breakout session). Yeah, I'd prefer sticking with a connected precondition. One question is, do we need a same-tree scope precondition? We've started with this since crossing shadow dom barriers just \"seemed\" tricky, but i'm not sure there's a real argument for preventing this.","m.mentions":{},"msgtype":"m.text"},"ts":1727281457846,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$WGlPhtAFbyFmgzv-uKoA0J7iEo9aZbgbG76QjVFlfKg"},
{"content":{"body":"Dominic Farolino: I've been assuming same-shadow-including document. So from my perspective that would be fine/preferred.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: I've been assuming same-shadow-including document. So from my perspective that would be fine/preferred.","m.mentions":{"user_ids":["@domfarolino:matrix.org"]},"msgtype":"m.text"},"ts":1727282017653,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$dTClXE3T4b7ymtS-GUz4Pm4FoLC3AhyNH9Z7UAgqA_w"},
{"content":{"body":"Or same-shadow-including root that is a document.","m.mentions":{},"msgtype":"m.text"},"ts":1727282034753,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ijgqvdn5Vuf35IarJij7JXl4G530ueuFQ0lL01gN6Zg"},
{"content":{"body":"annevk: So it sounds like you're OK removing this condition","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: So it sounds like you're OK removing this condition","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1727283003291,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$yXlVcsHIbykGT9pkh9xZXD5GsQHgXatisckAJP9ZWn0"},
{"content":{"body":"https://whatpr.org/dom/1307.html#dom-node-movebefore:~:text=this%E2%80%99s%20root%20is%20the%20same%20as%20node%E2%80%99s%20root","m.mentions":{},"msgtype":"m.text"},"ts":1727283004753,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$wfsiL_DguJfIiv2TaRfL2x5Qmd9iTv3BdM8VUy6fGM8"},
{"content":{"body":"Or no, not removing it but expanding it to cross the shadow boundary. I think i'm fine with that","m.mentions":{},"msgtype":"m.text"},"ts":1727283037907,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$8vMoNWoBTJn1GbPq75URzsk01YvGLUdPJ4BVjY1edVU"}
]