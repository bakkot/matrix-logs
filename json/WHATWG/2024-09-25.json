[
{"content":{"body":"Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)","format":"org.matrix.custom.html","formatted_body":"Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)","m.mentions":{"user_ids":["@smaug:mozilla.org"]},"msgtype":"m.text"},"ts":1727222615369,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg"},
{"content":{"body":"> <@annevk:matrix.org> Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)\n\nIn short: thinking to have `movedCallback` that has a default implementation of calling `disconnectedCallback(); connectedCallback()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)</blockquote></mx-reply>In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>disconnectedCallback(); connectedCallback()</code>","m.mentions":{"user_ids":["@annevk:matrix.org","@smaug:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg"}},"msgtype":"m.text"},"ts":1727223564870,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$BDFu1kpwRfYvZ4wnYmwvuWsTw91C2cIZzPJzJzsD9EY"},
{"content":{"body":"> <@annevk:matrix.org> Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe smaug would argue for a flag there too? (I feel the same way about the specification callback.)\n\n * In short: thinking to have `movedCallback` that has a default implementation of calling `{ disconnectedCallback(); connectedCallback() }`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_4Q7MLIf9nm5Z2tQLn3FGET7DviO9A5I-4BhwTwWMzg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Too bad we couldn't get into the custom elements callback for moveBefore(). I kinda feel like it deserves a new callback, but maybe <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> would argue for a flag there too? (I feel the same way about the specification callback.)</blockquote></mx-reply> * In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>{ disconnectedCallback(); connectedCallback() }</code>","m.mentions":{},"m.new_content":{"body":"In short: thinking to have `movedCallback` that has a default implementation of calling `{ disconnectedCallback(); connectedCallback() }`","format":"org.matrix.custom.html","formatted_body":"In short: thinking to have <code>movedCallback</code> that has a default implementation of calling <code>{ disconnectedCallback(); connectedCallback() }</code>","m.mentions":{"user_ids":["@annevk:matrix.org","@smaug:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BDFu1kpwRfYvZ4wnYmwvuWsTw91C2cIZzPJzJzsD9EY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727223577737,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$3q-jufqr2BnbDqR14Draolm4E8fIGHmLTbxluS6anug"},
{"content":{"body":"> (I feel the same way about the specification callback.)\n\nResponded to this on the spec thread","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec thread</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727225318520,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$8FfWGRY89xuVZ6kcVCLEg3M6h8NMfGodMoN7ShgoCf8"},
{"content":{"body":" * > (I feel the same way about the specification callback.)\n\nResponded to this on the spec PR thread","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec PR thread</p>\n","m.mentions":{},"m.new_content":{"body":"> (I feel the same way about the specification callback.)\n\nResponded to this on the spec PR thread","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>(I feel the same way about the specification callback.)</p>\n</blockquote>\n<p>Responded to this on the spec PR thread</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8FfWGRY89xuVZ6kcVCLEg3M6h8NMfGodMoN7ShgoCf8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727225323553,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$3Ah9LqDKq85U1SPomL6EnNPO2NuMQKqKD89FiN03h4c"},
{"content":{"body":"Ah, that doesn't sound unreasonable.\n\nI was thinking some more about overloading `append()` just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to `append()` the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".","format":"org.matrix.custom.html","formatted_body":"<p>Ah, that doesn't sound unreasonable.</p>\n<p>I was thinking some more about overloading <code>append()</code> just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to <code>append()</code> the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727264153473,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8"},
{"content":{"body":"My impression with \"good first issue\" continues to be that we put more time into marking new comments as spam than it would take us to fix the issue. Now of course the whole idea is that we don't fix the issue so someone gets the opportunity to ease into contributing, but still.","m.mentions":{},"msgtype":"m.text"},"ts":1727269447764,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$1p8kx7zVDgNDtQJAgJeI-norsJNppdG8AR6FDabNs4E"},
{"content":{"body":"> <@annevk:matrix.org> Ah, that doesn't sound unreasonable.\n> \n> I was thinking some more about overloading `append()` just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to `append()` the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".\n\nYea that's what we saw in the prototype, the only way to make this not explode in complexity is if *all* the items you append are moveable (already connected to this document)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><p>Ah, that doesn't sound unreasonable.</p>\n<p>I was thinking some more about overloading <code>append()</code> just to see if I missed something in rejecting it and I'm not sure that it really works apart from the issues already identified. In particular when you pass multiple arguments to <code>append()</code> the complexity is increased pretty rapidly and you would definitely get different mutation records if you attempted to handle that as multiple moves or some such. Which you would not always be able to do and thus you'd need careful bookkeeping as well. Seems way too messy compared with \"new primitive, new method\".</p>\n</blockquote></mx-reply>Yea that's what we saw in the prototype, the only way to make this not explode in complexity is if <em>all</em> the items you append are moveable (already connected to this document)","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vt2UBRLRDzSs0u47nEP27Rjs7tGzMY40uvCnwusjcp8"}},"msgtype":"m.text"},"ts":1727269610124,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$tbdoWeqldFf8oXcBvDqu_6ZqjtgjVNhMInm6ObntxSc"}
]