[
{"content":{"body":"> <@hsivonen:mozilla.org> sideshowbarker: https://github.com/hsivonen/chardetng_j\n\nmakes me want to write more HTML checker source in Rust ðŸ˜„","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Hdk3zWsKLm6xM2BX3nQ5K_MlAEO-zZpApvAAglxrdw8?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: https://github.com/hsivonen/chardetng_j</blockquote></mx-reply>makes me want to write more HTML checker source in Rust ðŸ˜„","m.relates_to":{"m.in_reply_to":{"event_id":"$Hdk3zWsKLm6xM2BX3nQ5K_MlAEO-zZpApvAAglxrdw8"}},"msgtype":"m.text"},"ts":1634522826377,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> makes me want to write more HTML checker source in Rust ðŸ˜„\n\nSadly, the ergonomics of the language boundary are poor if arguments and return values of types other than int, long, float, and double. Sequences of bytes work the next best, and even those are rather bad, because the Java `ByteBuffer` API is stateful. I suppose it gets better with Java > 8 that can efficiently copy one `ByteBuffer` into another without changing the internal state of either.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br>makes me want to write more HTML checker source in Rust ðŸ˜„</blockquote></mx-reply>Sadly, the ergonomics of the language boundary are poor if arguments and return values of types other than int, long, float, and double. Sequences of bytes work the next best, and even those are rather bad, because the Java <code>ByteBuffer</code> API is stateful. I suppose it gets better with Java &gt; 8 that can efficiently copy one <code>ByteBuffer</code> into another without changing the internal state of either.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64"}},"msgtype":"m.text"},"ts":1634531882207,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$2IjBCAe0dc_ZZM3pCj7fomiBECuoqf2xLdgBeQdB27Y"}
]