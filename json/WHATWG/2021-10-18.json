[
{"content":{"body":"> <@hsivonen:mozilla.org> sideshowbarker: https://github.com/hsivonen/chardetng_j\n\nmakes me want to write more HTML checker source in Rust ðŸ˜„","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Hdk3zWsKLm6xM2BX3nQ5K_MlAEO-zZpApvAAglxrdw8?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: https://github.com/hsivonen/chardetng_j</blockquote></mx-reply>makes me want to write more HTML checker source in Rust ðŸ˜„","m.relates_to":{"m.in_reply_to":{"event_id":"$Hdk3zWsKLm6xM2BX3nQ5K_MlAEO-zZpApvAAglxrdw8"}},"msgtype":"m.text"},"ts":1634522826377,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> makes me want to write more HTML checker source in Rust ðŸ˜„\n\nSadly, the ergonomics of the language boundary are poor if arguments and return values of types other than int, long, float, and double. Sequences of bytes work the next best, and even those are rather bad, because the Java `ByteBuffer` API is stateful. I suppose it gets better with Java > 8 that can efficiently copy one `ByteBuffer` into another without changing the internal state of either.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br>makes me want to write more HTML checker source in Rust ðŸ˜„</blockquote></mx-reply>Sadly, the ergonomics of the language boundary are poor if arguments and return values of types other than int, long, float, and double. Sequences of bytes work the next best, and even those are rather bad, because the Java <code>ByteBuffer</code> API is stateful. I suppose it gets better with Java &gt; 8 that can efficiently copy one <code>ByteBuffer</code> into another without changing the internal state of either.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZiqB8OQfmOCvbba6F0chphhbCbhJ5AH3mf-SmiTxy64"}},"msgtype":"m.text"},"ts":1634531882207,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$2IjBCAe0dc_ZZM3pCj7fomiBECuoqf2xLdgBeQdB27Y"},
{"content":{"body":"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-java.nio.ByteBuffer- vs. https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#put(int,java.nio.ByteBuffer,int,int)","msgtype":"m.text"},"ts":1634532019163,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$eqWCzRXsGxXy_g1VHI7fMHjXBcqjCt5HOWPOkrq66yI"},
{"content":{"body":"Where > 8 means 16","msgtype":"m.text"},"ts":1634532034936,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$oBErfj8uQ0yMB6I14ZQAqbuunySPsXwN6EPwWHr-oZM"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1634532045373,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Y1BI3tBibbJ33KKASl0QX51LY3bvtLQEPZpZJ2nnCQ0"},
{"content":{"body":"well, maybe time anyway to not try to preserve Java 8 compatibility","msgtype":"m.text"},"ts":1634532066522,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$tIr5v9WWIEMAOfc7YQ1fpT0F_UaTHF3nn4X0i7RPL3A"},
{"content":{"body":"I think maybe the htmlparser code already has some Java > 8 code in it?","msgtype":"m.text"},"ts":1634532112524,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$xf43W8KQ_Us3R9sSChQVc0kK7rHUb5wNHZ30MyHlCuU"},
{"content":{"body":"at least I think our CI is no longer testing Java 8","msgtype":"m.text"},"ts":1634532130586,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$5s1klwot0vwS262qNQnxcAwgEmRj3yCV9j2g70oaMv0"},
{"content":{"body":"â€¦and I donâ€™t think I would have changed that unless it was no-longer Java8-compatible","msgtype":"m.text"},"ts":1634532156694,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$t8H74eqZxjxMsnPWPodVdDzLamVjYqr25QFrFhzJ6k0"},
{"content":{"body":"I'd expect it not to have Java > 8. In fact, the source still looks quite Java 5ish.","msgtype":"m.text"},"ts":1634532171345,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$Rou-AxMUO8P0BjgOLeXOZpuYknfq2ZCh7lPYBeJpYy0"},
{"content":{"body":"well yeah, overall itâ€™s relatively classic ","msgtype":"m.text"},"ts":1634532196972,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$03AVDlJNrwUNAWp3PPKkLUjOA0L-k7zeFRqCQXxTQlg"},
{"content":{"body":"I wonder now why I turned off Java 8 testing in CIâ€¦","msgtype":"m.text"},"ts":1634532227510,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$U_9hAPGYfdYk4mBajKQ7f3xjMHJETZH3-7yCy70kGTw"},
{"content":{"body":"I'm still very disappointed at Java breaking it's compatibility story after 8. For example, in order to run asmble, I had to roll the JDK back to 8, because I got an exception with a newer one.","msgtype":"m.text"},"ts":1634532275144,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$22u7d5abK98wPwBvpqFZFVqvp7VLPsrxn2XT29mPsQg"},
{"content":{"body":"Fortunately, asmble generates code that doesn't depend on asmble itself at runtime.","msgtype":"m.text"},"ts":1634532298469,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$V1CWDQBK7EEQHPfQpXyzAGPFpaUOpYqMUj9XJ-bMKhQ"}
]