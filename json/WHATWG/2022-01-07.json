[
{"content":{"body":"emilio: so :active/:hover use the flat tree, but :has() uses the node tree? Is using the flat tree for selector matching not really expensive?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: so :active/:hover use the flat tree, but :has() uses the node tree? Is using the flat tree for selector matching not really expensive?","msgtype":"m.text"},"ts":1641556599689,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$WU12gaMZGi7sxyI-dyHUQuw2JTsxJ55ro9stDlTeFUw"},
{"content":{"body":"> <@annevk:mozilla.org> emilio: so :active/:hover use the flat tree, but :has() uses the node tree? Is using the flat tree for selector matching not really expensive?\n\nThat is right. :has() uses the node tree like all other selector combinators, why would it use the flat tree?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$WU12gaMZGi7sxyI-dyHUQuw2JTsxJ55ro9stDlTeFUw?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br /><a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: so :active/:hover use the flat tree, but :has() uses the node tree? Is using the flat tree for selector matching not really expensive?</blockquote></mx-reply>That is right. :has() uses the node tree like all other selector combinators, why would it use the flat tree?","m.relates_to":{"m.in_reply_to":{"event_id":"$WU12gaMZGi7sxyI-dyHUQuw2JTsxJ55ro9stDlTeFUw"}},"msgtype":"m.text"},"ts":1641558399976,"senderName":"emilio","senderId":"@emilio:mozilla.org","id":"$h8bl2cUBwKgVHe9MR2iSxPgOD1htFU9tfo3_53zJRm0"},
{"content":{"body":"Not that it would be impossible to do but it'd be weird ","msgtype":"m.text"},"ts":1641558416527,"senderName":"emilio","senderId":"@emilio:mozilla.org","id":"$vHX1d7UZ4EKX-NEP8Nbba2p-VRxsiJwt4PsmNXU1OeM"},
{"content":{"body":"emilio: yeah never mind, I guess it all makes sense. And :has can't really use the flat tree as that'd break encapsulation, I think.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: yeah never mind, I guess it all makes sense. And :has can't really use the flat tree as that'd break encapsulation, I think.","msgtype":"m.text"},"ts":1641558511240,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Zg0Li090ILaFpR9vOzvDKdwwaSYtRBbkZy4m5xJ3214"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1641558659627,"senderName":"emilio","senderId":"@emilio:mozilla.org","id":"$XzWyBQGnJ5_BzrKguWpQ3oPx9BMw3dG1yCnjHg4u8-c"},
{"content":{"body":"Thinking of trying to tackle https://github.com/whatwg/dom/issues/849 again, or at least make progress ... is there any easy way to know what element names the HTML parser accepts? Or do I have to walk through various parser states?","msgtype":"m.text"},"ts":1641570527837,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$HkKbFbslGYhwJ5fOOeM1_SLh1qemqtIyRWp2bJ2IKQg"},
{"content":{"body":"I guess looking at https://html.spec.whatwg.org/#tag-open-state + tag name state is not too bad...","msgtype":"m.text"},"ts":1641570573344,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$V0OPcWKPTbyzi5v_6V9BOO7eDZb6zd4KAbstyk45iBk"},
{"content":{"body":"can someone who understands how event dispatch is specified comment on https://bugs.webkit.org/show_bug.cgi?id=234730? because I've utterly confused myself now.","msgtype":"m.text"},"ts":1641572077657,"senderName":"Sam Sneddon [:gsnedders]","senderId":"@gsnedders:mozilla.org","id":"$hbeWTTxm1AEQ0rZG_qe7QtfpoJaQSVLk6dEuwyEyko0"},
{"content":{"body":"Domenic: can element names contain `>` today? That seems problematic","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: can element names contain <code>&gt;</code> today? That seems problematic","msgtype":"m.text"},"ts":1641572829889,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$guCX3zv_1zf9jy319vubMjf_5Lh86TS4jcC50BzePpo"},
{"content":{"body":"Domenic: I doubt we want to allow CR","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I doubt we want to allow CR","msgtype":"m.text"},"ts":1641572866860,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$FcstTr7WSQkSHga75V1gPzz0XSD0yjv2ZeMjyWqC1XI"},
{"content":{"body":"\\> is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","format":"org.matrix.custom.html","formatted_body":"&gt; is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","msgtype":"m.text"},"ts":1641572877487,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$JZR-IkfpwfOmxGQEqVP8aSIR59Iati_wwSwgczX0DEY"},
{"content":{"body":" * \\> is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","format":"org.matrix.custom.html","formatted_body":" * &gt; is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","m.new_content":{"body":"\\> is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","format":"org.matrix.custom.html","formatted_body":"&gt; is excluded from LenientElementNameStartChar and LenientElementNameChar in my sketch","msgtype":"m.text"},"m.relates_to":{"event_id":"$JZR-IkfpwfOmxGQEqVP8aSIR59Iati_wwSwgczX0DEY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641572883756,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$C9X6fy7CJPrCzRNXLahcwc1RKfjQI3pvOBaj34W8EbA"},
{"content":{"body":"I think CR is probably disallowed by the parser but as preprocessing, so I didn't see it when reading. Good catch.","msgtype":"m.text"},"ts":1641572907629,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Xo5AeI7DGqsVCRqmtXr4qaZz-pYjcJlFJLf_1c2FQDE"},
{"content":{"body":"Although what about entities hmm","msgtype":"m.text"},"ts":1641572914509,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$PtcNlJqqkLd4U_PRIHIaMBxMYmQv857JqRgZe3e0tE0"},
{"content":{"body":"Entities don't work in tag names, huh","msgtype":"m.text"},"ts":1641572996557,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$NYn9D7jNb168UWPRmITzAZYx-EZLtK7KXvGKBJAXhkc"},
{"content":{"body":"Oh I missed `>` there","format":"org.matrix.custom.html","formatted_body":"Oh I missed <code>&gt;</code> there","msgtype":"m.text"},"ts":1641573015366,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$KfyLIC369REwuj9FijrRydUVYeqWRD4O6papfvSANWA"},
{"content":{"body":"Yeah entities only work inside attributes or between tags","msgtype":"m.text"},"ts":1641573026933,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$WiYf3l_0kanz6-9Gu9wE_3alXMgGrikbe4tHwFIwIN4"},
{"content":{"body":"(Context is https://github.com/whatwg/dom/issues/849 fwiw.)","msgtype":"m.text"},"ts":1641573048959,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$oYzdLNRTh1-1sOnrFVRcq6QzDvMXswjqzfy9yLoyz2A"},
{"content":{"body":"The other thing I wonder about is whether we should only add leniency for the HTML namespace","msgtype":"m.text"},"ts":1641573078637,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$vnYPlx6F8GBsDfn_Jl1okI1AEVNjqNzni60YBk7eC08"},
{"content":{"body":"But maybe it doesn't matter so much as you can already create trees that cannot serialize as XML so simplicity ought to win","msgtype":"m.text"},"ts":1641573146125,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$aBSzTFVC-owmlMZEdHhRc6ZdRYK3t1xkVzE0mllM1YI"},
{"content":{"body":"I cannot find what in the spec disallows the parser from creating elements with CR","msgtype":"m.text"},"ts":1641573190967,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0NooSak3CwXmjYfOgjepixi55zxn5-CHz2pI7Ru0Rk4"},
{"content":{"body":"But browsers do not allow it http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=9940","msgtype":"m.text"},"ts":1641573194791,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$cKR9lw2Z2HZcARv-6itnWNZ1LWA4H5dUoZiyUJ8vn-U"},
{"content":{"body":"I think https://html.spec.whatwg.org/#tag-name-state is missing CR","msgtype":"m.text"},"ts":1641573240724,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$2Upw77LlE50JjKxusi0FGiB1ew2l8TIP8zAXumKsNFg"},
{"content":{"body":"CR is handled in the preprocessing stage","msgtype":"m.text"},"ts":1641573252004,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$0xFgyeCdkbM38YMBP_G4jcF5UMlGSCeSBo8WlRztCW4"},
{"content":{"body":"> Before the tokenization stage, the input stream must be preprocessed by normalizing newlines.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Before the tokenization stage, the input stream must be preprocessed by normalizing newlines.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641573279059,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$g31QrSdXPuWRab_aedjQy8gSsY9kxxnwU0iELK1vlKI"},
{"content":{"body":"I couldn't find that Ctrl+Fing for \"CARRIAGE RETURN\", and lots of parser steps actually look for CR...","msgtype":"m.text"},"ts":1641573280846,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$grTxP-_pG-UyV_a7bZaEo3BAHdJKEk2ZdioNdL49Zlo"},
{"content":{"body":"OK, so why does CR appear explicitly in places like https://html.spec.whatwg.org/#the-initial-insertion-mode","msgtype":"m.text"},"ts":1641573306884,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$I-8OjtPf0mcGa9GdrHR7R_vQd4P1TZLEydldbJVtiGI"},
{"content":{"body":"Domenic: I think that might be due to an entity reference?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I think that might be due to an entity reference?","msgtype":"m.text"},"ts":1641573356596,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$gYTX3phjd4c9qUI5xLV_CFPGLu6y1lxGiHwQZLfdn68"},
{"content":{"body":"Seems plausible","msgtype":"m.text"},"ts":1641573373056,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$KuZ89i2_rTHfbqMffApmUpNnt9gGG7s8Tp3oempRds8"},
{"content":{"body":"Yeah, it's a conformance error, but it will get through","msgtype":"m.text"},"ts":1641573451228,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$6260Rg0ICm5l3ZYDA6dlOlDR5eV4RWhshhwdnkEUWP8"},
{"content":{"body":"Yeah because the tokenizer converts them then returns to the state it was in previously","msgtype":"m.text"},"ts":1641573452459,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$4nwGYeac_acaH7Ik1jRC95G4CyY1Mv1vlIrR7gWeNFg"},
{"content":{"body":"No idea why that was not normalized as well...","msgtype":"m.text"},"ts":1641573470375,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$XCHpo1gxiTWfSJkWhzQTFfKPXT1Ly7ddKEEteb1K_bc"},
{"content":{"body":"OK, updating whatwg/dom thread to exclude CR, and it looks like there are no spec bugs around CR","msgtype":"m.text"},"ts":1641573475048,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8aLrFTOtcp98gXcAIBaGAZZVIrvCd1DUwmHzOtPWdwY"},
{"content":{"body":"I guess it wasn't normalized because you can also get there through JS and guarding all entry points would be somewhat pointless overhead","msgtype":"m.text"},"ts":1641573515068,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$fyRe1zPSyAJ9H1QBpymmzVEUBf8M7ASVzE1MC3Kpc1I"},
{"content":{"body":"(Not that specific point, but as an attribute value, say.)","msgtype":"m.text"},"ts":1641573556101,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$KFSngsi5tDH9M23pjXg-O73roNqG4SXLWs5JM31fSp4"},
{"content":{"body":"Well I think the idea is if you do `&#xD;` in certain places then you actually should end up with a CR in the resulting parsed data","format":"org.matrix.custom.html","formatted_body":"Well I think the idea is if you do <code>&amp;#xD;</code> in certain places then you actually should end up with a CR in the resulting parsed data","msgtype":"m.text"},"ts":1641573557841,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$FNP5Gc8HxM-oVZbRajAuIaf7Izt6EYRvzg3QHjLdZ88"},
{"content":{"body":"And so e.g. if you do that in early parts of the document then the initial insertion mode state will actually see the CR and ignore it, not normalize it","msgtype":"m.text"},"ts":1641573590855,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$DpFd5CEFW917661zn0nJPrlRqh_fxl9af7KdpQKZW48"},
{"content":{"body":"Right, though then the question is why `&#0;` doesn't work (but JS equivalents do)","format":"org.matrix.custom.html","formatted_body":"Right, though then the question is why <code>&amp;#0;</code> doesn't work (but JS equivalents do)","msgtype":"m.text"},"ts":1641573650668,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$huq5ALmHovQBhsIeWcls25P2u1rVs0_D37O-MWr8msk"},
{"content":{"body":"https://html.spec.whatwg.org/#parsing-main-incolgroup is a better example where it inserts the CR instead of ignoring it.","msgtype":"m.text"},"ts":1641573654997,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$h1m_iqLwTZYQuJxU8_b_ApOjoicP0ImE8jBAxDY39yo"},
{"content":{"body":"Hmmm","msgtype":"m.text"},"ts":1641573699657,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$cM5khH2I9HxeB9ya4U1fbHlux_odV449H8yc5QKMXFI"},
{"content":{"body":"Finding logic in the parser might not be the best use of our time 🙂","msgtype":"m.text"},"ts":1641573708392,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$JY2IZx9vk4o2JdU8vS-BwauyiX-66eLZpd2taEzfIgI"},
{"content":{"body":"Yeah OK good point","msgtype":"m.text"},"ts":1641573748095,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$3wN-xRHhxHFaa1J_t4YakVzbTJ1a6h4MyOmcttXLAnY"},
{"content":{"body":"For strictly split on : it might be worth clarifying you'd split on the first or concatenate return values 1...N","msgtype":"m.text"},"ts":1641573768257,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$QxJvlLTN1SvZoALoNjALqbYqLQFLu1OOFhHPEqfTcwA"},
{"content":{"body":"For Prefix there might still be some edge cases I suspect due to XML 4th/5th edition divide, where browsers didn't uniformly stick with the 4th (not entirely sure if some updated the parser, but not the corresponding DOM methods)","msgtype":"m.text"},"ts":1641573907601,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$S3tV1wrnNH9SuB3laac2FFGmY5YuV_UMVclinSYjhUM"},
{"content":{"body":"Yeah I wonder about tests, I wonder if we can apply https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/ to this","msgtype":"m.text"},"ts":1641574023913,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$d-a5XgFQs4J5ijJHbCqMo_Abea74HiCVt5fS5FbYLXI"},
{"content":{"body":"Probably not :)","msgtype":"m.text"},"ts":1641574051105,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$9FJ7vvnZvThUDAJxIF5aLLlninziXxi5mOrF6oHJvhg"},
{"content":{"body":"For PCENChar I think the banning of noncharacters is a bit dumb and removing that would simplify the production a lot","msgtype":"m.text"},"ts":1641574098296,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$9iYh2iYyLX8bwe5OSWycmaoGj103duawGxJzyONCiOY"},
{"content":{"body":"Yeah I don't have strong feelings there, happy to take a new suggestion.","msgtype":"m.text"},"ts":1641574115510,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$EkwpOplRcJYwNqiNk38bRltpdQ_QXSbm1nE64FZwYjc"},
{"content":{"body":"Oh I see, that came from XML and we'll preserve some of that through NameStartChar. I guess I'd consider simplifying that as well to C0 and above or even A0 and above (like URL code points), but I'm not sure how much we want to go for","msgtype":"m.text"},"ts":1641574440208,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$bdLHbglQEVA3nQQFWXoWDMv7cp5zne5Ck2Xip5I0YCo"},
{"content":{"body":"On the one hand, it's pretty separable. On the other hand, maybe we should do this all at once, since it's hard to get momentum for these sorts of things.","msgtype":"m.text"},"ts":1641574530020,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$C43DyDUjFuzHw1rh1udXOwjr0KPRZlJUcCXT3A1MUy4"},
{"content":{"body":"Oh, or you mean just making LenientNameStartChar even more lenient","msgtype":"m.text"},"ts":1641574580358,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$hhlaK0jVfflRDESQOVALpIAPeaB9lwdtv9um3-bAtyI"},
{"content":{"body":"Well all of them I suppose. Less range checks ftw","msgtype":"m.text"},"ts":1641574605291,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$j_CvvQ_KepFiicFyANb0hW7z6htjgRIrG06d9csriQ0"},
{"content":{"body":"Nobody has ever proven the value of segmenting Unicode in such a way to my knowledge and most things work fine without it","msgtype":"m.text"},"ts":1641574677457,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$uzMwELGNmYEV_K--cplbseNUcAetMfarfEs8Di1Jks0"},
{"content":{"body":"Unpaired surrogates?","msgtype":"m.text"},"ts":1641574680441,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ycC8Vy7bayP2audS1-Nqp1rWfAMn05N7wxg3EHC6W90"},
{"content":{"body":"Hmm that's a good point, you included them but does that actually work?","msgtype":"m.text"},"ts":1641574756236,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$jbDYKjtOIQeGXP-DFF5xPuoMdpyZ-ZHxEGmVboOdHZA"},
{"content":{"body":"Oh wait, URLs do consider noncharacters non-conforming, but they do work. Surrogates cannot work there however.","msgtype":"m.text"},"ts":1641574838994,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Sa-JD8f9t20Za7EBbsQzXXQBcxyuN5ZDZCsV_KE-MIE"},
{"content":{"body":"I think they work http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=9941","msgtype":"m.text"},"ts":1641575189048,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$W7Huu_9VXBwIVMcTlUREY9uCnHmfkfEQkHhpa5_-XVk"},
{"content":{"body":"Domenic: as for testing, given Unicode is 2^21 if I'm not mistaken that might actually be feasible? Element-creation is a bit more expensive than floats though I suppose 🙂","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: as for testing, given Unicode is 2^21 if I'm not mistaken that might actually be feasible? Element-creation is a bit more expensive than floats though I suppose 🙂","msgtype":"m.text"},"ts":1641575200472,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$5QGkM8rMOlcoatNZswlzP8RpUPICKBAaEHGfBFH73KY"},
{"content":{"body":"Yeah that's my worry.","msgtype":"m.text"},"ts":1641575216574,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$6UzMMot_mpJosFvZyjZk8nbAS9VRcnXYZFauw2DTXMI"},
{"content":{"body":"IIRC we already have a cloneNode test that can cause timeouts just when creating + cloning one instance of every existing/historical HTML tag name","msgtype":"m.text"},"ts":1641575246151,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$_G8W1Zj6tK7sbD8DCp8JqDqeU_5wMW_Qh9nRtw5Pauw"},
{"content":{"body":"C++ unit tests in browsers could probably be exhaustive though","msgtype":"m.text"},"ts":1641575263997,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$UexEtvItsHxbGfeXhM70TeqCaz5r8VD3-mA0oBww2q0"},
{"content":{"body":"We could have a manual test for us to verify things on the side and for when computers get fast","msgtype":"m.text"},"ts":1641575396650,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$f7LXLywTE499o4rZumqVTg7AnFg8foV5yLpv6ZcQRYg"}
]