[
{"content":{"body":"I just noticed that, in the HTML spec, if you have a variable like `<var>x<sub>current</sub></var>` and you click on the 'x' part, it highlights, but if you click on the 'current' part, it doesn't. I guess that's because the target of the click event is the sub, not the var, and the sub doesn't care about clicks.","format":"org.matrix.custom.html","formatted_body":"I just noticed that, in the HTML spec, if you have a variable like <code>&lt;var&gt;x&lt;sub&gt;current&lt;/sub&gt;&lt;/var&gt;</code> and you click on the 'x' part, it highlights, but if you click on the 'current' part, it doesn't. I guess that's because the target of the click event is the sub, not the var, and the sub doesn't care about clicks.","m.mentions":{},"msgtype":"m.text"},"ts":1758846270718,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$kIMQUt5kg1LrikUwXPiD5mLM8mwiXaRPqivoNmXLNMg"},
{"content":{"body":"We should be able to fix this with a .closest() check in the click handler. (Ideally we should PR also to the Bikeshed version as having them diverge could cause problems down the line, but that's not a big deal.)","m.mentions":{"user_ids":["@jmdyck:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kIMQUt5kg1LrikUwXPiD5mLM8mwiXaRPqivoNmXLNMg"}},"msgtype":"m.text"},"ts":1758850556690,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$4fUYheluL83yEPdTaWM-ij-euFd96pLvHPtZ96D_4BY"},
{"content":{"body":"bakkot: I've been banging the drum about how event-based aborting and internal web platform aborting having different semantics is bad for quite a while, but annevk always insists it's a feature not a bug. I appreciate you laying out all the problems it causes clearly.\n\nMy preferred fix would be to improve the event-based infrastructure until it has all the nice properties, and then make the internal web platform code paths use it as well. There are various issues gesturing in that direction; I guess https://github.com/whatwg/dom/issues/1195 is the latest.\n\nIt feels like something that _might_ be simple enough that one person writing spec + tests, and attending WHATNOT to pin down implementer interest, could succeed.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I've been banging the drum about how event-based aborting and internal web platform aborting having different semantics is bad for quite a while, but <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> always insists it's a feature not a bug. I appreciate you laying out all the problems it causes clearly.</p>\n<p>My preferred fix would be to improve the event-based infrastructure until it has all the nice properties, and then make the internal web platform code paths use it as well. There are various issues gesturing in that direction; I guess https://github.com/whatwg/dom/issues/1195 is the latest.</p>\n<p>It feels like something that <em>might</em> be simple enough that one person writing spec + tests, and attending WHATNOT to pin down implementer interest, could succeed.</p>\n","m.mentions":{"user_ids":["@bakkot:matrix.org","@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1758850963420,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XiIaMJixV5EiL2tbC0lm5_6QCZ7IJ3vjY9bKgkJV37s"},
{"content":{"body":"Do you think we could get away with changing the way the event-based infrastructure currently works? I would not be surprised to learn e.g. someone is relying on the `stopImmediatePropagation` behavior","format":"org.matrix.custom.html","formatted_body":"Do you think we could get away with changing the way the event-based infrastructure currently works? I would not be surprised to learn e.g. someone is relying on the <code>stopImmediatePropagation</code> behavior","m.mentions":{},"msgtype":"m.text"},"ts":1758851291029,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hK_-2KqfMta3S8pCHfXwVKKK5qrO1HbsTP4FkL4rxbI"},
{"content":{"body":"though, I mean, it is a pretty weird thing to rely on, so maybe we could","m.mentions":{},"msgtype":"m.text"},"ts":1758851308436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SCoLMnggeG5ja8qcd2YlGGlDoTSWVjMmF--jjuvXHtA"},
{"content":{"body":"I don't think it's currently possible to make an event which doesn't respect `stopImmediatePropagation`, but I suppose we could introduce such a thing. Domenic is that the kind of thing you mean by \"improve the event-based infrastructure\"?","format":"org.matrix.custom.html","formatted_body":"I don't think it's currently possible to make an event which doesn't respect <code>stopImmediatePropagation</code>, but I suppose we could introduce such a thing. <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> is that the kind of thing you mean by \"improve the event-based infrastructure\"?","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1758851450912,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NpdtK_kVg_X7nAl7s7kelmgvIzUI0V-hvPLSb_Y4x1Y"},
{"content":{"body":"Yes exactly.","m.mentions":{},"msgtype":"m.text"},"ts":1758851472974,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8AnneG5wz_t6ATTf0FZgc8onGgW-2kR_MaTc-jQGQaE"},
{"content":{"body":"One possible end result would be that to get good behavior you have to do `abortSignal.addEventListener(\"abort\", listener, { a bunch of strange options })` and then we sugar that over with `abortSignal.whenAborted(listener)`?? Or something??? Not 100% satisfying; just spit balling.","format":"org.matrix.custom.html","formatted_body":"One possible end result would be that to get good behavior you have to do <code>abortSignal.addEventListener(\"abort\", listener, { a bunch of strange options })</code> and then we sugar that over with <code>abortSignal.whenAborted(listener)</code>?? Or something??? Not 100% satisfying; just spit balling.","m.mentions":{},"msgtype":"m.text"},"ts":1758851535563,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$MZbspSI2iiNMHWv2dQmahJMBPMMncXbwsTyzZLa-9Ds"},
{"content":{"body":"Or maybe it's configurable at the `new EventTarget()` level instead of the `addEventListener()` level, and then we can hopefully retroactively say all `AbortSignal`s are configured that way.","format":"org.matrix.custom.html","formatted_body":"Or maybe it's configurable at the <code>new EventTarget()</code> level instead of the <code>addEventListener()</code> level, and then we can hopefully retroactively say all <code>AbortSignal</code>s are configured that way.","m.mentions":{},"msgtype":"m.text"},"ts":1758851590279,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$7RzsagDows7SNVQqJ2Tbg7TRiEvXvBQv1VHhdpxdYLQ"},
{"content":{"body":"I would very much like a `whenAborted`, especially if it has the behavior of immediately invoking `listener` if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using `AbortController` in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled `addTeardown`)","format":"org.matrix.custom.html","formatted_body":"I would very much like a <code>whenAborted</code>, especially if it has the behavior of immediately invoking <code>listener</code> if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using <code>AbortController</code> in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled <code>addTeardown</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1758851764208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GNZ57egEHHElIRMF_df5TIvatelh858TqTCmJcWiKDs"},
{"content":{"body":"* I would very much like a `whenAborted` anyway, especially if it has the behavior of immediately invoking `listener` if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using `AbortController` in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled `addTeardown`)","format":"org.matrix.custom.html","formatted_body":"* I would very much like a <code>whenAborted</code> anyway, especially if it has the behavior of immediately invoking <code>listener</code> if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using <code>AbortController</code> in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled <code>addTeardown</code>)","m.mentions":{},"m.new_content":{"body":"I would very much like a `whenAborted` anyway, especially if it has the behavior of immediately invoking `listener` if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using `AbortController` in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled `addTeardown`)","format":"org.matrix.custom.html","formatted_body":"I would very much like a <code>whenAborted</code> anyway, especially if it has the behavior of immediately invoking <code>listener</code> if the signal is already aborted, because I think the existence of such a method is the only way we could conceivably start using <code>AbortController</code> in the actual JS (writeup of thoughts on that topic at https://github.com/tc39/proposal-concurrency-control/issues/14, there spelled <code>addTeardown</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GNZ57egEHHElIRMF_df5TIvatelh858TqTCmJcWiKDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758851769856,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cMm84bFLXEHiQAqq3Rag1VyOF_j87Ap6ECxWdjIot2o"},
{"content":{"body":"The \"run immediately or async\" behavior is a pretty good argument for such a method. Although, do we still worry about zalgo?","m.mentions":{},"msgtype":"m.text"},"ts":1758857961234,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$s8ITRWfjGqTx2gJ-lhY38XJ-_lefJhiM6IuknqSwsRE"},
{"content":{"body":"Congrats to Domenic on retiring and congrats to zcorpan and Mattias Buelens for becoming the new HTML and Streams Workstream editors, respectively! 🎉","format":"org.matrix.custom.html","formatted_body":"Congrats to <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> on retiring and congrats to <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a> and <a href=\"https://matrix.to/#/@mattiasbuelens:matrix.org\">Mattias Buelens</a> for becoming the new HTML and Streams Workstream editors, respectively! 🎉","m.mentions":{"user_ids":["@domenicdenicola:matrix.org","@zcorpan:mozilla.org","@mattiasbuelens:matrix.org"]},"msgtype":"m.text"},"ts":1758867359527,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$BlCZpT11gxNLGobrcsnUZthAk8OrErdcVyLK7Y7DLBs"},
{"content":{"body":"Domenic: do you want to finish https://github.com/whatwg/sg/pull/253 before you leave? Just noticed that is still open.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: do you want to finish https://github.com/whatwg/sg/pull/253 before you leave? Just noticed that is still open.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1758867525084,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ReJSF_UUvBS8-Gxu3P7NKMAZH-TOiqLVh_PPfs_gUa4"},
{"content":{"body":"Done!","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ReJSF_UUvBS8-Gxu3P7NKMAZH-TOiqLVh_PPfs_gUa4"}},"msgtype":"m.text"},"ts":1758870296818,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8xtdc37HHHFEtT_-f_DD37AgxaRc-Gnpr7IL2qB-skc"},
{"content":{"body":"Enjoy the new situation!","m.mentions":{},"msgtype":"m.text"},"ts":1758872118535,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$wEfkfKcdIINQHLror6ljdRhibVN_ar3Inj5iP_xDZII"},
{"content":{"body":"What did Ladybird implement here? https://github.com/whatwg/html/pull/7205 ","m.mentions":{},"msgtype":"m.text"},"ts":1758880503315,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$tH42-GHDnRpOeGneeOJ2xwJGtT-xbXS6f14f_eO31JM"},
{"content":{"body":"akaster would know, but I'd reckon it follows the existing spec text — not what's in that patch ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akaster:serenityos.org\">@akaster:serenityos.org</a> would know, but I'd reckon it follows the existing spec text — not what's in that patch ","msgtype":"m.text"},"ts":1758880753795,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$tfXLNeALCjG_Um6-xyQYoFeXJ10_fY4BOYWDcyJNhsk"}
]