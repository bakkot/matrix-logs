[
{"content":{"body":"Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?\n\nIn that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:\n> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`","format":"org.matrix.custom.html","formatted_body":"<p>Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?</p>\n<p>In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:</p>\n<blockquote>\n<p><code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not be used as the value of a <code>float</code> or <code>double</code></p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710142318118,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$MWN3FQVOqSr545FzRSP-6NnROR_OInYCuE2TQbI8Yr8"},
{"content":{"body":" * Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?\n\nIn that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:\n\n> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`","format":"org.matrix.custom.html","formatted_body":" * <p>Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?</p>\n<p>In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:</p>\n<blockquote>\n<p><code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not be used as the value of a <code>float</code> or <code>double</code></p>\n</blockquote>\n","m.mentions":{},"m.new_content":{"body":"Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?\n\nIn that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:\n\n> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`","format":"org.matrix.custom.html","formatted_body":"<p>Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementation return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?</p>\n<p>In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:</p>\n<blockquote>\n<p><code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not be used as the value of a <code>float</code> or <code>double</code></p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MWN3FQVOqSr545FzRSP-6NnROR_OInYCuE2TQbI8Yr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710142337859,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$voeLbuQ7sBbFfN6-tkkSzXxMXFGd-3r_fejSorbAcnU"},
{"content":{"body":" * Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementations return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?\n\nIn that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:\n\n> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`","format":"org.matrix.custom.html","formatted_body":" * <p>Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementations return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?</p>\n<p>In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:</p>\n<blockquote>\n<p><code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not be used as the value of a <code>float</code> or <code>double</code></p>\n</blockquote>\n","m.mentions":{},"m.new_content":{"body":"Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementations return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?\n\nIn that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:\n\n> `Infinity`, `-Infinity` and `NaN` must not be used as the value of a `float` or `double`","format":"org.matrix.custom.html","formatted_body":"<p>Per https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values, when parsing floating-point number values: Should implementations return Infinity and NaN if that’s the number value a string parses to — or instead should implementations treat Infinity and NaN be treated as errors ?</p>\n<p>In that HTML spec algorithm itself, there’s nothing explicit about handling Infinity and NaN — but in the WebIDL spec at https://webidl.spec.whatwg.org/#ref-for-idl-float①, I see:</p>\n<blockquote>\n<p><code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not be used as the value of a <code>float</code> or <code>double</code></p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MWN3FQVOqSr545FzRSP-6NnROR_OInYCuE2TQbI8Yr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710142344521,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$CZv9xpy3gsxjpwEkEX0YEah4lfT_8nQZi4DAeAzS0BU"},
{"content":{"body":"sideshowbarker: the HTML algorithm treats strings like \"Infinity\" or \"NaN\" as errors, if that's what you're asking. It's completely separate from the Web IDL algorithm, and has different call sites.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: the HTML algorithm treats strings like \"Infinity\" or \"NaN\" as errors, if that's what you're asking. It's completely separate from the Web IDL algorithm, and has different call sites.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1710142459030,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$k7o1ORWE85PFCvZ5poyMfn1Dml-ex9yrTsNnBRqZe0A"},
{"content":{"body":"I'm not sure, but I think there's definitely a worry about changing the existing contract drastically as it'll impact many websites.","m.mentions":{},"m.relates_to":{"event_id":"$837kiHuvdITI_8xmWtbK5Ot9yXxtcY_VD9UqKgE88jk","is_falling_back":true,"m.in_reply_to":{"event_id":"$5pCxaTEuwmhAesd-qaDR9h8qpE37yMpQCcLMif8v_TI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1710142682335,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$X-8zAlTTRlCpYwRpiz5uqneD4JDEeQm2jehDdR79KCI"},
{"content":{"body":"So I guess the only way that algorithm would ever return Inifinity or NaN is if it were given \"Infinity\" or \"NaN\"  as input? If so then I guess another way to state it is: The algorithm never returns \"Infinity\" or \"NaN\" — it always returns either an actual number, or any error?","m.mentions":{},"msgtype":"m.text"},"ts":1710142705109,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$CqfqDv9P6W4NlL5u5eBwj7K4zcKfxJEi1SOQxpxqwAU"},
{"content":{"body":" * So I guess the only way that algorithm would ever return Inifinity or NaN is if it were given \"Infinity\" or \"NaN\"  as input? If so then I guess another way to state it is: The algorithm never returns \"Infinity\" or \"NaN\" — it always returns either an actual number, or an error?","m.mentions":{},"m.new_content":{"body":"So I guess the only way that algorithm would ever return Inifinity or NaN is if it were given \"Infinity\" or \"NaN\"  as input? If so then I guess another way to state it is: The algorithm never returns \"Infinity\" or \"NaN\" — it always returns either an actual number, or an error?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CqfqDv9P6W4NlL5u5eBwj7K4zcKfxJEi1SOQxpxqwAU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710142719287,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$pkcFzIBIF40rC9mc96NM32h22OzYpFNpxCfIm_ReLoc"},
{"content":{"body":"That looks correct, from a quick glance.","m.mentions":{},"msgtype":"m.text"},"ts":1710142794999,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ScfB6DE7YcCcH8CsvZtNiVJPWZVoO8hXGtzVwhQbBQs"}
]