[
{"content":{"body":"r? https://github.com/whatwg/whatwg.org/pull/440 & https://github.com/whatwg/whatwg.org/pull/441","m.mentions":{},"msgtype":"m.text"},"ts":1714378421090,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$T_P9V13tj8L2IV0VMgY3NUzEOvWAP8JgRseyidIoSng"},
{"content":{"body":"krosylight: I think you can go ahead with https://github.com/whatwg/sg/issues/231 given that Tantek is presumably aware and okay with this?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@krosylight:mozilla.org\">krosylight</a>: I think you can go ahead with https://github.com/whatwg/sg/issues/231 given that Tantek is presumably aware and okay with this?","m.mentions":{"user_ids":["@krosylight:mozilla.org"]},"msgtype":"m.text"},"ts":1714380099689,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8RLAFEsHOMX8Qb4wOSUCXCggBw4PqOcUhSk7fpkIEYM"},
{"content":{"body":"Is there any guidance on when events should bubble? (for making platform-consistent events)","m.mentions":{},"msgtype":"m.text"},"ts":1714389571941,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$1ijrgiPc3J2iInvmNDL4F9FTyERyAHZMwnMby7gKV0U"},
{"content":{"body":"Jake Archibald: not that I know of. One consideration would be whether you want onX on a parent to get invoked.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: not that I know of. One consideration would be whether you want onX on a parent to get invoked.","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1714390094566,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$U-JwkjQcsY0hmvpum16AkWybmAxHlXWCsMFwghG59Y4"},
{"content":{"body":"annevk: yeah. I guess bubbling makes sense for 'click', since parent elements were also clicked. Whereas with the `img` `load` event, it's the image that loaded, none of the parents did.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: yeah. I guess bubbling makes sense for 'click', since parent elements were also clicked. Whereas with the <code>img</code> <code>load</code> event, it's the image that loaded, none of the parents did.","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1714390372820,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$E9QovyAT7ofl0OQo3Ip2pfbYLh6wzY-J65AAC9MYLdk"},
{"content":{"body":"cheers!","m.mentions":{},"msgtype":"m.text"},"ts":1714390375771,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$cshz7G3y6VVWq0TWX4Gyj7KvR10Nwl1mqzg2LXEEEc4"},
{"content":{"body":"> <@zcorpan:mozilla.org> sideshowbarker: what happens in browsers?\n\nI ended up rewriting the tests to remove the part that attempts to test “cancellation” of an edit operation — because as far as I can see, there is nothing in the spec to support that calling _any_ event’s `preventDefault()` should cause any edit operation to be cancelled. And I couldn’t find that there was any way at all to cancel an edit operation.\n\nAnd anyway, the test as written had not even been calling the edit operations themselves, but was instead just firing a `textInput` event with a particular input type, and relying on the fact that the implementation happened to be written to expect to get all the necessary data from that event.\n\nThe implementation of the `textInput` event had other properties beyond just what’s in the IDL and required by the spec. So the implementation had sort of just been using the event as a convenience to hang those other properties on. And that worked OK as long as the `textInput` event got fired prior to `beforeinput` — but not if the firing order of those events were changed.\n\nBut the event-firing order needed changing.\n\nSo I rewrote it all such that the code now instead passes on the actual data directly, and only puts what’s actually necessary into the `textInput` event (when it eventually gets fired later).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_02OpYvCFv6KqCzsuzQJitM6hGLJN4jWbUVM94KU6cQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">@zcorpan:mozilla.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: what happens in browsers?</blockquote></mx-reply><p>I ended up rewriting the tests to remove the part that attempts to test “cancellation” of an edit operation — because as far as I can see, there is nothing in the spec to support that calling <em>any</em> event’s <code>preventDefault()</code> should cause any edit operation to be cancelled. And I couldn’t find that there was any way at all to cancel an edit operation.</p>\n<p>And anyway, the test as written had not even been calling the edit operations themselves, but was instead just firing a <code>textInput</code> event with a particular input type, and relying on the fact that the implementation happened to be written to expect to get all the necessary data from that event.</p>\n<p>The implementation of the <code>textInput</code> event had other properties beyond just what’s in the IDL and required by the spec. So the implementation had sort of just been using the event as a convenience to hang those other properties on. And that worked OK as long as the <code>textInput</code> event got fired prior to <code>beforeinput</code> — but not if the firing order of those events were changed.</p>\n<p>But the event-firing order needed changing.</p>\n<p>So I rewrote it all such that the code now instead passes on the actual data directly, and only puts what’s actually necessary into the <code>textInput</code> event (when it eventually gets fired later).</p>\n","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_02OpYvCFv6KqCzsuzQJitM6hGLJN4jWbUVM94KU6cQ"}},"msgtype":"m.text"},"ts":1714391339421,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fLW-uxzdlufnHJ9I1UVtudf8fFvJRPao3VIDqBPUZ7w"},
{"content":{"body":"Jake Archibald: events fired on document generally bubble. UI events generally bubble, but not always (e.g. `scroll` on an element doesn't bubble)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: events fired on document generally bubble. UI events generally bubble, but not always (e.g. <code>scroll</code> on an element doesn't bubble)","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1714397484647,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$HaUanw7DOC6wCCdZ3oEXT_UZFst4GnGlRIwxWUH-T_I"},
{"content":{"body":"zcorpan: It feels like that fits with what I said before. You're not scrolling parent elements, you're just scrolling that one element, so bubbling doesn't fit","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: It feels like that fits with what I said before. You're not scrolling parent elements, you're just scrolling that one element, so bubbling doesn't fit","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1714397566425,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$nk4GfgTNAJnlWUqrujSREOWXzwtpIkqXhViILreMhqI"},
{"content":{"body":"Jake Archibald: you'll also have to consider if it gets retargeted on a shadow host, which is generally yes for UI events","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: you'll also have to consider if it gets retargeted on a shadow host, which is generally yes for UI events","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1714397975568,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$V6pYk3AhC--EyPbN0RV_0-ww6BDSR7AQwWfvqpSUR0E"},
{"content":{"body":"Jake Archibald: yep, but then `form` `submit` bubbles, which doesn't seem to fit in. Also `formdata`, `change`, `reset`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: yep, but then <code>form</code> <code>submit</code> bubbles, which doesn't seem to fit in. Also <code>formdata</code>, <code>change</code>, <code>reset</code>","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1714401241205,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$il6BGeycAy8wn3me9X0tX9tTb_lpCwjt4FExByBtJXM"},
{"content":{"body":"zcorpan: hm, yeah. Are those seen as a historical mistake? Or is there just no real consistency?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: hm, yeah. Are those seen as a historical mistake? Or is there just no real consistency?","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1714401307433,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$Ynv7wG6e9AtRItfHFI-lhKqf6-Lk59M87hyPDt33Ucg"},
{"content":{"body":"(I think most events should default to bubbling for ease of use, personally.)","msgtype":"m.text"},"ts":1714401629950,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$djmLwqdoFOYTkoTc0OgZ7cS_VW90pIcr-UyHLqQYQDU"},
{"content":{"body":"Every time I write a focus handler I have to cuss it for not working until I remember I have to capture it","msgtype":"m.text"},"ts":1714401649180,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$E_BI1bF05s59QDndsOUI5YWefr57YakEczMIBsoFcng"}
]