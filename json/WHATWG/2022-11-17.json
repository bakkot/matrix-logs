[
{"content":{"body":"Pretty sure it has a \"\" path segment... let's see","msgtype":"m.text","org.matrix.msc1767.text":"Pretty sure it has a \"\" path segment... let's see"},"ts":1668645111398,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$tPlwL5DMo_y151EnSoZypSxB4tsFEKzFNL6h1WgXy_E"},
{"content":{"body":"Yes:","msgtype":"m.text","org.matrix.msc1767.text":"Yes:"},"ts":1668645197199,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$TT_2GX1mrZxGuNT1DHBE0qEFqN7qOHiMT7G_9-gB_DU"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1668645852466,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$X1tcKry_47J77o9QeSBrNWMvWrMaVsHqJh-Q7z7U20o"},
{"content":{"body":"That's... unintuitive","msgtype":"m.text"},"ts":1668645867848,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$ynPyN63BLSKRWRICfvLN9owXWNGNdkOC-urxB55oFn0"},
{"content":{"body":"So then the other question is, what's an example of a hierarchical URL which has the empty string for its `pathname`?","msgtype":"m.text"},"ts":1668646013823,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$S-7PM-8lpgE4Ye0iI7wahCGsjkutyD3TGF4U42aXqF4"},
{"content":{"body":"Is it possible for a hierarchical URL to ever have the empty string for its `pathname`?","msgtype":"m.text"},"ts":1668646070582,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$EVop4w0PZbdUos96zOVHAm7eZDg0CTtF6Am8ucWVADY"},
{"content":{"body":"I don't think so","msgtype":"m.text","org.matrix.msc1767.text":"I don't think so"},"ts":1668647603051,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jfIgD7wEmvnhxLMUv__5OXIbvVm8J3L00iBzO9x6-WQ"},
{"content":{"body":"annevk: hsivonen: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: hsivonen: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?","mimetype":"text/html"}]},"ts":1668652719705,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$lfqphXXR-70Ts8nkb1wTfI11otDuoHZmAYCkq4zkIVM"},
{"content":{"body":"so now I’m wondering if there’s _any_ real-world URL — for any scheme — that’ll ever have the empty string for its `pathname`","format":"org.matrix.custom.html","formatted_body":"so now I’m wondering if there’s <em>any</em> real-world URL — for any scheme — that’ll ever have the empty string for its <code>pathname</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so now I’m wondering if there’s _any_ real-world URL — for any scheme — that’ll ever have the empty string for its `pathname`","mimetype":"text/plain"},{"body":"so now I’m wondering if there’s <em>any</em> real-world URL — for any scheme — that’ll ever have the empty string for its <code>pathname</code>","mimetype":"text/html"}]},"ts":1668667172068,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$DyWGxpXpDjC4b5jqD6lhH-ph9b3KR79niNNp5NAfFaM"},
{"content":{"body":"anything I can imagine that would have any real use is gotta have _something_ after the `:` — and so, have a `pathname`","format":"org.matrix.custom.html","formatted_body":"anything I can imagine that would have any real use is gotta have <em>something</em> after the <code>:</code> — and so, have a <code>pathname</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"anything I can imagine that would have any real use is gotta have _something_ after the `:` — and so, have a `pathname`","mimetype":"text/plain"},{"body":"anything I can imagine that would have any real use is gotta have <em>something</em> after the <code>:</code> — and so, have a <code>pathname</code>","mimetype":"text/html"}]},"ts":1668667228518,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$PtjBvGhqrX9JOPK7veCF0MCgV7UpHQsCELggcosTULM"},
{"content":{"body":"…I mean, any URL that identifies some real resource","msgtype":"m.text","org.matrix.msc1767.text":"…I mean, any URL that identifies some real resource"},"ts":1668667241452,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$rCUSSYP0JvsFV1WOUspqQHKxX72vkrQDrddKLkrmsXM"},
{"content":{"body":"Domenic: my idea was always that it would replace the XML parser and because it's generic and doesn't have language-specific knowledge it would be a one-time ecosystem cost","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: my idea was always that it would replace the XML parser and because it's generic and doesn't have language-specific knowledge it would be a one-time ecosystem cost","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: my idea was always that it would replace the XML parser and because it's generic and doesn't have language-specific knowledge it would be a one-time ecosystem cost","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: my idea was always that it would replace the XML parser and because it's generic and doesn't have language-specific knowledge it would be a one-time ecosystem cost","mimetype":"text/html"}]},"ts":1668669480404,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$egx9V3KTyV02YZmSjb9s-D-8NF661Gj2wdw7aH3jq5c"},
{"content":{"body":"annevk: https://stackoverflow.com/questions/74301267/are-browser-credentials-resubmitted-when-a-javascript-fetch-redirects","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: https://stackoverflow.com/questions/74301267/are-browser-credentials-resubmitted-when-a-javascript-fetch-redirects","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: https://stackoverflow.com/questions/74301267/are-browser-credentials-resubmitted-when-a-javascript-fetch-redirects","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: https://stackoverflow.com/questions/74301267/are-browser-credentials-resubmitted-when-a-javascript-fetch-redirects","mimetype":"text/html"}]},"ts":1668679508708,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$7XFePdOyXYSREOfCLC5PwmdUJE4gYd8DdNDgXFgUED4"},
{"content":{"body":"> <@domenicdenicola:matrix.org> annevk: hsivonen: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?\n\nIt would replace the XML parser. Since XML5 doesn't involve rules like what autocloses HTML `p` or HTML void elements, it wouldn't be subject to the same kind of drift. However, considering the general way of how people working on the Web Platform perceive XSS holes arising from syntax issues these days, perhaps the way XML 1.0 vs. XML5 is perceived has shifted a bit back towards XML 1.0.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$lfqphXXR-70Ts8nkb1wTfI11otDuoHZmAYCkq4zkIVM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?</blockquote></mx-reply>It would replace the XML parser. Since XML5 doesn't involve rules like what autocloses HTML <code>p</code> or HTML void elements, it wouldn't be subject to the same kind of drift. However, considering the general way of how people working on the Web Platform perceive XSS holes arising from syntax issues these days, perhaps the way XML 1.0 vs. XML5 is perceived has shifted a bit back towards XML 1.0.","m.relates_to":{"m.in_reply_to":{"event_id":"$lfqphXXR-70Ts8nkb1wTfI11otDuoHZmAYCkq4zkIVM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> annevk: hsivonen: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?\n\nIt would replace the XML parser. Since XML5 doesn't involve rules like what autocloses HTML `p` or HTML void elements, it wouldn't be subject to the same kind of drift. However, considering the general way of how people working on the Web Platform perceive XSS holes arising from syntax issues these days, perhaps the way XML 1.0 vs. XML5 is perceived has shifted a bit back towards XML 1.0.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$lfqphXXR-70Ts8nkb1wTfI11otDuoHZmAYCkq4zkIVM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: Is XML5 actually feasible to replace XML parsers in browsers, or would introducing it run into the same problems of cross-ecosystem parser algorithm drift that causes us to disprefer making changes to the HTML parser? Is the idea that XML is used very little so we're less worried about the security issues? Or that the benefit is so large that it'd be worth the one-time churn? Or was the idea always for XML5 to be a third parser that sits alongside HTML and XML?</blockquote></mx-reply>It would replace the XML parser. Since XML5 doesn't involve rules like what autocloses HTML <code>p</code> or HTML void elements, it wouldn't be subject to the same kind of drift. However, considering the general way of how people working on the Web Platform perceive XSS holes arising from syntax issues these days, perhaps the way XML 1.0 vs. XML5 is perceived has shifted a bit back towards XML 1.0.","mimetype":"text/html"}]},"ts":1668692028516,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$s_OKclHtK8RjyzrGsf61nSaMVxBt5Og8ledA1JM3cSA"},
{"content":{"body":"It would also move away from browser XML parsers being compatible with the rest of the ecosystem, which leads to potential exploits based on differential behaviour, which seems… likely bad.","msgtype":"m.text","org.matrix.msc1767.text":"It would also move away from browser XML parsers being compatible with the rest of the ecosystem, which leads to potential exploits based on differential behaviour, which seems… likely bad."},"ts":1668699944864,"senderName":"Sam Sneddon [:gsnedders]","senderId":"@gsnedders:mozilla.org","id":"$g-fCNBi7MFpzU_EwMtJbx3FvJH8BgS3wLmp0001KloE"},
{"content":{"body":"I don't expect realistically we'd be able to move the entire XML ecosystem, beyond browsers. For enough applications strict error-handling is viewed as a feature.","msgtype":"m.text","org.matrix.msc1767.text":"I don't expect realistically we'd be able to move the entire XML ecosystem, beyond browsers. For enough applications strict error-handling is viewed as a feature."},"ts":1668699985794,"senderName":"Sam Sneddon [:gsnedders]","senderId":"@gsnedders:mozilla.org","id":"$kvdTqHlEwkm1xZe2VO-VMsj5yIaFvXMcNPo-jwlfC6g"},
{"content":{"body":"Is there anything the specifications can do to prevent sites from detecting browser developer tools and refusing to serve content if detected.","msgtype":"m.text","org.matrix.msc1767.text":"Is there anything the specifications can do to prevent sites from detecting browser developer tools and refusing to serve content if detected."},"ts":1668700362538,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$dEmUuaokN5wNKCYUAPUoJ5SOsaCv35sIzUjDqVExrvw"},
{"content":{"body":"No","msgtype":"m.text","org.matrix.msc1767.text":"No"},"ts":1668700553856,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$qCRSxNL4BITs_6YebwbH_v_rKM9TnXdKWcYw_geVKIE"},
{"content":{"body":"Oh okay.","msgtype":"m.text","org.matrix.msc1767.text":"Oh okay."},"ts":1668700591513,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$Ex85M4AAzKrWn30XCVkMsRRWJBkwAOZl0vGQ_qL1h_U"},
{"content":{"body":"For WebDriver-ish tools being detectable is considered a feature. For general devtools it seems highly likely that you'll always be able to figure out that they're running somehow if you're sufficiently motivated.","msgtype":"m.text","org.matrix.msc1767.text":"For WebDriver-ish tools being detectable is considered a feature. For general devtools it seems highly likely that you'll always be able to figure out that they're running somehow if you're sufficiently motivated."},"ts":1668700645733,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$3fenXXJmOC_kymK6oZAVM2n5PFmn69c1bKec1PB30IM"},
{"content":{"body":"Shouldn't browsers try to prevent such detection?","msgtype":"m.text","org.matrix.msc1767.text":"Shouldn't browsers try to prevent such detection?"},"ts":1668700748281,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$toyxddaiJu_Du9J0Jpdovn8-IBW_QrLOKG1UTgFw_RQ"},
{"content":{"body":"Or are you saying that no matter what a browser does, devtools could always be detected?","msgtype":"m.text","org.matrix.msc1767.text":"Or are you saying that no matter what a browser does, devtools could always be detected?"},"ts":1668700857020,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$pRjJxpW4ersJXo6p6Jkh_vZqDmx_Mkv9lUHD_yhFrQA"},
{"content":{"body":"I think you could always detect them. ","msgtype":"m.text","org.matrix.msc1767.text":"I think you could always detect them. "},"ts":1668700939486,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$QOBHsjyI4ERj22HlbhlvJtxZubJ0ER49NSMGKrZMmLE"},
{"content":{"body":"That is sad. Thanks for the info!","msgtype":"m.text","org.matrix.msc1767.text":"That is sad. Thanks for the info!"},"ts":1668700965104,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$JIWgwhf2UZJZxwSjnY5rBSDWrYP6AZh5dUAVdiz_xHk"},
{"content":{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","format":"org.matrix.custom.html","formatted_body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/plain"},{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/html"}]},"ts":1668717586313,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$WUbna0uU3iGaXs8jnSeMy5Mal7iPad-9YF-bypgCet0"},
{"content":{"body":" * Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","format":"org.matrix.custom.html","formatted_body":" * Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","m.new_content":{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","format":"org.matrix.custom.html","formatted_body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/plain"},{"body":"Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WUbna0uU3iGaXs8jnSeMy5Mal7iPad-9YF-bypgCet0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. annevk suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/plain"},{"body":" * Hi there. I'm new here but, as I'm designing a principled CORS middleware library for Go, I have some questions. <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> suggested I ask them here (see https://github.com/whatwg/fetch/issues/1517#issuecomment-1291627075). Would that be alright?","mimetype":"text/html"}]},"ts":1668717607577,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$IVjYUcp2pcz1l6aRnSXVXh3NWsK5n1k2OOOdqLZ3-hs"},
{"content":{"body":"howdy jub0bs — yup, you should go ahead and ask","format":"org.matrix.custom.html","formatted_body":"howdy <a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a> — yup, you should go ahead and ask","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"howdy jub0bs — yup, you should go ahead and ask","mimetype":"text/plain"},{"body":"howdy <a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a> — yup, you should go ahead and ask","mimetype":"text/html"}]},"ts":1668717836188,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$KJNoPt1Vu4MeTFNrglXKnPzs8CDp-O3YLDlZFDIee7c"},
{"content":{"body":"I've got some concerns about this section of Jake's post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers","msgtype":"m.text","org.matrix.msc1767.text":"I've got some concerns about this section of Jake's post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers"},"ts":1668717902424,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$o4mno1A8gJ3TMI7KB35zd2XyIo2IbXpgBnS3AVlt40A"},
{"content":{"body":"In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","format":"org.matrix.custom.html","formatted_body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","mimetype":"text/plain"},{"body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668717934989,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$pKVx33RbQcszzSqbwcKNJmuR_MVn-lGj9N9FA-8QTZ4"},
{"content":{"body":" * In particular, this:\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: \\* header if the request doesn't have a Cookie header.","format":"org.matrix.custom.html","formatted_body":" * <p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: * header if the request doesn't have a Cookie header.</p>\n</blockquote>\n","m.new_content":{"body":"In particular, this:\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: \\* header if the request doesn't have a Cookie header.","format":"org.matrix.custom.html","formatted_body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: * header if the request doesn't have a Cookie header.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In particular, this:\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: \\* header if the request doesn't have a Cookie header.","mimetype":"text/plain"},{"body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: * header if the request doesn't have a Cookie header.</p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pKVx33RbQcszzSqbwcKNJmuR_MVn-lGj9N9FA-8QTZ4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In particular, this:\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: \\* header if the request doesn't have a Cookie header.","mimetype":"text/plain"},{"body":" * <p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the Access-Control-Allow-Origin: * header if the request doesn't have a Cookie header.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668717949807,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$F0ksDX-r3F4Cr40P_iOHniwGg2zn76ep31wMi_OXz9o"},
{"content":{"body":" * In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","format":"org.matrix.custom.html","formatted_body":" * <p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","m.new_content":{"body":"In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","format":"org.matrix.custom.html","formatted_body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","mimetype":"text/plain"},{"body":"<p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pKVx33RbQcszzSqbwcKNJmuR_MVn-lGj9N9FA-8QTZ4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In particular, this:\n\n> If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the `Access-Control-Allow-Origin: *` header if the request doesn't have a `Cookie` header.","mimetype":"text/plain"},{"body":" * <p>In particular, this:</p>\n<blockquote>\n<p>If a resource contains private data when it's requested with cookies, but you only want to expose the without-cookies data, then it's best to only include the <code>Access-Control-Allow-Origin: *</code> header if the request doesn't have a <code>Cookie</code> header.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668717971667,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$o11xeo40JHo86oT49J8G9KkNO_QFiMLCXD-8WMLXVxg"},
{"content":{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could use Basic Auth).","format":"org.matrix.custom.html","formatted_body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could use Basic Auth).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could use Basic Auth).","mimetype":"text/plain"},{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could use Basic Auth).","mimetype":"text/html"}]},"ts":1668718130440,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$mY1rvjDSWXdARthvlYXmImE75XrKbwJkFN-_aMrS-rU"},
{"content":{"body":"Am I missing something? What do people think about this approach?","msgtype":"m.text","org.matrix.msc1767.text":"Am I missing something? What do people think about this approach?"},"ts":1668718219780,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$tCJRQFIbi_rGTScZEizTxZG06vSJZpYCB3_Oi3W8gl0"},
{"content":{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","format":"org.matrix.custom.html","formatted_body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","mimetype":"text/plain"},{"body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668718550924,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$99hS1UaQUb6tOu2eBHPlgt6m4VitllJ0ETJ-OBITU1Y"},
{"content":{"body":" * There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","format":"org.matrix.custom.html","formatted_body":" * <p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","m.new_content":{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","format":"org.matrix.custom.html","formatted_body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","mimetype":"text/plain"},{"body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$99hS1UaQUb6tOu2eBHPlgt6m4VitllJ0ETJ-OBITU1Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","mimetype":"text/plain"},{"body":" * <p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668718570401,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$LhIfpkN0ew-Yu52nCU_nJeJi05bx0ihRRW2v7K_SEC4"},
{"content":{"body":" * There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","format":"org.matrix.custom.html","formatted_body":" * <p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","m.new_content":{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","format":"org.matrix.custom.html","formatted_body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","mimetype":"text/plain"},{"body":"<p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$99hS1UaQUb6tOu2eBHPlgt6m4VitllJ0ETJ-OBITU1Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * There's more. Further down, we're encouraged to responds with `Vary: Cookie` in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:\n\n> `Vary: Cookie`\n> \n> `Cookie` is probably one of the most unique request headers, and is therefore very bad.","mimetype":"text/plain"},{"body":" * <p>There's more. Further down, we're encouraged to responds with <code>Vary: Cookie</code> in some circumstances. But isn't that terrible for CDNs / Web caches, since cookie values tend to differ from one user to the next? To quote https://fastly.com/blog/best-practices-using-vary-header#vary-cookie:</p>\n<blockquote>\n<p><code>Vary: Cookie</code></p>\n<p><code>Cookie</code> is probably one of the most unique request headers, and is therefore very bad.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668718610182,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$SreZxA7CUi6Ye7HVDuIY6ywbKYiC7jjWMV0U6YQ-7TM"},
{"content":{"body":"Jake Archibald: ↑","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: ↑","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jake Archibald: ↑","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: ↑","mimetype":"text/html"}]},"ts":1668718673210,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$QihTQZNkWzeFLkpD3cc_z48IqOIk_XdxKD3zAily-vI"},
{"content":{"body":" * I've got some concerns about this section of Jake's (otherwise very instructive!) post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers","m.new_content":{"body":"I've got some concerns about this section of Jake's (otherwise very instructive!) post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers","msgtype":"m.text","org.matrix.msc1767.text":"I've got some concerns about this section of Jake's (otherwise very instructive!) post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers"},"m.relates_to":{"event_id":"$o4mno1A8gJ3TMI7KB35zd2XyIo2IbXpgBnS3AVlt40A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I've got some concerns about this section of Jake's (otherwise very instructive!) post about CORS: https://jakearchibald.com/2021/cors/#conditionally-serving-cors-headers"},"ts":1668718737813,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$ssKgxi8f9N7mU2_mdLRakH5N4h0paaIkMjEM6-_ovpE"},
{"content":{"body":" * This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":" * This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","m.new_content":{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":"This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mY1rvjDSWXdARthvlYXmImE75XrKbwJkFN-_aMrS-rU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":" * This implies a CORS middleware library should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"ts":1668718810536,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$FRxo1I9a8i0Hc87lOo3TM6_MsqHUttC37MQONfmm3RY"},
{"content":{"body":" * Am I missing something? What do people think of this approach?","m.new_content":{"body":"Am I missing something? What do people think of this approach?","msgtype":"m.text","org.matrix.msc1767.text":"Am I missing something? What do people think of this approach?"},"m.relates_to":{"event_id":"$tCJRQFIbi_rGTScZEizTxZG06vSJZpYCB3_Oi3W8gl0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Am I missing something? What do people think of this approach?"},"ts":1668718842157,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$WBMxOpKxjN1MM_Ld8QQGRutxYgcNtGfHtDSCaN5ADS0"},
{"content":{"body":" * This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":" * This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","m.new_content":{"body":"This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":"This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":"This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mY1rvjDSWXdARthvlYXmImE75XrKbwJkFN-_aMrS-rU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":" * This implies that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"ts":1668718951302,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$VWDtSO6_6-vS-jKU3ne59koOU7Rq9u5rr1Tume8EzPY"},
{"content":{"body":"I found a similar guideline in Brad Hill's W3C document from 2016: https://w3c.github.io/webappsec-cors-for-developers/#use-vary\n> If a resource is intended to be readable, truly regardless of the context of the request, first it should take care not to actually vary and reveal private information based on the presence and content of a cookie. Then it should send `Vary: Cookie, Origin` and either `Access-Control-Allow-Origin: *` for requests made without cookies or reflect the request’s `Origin` into the `Access-Control-Allow-Origin` header for credentialed requests.","format":"org.matrix.custom.html","formatted_body":"<p>I found a similar guideline in Brad Hill's W3C document from 2016: https://w3c.github.io/webappsec-cors-for-developers/#use-vary</p>\n<blockquote>\n<p>If a resource is intended to be readable, truly regardless of the context of the request, first it should take care not to actually vary and reveal private information based on the presence and content of a cookie. Then it should send <code>Vary: Cookie, Origin</code> and either <code>Access-Control-Allow-Origin: *</code> for requests made without cookies or reflect the request’s <code>Origin</code> into the <code>Access-Control-Allow-Origin</code> header for credentialed requests.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I found a similar guideline in Brad Hill's W3C document from 2016: https://w3c.github.io/webappsec-cors-for-developers/#use-vary\n> If a resource is intended to be readable, truly regardless of the context of the request, first it should take care not to actually vary and reveal private information based on the presence and content of a cookie. Then it should send `Vary: Cookie, Origin` and either `Access-Control-Allow-Origin: *` for requests made without cookies or reflect the request’s `Origin` into the `Access-Control-Allow-Origin` header for credentialed requests.","mimetype":"text/plain"},{"body":"<p>I found a similar guideline in Brad Hill's W3C document from 2016: https://w3c.github.io/webappsec-cors-for-developers/#use-vary</p>\n<blockquote>\n<p>If a resource is intended to be readable, truly regardless of the context of the request, first it should take care not to actually vary and reveal private information based on the presence and content of a cookie. Then it should send <code>Vary: Cookie, Origin</code> and either <code>Access-Control-Allow-Origin: *</code> for requests made without cookies or reflect the request’s <code>Origin</code> into the <code>Access-Control-Allow-Origin</code> header for credentialed requests.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1668719341008,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$OyP-JLH78LoVkeSGaT_A7XRKOj6CHfsJZu2KDI0fu08"},
{"content":{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","m.new_content":{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mY1rvjDSWXdARthvlYXmImE75XrKbwJkFN-_aMrS-rU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. This is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"ts":1668721467867,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$Gmu5cfhxsrMFCNuuL6ME0K48xG2yDYYKa4hKVN7PRRA"},
{"content":{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","m.new_content":{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","format":"org.matrix.custom.html","formatted_body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":"This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mY1rvjDSWXdARthvlYXmImE75XrKbwJkFN-_aMrS-rU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a `Cookie` header doesn't guarantee that the request was anonymous (e.g. it could be using `Authorization: Basic xxx`).","mimetype":"text/plain"},{"body":" * This seems to imply that CORS middleware should vary the response based on the presence or absence of a cookie header, which is taken as a cue that the request is credentialed. But this is problematic, as the absence of a <code>Cookie</code> header doesn't guarantee that the request was anonymous (e.g. it could be using <code>Authorization: Basic xxx</code>).","mimetype":"text/html"}]},"ts":1668721485407,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$5M73FodjVDwFGPI3y1K38472BJJ_D5sPYwjdxJHd1_c"},
{"content":{"body":"> <@annevk:matrix.org> rego: https://github.com/whatwg/html/pull/8496\n\nHi Anne! Rego pointed me at this and I think I'm as close to understanding it as I can get now - would love to find a time to talk through it if you'd be up for that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$gRxxogiB1-rcWpb0AdATLrfvB1DjzKPnDQStH_a0qfQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@mrego:igalia.com\">rego</a>: https://github.com/whatwg/html/pull/8496</blockquote></mx-reply>Hi Anne! Rego pointed me at this and I think I'm as close to understanding it as I can get now - would love to find a time to talk through it if you'd be up for that","m.relates_to":{"m.in_reply_to":{"event_id":"$gRxxogiB1-rcWpb0AdATLrfvB1DjzKPnDQStH_a0qfQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> rego: https://github.com/whatwg/html/pull/8496\n\nHi Anne! Rego pointed me at this and I think I'm as close to understanding it as I can get now - would love to find a time to talk through it if you'd be up for that","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$gRxxogiB1-rcWpb0AdATLrfvB1DjzKPnDQStH_a0qfQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@mrego:igalia.com\">rego</a>: https://github.com/whatwg/html/pull/8496</blockquote></mx-reply>Hi Anne! Rego pointed me at this and I think I'm as close to understanding it as I can get now - would love to find a time to talk through it if you'd be up for that","mimetype":"text/html"}]},"ts":1668722917705,"senderName":"Alice","senderId":"@alice:igalia.com","id":"$5gculEIukrD00_RxvPc9LxazuhATVYTmNTzEFRlQN0I"}
]