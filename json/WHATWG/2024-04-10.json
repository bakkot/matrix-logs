[
{"content":{"body":"emilio: (or anybody else who might remember) Do you recall how we ended up with the W3C being the home for the Intersection Observer work/spec — rather than WHATWG? ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: (or anybody else who might remember) Do you recall how we ended up with the W3C being the home for the Intersection Observer work/spec — rather than WHATWG?","m.mentions":{"user_ids":["@emilio:mozilla.org"]},"msgtype":"m.text"},"ts":1712715272582,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$9xVHRiwLbh2C7dKk6Oy3v8_Kwwn_VyDJcz0JXmWCnIk"},
{"content":{"body":"Domenic: zcorpan: either of you around to rs https://github.com/whatwg/html/pull/10260?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: either of you around to rs https://github.com/whatwg/html/pull/10260?","m.mentions":{"user_ids":["@domenicdenicola:matrix.org","@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712730242058,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_VbN3jFxM4-mQPJm2p2Z55kLAYe9V4m6qANfUBn5aMk"},
{"content":{"body":"> <@sideshowbarker:matrix.org> emilio: (or anybody else who might remember) Do you recall how we ended up with the W3C being the home for the Intersection Observer work/spec — rather than WHATWG? \n\nI think it predates my involvement with that spec. I assume because it's very css-related? But then arguably it should move to csswg-drafts, like resizeobserver","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$9xVHRiwLbh2C7dKk6Oy3v8_Kwwn_VyDJcz0JXmWCnIk?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br /><a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: (or anybody else who might remember) Do you recall how we ended up with the W3C being the home for the Intersection Observer work/spec — rather than WHATWG?</blockquote></mx-reply>I think it predates my involvement with that spec. I assume because it's very css-related? But then arguably it should move to csswg-drafts, like resizeobserver","m.relates_to":{"m.in_reply_to":{"event_id":"$9xVHRiwLbh2C7dKk6Oy3v8_Kwwn_VyDJcz0JXmWCnIk"}},"msgtype":"m.text"},"ts":1712731537404,"senderName":"emilio","senderId":"@emilio:mozilla.org","id":"$2YKD9cz_FB32rLvLtongdMSkkPcx0s-PN35HbYqS1NE"},
{"content":{"body":"Does `location.reload()` end up calling \"navigate\" somewhere? Or no?","format":"org.matrix.custom.html","formatted_body":"Does <code>location.reload()</code> end up calling \"navigate\" somewhere? Or no?","m.mentions":{},"msgtype":"m.text"},"ts":1712759339721,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$jOW4tJEowhwAqr-uWYkPBHVUSBFCDsB14tkBoKx7B1Q"},
{"content":{"body":"it does not I believe, navigate is only for regular push/replace navigations","m.mentions":{},"msgtype":"m.text"},"ts":1712760154664,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$g7-aVCPezMHoUb0XMegFl4Osow5eg3u93EkOUkfUod4"},
{"content":{"body":" * it does not I believe, navigate is only for regular push/replace navigations ^ zcorpan ","format":"org.matrix.custom.html","formatted_body":" * it does not I believe, navigate is only for regular push/replace navigations ^ <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"m.new_content":{"body":"it does not I believe, navigate is only for regular push/replace navigations ^ zcorpan ","format":"org.matrix.custom.html","formatted_body":"it does not I believe, navigate is only for regular push/replace navigations ^ <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g7-aVCPezMHoUb0XMegFl4Osow5eg3u93EkOUkfUod4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712760193730,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$CcHzkLCVgGi8hJ0eqyaLG4DvuZ-xciO5oeec0qe0aJ8"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigate 20.9 populates the history entry with type \"navigate\". when you traverse/reload you wouldn't do that","m.mentions":{},"msgtype":"m.text"},"ts":1712760225576,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$qT1XzZAkM1f7gMpfw0P6xqiNnz4_jFN7iQGubFYcYuM"},
{"content":{"body":"Noam Rosenthal: thanks. Yeah that's my conclusion as well, but stepping through the spec from `reload()` is not easy :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: thanks. Yeah that's my conclusion as well, but stepping through the spec from <code>reload()</code> is not easy :)","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712760250842,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$gT1zOgqyIRAYJUuMV8xFuxITuI5MKWprZsTggMQtcR8"},
{"content":{"body":"zcorpan: yea, the \"session history traversal queue\" (aka the browser process in some implementations) is a very technical part of the spec. I get lost in it a lot","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: yea, the \"session history traversal queue\" (aka the browser process in some implementations) is a very technical part of the spec. I get lost in it a lot","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712760318826,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_L7ndShoGvFIfx1pxxwwyfGHL16FrCbvhukpylsKMbU"},
{"content":{"body":"I'm working on tests for https://github.com/whatwg/html/pull/10226 - so reload or history traversal would not cancel the lazy load","m.mentions":{},"msgtype":"m.text"},"ts":1712760582652,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$90cHl2aDKBjitLL3js92b42_Kb9j35dDJKNsWi8V7rY"},
{"content":{"body":"zcorpan: that iframe will always be on the initial about:blank page, no? since it's lazy and hasn't been loaded yet?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: that iframe will always be on the initial about:blank page, no? since it's lazy and hasn't been loaded yet?","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712760958591,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$tSLKtQB7QlhaGvX1yU9BqmH9_qcGoX-GH_FeG33GfXQ"},
{"content":{"body":"Noam Rosenthal: I believe so","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: I believe so","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712761008379,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$QLkfGOnPKpsxUU8N31V5K4N9tsXbs8-gqIOubn0eQCk"},
{"content":{"body":"zcorpan: wondering what should be the behavior with same-document navigations. e.g. you `pushState` in that `about:blank` page before it's lazy-loaded","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: wondering what should be the behavior with same-document navigations. e.g. you <code>pushState</code> in that <code>about:blank</code> page before it's lazy-loaded","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712761125668,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$urY8Up4J2yYbE3pC95xLiPMK8K4po0j1KEDI4_XLf2Y"},
{"content":{"body":"perhaps a safe-ish way to look at this is to cancel those steps when the about:blank page is about to be unloaded","m.mentions":{},"msgtype":"m.text"},"ts":1712761164534,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$-M-ZmuojCxiCPpBMH_z6_I4Zg1KMLOAUaUHC_jcXfkc"},
{"content":{"body":"though maybe that's too late for the replace case","m.mentions":{},"msgtype":"m.text"},"ts":1712761192657,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$vM_N7MvSg1BxHZSUWDdHNKfl9lo55KSfK1jUCt4vIF0"},
{"content":{"body":"Noam Rosenthal: the spec change only cancels lazy-load in \"navigate\", which should match Chromium. I think it's a sufficient fix.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: the spec change only cancels lazy-load in \"navigate\", which should match Chromium. I think it's a sufficient fix.","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712761351583,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$dxhw4HgwgYXCEuH3HDVkzsSUgQrvoqScv9ptqO3Jzvg"},
{"content":{"body":"zcorpan: This particular `navigate` in the PR is also for e.g. fragment navigations","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: This particular <code>navigate</code> in the PR is also for e.g. fragment navigations","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712761395278,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$QtB-Ky-MMm-3E0D1stITfaZVIAOTegiFmCa5XJgzxeI"},
{"content":{"body":"Noam Rosenthal: yeah","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: yeah","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712761442740,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$4c76lx1UXsPX-yQnYlmh15d3jSYYoP5T4upXCXmeVpQ"},
{"content":{"body":"My test for fragment navigation seems flaky in chromium, so maybe it doesn't exactly match","m.mentions":{},"msgtype":"m.text"},"ts":1712761556287,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$rMx0zDr-qZ72v_LlvkVFyO-uQiAXYx25UvW2WzLNLps"},
{"content":{"body":"zcorpan: looking at the code for this in chromium I'm pretty sure we cancel lazy loading on *any* cross-doc navigation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: looking at the code for this in chromium I'm pretty sure we cancel lazy loading on <em>any</em> cross-doc navigation","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712761641438,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$l4xDEYrAZIzZW0mtf1vlPJUg02HDmjbDzpNtT0ME8G8"},
{"content":{"body":"yea I guess you'd want to do this whenever you abort a regular navigation","m.mentions":{},"msgtype":"m.text"},"ts":1712762146627,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Y5bC-fREUeApT66KkHKPNzpWgXF7jRWLIGaMOu6eraI"},
{"content":{"body":"Noam Rosenthal: PR for my tests at https://github.com/web-platform-tests/wpt/pull/45650","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: PR for my tests at https://github.com/web-platform-tests/wpt/pull/45650","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712762289936,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$FCNUw3bBi4tOEeX-2ckKWqa17t35bPUW2WhdezJNPQQ"},
{"content":{"body":"zcorpan: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with `lazy` and without a `src`, you navigate it with a link, and the new document is ready to commit before the lazy steps are run","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with <code>lazy</code> and without a <code>src</code>, you navigate it with a link, and the new document is ready to commit before the lazy steps are run","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1712762548899,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$QNXPPDuBtrerwccMPiZqHWfXfVg5Ea_oIbQO-_rVsC8"},
{"content":{"body":"I think what chromium does here would differ from your spec PR (not saying here what the \"right\" solution is)","m.mentions":{},"msgtype":"m.text"},"ts":1712762584839,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$CG3z1t9XVbtd8jdg-fOyK_m7t6y4ra36Uql_PKxuBtk"},
{"content":{"body":" * zcorpan: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with `lazy` and without a `src`, you navigate it with a link, then set a src, and the new document is ready to commit before the lazy steps are run","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with <code>lazy</code> and without a <code>src</code>, you navigate it with a link, then set a src, and the new document is ready to commit before the lazy steps are run","m.mentions":{},"m.new_content":{"body":"zcorpan: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with `lazy` and without a `src`, you navigate it with a link, then set a src, and the new document is ready to commit before the lazy steps are run","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: would be interesting to test also what happens when the iframe receives lazy steps after a navigation is started but before it's committed. e.g. you have an about:blank with <code>lazy</code> and without a <code>src</code>, you navigate it with a link, then set a src, and the new document is ready to commit before the lazy steps are run","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QNXPPDuBtrerwccMPiZqHWfXfVg5Ea_oIbQO-_rVsC8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712762610761,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$rASmkysuiU4WksCm1gr8F6gWBi5oJZO1Z1DeiLrjRGg"},
{"content":{"body":"Noam Rosenthal: hmm ok, can you comment that in the PR? I can add such a test tomorrow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: hmm ok, can you comment that in the PR? I can add such a test tomorrow","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712762703317,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$C3_plig0bHnvZO5XVoircQlThk_0UhXi1hqfjH4-uWU"},
{"content":{"body":"Does anyone have background on why `slot.assign(...nodes)` only works with nodes that are direct children of the host?","format":"org.matrix.custom.html","formatted_body":"Does anyone have background on why <code>slot.assign(...nodes)</code> only works with nodes that are direct children of the host?","m.mentions":{},"msgtype":"m.text"},"ts":1712765160820,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$jI375vmcOcQ-PpEBYdaataAnople1GzshT0A6-nDpcI"},
{"content":{"body":"Jake Archibald: sounds like https://github.com/WICG/webcomponents/issues/574, lots of discussion there","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: sounds like https://github.com/WICG/webcomponents/issues/574, lots of discussion there","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1712767540147,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Hv40vihzGV_MFr3O0HcgULoOmjLO4lz2-DYgXivN1XQ"},
{"content":{"body":"Noam Rosenthal: yeah, that's it, thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: yeah, that's it, thanks","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1712768301428,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$c3j8WGhYeSaBWQ4xCY7c3Lr5YT07tH8fKP12wtI_icU"},
{"content":{"body":"ugh","m.mentions":{},"msgtype":"m.text"},"ts":1712768302447,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$s33kpRTenBrNrTnNv7kAHHWYpb2KVrbVj8OWTicLd1M"},
{"content":{"body":"That's a shame","m.mentions":{},"msgtype":"m.text"},"ts":1712768316777,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$vVpRm7oakjjLVPi6J5mpoNG-hfTlvwVzcFI7WdiW7_8"},
{"content":{"body":"yea I would probably use the same utterance","m.mentions":{},"msgtype":"m.text"},"ts":1712768340364,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_dZYoG6UveGzkVj-C_AweXAwVRz5KxXuhK9JCkPwUAM"},
{"content":{"body":"there are good/complex points there, hopefully we can revisit this in the future","m.mentions":{},"msgtype":"m.text"},"ts":1712768481332,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$OFmHlI3PoZJmqxXt9ZN6HSo4EH2RuRlV4wDorbyro50"},
{"content":{"body":"I don't think that's it. We had the discussion again for the imperative API (which that issue is not about) and I recall we were open to revisiting that at some point.","m.mentions":{},"msgtype":"m.text"},"ts":1712768485720,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$wE4mUkcpCebjpQgi7uqGEE_elqZbK61o8R28qO_VZWs"},
{"content":{"body":"there's some openness about revisiting it in the future also in the #574 discussion","m.mentions":{},"msgtype":"m.text"},"ts":1712768601800,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$bDvYRlqE7_mpAoHJRM2tH6gM5kxdr5P-BWnlYtdn0Xg"},
{"content":{"body":"It was initially a goal of the imperative API to allow that. I kinda forgot why it ended up with the same restriction.","m.mentions":{},"msgtype":"m.text"},"ts":1712768816051,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$zwI-BNvmHK4WTJurhvhJoJXzPpZamdWsOHiHEzkIQ_Q"},
{"content":{"body":"https://github.com/whatwg/html/issues/3534#issuecomment-371392184 is the more relevant discussion I think.","m.mentions":{},"msgtype":"m.text"},"ts":1712768997930,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$G5gzy6tcPmjkDFulQBQrt8qltTExbJAOO3cEHd7bPgw"},
{"content":{"body":"> Still unclear why the proposal does not state that though or why assign() succeeds despite failing.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Still unclear why the proposal does not state that though or why assign() succeeds despite failing.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712769051918,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$br76VZdOF4ZysvI_NI7AooHbNz6uK9tkLK3Q0CWpcpw"},
{"content":{"body":"Yeah, that was a real gotcha for me","m.mentions":{},"msgtype":"m.text"},"ts":1712769056643,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$sCw7M_ZhDjZnm-TLhEhAQFJ_Ol8vbGVbTdPtbVzC3tE"},
{"content":{"body":"not even a warning","m.mentions":{},"msgtype":"m.text"},"ts":1712769059967,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$2YXR-8QZj2iH2oxT2Ci0fySyjmnyuNXXVNWqsSsqMNw"},
{"content":{"body":"oh well. I hope it gets revisited at some point","m.mentions":{},"msgtype":"m.text"},"ts":1712769193393,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$X6WPFKTJGjh3xl9xC3oT44Awk5GDQCuuL3DGOj_27Qo"},
{"content":{"body":"It seems like Google and Mozilla blocked it.","m.mentions":{},"msgtype":"m.text"},"ts":1712769278963,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8BIx8r1AlNCD0tp5UbGzxmhZQnPCRpCiCEYbIgi1sY8"},
{"content":{"body":"Suppose I have a spec variable that is \"initially null\", and I set it to an {{any}} return value of [=invoking=] a JS callback.","m.mentions":{},"msgtype":"m.text"},"ts":1712786442951,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$LwPbIppdodOfvv5FX20u8uVoERkErA5-nUf7Crht9mo"},
{"content":{"body":"If that callback returns \"null\" in JS, is my spec variable still \"null\" (i.e., indicating that it was never set), or is it some special \"Web IDL {{null}}\" value or something?","m.mentions":{},"msgtype":"m.text"},"ts":1712786481101,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$G14Cg4VAtaFjWnPzt7Tq6Q6ycV1f9oYtNLOTdc7EGao"},
{"content":{"body":"(I know {{null}} does not exist in WebIDL, but I'm trying to understand if spec prose \"null\" is the same as null that goes through WebIDL)","m.mentions":{},"msgtype":"m.text"},"ts":1712786505644,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$CdmuqL3Ubi8_xU5z-v1NSVCA0b7kyrr9P8Zs9OcpFG8"},
{"content":{"body":"I think folks reading that will assume the two \"null\"s are the same, so you should write the spec so that assumption doesn't cause problems.","m.mentions":{},"msgtype":"m.text"},"ts":1712786917093,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$50pbVCeEdrnvu0ETPjBy94QOUWdNvTE7peRGPHuhLjk"},
{"content":{"body":"Infra's definition of null treats it as interchangeable with the JS `null` value, but WebIDL's `any` conversion converts JS `null` to the null nullable `object`, which is not explicitly said to be the same as Infra's null.","format":"org.matrix.custom.html","formatted_body":"Infra's definition of null treats it as interchangeable with the JS <code>null</code> value, but WebIDL's <code>any</code> conversion converts JS <code>null</code> to the null nullable <code>object</code>, which is not explicitly said to be the same as Infra's null.","m.mentions":{},"msgtype":"m.text"},"ts":1712787070334,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$TYbTdvxVnJ9iT4YdzuNw7TVpADpIQQPzvXNlar4l2-c"},
{"content":{"body":" * Infra's definition of null treats it as interchangeable with the JS `null` value, but WebIDL's `any` conversion converts JS `null` to the null `object?`, which is not explicitly said to be the same as Infra's null.","format":"org.matrix.custom.html","formatted_body":" * Infra's definition of null treats it as interchangeable with the JS <code>null</code> value, but WebIDL's <code>any</code> conversion converts JS <code>null</code> to the null <code>object?</code>, which is not explicitly said to be the same as Infra's null.","m.mentions":{},"m.new_content":{"body":"Infra's definition of null treats it as interchangeable with the JS `null` value, but WebIDL's `any` conversion converts JS `null` to the null `object?`, which is not explicitly said to be the same as Infra's null.","format":"org.matrix.custom.html","formatted_body":"Infra's definition of null treats it as interchangeable with the JS <code>null</code> value, but WebIDL's <code>any</code> conversion converts JS <code>null</code> to the null <code>object?</code>, which is not explicitly said to be the same as Infra's null.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TYbTdvxVnJ9iT4YdzuNw7TVpADpIQQPzvXNlar4l2-c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712787081512,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ujyF8Mnwdi8yjXtG2oxleya6cv3of3QtG1JIBgFzkS8"},
{"content":{"body":"WebIDL 'any' is a weird beast, in that \"one value of the any type is the unsigned long 150, while another is the long 150. These are distinct values.\" Specs often implicitly convert all those contained values into a common spec type, but that's not really justified by WebIDL.","m.mentions":{},"msgtype":"m.text"},"ts":1712787252045,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$Hy56HX3A2Gs9hKnWK0rqJvoQLltq80xXOhOKMzTQg0U"},
{"content":{"body":"I do think the `null` `object?` value is the same as the Infra null: https://webidl.spec.whatwg.org/#idl-object talks about `object?` adding \"the null value\" to the type, and it's no more distinguished from Infra than \"true\" and \"false\" are in https://webidl.spec.whatwg.org/#idl-boolean.","format":"org.matrix.custom.html","formatted_body":"I do think the <code>null</code> <code>object?</code> value is the same as the Infra null: https://webidl.spec.whatwg.org/#idl-object talks about <code>object?</code> adding \"the null value\" to the type, and it's no more distinguished from Infra than \"true\" and \"false\" are in https://webidl.spec.whatwg.org/#idl-boolean.","m.mentions":{},"msgtype":"m.text"},"ts":1712787442919,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$R4AUalqJJfsojBUpshlEPpZL48ePh3pNGD0sXoAjoXc"}
]