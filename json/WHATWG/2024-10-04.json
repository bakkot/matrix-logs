[
{"content":{"body":"We'd like to move away from sniffing, and have tried to require new formats to not be sniffed, but implementations have not agreed. I believe their objections have been non-technical (\"why should my format be slightly harder to adopt than all the old formats?\") but maybe there are technical reasons too.","m.mentions":{},"msgtype":"m.text"},"ts":1728005916231,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$w9F-fD21exVzitfuKWqeS5HCwzy6DM_wL-gVDU3vJ8c"},
{"content":{"body":"For SVG implementations already check the MIME type I believe so introducing another such MIME type seems good.","m.mentions":{},"msgtype":"m.text"},"ts":1728026460204,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_dBAX-WgxqJk49i4kZuQh5vKIDyW9oKoMAXB2gmhaIQ"},
{"content":{"body":"keithamus: could you give feedback somewhere that I'd love to enable the two-factor authentication requirement for WHATWG if only it gave the option to give everyone impacted a two weeks heads up? It seems like the current checkbox will just kick everyone out which at this point might well be acceptable given the limited number of people impacted, but it still seems preferable to give everyone a bit of wiggle room. (This lack of clarity around how the requirement is communicated has already delayed our adoption by two years or so.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keithamus:matrix.org\">keithamus</a>: could you give feedback somewhere that I'd love to enable the two-factor authentication requirement for WHATWG if only it gave the option to give everyone impacted a two weeks heads up? It seems like the current checkbox will just kick everyone out which at this point might well be acceptable given the limited number of people impacted, but it still seems preferable to give everyone a bit of wiggle room. (This lack of clarity around how the requirement is communicated has already delayed our adoption by two years or so.)","m.mentions":{"user_ids":["@keithamus:matrix.org"]},"msgtype":"m.text"},"ts":1728028075780,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$5VpOV1_hPrzSUXWYlxBRK9vwXsu4GFAw-qDJ7JEPrfM"},
{"content":{"body":"Thanks, I'll pass it on to the team responsible for 2fa enforcement","m.mentions":{},"msgtype":"m.text"},"ts":1728030514698,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$rQf2g2aKaIr7Cq4On9uQNP6hnaCMb4sja2wave39HRg"},
{"content":{"body":"Adam Rice: I revived and cleaned up https://github.com/whatwg/encoding/pull/309 as it still seems worth doing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ricea:matrix.org\">Adam Rice</a>: I revived and cleaned up https://github.com/whatwg/encoding/pull/309 as it still seems worth doing","m.mentions":{"user_ids":["@ricea:matrix.org"]},"msgtype":"m.text"},"ts":1728034477299,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$CHfXFHw8-wUUaaKAxcJ6YunIkX5de5X6D9Zo6mj8I4A"},
{"content":{"body":"Yagiz N: what does https://x.com/yagiznizipli/status/1841855393481302338 mean?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yagiznizipli:matrix.org\">Yagiz N</a>: what does https://x.com/yagiznizipli/status/1841855393481302338 mean?","m.mentions":{"user_ids":["@yagiznizipli:matrix.org"]},"msgtype":"m.text"},"ts":1728034807354,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$BTX378vwBscBm-k41caFBoaYIwmtRECa_1D384c44pA"},
{"content":{"body":"Hey folks! Question about URLs.\nIf I'm [parsing](https://url.spec.whatwg.org/#concept-url-parser) \"https://example.com/foo//bar\", I wouldn't expect it to be identical to a parsed \"https://example.com/foo/bar\", right?","format":"org.matrix.custom.html","formatted_body":"Hey folks! Question about URLs.<br>If I'm <a href=\"https://url.spec.whatwg.org/#concept-url-parser\">parsing</a> \"https://example.com/foo//bar\", I wouldn't expect it to be identical to a parsed \"https://example.com/foo/bar\", right?","m.mentions":{},"msgtype":"m.text"},"ts":1728040696636,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$qWu9FA2bE4e9Xssp1LScpl9fGmt330akLCwTOq3ZZUM"},
{"content":{"body":"I don't know what you'd expect, but https://www.ada-url.com/playground?url=https%3A%2F%2Fexample.com%2Ffoo%2F%2Fbar says they are different.","m.mentions":{},"msgtype":"m.text"},"ts":1728040817632,"senderName":"Adam Rice","senderId":"@ricea:matrix.org","id":"$F6oeWZOdfb6bbR93s1MyRUwmi6AQOBz_VAKPHXsVz-g"},
{"content":{"body":"yeah, that's what I figured","m.mentions":{},"msgtype":"m.text"},"ts":1728040870018,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$pGRmX8DcQay49MWUUiO3rR9U2qiJjlrEzZSW_oFjHHs"},
{"content":{"body":"for some reason I thought the URL parser would remove spurious '/' in the path, but I was wrong","m.mentions":{},"msgtype":"m.text"},"ts":1728040904486,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$1mFoPXyVvwqQNtrM2e1W5oQK74SLL5x9jRi2DI-unSg"},
{"content":{"body":"yeah, the spurious slashes even go out on the network","m.mentions":{},"msgtype":"m.text"},"ts":1728041014251,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$zxnsG3xaNCN4aNET-bUWvp6zXdSGE02mP727X7ZAhp0"},
{"content":{"body":"I guess it's on the server to dedup them","m.mentions":{},"msgtype":"m.text"},"ts":1728041024347,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$sHLB3RXx9bYViVNVHTO1f2sfCPYqbSE8fWp4nBgfJ24"},
{"content":{"body":"Yoav Weiss: we only ignore infinite slashes after special URL schemes (and a colon), to much chagrin of the curl maintainer","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>: we only ignore infinite slashes after special URL schemes (and a colon), to much chagrin of the curl maintainer","m.mentions":{"user_ids":["@yoavweiss:matrix.org"]},"msgtype":"m.text"},"ts":1728042630992,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$14QyGhDXIWyT40NHVvlwFZlRClCpVAIrSeemib_tcBg"},
{"content":{"body":"Hey group,\n\nHas there at any time been examples of a feature released in browsers where the decision on behaviour has been revisited and revised?\n\nI'm wondering the process behind how that works?\nThis is all related to the `<design>` element and the `ontoggle` event paired with `open` attribute and how it automatically fires.\n\nIn this [GitHub issue](https://github.com/whatwg/html/issues/4500) there was some discussion around if people would misunderstand how it's used, and if it should be changed.\n\nThis all stemmed from my current place of employment recognizing a bug in our code, that fortunately wasn't too bad, but nonetheless a bug due to our misunderstanding of the behaviour.  We went ahead and decided to use React to build a layer on top to change the behaviour, replaced current implementations, and forbid all future usages of `<details>` (via ESLint).\n\nSo far every person I've explained this current behaviour to gave me the same response in that it behaves differently than they would expect.\nI think a part of me worries that leaving it as is means an eternity of devs bug fixing, simply because something behaves differently than most would expect.\n\nSo to close this out, I think helping me understand the process, previous examples, and other statistics you would use to make a decision, would help me understand if it's worth to continue to pursue this or not.  \n\nI'm hoping I'm not coming off as a nuisance.  It's not my intention, I'm focused on respecting developers' time and reducing the likelihood of future bugs.","format":"org.matrix.custom.html","formatted_body":"<p>Hey group,</p>\n<p>Has there at any time been examples of a feature released in browsers where the decision on behaviour has been revisited and revised?</p>\n<p>I'm wondering the process behind how that works?<br>This is all related to the <code>&lt;design&gt;</code> element and the <code>ontoggle</code> event paired with <code>open</code> attribute and how it automatically fires.</p>\n<p>In this <a href=\"https://github.com/whatwg/html/issues/4500\">GitHub issue</a> there was some discussion around if people would misunderstand how it's used, and if it should be changed.</p>\n<p>This all stemmed from my current place of employment recognizing a bug in our code, that fortunately wasn't too bad, but nonetheless a bug due to our misunderstanding of the behaviour.  We went ahead and decided to use React to build a layer on top to change the behaviour, replaced current implementations, and forbid all future usages of <code>&lt;details&gt;</code> (via ESLint).</p>\n<p>So far every person I've explained this current behaviour to gave me the same response in that it behaves differently than they would expect.<br>I think a part of me worries that leaving it as is means an eternity of devs bug fixing, simply because something behaves differently than most would expect.</p>\n<p>So to close this out, I think helping me understand the process, previous examples, and other statistics you would use to make a decision, would help me understand if it's worth to continue to pursue this or not.</p>\n<p>I'm hoping I'm not coming off as a nuisance.  It's not my intention, I'm focused on respecting developers' time and reducing the likelihood of future bugs.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728050744765,"senderName":"mikedidomizio","senderId":"@mikedidomizio:matrix.org","id":"$0sbwPEwfP2T0yUTr1I6L-YWdJJn5yy8BMW2fUfx7Qs0"}
]