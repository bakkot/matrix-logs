[
{"content":{"body":"akaster: I make no claims that the current wasm spec is optimal or agrees with browsers in all edge cases on this point :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akaster:serenityos.org\">akaster</a>: I make no claims that the current wasm spec is optimal or agrees with browsers in all edge cases on this point :)","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"msgtype":"m.text"},"ts":1729762237473,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$h-JcVYo3bsbMn-8f9cQZK5xpcpjaRFUdUogCUg-Mlfg"},
{"content":{"body":"https://infra.spec.whatwg.org/#algorithm-limits would arguably cover this; I'd _hope_ this isn't a problem with major browsers given you can with modern APIs on Windows not be concerned about that.","format":"org.matrix.custom.html","formatted_body":"https://infra.spec.whatwg.org/#algorithm-limits would arguably cover this; I'd <em>hope</em> this isn't a problem with major browsers given you can with modern APIs on Windows not be concerned about that.","m.mentions":{},"m.relates_to":{"event_id":"$_N4QzDB-i8zkpBVfN2YW2t3cNc4Ys_HKKf_wDbz73Hc","is_falling_back":true,"m.in_reply_to":{"event_id":"$_N4QzDB-i8zkpBVfN2YW2t3cNc4Ys_HKKf_wDbz73Hc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1729791940675,"senderName":"Sam Sneddon [:gsnedders]","senderId":"@gsnedders:mozilla.org","id":"$_V5ReBaPGrOiZD_Yj9J3-PULdHQGlWhwojF6PhP7cPQ"},
{"content":{"body":"Domenic: When implementing HostPromiseRejectionTracker, https://html.spec.whatwg.org/multipage/webappapis.html#the-hostpromiserejectiontracker-implementation, are we expecting that the `promise` object is the actual JS Promise object? or should it be converted to a WebIDL Promise<T> before doing anything with it in the algorithm per the conversion steps in https://webidl.spec.whatwg.org/#js-promise ? I'm not sure if it is observable whether we e.g. fire a PromiseRejectionEvent with \"a PromiseCapability resolved with promise\" vs the JS Promise object itself","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: When implementing HostPromiseRejectionTracker, https://html.spec.whatwg.org/multipage/webappapis.html#the-hostpromiserejectiontracker-implementation, are we expecting that the <code>promise</code> object is the actual JS Promise object? or should it be converted to a WebIDL Promise&lt;T&gt; before doing anything with it in the algorithm per the conversion steps in https://webidl.spec.whatwg.org/#js-promise ? I'm not sure if it is observable whether we e.g. fire a PromiseRejectionEvent with \"a PromiseCapability resolved with promise\" vs the JS Promise object itself","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1729795929686,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$pmEc8XGC9NqcFbSPMdsKwBplnNIL5oQYi3w6rJWdhXE"},
{"content":{"body":"hm. rephrased this question in <https://github.com/whatwg/html/issues/10721>","format":"org.matrix.custom.html","formatted_body":"hm. rephrased this question in <a href=\"https://github.com/whatwg/html/issues/10721\">https://github.com/whatwg/html/issues/10721</a>","m.mentions":{},"msgtype":"m.text"},"ts":1729797792327,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$vJcZqw7SjTbc9-Xoo2IlfWZF2atNHOBNB1YRfRP5KPM"},
{"content":{"body":"heh. `let e = new PromiseRejectionEvent('eventName', { promise: 42 });` only throws in Firefox. seems everyone else allows synthetic PromiseRejectionEvents to have a `promise` property of any type","format":"org.matrix.custom.html","formatted_body":"heh. <code>let e = new PromiseRejectionEvent('eventName', { promise: 42 });</code> only throws in Firefox. seems everyone else allows synthetic PromiseRejectionEvents to have a <code>promise</code> property of any type","m.mentions":{},"msgtype":"m.text"},"ts":1729804654140,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$BbwJzI2wvweSassWSvRokPPFYnRDcrw-6idL5HafRvo"},
{"content":{"body":"WebKit has `required Promise<any> promise;` there, which seems kinda what you'd expect?","format":"org.matrix.custom.html","formatted_body":"WebKit has <code>required Promise&lt;any&gt; promise;</code> there, which seems kinda what you'd expect?","m.mentions":{},"msgtype":"m.text"},"ts":1729804964326,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$TSxkeGZAbd6jfidch-UszKd3fX8EMnwQ_TBmwTLFUOk"},
{"content":{"body":"I wonder if this got changed post implementation. It does seem a little wonky that the `promise` getter can return a non-promise.","format":"org.matrix.custom.html","formatted_body":"I wonder if this got changed post implementation. It does seem a little wonky that the <code>promise</code> getter can return a non-promise.","m.mentions":{},"msgtype":"m.text"},"ts":1729805053512,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$bC3ECV6A9mVFQFUwNh7-mUiFIPXdVan0sS7jLpCiND0"},
{"content":{"body":"ðŸ¤·I'm adding logic to our IDL generator to convert any Promise<T> properties of IDL interfaces into PromiseCapabiltiies before sending them along to our web engine","m.mentions":{},"msgtype":"m.text"},"ts":1729806870114,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$EktUS_CW2m5Pl9aMUT-4DY05OTOa8y0_h3jonT4Z8Fo"},
{"content":{"body":"so in that case, doing so for PromiseRejectionEvent is likely incorrect (pending that issue I posted). So  it seems like copying firefox and pretending that it's supposed to be `required object promise` is easiest to keep moving fwd with the change","format":"org.matrix.custom.html","formatted_body":"so in that case, doing so for PromiseRejectionEvent is likely incorrect (pending that issue I posted). So  it seems like copying firefox and pretending that it's supposed to be <code>required object promise</code> is easiest to keep moving fwd with the change","m.mentions":{},"msgtype":"m.text"},"ts":1729806909688,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$QWh4DnvX4iMWBq6_3Gjr08kobsWFj06Q8J5OUY_knu4"},
{"content":{"body":"I would do whatever is easiest as it's just synthetic events that are impacted here and they're a rather niche use case.","m.mentions":{},"msgtype":"m.text"},"ts":1729807834043,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ExRD8c5rquH2wO4Fnbf1aeEn55GzF7jFRhbdl2W_EhQ"},
{"content":{"body":"Though we should also figure out what this should do longer term. :-) Maybe object is reasonable though, just seems odd.","m.mentions":{},"msgtype":"m.text"},"ts":1729807866434,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$4_CzRTRsi0oF5oYQGEHVpG5GD5gKZEbLlUUXhFNt18E"}
]