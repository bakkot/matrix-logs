[
{"content":{"body":"oki thanks!","msgtype":"m.text"},"ts":1625625001992,"senderName":"sujaldev","senderId":"@sujaldev:matrix.org","id":"$7T9g2AC5L_N4kBTWkoARVJB49FDtpKXGnO9P2jTGAnk"},
{"content":{"body":"wonderful, https://drafts.csswg.org/ completely broken again for the Nth time","msgtype":"m.text"},"ts":1625626101534,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$myw13rTkhM3CgamFKvtgOSuMXvTAeDWZLxZbQjAhdzM"},
{"content":{"body":"after this having happened so frequently, it’s baffling that there’s not a watchdog or something set up","msgtype":"m.text"},"ts":1625626231658,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Kv4FU9i6pqzKP5SR1yqNhQStVs-EpN195nJ9yRHXHfI"},
{"content":{"body":"goes off to raise an https://github.com/w3c/csswg-drafts issue about it for at least the 3rd time","msgtype":"m.emote"},"ts":1625626267966,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$OWxPHwZEvbIWwFY0ejp1w1AZHAQInqcPnnVon4Wp5hA"},
{"content":{"body":"I have asked this before, I think. Is there some documentation for a good workflow for making spec changes? Including the usual github pr creation but also what checks people do to find if there are relevant WPTs etc.","msgtype":"m.text"},"ts":1625661045316,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$gaSYFYq3VevTcXm5Lf1dJra0Xa3kKjkJGAFeNL9179A"},
{"content":{"body":"Admittedly, you are probably not exactly the intended audience but this might help https://wpc.guide/bug-guide/ ","msgtype":"m.text"},"ts":1625667531496,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$h2wLMGC_9ER3H7sgbJ9u7XQh0YpSffrQraBExhudymU"},
{"content":{"body":"but TBH, I often just look at similar patches and the follow-up bugs (e.g., for WPT) they led to","msgtype":"m.text"},"ts":1625667560967,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$Oq5gsGROGESPoXCCGJyHv4F4U6fm_8njnTpa6TRUSsE"},
{"content":{"body":"annevk: domenic suggested you might have an opinion on https://github.com/bakkot/proposal-arraybuffer-base64/issues/5. the question under consideration (as I see it; he is welcome to correct) is, must any new base64-decoding API in the web platform decline to validate the padding bytes by default (and hence match the behavior of `atob`), or can it be stricter by default in pursuit of making it harder to accidentally fall into security issues arising from the (I think fairly natural) assumption that base64 encoding is one-to-one?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: domenic suggested you might have an opinion on https://github.com/bakkot/proposal-arraybuffer-base64/issues/5. the question under consideration (as I see it; he is welcome to correct) is, must any new base64-decoding API in the web platform decline to validate the padding bytes by default (and hence match the behavior of <code>atob</code>), or can it be stricter by default in pursuit of making it harder to accidentally fall into security issues arising from the (I think fairly natural) assumption that base64 encoding is one-to-one?","msgtype":"m.text"},"ts":1625676550242,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EAafbZb-li6qmxgY5wAWoE1q8LQG33SeSM_z1KPUE9M"},
{"content":{"body":"also interested in opinions from others","msgtype":"m.text"},"ts":1625676566961,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$58WewtTeo-Nb2bRBGnT12Odhn0dWazYbt-Z45396UNM"},
{"content":{"body":"Domenic seems to feel strongly that it is more important to match `atob`, I feel fairly strongly that it is more important to make the less-secure behavior opt-in, so I am hoping we can get other opinions on the matter","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> seems to feel strongly that it is more important to match <code>atob</code>, I feel fairly strongly that it is more important to make the less-secure behavior opt-in, so I am hoping we can get other opinions on the matter","msgtype":"m.text"},"ts":1625676638867,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3iPM1ns8PnG7BDGwUenx_lAqdajrZ87vQIVv7nArrH0"},
{"content":{"body":"Matching data: URLs and other base64 encoding behaviors in the platform (e.g. SRI digests) is more important than atob","msgtype":"m.text"},"ts":1625676931995,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8fdMXWk5tDoBl5Z4LLg8A_92-ixIHIAyhsgSRDoMj4g"},
{"content":{"body":"I agree","msgtype":"m.text"},"ts":1625677290064,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$l5YOGr17aD3K5o2XJN67lFccYphPnM4SCYjijjoz3xg"},
{"content":{"body":"I understand that position even less; how many people are ever manually decoding a data: url or an SRI digest?","msgtype":"m.text"},"ts":1625677400300,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bGSm40X3oj4Hn72E8kej9Tk5-1ugzC2BFTDuO1Oy2kY"},
{"content":{"body":"(CSP, incidentally, requires padding, so the web platform is not uniform here)","msgtype":"m.text"},"ts":1625677455944,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2hFAL2lrsbOwhV00l9jXp5a9R0H22Nuxsjjw8AeG-es"},
{"content":{"body":"actually SRI does too, as far as I can tell from the spec","msgtype":"m.text"},"ts":1625677542564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lfg-VoxP5Jh2KO_wRib68rhF0WK04VDxNAvyEULhnB8"},
{"content":{"body":"Yeah the spec doesn't seem to match browsers there","msgtype":"m.text"},"ts":1625677619207,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$_cJaodMvrf24WRuKPHeiW51iMUNvxZF-JBRWOfKVYq4"},
{"content":{"body":"I can't find base64 decoding in the CSP/SRI specs, only the implementations","msgtype":"m.text"},"ts":1625677691105,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$2HG9BVasiuYE5Ag5yGjgQlxksm4JZh0eT5uiNrSAA5s"},
{"content":{"body":"that's because they don't aren't specified in terms of decoding; they compare by string equality, and assume that base64 encoding is 1-to-1, since everyone makes this assumption.","msgtype":"m.text"},"ts":1625677793468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XcIqt1Pn6ekwnhcWk9qaKvHPWsC2Op5XNY6vmKs9gUM"},
{"content":{"body":" * that's because they aren't specified in terms of decoding; they compare by string equality, and assume that base64 encoding is 1-to-1, since everyone makes this assumption.","m.new_content":{"body":"that's because they aren't specified in terms of decoding; they compare by string equality, and assume that base64 encoding is 1-to-1, since everyone makes this assumption.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XcIqt1Pn6ekwnhcWk9qaKvHPWsC2Op5XNY6vmKs9gUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1625677798979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$enGbPDwuWjaPJgdHgKFWzPl4_FGWGc4O9UwyZsExbiA"},
{"content":{"body":" * that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 encoding is 1-to-1, since everyone makes this assumption.","m.new_content":{"body":"that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 encoding is 1-to-1, since everyone makes this assumption.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XcIqt1Pn6ekwnhcWk9qaKvHPWsC2Op5XNY6vmKs9gUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1625677810192,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IEi0Di1C3XJr783O5_DOUimBDSJ67gWZo5aFZdVnHec"},
{"content":{"body":"> <@domenicdenicola:matrix.org> Yeah the spec doesn't seem to match browsers there\n\nBrowsers disagree; Firefox follows the spec, Chrome does not","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_cJaodMvrf24WRuKPHeiW51iMUNvxZF-JBRWOfKVYq4?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>Yeah the spec doesn&#39;t seem to match browsers there</blockquote></mx-reply>Browsers disagree; Firefox follows the spec, Chrome does not","m.relates_to":{"m.in_reply_to":{"event_id":"$_cJaodMvrf24WRuKPHeiW51iMUNvxZF-JBRWOfKVYq4"}},"msgtype":"m.text"},"ts":1625678248705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XT6-Z9mKpKHQyse_x2h478wqZRfRedkpIzSdgmUB8KU"},
{"content":{"body":" * that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.","m.new_content":{"body":"that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XcIqt1Pn6ekwnhcWk9qaKvHPWsC2Op5XNY6vmKs9gUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1625678568863,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aiwNLw0m96R8lp0rA1Z_FUKGvBBRioq5NnZv-LiF3F4"},
{"content":{"body":"> that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.\n\ni find this footgun argument to be pretty persuasive. fwiw i feel more radicalized than before from reading those tweets, and feel like if anything we should try to change the web default","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.</p>\n</blockquote>\n<p>i find this footgun argument to be pretty persuasive. fwiw i feel more radicalized than before from reading those tweets, and feel like if anything we should try to change the web default</p>\n","msgtype":"m.text"},"ts":1625679580062,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2ikAa6TrCPvJqaqXhAWCeoYiDxJHiPWhrxDKArNEZ4s"},
{"content":{"body":"Domenic: r? https://github.com/whatwg/whatwg.org/pull/371","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: r? https://github.com/whatwg/whatwg.org/pull/371","msgtype":"m.text"},"ts":1625680371999,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$yVPqLX4uBrm2Kjsvcpf05EoGm5PPHcDJPDgdxNrzZMo"},
{"content":{"body":"Domenic: also https://github.com/whatwg/html-build/pull/265","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: also https://github.com/whatwg/html-build/pull/265","msgtype":"m.text"},"ts":1625680706784,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$64LBKL7owwakdk3xkmUCm6uF-thj20eQxEv9XHlqjAk"},
{"content":{"body":"> <@shuyuguo:matrix.org> > that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.\n> \n> i find this footgun argument to be pretty persuasive. fwiw i feel more radicalized than before from reading those tweets, and feel like if anything we should try to change the web default\n\nI just don't think these people are JS practictioners. They are crypto people (?) who maybe use base64 for crypto purposes. We should not expose base64 at all if our audience is people hand-rolling crypto.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$2ikAa6TrCPvJqaqXhAWCeoYiDxJHiPWhrxDKArNEZ4s?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><blockquote>\n<p>that's because they aren't specified in terms of decoding; they compare base64-encoded strings by string equality, and assume that base64 decoding is 1-to-1, since everyone makes this assumption.</p>\n</blockquote>\n<p>i find this footgun argument to be pretty persuasive. fwiw i feel more radicalized than before from reading those tweets, and feel like if anything we should try to change the web default</p>\n</blockquote></mx-reply>I just don't think these people are JS practictioners. They are crypto people (?) who maybe use base64 for crypto purposes. We should not expose base64 at all if our audience is people hand-rolling crypto.","m.relates_to":{"m.in_reply_to":{"event_id":"$2ikAa6TrCPvJqaqXhAWCeoYiDxJHiPWhrxDKArNEZ4s"}},"msgtype":"m.text"},"ts":1625680838279,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$UooK-vI_5c1kn2tOO2ww5PoVhESa6v19J5XgtDyLt-A"},
{"content":{"body":"Note also that the tweets note that Go has the same default as JS","msgtype":"m.text"},"ts":1625680846369,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$_6vH5uvtmHKCtdZ_QwKwHYMiPFOgDWz1NlL4QB_NsSQ"},
{"content":{"body":"It feels really bad for TC39 to try to shift the web default by fiat","msgtype":"m.text"},"ts":1625680861901,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$P0B20sscelIyRW1NQ9axt_K7toFnAuAZlDvkK1JH7Ms"},
{"content":{"body":"the \"we shouldn't expose this at all\" is a separate argument, which i think i also disagree with, but we should table in this context","msgtype":"m.text"},"ts":1625680969671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jwLsUN58xoQPoDjJ9wgCKTj5dvyFGNfMFLW_I85gClU"},
{"content":{"body":"Well it's relevant because what is our goal in exposing this","msgtype":"m.text"},"ts":1625681018510,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$j1CsPEtK_DWezL-QrzF6N1eKm8BdT09EN4fwcOQjpaw"},
{"content":{"body":"Is it to allow people to decode base64 in a fashion they're used to from Node/Go/Deno/the web?","msgtype":"m.text"},"ts":1625681033892,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$4n5ohQK7pCYuXg75UPZN8aO_u2saCoAcZ1-sPXlU4A0"},
{"content":{"body":"Or is it to allow people to do secure crypto-adjacent stuff that assumes bijection?","msgtype":"m.text"},"ts":1625681048198,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$RvedFqwmF4c9ZZZOZz5x7tBO66X4ujQcMdPcFGxBE5k"},
{"content":{"body":"> <@domenicdenicola:matrix.org> It feels really bad for TC39 to try to shift the web default by fiat\n\ni have a hard time engaging with this as well -- there are technical reasons to prefer the stricter variant, which there is disagreement with. it similarly feels bad to accuse TC39 of some kind of power grab here","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$P0B20sscelIyRW1NQ9axt_K7toFnAuAZlDvkK1JH7Ms?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>It feels really bad for TC39 to try to shift the web default by fiat</blockquote></mx-reply>i have a hard time engaging with this as well -- there are technical reasons to prefer the stricter variant, which there is disagreement with. it similarly feels bad to accuse TC39 of some kind of power grab here","m.relates_to":{"m.in_reply_to":{"event_id":"$P0B20sscelIyRW1NQ9axt_K7toFnAuAZlDvkK1JH7Ms"}},"msgtype":"m.text"},"ts":1625681060170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gdcsm9rnqjzMZ2vhIFqUtcIt05jIVcrO5fz3nT1tP6U"},
{"content":{"body":"Filippo Valsorda is one of the people your employer pays to be hand-rolling crypto","msgtype":"m.text"},"ts":1625681060398,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YpxtZRHz9NmmSmVfrE7XVJO8sTCcfOTKDK0NVlAZ6GY"},
{"content":{"body":"> <@bakkot:matrix.org> Filippo Valsorda is one of the people your employer pays to be hand-rolling crypto\n\nYes, and I don't think he's the target audience for this API.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$YpxtZRHz9NmmSmVfrE7XVJO8sTCcfOTKDK0NVlAZ6GY?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Filippo Valsorda is one of the people your employer pays to be hand-rolling crypto</blockquote></mx-reply>Yes, and I don't think he's the target audience for this API.","m.relates_to":{"m.in_reply_to":{"event_id":"$YpxtZRHz9NmmSmVfrE7XVJO8sTCcfOTKDK0NVlAZ6GY"}},"msgtype":"m.text"},"ts":1625681079055,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0OL0ZNay70CWGNwiGzRbXzDfibrt73v9USYTgSphDpI"},
{"content":{"body":"I don't really think pointing at someone with a different opinion and saying \"you get your money from the same dude\" is really that insightful","msgtype":"m.text"},"ts":1625681097365,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$4z1tJKSI3IaThFHRsnXJXnP2Aa-AjCjKy4PpjIPjrqs"},
{"content":{"body":"yes let's... cool down on that front","msgtype":"m.text"},"ts":1625681127201,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uJW1DPJWvnv5UCwYT2tmKqnF6DR6RWsTJLHzH1LxEvg"},
{"content":{"body":"Just for clarity: this is about the strictness of base64 **decoding** right? We do all agree that base64 encoding should always include padding?","format":"org.matrix.custom.html","formatted_body":"Just for clarity: this is about the strictness of base64 <strong>decoding</strong> right? We do all agree that base64 encoding should always include padding?","msgtype":"m.text"},"ts":1625681451800,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Qs0lNJ1k61NlvSV-U_hHTBn0hWvUxYwyVjPxb-xpWRI"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1625681515395,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$4PUzCcWPB2uzunLoSEwY6oO_f3Ee-U6C85p5C7-hu5s"},
{"content":{"body":"i've tried to steer the conversation to something more pragmatic, but so long as we're talking about broad-scope arguments like \"we shouldn't diverge at all from existing standardized web APIs\" and \"the current default is not great\", i do find the latter more convincing because i'm not sure what group the former position helps in this particular case","msgtype":"m.text"},"ts":1625681526513,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fqRsis-qmDfyL9-CsZwUMxi1tuwsXJTEmrP_FwGZj28"},
{"content":{"body":"In this case, what are some arguments for being strict with padding by default? What use cases would this benefit?","msgtype":"m.text"},"ts":1625681573381,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$9svmdq4JoK0nITcqfuuIHJRz7Pw_gVZuK_jlPyHwmaE"},
{"content":{"body":"for the concrete AMP case, it seemed like the weird Java printer was, well, regarded as weird, and an attempt was made to fix it","msgtype":"m.text"},"ts":1625681582994,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z6cW20T5syE6uA6clyX9qAW1MyjjsEosvnTeUwbu3Mk"},
{"content":{"body":"> <@lucacasonato:matrix.org> In this case, what are some arguments for being strict with padding by default? What use cases would this benefit?\n\nthe use case that the (imo reasonable) assumption that base64 is a bijection holds, and that when it does not, it prompts the author to take a second look and figure out why","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$9svmdq4JoK0nITcqfuuIHJRz7Pw_gVZuK_jlPyHwmaE?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>In this case, what are some arguments for being strict with padding by default? What use cases would this benefit?</blockquote></mx-reply>the use case that the (imo reasonable) assumption that base64 is a bijection holds, and that when it does not, it prompts the author to take a second look and figure out why","m.relates_to":{"m.in_reply_to":{"event_id":"$9svmdq4JoK0nITcqfuuIHJRz7Pw_gVZuK_jlPyHwmaE"}},"msgtype":"m.text"},"ts":1625681639823,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FlRdaSzxuNk7bX1yl_CxXUS1ASLzajjTwzQyx2a6Ug0"},
{"content":{"body":"Who is going around saying \"I really want bijection\"? I'm worried about people going \"I want to switch from Buffer.from(x, \"base64\") to the new thing, but I did and now we have a production outage because I didn't know about how TC39 decided to diverge from Node semantics and data that used to work now fails\"","msgtype":"m.text"},"ts":1625681760513,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$YeL5ESZLLQaE047DGRhmyOdkYKpROUaG0uUwxb1eD7E"},
{"content":{"body":"i think that's precisely the point of why it's so surprising -- nobody's going around saying that because they don't even realize it's not. i certainly didn't!","msgtype":"m.text"},"ts":1625681788860,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zsmXFH33SMWP3L9iWNXWHb1ICpXVBw2Kx6z-z3Cm7EE"},
{"content":{"body":"I suspect people don't *expect* it.","format":"org.matrix.custom.html","formatted_body":"I suspect people don't <em>expect</em> it.","msgtype":"m.text"},"ts":1625681818058,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$w_0cguxw4qg0__47ZLncuGDHHz_WNb_GUONBqjY9MY4"},
{"content":{"body":"> <@shuyuguo:matrix.org> the use case that the (imo reasonable) assumption that base64 is a bijection holds, and that when it does not, it prompts the author to take a second look and figure out why\n\nshu: Many other languages and ecosystems have set the precedent that this is not the case though: Go, Python, Java, Deno, Node, Rust. I don't think it is a reasonable assumption to make.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$FlRdaSzxuNk7bX1yl_CxXUS1ASLzajjTwzQyx2a6Ug0?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>the use case that the (imo reasonable) assumption that base64 is a bijection holds, and that when it does not, it prompts the author to take a second look and figure out why</blockquote></mx-reply><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Many other languages and ecosystems have set the precedent that this is not the case though: Go, Python, Java, Deno, Node, Rust. I don't think it is a reasonable assumption to make.","m.relates_to":{"m.in_reply_to":{"event_id":"$FlRdaSzxuNk7bX1yl_CxXUS1ASLzajjTwzQyx2a6Ug0"}},"msgtype":"m.text"},"ts":1625681829559,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$03fB3MGEiM3pnCvxX0Vxzln-kNHd-ACiY5K_cwXSQss"},
{"content":{"body":"Bijection is just not a property one usually insists on for encoding/decoding, is my claim. Certainly not with text encodings!","msgtype":"m.text"},"ts":1625681841525,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$pwcDGFVPz8oHL9QXHBU45BqExlIfiCm6lx9FfjjSapw"},
{"content":{"body":"https://docs.rs/base64/0.13.0/base64/ <- too little padding is ok, too much is not","msgtype":"m.text"},"ts":1625681848353,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$w7FFaElc3Tk7gJcf_OKUUPAQnpUmX0ZGI3kaCbi8Qqg"},
{"content":{"body":"Domenic: to be clear, `Buffer.from(x, \"base64\")` accepts _mixed_ base64 and base64url in the same string, which I am definitely not proposing to support","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: to be clear, <code>Buffer.from(x, &quot;base64&quot;)</code> accepts <em>mixed</em> base64 and base64url in the same string, which I am definitely not proposing to support","msgtype":"m.text"},"ts":1625681851981,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$imKL7WP1HGX9JtFGXvkTa9baQRcrfNISj-4xPQrELP8"},
{"content":{"body":"> <@bakkot:matrix.org> Domenic: to be clear, `Buffer.from(x, \"base64\")` accepts _mixed_ base64 and base64url in the same string, which I am definitely not proposing to support\n\nWell OK, that's pretty bonkers, fair enough.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$imKL7WP1HGX9JtFGXvkTa9baQRcrfNISj-4xPQrELP8?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: to be clear, <code>Buffer.from(x, \"base64\")</code> accepts <em>mixed</em> base64 and base64url in the same string, which I am definitely not proposing to support</blockquote></mx-reply>Well OK, that's pretty bonkers, fair enough.","m.relates_to":{"m.in_reply_to":{"event_id":"$imKL7WP1HGX9JtFGXvkTa9baQRcrfNISj-4xPQrELP8"}},"msgtype":"m.text"},"ts":1625681869891,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$GoyiUtT5iQNcsVDhXcQIe4FSskyj2FYTo72Mjbk-kXs"},
{"content":{"body":"Domenic: i'm worried about the latter too, but that's why i want more data here! it's all too easy to raise the specter of possible compat breakage","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: i'm worried about the latter too, but that's why i want more data here! it's all too easy to raise the specter of possible compat breakage","msgtype":"m.text"},"ts":1625681874017,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pfCRnK-1RJqpJlnOH5WmAYFWCrgBwqvtOoGj3v-1Jhc"},
{"content":{"body":"(CSP does too, fun fact)","msgtype":"m.text"},"ts":1625681881599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1Dc71u2zV_stujEW4N6F1xEW4rKd5EVNWwJqHYgoxwA"},
{"content":{"body":"Seems like *that* should be a non-default mode...","format":"org.matrix.custom.html","formatted_body":"Seems like <em>that</em> should be a non-default mode...","msgtype":"m.text"},"ts":1625681901272,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$LyDuIkg9h_3MU6w5leeSkBkg40PlCRA0Pk48pUmnABs"},
{"content":{"body":"and while we're here and i'm a little worked up, i really want us to stop pitting whatwg-vs-tc39, both inside and outside of tc39","msgtype":"m.text"},"ts":1625681912118,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$crsFhJcGzG08xVEshIawRe3YZnnzTASmLXHwHjMgmv4"},
{"content":{"body":"(I'll open a tracking issue)","msgtype":"m.text"},"ts":1625681921393,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ihX8gK0g63TY7PNmJneUNTpnPZhsADW54EUPvchN0wE"},
{"content":{"body":"i mean, obviously JS is a stakeholder in the web platform and we want to improve it too. there are delegate who don't care about the web as much, but perpetuating that dichotomy entrenches that position which is counter-productive","msgtype":"m.text"},"ts":1625681999061,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LeoYC33Gu6k3Wrn-mquzyaN-cmMRMSgLesznHUkxzKQ"},
{"content":{"body":"I don't think this is a very WHATWG-vs.-TC39 thing; for me at least I tried to frame all my comments as about technical/API surface concerns on each proposal. E.g. even if TC39 wants to do this then I still am unsure about putting things on the prototypes vs. a separate utility class.\n\nAt first I thought it was more a web-vs-non-web thing. But recent research showing that Deno/Node/Go/etc. all do forgiving base-64 makes it seem like it's not even that. It's apparently about whether you expect a new JS API to have some bijection property vs. whether you expect it to align with the JS ecosystem/other standard library APIs.","msgtype":"m.text"},"ts":1625682424717,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$KTg8lnNinMbOeOQ2ppfiHsmjyFJlXizJmfoJfS6vacQ"}
]