[
{"content":{"body":" * hello to all the members here! hope you are doing well! i had a question in regards to the implementation of https://github.com/whatwg/streams/commit/007d729f1476f7f1ea34731ba9bd2becb702117e for nodejs I am encountering a case of what seems like a race conditions between promises this can better explained with an example consider this following code: const { TransformStream } = require('stream/web');\nconst assert = require('node:assert/strict');\n\n(async () => {\n  let controller;\n  const ts = new TransformStream({\n    start(c) {\n      controller = c;\n    }\n  });\n  const cancelReason = { name: 'cancelReason' };\n  const cancelPromise = ts.readable.cancel(cancelReason);\n  controller.terminate();\n  return Promise.all([\n    cancelPromise,\n    assert.rejects(ts.writable.getWriter().closed)\n  ]);\n})();","m.mentions":{},"m.new_content":{"body":"hello to all the members here! hope you are doing well! i had a question in regards to the implementation of https://github.com/whatwg/streams/commit/007d729f1476f7f1ea34731ba9bd2becb702117e for nodejs I am encountering a case of what seems like a race conditions between promises this can better explained with an example consider this following code: const { TransformStream } = require('stream/web');\nconst assert = require('node:assert/strict');\n\n(async () => {\n  let controller;\n  const ts = new TransformStream({\n    start(c) {\n      controller = c;\n    }\n  });\n  const cancelReason = { name: 'cancelReason' };\n  const cancelPromise = ts.readable.cancel(cancelReason);\n  controller.terminate();\n  return Promise.all([\n    cancelPromise,\n    assert.rejects(ts.writable.getWriter().closed)\n  ]);\n})();","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$phpdWIVz_xsdSzNjOMZAzaVG0k7QzmX5poxHs6tNPRg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696784876431,"senderName":"Debadree Chatterjee","senderId":"@debadree25:matrix.org","id":"$r3G14vM61ehq24bEAuojre_87H9XKcXhludAUz_ULnc"},
{"content":{"body":"Hello everyone! hope you are doing well! I had one question in regards to the implementation of https://github.com/whatwg/streams/commit/007d729f1476f7f1ea34731ba9bd2becb702117e, i have been trying to implement this in nodejs and i am bumping into what seems like a race condition between promises its better explained with code consider the code here https://gist.github.com/debadree25/c54931a99e493baaf9314a903cd52e12 now when we create a transform stream we have one promise created on the writable side the \"startPromise\" as noted in https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller and when we called the cancel method on the readable we get a cancellation promise as noted in https://streams.spec.whatwg.org/#transform-stream-default-source-cancel now in the code after this we call on controller.terminate which causes the writable side to go into the \"erroring\" stage, now comes the interesting part the \"startPromise\" gets resolved and causes the writable part to go into \"errored\" mode after which the close promise resolves rejecting the cancellation promise we received I think this is expected behaviour? since promises are executed in a queue manner? strangely this issue doesnt seem to affect the reference implementation here https://github.com/whatwg/streams and the promises get executed in the order: -created start promise\n-cancel promise created\n-cancel promise resolving\n-start promise resolving. I dont think this could be a problem with the spec maybe there is something i am missing? if anyone has any insight it would be great!! Thank you for reading! :-)","m.mentions":{},"msgtype":"m.text"},"ts":1696785778539,"senderName":"Debadree Chatterjee","senderId":"@debadree25:matrix.org","id":"$r9jETvPDoaF9Uidog6Nm_Qzk2JKlLodTa9ZODePg_oI"}
]