[
{"content":{"body":"Kaiido, Jake Archibald I've just found out that even this static HTML `<details open>` *already* fires an event.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a>, <a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a> I've just found out that even this static HTML <code>&lt;details open&gt;</code> <em>already</em> fires an event.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kaiido, Jake Archibald I've just found out that even this static HTML `<details open>` *already* fires an event.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a>, <a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a> I've just found out that even this static HTML <code>&lt;details open&gt;</code> <em>already</em> fires an event.","mimetype":"text/html"}]},"ts":1661335132698,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$aNnbZbcn0_1HTzgSV5nhsHf93JY2QumGyEFUtBrKp20"},
{"content":{"body":"Jake Archibald: do you know of any other HTML elements that fire events on programmatic changes? I'm specifically asking for elements, not \"non-element\" APIs like Navigation, LocalStorage, etc.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: do you know of any other HTML elements that fire events on programmatic changes? I'm specifically asking for elements, not &quot;non-element&quot; APIs like Navigation, LocalStorage, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jake Archibald: do you know of any other HTML elements that fire events on programmatic changes? I'm specifically asking for elements, not \"non-element\" APIs like Navigation, LocalStorage, etc.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: do you know of any other HTML elements that fire events on programmatic changes? I'm specifically asking for elements, not &quot;non-element&quot; APIs like Navigation, LocalStorage, etc.","mimetype":"text/html"}]},"ts":1661335192395,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$56LPSEyrP2jG3pyxGpzcBCX3NVaG-oa5r_SHUHYRSlU"},
{"content":{"body":"I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it's not OK for a test that doesn't specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution.","msgtype":"m.text","org.matrix.msc1767.text":"I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it's not OK for a test that doesn't specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution."},"ts":1661335406465,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$Wf3OY88jWeaJDdfFDNFSaBFSCzgbMT-pyE4GPAPV13A"},
{"content":{"body":"kraftwer1: `close` on `<dialog>`. `load` and `error` on lots of elements. Lots of events on `<video>` and `<audio>`. Even more fire events in response to method calls, like `focus()`, `blur()`, `click()`, selection changes etc etc.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kraftwer1:matrix.org\">kraftwer1</a>: <code>close</code> on <code>&lt;dialog&gt;</code>. <code>load</code> and <code>error</code> on lots of elements. Lots of events on <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code>. Even more fire events in response to method calls, like <code>focus()</code>, <code>blur()</code>, <code>click()</code>, selection changes etc etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"kraftwer1: `close` on `<dialog>`. `load` and `error` on lots of elements. Lots of events on `<video>` and `<audio>`. Even more fire events in response to method calls, like `focus()`, `blur()`, `click()`, selection changes etc etc.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kraftwer1:matrix.org\">kraftwer1</a>: <code>close</code> on <code>&lt;dialog&gt;</code>. <code>load</code> and <code>error</code> on lots of elements. Lots of events on <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code>. Even more fire events in response to method calls, like <code>focus()</code>, <code>blur()</code>, <code>click()</code>, selection changes etc etc.","mimetype":"text/html"}]},"ts":1661336535267,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$2GjXIvUV47JAX8_0YgGFhLkiBgJXtKeb3tEDsyHLiT8"},
{"content":{"body":"Indeed, I think almost all events on elements are in response to programmatic changes, with the exception of `<input>` and other form controls which have very unusual behavior.","format":"org.matrix.custom.html","formatted_body":"Indeed, I think almost all events on elements are in response to programmatic changes, with the exception of <code>&lt;input&gt;</code> and other form controls which have very unusual behavior.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Indeed, I think almost all events on elements are in response to programmatic changes, with the exception of `<input>` and other form controls which have very unusual behavior.","mimetype":"text/plain"},{"body":"Indeed, I think almost all events on elements are in response to programmatic changes, with the exception of <code>&lt;input&gt;</code> and other form controls which have very unusual behavior.","mimetype":"text/html"}]},"ts":1661337780776,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Tgmm_MVt46pjXoq9P-DumCFDtZqwsNk7IvE9UJ9R5Dg"},
{"content":{"body":"> <@hsivonen:mozilla.org> I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it's not OK for a test that doesn't specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution.\n\nIt just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Wf3OY88jWeaJDdfFDNFSaBFSCzgbMT-pyE4GPAPV13A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it&#39;s not OK for a test that doesn&#39;t specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution.</blockquote></mx-reply>It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything &quot;not OK&quot; here; it's not like the test is assuming some specific implementation-defined behavior.","m.relates_to":{"m.in_reply_to":{"event_id":"$Wf3OY88jWeaJDdfFDNFSaBFSCzgbMT-pyE4GPAPV13A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@hsivonen:mozilla.org> I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it's not OK for a test that doesn't specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution.\n\nIt just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Wf3OY88jWeaJDdfFDNFSaBFSCzgbMT-pyE4GPAPV13A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>I suppose I will have to look at engine compat anyway regarding https://github.com/web-platform-tests/wpt/blob/master/FileAPI/url/sandboxed-iframe.html , but surely it&#39;s not OK for a test that doesn&#39;t specifically test how srcless iframe behaves to depend on what happens to happen between the iframe insertion and the subsequent script execution.</blockquote></mx-reply>It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything &quot;not OK&quot; here; it's not like the test is assuming some specific implementation-defined behavior.","mimetype":"text/html"}]},"ts":1661337960233,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$WuMCf4o8eaeSGL9fA0lvxn55M5GN26kNTxV8BPEyShU"},
{"content":{"body":"> <@domenicdenicola:matrix.org> It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.\n\nYeah, on second look, it doesn't seem to matter if the event loop spins between the iframe and the script.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$WuMCf4o8eaeSGL9fA0lvxn55M5GN26kNTxV8BPEyShU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.</blockquote></mx-reply>Yeah, on second look, it doesn't seem to matter if the event loop spins between the iframe and the script.","m.relates_to":{"m.in_reply_to":{"event_id":"$WuMCf4o8eaeSGL9fA0lvxn55M5GN26kNTxV8BPEyShU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.\n\nYeah, on second look, it doesn't seem to matter if the event loop spins between the iframe and the script.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$WuMCf4o8eaeSGL9fA0lvxn55M5GN26kNTxV8BPEyShU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>It just seems like the test is assuming some basic conformance to other areas  of specs? Similar to how it assumes that, e.g., JS syntax works as specced. I don't see anything \"not OK\" here; it's not like the test is assuming some specific implementation-defined behavior.</blockquote></mx-reply>Yeah, on second look, it doesn't seem to matter if the event loop spins between the iframe and the script.","mimetype":"text/html"}]},"ts":1661338021801,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$Ecx_j_RK0_9yp0Pw20peNpKF2mLJTOR757iiatLj2BY"},
{"content":{"body":"Domenic Jake Archibald Thanks!\n1. Any idea where this \"very unusual behavior\" form elements behavior is coming from? Was it really to prevent potential endless loops, like Kaiido suggested? Or was it simply personal taste?\n2. If you could start again on a green field, would you choose to *always* fire events, just like `<details>`?\n==> meaning `<input value=\"foo\">` would already fire an event (because `value` is set to `\"foo\"`)?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> <a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a> Thanks!</p>\n<ol>\n<li>Any idea where this &quot;very unusual behavior&quot; form elements behavior is coming from? Was it really to prevent potential endless loops, like <a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a> suggested? Or was it simply personal taste?</li>\n<li>If you could start again on a green field, would you choose to <em>always</em> fire events, just like <code>&lt;details&gt;</code>?<br>==&gt; meaning <code>&lt;input value=&quot;foo&quot;&gt;</code> would already fire an event (because <code>value</code> is set to <code>&quot;foo&quot;</code>)?</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic Jake Archibald Thanks!\n1. Any idea where this \"very unusual behavior\" form elements behavior is coming from? Was it really to prevent potential endless loops, like Kaiido suggested? Or was it simply personal taste?\n2. If you could start again on a green field, would you choose to *always* fire events, just like `<details>`?\n==> meaning `<input value=\"foo\">` would already fire an event (because `value` is set to `\"foo\"`)?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> <a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a> Thanks!</p>\n<ol>\n<li>Any idea where this &quot;very unusual behavior&quot; form elements behavior is coming from? Was it really to prevent potential endless loops, like <a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a> suggested? Or was it simply personal taste?</li>\n<li>If you could start again on a green field, would you choose to <em>always</em> fire events, just like <code>&lt;details&gt;</code>?<br>==&gt; meaning <code>&lt;input value=&quot;foo&quot;&gt;</code> would already fire an event (because <code>value</code> is set to <code>&quot;foo&quot;</code>)?</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1661339537897,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$XVUf2av-R33_O5rjIApL26xvYwW2TSyg6cIGQlwKi6A"},
{"content":{"body":"I imagine it was because of the infinite loop issue. My preference would be to always fire 'change' events when things change. And, to avoid the infinite loop case, provide a way for values to be transformed during a single change. Fwiw, I don't think the `toUpperCase()` example does infinite-loop, since on the second run, it wouldn't result in a change.","format":"org.matrix.custom.html","formatted_body":"I imagine it was because of the infinite loop issue. My preference would be to always fire 'change' events when things change. And, to avoid the infinite loop case, provide a way for values to be transformed during a single change. Fwiw, I don't think the <code>toUpperCase()</code> example does infinite-loop, since on the second run, it wouldn't result in a change.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I imagine it was because of the infinite loop issue. My preference would be to always fire 'change' events when things change. And, to avoid the infinite loop case, provide a way for values to be transformed during a single change. Fwiw, I don't think the `toUpperCase()` example does infinite-loop, since on the second run, it wouldn't result in a change.","mimetype":"text/plain"},{"body":"I imagine it was because of the infinite loop issue. My preference would be to always fire 'change' events when things change. And, to avoid the infinite loop case, provide a way for values to be transformed during a single change. Fwiw, I don't think the <code>toUpperCase()</code> example does infinite-loop, since on the second run, it wouldn't result in a change.","mimetype":"text/html"}]},"ts":1661339918901,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$ewwFGsCEgiwSLZLNOYKFK3aOW34gZMwmT1tqctIXvHA"},
{"content":{"body":"(...is there even *any* infinite loop case?)","format":"org.matrix.custom.html","formatted_body":"(...is there even <em>any</em> infinite loop case?)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(...is there even *any* infinite loop case?)","mimetype":"text/plain"},{"body":"(...is there even <em>any</em> infinite loop case?)","mimetype":"text/html"}]},"ts":1661340286977,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$jeYcyNrTmqSpn98nSPYSS_2x_Luzw_8T5LLqUxqFMHU"},
{"content":{"body":"You could `.value += 'YAY'`, but I can't think of a real-world case","format":"org.matrix.custom.html","formatted_body":"You could <code>.value += 'YAY'</code>, but I can't think of a real-world case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You could `.value += 'YAY'`, but I can't think of a real-world case","mimetype":"text/plain"},{"body":"You could <code>.value += 'YAY'</code>, but I can't think of a real-world case","mimetype":"text/html"}]},"ts":1661340355468,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$bVN6SSKNOrd8N8wW8nkpy74x763O8VBKYtrlkW_88eo"},
{"content":{"body":"I think `<details open>` is indeed special and there is an existing issue on it. There's no other parser input that fires an event like that.","format":"org.matrix.custom.html","formatted_body":"I think <code>&lt;details open&gt;</code> is indeed special and there is an existing issue on it. There's no other parser input that fires an event like that.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think `<details open>` is indeed special and there is an existing issue on it. There's no other parser input that fires an event like that.","mimetype":"text/plain"},{"body":"I think <code>&lt;details open&gt;</code> is indeed special and there is an existing issue on it. There's no other parser input that fires an event like that.","mimetype":"text/html"}]},"ts":1661341613706,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$uuU9oNaRwGix4aG04wvmWDlNyx-0bLrUIn6u0fmK30g"},
{"content":{"body":"Jake Archibald: agreed. Oh and btw. `close` on `<dialog>` doesn't fire (it's even mentioned in the spec), however `close()` does...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: agreed. Oh and btw. <code>close</code> on <code>&lt;dialog&gt;</code> doesn't fire (it's even mentioned in the spec), however <code>close()</code> does...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jake Archibald: agreed. Oh and btw. `close` on `<dialog>` doesn't fire (it's even mentioned in the spec), however `close()` does...","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: agreed. Oh and btw. <code>close</code> on <code>&lt;dialog&gt;</code> doesn't fire (it's even mentioned in the spec), however <code>close()</code> does...","mimetype":"text/html"}]},"ts":1661341989516,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$2-HKAO_dLod4uSH1uKzmnilarCnbSW6s8ysvln7BR_E"},
{"content":{"body":"Ahh yeah, I should have put that under \"method calls\"","msgtype":"m.text","org.matrix.msc1767.text":"Ahh yeah, I should have put that under \"method calls\""},"ts":1661342065118,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$e6MjFC27epUCp2X9VH2iKpEOANdDz5428mMFUTyeLl4"},
{"content":{"body":"Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","format":"org.matrix.custom.html","formatted_body":"Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/plain"},{"body":"Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/html"}]},"ts":1661345159395,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$2Z67yxfZkZAgXJKI4XdazDbfUg9HNXGbPrvfmRQByTY"},
{"content":{"body":" * Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","format":"org.matrix.custom.html","formatted_body":" * Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","m.new_content":{"body":"Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","format":"org.matrix.custom.html","formatted_body":"Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/plain"},{"body":"Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$2Z67yxfZkZAgXJKI4XdazDbfUg9HNXGbPrvfmRQByTY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yes, IMM all the `focus()`, `blur()`, `click()` and al. are very different in that they can be seen as wrappers around a **call** to `dispatchEvent()`. I think it's semantically quite obvious. If such a call was hidden inside the `.value` setter that would be a lot more obscure.  `load`,  `error` and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe \\<details> and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/plain"},{"body":" * Yes, IMM all the <code>focus()</code>, <code>blur()</code>, <code>click()</code> and al. are very different in that they can be seen as wrappers around a <strong>call</strong> to <code>dispatchEvent()</code>. I think it's semantically quite obvious. If such a call was hidden inside the <code>.value</code> setter that would be a lot more obscure.  <code>load</code>,  <code>error</code> and media events are completely unrelated, they are for most triggered by network responses or something alike, not by script per se... I still do believe &lt;details&gt; and its attribute reaction is pretty unique here, and I still doubt it's a model that should be followed.","mimetype":"text/html"}]},"ts":1661345252215,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$bwfXRQVj7eaGtkZky96q0I6N8y3Yklqm9dn2R7xOU04"},
{"content":{"body":"`numericInputEl.stepUp()` doesn't fire \"input\" (probably being a form element with \"unusual behavior\")","format":"org.matrix.custom.html","formatted_body":"<code>numericInputEl.stepUp()</code> doesn't fire &quot;input&quot; (probably being a form element with &quot;unusual behavior&quot;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`numericInputEl.stepUp()` doesn't fire \"input\" (probably being a form element with \"unusual behavior\")","mimetype":"text/plain"},{"body":"<code>numericInputEl.stepUp()</code> doesn't fire &quot;input&quot; (probably being a form element with &quot;unusual behavior&quot;)","mimetype":"text/html"}]},"ts":1661346618905,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$luBXS1nxK8SYYHFB6oN3eD8qbIPcnNzOB1aZoQ4nmbI"},
{"content":{"body":"Ok thanks a lot to all of you participating. I think I've stolen enough of your precious time. My initial motivation was to understand the whole underlaying concept. But I think there's none. Honestly I think the spec of <details> is ambiguous. It doesn't clearly say an event should be fired *on programmatic change* - and it also doesn't clearly say otherwise.\nTo sum up I conclude that there are simply different tags with different behavior.","format":"org.matrix.custom.html","formatted_body":"Ok thanks a lot to all of you participating. I think I've stolen enough of your precious time. My initial motivation was to understand the whole underlaying concept. But I think there's none. Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired <em>on programmatic change</em> - and it also doesn't clearly say otherwise.<br>To sum up I conclude that there are simply different tags with different behavior.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ok thanks a lot to all of you participating. I think I've stolen enough of your precious time. My initial motivation was to understand the whole underlaying concept. But I think there's none. Honestly I think the spec of <details> is ambiguous. It doesn't clearly say an event should be fired *on programmatic change* - and it also doesn't clearly say otherwise.\nTo sum up I conclude that there are simply different tags with different behavior.","mimetype":"text/plain"},{"body":"Ok thanks a lot to all of you participating. I think I've stolen enough of your precious time. My initial motivation was to understand the whole underlaying concept. But I think there's none. Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired <em>on programmatic change</em> - and it also doesn't clearly say otherwise.<br>To sum up I conclude that there are simply different tags with different behavior.","mimetype":"text/html"}]},"ts":1661346835483,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$4SCySw9Cw0-hxeGPGa_ZZlurqaREDFmV1GRHEwnJHq8"},
{"content":{"body":"> Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","mimetype":"text/html"}]},"ts":1661346931675,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$0nqs9bLwyRfqb5T2JsPKnsEmVfe3GWn4gp2BlIIAZvI"},
{"content":{"body":" * > Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","m.new_content":{"body":"> Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0nqs9bLwyRfqb5T2JsPKnsEmVfe3GWn4gp2BlIIAZvI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Honestly I think the spec of \\<details> is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.\n\nI think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Honestly I think the spec of &lt;details&gt; is ambiguous. It doesn't clearly say an event should be fired on programmatic change - and it also doesn't clearly say otherwise.</p>\n</blockquote>\n<p>I think the spec is pretty clear here. https://html.spec.whatwg.org/multipage/interactive-elements.html#details-notification-task-steps</p>\n","mimetype":"text/html"}]},"ts":1661346936113,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$6GXg57PCTv4hVwQdaWA55i961Uns3_m1evVzXCHMusY"},
{"content":{"body":"It says the event should be fired \"Whenever the open attribute is added to or removed from a details element\"","msgtype":"m.text","org.matrix.msc1767.text":"It says the event should be fired \"Whenever the open attribute is added to or removed from a details element\""},"ts":1661346999591,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$j4afhsArj2taUT7brR2MtkcMEORiRQnkbYdK-k-E6OI"},
{"content":{"body":"The spec doesn't need to say \"even if the change is programmatic\" any more than it needs to say \"even if it's raining outside\"","msgtype":"m.text","org.matrix.msc1767.text":"The spec doesn't need to say \"even if the change is programmatic\" any more than it needs to say \"even if it's raining outside\""},"ts":1661347030031,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$PjCHedyTZ7angRpf8-JttSAhnzQOIjWwtekbtmalHf8"},
{"content":{"body":"Jake Archibald: not to me. It handles \"task queue\" and how to handle coalescing.\nThe dialog spec is much more clear: https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: not to me. It handles &quot;task queue&quot; and how to handle coalescing.<br>The dialog spec is much more clear: https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jake Archibald: not to me. It handles \"task queue\" and how to handle coalescing.\nThe dialog spec is much more clear: https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: not to me. It handles &quot;task queue&quot; and how to handle coalescing.<br>The dialog spec is much more clear: https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element","mimetype":"text/html"}]},"ts":1661347116647,"senderName":"kraftwer1","senderId":"@kraftwer1:matrix.org","id":"$ITv23u1zvxhkUy9ooTfGK_kdCmggXxrN0bsbG9MmWms"}
]