[
{"content":{"body":"jub0bs: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","mimetype":"text/html"}]},"ts":1673245798408,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$qMsHFvFfxeE68IygfGADV85-OHczSst00vq1rCc53h4"},
{"content":{"body":"jub0bs: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","mimetype":"text/html"}]},"ts":1673245904203,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$PwlVwVQcDsy4wKYdwsV-xBz9Q7n6kZKiznGvSwZR2ho"},
{"content":{"body":"Thanks annevk.   ","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks annevk.   ","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>.","mimetype":"text/html"}]},"ts":1673254947764,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$AxpMuQLVElQudW3xlThLn85yJqodOMapgkvmdKQBExg"},
{"content":{"body":" * Thanks annevk; that actually helps.","format":"org.matrix.custom.html","formatted_body":" * Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","m.new_content":{"body":"Thanks annevk; that actually helps.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks annevk; that actually helps.","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AxpMuQLVElQudW3xlThLn85yJqodOMapgkvmdKQBExg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Thanks annevk; that actually helps.","mimetype":"text/plain"},{"body":" * Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","mimetype":"text/html"}]},"ts":1673255202185,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$POYQCn9btAWQkOvrI1U35YUZGHU6ALMJ3nw5OV9WNuw"},
{"content":{"body":"annevk: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109 ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109 ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109","mimetype":"text/html"}]},"ts":1673270477018,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$D4U5rEbvzB8DMLcj24BZpxaiGMNs3rz71H_IYS6SKQw"},
{"content":{"body":"or perhaps I'm missing something? Chrome has had issues with data: urls elsewhere, like https://github.com/w3c/webappsec-secure-contexts/issues/69#issuecomment-585780599 ","msgtype":"m.text","org.matrix.msc1767.text":"or perhaps I'm missing something? Chrome has had issues with data: urls elsewhere, like https://github.com/w3c/webappsec-secure-contexts/issues/69#issuecomment-585780599 "},"ts":1673271056917,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$sQnbycoxJlfaOaBdW5Tyg8HBXfyModnFhzMjRadA_j4"},
{"content":{"body":"smaug: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"smaug: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","mimetype":"text/html"}]},"ts":1673271121916,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$fl7a04KHemZSA2EG13nL6QfPug9ZhzVIh8FoPo1JSmM"},
{"content":{"body":"right. The question is how data: workers should behave","msgtype":"m.text","org.matrix.msc1767.text":"right. The question is how data: workers should behave"},"ts":1673271160963,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$tw_5A8yDuonRxdJt9oQLSvK8M2goQKXyTET7kL9Cud8"},
{"content":{"body":"er, I was missing something","msgtype":"m.text","org.matrix.msc1767.text":"er, I was missing something"},"ts":1673271259817,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$1EwpIVIQOQs4ISy1RgplEnHIE7EkmeN5wBWgoOaskV8"},
{"content":{"body":"\"If is shared is false and response's url's scheme is \"data\", then set worker global scope's cross-origin isolated capability to false.\"","msgtype":"m.text","org.matrix.msc1767.text":"\"If is shared is false and response's url's scheme is \"data\", then set worker global scope's cross-origin isolated capability to false.\""},"ts":1673271269195,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$ldoXqG31isvMSCJQjl4avHznobSsl_puohWwJa5Vp6I"},
{"content":{"body":"I'm not sure if Firefox has the \"capability\" feature, that got added a bit later","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure if Firefox has the \"capability\" feature, that got added a bit later"},"ts":1673271320803,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$kw6C8Zk6KtMJOc_QRd0ZC-kHtcaKqpyiz94AcrfeqN4"},
{"content":{"body":"It also had some wrinkles around shared/service workers that might not be sorted yet spec-wise","msgtype":"m.text","org.matrix.msc1767.text":"It also had some wrinkles around shared/service workers that might not be sorted yet spec-wise"},"ts":1673271355417,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8pNXYsqMnha0gixspGnsGVbZsX4WtbRmXfpBZHE6ib4"},
{"content":{"body":"annevk: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","mimetype":"text/html"}]},"ts":1673277268677,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$OgQ-Mt3qtH6ec-UsIsvNITsVJWuuU-ZQrnvuqhGS0DQ"},
{"content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277560186,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277579957,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$C3lGcJB9BVYgcc9qW6VJHRn1CqkhwbfrqdLE0m3_cVo"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277603605,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$uH9d-s1E9rj2aYuba3hhye0BxvMS3PXR44JMQqBeISs"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","mimetype":"text/html"}]},"ts":1673277637249,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$OKKfDjwpqXctuDvF-O01IvutKrS6ABIZd0YCr9vDMQw"},
{"content":{"body":"In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with `ACAO: https://example.com` and no ACAH header (or simply `ACAH: authorization`). Then the browser's error message would be more useful for debugging purposes:\n> Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.","format":"org.matrix.custom.html","formatted_body":"<p>In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with <code>ACAO: https://example.com</code> and no ACAH header (or simply <code>ACAH: authorization</code>). Then the browser's error message would be more useful for debugging purposes:</p>\n<blockquote>\n<p>Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with `ACAO: https://example.com` and no ACAH header (or simply `ACAH: authorization`). Then the browser's error message would be more useful for debugging purposes:\n> Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.","mimetype":"text/plain"},{"body":"<p>In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with <code>ACAO: https://example.com</code> and no ACAH header (or simply <code>ACAH: authorization</code>). Then the browser's error message would be more useful for debugging purposes:</p>\n<blockquote>\n<p>Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1673277816847,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$Nn0oPcw4H-dzYvzp3TRiVIiSWaYpuWCWQFCgEy2VxB8"},
{"content":{"body":"From a theoretical perspective it does seem better to not reveal any information though in such a scenario.","msgtype":"m.text","org.matrix.msc1767.text":"From a theoretical perspective it does seem better to not reveal any information though in such a scenario."},"ts":1673277824143,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$SLhi3DQwA1gi9WE98EbE-t3GUgbb2laROknqtKoaRyo"},
{"content":{"body":"What are you concerned about, specifically? Some side channel?","msgtype":"m.text","org.matrix.msc1767.text":"What are you concerned about, specifically? Some side channel?"},"ts":1673277862585,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$qmiW5qF0PRV19LQGUgHJKxXU9rK--tgKbaPjpZWbl-s"}
]