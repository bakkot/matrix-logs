[
{"content":{"body":"jub0bs: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: there is https://fetch.spec.whatwg.org/#http-cors-protocol still","mimetype":"text/html"}]},"ts":1673245798408,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$qMsHFvFfxeE68IygfGADV85-OHczSst00vq1rCc53h4"},
{"content":{"body":"jub0bs: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: I think I wrote it anew because the old approach wasn't really liked by server developers, but I'm not entirely sure","mimetype":"text/html"}]},"ts":1673245904203,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$PwlVwVQcDsy4wKYdwsV-xBz9Q7n6kZKiznGvSwZR2ho"},
{"content":{"body":"Thanks annevk.   ","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks annevk.   ","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>.","mimetype":"text/html"}]},"ts":1673254947764,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$AxpMuQLVElQudW3xlThLn85yJqodOMapgkvmdKQBExg"},
{"content":{"body":" * Thanks annevk; that actually helps.","format":"org.matrix.custom.html","formatted_body":" * Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","m.new_content":{"body":"Thanks annevk; that actually helps.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks annevk; that actually helps.","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AxpMuQLVElQudW3xlThLn85yJqodOMapgkvmdKQBExg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Thanks annevk; that actually helps.","mimetype":"text/plain"},{"body":" * Thanks <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>; that actually helps.","mimetype":"text/html"}]},"ts":1673255202185,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$POYQCn9btAWQkOvrI1U35YUZGHU6ALMJ3nw5OV9WNuw"},
{"content":{"body":"annevk: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109 ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109 ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: wasn't your test correct and then someone broke it? https://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/blob-data.https.html#109","mimetype":"text/html"}]},"ts":1673270477018,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$D4U5rEbvzB8DMLcj24BZpxaiGMNs3rz71H_IYS6SKQw"},
{"content":{"body":"or perhaps I'm missing something? Chrome has had issues with data: urls elsewhere, like https://github.com/w3c/webappsec-secure-contexts/issues/69#issuecomment-585780599 ","msgtype":"m.text","org.matrix.msc1767.text":"or perhaps I'm missing something? Chrome has had issues with data: urls elsewhere, like https://github.com/w3c/webappsec-secure-contexts/issues/69#issuecomment-585780599 "},"ts":1673271056917,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$sQnbycoxJlfaOaBdW5Tyg8HBXfyModnFhzMjRadA_j4"},
{"content":{"body":"smaug: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"smaug: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: the most significant change I can find is https://github.com/web-platform-tests/wpt/commit/ce281cc3f32d8e93ecbb33a51321d846ee2aae37","mimetype":"text/html"}]},"ts":1673271121916,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$fl7a04KHemZSA2EG13nL6QfPug9ZhzVIh8FoPo1JSmM"},
{"content":{"body":"right. The question is how data: workers should behave","msgtype":"m.text","org.matrix.msc1767.text":"right. The question is how data: workers should behave"},"ts":1673271160963,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$tw_5A8yDuonRxdJt9oQLSvK8M2goQKXyTET7kL9Cud8"},
{"content":{"body":"er, I was missing something","msgtype":"m.text","org.matrix.msc1767.text":"er, I was missing something"},"ts":1673271259817,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$1EwpIVIQOQs4ISy1RgplEnHIE7EkmeN5wBWgoOaskV8"},
{"content":{"body":"\"If is shared is false and response's url's scheme is \"data\", then set worker global scope's cross-origin isolated capability to false.\"","msgtype":"m.text","org.matrix.msc1767.text":"\"If is shared is false and response's url's scheme is \"data\", then set worker global scope's cross-origin isolated capability to false.\""},"ts":1673271269195,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$ldoXqG31isvMSCJQjl4avHznobSsl_puohWwJa5Vp6I"},
{"content":{"body":"I'm not sure if Firefox has the \"capability\" feature, that got added a bit later","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure if Firefox has the \"capability\" feature, that got added a bit later"},"ts":1673271320803,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$kw6C8Zk6KtMJOc_QRd0ZC-kHtcaKqpyiz94AcrfeqN4"},
{"content":{"body":"It also had some wrinkles around shared/service workers that might not be sorted yet spec-wise","msgtype":"m.text","org.matrix.msc1767.text":"It also had some wrinkles around shared/service workers that might not be sorted yet spec-wise"},"ts":1673271355417,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8pNXYsqMnha0gixspGnsGVbZsX4WtbRmXfpBZHE6ib4"},
{"content":{"body":"annevk: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: In connection with my earlier question: I think one reason why many people find debugging CORS issues frustrating is that CORS-middleware developers followed that resource-processing model to the letter, and never relaxed their implementation when the spec moved to the Fetch standard.","mimetype":"text/html"}]},"ts":1673277268677,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$OgQ-Mt3qtH6ec-UsIsvNITsVJWuuU-ZQrnvuqhGS0DQ"},
{"content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277560186,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277579957,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$C3lGcJB9BVYgcc9qW6VJHRn1CqkhwbfrqdLE0m3_cVo"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers.","mimetype":"text/html"}]},"ts":1673277603605,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$uH9d-s1E9rj2aYuba3hhye0BxvMS3PXR44JMQqBeISs"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":"One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":" * One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message saying ACAO is missing, which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).","mimetype":"text/html"}]},"ts":1673277637249,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$OKKfDjwpqXctuDvF-O01IvutKrS6ABIZd0YCr9vDMQw"},
{"content":{"body":"In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with `ACAO: https://example.com` and no ACAH header (or simply `ACAH: authorization`). Then the browser's error message would be more useful for debugging purposes:\n> Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.","format":"org.matrix.custom.html","formatted_body":"<p>In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with <code>ACAO: https://example.com</code> and no ACAH header (or simply <code>ACAH: authorization</code>). Then the browser's error message would be more useful for debugging purposes:</p>\n<blockquote>\n<p>Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with `ACAO: https://example.com` and no ACAH header (or simply `ACAH: authorization`). Then the browser's error message would be more useful for debugging purposes:\n> Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.","mimetype":"text/plain"},{"body":"<p>In my experience, many CORS-related questions asked on Stack Overflow stem from this design decision. But that's not inevitable. A CORS middleware library could reply with <code>ACAO: https://example.com</code> and no ACAH header (or simply <code>ACAH: authorization</code>). Then the browser's error message would be more useful for debugging purposes:</p>\n<blockquote>\n<p>Request header field Foo is not allowed by Access-Control-Allow-Headers in preflight response.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1673277816847,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$Nn0oPcw4H-dzYvzp3TRiVIiSWaYpuWCWQFCgEy2VxB8"},
{"content":{"body":"From a theoretical perspective it does seem better to not reveal any information though in such a scenario.","msgtype":"m.text","org.matrix.msc1767.text":"From a theoretical perspective it does seem better to not reveal any information though in such a scenario."},"ts":1673277824143,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$SLhi3DQwA1gi9WE98EbE-t3GUgbb2laROknqtKoaRyo"},
{"content":{"body":"What are you concerned about, specifically? Some side channel?","msgtype":"m.text","org.matrix.msc1767.text":"What are you concerned about, specifically? Some side channel?"},"ts":1673277862585,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$qmiW5qF0PRV19LQGUgHJKxXU9rK--tgKbaPjpZWbl-s"},
{"content":{"body":"Yeah. But you're right that it would make specialized error messages harder. Either way browsers could do more than they are doing and list all the required headers. And middleware could probably offer debug and strict modes.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah. But you're right that it would make specialized error messages harder. Either way browsers could do more than they are doing and list all the required headers. And middleware could probably offer debug and strict modes."},"ts":1673277942834,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HHHSFl8kbBX0mrMcmMWf92R5Foznv1gf_Iab9CKTVA8"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":" * <p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":"<p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":"<p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":" * <p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","mimetype":"text/html"}]},"ts":1673277945316,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$ER96PvxRcuGr5FCOnhuI4Chxyn193db5s6kgbWWdj_8"},
{"content":{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n> Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":" * <p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<blockquote>\n<p>Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>\n</blockquote>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","m.new_content":{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n> Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","format":"org.matrix.custom.html","formatted_body":"<p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<blockquote>\n<p>Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>\n</blockquote>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n> Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":"<p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<blockquote>\n<p>Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>\n</blockquote>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nJ5wyeeFyhUoT_Byfja4ny8ygjBabT6y4VjlL3qWxrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One example: Alice configures CORS on `https://alice.com` to allow `https://example.com` with request headers `Authorization`. However, in her client (running on `https://example.com`), she also sends some `Foo` request header: `fetch('//alice.com', {headers: {'Foo': 'Foo'}})`. Obviously, CORS preflight then fails because the `Foo` header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like\n\n> Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n\nwhich is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header `Foo` is not allowed).","mimetype":"text/plain"},{"body":" * <p>One example: Alice configures CORS on <code>https://alice.com</code> to allow <code>https://example.com</code> with request headers <code>Authorization</code>. However, in her client (running on <code>https://example.com</code>), she also sends some <code>Foo</code> request header: <code>fetch('//alice.com', {headers: {'Foo': 'Foo'}})</code>. Obviously, CORS preflight then fails because the <code>Foo</code> header isn't allowed in Alice's CORS config. But most middleware libraries, according to the resource-processing model (as I understand it) would omit the ACAO header altogether from the response. When debugging the CORS error in the browser, Alice would be confronted with an error message like</p>\n<blockquote>\n<p>Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>\n</blockquote>\n<p>which is true but a bit misleading about the actual reason why the server didn't respond with the required CORS headers (i.e. that request header <code>Foo</code> is not allowed).</p>\n","mimetype":"text/html"}]},"ts":1673277958300,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$_FARdg2UgLWjYukB8f7IzcpAAG6LiRCGMR6_c5eaqD4"},
{"content":{"body":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy.","msgtype":"m.text","org.matrix.msc1767.text":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy."},"ts":1673278056699,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$NW2i_8iSMQ1IDHgNyc9wn_XjU4DBZaaNgQrZk6SUcCo"},
{"content":{"body":"Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?","msgtype":"m.text","org.matrix.msc1767.text":"Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?"},"ts":1673278146764,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM"},
{"content":{"body":" * Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?","m.new_content":{"body":"Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?","msgtype":"m.text","org.matrix.msc1767.text":"Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?"},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Since nothing much happens during preflight server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?"},"ts":1673278201636,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$0UQ3T8OTRAxCY4DvNI3DvH8dS7MdJbX3_k8sUV85aHc"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?","msgtype":"m.text","org.matrix.msc1767.text":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?"},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks?"},"ts":1673278231673,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$1Ah1IMpYlRcWClUQkR4DRAeG4E-IxZuZv6N8GbDNZHM"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?","msgtype":"m.text","org.matrix.msc1767.text":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?"},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?"},"ts":1673278267944,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$L-B5Vr11SmCkpHyioNwuerMjUvdk8ZI6KLnzJ6o3AZM"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?","msgtype":"m.text","org.matrix.msc1767.text":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?"},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility, but has it ever been an issue in practice?"},"ts":1673278282133,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$mEVkdGl7IQrEbp5NPzyUom2dcBUiCwRJebXTZv4vokQ"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"ts":1673278397076,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$hYvN8lwmg7aal6TlPmH0Sc2vDM5LFAxIjsK5ySPvEyM"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"ts":1673278544891,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$ZtoXLkM1NMF2vontfEz6zB0oStfOUEcKSxm0dt-wz0I"},
{"content":{"body":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","m.new_content":{"body":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","msgtype":"m.text","org.matrix.msc1767.text":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"m.relates_to":{"event_id":"$NW2i_8iSMQ1IDHgNyc9wn_XjU4DBZaaNgQrZk6SUcCo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. People would have to think about activating it and then redeploy. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"ts":1673278752563,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$JOv2WZXxkf_Uu-ViR6Tf-azz-gxVX18dU8hZ2E85kB0"},
{"content":{"body":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","m.new_content":{"body":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","msgtype":"m.text","org.matrix.msc1767.text":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"m.relates_to":{"event_id":"$NW2i_8iSMQ1IDHgNyc9wn_XjU4DBZaaNgQrZk6SUcCo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"ts":1673279483775,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$bTtAUU_axTa-U0-Vu4aLDiyz81vZIus6AQ9bPwfe2Ek"},
{"content":{"body":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, test, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","m.new_content":{"body":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, test, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest...","msgtype":"m.text","org.matrix.msc1767.text":"I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, test, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"m.relates_to":{"event_id":"$NW2i_8iSMQ1IDHgNyc9wn_XjU4DBZaaNgQrZk6SUcCo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I've thought about offering debug/strict modes in my CORS middleware, but I'm not 100% convinced. My users would have to know the option exists, activate it, redeploy, test, then deactivate it and redeploy once more. And I'm not sure whether (or how quickly) browser vendors could be convinced to produce more informative error messages, to be honest..."},"ts":1673279503719,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$5o4zJtb0L0HgDDyUSFnDzqXN5KqiAQhG9KneVDwtBC4"},
{"content":{"body":"I'm not sure what you mean. The side channel is there whether you use a 403 or not.","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure what you mean. The side channel is there whether you use a 403 or not."},"ts":1673280153917,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$tWTqOw87KuE3-7wPOH1VeNI-wBsVip1tvG2tW6MyM-0"},
{"content":{"body":"True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight?","msgtype":"m.text","org.matrix.msc1767.text":"True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight?"},"ts":1673280426796,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$eo1xCxRiJRJaS2EKm76vTEEpLIYrItSm3XvZwTDqUjQ"},
{"content":{"body":" * True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight? Or is the side-channel attack you're worried about something else entirely?","m.new_content":{"body":"True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight? Or is the side-channel attack you're worried about something else entirely?","msgtype":"m.text","org.matrix.msc1767.text":"True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight? Or is the side-channel attack you're worried about something else entirely?"},"m.relates_to":{"event_id":"$eo1xCxRiJRJaS2EKm76vTEEpLIYrItSm3XvZwTDqUjQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * True, the status code is irrelevant. But what kind of useful information could be gleaned by an attacker if the server included the ACAO header (and possibly ACAM and ACAH with \"partial\" values) in the response despite a failure of CORS preflight? Or is the side-channel attack you're worried about something else entirely?"},"ts":1673280964402,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$pWpmGgshG-6E3SDFCsZdmNdXTXWvDRdHtuD8MApdQuw"},
{"content":{"body":"It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say.","msgtype":"m.text","org.matrix.msc1767.text":"It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say."},"ts":1673282023278,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$rjO9PBMiMdYSOR1m7ropQOeXjTr41BRdc3r2vVWKGwY"},
{"content":{"body":"Thanks for clarifying. That's great.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for clarifying. That's great."},"ts":1673282928839,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$2jOJI7s7QtYYEllmWT-vL88E5cgARDmJz063wJgLb8k"},
{"content":{"body":"annevk: https://github.com/whatwg/infra/issues/518 -- I'm mentioning that here mostly in case other folks are following along","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: https://github.com/whatwg/infra/issues/518 -- I'm mentioning that here mostly in case other folks are following along","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: https://github.com/whatwg/infra/issues/518 -- I'm mentioning that here mostly in case other folks are following along","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: https://github.com/whatwg/infra/issues/518 -- I'm mentioning that here mostly in case other folks are following along","mimetype":"text/html"}]},"ts":1673283033582,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$UfFVB1Bx5ne3AX9m5LKMX7141BJAnqbAAZ93vPthpbY"},
{"content":{"body":"@annevk I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","msgtype":"m.text","org.matrix.msc1767.text":"@annevk I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇"},"ts":1673283120184,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$k-naA8uM1zUkbqkdWGgr44lcaithKsEx2K6qMtcuJXA"},
{"content":{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, **coupled with omitting the relevant headers**.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, <strong>coupled with omitting the relevant headers</strong>.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","m.new_content":{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, **coupled with omitting the relevant headers**.\n\nBut has it ever been an issue in practice?","format":"org.matrix.custom.html","formatted_body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, <strong>coupled with omitting the relevant headers</strong>.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, **coupled with omitting the relevant headers**.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":"<p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, <strong>coupled with omitting the relevant headers</strong>.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$5x7tE39AE2khxFtec284NaUJ8DJwrXW1WO1IHzbsAzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:\n\n> Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, **coupled with omitting the relevant headers**.\n\nBut has it ever been an issue in practice?","mimetype":"text/plain"},{"body":" * <p>Since nothing much happens during preflight on the server side (as the CORS middleware should handle the preflight request rather than passing it on to the next handler in the chain), I'm wondering whether worrying about side-channel attacks during preflight is justified. Do you know of such attacks? I know the Fetch standard mentions that possibility:</p>\n<blockquote>\n<p>Any other kind of HTTP response is not successful and will either end up not being shared or fail the CORS-preflight request. Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, <strong>coupled with omitting the relevant headers</strong>.</p>\n</blockquote>\n<p>But has it ever been an issue in practice?</p>\n","mimetype":"text/html"}]},"ts":1673284363897,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$gak87HfmPud6OK0rOEhXNr9q8yu3fW7270ED8JRm7hs"},
{"content":{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","m.new_content":{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$k-naA8uM1zUkbqkdWGgr44lcaithKsEx2K6qMtcuJXA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"ts":1673285502424,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$Yh2KNDupmVeDOYCBInGi0WxPcn9xRrGvipOWZZ95OL8"},
{"content":{"body":"jub0bs: sure","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: sure","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: sure","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: sure","mimetype":"text/html"}]},"ts":1673286041996,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$yfp6N5cD-O2_ViNGTc62IkPuzauD1K861aFLLt8cZB4"},
{"content":{"body":"jugglinmike: ta","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">jugglinmike</a>: ta","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jugglinmike: ta","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">jugglinmike</a>: ta","mimetype":"text/html"}]},"ts":1673286044514,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$P9PipmuSHeniSZe5YdNXXcOWvhF7ZkkZ_fIV9SRZlBI"},
{"content":{"body":"Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","format":"org.matrix.custom.html","formatted_body":"<p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","mimetype":"text/plain"},{"body":"<p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$rjO9PBMiMdYSOR1m7ropQOeXjTr41BRdc3r2vVWKGwY"}}},"ts":1673286151057,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$FXLXllEn2E2JkvP14U8dgLEnKf-bQC6oaH3wyPWQrIY"},
{"content":{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does _not_ count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <em>not</em> count as an endorsement of my library on your part 😇","m.new_content":{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does _not_ count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <em>not</em> count as an endorsement of my library on your part 😇","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does _not_ count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <em>not</em> count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$k-naA8uM1zUkbqkdWGgr44lcaithKsEx2K6qMtcuJXA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does _not_ count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <em>not</em> count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"ts":1673286185766,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$gjx75BHtAdVJi8trjOpsGMxHJIBIqAMsG4xZzTyn3Z8"},
{"content":{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does **not** count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <strong>not</strong> count as an endorsement of my library on your part 😇","m.new_content":{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does **not** count as an endorsement of my library on your part 😇","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <strong>not</strong> count as an endorsement of my library on your part 😇","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does **not** count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <strong>not</strong> count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$k-naA8uM1zUkbqkdWGgr44lcaithKsEx2K6qMtcuJXA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * annevk:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does **not** count as an endorsement of my library on your part 😇","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>:  I'm currently writing a blog post about my design philosophy for my CORS middleware library. Do you mind if I mention your name (along with Jake's, who also helped me understand a few subtleties) in the acknowledgements? I intend to specify that such an acknowledgement does <strong>not</strong> count as an endorsement of my library on your part 😇","mimetype":"text/html"}]},"ts":1673286201457,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$md-Uk1r-ja9tC0uo3Ky6rmQHWRJV97Mx_rDvJ4WzFbw"},
{"content":{"body":"> <@annevk:matrix.org> It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say.\n\n * Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$rjO9PBMiMdYSOR1m7ropQOeXjTr41BRdc3r2vVWKGwY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say.</blockquote></mx-reply> * <p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","m.new_content":{"body":"Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","format":"org.matrix.custom.html","formatted_body":"<p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","mimetype":"text/plain"},{"body":"<p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FXLXllEn2E2JkvP14U8dgLEnKf-bQC6oaH3wyPWQrIY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say.\n\n * Yes. I think this passage deserves at least some clarification:\n\n> Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.\n\nIn particular, I'm not sure myself what \"denote this\" refers to...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$rjO9PBMiMdYSOR1m7ropQOeXjTr41BRdc3r2vVWKGwY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>It's separate, but maybe it would be better to remove it as for preflights it doesn't matter too much as you say.</blockquote></mx-reply> * <p>Yes. I think this passage deserves at least some clarification:</p>\n<blockquote>\n<p>Be aware that any work the server performs might nonetheless leak through side channels, such as timing. If server developers wish to denote this explicitly, the 403 status can be used, coupled with omitting the relevant headers.</p>\n</blockquote>\n<p>In particular, I'm not sure myself what &quot;denote this&quot; refers to...</p>\n","mimetype":"text/html"}]},"ts":1673286244068,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$QqjAuJlLwmVYP1PWpdmOr0AwgeN7ki1vlLcw6t6znbE"},
{"content":{"body":"jub0bs: can you file an issue?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: can you file an issue?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jub0bs: can you file an issue?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jub0bs:matrix.org\">jub0bs</a>: can you file an issue?","mimetype":"text/html"}]},"ts":1673286313063,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$56oIkL4N7waSKvpCB4S70ms_jTSJ_BfCJl2J2SFcfV4"},
{"content":{"body":"I can fix, but not today","msgtype":"m.text","org.matrix.msc1767.text":"I can fix, but not today"},"ts":1673286333769,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$gPrM88HFBRIpHuHa42NF3aWrxer9f_-DKuvz2VlXxrQ"},
{"content":{"body":"annevk: I sure can! There's no rush for you to fix it, though.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: I sure can! There's no rush for you to fix it, though.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","mimetype":"text/html"}]},"ts":1673288531307,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$4fxtd7MQpg0Nt62OsGVGZuU0F-OvIaCZ9GS1O6lRlwY"},
{"content":{"body":" * I sure can! There's no rush for you to fix it, though.","m.new_content":{"body":"I sure can! There's no rush for you to fix it, though.","msgtype":"m.text","org.matrix.msc1767.text":"I sure can! There's no rush for you to fix it, though."},"m.relates_to":{"event_id":"$4fxtd7MQpg0Nt62OsGVGZuU0F-OvIaCZ9GS1O6lRlwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I sure can! There's no rush for you to fix it, though."},"ts":1673288547081,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$v3zSa9zDX_GqRopyQpMKkaOoAyTYKeMLCP8B6bQIHgQ"},
{"content":{"body":" * @annevk I sure can! There's no rush for you to fix it, though.","m.new_content":{"body":"@annevk I sure can! There's no rush for you to fix it, though.","msgtype":"m.text","org.matrix.msc1767.text":"@annevk I sure can! There's no rush for you to fix it, though."},"m.relates_to":{"event_id":"$4fxtd7MQpg0Nt62OsGVGZuU0F-OvIaCZ9GS1O6lRlwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * @annevk I sure can! There's no rush for you to fix it, though."},"ts":1673288572030,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$GRmmmYqVi_-kZZ-tCtKln4d-M8KzqEnvlIvIxgXADCE"},
{"content":{"body":" * annevk: I sure can! There's no rush for you to fix it, though.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","m.new_content":{"body":"annevk: I sure can! There's no rush for you to fix it, though.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: I sure can! There's no rush for you to fix it, though.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4fxtd7MQpg0Nt62OsGVGZuU0F-OvIaCZ9GS1O6lRlwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * annevk: I sure can! There's no rush for you to fix it, though.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I sure can! There's no rush for you to fix it, though.","mimetype":"text/html"}]},"ts":1673288583655,"senderName":"jub0bs","senderId":"@jub0bs:matrix.org","id":"$94WnD2BrZLEsdJgfp7BLYir1ooUor9TUFdF20KQ39cs"}
]