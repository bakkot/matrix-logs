[
{"content":{"body":"Seems like it's been twisted into something not like the original, so we'll need to keep copying the domintro styles around","msgtype":"m.text"},"ts":1685502462546,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$zxq1_yEu3fEGd_62XiA5or1prhI_uBeZJkbFnz2xL9k"},
{"content":{"body":" * Seems like it's being changed into something not like the original, so we'll need to keep copying the domintro styles around","m.new_content":{"body":"Seems like it's being changed into something not like the original, so we'll need to keep copying the domintro styles around","msgtype":"m.text"},"m.relates_to":{"event_id":"$zxq1_yEu3fEGd_62XiA5or1prhI_uBeZJkbFnz2xL9k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685502636727,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IRDVOpLyZgzhawW9Zle3Je8fE-Nd7PCZ29N6_VZnkVQ"},
{"content":{"body":"Domenic: thanks for the SAB review. I'll try to understand that type nuance a bit better. Are you are the existing typedefs work though? It seems they would not allow for resizable or shared buffers in a number of places, for instance.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: thanks for the SAB review. I'll try to understand that type nuance a bit better. Are you are the existing typedefs work though? It seems they would not allow for resizable or shared buffers in a number of places, for instance.","msgtype":"m.text"},"ts":1685518905927,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8hJmWxpnFJsSymp5Gndjj65DeoBfgvOU9b_LSlchtdo"},
{"content":{"body":"annevk: yeah the existing typedefs might not work well. It's more that using \"an `X` object\" or \"an `X`\" where `X` is an IDL typedef is known-good phrasing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: yeah the existing typedefs might not work well. It's more that using &quot;an <code>X</code> object&quot; or &quot;an <code>X</code>&quot; where <code>X</code> is an IDL typedef is known-good phrasing.","msgtype":"m.text"},"ts":1685518985056,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8U4qUPyNv7L421e4VBj70xE04acfeUu8sr8p0YIZySY"},
{"content":{"body":"canadahonk: you prodding me about other schemes made me realize what I might have been missing in my WebKit patch; maybe I'll finally manage to get all the tests to pass now 🤞","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canada_goose:mozilla.org\">canadahonk</a>: you prodding me about other schemes made me realize what I might have been missing in my WebKit patch; maybe I'll finally manage to get all the tests to pass now 🤞","msgtype":"m.text"},"ts":1685519152685,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$e_iSEKIa-HbHWRiUAUJkIoDD42o0rASjssV7JAIXYN8"},
{"content":{"body":"I was honestly a bit surprised that we were rigorous about using \"string types\" and \"numeric types\" and so on, to only refer to the types and not to instances. But since we are, I figured we should probably stick to it","msgtype":"m.text"},"ts":1685519189271,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ATmZuZLm12l5os9Pq91Ue-fByMxe4UOarKaAfP0Em0I"},
{"content":{"body":"Yeah, maybe we shouldn't export them then though. I guess that's another thing to look at, if there are any callers.","msgtype":"m.text"},"ts":1685519265923,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$EKjri0IPc_UEA-yi-xUunjfHca7IxSeAVB7fpAQkZSw"},
{"content":{"body":"Hmm yeah, good point","msgtype":"m.text"},"ts":1685519288476,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$DeKpSAqr3eOF7weAUQ0mvpp3lto6yKTet9g7ocim6Vk"},
{"content":{"body":"zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","msgtype":"m.text"},"ts":1685522398411,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Xy9482s_50K7bbtYSsSbZSlV3wFFZW58aBfZWkykB4M"},
{"content":{"body":" * zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","m.new_content":{"body":"zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Xy9482s_50K7bbtYSsSbZSlV3wFFZW58aBfZWkykB4M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685522430262,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Xp-3PhfWlXGhF_MyMIsEtiYmKCMghtXqr2T2NRsTtKw"},
{"content":{"body":"sideshowbarker: ouch. I wonder if we should revisit the decision to allow \"&\" at all tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: ouch. I wonder if we should revisit the decision to allow &quot;&amp;&quot; at all tho","msgtype":"m.text"},"ts":1685522546928,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$URIbgJBrIAp-ZsDUlFypNujadWw_1cQTeLQba6rxRTw"},
{"content":{"body":"The current rules are basically impossible to explain","msgtype":"m.text"},"ts":1685522566047,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$UsFbVrxd5_zcShmQHT-Jnk_QQ43c3Lm4gFHgldZfGV4"},
{"content":{"body":"Yeah, I don’t even remember now at a high level now how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","msgtype":"m.text"},"ts":1685522660087,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RajQPNR6mFPBcyAA_LL5QMH31JrKG7Sq0-D-wYcpT2k"},
{"content":{"body":"As far as revisiting the decision, I do still think the use case for allowing it in URLs is valid and we should still allow that","msgtype":"m.text"},"ts":1685522705910,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$EUdHRyo-jH35gaAgzRFYhC0VlUDObyUDGcDTWPNrCso"},
{"content":{"body":" * Yeah, I don’t even remember now at a high level how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","m.new_content":{"body":"Yeah, I don’t even remember now at a high level how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","msgtype":"m.text"},"m.relates_to":{"event_id":"$RajQPNR6mFPBcyAA_LL5QMH31JrKG7Sq0-D-wYcpT2k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685522722062,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$QM_A_XV2mDNQ8OR9YENR0atDPlGQZqXcIjOJ-QIyVtM"},
{"content":{"body":"IIRC Ian Hickson allowed ampersands based on feedback within google that there was no harm from using unescaped `&` in e.g. urls. But it only \"works\" for urls in attributes, so it's still brittle. Also the same argument would allow `font` or omitting `</div>`s","format":"org.matrix.custom.html","formatted_body":"IIRC <a href=\"https://matrix.to/#/@hixie:matrix.org\">Ian Hickson</a> allowed ampersands based on feedback within google that there was no harm from using unescaped <code>&amp;</code> in e.g. urls. But it only &quot;works&quot; for urls in attributes, so it's still brittle. Also the same argument would allow <code>font</code> or omitting <code>&lt;/div&gt;</code>s","msgtype":"m.text"},"ts":1685522802537,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$84om6Y68PV5nE0R_Hwt6rtsgR23mA4G-1Vm5bQtm2Wo"},
{"content":{"body":"yeah I guess the possible long-term costs of some of these decisions were hard to foresee at the time","msgtype":"m.text"},"ts":1685522869936,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$5FrR9Ntj3sFfD2eNBpVebxh_F4riFeaHgg7t1Vpcqbc"},
{"content":{"body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","msgtype":"m.text"},"ts":1685523241216,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RISrLVvefoLutKbPE1dk18j-0_8nKBwlnyBLhl_Pzvg"},
{"content":{"body":" * And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":" * And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","m.new_content":{"body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RISrLVvefoLutKbPE1dk18j-0_8nKBwlnyBLhl_Pzvg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685523256643,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$WLNBpIe_B4jrPx7gI_VlewSBUMn-A11kzILGLuFRots"},
{"content":{"body":"Anyway, I really wish we had someone else with time and interest in working on the parser maintenance","msgtype":"m.text"},"ts":1685523307364,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$EeBXZaaUKry9QC-kwQJ1xP3rn_pg75S1M53TZ4FZRls"},
{"content":{"body":"sideshowbarker: just rewrite the spec","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: just rewrite the spec","msgtype":"m.text"},"ts":1685523307637,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$Atg7yH1gMVIWdysfN2-aTduvfuTgW_zFfcE7vTyagL8"},
{"content":{"body":"snort","msgtype":"m.text"},"ts":1685523336630,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$ZE4kGdggwBZRQNyZsVFOUn2x_mGLk8yrKBJPUKpTxZs"},
{"content":{"body":"That would definitely help to make the spec algorithm even less maintainable too","msgtype":"m.text"},"ts":1685523367085,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fZA7tDgeHYFQUuF1hQxeE0XbT_NU0XCgl3MibDXNudo"},
{"content":{"body":"Maybe that’s what we want in the end — we want everybody to be afraid to touch that part of the spec ever again","msgtype":"m.text"},"ts":1685523399833,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fWbLXnv-1X8svV2s4HZ_02urFpapIPzNCSNV-HSZrrk"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1685523454587,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$ZbzxRPCfGOvI7PPMOMhiM2xoPHyiz--ryHGGYoHeLUs"},
{"content":{"body":"But do you want to file a spec issue about disallowing &?","msgtype":"m.text"},"ts":1685523506475,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$qBv2OYy73e4n1ND1GiZBGvLNYhw0sYL4HcBlwtnPNpo"},
{"content":{"body":"smaug: hi! trying the understand the concern around https://github.com/whatwg/html/issues/9315. I don't see how it interferes with BFCache snapshots but perhaps I'm missing something","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: hi! trying the understand the concern around https://github.com/whatwg/html/issues/9315. I don't see how it interferes with BFCache snapshots but perhaps I'm missing something","msgtype":"m.text"},"ts":1685523797393,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Cf010YLrneGopViRKFCqOs9h4g_Jo4KajZA9LIu-HlA"},
{"content":{"body":"concern is to postpone when the first paint could happen","msgtype":"m.text"},"ts":1685523852850,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$7KAvrdTvVb7c2IQ73v4Gn5aTtkl1oONDIPz7n_HK_yo"},
{"content":{"body":"If handling the new event takes lots of time, what would UA  paint instead?","msgtype":"m.text"},"ts":1685523889566,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$gd_z8gut12bkyD7KJlLvEatiYH4l2zX1VU4CE_ua7jQ"}
]