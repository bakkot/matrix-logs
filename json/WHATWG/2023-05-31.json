[
{"content":{"body":"Seems like it's been twisted into something not like the original, so we'll need to keep copying the domintro styles around","msgtype":"m.text"},"ts":1685502462546,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$zxq1_yEu3fEGd_62XiA5or1prhI_uBeZJkbFnz2xL9k"},
{"content":{"body":" * Seems like it's being changed into something not like the original, so we'll need to keep copying the domintro styles around","m.new_content":{"body":"Seems like it's being changed into something not like the original, so we'll need to keep copying the domintro styles around","msgtype":"m.text"},"m.relates_to":{"event_id":"$zxq1_yEu3fEGd_62XiA5or1prhI_uBeZJkbFnz2xL9k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685502636727,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IRDVOpLyZgzhawW9Zle3Je8fE-Nd7PCZ29N6_VZnkVQ"},
{"content":{"body":"Domenic: thanks for the SAB review. I'll try to understand that type nuance a bit better. Are you are the existing typedefs work though? It seems they would not allow for resizable or shared buffers in a number of places, for instance.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: thanks for the SAB review. I'll try to understand that type nuance a bit better. Are you are the existing typedefs work though? It seems they would not allow for resizable or shared buffers in a number of places, for instance.","msgtype":"m.text"},"ts":1685518905927,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8hJmWxpnFJsSymp5Gndjj65DeoBfgvOU9b_LSlchtdo"},
{"content":{"body":"annevk: yeah the existing typedefs might not work well. It's more that using \"an `X` object\" or \"an `X`\" where `X` is an IDL typedef is known-good phrasing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: yeah the existing typedefs might not work well. It's more that using &quot;an <code>X</code> object&quot; or &quot;an <code>X</code>&quot; where <code>X</code> is an IDL typedef is known-good phrasing.","msgtype":"m.text"},"ts":1685518985056,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8U4qUPyNv7L421e4VBj70xE04acfeUu8sr8p0YIZySY"},
{"content":{"body":"canadahonk: you prodding me about other schemes made me realize what I might have been missing in my WebKit patch; maybe I'll finally manage to get all the tests to pass now 🤞","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canada_goose:mozilla.org\">canadahonk</a>: you prodding me about other schemes made me realize what I might have been missing in my WebKit patch; maybe I'll finally manage to get all the tests to pass now 🤞","msgtype":"m.text"},"ts":1685519152685,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$e_iSEKIa-HbHWRiUAUJkIoDD42o0rASjssV7JAIXYN8"},
{"content":{"body":"I was honestly a bit surprised that we were rigorous about using \"string types\" and \"numeric types\" and so on, to only refer to the types and not to instances. But since we are, I figured we should probably stick to it","msgtype":"m.text"},"ts":1685519189271,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ATmZuZLm12l5os9Pq91Ue-fByMxe4UOarKaAfP0Em0I"},
{"content":{"body":"Yeah, maybe we shouldn't export them then though. I guess that's another thing to look at, if there are any callers.","msgtype":"m.text"},"ts":1685519265923,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$EKjri0IPc_UEA-yi-xUunjfHca7IxSeAVB7fpAQkZSw"},
{"content":{"body":"Hmm yeah, good point","msgtype":"m.text"},"ts":1685519288476,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$DeKpSAqr3eOF7weAUQ0mvpp3lto6yKTet9g7ocim6Vk"},
{"content":{"body":"zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","msgtype":"m.text"},"ts":1685522398411,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Xy9482s_50K7bbtYSsSbZSlV3wFFZW58aBfZWkykB4M"},
{"content":{"body":" * zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","m.new_content":{"body":"zcorpan: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.\n\nSo I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: FYI It seems my recent parser change regressed the handling of ampersands in URLs https://github.com/validator/validator/issues/1595. I guess I shouldn’t be surprised.</p>\n<p>So I’ll need to revert the change — and then I suppose I rightly should go back to the parser code and try to re-figure-out how to get the parser error-reporting behavior conforming for all cases. Which is not a lot of fun without proper test cases with the right coverage, and a working test harness for checking the error-reporting behavior</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Xy9482s_50K7bbtYSsSbZSlV3wFFZW58aBfZWkykB4M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685522430262,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Xp-3PhfWlXGhF_MyMIsEtiYmKCMghtXqr2T2NRsTtKw"},
{"content":{"body":"sideshowbarker: ouch. I wonder if we should revisit the decision to allow \"&\" at all tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: ouch. I wonder if we should revisit the decision to allow &quot;&amp;&quot; at all tho","msgtype":"m.text"},"ts":1685522546928,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$URIbgJBrIAp-ZsDUlFypNujadWw_1cQTeLQba6rxRTw"},
{"content":{"body":"The current rules are basically impossible to explain","msgtype":"m.text"},"ts":1685522566047,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$UsFbVrxd5_zcShmQHT-Jnk_QQ43c3Lm4gFHgldZfGV4"},
{"content":{"body":"Yeah, I don’t even remember now at a high level now how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","msgtype":"m.text"},"ts":1685522660087,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RajQPNR6mFPBcyAA_LL5QMH31JrKG7Sq0-D-wYcpT2k"},
{"content":{"body":"As far as revisiting the decision, I do still think the use case for allowing it in URLs is valid and we should still allow that","msgtype":"m.text"},"ts":1685522705910,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$EUdHRyo-jH35gaAgzRFYhC0VlUDObyUDGcDTWPNrCso"},
{"content":{"body":" * Yeah, I don’t even remember now at a high level how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","m.new_content":{"body":"Yeah, I don’t even remember now at a high level how the logic in the spec change distinguished between the usage in, e.g., a URL vs. the usage that we wanted to continue to disallow","msgtype":"m.text"},"m.relates_to":{"event_id":"$RajQPNR6mFPBcyAA_LL5QMH31JrKG7Sq0-D-wYcpT2k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685522722062,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$QM_A_XV2mDNQ8OR9YENR0atDPlGQZqXcIjOJ-QIyVtM"},
{"content":{"body":"IIRC Ian Hickson allowed ampersands based on feedback within google that there was no harm from using unescaped `&` in e.g. urls. But it only \"works\" for urls in attributes, so it's still brittle. Also the same argument would allow `font` or omitting `</div>`s","format":"org.matrix.custom.html","formatted_body":"IIRC <a href=\"https://matrix.to/#/@hixie:matrix.org\">Ian Hickson</a> allowed ampersands based on feedback within google that there was no harm from using unescaped <code>&amp;</code> in e.g. urls. But it only &quot;works&quot; for urls in attributes, so it's still brittle. Also the same argument would allow <code>font</code> or omitting <code>&lt;/div&gt;</code>s","msgtype":"m.text"},"ts":1685522802537,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$84om6Y68PV5nE0R_Hwt6rtsgR23mA4G-1Vm5bQtm2Wo"},
{"content":{"body":"yeah I guess the possible long-term costs of some of these decisions were hard to foresee at the time","msgtype":"m.text"},"ts":1685522869936,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$5FrR9Ntj3sFfD2eNBpVebxh_F4riFeaHgg7t1Vpcqbc"},
{"content":{"body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","msgtype":"m.text"},"ts":1685523241216,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RISrLVvefoLutKbPE1dk18j-0_8nKBwlnyBLhl_Pzvg"},
{"content":{"body":" * And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":" * And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","m.new_content":{"body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting _behavior_ of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","format":"org.matrix.custom.html","formatted_body":"And incidentally other characteristic of this part of the parser code that makes this really “fun” is that the fact that the state machine in the parser code doesn’t really map very clearly to the state machine in the spec algorithm. Of course the resulting <em>behavior</em> of the parser state machine is intended to be workalike conforming to the spec algorithm — but, in practice, working with that parser code, needing to mentally re-construct the code-to-spec mapping there every time I need to touch that code is not something I look forward to.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RISrLVvefoLutKbPE1dk18j-0_8nKBwlnyBLhl_Pzvg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685523256643,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$WLNBpIe_B4jrPx7gI_VlewSBUMn-A11kzILGLuFRots"},
{"content":{"body":"Anyway, I really wish we had someone else with time and interest in working on the parser maintenance","msgtype":"m.text"},"ts":1685523307364,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$EeBXZaaUKry9QC-kwQJ1xP3rn_pg75S1M53TZ4FZRls"},
{"content":{"body":"sideshowbarker: just rewrite the spec","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: just rewrite the spec","msgtype":"m.text"},"ts":1685523307637,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$Atg7yH1gMVIWdysfN2-aTduvfuTgW_zFfcE7vTyagL8"},
{"content":{"body":"snort","msgtype":"m.text"},"ts":1685523336630,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$ZE4kGdggwBZRQNyZsVFOUn2x_mGLk8yrKBJPUKpTxZs"},
{"content":{"body":"That would definitely help to make the spec algorithm even less maintainable too","msgtype":"m.text"},"ts":1685523367085,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fZA7tDgeHYFQUuF1hQxeE0XbT_NU0XCgl3MibDXNudo"},
{"content":{"body":"Maybe that’s what we want in the end — we want everybody to be afraid to touch that part of the spec ever again","msgtype":"m.text"},"ts":1685523399833,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fWbLXnv-1X8svV2s4HZ_02urFpapIPzNCSNV-HSZrrk"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1685523454587,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$ZbzxRPCfGOvI7PPMOMhiM2xoPHyiz--ryHGGYoHeLUs"},
{"content":{"body":"But do you want to file a spec issue about disallowing &?","msgtype":"m.text"},"ts":1685523506475,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$qBv2OYy73e4n1ND1GiZBGvLNYhw0sYL4HcBlwtnPNpo"},
{"content":{"body":"smaug: hi! trying the understand the concern around https://github.com/whatwg/html/issues/9315. I don't see how it interferes with BFCache snapshots but perhaps I'm missing something","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: hi! trying the understand the concern around https://github.com/whatwg/html/issues/9315. I don't see how it interferes with BFCache snapshots but perhaps I'm missing something","msgtype":"m.text"},"ts":1685523797393,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Cf010YLrneGopViRKFCqOs9h4g_Jo4KajZA9LIu-HlA"},
{"content":{"body":"concern is to postpone when the first paint could happen","msgtype":"m.text"},"ts":1685523852850,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$7KAvrdTvVb7c2IQ73v4Gn5aTtkl1oONDIPz7n_HK_yo"},
{"content":{"body":"If handling the new event takes lots of time, what would UA  paint instead?","msgtype":"m.text"},"ts":1685523889566,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$gd_z8gut12bkyD7KJlLvEatiYH4l2zX1VU4CE_ua7jQ"},
{"content":{"body":"smaug: if there are no view transitions, it can still paint the snapshot","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: if there are no view transitions, it can still paint the snapshot","msgtype":"m.text"},"ts":1685523908137,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$4MzfS9JKZEOWU9tKpSSr510Z-OpnsSICbMG_TyIAPAI"},
{"content":{"body":"what if there are transitions?","msgtype":"m.text"},"ts":1685523924042,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$EuHq-vzVeEj1mkt0OwaXn9kb1dpRBxEQA_CRFfyxjeQ"},
{"content":{"body":"view-transitions are same origin, have a timeout, and in this case it would be the feature :)","msgtype":"m.text"},"ts":1685523932568,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$IIHY1AG1UmKQZh5OYj7mrNFQmRw_Jkhz3Ldg8hqrxlQ"},
{"content":{"body":"if there is a same-origin view transition, it would show the old document until you're done with that event etc","msgtype":"m.text"},"ts":1685523968240,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$GmyrTxSCiO-9lzTQsD4C_VyNsvrVOWWBYbUE-h0SqPY"},
{"content":{"body":"view-transitions are same origin right now, in Google's proposal, but will they always be?","msgtype":"m.text"},"ts":1685524016753,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$-viL1VmH5-4NQk9h_-vzryFnnOYMZo1EpL5TCQ4nbRU"},
{"content":{"body":"smaug: *might* make them same-site at some point, in which case we'll need to make sure the opt-ins hold water","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: <em>might</em> make them same-site at some point, in which case we'll need to make sure the opt-ins hold water","msgtype":"m.text"},"ts":1685524062838,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$rWipEEL9OazIm5yFu4i4LGsHcm-Vr4fzTmUX3vsMU1Y"},
{"content":{"body":"but in any case view-transitions reveal a lot about the old document to the new one","msgtype":"m.text"},"ts":1685524101464,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$sZIKkDQtQrOx3EDOuTJa8TjaXrrVOCvOaEDShIxh6Mw"},
{"content":{"body":"which we'll have to deal with if we ever go to same-site","msgtype":"m.text"},"ts":1685524131347,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$cp5mbnkob6PWTYfyEFGKpr4aMY9ekBvJOT8K_Q5z6lo"},
{"content":{"body":"(cross-site is a non-goal)","msgtype":"m.text"},"ts":1685524144376,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_4ZodeJME7e0aSeAuY_xoWT3LqIjgkkBR_7z9Agmc2c"},
{"content":{"body":"smaug: we're careful not to make choices that would bind us to staying constrained to same-origin. For example we don't expose anything to the old document.\nBut I don't see how this event is one of those features - by the time you get it both documents have opted in","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: we're careful not to make choices that would bind us to staying constrained to same-origin. For example we don't expose anything to the old document.<br>But I don't see how this event is one of those features - by the time you get it both documents have opted in","msgtype":"m.text"},"ts":1685524334696,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Y8ZPgDRdy_60E36UOcAVCpkXhE0Tvz-MCLv5jdUj0uc"},
{"content":{"body":"If the behavior would be very different when ViewTransitions are around, should the event be dispatched only in that case","msgtype":"m.text"},"ts":1685524398126,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$Zyx2VhzeLfN_SDSJTMXY3L215ctAbw7tKUVzIVCqGi4"},
{"content":{"body":"otherwise it would be rather error prone","msgtype":"m.text"},"ts":1685524406124,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$P9di-XOcswb0qWKN_l38wUZAA_j5oka01cOlhvxNlU8"},
{"content":{"body":"that was the original behavior, but in the case of newly-initialized document it's useful also without view transitions","msgtype":"m.text"},"ts":1685524432803,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$v7e1xv6LHehUyUfVhE8B2-Rh7rM0QLl4QydnmCMMIwA"},
{"content":{"body":"without VT one would have a paint before first rAF when coming out of bfcache","msgtype":"m.text"},"ts":1685524437325,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$ZWdzKXlpuZ70mUrHWXI6dAVkP4B0Fsoym59tMGaFTAM"},
{"content":{"body":"I mean the original proposal","msgtype":"m.text"},"ts":1685524438815,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$1h-HusUmDyKMzoXBLwIClPTwlUEc1MR-oxnnpPbpCJo"},
{"content":{"body":" * without VT one would have a paint (painting using the cache) before first rAF when coming out of bfcache","m.new_content":{"body":"without VT one would have a paint (painting using the cache) before first rAF when coming out of bfcache","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZWdzKXlpuZ70mUrHWXI6dAVkP4B0Fsoym59tMGaFTAM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685524469829,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$H1YY9pOIX0L_4Rfg9qY0dWCrXGMWXIcR6Wj52IQOilQ"},
{"content":{"body":"\"without VT one would have a paint (painting using the cache) before first rAF when coming out of bfcache\" - is that specified anywhere?","msgtype":"m.text"},"ts":1685524490076,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$8LW6lj8S8OMFcX1KL2j4RFyqGR4Kb9Gp4mSvFfHU-I8"},
{"content":{"body":"no, but I wouldn't want to let web page to postpone painting when coming out of bfcache","msgtype":"m.text"},"ts":1685524534520,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$rjLD--I3OeEdYvPYe2E5zEqM5NqHULnJYa0wyZXz6Ys"},
{"content":{"body":"that would make bfcache feel slower","msgtype":"m.text"},"ts":1685524542955,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$7mQiiivPjUkFjSBy-VUVZdPymoIQVDylC9TlTZichys"},
{"content":{"body":"yea but it's not a web-exposed feature. it's like showing a splash screen of the previous contents in a way","msgtype":"m.text"},"ts":1685524592342,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$sFEK2va32GkOJP-KYLJ6oQ3KRmharmQRNuvkOVu24Jo"},
{"content":{"body":"like in a page that has a clock you'll show some previous time","msgtype":"m.text"},"ts":1685524629689,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ocdHq3z6g4WB6fEAYCZ9Ocqe7xv1PBMOW0C3SrfRThY"},
{"content":{"body":"yes, and you want to remove that","msgtype":"m.text"},"ts":1685524669551,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$_-7sxVfa3ZqjJm2SXkS_X9Afn0YsU3hdoN97iTV1K5g"},
{"content":{"body":"for VT at least","msgtype":"m.text"},"ts":1685524672763,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$G2g3YxaUBOEqSsrRbt43nLcszrYKvaS05ncBWIjErc0"},
{"content":{"body":"right, but that's unrelated to the event","msgtype":"m.text"},"ts":1685524683183,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$qd085pq48w4IP6Y4ZJCqOl3NOn13hmkEbx_EjNaYNh4"},
{"content":{"body":"I'm confused","msgtype":"m.text"},"ts":1685524694687,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$KVPUACXFqbv7SilyZDlera2AIO826nCc2caiEVZ407Q"},
{"content":{"body":"You want a new event which fires before first paint after activation. How is the event not related to the first paint?","msgtype":"m.text"},"ts":1685524760625,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$XrosFrhfeVhTlkhIhpR8Pe2lvFkdQ8BNvnLOYa7RJRg"},
{"content":{"body":"think of it as:\n- if (!has-transition) { showStaleSnapshot() } else { showOldDocument() } \n- fire reveal event\n- fire pageshow","format":"org.matrix.custom.html","formatted_body":"<p>think of it as:</p>\n<ul>\n<li>if (!has-transition) { showStaleSnapshot() } else { showOldDocument() }</li>\n<li>fire reveal event</li>\n<li>fire pageshow</li>\n</ul>\n","msgtype":"m.text"},"ts":1685524769255,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$oGK8m30NUP_M4aI71GWgmAONcvd9p5ngK54EbNnGZQM"},
{"content":{"body":"the main \"novelty\" of this event is how it behaves on initial load. As far as reactivating is concerned, it's the same as pageshow","msgtype":"m.text"},"ts":1685524823491,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$AT9QNDTWHIUFv9ZlZkzWclRz2JOhdY7l7N1pEpqK7D4"},
{"content":{"body":"I guess pageshow is confusing here, since this is also about page  load, and pageshow may fire way after the initial paint","msgtype":"m.text"},"ts":1685524836205,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$MeGxlPrUTAgaVgpx5tbpknOfVVhlmzCOQdzAhBzm0yw"},
{"content":{"body":"I don't see showing the stale snapshot as a \"paint\"","msgtype":"m.text"},"ts":1685524837877,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ZH_Ncr7C3rgdllKzDvW5WX6r-cEJswgrmwWq0sztxhk"},
{"content":{"body":"it's not a paint in web-standards term","msgtype":"m.text"},"ts":1685524857002,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$KoF48RW9rwQuJII-9g-PlwwKO-SBByskBWOM3ih0tMM"},
{"content":{"body":"it is from the user's point of view.","msgtype":"m.text"},"ts":1685524870260,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$_i36QePszHLshrlD7m95qcL0uoig787Vqb5Yn0qXTCM"},
{"content":{"body":"hmm we can call it the first rendering update","msgtype":"m.text"},"ts":1685524910465,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$hMNnFqhSPErmg08K_C5wIKvMMNmLMlDidHRH7epiHX4"},
{"content":{"body":"the first non-stale paint","msgtype":"m.text"},"ts":1685524926419,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$80BHkGbOaFlaIV3N8-Pm5RAp9F7-aOijDkFM8nNKwg0"},
{"content":{"body":"So for VT case how is reveal event different to having a rAF callback?","msgtype":"m.text"},"ts":1685525047682,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$xmi3896lea6AiP-tyFMlV0uJ8PdR8MTaq2hZSTUi1Ug"},
{"content":{"body":"it's not too different from putting a rAF callback in the head + pageshow, but it fires before \"update the rendering\" phase","msgtype":"m.text"},"ts":1685525119031,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$RD2KncHJAjiv0Scl2VgSQgZHLD3k3t8HMokTiTIOKyM"},
{"content":{"body":"and why is that important?","msgtype":"m.text"},"ts":1685525141597,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$-xnGGPmPdvHVtC79lFSGmpvrO-52WgOuwVHxNwJQ-hg"},
{"content":{"body":"it's more equivalent to putting onload on all your render-blocking scripts and styles + pageshow","msgtype":"m.text"},"ts":1685525144250,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_CUbQW8nxG9URrFbhrBUAEyJmOneeO3mAe4oZIQIxn0"},
{"content":{"body":"er, why pageshow","msgtype":"m.text"},"ts":1685525149781,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$bp_w1w-Tk4kA2LA3Ac0ygqlx1eiK19cFAC49TG2LRBI"},
{"content":{"body":"this is \"your page's rendering is about to be displayed for the first time\"","msgtype":"m.text"},"ts":1685525190308,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_8ZGLJDR7sAlcOKm-iMDySfP331g8oGYp4FN0Q9ra0Y"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1685525195798,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$Vw5DsJ2NX3on1oZ5uIQj6qavXRUad9KJ9imzN80l8sE"},
{"content":{"body":"so you add a rAF callback","msgtype":"m.text"},"ts":1685525204557,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$5gbOgN7cmHPwWPRF4FS2DrwtDdz6UmrJBLu2CpVpXIc"},
{"content":{"body":"Why you need a new event to fire just before first \"update the rendering\", and not use the existing mechanism to get callbacks called during \"update the rendering\"?","msgtype":"m.text"},"ts":1685525326830,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$nuuOvs0K1bbH11hp5r-9Cvyc2hxUDMvgxiz7GY7rXTQ"},
{"content":{"body":"but then you need to add that rAF callback also on page show","msgtype":"m.text"},"ts":1685525358833,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$KRdl0ot-GmUHF0leY4iYzVOQ5jFRqYbPm4_MopdAfEQ"},
{"content":{"body":"it's easy to miss that. you build your webpage in a way that works on first load, and then it breaks on BFCache restore","msgtype":"m.text"},"ts":1685525392785,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$XocxZXtisfb4e7T6IT868jmp34c8VILZTIWXxSI-Hd4"},
{"content":{"body":"And how is adding a raf callback different to adding an event listener?","msgtype":"m.text"},"ts":1685525396673,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$2cxGydq8ehoh5n7C4_c6HMmEvCtBOznownfHxxhRMBo"},
{"content":{"body":"it's about doing it once vs doing it twice","msgtype":"m.text"},"ts":1685525409715,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$eR0pCnepctsHg0RO6B7xKDvVMMzVHXFYgUm3W-3H2Gs"},
{"content":{"body":"in the VT case, it allows us to put a VT object reference in the event object. so this would be the only time where you can, for example, skip an incoming VT or listen to when it's finished.","msgtype":"m.text"},"ts":1685525468003,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$r9alS2GF0FsSADcBgCeEaf7IFFYgxpxQBPAm9uUUka4"},
{"content":{"body":"I mean, we could have a VT-specific event for this and use the first rAF for other cases, but we thought it might be a useful event regardless of VT. Yoav Weiss you said something about having another use case for this?","format":"org.matrix.custom.html","formatted_body":"I mean, we could have a VT-specific event for this and use the first rAF for other cases, but we thought it might be a useful event regardless of VT. <a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a> you said something about having another use case for this?","msgtype":"m.text"},"ts":1685525617163,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$gY134GYTWonEAG8hiLc8MJSsTY5vozutrC_FBExArSI"},
{"content":{"body":"VT object reference in the event, that is not something proposed in the issue","msgtype":"m.text"},"ts":1685525623749,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$sS7qjL3_YTiq0aJIxUAqUiEM_nZGewctKYyPs4lDHeE"},
{"content":{"body":"Yea when I proposed it I was thinking of having a `document.pendingTransition` instead. I will update the proposal","format":"org.matrix.custom.html","formatted_body":"Yea when I proposed it I was thinking of having a <code>document.pendingTransition</code> instead. I will update the proposal","msgtype":"m.text"},"ts":1685525681228,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$tkgWgDWHqcsCBG-wUbUVVQezUyLS7kcuwxukf8L9mVo"},
{"content":{"body":"smaug: the cross-document view transition spec is in the making, and we noticed that this lifecycle event is somewhat missing (you have to register it twice, as first rAF+pageshow) so we wanted to discuss it as a general benefit rather than just in the context of VT. Trying to avoid having an event-per-CSS-feature, but if that's what we end up with it's also OK","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: the cross-document view transition spec is in the making, and we noticed that this lifecycle event is somewhat missing (you have to register it twice, as first rAF+pageshow) so we wanted to discuss it as a general benefit rather than just in the context of VT. Trying to avoid having an event-per-CSS-feature, but if that's what we end up with it's also OK","msgtype":"m.text"},"ts":1685525849582,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$QoMK58fmiKjWKqm0SONH7Z1Sm4osKb18qAHJtFSCNhg"},
{"content":{"body":"Well, better to understand the context here, and I wasn't aware that something might be added to the event itself","msgtype":"m.text"},"ts":1685525928130,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$uy61GGSF-4nHpci6fvGqkQp2y8BurITq58UH_w_Y4BM"},
{"content":{"body":"Since that might make the event more useful","msgtype":"m.text"},"ts":1685525959787,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$fWwhkyhOYHUjIOvyuplMkUII4jJ5KfvmDw4TiK2PvFA"},
{"content":{"body":"right now it feels more like minor helper event for things which can be done easily without making the platform even more complicated","msgtype":"m.text"},"ts":1685525997169,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$oJwIkHpxaWQJq0G60LMb89i3zWsWyuoRlzG2ICgkrnQ"},
{"content":{"body":"smaug: good point","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: good point","msgtype":"m.text"},"ts":1685526061258,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$jcur6cW3cm9Nvx8_7yw0SfR-baxtggCM3k4nZEnW6wQ"},
{"content":{"body":"... updated the OP","msgtype":"m.text"},"ts":1685526290632,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$m5WRKPVho1TG2n8Pnjg5kW1mY_MLlfX2pkCLbwCZ8gg"},
{"content":{"body":"is a *full* name required for the participant agreement? I don't feel exactly comfortable having my full name public atm (but is somewhat understandable)","msgtype":"m.text"},"ts":1685531938468,"senderName":"canadahonk","senderId":"@canada_goose:mozilla.org","id":"$TEHbiKCsTl-GoIP4_q0m0A0CrouRtvdfaH8cqfU6pps"},
{"content":{"body":"canadahonk: unfortunately, yes: https://github.com/whatwg/sg/issues/93#issuecomment-1120799691","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canada_goose:mozilla.org\">canadahonk</a>: unfortunately, yes: https://github.com/whatwg/sg/issues/93#issuecomment-1120799691","msgtype":"m.text"},"ts":1685532469357,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$a2Fl9Y1qcPU2A7_4qtxf7isk9HIQEGY1MzLr3K-WTwM"},
{"content":{"body":"canadahonk: now having said that, if you happen to work for an entity that is already part of the WHATWG that doesn't apply","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canada_goose:mozilla.org\">canadahonk</a>: now having said that, if you happen to work for an entity that is already part of the WHATWG that doesn't apply","msgtype":"m.text"},"ts":1685532508224,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$KS6gSTfGbWkdNQ2RtIhY7YRl0FYM9bNYpJQy0FWya1g"},
{"content":{"body":"canadahonk: as your contributions would be on behalf of that entity, but I'm not sure if that applies to you or not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canada_goose:mozilla.org\">canadahonk</a>: as your contributions would be on behalf of that entity, but I'm not sure if that applies to you or not","msgtype":"m.text"},"ts":1685532527475,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$9q2Kzkl72yNhySqoalftj8Iy5L6yzrgy_J7q8d4ngOg"},
{"content":{"body":"WebIDL's \"upon fulfillment\" queues a microtask for you, right? (It seems to call into TC39 land which call the host enqueue promise job algo). Only reason I'm not sure is because I see some specs explicitly queue a microtask themselves: https://w3c.github.io/ServiceWorker/#ref-for-upon-fulfillment","msgtype":"m.text"},"ts":1685532735539,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$3fBpFf2d1Nhlz5DAa1lD3-6dyw_F7Ypwr_j3syXhEU0"},
{"content":{"body":"> <@domfarolino:matrix.org> WebIDL's \"upon fulfillment\" queues a microtask for you, right? (It seems to call into TC39 land which call the host enqueue promise job algo). Only reason I'm not sure is because I see some specs explicitly queue a microtask themselves: https://w3c.github.io/ServiceWorker/#ref-for-upon-fulfillment\n\nMaybe WebIDL should have a note indicating that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$3fBpFf2d1Nhlz5DAa1lD3-6dyw_F7Ypwr_j3syXhEU0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domfarolino:matrix.org\">@domfarolino:matrix.org</a><br>WebIDL&#39;s &quot;upon fulfillment&quot; queues a microtask for you, right? (It seems to call into TC39 land which call the host enqueue promise job algo). Only reason I&#39;m not sure is because I see some specs explicitly queue a microtask themselves: https://w3c.github.io/ServiceWorker/#ref-for-upon-fulfillment</blockquote></mx-reply>Maybe WebIDL should have a note indicating that","m.relates_to":{"m.in_reply_to":{"event_id":"$3fBpFf2d1Nhlz5DAa1lD3-6dyw_F7Ypwr_j3syXhEU0"}},"msgtype":"m.text"},"ts":1685533290216,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$zUstJH0ekBsETC5rNhidKhwWelAonAX3ekYmxRF3_0w"},
{"content":{"body":"👍️ I'll get a PR together","msgtype":"m.text"},"ts":1685533327865,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$SBodBG0s5C-fihh1ULX29atrSk1RRqnDZhWxfz6nRQ4"},
{"content":{"body":"I was gonna do it myself, but sure","msgtype":"m.text"},"ts":1685533340427,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$C8t5HOBZHrHOHHAXe4ZGe-4WUSsrK_TT7C4uwKNfPNI"},
{"content":{"body":"That said, there might be observable behavior differences if you didn't queue a microtask in those specs","msgtype":"m.text"},"ts":1685533416021,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$KD3mg8iGFFm1fjMcogUAR1Uiw-WVUgpXpiwB2NYZhmc"},
{"content":{"body":"since the microtask queue is FIFO and any microtasks enqueued between the time the promise resolves and the time the \"upon fulfillment\" steps run would run before the microtask that actually does the reaction work","msgtype":"m.text"},"ts":1685533500104,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Xa-ETzP4s8T3ctdAA-ngEv_kEsHdE_D87-e7u5TLvb0"}
]