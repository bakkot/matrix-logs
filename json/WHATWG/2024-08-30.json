[
{"content":{"body":"Why does the HTML spec fire some events without their defined constructor?\n\nWhat I means is: When specifying firing of events, in some places in the spec it states the event constructor with *“using”,* like this:\n> *fire an event named `hashchange` at document's relevant global object, **using `HashChangeEvent`***\n…and in other places it’s stated without *“using”*\n>  fire an event named `input` at the element, with the `bubbles` and `composed` attributes initialized to true.\n\nSo given that, when that `input` event is fired, the `Event` constructor is used — because the caller doesn’t have a *“using”* statement.\n\nBut the `input` event have an `InputEvent` constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the `input` event?\n\n","format":"org.matrix.custom.html","formatted_body":"<p>Why does the HTML spec fire some events without their defined constructor?</p>\n<p>What I means is: When specifying firing of events, in some places in the spec it states the event constructor with <em>“using”,</em> like this:</p>\n<blockquote>\n<p><em>fire an event named <code>hashchange</code> at document's relevant global object, <strong>using <code>HashChangeEvent</code></strong></em><br>…and in other places it’s stated without <em>“using”</em><br>fire an event named <code>input</code> at the element, with the <code>bubbles</code> and <code>composed</code> attributes initialized to true.</p>\n</blockquote>\n<p>So given that, when that <code>input</code> event is fired, the <code>Event</code> constructor is used — because the caller doesn’t have a <em>“using”</em> statement.</p>\n<p>But the <code>input</code> event have an <code>InputEvent</code> constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the <code>input</code> event?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724997506698,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Q80_3m6wD3jDHExxMqNBjyd3VF6LNgWfepHHXd4OQRY"},
{"content":{"body":" * Why does the HTML spec fire some events without their defined constructor?\n\nWhat I means is: When specifying firing of events, in some places in the spec it states the event constructor with _“using”,_ like this:\n\n> _fire an event named `hashchange` at document's relevant global object, **using `HashChangeEvent`**_\n\n…and in other places it’s stated without _“using”_\n\n> fire an event named `input` at the element, with the `bubbles` and `composed` attributes initialized to true.\n\nSo given that, when that `input` event is fired, the `Event` constructor is used — because the caller doesn’t have a _“using”_ statement.\n\nBut the `input` event have an `InputEvent` constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the `input` event?","format":"org.matrix.custom.html","formatted_body":" * <p>Why does the HTML spec fire some events without their defined constructor?</p>\n<p>What I means is: When specifying firing of events, in some places in the spec it states the event constructor with <em>“using”,</em> like this:</p>\n<blockquote>\n<p><em>fire an event named <code>hashchange</code> at document's relevant global object, <strong>using <code>HashChangeEvent</code></strong></em></p>\n</blockquote>\n<p>…and in other places it’s stated without <em>“using”</em></p>\n<blockquote>\n<p>fire an event named <code>input</code> at the element, with the <code>bubbles</code> and <code>composed</code> attributes initialized to true.</p>\n</blockquote>\n<p>So given that, when that <code>input</code> event is fired, the <code>Event</code> constructor is used — because the caller doesn’t have a <em>“using”</em> statement.</p>\n<p>But the <code>input</code> event have an <code>InputEvent</code> constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the <code>input</code> event?</p>\n","m.mentions":{},"m.new_content":{"body":"Why does the HTML spec fire some events without their defined constructor?\n\nWhat I means is: When specifying firing of events, in some places in the spec it states the event constructor with _“using”,_ like this:\n\n> _fire an event named `hashchange` at document's relevant global object, **using `HashChangeEvent`**_\n\n…and in other places it’s stated without _“using”_\n\n> fire an event named `input` at the element, with the `bubbles` and `composed` attributes initialized to true.\n\nSo given that, when that `input` event is fired, the `Event` constructor is used — because the caller doesn’t have a _“using”_ statement.\n\nBut the `input` event have an `InputEvent` constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the `input` event?","format":"org.matrix.custom.html","formatted_body":"<p>Why does the HTML spec fire some events without their defined constructor?</p>\n<p>What I means is: When specifying firing of events, in some places in the spec it states the event constructor with <em>“using”,</em> like this:</p>\n<blockquote>\n<p><em>fire an event named <code>hashchange</code> at document's relevant global object, <strong>using <code>HashChangeEvent</code></strong></em></p>\n</blockquote>\n<p>…and in other places it’s stated without <em>“using”</em></p>\n<blockquote>\n<p>fire an event named <code>input</code> at the element, with the <code>bubbles</code> and <code>composed</code> attributes initialized to true.</p>\n</blockquote>\n<p>So given that, when that <code>input</code> event is fired, the <code>Event</code> constructor is used — because the caller doesn’t have a <em>“using”</em> statement.</p>\n<p>But the <code>input</code> event have an <code>InputEvent</code> constructor defined in the UI Events spec at https://w3c.github.io/uievents/#inputevent. Why doesn’t the HTML spec state that constructor must be used when firing the <code>input</code> event?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Q80_3m6wD3jDHExxMqNBjyd3VF6LNgWfepHHXd4OQRY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724997524585,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$mtyVuSNr1nZdWKR78rNrJGediByp99r3PaTa-jerYTI"},
{"content":{"body":"sideshowbarker: the default is `Event` - are you sure these cases use `InputEvent` in practice? (https://dom.spec.whatwg.org/#firing-events)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: the default is <code>Event</code> - are you sure these cases use <code>InputEvent</code> in practice? (https://dom.spec.whatwg.org/#firing-events)","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1725000806945,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$lSTXLaTIxL2AzmVPol0B1YvFFup6XPpd_om5Laabxgw"},
{"content":{"body":"sideshowbarker: https://software.hixie.ch/utilities/js/live-dom-viewer/saved/13038 - I suppose `InputEvent` is used for inputting text, and `Event` is used for other cases","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: https://software.hixie.ch/utilities/js/live-dom-viewer/saved/13038 - I suppose <code>InputEvent</code> is used for inputting text, and <code>Event</code> is used for other cases","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1725003487470,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$Tm7-PhEhsaCZB80UcboGlAmLpCFguQaP90pKHPRrvjw"},
{"content":{"body":"> <@ms2ger:igalia.com> sideshowbarker: the default is `Event` - are you sure these cases use `InputEvent` in practice? (https://dom.spec.whatwg.org/#firing-events)\n\nNo, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:\n> [Queue an element task](https://html.spec.whatwg.org/#queue-an-element-task) on the [user interaction task source](https://html.spec.whatwg.org/#user-interaction-task-source) given the element to [fire an event](https://dom.spec.whatwg.org/#concept-event-fire) named [input](https://w3c.github.io/uievents/#event-type-input) at the element, with the [bubbles](https://dom.spec.whatwg.org/#dom-event-bubbles) and [composed](https://dom.spec.whatwg.org/#dom-event-composed) attributes initialized to true.\n…where [input](https://w3c.github.io/uievents/#event-type-input) is a link to the UI events definition of an `input` event with an `InputEvent`. But then despite that, the spec doesn’t state the event must be constructed with that `InputEvent` interface","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$lSTXLaTIxL2AzmVPol0B1YvFFup6XPpd_om5Laabxgw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ms2ger:igalia.com\">@ms2ger:igalia.com</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: the default is <code>Event</code> - are you sure these cases use <code>InputEvent</code> in practice? (https://dom.spec.whatwg.org/#firing-events)</blockquote></mx-reply><p>No, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:</p>\n<blockquote>\n<p><a href=\"https://html.spec.whatwg.org/#queue-an-element-task\">Queue an element task</a> on the <a href=\"https://html.spec.whatwg.org/#user-interaction-task-source\">user interaction task source</a> given the element to <a href=\"https://dom.spec.whatwg.org/#concept-event-fire\">fire an event</a> named <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> at the element, with the <a href=\"https://dom.spec.whatwg.org/#dom-event-bubbles\">bubbles</a> and <a href=\"https://dom.spec.whatwg.org/#dom-event-composed\">composed</a> attributes initialized to true.<br>…where <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> is a link to the UI events definition of an <code>input</code> event with an <code>InputEvent</code>. But then despite that, the spec doesn’t state the event must be constructed with that <code>InputEvent</code> interface</p>\n</blockquote>\n","m.mentions":{"user_ids":["@ms2ger:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lSTXLaTIxL2AzmVPol0B1YvFFup6XPpd_om5Laabxgw"}},"msgtype":"m.text"},"ts":1725004124780,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$lJEc78QuBWvk2xp4N0XB69JH-BWWWN247LE0nqsjTe8"},
{"content":{"body":"> <@ms2ger:igalia.com> sideshowbarker: the default is `Event` - are you sure these cases use `InputEvent` in practice? (https://dom.spec.whatwg.org/#firing-events)\n\n * No, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:\n\n> [Queue an element task](https://html.spec.whatwg.org/#queue-an-element-task) on the [user interaction task source](https://html.spec.whatwg.org/#user-interaction-task-source) given the element to [fire an event](https://dom.spec.whatwg.org/#concept-event-fire) named [input](https://w3c.github.io/uievents/#event-type-input) at the element, with the [bubbles](https://dom.spec.whatwg.org/#dom-event-bubbles) and [composed](https://dom.spec.whatwg.org/#dom-event-composed) attributes initialized to true.\n>\n…where [input](https://w3c.github.io/uievents/#event-type-input) is a link to the UI events definition of an `input` event with an `InputEvent`. But then despite that, the spec doesn’t state the event must be constructed with that `InputEvent` interface","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$lSTXLaTIxL2AzmVPol0B1YvFFup6XPpd_om5Laabxgw?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ms2ger:igalia.com\">@ms2ger:igalia.com</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: the default is <code>Event</code> - are you sure these cases use <code>InputEvent</code> in practice? (https://dom.spec.whatwg.org/#firing-events)</blockquote></mx-reply> * <p>No, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:</p>\n<blockquote>\n<p><a href=\"https://html.spec.whatwg.org/#queue-an-element-task\">Queue an element task</a> on the <a href=\"https://html.spec.whatwg.org/#user-interaction-task-source\">user interaction task source</a> given the element to <a href=\"https://dom.spec.whatwg.org/#concept-event-fire\">fire an event</a> named <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> at the element, with the <a href=\"https://dom.spec.whatwg.org/#dom-event-bubbles\">bubbles</a> and <a href=\"https://dom.spec.whatwg.org/#dom-event-composed\">composed</a> attributes initialized to true.</p>\n</blockquote>\n<p>…where <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> is a link to the UI events definition of an <code>input</code> event with an <code>InputEvent</code>. But then despite that, the spec doesn’t state the event must be constructed with that <code>InputEvent</code> interface</p>\n","m.mentions":{},"m.new_content":{"body":"No, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:\n\n> [Queue an element task](https://html.spec.whatwg.org/#queue-an-element-task) on the [user interaction task source](https://html.spec.whatwg.org/#user-interaction-task-source) given the element to [fire an event](https://dom.spec.whatwg.org/#concept-event-fire) named [input](https://w3c.github.io/uievents/#event-type-input) at the element, with the [bubbles](https://dom.spec.whatwg.org/#dom-event-bubbles) and [composed](https://dom.spec.whatwg.org/#dom-event-composed) attributes initialized to true.\n>\n…where [input](https://w3c.github.io/uievents/#event-type-input) is a link to the UI events definition of an `input` event with an `InputEvent`. But then despite that, the spec doesn’t state the event must be constructed with that `InputEvent` interface","format":"org.matrix.custom.html","formatted_body":"<p>No, I wasn’t sure — it just seemed odd that https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search):user-interaction-task-source has this:</p>\n<blockquote>\n<p><a href=\"https://html.spec.whatwg.org/#queue-an-element-task\">Queue an element task</a> on the <a href=\"https://html.spec.whatwg.org/#user-interaction-task-source\">user interaction task source</a> given the element to <a href=\"https://dom.spec.whatwg.org/#concept-event-fire\">fire an event</a> named <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> at the element, with the <a href=\"https://dom.spec.whatwg.org/#dom-event-bubbles\">bubbles</a> and <a href=\"https://dom.spec.whatwg.org/#dom-event-composed\">composed</a> attributes initialized to true.</p>\n</blockquote>\n<p>…where <a href=\"https://w3c.github.io/uievents/#event-type-input\">input</a> is a link to the UI events definition of an <code>input</code> event with an <code>InputEvent</code>. But then despite that, the spec doesn’t state the event must be constructed with that <code>InputEvent</code> interface</p>\n","m.mentions":{"user_ids":["@ms2ger:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lJEc78QuBWvk2xp4N0XB69JH-BWWWN247LE0nqsjTe8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725004135544,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Syr1LRIAmQ1pUQwUKvGmLjrJvYaZ1fYUrIo2QREdcq8"},
{"content":{"body":"Ugh, that's needlessly confusing. https://html.spec.whatwg.org/multipage/indices.html#events-2 does say it uses Event, though","m.mentions":{},"msgtype":"m.text"},"ts":1725004245194,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$VGdmUC6HHtg4c6fRVAvkdR0p2fDqHrFcwWdIkDrrcmY"},
{"content":{"body":"Seems worth an issue","m.mentions":{},"msgtype":"m.text"},"ts":1725004298385,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$qDAZhLM3Sew3CJasof6AJSB9bYGGm8F3lp3S9bCNMe0"},
{"content":{"body":"https://html.spec.whatwg.org/#fetching-and-processing-a-resource-from-a-link-element says \"They also have linked resource fetch setup steps which ..., but unless explicitly stated, they use the default fetch and process the linked resource algorithm.\".  How can I see which (or what kind of) case uses the \"default\" one and which case doesn't?  Is there a list of \"non-default\" cases?  I'm currently trying to figure out how `<link rel=\"stylesheet\" ...>` interacts with cache, and investigating how things work in general as a first step.","format":"org.matrix.custom.html","formatted_body":"https://html.spec.whatwg.org/#fetching-and-processing-a-resource-from-a-link-element says \"They also have linked resource fetch setup steps which ..., but unless explicitly stated, they use the default fetch and process the linked resource algorithm.\".  How can I see which (or what kind of) case uses the \"default\" one and which case doesn't?  Is there a list of \"non-default\" cases?  I'm currently trying to figure out how <code>&lt;link rel=\"stylesheet\" ...&gt;</code> interacts with cache, and investigating how things work in general as a first step.","m.mentions":{},"msgtype":"m.text"},"ts":1725008555768,"senderName":"arai","senderId":"@arai:mozilla.org","id":"$d49QMOKqup5StCACLg0CcBYGWJN8PZ3lTueua1_eWps"},
{"content":{"body":"oh, looks like clicking the \" linked resource fetch setup steps\" text shows a popup with references, and there are 3 cases (icon/manifest/stylesheet) listed.  is that all?  or can there be any other cases?","m.mentions":{},"msgtype":"m.text"},"ts":1725008734730,"senderName":"arai","senderId":"@arai:mozilla.org","id":"$K1fn8bhcgrJ3P1d7ZvqHSNGKBLMKxzMwtmPpz9E0P2E"},
{"content":{"body":"arai: that should be exhaustive","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@arai:mozilla.org\">arai</a>: that should be exhaustive","m.mentions":{"user_ids":["@arai:mozilla.org"]},"msgtype":"m.text"},"ts":1725008808432,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$A-XS_LrlDYB7QuBnZIfdZXirSHAk3tpISnCBaCkFQjg"},
{"content":{"body":"okay, thank you :D","m.mentions":{},"msgtype":"m.text"},"ts":1725008821914,"senderName":"arai","senderId":"@arai:mozilla.org","id":"$VS3Yi9zr_XJkMhBIjEFZPDKoAnLpjJuukzAtLuE03Lg"},
{"content":{"body":"So I notice that the Event code in WebKit sets `isTrusted` (to true by default) in the Event _constructor_ — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that `isTrusted` is set to true in the “creating an event” operation, not in the constructing an event” operation.\n\nNevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec — since WebKit passes whatever the relevant tests in WPT are.\n\nSo… Is it actually expected that setting `isTrusted` in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where `isTrusted` is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?","format":"org.matrix.custom.html","formatted_body":"<p>So I notice that the Event code in WebKit sets <code>isTrusted</code> (to true by default) in the Event <em>constructor</em> — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that <code>isTrusted</code> is set to true in the “creating an event” operation, not in the constructing an event” operation.</p>\n<p>Nevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec —&nbsp;since WebKit passes whatever the relevant tests in WPT are.</p>\n<p>So… Is it actually expected that setting <code>isTrusted</code> in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where <code>isTrusted</code> is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1725010050957,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Dygz16F6d7kBmr7Jd0XJtHDSrhz8YXsbcieSHRJdhrs"},
{"content":{"body":"Relevant part of the DOM spec is <https://dom.spec.whatwg.org/#constructing-events>","format":"org.matrix.custom.html","formatted_body":"Relevant part of the DOM spec is <a href=\"https://dom.spec.whatwg.org/#constructing-events\">https://dom.spec.whatwg.org/#constructing-events</a>","m.mentions":{},"msgtype":"m.text"},"ts":1725010095924,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$heUMsz18KXVsXajv4o0jlVmSgpJE8sLmsbjQOrCnSME"},
{"content":{"body":" * So I notice that the Event code in WebKit sets `isTrusted` (to true by default) in the Event _constructor_ — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that `isTrusted` is set to true in the “creating an event” operation, not in the “constructing an event” operation.\n\nNevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec — since WebKit passes whatever the relevant tests in WPT are.\n\nSo… Is it actually expected that setting `isTrusted` in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where `isTrusted` is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?","format":"org.matrix.custom.html","formatted_body":" * <p>So I notice that the Event code in WebKit sets <code>isTrusted</code> (to true by default) in the Event <em>constructor</em> — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that <code>isTrusted</code> is set to true in the “creating an event” operation, not in the “constructing an event” operation.</p>\n<p>Nevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec —&nbsp;since WebKit passes whatever the relevant tests in WPT are.</p>\n<p>So… Is it actually expected that setting <code>isTrusted</code> in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where <code>isTrusted</code> is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?</p>\n","m.mentions":{},"m.new_content":{"body":"So I notice that the Event code in WebKit sets `isTrusted` (to true by default) in the Event _constructor_ — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that `isTrusted` is set to true in the “creating an event” operation, not in the “constructing an event” operation.\n\nNevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec — since WebKit passes whatever the relevant tests in WPT are.\n\nSo… Is it actually expected that setting `isTrusted` in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where `isTrusted` is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?","format":"org.matrix.custom.html","formatted_body":"<p>So I notice that the Event code in WebKit sets <code>isTrusted</code> (to true by default) in the Event <em>constructor</em> — despite the DOM spec making a clear distinction between the “constructing an event” operation and the “creating an event” operation. And the spec states that that <code>isTrusted</code> is set to true in the “creating an event” operation, not in the “constructing an event” operation.</p>\n<p>Nevertheless, it’d seem like the observable behavior in WebKit must be conforming to the spec —&nbsp;since WebKit passes whatever the relevant tests in WPT are.</p>\n<p>So… Is it actually expected that setting <code>isTrusted</code> in the Event constructor will have the same observable effect at setting in the implementation of the “create an event” operation? And if so, the separation about where <code>isTrusted</code> is set is something that exists in the spec for some reason but doesn’t actually get exercised in practice by all calling operations?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Dygz16F6d7kBmr7Jd0XJtHDSrhz8YXsbcieSHRJdhrs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725010125177,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$yCp5VupGOzrrMvtO2tvbo9_Bl7ln261_UbeomPufOHI"},
{"content":{"body":"I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set `isTrusted` in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation) — which I can imagine is the reason why WebKit implemented that way","format":"org.matrix.custom.html","formatted_body":"I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set <code>isTrusted</code> in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation) —&nbsp;which I can imagine is the reason why WebKit implemented that way","m.mentions":{},"msgtype":"m.text"},"ts":1725010280007,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$BJK7suB1bkonllIzCAbXE-hpgAOcYkpjMqY3wcg7Tz4"},
{"content":{"body":"Though I can also imagine it was implemented that way in WebKit in a time long ago — and maybe before this separation between the operations existed in the DOM spec, which perhaps got added later","m.mentions":{},"msgtype":"m.text"},"ts":1725010388665,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$CQodLi0rYM-3GIag9U8oiKHBNLzEUuj9s8duwvrE7S4"},
{"content":{"body":" * I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set `isTrusted` in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation) — which I can imagine is the reason why WebKit implemented that way","format":"org.matrix.custom.html","formatted_body":" * I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set <code>isTrusted</code> in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation)&nbsp;—&nbsp;which I can imagine is the reason why WebKit implemented that way","m.mentions":{},"m.new_content":{"body":"I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set `isTrusted` in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation) — which I can imagine is the reason why WebKit implemented that way","format":"org.matrix.custom.html","formatted_body":"I ask this because I have found that in writing a new implementation, it‘s a lot easier, implementation-wise, to set <code>isTrusted</code> in the code for the Event::Event constructor than it is to set in and Event::create code (“create an event” operation)&nbsp;—&nbsp;which I can imagine is the reason why WebKit implemented that way","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BJK7suB1bkonllIzCAbXE-hpgAOcYkpjMqY3wcg7Tz4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725010426337,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$3WcYgy9EqhndGoHS42UhHHWxW_2udH6pT8Wa6oBEIVQ"},
{"content":{"body":"I think it's not observable","m.mentions":{},"msgtype":"m.text"},"ts":1725010584723,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$t3HUa4ecfY4Ww5CoJ0Am-wh_E09JyPC06UDbfc_ld6A"},
{"content":{"body":"OK","m.mentions":{},"msgtype":"m.text"},"ts":1725010595610,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$sY3x3ULiBLFzUtxsyT-Tk6U_V8BNAVAMQ_9NOW_EE70"},
{"content":{"body":"https://software.hixie.ch/utilities/js/live-dom-viewer/?%3Cscript%3E%0Aw(new%20Event(%27x%27).isTrusted)%0A%3C%2Fscript%3E shows it as false, so I suspect what WebKit does is a bit more involved.","m.mentions":{},"msgtype":"m.text"},"ts":1725010627516,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$VjnYCY-Oymdk_Q1bN9PLnj3KAglfwZiZ6nVOu9xmC7k"},
{"content":{"body":"It’s false for synthetic events","m.mentions":{},"msgtype":"m.text"},"ts":1725010657872,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$7JrjgAgvgF3kyaFd9WA5ZSi2jzlDf3lZEatEshkEhhU"},
{"content":{"body":"So in cases where it‘s false in WebKit, the calling code must be setting it to false when constructing","m.mentions":{},"msgtype":"m.text"},"ts":1725010714787,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$gzB1pQBsV7jcFAk5e5CZ3UHp6dApShr-aS5-p_oya04"},
{"content":{"body":"Not sure what you mean by constructor if that case doesn't cover it.","m.mentions":{},"msgtype":"m.text"},"ts":1725010723579,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$9fstL-eCclQL1xf2MKJk6-ghEozFTvDL769eAuB1aPg"}
]