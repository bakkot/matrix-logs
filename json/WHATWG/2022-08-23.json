[
{"content":{"body":"Are there plans to allow the pseudo-element `content` prop to use `var()` in its value - so I can set a piece of content much higher in the DOM chain and display it?","format":"org.matrix.custom.html","formatted_body":"Are there plans to allow the pseudo-element <code>content</code> prop to use <code>var()</code> in its value - so I can set a piece of content much higher in the DOM chain and display it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there plans to allow the pseudo-element `content` prop to use `var()` in its value - so I can set a piece of content much higher in the DOM chain and display it?","mimetype":"text/plain"},{"body":"Are there plans to allow the pseudo-element <code>content</code> prop to use <code>var()</code> in its value - so I can set a piece of content much higher in the DOM chain and display it?","mimetype":"text/html"}]},"ts":1661222360529,"senderName":"Lorin","senderId":"@alystair:matrix.org","id":"$vlaiWL7zc0FHYT26YrFJ9qg0Iun8mpFbb0JbNHNBarw"},
{"content":{"body":"at the moment it's a bit limited with just `attr()`","format":"org.matrix.custom.html","formatted_body":"at the moment it's a bit limited with just <code>attr()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"at the moment it's a bit limited with just `attr()`","mimetype":"text/plain"},{"body":"at the moment it's a bit limited with just <code>attr()</code>","mimetype":"text/html"}]},"ts":1661222481028,"senderName":"Lorin","senderId":"@alystair:matrix.org","id":"$2nNZ3ViYo5ekLobXFQJgc0ktzVFy1p7StLUDG1ERyPE"},
{"content":{"body":"But then doing something as simple as `input.oninput = (evt)  => { evt.preventDefault(); input.value = input.value.toUpperCase(); }` would end up in an infinite loop unless you had super complicated/ugly machinery to avoid it.\nIf you need ComponentB to let the other scripts know that it made some changes, it can still dispatch the event manually.  ","format":"org.matrix.custom.html","formatted_body":"But then doing something as simple as <code>input.oninput = (evt)  =&gt; { evt.preventDefault(); input.value = input.value.toUpperCase(); }</code> would end up in an infinite loop unless you had super complicated/ugly machinery to avoid it.<br>If you need ComponentB to let the other scripts know that it made some changes, it can still dispatch the event manually.","m.relates_to":{"event_id":"$muRpLg5oj_J-apRvwMtqTv7FNmrWQxSdVbHn8yKnaLU","is_falling_back":true,"m.in_reply_to":{"event_id":"$muRpLg5oj_J-apRvwMtqTv7FNmrWQxSdVbHn8yKnaLU"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But then doing something as simple as `input.oninput = (evt)  => { evt.preventDefault(); input.value = input.value.toUpperCase(); }` would end up in an infinite loop unless you had super complicated/ugly machinery to avoid it.\nIf you need ComponentB to let the other scripts know that it made some changes, it can still dispatch the event manually.  ","mimetype":"text/plain"},{"body":"But then doing something as simple as <code>input.oninput = (evt)  =&gt; { evt.preventDefault(); input.value = input.value.toUpperCase(); }</code> would end up in an infinite loop unless you had super complicated/ugly machinery to avoid it.<br>If you need ComponentB to let the other scripts know that it made some changes, it can still dispatch the event manually.","mimetype":"text/html"}]},"ts":1661237319858,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$RhJcDDMfUfk16tgvW3EO3il_NQr7p1HZu0Iw7UHbxMU"},
{"content":{"body":"Kaiido: in your example, some piece of code wants to ensure the input text is uppercase. Presumably, that's true regardless of whether the input is from the user, or programatic from some other piece of code. Relying on that other piece of code to pretend it's user input is hacky.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a>: in your example, some piece of code wants to ensure the input text is uppercase. Presumably, that's true regardless of whether the input is from the user, or programatic from some other piece of code. Relying on that other piece of code to pretend it's user input is hacky.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kaiido: in your example, some piece of code wants to ensure the input text is uppercase. Presumably, that's true regardless of whether the input is from the user, or programatic from some other piece of code. Relying on that other piece of code to pretend it's user input is hacky.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kaiido:matrix.org\">Kaiido</a>: in your example, some piece of code wants to ensure the input text is uppercase. Presumably, that's true regardless of whether the input is from the user, or programatic from some other piece of code. Relying on that other piece of code to pretend it's user input is hacky.","mimetype":"text/html"}]},"ts":1661243046169,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg"},
{"content":{"body":" But that's not the point. The issue is that if the script does the change in response to the event it will itself trigger the same event.","m.relates_to":{"event_id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":" But that's not the point. The issue is that if the script does the change in response to the event it will itself trigger the same event."},"ts":1661243148160,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$uZuiNISn70wF41akr7a9q8XfNAc3KF9hdnwOWquzGoc"},
{"content":{"body":"It is the point ðŸ˜€. The model is bad because it works in some cases but not in others.","msgtype":"m.text","org.matrix.msc1767.text":"It is the point ðŸ˜€. The model is bad because it works in some cases but not in others."},"ts":1661243181532,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$ke2IG5fjt-_81qBuWdaaKc4KtLZ3-YZMish66p_2drA"},
{"content":{"body":"To know if an event came from the user or from a script we have the isTrusted property.","m.relates_to":{"event_id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"To know if an event came from the user or from a script we have the isTrusted property."},"ts":1661243206747,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$4vWPaTAP0lsojk-KhfETon1clMZYrISpvi2nJLfw1TE"},
{"content":{"body":"`BroadcastChannel` works really well here, since each component can have its own instance. Compare this to storage events which have the same global problem.","format":"org.matrix.custom.html","formatted_body":"<code>BroadcastChannel</code> works really well here, since each component can have its own instance. Compare this to storage events which have the same global problem.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`BroadcastChannel` works really well here, since each component can have its own instance. Compare this to storage events which have the same global problem.","mimetype":"text/plain"},{"body":"<code>BroadcastChannel</code> works really well here, since each component can have its own instance. Compare this to storage events which have the same global problem.","mimetype":"text/html"}]},"ts":1661243229820,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$co8Z1p_pNTVPhLB6I_6xZK2j-5KQWJXsci9XvvCUM1U"},
{"content":{"body":"> <@kaiido:matrix.org> To know if an event came from the user or from a script we have the isTrusted property.\n\nIt isn't as black and white as that. Something can be started by user input, and then modified by script. So the origin of the change is still the user, but it's been influenced by script. `isTrusted` is more useful to know if the event is directly from the browser, but I don't think that helps in the case we're talking about","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$4vWPaTAP0lsojk-KhfETon1clMZYrISpvi2nJLfw1TE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kaiido:matrix.org\">@kaiido:matrix.org</a><br>To know if an event came from the user or from a script we have the isTrusted property.</blockquote></mx-reply>It isn't as black and white as that. Something can be started by user input, and then modified by script. So the origin of the change is still the user, but it's been influenced by script. <code>isTrusted</code> is more useful to know if the event is directly from the browser, but I don't think that helps in the case we're talking about","m.relates_to":{"event_id":"$kDioW0xgoeusytZyWZFUkAKDIXv-ECW-mKlF0B9pYVg","m.in_reply_to":{"event_id":"$4vWPaTAP0lsojk-KhfETon1clMZYrISpvi2nJLfw1TE"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kaiido:matrix.org> To know if an event came from the user or from a script we have the isTrusted property.\n\nIt isn't as black and white as that. Something can be started by user input, and then modified by script. So the origin of the change is still the user, but it's been influenced by script. `isTrusted` is more useful to know if the event is directly from the browser, but I don't think that helps in the case we're talking about","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$4vWPaTAP0lsojk-KhfETon1clMZYrISpvi2nJLfw1TE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kaiido:matrix.org\">@kaiido:matrix.org</a><br>To know if an event came from the user or from a script we have the isTrusted property.</blockquote></mx-reply>It isn't as black and white as that. Something can be started by user input, and then modified by script. So the origin of the change is still the user, but it's been influenced by script. <code>isTrusted</code> is more useful to know if the event is directly from the browser, but I don't think that helps in the case we're talking about","mimetype":"text/html"}]},"ts":1661243343622,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$YVYihZ7htIqldbj9cb3WANcQmQgmA6niA3dPpN24zsI"},
{"content":{"body":"Ok, so you're saying the whole EventTarget model is broken. I think I could agree with that. But firing events from script changes on that model without changing it all won't work.","m.relates_to":{"event_id":"$co8Z1p_pNTVPhLB6I_6xZK2j-5KQWJXsci9XvvCUM1U","is_falling_back":true,"m.in_reply_to":{"event_id":"$co8Z1p_pNTVPhLB6I_6xZK2j-5KQWJXsci9XvvCUM1U"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"Ok, so you're saying the whole EventTarget model is broken. I think I could agree with that. But firing events from script changes on that model without changing it all won't work."},"ts":1661243376463,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$qWBoeysCTRqPbQvmf_rb0jWe5Mo831BhJeWGqanBM8Q"},
{"content":{"body":"I'm not saying the whole `EventTarget` model is broken. I just pointed to `BroadcastChannel` as working well, and that usesâ€¦ `EventTarget`","format":"org.matrix.custom.html","formatted_body":"I'm not saying the whole <code>EventTarget</code> model is broken. I just pointed to <code>BroadcastChannel</code> as working well, and that usesâ€¦ <code>EventTarget</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm not saying the whole `EventTarget` model is broken. I just pointed to `BroadcastChannel` as working well, and that usesâ€¦ `EventTarget`","mimetype":"text/plain"},{"body":"I'm not saying the whole <code>EventTarget</code> model is broken. I just pointed to <code>BroadcastChannel</code> as working well, and that usesâ€¦ <code>EventTarget</code>","mimetype":"text/html"}]},"ts":1661243435886,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$CqI8bfBplQnCtuRZw4ngJP384JBHL1rATyN4a41KGxY"},
{"content":{"body":"I highly doubt the one precedent details created is something we should follow.","format":"org.matrix.custom.html","formatted_body":"I highly doubt the one precedent details created is something we should follow.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I highly doubt the one precedent details created is something we should follow.","mimetype":"text/plain"},{"body":"I highly doubt the one precedent details created is something we should follow.","mimetype":"text/html"}],"m.relates_to":{"event_id":"$co8Z1p_pNTVPhLB6I_6xZK2j-5KQWJXsci9XvvCUM1U","is_falling_back":true,"m.in_reply_to":{"event_id":"$co8Z1p_pNTVPhLB6I_6xZK2j-5KQWJXsci9XvvCUM1U"},"rel_type":"m.thread"}},"ts":1661243436340,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$KyAsfYRESgJW_VJZQt1XHwW2b4EFOaWpKfo-Q78OYoE"},
{"content":{"body":" * I highly doubt the one precedent details created is something we should follow.","format":"org.matrix.custom.html","formatted_body":" * I highly doubt the one precedent details created is something we should follow.","m.new_content":{"body":"I highly doubt the one precedent details created is something we should follow.","format":"org.matrix.custom.html","formatted_body":"I highly doubt the one precedent details created is something we should follow.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I highly doubt the one precedent details created is something we should follow.","mimetype":"text/plain"},{"body":"I highly doubt the one precedent details created is something we should follow.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$KyAsfYRESgJW_VJZQt1XHwW2b4EFOaWpKfo-Q78OYoE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I highly doubt the one precedent details created is something we should follow.","mimetype":"text/plain"},{"body":" * I highly doubt the one precedent details created is something we should follow.","mimetype":"text/html"}]},"ts":1661243444011,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$QGTQepvyYes71givkTi-TtpL5xFVlrQs9znRX3UnsT4"},
{"content":{"body":"It isn't one precedent. There are many events on the platform that are script-triggered","msgtype":"m.text","org.matrix.msc1767.text":"It isn't one precedent. There are many events on the platform that are script-triggered"},"ts":1661243476186,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$YYdhsb5ieZQYGbDhdKFnkc5twacyHXb21v1f04-M4W8"},
{"content":{"body":"But it works well because each component can have its own target. right?","msgtype":"m.text","org.matrix.msc1767.text":"But it works well because each component can have its own target. right?"},"ts":1661243480051,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$IbpPUC1ak2x1gZOzo2Z0eAmdFM7CN2Odgvtodr1qCpA"},
{"content":{"body":"Yes. And the input case (and similar cases like storage events) work badly because it assumes that it's owned by one component","msgtype":"m.text","org.matrix.msc1767.text":"Yes. And the input case (and similar cases like storage events) work badly because it assumes that it's owned by one component"},"ts":1661243531373,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$6VWJozsA9LcNmtpW55QDipHqc9Rlg6LS7gjeFCf8eGk"},
{"content":{"body":"It's better to fire change events when things are changed, then provide a way to avoid firing events, for changes that are transformations of changes.","msgtype":"m.text","org.matrix.msc1767.text":"It's better to fire change events when things are changed, then provide a way to avoid firing events, for changes that are transformations of changes."},"ts":1661243584688,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$Sp8NTKskD84TijPdxObIKh7g0k2IJvh3dmoghfQ4Kt4"},
{"content":{"body":"The `formdata` event on forms is a good model here. There, listeners make modifications via the event itself. It's built for transforming the user input, so it works well for transformations.","format":"org.matrix.custom.html","formatted_body":"The <code>formdata</code> event on forms is a good model here. There, listeners make modifications via the event itself. It's built for transforming the user input, so it works well for transformations.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `formdata` event on forms is a good model here. There, listeners make modifications via the event itself. It's built for transforming the user input, so it works well for transformations.","mimetype":"text/plain"},{"body":"The <code>formdata</code> event on forms is a good model here. There, listeners make modifications via the event itself. It's built for transforming the user input, so it works well for transformations.","mimetype":"text/html"}]},"ts":1661243715922,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$ufXz00XVPZgOm4myPx69f9-vU-QaRYH7R-Ays378EoI"},
{"content":{"body":"An equivalent would be an event on `<input>` where the new value could be transformed by listeners on the event object itself. That way, it's clear it shouldn't fire an additional change event, since the change is being made as part of the event.","format":"org.matrix.custom.html","formatted_body":"An equivalent would be an event on <code>&lt;input&gt;</code> where the new value could be transformed by listeners on the event object itself. That way, it's clear it shouldn't fire an additional change event, since the change is being made as part of the event.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"An equivalent would be an event on `<input>` where the new value could be transformed by listeners on the event object itself. That way, it's clear it shouldn't fire an additional change event, since the change is being made as part of the event.","mimetype":"text/plain"},{"body":"An equivalent would be an event on <code>&lt;input&gt;</code> where the new value could be transformed by listeners on the event object itself. That way, it's clear it shouldn't fire an additional change event, since the change is being made as part of the event.","mimetype":"text/html"}]},"ts":1661243847107,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$EOiS2YGWVya4PocvJ02ALOOWmqATYXyZnPuQRleNa4s"}
]