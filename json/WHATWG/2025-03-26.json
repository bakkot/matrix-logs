[
{"content":{"body":"Hi there, just out of curiosity, why is the colon `:` the de-facto standard it seems for named groupd in `URLPattern` (and others) instead of delimiting the group name within square brackets `[group]` or curly braces `{group}` which both would easily (I think) support pre- & suffixes like `@[username]`? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.\nWith `URLPattern` I can kind of replicate this with a RegExp of course e.g. `new URLPattern({ pathname: \"/:username(@.+)\" })` though this feels more complex, requires a RegExp and contains the `@` in the result.\nTo clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that `:` is mostly used and makes prefixes harder ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"Hi there, just out of curiosity, why is the colon <code>:</code> the de-facto standard it seems for named groupd in <code>URLPattern</code> (and others) instead of delimiting the group name within square brackets <code>[group]</code> or curly braces <code>{group}</code> which both would easily (I think) support pre- &amp; suffixes like <code>@[username]</code>? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.<br>With <code>URLPattern</code> I can kind of replicate this with a RegExp of course e.g. <code>new URLPattern({ pathname: \"/:username(@.+)\" })</code> though this feels more complex, requires a RegExp and contains the <code>@</code> in the result.<br>To clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that <code>:</code> is mostly used and makes prefixes harder ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"ts":1742965674730,"senderName":"canrau","senderId":"@canrau:matrix.org","id":"$JYCEyzLNnXOqBZmkiwagj3lLnG-WDOvLMtAwyvzfi_8"},
{"content":{"body":"* Hi there, just out of curiosity, why is the colon `:` the de-facto standard it seems for named groups in `URLPattern` (and others) instead of delimiting the group name within square brackets `[group]` or curly braces `{group}` which both would easily (I think) support pre- & suffixes like `@[username]`? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.\nWith `URLPattern` I can kind of replicate this with a RegExp of course e.g. `new URLPattern({ pathname: \"/:username(@.+)\" })` though this feels more complex, requires a RegExp and contains the `@` in the result.\nTo clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that `:` is mostly used and makes prefixes harder ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"* Hi there, just out of curiosity, why is the colon <code>:</code> the de-facto standard it seems for named groups in <code>URLPattern</code> (and others) instead of delimiting the group name within square brackets <code>[group]</code> or curly braces <code>{group}</code> which both would easily (I think) support pre- &amp; suffixes like <code>@[username]</code>? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.<br>With <code>URLPattern</code> I can kind of replicate this with a RegExp of course e.g. <code>new URLPattern({ pathname: \"/:username(@.+)\" })</code> though this feels more complex, requires a RegExp and contains the <code>@</code> in the result.<br>To clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that <code>:</code> is mostly used and makes prefixes harder ðŸ˜…","m.mentions":{},"m.new_content":{"body":"Hi there, just out of curiosity, why is the colon `:` the de-facto standard it seems for named groups in `URLPattern` (and others) instead of delimiting the group name within square brackets `[group]` or curly braces `{group}` which both would easily (I think) support pre- & suffixes like `@[username]`? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.\nWith `URLPattern` I can kind of replicate this with a RegExp of course e.g. `new URLPattern({ pathname: \"/:username(@.+)\" })` though this feels more complex, requires a RegExp and contains the `@` in the result.\nTo clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that `:` is mostly used and makes prefixes harder ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"Hi there, just out of curiosity, why is the colon <code>:</code> the de-facto standard it seems for named groups in <code>URLPattern</code> (and others) instead of delimiting the group name within square brackets <code>[group]</code> or curly braces <code>{group}</code> which both would easily (I think) support pre- &amp; suffixes like <code>@[username]</code>? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.<br>With <code>URLPattern</code> I can kind of replicate this with a RegExp of course e.g. <code>new URLPattern({ pathname: \"/:username(@.+)\" })</code> though this feels more complex, requires a RegExp and contains the <code>@</code> in the result.<br>To clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that <code>:</code> is mostly used and makes prefixes harder ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JYCEyzLNnXOqBZmkiwagj3lLnG-WDOvLMtAwyvzfi_8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1742969113140,"senderName":"CanRau","senderId":"@canrau:matrix.org","id":"$iyOfIbiprm9sZCkDAq6horVulJL5A8hygYDtSS8NUas"},
{"content":{"body":"* Hi there, just out of curiosity, why is the colon `:` the de-facto standard it seems for named groups in `URLPattern` (and others) instead of delimiting the group name within square brackets `[group]` or curly braces `{group}` which both would easily (I think) support pre- & suffixes like `@[username]` and potentially even things like `user-[name]-[surname]`? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.\nWith `URLPattern` I can kind of replicate this with a RegExp of course e.g. `new URLPattern({ pathname: \"/:username(@.+)\" })` though this feels more complex, requires a RegExp and contains the `@` in the result.\nTo clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that `:` is mostly used and makes prefixes (& suffixes) harder ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"* Hi there, just out of curiosity, why is the colon <code>:</code> the de-facto standard it seems for named groups in <code>URLPattern</code> (and others) instead of delimiting the group name within square brackets <code>[group]</code> or curly braces <code>{group}</code> which both would easily (I think) support pre- &amp; suffixes like <code>@[username]</code> and potentially even things like <code>user-[name]-[surname]</code>? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.<br>With <code>URLPattern</code> I can kind of replicate this with a RegExp of course e.g. <code>new URLPattern({ pathname: \"/:username(@.+)\" })</code> though this feels more complex, requires a RegExp and contains the <code>@</code> in the result.<br>To clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that <code>:</code> is mostly used and makes prefixes (&amp; suffixes) harder ðŸ˜…","m.mentions":{},"m.new_content":{"body":"Hi there, just out of curiosity, why is the colon `:` the de-facto standard it seems for named groups in `URLPattern` (and others) instead of delimiting the group name within square brackets `[group]` or curly braces `{group}` which both would easily (I think) support pre- & suffixes like `@[username]` and potentially even things like `user-[name]-[surname]`? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.\nWith `URLPattern` I can kind of replicate this with a RegExp of course e.g. `new URLPattern({ pathname: \"/:username(@.+)\" })` though this feels more complex, requires a RegExp and contains the `@` in the result.\nTo clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that `:` is mostly used and makes prefixes (& suffixes) harder ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"Hi there, just out of curiosity, why is the colon <code>:</code> the de-facto standard it seems for named groups in <code>URLPattern</code> (and others) instead of delimiting the group name within square brackets <code>[group]</code> or curly braces <code>{group}</code> which both would easily (I think) support pre- &amp; suffixes like <code>@[username]</code> and potentially even things like <code>user-[name]-[surname]</code>? ðŸ¤“ surprisingly few (JS) frameworks support this use-case easily out of the box, so far I think I know only of SvelteKit and RakkasJS.<br>With <code>URLPattern</code> I can kind of replicate this with a RegExp of course e.g. <code>new URLPattern({ pathname: \"/:username(@.+)\" })</code> though this feels more complex, requires a RegExp and contains the <code>@</code> in the result.<br>To clarify, this is just curiosity currently to understand what I might be missing, as I'm slightly annoyed by the fact that <code>:</code> is mostly used and makes prefixes (&amp; suffixes) harder ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JYCEyzLNnXOqBZmkiwagj3lLnG-WDOvLMtAwyvzfi_8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1742969235972,"senderName":"CanRau","senderId":"@canrau:matrix.org","id":"$2SpXk8ITD2hdsukvi8vRMrRRym30qGWp1sxf4zwCoIY"},
{"content":{"body":"CanRau: I believe it largely followed an existing JS library in terms of syntax. You might be able to find references to it in the early issues/commits.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canrau:matrix.org\">CanRau</a>: I believe it largely followed an existing JS library in terms of syntax. You might be able to find references to it in the early issues/commits.","m.mentions":{"user_ids":["@canrau:matrix.org"]},"msgtype":"m.text"},"ts":1742973338038,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$eBkVUXJhxx1qdkiKeCgRZe5Se5DjtbvE2Gp7bGR7Z08"},
{"content":{"body":"Hmm, Blink allows importScripts(\"data:text/plain,1\"); in workers, Gecko and Webkit don't","m.mentions":{},"msgtype":"m.text"},"ts":1742987068389,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$cIbXO5zWttNzBKiNZK63vky-BU7mBmp28tUBUziGRSk"},
{"content":{"body":"looks like Blink doesn't have the correct mimetype check","m.mentions":{},"msgtype":"m.text"},"ts":1742987221861,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$jl1WUPktf6FhuV28e4Z-HAqe3-6NF-bxsLvTmsnPM8E"},
{"content":{"body":"smaug: https://github.com/whatwg/html/issues/8869","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: https://github.com/whatwg/html/issues/8869","m.mentions":{"user_ids":["@smaug:mozilla.org"]},"msgtype":"m.text"},"ts":1742987692448,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$3aIK2Eee8gKCyVBpaM_ICvLNICSpxi0hChF7mrYboEs"},
{"content":{"body":"At this point it seems like we should just add a test to WPT that expects MIME type enforcement?","m.mentions":{},"msgtype":"m.text"},"ts":1742990130370,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$AbWnCxI1OwZ9LjrTm1oKAXaiZalpLH4tSGFi0hPyzhc"},
{"content":{"body":"Isn't it what we did in https://github.com/web-platform-tests/wpt/pull/38430 ?","m.mentions":{},"msgtype":"m.text"},"ts":1742990300447,"senderName":"Kaiido","senderId":"@kaiido:matrix.org","id":"$Crf80f3zSKiMM8JEGFiXwjzQ2yUyN-H_AgxjRYMrTks"},
{"content":{"body":"You did indeed, great. I'm going to close the HTML issue then. This is just a bug in Chromium.","m.mentions":{},"msgtype":"m.text"},"ts":1742990434235,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$7jZIPg6ZxQx_w-Q3XH4vAWKwzSoA5u1vx7fYPrEoR4w"},
{"content":{"body":"hmm, yea `path-to-regexp`,  thank you. maybe I should ask them what the motivation was ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"hmm, yea <code>path-to-regexp</code>,  thank you. maybe I should ask them what the motivation was ðŸ¤”","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eBkVUXJhxx1qdkiKeCgRZe5Se5DjtbvE2Gp7bGR7Z08"}},"msgtype":"m.text"},"ts":1743005480860,"senderName":"CanRau","senderId":"@canrau:matrix.org","id":"$VZ3tkZo6X0gX0MXrQySMw8PIs-SE0yWkSX__3R7EKd0"},
{"content":{"body":"See also https://github.com/whatwg/urlpattern/issues/241","m.mentions":{},"msgtype":"m.text"},"ts":1743006972976,"senderName":"evilpie","senderId":"@evilpie:mozilla.org","id":"$PO62iSay-cHGDT-e_mcMgL3FXFqG_qXOEGrewvVCx3w"}
]