[
{"content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321464726,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321500454,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$FRag8nQwn67IbJ7HdSDBZaTk-SymNMfhQ295exN7ELg"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321527112,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$3srx6LRkqXFoHuvJys50e2kwYP3r6MIZuXpwj2i29Ak"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321610460,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$0QuLiNJHj2Ar0uyVYgDqn9uIYSh3zCvTcVfj4b4Hh8g"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321626207,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$d7vfhNfxOTKATbqFSQA53fbA35w2DfrljtgiwppLi3g"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321666129,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$negD-DtzkpHe_5fdOrjxzBwkxLjtBg9PSlG-JtOJxf8"}
]