[
{"content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321464726,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({   hostname: '{*.}?example.com', });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321500454,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$FRag8nQwn67IbJ7HdSDBZaTk-SymNMfhQ295exN7ELg"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321527112,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$3srx6LRkqXFoHuvJys50e2kwYP3r6MIZuXpwj2i29Ak"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have not `hostname` (right?)\n\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have not <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321610460,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$0QuLiNJHj2Ar0uyVYgDqn9uIYSh3zCvTcVfj4b4Hh8g"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321626207,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$d7vfhNfxOTKATbqFSQA53fbA35w2DfrljtgiwppLi3g"},
{"content":{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","m.new_content":{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BeAR-sp3hq4gEhQPxapXfqpgOlRASpqOsJKp7mIG7LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * wanderview: so while reviewing https://github.com/mdn/content/pull/13137 and testing `URLPattern.test()`, I notice this:\n```js\nconst pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n```\n\n…which makes sense because per the URL spec, non-special schemes have no `hostname` (right?)\n```js\n(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n```\n\nBut then in testing the `URLPattern()` constructor, I notice this:\n```js\n(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n```\n\n…which seems like either a bug in Chrome or a spec bug?","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@wanderview:matrix.org\">wanderview</a>: so while reviewing https://github.com/mdn/content/pull/13137 and testing <code>URLPattern.test()</code>, I notice this:</p>\n<pre><code class=\"language-js\">const pattern = new URLPattern({ hostname: '{*.}?example.com' });\nconsole.log(pattern.test('custom-protocol://example.com/other/path?q=1'));\n// false\n</code></pre>\n<p>…which makes sense because per the URL spec, non-special schemes have no <code>hostname</code> (right?)</p>\n<pre><code class=\"language-js\">(new URL('custom-protocol://example.com/other/path?q=1')).hostname\n// ''\n</code></pre>\n<p>But then in testing the <code>URLPattern()</code> constructor, I notice this:</p>\n<pre><code class=\"language-js\">(new URLPattern('custom-protocol://example.com/other/path?q=1')).hostname\n// 'example.com'\n</code></pre>\n<p>…which seems like either a bug in Chrome or a spec bug?</p>\n","mimetype":"text/html"}]},"ts":1645321666129,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$negD-DtzkpHe_5fdOrjxzBwkxLjtBg9PSlG-JtOJxf8"},
{"content":{"body":"sideshowbarker: custom schemes can have a host","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: custom schemes can have a host","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sideshowbarker: custom schemes can have a host","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: custom schemes can have a host","mimetype":"text/html"}]},"ts":1645347731497,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$gbHHhsXVSC8siQgPqmyDV-B-vcrVowfqiPfIEIPDM1w"},
{"content":{"body":"sideshowbarker: Chrome doesn't have a compliant URL parser so `URLPattern` is also somewhat broken in it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Chrome doesn't have a compliant URL parser so <code>URLPattern</code> is also somewhat broken in it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sideshowbarker: Chrome doesn't have a compliant URL parser so `URLPattern` is also somewhat broken in it","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Chrome doesn't have a compliant URL parser so <code>URLPattern</code> is also somewhat broken in it","mimetype":"text/html"}]},"ts":1645347755196,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$irz3mAaF-RI5dtuA9ywvszaZGtq2-l7MahQwN_bdtNs"},
{"content":{"body":"> <@annevk:mozilla.org> sideshowbarker: custom schemes can have a host\n\nOK — what’s a case where one can?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$gbHHhsXVSC8siQgPqmyDV-B-vcrVowfqiPfIEIPDM1w?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: custom schemes can have a host</blockquote></mx-reply>OK — what’s a case where one can?","m.relates_to":{"m.in_reply_to":{"event_id":"$gbHHhsXVSC8siQgPqmyDV-B-vcrVowfqiPfIEIPDM1w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:mozilla.org> sideshowbarker: custom schemes can have a host\n\nOK — what’s a case where one can?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$gbHHhsXVSC8siQgPqmyDV-B-vcrVowfqiPfIEIPDM1w?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: custom schemes can have a host</blockquote></mx-reply>OK — what’s a case where one can?","mimetype":"text/html"}]},"ts":1645351462069,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$M9DnWcrdQSg_uaHiZAf626HwDCmhqAPax5-vOtZ6i4Q"},
{"content":{"body":"the `custom-protocol://example.com/other/path?q=11` case seems not to be","format":"org.matrix.custom.html","formatted_body":"the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `custom-protocol://example.com/other/path?q=11` case seems not to be","mimetype":"text/plain"},{"body":"the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","mimetype":"text/html"}]},"ts":1645351485659,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$SWDLqcNL5XODaJ-9BFVZx4NfcAo35WmQT9fP30pCxkk"},
{"content":{"body":" * the `custom-protocol://example.com/other/path?q=11` case seems not to be","format":"org.matrix.custom.html","formatted_body":" * the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","m.new_content":{"body":"the `custom-protocol://example.com/other/path?q=11` case seems not to be","format":"org.matrix.custom.html","formatted_body":"the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `custom-protocol://example.com/other/path?q=11` case seems not to be","mimetype":"text/plain"},{"body":"the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$SWDLqcNL5XODaJ-9BFVZx4NfcAo35WmQT9fP30pCxkk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * the `custom-protocol://example.com/other/path?q=11` case seems not to be","mimetype":"text/plain"},{"body":" * the <code>custom-protocol://example.com/other/path?q=11</code> case seems not to be","mimetype":"text/html"}]},"ts":1645351499570,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$7vEzmT17stuCo02HFqjlwzWO3usTdFFpL2mNOnKCBm8"},
{"content":{"body":"hmm, though in Safari at least, `(new URL('custom-protocol://example.com/other/path?q=1')).hostname` gives `\"example.com\"`","format":"org.matrix.custom.html","formatted_body":"hmm, though in Safari at least, <code>(new URL('custom-protocol://example.com/other/path?q=1')).hostname</code> gives <code>&quot;example.com&quot;</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hmm, though in Safari at least, `(new URL('custom-protocol://example.com/other/path?q=1')).hostname` gives `\"example.com\"`","mimetype":"text/plain"},{"body":"hmm, though in Safari at least, <code>(new URL('custom-protocol://example.com/other/path?q=1')).hostname</code> gives <code>&quot;example.com&quot;</code>","mimetype":"text/html"}]},"ts":1645351584893,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$5-6cNBYRx7QTwq616KX6PzXCt22dHt9fx3ZpB-ysHMk"},
{"content":{"body":"…but not in Firefox or Chrome","msgtype":"m.text","org.matrix.msc1767.text":"…but not in Firefox or Chrome"},"ts":1645351602359,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$UzHy6ILiJpl4-xbSOhPPQ-MuJdwcbd6j_AYZM3tjXgU"},
{"content":{"body":"…and I see that jsdom whatwg-url also returns `\"example.com\"` for `hostname` https://jsdom.github.io/whatwg-url/#url=Y3VzdG9tLXByb3RvY29sOi8vZXhhbXBsZS5jb20vb3RoZXIvcGF0aD9xPTE=&base=YWJvdXQ6Ymxhbms=","format":"org.matrix.custom.html","formatted_body":"…and I see that jsdom whatwg-url also returns <code>&quot;example.com&quot;</code> for <code>hostname</code> https://jsdom.github.io/whatwg-url/#url=Y3VzdG9tLXByb3RvY29sOi8vZXhhbXBsZS5jb20vb3RoZXIvcGF0aD9xPTE=&amp;base=YWJvdXQ6Ymxhbms=","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"…and I see that jsdom whatwg-url also returns `\"example.com\"` for `hostname` https://jsdom.github.io/whatwg-url/#url=Y3VzdG9tLXByb3RvY29sOi8vZXhhbXBsZS5jb20vb3RoZXIvcGF0aD9xPTE=&base=YWJvdXQ6Ymxhbms=","mimetype":"text/plain"},{"body":"…and I see that jsdom whatwg-url also returns <code>&quot;example.com&quot;</code> for <code>hostname</code> https://jsdom.github.io/whatwg-url/#url=Y3VzdG9tLXByb3RvY29sOi8vZXhhbXBsZS5jb20vb3RoZXIvcGF0aD9xPTE=&amp;base=YWJvdXQ6Ymxhbms=","mimetype":"text/html"}]},"ts":1645351776918,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$LTV3Hn83A3NmH3Ex_Ep8yA5eebjLtZACdkpEkMrFgCU"},
{"content":{"body":"so I guess that means both Chrome and Firefox aren’t conforming on this","msgtype":"m.text","org.matrix.msc1767.text":"so I guess that means both Chrome and Firefox aren’t conforming on this"},"ts":1645351851640,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$H_-uauHuSUveT7N81qOSMEBzBiCgYQqz0IKCeJI8twc"}
]