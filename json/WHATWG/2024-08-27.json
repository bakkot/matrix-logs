[
{"content":{"body":"I’m looking again at the `input type=number` WPT tests at https://github.com/web-platform-tests/wpt/blob/f5e542a731d61e302bc8048308963b6806620fb1/html/semantics/forms/the-input-element/number.html#L33C63-L33C72 and now wondering what part of the spec requires that the _string value_ of `HTMLInputElement.value` must represent a number less than or equal to Number.MAX_VALUE.","format":"org.matrix.custom.html","formatted_body":"I’m looking again at the <code>input type=number</code> WPT tests at https://github.com/web-platform-tests/wpt/blob/f5e542a731d61e302bc8048308963b6806620fb1/html/semantics/forms/the-input-element/number.html#L33C63-L33C72 and now wondering what part of the spec requires that the <em>string value</em> of <code>HTMLInputElement.value</code> must represent a number less than or equal to Number.MAX_VALUE.","m.mentions":{},"msgtype":"m.text"},"ts":1724726438163,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$h8UVWk9VBrIdjUB96p9mimSfeyKIUWrXtDW6xLOua-c"},
{"content":{"body":"`{value: \"2e308\", expected: \"\", testname: \"value >= Number.MAX_VALUE\"}` is the particular case I mean","format":"org.matrix.custom.html","formatted_body":"<code>{value: \"2e308\", expected: \"\", testname: \"value &gt;= Number.MAX_VALUE\"}</code> is the particular case I mean","m.mentions":{},"msgtype":"m.text"},"ts":1724726461839,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$OKF5AcG-Vb2_Qoj6YLXYK73KTLIOYRUyuIwm-sTbtw8"},
{"content":{"body":"The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n> If the value of the element is not a valid floating-point number, then set it to the empty string instead.\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX_VALUE.","format":"org.matrix.custom.html","formatted_body":"<p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p>If the value of the element is not a valid floating-point number, then set it to the empty string instead.<br>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724726714566,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$PKWSnr4nVg8q4j5pQ9Y-uBCV3dog6rcLP-91fIrDxJI"},
{"content":{"body":" * The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> If the value of the element is not a valid floating-point number, then set it to the empty string instead.\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":" * <p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"m.new_content":{"body":"The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> If the value of the element is not a valid floating-point number, then set it to the empty string instead.\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":"<p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm is on its own can determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PKWSnr4nVg8q4j5pQ9Y-uBCV3dog6rcLP-91fIrDxJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724726728293,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$hY8C3Dg4LEJVfapmFYrlltLmu3ho9nOCtFy0rhY5zi0"},
{"content":{"body":" * The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> If the value of the element is not a valid floating-point number, then set it to the empty string instead.\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":" * <p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"m.new_content":{"body":"The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> If the value of the element is not a valid floating-point number, then set it to the empty string instead.\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":"<p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PKWSnr4nVg8q4j5pQ9Y-uBCV3dog6rcLP-91fIrDxJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724726762076,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Ir0FqnZ5_EhHeYXsGYCc4R-7u3oO2amlTfo5malmZHI"},
{"content":{"body":" * The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> *If the value of the element is not a valid floating-point number, then set it to the empty string instead.*\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":" * <p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p><em>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</em></p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"m.new_content":{"body":"The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:\n\n> *If the value of the element is not a valid floating-point number, then set it to the empty string instead.*\n\nBut it doesn’t seem like a strict implementation of the [“valid floating-point number”](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number) checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX\\_VALUE.","format":"org.matrix.custom.html","formatted_body":"<p>The spec requirement at https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 just says:</p>\n<blockquote>\n<p><em>If the value of the element is not a valid floating-point number, then set it to the empty string instead.</em></p>\n</blockquote>\n<p>But it doesn’t seem like a strict implementation of the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\">“valid floating-point number”</a> checking algorithm can on its own determine whether the value represents a number less than or equal to Number.MAX_VALUE.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PKWSnr4nVg8q4j5pQ9Y-uBCV3dog6rcLP-91fIrDxJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724726786169,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RkK1KAp4sjQYhGASd2SD03M9qa62W0-Oy_eYZY1xdU4"},
{"content":{"body":"Instead, to pass that WPT test, an implementation needs to actually try to parse the value into a number","m.mentions":{},"msgtype":"m.text"},"ts":1724726885732,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$KhjpStFVkAcNF7CyvXP8MYYl1mxATX9Ip0NryHytCuU"},
{"content":{"body":"So I‘m wondering what spec requirement that WPT test is checking conformance for","m.mentions":{},"msgtype":"m.text"},"ts":1724726944575,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$hhcwgy84SnOwqJhMsIUQvUiaElQRUefgppsGYavRAy8"},
{"content":{"body":"Anyone remember why IDL integers go beyond the max safe integer values?","m.mentions":{},"msgtype":"m.text"},"ts":1724740096373,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$5asSOVJHWKhsrxHURWf46qYQIEZlkxeod88BSiKwTeM"},
{"content":{"body":"sideshowbarker: hmm, so what happens if parse and serialize gives a different value from the input, does that end up being invalid? Curious how this is implemented. As a matter of principle I'm not a big fan of grammar checks. They're almost never implemented that way and if they are would largely duplicate an existing parser of sorts.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: hmm, so what happens if parse and serialize gives a different value from the input, does that end up being invalid? Curious how this is implemented. As a matter of principle I'm not a big fan of grammar checks. They're almost never implemented that way and if they are would largely duplicate an existing parser of sorts.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1724741267828,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$0fh5tGjrdPm8AScIoLfH8adcDxQMgki6jW4cw9m1-6Y"},
{"content":{"body":"Given https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0A...%3Cinput%20type%3Dnumber%20value%3D0.1234567890123456789012345678901234567890123456789012345678901234567890%3E%0A%3Cscript%3E%0Aw(document.querySelector(%27input%27).validity.valid)%0A%3C%2Fscript%3E I guess I don't know how this works exactly without more exploration and reading the code.","m.mentions":{},"msgtype":"m.text"},"ts":1724741719087,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ObHh8lyxJMX4b9p_qeWdfA-d0T0UShqWzuxD7Q-_hSk"},
{"content":{"body":"> <@annevk:matrix.org> sideshowbarker: hmm, so what happens if parse and serialize gives a different value from the input, does that end up being invalid? Curious how this is implemented. As a matter of principle I'm not a big fan of grammar checks. They're almost never implemented that way and if they are would largely duplicate an existing parser of sorts.\n\nI’m also not a fan of grammar checks, and it’s not clear to me why this particular one is even in the spec to begin with","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$0fh5tGjrdPm8AScIoLfH8adcDxQMgki6jW4cw9m1-6Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: hmm, so what happens if parse and serialize gives a different value from the input, does that end up being invalid? Curious how this is implemented. As a matter of principle I'm not a big fan of grammar checks. They're almost never implemented that way and if they are would largely duplicate an existing parser of sorts.</blockquote></mx-reply>I’m also not a fan of grammar checks, and it’s not clear to me why this particular one is even in the spec to begin with","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0fh5tGjrdPm8AScIoLfH8adcDxQMgki6jW4cw9m1-6Y"}},"msgtype":"m.text"},"ts":1724742551811,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fd-Lsoo1yMzEI2K2Zp_DcfOHgeJvUfg1iOEGtnClpSU"},
{"content":{"body":"And as far as them never getting implemented as spec’d — yeah, I think that’s the case here","m.mentions":{},"msgtype":"m.text"},"ts":1724742607644,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$q8Vj2oi3h46i8YbUYF3nEc5IXZuokkwhGXiMJFta_Lc"},
{"content":{"body":"However, Ladybird has a default policy of implementing spec algorithms as spec’d — so I’m attempting to implement it that way","m.mentions":{},"msgtype":"m.text"},"ts":1724742679527,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$oTv0kRxMEkBf1BHvpN_aKxqMOzZjWshzvkwinN_g5WE"},
{"content":{"body":"For the sake of comparison, the WebKit implementation looks nothing like the spec","m.mentions":{},"msgtype":"m.text"},"ts":1724742710626,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$UgTU1K-K3iDUMPO4q7vSJrhmofXnvk8-RWnOoKYxP70"},
{"content":{"body":"lemme get a link","m.mentions":{},"msgtype":"m.text"},"ts":1724742717343,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$ft8CWeGbhOPglEtciFVBc29Zhyft7LgLhVKQ8cVvY18"},
{"content":{"body":"https://github.com/WebKit/WebKit/blob/f6fd2039015c4cbd575768f822ac036102dbc79c/Source/WebCore/html/parser/HTMLParserIdioms.cpp#L220-L232","m.mentions":{},"msgtype":"m.text"},"ts":1724742811810,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$InlLgIRD-JG5LI8sXUXRyoiVPQve3gdsKWBj4eNQ_iY"},
{"content":{"body":"```c++\n    // parseDouble() allows the string to start with a '+' or to end with a '.' but those\n    // are not valid floating point numbers as per HTML.\n    if (characters.front() == '+' || characters.back() == '.')\n        return std::nullopt;\n    size_t parsedLength = 0;\n    double number = parseDouble(characters, parsedLength);\n    return parsedLength == characters.size() && std::isfinite(number) ? number : std::optional<double>();\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-c++\">    // parseDouble() allows the string to start with a '+' or to end with a '.' but those\n    // are not valid floating point numbers as per HTML.\n    if (characters.front() == '+' || characters.back() == '.')\n        return std::nullopt;\n    size_t parsedLength = 0;\n    double number = parseDouble(characters, parsedLength);\n    return parsedLength == characters.size() &amp;&amp; std::isfinite(number) ? number : std::optional&lt;double&gt;();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724742841508,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$qKkiThQQC-864xq_PJGZT6WYJAiXXT1rv6FHwfz_-XE"},
{"content":{"body":"So, in prose terms: it just checks that the string doesn’t start with `+` or `-`, and then it actually parses it into number and checked the that length of that number is the same length as the input string — and is finite","format":"org.matrix.custom.html","formatted_body":"So, in prose terms: it just checks that the string doesn’t start with <code>+</code> or <code>-</code>, and then it actually parses it into number and checked the that length of that number is the same length as the input string — and is finite","m.mentions":{},"msgtype":"m.text"},"ts":1724742957251,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$plfJBbO0m8xB5KtFYXoYWu2dbUPCnfk_DAAN01XOFFo"},
{"content":{"body":"…and that passes all the WPT tests","m.mentions":{},"msgtype":"m.text"},"ts":1724742973611,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$F7zEDDUX1PktMtZLQXJAsr8X-JywI_s8wj-H2g2tcJA"},
{"content":{"body":" * So, in prose terms: it just checks that the string doesn’t start with `+` or `-`, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is finite","format":"org.matrix.custom.html","formatted_body":" * So, in prose terms: it just checks that the string doesn’t start with <code>+</code> or <code>-</code>, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is finite","m.mentions":{},"m.new_content":{"body":"So, in prose terms: it just checks that the string doesn’t start with `+` or `-`, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is finite","format":"org.matrix.custom.html","formatted_body":"So, in prose terms: it just checks that the string doesn’t start with <code>+</code> or <code>-</code>, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is finite","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$plfJBbO0m8xB5KtFYXoYWu2dbUPCnfk_DAAN01XOFFo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724742995655,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$XxgyZk04PU_MoWDvJ4aVGfunchAW4Wc1LECoPsA8CFQ"},
{"content":{"body":" * So, in prose terms: it just checks that the string doesn’t start with `+` or `-`, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is the parsed number is finite","format":"org.matrix.custom.html","formatted_body":" * So, in prose terms: it just checks that the string doesn’t start with <code>+</code> or <code>-</code>, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is the parsed number is finite","m.mentions":{},"m.new_content":{"body":"So, in prose terms: it just checks that the string doesn’t start with `+` or `-`, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is the parsed number is finite","format":"org.matrix.custom.html","formatted_body":"So, in prose terms: it just checks that the string doesn’t start with <code>+</code> or <code>-</code>, and then it actually parses it into number and checks that the length of that number is the same length as the input string — and is the parsed number is finite","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$plfJBbO0m8xB5KtFYXoYWu2dbUPCnfk_DAAN01XOFFo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724743012035,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$euD1y0U6-8Zu9z_JFPsKWtFBKtPpqZuzJt91Os63w3I"},
{"content":{"body":"My implementation for Ladybird looks like this:\n```c++\nbool is_valid_floating_point_number (StringView string)\n{\n    GenericLexer lexer { string };\n    // 1. Optionally, a U+002D HYPHEN-MINUS character (-).\n    lexer.consume_specific('-');\n    // 2. One or both of the following, in the given order:\n    // 2.1. A series of one or more ASCII digits.\n    bool has_leading_digits = !lexer.consume_while(is_ascii_digit).is_empty();\n    // 2.2. Both of the following, in the given order:\n    // 2.2.1. A single U+002E FULL STOP character (.).\n    if (lexer.consume_specific('.')) {\n        // 2.2.2. A series of one or more ASCII digits.\n        if (lexer.consume_while(is_ascii_digit).is_empty())\n            return false;\n    } else if (!has_leading_digits) {\n        // Doesn’t begin with digits, doesn’t begin with a full stop followed by digits.\n        return false;\n    }\n    // 3. Optionally:\n    // 3.1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL\n    //      LETTER E character (E).\n    if (lexer.consume_specific('e') || lexer.consume_specific('E')) {\n        // 3.2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN\n        //      character (+).\n        lexer.consume_specific('-') || lexer.consume_specific('+');\n        // 3.3. A series of one or more ASCII digits.\n        if (lexer.consume_while(is_ascii_digit).is_empty())\n            return false;\n    }\n    return lexer.tell_remaining() == 0;\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>My implementation for Ladybird looks like this:</p>\n<pre><code class=\"language-c++\">bool is_valid_floating_point_number (StringView string)\n{\n    GenericLexer lexer { string };\n    // 1. Optionally, a U+002D HYPHEN-MINUS character (-).\n    lexer.consume_specific('-');\n    // 2. One or both of the following, in the given order:\n    // 2.1. A series of one or more ASCII digits.\n    bool has_leading_digits = !lexer.consume_while(is_ascii_digit).is_empty();\n    // 2.2. Both of the following, in the given order:\n    // 2.2.1. A single U+002E FULL STOP character (.).\n    if (lexer.consume_specific('.')) {\n        // 2.2.2. A series of one or more ASCII digits.\n        if (lexer.consume_while(is_ascii_digit).is_empty())\n            return false;\n    } else if (!has_leading_digits) {\n        // Doesn’t begin with digits, doesn’t begin with a full stop followed by digits.\n        return false;\n    }\n    // 3. Optionally:\n    // 3.1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL\n    //      LETTER E character (E).\n    if (lexer.consume_specific('e') || lexer.consume_specific('E')) {\n        // 3.2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN\n        //      character (+).\n        lexer.consume_specific('-') || lexer.consume_specific('+');\n        // 3.3. A series of one or more ASCII digits.\n        if (lexer.consume_while(is_ascii_digit).is_empty())\n            return false;\n    }\n    return lexer.tell_remaining() == 0;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724743157330,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$cidZL4DP8yreGmH3z1sQTipqnNgDgKW74vkImPxXRQI"},
{"content":{"body":"… but that on its own doesn’t pass the WPT tests","m.mentions":{},"msgtype":"m.text"},"ts":1724743177256,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$LdNsw14jMIYjEC-Jx0MnlWhARWmMO4OZnmFoZtSIEPE"},
{"content":{"body":"In order to pass the WPT tests, I need to call that `is_valid_floating_point_number` function and additionally parse the value:\n```c++\n    } else if (type_state() == HTMLInputElement::TypeAttributeState::Number) {\n        // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n        // If the value of the element is not a valid floating-point number, then set it\n        // to the empty string instead.\n        if (!is_valid_floating_point_number(value))\n            return String {};\n        auto maybe_value = parse_floating_point_number(value);\n        // AD-HOC: The spec doesn’t require these checks — but other engines do them, and\n        // there’s a WPT case which tests that the value is less than Number.MAX_VALUE.\n        if (!maybe_value.has_value() || !isfinite(maybe_value.value()))\n            return String {};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In order to pass the WPT tests, I need to call that <code>is_valid_floating_point_number</code> function and additionally parse the value:</p>\n<pre><code class=\"language-c++\">    } else if (type_state() == HTMLInputElement::TypeAttributeState::Number) {\n        // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n        // If the value of the element is not a valid floating-point number, then set it\n        // to the empty string instead.\n        if (!is_valid_floating_point_number(value))\n            return String {};\n        auto maybe_value = parse_floating_point_number(value);\n        // AD-HOC: The spec doesn’t require these checks — but other engines do them, and\n        // there’s a WPT case which tests that the value is less than Number.MAX_VALUE.\n        if (!maybe_value.has_value() || !isfinite(maybe_value.value()))\n            return String {};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724743263404,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$toBXDsTXv6-3ZlSwbhE7RZfxsmPNU4F_h8b_Xi6Xgvs"},
{"content":{"body":"I hope I’m misunderstanding something — or I have missed something — but as far as I can see, in order to have interop with the behavior in existing engines and with the WPT tests, it’s not sufficient to just strictly implement only the “valid floating-point number” checking algorithm; instead I also need to check that parsing the value returns and actual number rather than an error (for example, because the string value represents a number larger than Number.MAX_VALUE (e.g., `2e308`).","format":"org.matrix.custom.html","formatted_body":"I hope I’m misunderstanding something — or I have missed something — but as far as I can see, in order to have interop with the behavior in existing engines and with the WPT tests, it’s not sufficient to just strictly implement only the “valid floating-point number” checking algorithm; instead I also need to check that parsing the value returns and actual number rather than an error (for example, because the string value represents a number larger than Number.MAX_VALUE (e.g., <code>2e308</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1724743552721,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$HmJz-ChR2S92DACJCY5sUStTSlNuM4gsnUyNjfvoQGw"},
{"content":{"body":"Anyway, if that is in fact the case, then I guess to get the spec to match the implementation behavior in existing engines, we could add a step 4 to the algorithm, saying *“Apply the [rules for parsing floating-point number values](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values) to the value, and if the result is an error, then the string is not a valid floating-point number”.*","format":"org.matrix.custom.html","formatted_body":"Anyway, if that is in fact the case, then I guess to get the spec to match the implementation behavior in existing engines, we could add a step 4 to the algorithm, saying <em>“Apply the <a href=\"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\">rules for parsing floating-point number values</a> to the value, and if the result is an error, then the string is not a valid floating-point number”.</em>","m.mentions":{},"msgtype":"m.text"},"ts":1724743802608,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$m4X_2AGBdddZVQFrx8W91hwACxREC6Qz6Yfsx1Ii370"}
]