[
{"content":{"body":"I think that is editorial. It doesn't change how the standard is understood.","msgtype":"m.text"},"ts":1637913004143,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$wZYzuFTeZfoWONh8MRpwWkgW34whPIvRuF4EpI1KXWQ"},
{"content":{"body":"https://github.com/whatwg/meta/blob/main/COMMITTING.md#title-prefixes has advice, though I'll admit that every now and then Domenic will correct me. It still doesn't come natural to me.","format":"org.matrix.custom.html","formatted_body":"https://github.com/whatwg/meta/blob/main/COMMITTING.md#title-prefixes has advice, though I'll admit that every now and then <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> will correct me. It still doesn't come natural to me.","msgtype":"m.text"},"ts":1637913072859,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$vDKpFXMU5pSCgLtjR0FKFMBOwd5mb0m2MEC1ddvIbLA"},
{"content":{"body":"Hello everybody here, You can consider me as someone accidently land out into this room. But I am really exciting to be here. and will really appreciate that if anyone here explain me a bit on its science ?","msgtype":"m.text"},"ts":1637914765966,"senderName":"The Finder","senderId":"@mehboob_101:matrix.org","id":"$anXKfqxgnZ2vqlmPZeShSIgOFz_mxsTMlK3l_CCelRA"},
{"content":{"body":"Domenic: Filed https://bugs.webkit.org/show_bug.cgi?id=233514 & https://bugzilla.mozilla.org/show_bug.cgi?id=1743082 for WebKit & Gecko","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Filed https://bugs.webkit.org/show_bug.cgi?id=233514 &amp; https://bugzilla.mozilla.org/show_bug.cgi?id=1743082 for WebKit &amp; Gecko","msgtype":"m.text"},"ts":1637916938866,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$mePwqs1II3t4YW5g8RpUZzdCPPBjUqtjjriyj3-SI0k"},
{"content":{"body":"(also i'm doing the work for WebKit)","msgtype":"m.text"},"ts":1637916953538,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$zAE_1nsTJ2BqEe3G5SRylgxVFUCBhPAlSM5EaJnhmso"},
{"content":{"body":"emilio: sefeng ^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@emilio:mozilla.org\">emilio</a>: <a href=\"https://matrix.to/#/@sefeng:mozilla.org\">sefeng</a> ^","msgtype":"m.text"},"ts":1637916984569,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$ISXjQbEFq5gHkQtT6ISQcGP_MKfE89Cq-lwrWLoBpo4"},
{"content":{"body":"So I'm trying to work out how to talk about sandboxes / isolated worlds for WebDriver BiDi (Extensions will need something similar for content scripts). I kind of just want to sketch in the basics of how it works at the moment, but it would be good to start with a model that isn't total nonsense. \n\nSo I'm leaning towards a model where the behaviour is explained as \"in a sandbox, objects are accessed through a transparent wrapper object. When getting a property, if the property is defined on the wrapper, return that. Otherwise check if the property is defined on the wrapped object and, if it is, and the wrapped object is a platform object, and the property is part of the interface definition for the wrapped object, or is an internal slot, return the wrapped property value if it's an object, or the primitive value if it's not. When setting a property, check if the wrapped object is a platform object, and the property is part of the interface for that platform object, then act as if setting the property on the wrapped object. Otherwise set the property on the wrapper.\"\n\nDoes that make any sense whatsoever as a model or is it going to run into insurmountable difficulties (I think it's similar to the actual Gecko implementation, but I'm not an expert)? If it does make sense, how to fit it into the formalism? I don't mind the wrapper objects being \"magical\", but does it make sense to claim that the sandbox itself is a realm and the wrapped objects are part of a different realm? That kind of makes sense at a high level, and matches how we want to expose it in the BiDi protocol but is it going cause problems with some invariants at the spec level?","msgtype":"m.text"},"ts":1637943796245,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$-7f5-4tXNUiBS_escmMxwUZAmM3lj74pWXGvQjt57ak"},
{"content":{"body":"I kind of realise that this stuff doesn't match the theoretical model of ECMAScript etc. so there is probably going to be some amount of doing things that aren't intended (and maybe people won't like it), but it would be good to avoid unnecessary friction.","msgtype":"m.text"},"ts":1637944005447,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$dHTdjUyFb8UMPfaQ18W6cfXijW1Ua2K0a1IsnlY9Vik"},
{"content":{"body":"I've been reading the Webstreams spec and working on porting some code running in Node to use webstreams. I came across two obstacles that I think are built into the current design. Would value hearing from others who know more about or have more experience working with this spec. Is this a good place to ask? Would it be ok/better to raise issue on whatwg/streams?","msgtype":"m.text"},"ts":1637944396621,"senderName":"Jim Pryor","senderId":"@dubiousjim:matrix.org","id":"$-NkJ-KJjm8DZ1MMhHrbLAzf7U5LQWNQkW1gLoFYQHMM"},
{"content":{"body":"1. In a Readable/WritableStream's `start()` implementation (also in `read()` or `write()`) I sometimes want to gracefully cancel or abort the stream. For example, if a WritableStream is passed data of a type it doesn't handle, but I want the stream implementation to do some post-processing on the data it already received. One can't use the client-facing `cancel` or `abort` methods on the streams at these points, because the stream is typically locked. You can call `controller.error`, but (at least in Node 17.1.0's implementation and in the current web-streams-polyfill), this throws an error outside the scope of the stream implementation (so it can't be observed/caught by the implementation's `cancel` or `abort` routines). I'd be interested to hear whether this design is deliberate and what kinds of worksarounds I might consider.\n","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>In a Readable/WritableStream's <code>start()</code> implementation (also in <code>read()</code> or <code>write()</code>) I sometimes want to gracefully cancel or abort the stream. For example, if a WritableStream is passed data of a type it doesn't handle, but I want the stream implementation to do some post-processing on the data it already received. One can't use the client-facing <code>cancel</code> or <code>abort</code> methods on the streams at these points, because the stream is typically locked. You can call <code>controller.error</code>, but (at least in Node 17.1.0's implementation and in the current web-streams-polyfill), this throws an error outside the scope of the stream implementation (so it can't be observed/caught by the implementation's <code>cancel</code> or <code>abort</code> routines). I'd be interested to hear whether this design is deliberate and what kinds of worksarounds I might consider.</li>\n</ol>\n","msgtype":"m.text"},"ts":1637944405157,"senderName":"Jim Pryor","senderId":"@dubiousjim:matrix.org","id":"$Gh3p0K6-tY127GG36_178FOR6hRGbDMHgZxYuimldEI"},
{"content":{"body":"2. There doesn't seem to be any way to observe errors/aborts/cancelations in an existing stream (that my code did not implement itself). Some Node code I'm trying to port calls `webstream.on('error', err => ...)` but I don't see any way to do something similar with webstreams. I considered having my code implement a TransformStream and piping the externally-provided ReadableStream through that. But I don't see any way to make the TransformStream observe errors in another stream piping into it.\n","format":"org.matrix.custom.html","formatted_body":"<ol start=\"2\">\n<li>There doesn't seem to be any way to observe errors/aborts/cancelations in an existing stream (that my code did not implement itself). Some Node code I'm trying to port calls <code>webstream.on('error', err =&gt; ...)</code> but I don't see any way to do something similar with webstreams. I considered having my code implement a TransformStream and piping the externally-provided ReadableStream through that. But I don't see any way to make the TransformStream observe errors in another stream piping into it.</li>\n</ol>\n","msgtype":"m.text"},"ts":1637944411347,"senderName":"Jim Pryor","senderId":"@dubiousjim:matrix.org","id":"$vStRfkEyVEQH1L8NXgIPLaKEd6l012m64e1ekRes2Ds"}
]