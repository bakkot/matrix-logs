[
{"content":{"body":"> <@smaug:mozilla.org> is it defined somewhere which agent cluster service workers may or may not use (vs the relevant web pages)?\n\nhttps://html.spec.whatwg.org/#obtain-a-service-worker-agent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$fwHsg3gSAPg-YDN0SkhHC0ERqJIcEqvR7LVDsO6wyRU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@smaug:mozilla.org\">@smaug:mozilla.org</a><br>is it defined somewhere which agent cluster service workers may or may not use (vs the relevant web pages)?</blockquote></mx-reply>https://html.spec.whatwg.org/#obtain-a-service-worker-agent","m.relates_to":{"m.in_reply_to":{"event_id":"$fwHsg3gSAPg-YDN0SkhHC0ERqJIcEqvR7LVDsO6wyRU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@smaug:mozilla.org> is it defined somewhere which agent cluster service workers may or may not use (vs the relevant web pages)?\n\nhttps://html.spec.whatwg.org/#obtain-a-service-worker-agent","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$fwHsg3gSAPg-YDN0SkhHC0ERqJIcEqvR7LVDsO6wyRU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@smaug:mozilla.org\">@smaug:mozilla.org</a><br>is it defined somewhere which agent cluster service workers may or may not use (vs the relevant web pages)?</blockquote></mx-reply>https://html.spec.whatwg.org/#obtain-a-service-worker-agent","mimetype":"text/html"}]},"ts":1672207732511,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$NQa6rSS675hQ2AVwjfcQVMiWrcTDG1H-NU2MEGOSIMU"},
{"content":{"body":"Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure ","msgtype":"m.text","org.matrix.msc1767.text":"Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure "},"ts":1672216898777,"senderName":"frank-dspeed","senderId":"@frank-dspeed:matrix.org","id":"$Co1mFF5gATj4-Adb53fj5Wou9LYT6Xjp9APzZ2aTmrM"},
{"content":{"body":"i hacked this together but it feels a bit wrong maybe some one did come up with a waterMark based method or something better or at last can verify that this is the best generic we have ","msgtype":"m.text","org.matrix.msc1767.text":"i hacked this together but it feels a bit wrong maybe some one did come up with a waterMark based method or something better or at last can verify that this is the best generic we have "},"ts":1672216959340,"senderName":"frank-dspeed","senderId":"@frank-dspeed:matrix.org","id":"$tsFJrZAE1zBbt7v0gYxoMd-sjmL-KcOdG0N8F7OlP-c"},
{"content":{"body":"```js\nclass BackpressureTransformStream extends TransformStream { constructor() { const backpressure = []; super({ start(){},\n  transform(data,_controller){ backpressure.push(data); },\n  close(controller){ controller.enqueue(backpressure.flaten()); backpressure.length = 0; },\n  cancel(){ backpressure.length = 0; },\n}); }};\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">class BackpressureTransformStream extends TransformStream { constructor() { const backpressure = []; super({ start(){},\n  transform(data,_controller){ backpressure.push(data); },\n  close(controller){ controller.enqueue(backpressure.flaten()); backpressure.length = 0; },\n  cancel(){ backpressure.length = 0; },\n}); }};\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nclass BackpressureTransformStream extends TransformStream { constructor() { const backpressure = []; super({ start(){},\n  transform(data,_controller){ backpressure.push(data); },\n  close(controller){ controller.enqueue(backpressure.flaten()); backpressure.length = 0; },\n  cancel(){ backpressure.length = 0; },\n}); }};\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">class BackpressureTransformStream extends TransformStream { constructor() { const backpressure = []; super({ start(){},\n  transform(data,_controller){ backpressure.push(data); },\n  close(controller){ controller.enqueue(backpressure.flaten()); backpressure.length = 0; },\n  cancel(){ backpressure.length = 0; },\n}); }};\n</code></pre>\n","mimetype":"text/html"}]},"ts":1672216971328,"senderName":"frank-dspeed","senderId":"@frank-dspeed:matrix.org","id":"$TKy3HWxxB0obubkfQcljSVL9Da0_AdtHpadYPNSDtjI"},
{"content":{"body":" * Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure ","m.new_content":{"body":"Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure ","msgtype":"m.text","org.matrix.msc1767.text":"Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure "},"m.relates_to":{"event_id":"$Co1mFF5gATj4-Adb53fj5Wou9LYT6Xjp9APzZ2aTmrM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Hi Frinds what is the current suggested way to create a Transform Stream that waits until the writeable side got closed so that we are sure we get complete data before we enqueue it for the next stream? So Common Backpressure "},"ts":1672217059102,"senderName":"frank-dspeed","senderId":"@frank-dspeed:matrix.org","id":"$DJgwNUl6HGMdJOw693xUMBwK7ujBF5rcF7gUG1IwVto"}
]