[
{"content":{"body":"Henllo. I'm expanding my knowlede in order to get my money back after being scamed :') help? I found this inspecting element on the website trying to get to the domain but I'm not so versed in this","msgtype":"m.text"},"ts":1636603395501,"senderName":"Cam Morales Silva","senderId":"@camisdead:matrix.org","id":"$xI2ZG1kVDzVdJcjb-c9XgWtF6YOPsttOIbjcDPFNV2I"},
{"content":{"body":"I know for experience that I can get away with something like this","msgtype":"m.text"},"ts":1636603435785,"senderName":"Cam Morales Silva","senderId":"@camisdead:matrix.org","id":"$Bm0z2dwKbcATjRPG1qS2qssIqz2h2Es_xy3Zl_7N604"},
{"content":{"body":"TabAtkins (or anyone who may know): are the old Web IDL spec stylesheets still accessible somewhere?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> (or anyone who may know): are the old Web IDL spec stylesheets still accessible somewhere?","msgtype":"m.text"},"ts":1636609954224,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$UQr28tSmT08kx8AEPOxnpOE3MmP8nHCpZ274vgr4Do8"},
{"content":{"body":"DerekNonGeneric: yeah it's just the Bikeshed default stylesheet","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: yeah it's just the Bikeshed default stylesheet","msgtype":"m.text"},"ts":1636610279234,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EIl1sst3qjK2TFuIOi1QR8-kifWWh9rZbGYmOzGJj3Y"},
{"content":{"body":"TabAtkins: oh, yeah, they are indeed similar, but alas still no dark mode; was looking for the rest of this gist that i happened to save a while ago https://gist.github.com/DerekNonGeneric/e3072db4ea16cc64e138512a4a95bf56","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: oh, yeah, they are indeed similar, but alas still no dark mode; was looking for the rest of this gist that i happened to save a while ago https://gist.github.com/DerekNonGeneric/e3072db4ea16cc64e138512a4a95bf56","msgtype":"m.text"},"ts":1636610587289,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$7uUwueKuf7iayBZlrKzEJZFTyesAX0fs72CJpc1IFL8"},
{"content":{"body":"Oh the dark-mode colors are inserted separately from the stylesheet itself. Look at any Bikeshed-generated spec, like the CSS specs, you'll find them.","msgtype":"m.text"},"ts":1636611316159,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5GH6J1NSU_DdXz3HsEwJ_BysYfWVCHbVb_yMmzSE2FU"},
{"content":{"body":"Domenic: annevk : Hey, there was some agreement to remove <object usemap> from the spec, and I see the HTMLObjectElement doesn't have it anymore in the spec. However, it is still there in Gecko & Blink & WPT.   ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a> : Hey, there was some agreement to remove &lt;object usemap&gt; from the spec, and I see the HTMLObjectElement doesn't have it anymore in the spec. However, it is still there in Gecko &amp; Blink &amp; WPT.","msgtype":"m.text"},"ts":1636623943732,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$Bbs_4oY_WuDbJApa8Q26WDa4bPKhGjjtgClX9rgfbu8"},
{"content":{"body":"Is that intentional?","msgtype":"m.text"},"ts":1636623952232,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$HaSwDYSiSlDNYd2EFFUuC9zCt1K1td-BRunfooDHBEk"},
{"content":{"body":"ntim: hmm, there was https://github.com/web-platform-tests/wpt/pull/27830","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ntim:mozilla.org\">ntim</a>: hmm, there was https://github.com/web-platform-tests/wpt/pull/27830","msgtype":"m.text"},"ts":1636627374572,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$19EmVYER6kyjR_nKorB9Fxs4SkLToLvdtezI3_7_DT0"},
{"content":{"body":"ntim: Gecko has an open bug still","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ntim:mozilla.org\">ntim</a>: Gecko has an open bug still","msgtype":"m.text"},"ts":1636627382887,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$nIMJZIAwfn3MH502lj1iFEwolzDqIs57Q3rDF743reQ"},
{"content":{"body":"Morning all, I have a silly question about `DocumentOrShadowRoot` mixin in https://dom.spec.whatwg.org/#mixin-documentorshadowroot. If I have a shadow root, should I be able to use `getElementByTagName` since it's part of the mixin?","format":"org.matrix.custom.html","formatted_body":"Morning all, I have a silly question about <code>DocumentOrShadowRoot</code> mixin in https://dom.spec.whatwg.org/#mixin-documentorshadowroot. If I have a shadow root, should I be able to use <code>getElementByTagName</code> since it's part of the mixin?","msgtype":"m.text"},"ts":1636632275975,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$ur5vViDyBgf-8-J1dPueC1QSqL44ie6DyjfT9dDnc08"},
{"content":{"body":"AutomatedTester: I don't see it on the mixin?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: I don't see it on the mixin?","msgtype":"m.text"},"ts":1636633663770,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$VNnW4hyuYIZUWcBHs5jQI4ldXBe5d2RnB4jpZTXIB9w"},
{"content":{"body":"AutomatedTester: in particular, note how the mixin doesn't define any members (HTML defines some)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: in particular, note how the mixin doesn't define any members (HTML defines some)","msgtype":"m.text"},"ts":1636633680723,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$UeYwREl0NtXbN6T0PvbamMhhotFKgZLVs53ghS4QsRU"},
{"content":{"body":"ok, I thought (probably wrongly) that when I saw `DocumentOrShadowroot` that I could use the APIs interchangeable","format":"org.matrix.custom.html","formatted_body":"ok, I thought (probably wrongly) that when I saw <code>DocumentOrShadowroot</code> that I could use the APIs interchangeable","msgtype":"m.text"},"ts":1636633749801,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$qLVfZGE-T4PQ07rJUkPhF_AdEcvLnrTcMlmLNYGyzgM"},
{"content":{"body":"so, `getElementsByTagName` is not available then on a shadow root?","format":"org.matrix.custom.html","formatted_body":"so, <code>getElementsByTagName</code> is not available then on a shadow root?","msgtype":"m.text"},"ts":1636633882431,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$pp091ba4QHzsphXhRnVPKBTb7b89wdeE_Fn-NHvHkCU"},
{"content":{"body":"AutomatedTester: that is only defined on Document and Element, so no","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: that is only defined on Document and Element, so no","msgtype":"m.text"},"ts":1636633923659,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$oRqvQlFKCoVIWOTuP47U4k8tkA7vwDGCKUD5TL3hPp8"},
{"content":{"body":"AutomatedTester: I think you might have inverted the logic of mixins (or something to that effect)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: I think you might have inverted the logic of mixins (or something to that effect)","msgtype":"m.text"},"ts":1636633963858,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$RVA72spLmNmwPpf7_0rkh8dGuse4L2XqsibggTdf7IE"},
{"content":{"body":"probably :D","msgtype":"m.text"},"ts":1636633983635,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$OgbfUIDjmLLn4pTKry0q_xII9HumbzI1wz7R_GEP9Lc"},
{"content":{"body":"annevk: so to look inside the Shadow Root one would need to do something like `document.get...().shadowRoot.host.get...()` or something along those lines?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: so to look inside the Shadow Root one would need to do something like <code>document.get...().shadowRoot.host.get...()</code> or something along those lines?","msgtype":"m.text"},"ts":1636634463868,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$-cQdFLYunVRw240Q_Rwea6sdjlcW_PpEG5DbLc0fiLY"},
{"content":{"body":"AutomatedTester: it has querySelector() and getElementById()","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: it has querySelector() and getElementById()","msgtype":"m.text"},"ts":1636634620449,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$uQyms_YRxNgzXvsHHov1txZkuj2qniyR8Og7lLVEjbM"},
{"content":{"body":"AutomatedTester: through DocumentFragment","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: through DocumentFragment","msgtype":"m.text"},"ts":1636634632118,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$fXBU30rjQowfDwaw1ioGlugLmW8TYRu3SXMYB_cMsew"},
{"content":{"body":"ahhh ok","msgtype":"m.text"},"ts":1636634670288,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$10xYFG4Si7GzvrnZw06ma3BegncYM3p5jtYqWy2BVrE"},
{"content":{"body":"why is the API limited ?","msgtype":"m.text"},"ts":1636634690573,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$wDtlhMYBcAneK-Ya9KY1hoO1DWJf25jbuOZ79U3pkro"},
{"content":{"body":"I'm not sure I understand what you mean","msgtype":"m.text"},"ts":1636634813076,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Fok5t3ZX_mt9lWIZBKsyN6T5ZwCPG5GrBWtb8JmUNpM"},
{"content":{"body":"Why are querySelector and getElementById but not the getElementsBy* APIs. ","format":"org.matrix.custom.html","formatted_body":"Why are querySelector and getElementById but not the getElementsBy* APIs.","msgtype":"m.text"},"ts":1636635002964,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$BlMbztStYGZFQVUy0e5lvpPHadc1Wb7e7NxTymI2UOU"},
{"content":{"body":"My reason for asking is people are using selenium for working with web components but in Chrome 96, they can’t search for element’s anymore by tag name","msgtype":"m.text"},"ts":1636635092501,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$_6ak02k4D5Gu22HVphc-DW7cm3gN9bqn5PjQ6KQhI1s"},
{"content":{"body":"So want to understand the why so I can fix this properly ","format":"org.matrix.custom.html","formatted_body":"So want to understand the why so I can fix this properly","msgtype":"m.text"},"ts":1636635107651,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$bsPpazhdMcUfD3pzSbBsBGr7Ckb1MyFXiT9pPf5uGrk"},
{"content":{"body":"They were never included as they're kind of legacy APIs","msgtype":"m.text"},"ts":1636635629170,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$ma4w4YeftAN-SJFpqbIKORSaVNzVVztgowUX6SfrpV4"},
{"content":{"body":"Ok, thanks ","format":"org.matrix.custom.html","formatted_body":"Ok, thanks","msgtype":"m.text"},"ts":1636635778110,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$hNemG4973SSmZ1ISbEaAHsdebNxWqkSmL8nW8pESVTM"},
{"content":{"body":"Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","msgtype":"m.text"},"ts":1636639989694,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Yvcp1R-Aty462E0U4aT3ZP6GCnv5M-S872M7H2ydWbY"},
{"content":{"body":"* Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","m.new_content":{"body":"Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$Yvcp1R-Aty462E0U4aT3ZP6GCnv5M-S872M7H2ydWbY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636640045782,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5khmK9G_xwVOo7_OMzpcEODllWUL0PGkMHIrz1_DqBY"},
{"content":{"body":"jschoi: I think we've done that plenty of times, though coming up with examples is a little harder","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I think we've done that plenty of times, though coming up with examples is a little harder","msgtype":"m.text"},"ts":1636640506589,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$v_-obgakAvRQvXTe-9Etj1jsXzumjpSMjgNvR1dpuWk"},
{"content":{"body":"jschoi: e.g., the types you can pass to XMLHttpRequest's send() increased over time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: e.g., the types you can pass to XMLHttpRequest's send() increased over time","msgtype":"m.text"},"ts":1636640536702,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$g9XNhs5wCcQMMpeW0qjoQ23HWcejp2b5Ib3AXY-FKag"},
{"content":{"body":"jschoi: the fallback there was stringification though, not throwing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: the fallback there was stringification though, not throwing","msgtype":"m.text"},"ts":1636640564108,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$JHmsasQv2jzf3bq-mVDFAwuywWCUWG8RdeJeghHtBCs"},
{"content":{"body":"That’s similar, yeah. I’d love any more specific examples later if you or anyone else thinks of any; feel free to direct-message me or comment on that issue.","msgtype":"m.text"},"ts":1636640603706,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bwsOZwDIqqImgxPzR6offoOb59Sj_j6QcpgpM2ylmbM"},
{"content":{"body":"Any Web Platform API function `fn` that originally threw a TypeError when given a certain value `x` but later was changed to not throw…","format":"org.matrix.custom.html","formatted_body":"Any Web Platform API function <code>fn</code> that originally threw a TypeError when given a certain value <code>x</code> but later was changed to not throw…","msgtype":"m.text"},"ts":1636640632326,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9m9y0EkH-Bg2ThAo_7hGXqpA2KYR9Igd1VY759tO4vI"},
{"content":{"body":"jschoi: addEventListener's third argument was overloaded with a dictionary, that was a bit contentious, but still the right call imo","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: addEventListener's third argument was overloaded with a dictionary, that was a bit contentious, but still the right call imo","msgtype":"m.text"},"ts":1636640657896,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$jxTOyRh9Jf1Rt5unzq3FU4jy58jltDH9yxBh1SctkX8"},
{"content":{"body":"jschoi: there too though I guess it didn't throw, since {} coerces to true","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: there too though I guess it didn't throw, since {} coerces to true","msgtype":"m.text"},"ts":1636640684781,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$7ytvjIOBSiIr666oFN6aKxOzX19woEzJSNCDrRxpUGI"},
{"content":{"body":"Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":"Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","msgtype":"m.text"},"ts":1636640805018,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$X0CL7jRyiJ9uXsRFsfZE_EnozDyxTN7gp1h9apv8L8U"},
{"content":{"body":" * Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":" * Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","m.new_content":{"body":"Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":"Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","msgtype":"m.text"},"m.relates_to":{"event_id":"$X0CL7jRyiJ9uXsRFsfZE_EnozDyxTN7gp1h9apv8L8U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636640809138,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gDB4z5090acNykFV8eAm4goblaRc_K5xZnQSd9yBmwo"},
{"content":{"body":"jschoi: all the path overloads in https://html.spec.whatwg.org/#canvasdrawpath are additions, but also changes the number of arguments","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: all the path overloads in https://html.spec.whatwg.org/#canvasdrawpath are additions, but also changes the number of arguments","msgtype":"m.text"},"ts":1636640910413,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$AMLdKT5sZUr336r0gsm7h_TFySKN0OWpEIl7p2AzLA4"},
{"content":{"body":"I wonder if that's the sort of thing you can add a use counter for, to see if any sites are currently relying on bigints throwing there. Maybe js engines are too low-level to support use counters though.","msgtype":"m.text"},"ts":1636640959701,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$Rd5tq9-pqnffKkwBW437_wBXegaanofyv-a_hooqL6k"},
{"content":{"body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","msgtype":"m.text"},"ts":1636641110788,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7XN9WITAov6yTqwmWu7WdRh8kGKc6k1V689R8sfO2so"},
{"content":{"body":" * Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":" * Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","m.new_content":{"body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","msgtype":"m.text"},"m.relates_to":{"event_id":"$7XN9WITAov6yTqwmWu7WdRh8kGKc6k1V689R8sfO2so","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636641134415,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CmEi9ca1JOYqRd9ufGbWOkTMD8RxRhPNVAJYFg_e9eU"},
{"content":{"body":"So I agree that in general this doesn't feel like it would be a very risky change. But experience suggests that it being hard to rationalise why someone might use a feature in a specific way doesn't mean that no one is depending on that behaviour in practice.","msgtype":"m.text"},"ts":1636641246882,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$iqXhzY9c1-dqxoUk8Q_SzYgez9UBrzhavgMIhwpMpZk"},
{"content":{"body":"Or to quote the /topic; \"please leave your sense of logic at the door\" :)","msgtype":"m.text"},"ts":1636641341299,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$h-k45URmrg7tHNGH62YZV9Vh3pWf2rU-5s0FqeAr7jU"},
{"content":{"body":"I don't think we ever really did that kind of study when the current behavior is an exception though","msgtype":"m.text"},"ts":1636641403669,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Kt8XNtVnLHEjQVe-r2dZKrBynxq6wU60alLwreagtAY"},
{"content":{"body":"Removing exceptions has always been considered acceptable","msgtype":"m.text"},"ts":1636641419083,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$v5v5hj2C5PVq0Tl5PYl6W3jVz4F5fT7LE6jv5kVqZUE"},
{"content":{"body":"Yeah. Any more examples of removing exceptions would be super welcome. ","msgtype":"m.text"},"ts":1636641451849,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gzfCpXybJOs1IiB8EeJ3zkrWOJ6ve_c5KqLbLPyKxC8"},
{"content":{"body":"That's also why we like to start out with throwing if we can","msgtype":"m.text"},"ts":1636641467117,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$JsmVL5mBmUs-KwoxSYcBjzCBIKS1fopqYupNvfuIzYM"},
{"content":{"body":"Yeah, it's definitely less likely that people depend on throwing. But it's at least conceivable to write code that expects anything that worked with Math.abs() must be a Number and would try to do some other operation that doesn't make sense with a bigint. I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.","msgtype":"m.text"},"ts":1636642401058,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$CxghzU1od0plTFTJ5KauTF8T95n6M_nJWPcc7WdriF0"},
{"content":{"body":"(but again, I have the general sense this is probably not a very worrying change)","msgtype":"m.text"},"ts":1636642427584,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$FF4JW5QbcioxVzOgTZ_dgeEOwi2bLllSsny8JcPf3X0"},
{"content":{"body":"Yeah, depending on throwing and type checking are understandable concerns. \nI guess the big thing is that these concerns aren’t unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That’s what they would do for any similar change to a web API anyway, right?","msgtype":"m.text"},"ts":1636642856782,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sbUmG4i5yJotmL-95xDYGLdIEt37sBHjGf0KRymdzTw"},
{"content":{"body":" * Yeah, depending on throwing and type checking are understandable concerns. \nI guess the big thing is that these concerns aren’t unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That’s what they would do for any similar change to a web API anyway, right?","m.new_content":{"body":"Yeah, depending on throwing and type checking are understandable concerns. \nI guess the big thing is that these concerns aren’t unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That’s what they would do for any similar change to a web API anyway, right?","msgtype":"m.text"},"m.relates_to":{"event_id":"$sbUmG4i5yJotmL-95xDYGLdIEt37sBHjGf0KRymdzTw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636642906147,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Xz4m12uxsJrA9uQAYugYxGRXez5N6M2rUCbR-KG2Ggo"},
{"content":{"body":"top-level await used to be a syntax error","msgtype":"m.text"},"ts":1636643330955,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$T1mcv93V3eT7kbnNjhvBJeCxGHq4ZJxwkFoXxomovOk"},
{"content":{"body":"import assertions were also a syntax error","msgtype":"m.text"},"ts":1636643437987,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$1ghvw4PygxXzVeg-ll7Q5BSAsYB6M1b52sJ3NCxmz-Q"},
{"content":{"body":"replacing errors w/ functionality seems to happen quite often","msgtype":"m.text"},"ts":1636643460671,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$6lDsS41IkFuJQMPYI6Tr_WVJsogxarbmHIcV7ReJ03U"},
{"content":{"body":"I'd say that replacing \"was a syntax error\" with \"not a syntax error\" is safer than the equivalent with runtime errors. Although I'm fairly sure there are compat bugs relating to things that only succeed when a resource fails to load correctly, it's pretty rare for obvious reasons.","msgtype":"m.text"},"ts":1636644272031,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$q5OPCCNNPRcfP70IHOt3guqZPN1GVRj7h-kpO96TQ1I"},
{"content":{"body":"jschoi: these are the relevant runtime errors you should likely be concerned about https://www.npmjs.com/package/@openinf/util-errors#Classes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: these are the relevant runtime errors you should likely be concerned about https://www.npmjs.com/package/@openinf/util-errors#Classes","msgtype":"m.text"},"ts":1636645126211,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$jAxYKAyFGRfz4bC0-zf8yuInuLrKL6L7pqraXi02sTo"},
{"content":{"body":" * Yeah, depending on throwing and type checking are understandable concerns. \nI guess the big thing is that these concerns aren’t unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That’s what they would do for any similar change to a web API anyway, right?\n(Telemetry data from Mozilla would also be welcome.)","m.new_content":{"body":"Yeah, depending on throwing and type checking are understandable concerns. \nI guess the big thing is that these concerns aren’t unique to Math; they have happened plenty of times elsewhere in web platform APIs, and like Anne said removing throwing always been assumed to be compatible there. But telemetry could be useful. These are Google employees who have been raising these concerns on that issue, so if they wish they could do telemetry to confirm that nobody actually depends on the exception before rolling it out. That’s what they would do for any similar change to a web API anyway, right?\n(Telemetry data from Mozilla would also be welcome.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$sbUmG4i5yJotmL-95xDYGLdIEt37sBHjGf0KRymdzTw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636645133517,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GPsreWtmQmAvklmda79JC6D0YyUa5Tk1iUimjLhelfE"},
{"content":{"body":"DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given <code>Math.abs(0n)</code>, right?","msgtype":"m.text"},"ts":1636645407985,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7ivDdFcwB5e-EVOicwckfnhcbRl7lcyX7-wnIQlCm38"},
{"content":{"body":" * DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given <code>Math.abs(0n)</code>, right?","m.new_content":{"body":"DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given <code>Math.abs(0n)</code>, right?","msgtype":"m.text"},"m.relates_to":{"event_id":"$7ivDdFcwB5e-EVOicwckfnhcbRl7lcyX7-wnIQlCm38","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636645423613,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7hs4z-Cu-MdVUtGsPqDF2WHDzRda37hx9z4yW9np2ZE"},
{"content":{"body":"No, wait, only Node APIs do that…","msgtype":"m.text"},"ts":1636645435428,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3KhUC1b6VWeWVzRu8LXDmXos85U6ubfWQQDIO7wWrx4"},
{"content":{"body":"Anyways, I’m not sure how Node’s error codes would be relevant to extending Math functions (or web API functions, for that matter).","msgtype":"m.text"},"ts":1636645488212,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rGO7imKAtFxHsZ63AIfeiYKqmYhU_kVDOVxr2MZoUP8"},
{"content":{"body":"> I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.\n\nTypeScript and Flow both support union types, so such a change should not make users change their code.\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.</p>\n</blockquote>\n<p>TypeScript and Flow both support union types, so such a change should not make users change their code.</p>\n","msgtype":"m.text"},"ts":1636645517784,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wgN8a5xN8oO3BcoDQqCVlFhmKzLdYSxkTEzDj7WLfPE"},
{"content":{"body":" * > I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.\n\nTypeScript and Flow both support union types, so such a change should not make users change their code.\n","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.</p>\n</blockquote>\n<p>TypeScript and Flow both support union types, so such a change should not make users change their code.</p>\n","m.new_content":{"body":"> I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.\n\nTypeScript and Flow both support union types, so such a change should not make users change their code.\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.</p>\n</blockquote>\n<p>TypeScript and Flow both support union types, so such a change should not make users change their code.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$wgN8a5xN8oO3BcoDQqCVlFhmKzLdYSxkTEzDj7WLfPE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636645525052,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$a4MExcDZTtZwzhbANnJf2KfXmc20oecIEp9vy-HMWAw"},
{"content":{"body":"`Math` is  considered a \"JavaScript core object\", so the errors thrown are all the standard errors, which is fairly limited...","format":"org.matrix.custom.html","formatted_body":"<code>Math</code> is  considered a &quot;JavaScript core object&quot;, so the errors thrown are all the standard errors, which is fairly limited...","msgtype":"m.text"},"ts":1636645532014,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$Qd6W6x-5SViUCh_CWm69wuFG9gSDeEHGVyh6rQSNoEA"},
{"content":{"body":"> <@jschoi:matrix.org> DerekNonGeneric: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given `Math.abs(0n)`, right?\n\nyeah, just a `TypeError`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$7ivDdFcwB5e-EVOicwckfnhcbRl7lcyX7-wnIQlCm38?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: Node throw TypeErrors with the ERR_INVALID_ARG_TYPE code if given <code>Math.abs(0n)</code>, right?</blockquote></mx-reply>yeah, just a <code>TypeError</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$7ivDdFcwB5e-EVOicwckfnhcbRl7lcyX7-wnIQlCm38"}},"msgtype":"m.text"},"ts":1636646049156,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$AOSGg4188QVKy2WwROxGH2hW3SMLWoAbrv3vni4hDUM"},
{"content":{"body":"Yeah. So I think Node’s error codes are probably not relevant to this issue, in contrast to things like XMLHttpRequest’s send addEventListener, addEventListener’s third argument, and CanvasDrawPath’s path overloads.","msgtype":"m.text"},"ts":1636646157089,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s7ZvE9DFGxf-vF3Je6SZ79hJe2Xcg3DnMoxqBkqqdM4"},
{"content":{"body":"perhaps not, but thought you'd be interested in seeing what Node's errors would be looking like (those are what the core developers use for Node APIs in case you were wondering) -- these errors pretty much map out all the possible value/type problems found in JS APIs (more sophisticated than Web APIs even)","msgtype":"m.text"},"ts":1636646358857,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$eNWkZ0fXx9mdlwAS9TjzJ8Me_RxmDYJdG3D6vO2gOAI"},
{"content":{"body":"annevk: Domenic : I'm referring to the IDL: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/html/html_object_element.idl;l=34?q=object_element.idl&ss=chromium","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> : I'm referring to the IDL: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/html/html_object_element.idl;l=34?q=object_element.idl&amp;ss=chromium","msgtype":"m.text"},"ts":1636654124375,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$FAJIAWOVGBAQ3upbBTpVWX9UkYfhjiUGdh5hfGyogk0"},
{"content":{"body":"useMap shouldn't be there","msgtype":"m.text"},"ts":1636654173217,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$hwYr6FiNKKI1kpSlyreKQn9Aa6T4TCZGfBArPyz3OjA"},
{"content":{"body":"It should: https://html.spec.whatwg.org/#dom-object-usemap","msgtype":"m.text"},"ts":1636654185249,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$b-IgH5Y294UG04KewHxBjqy1GqwvLGlKjUPsd-y2wDw"},
{"content":{"body":"It's like all the other legacy content attributes like codeBase and codeType; still reflected in IDL attributes.","msgtype":"m.text"},"ts":1636654215296,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$vaepiGryi10uAvvmH9_Oj56yHYsvmKXY5R7gulDsWOU"},
{"content":{"body":"Domenic: ah thanks, urgh, I was looking at: https://html.spec.whatwg.org/#htmlobjectelement","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: ah thanks, urgh, I was looking at: https://html.spec.whatwg.org/#htmlobjectelement","msgtype":"m.text"},"ts":1636654266957,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$AzHImVFKt18bA9uyUxB8FZ_TKOGO4Q-GsMcvyySb6lw"},
{"content":{"body":"which is why I was confused","msgtype":"m.text"},"ts":1636654274043,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$Oj0M7INFcunJfLv1tmg3iKUOzty3WMJAYYrDc20nyJs"},
{"content":{"body":"Yeah, the \"// also has obsolete members\" separation is perhaps not worth the potential confusion it causes...","msgtype":"m.text"},"ts":1636654310298,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$wMw8lLzOmVYmN6VSme0Fi3mFovhrgWEh0EyQGJeaH2E"},
{"content":{"body":"I continue to favor a refactor whereby we have clear web developer and implementer sections for each element and fold all that stuff back in","msgtype":"m.text"},"ts":1636654532759,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$i_Zv-iE1vmhgcQpO2QON3sCZUPsIE2Sjclz62NAtdU4"},
{"content":{"body":"jschoi: CSS has done this sort of \"previous invalid, now valid\" addition a multitude of times. It's *occasionally* been problematic, but almost always fine.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: CSS has done this sort of &quot;previous invalid, now valid&quot; addition a multitude of times. It's <em>occasionally</em> been problematic, but almost always fine.","msgtype":"m.text"},"ts":1636654702813,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3KW5MYZjWucbzivjcmCbOx_0C4VFocndlcpwnl81bew"},
{"content":{"body":"(The issues have largely been from when a property that previously only worked on a subset of elements started working on a new set as well; pages often accidentally over-apply properties, and if a property doesn't apply, that's not an error, so they just leave it in. Then the page's behavior changes when it starts being valid.)","msgtype":"m.text"},"ts":1636654762860,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uwA-YRYyoJK8WrTEcK6TjloRfrKpiPpby5CEBRwVeMw"},
{"content":{"body":"But when it's a *noticeable* error, as in the property fails to parse, but later it does, it's *usually* fine; exceptions have been rare.","format":"org.matrix.custom.html","formatted_body":"But when it's a <em>noticeable</em> error, as in the property fails to parse, but later it does, it's <em>usually</em> fine; exceptions have been rare.","msgtype":"m.text"},"ts":1636654787167,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NVuqAVdb5lVKbNSxsZ0fkIaWd8o31K9-z-JTyPaNaKM"},
{"content":{"body":"So this should be directly relevant to your case - if a method currently throws an error, but will stop doing so, it's *likely* to be fine. You can generally expect little to no upgrade pain, and when there *is* such a problem, it'll be a surprise anyway, so there's not much sense in fearing it.","format":"org.matrix.custom.html","formatted_body":"So this should be directly relevant to your case - if a method currently throws an error, but will stop doing so, it's <em>likely</em> to be fine. You can generally expect little to no upgrade pain, and when there <em>is</em> such a problem, it'll be a surprise anyway, so there's not much sense in fearing it.","msgtype":"m.text"},"ts":1636654979931,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$k3a6cUp0nn7Cc87_gJ1grGTBIRFINcexIWWrW4C4tBk"},
{"content":{"body":"Relevant example of the opposite case is things like the aEL() \"third argument becomes an option bag\" case that annevk mentioned - it has the potential to *change* behavior that was previously valid (passing an arbitrary object, which'll get bool'd and treated as setting the \"capture\" option to true) into different behavior (passing an arbitrary object now invokes the option-bag behavior, which'll generally treat the \"capture\" option as false).","format":"org.matrix.custom.html","formatted_body":"Relevant example of the opposite case is things like the aEL() &quot;third argument becomes an option bag&quot; case that <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a> mentioned - it has the potential to <em>change</em> behavior that was previously valid (passing an arbitrary object, which'll get bool'd and treated as setting the &quot;capture&quot; option to true) into different behavior (passing an arbitrary object now invokes the option-bag behavior, which'll generally treat the &quot;capture&quot; option as false).","msgtype":"m.text"},"ts":1636655472865,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NHjwBsd71nlfjaDpK1M51p_a6ldFBa_ukz0CUPjXun4"},
{"content":{"body":"Right, so the aEL change was even riskier in that passing an object bag did not originally throw an error. ","format":"org.matrix.custom.html","formatted_body":"Right, so the aEL change was even riskier in that passing an object bag did not originally throw an error.","msgtype":"m.text"},"ts":1636655591679,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NCd_Np4C-67D6CUC5ZFJEwU3MsAkz9mqAfM5glFsTYI"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1636655630233,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QGEWdquiPRl49GZZWXZ52sUrwyO7MLNWQh0P7q0Ihcc"},
{"content":{"body":"The alternative on record was four arguments. Still happy we dodged that.","msgtype":"m.text"},"ts":1636655659384,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$tfTCNPLQxY7SvaY2PUmf-ml-JjbwgXFxouZWvD3KIHc"},
{"content":{"body":"Oh yeah, not saying it was a bad idea, just that it was risky, and the sort of thing that one *should* anticipate problems with.","format":"org.matrix.custom.html","formatted_body":"Oh yeah, not saying it was a bad idea, just that it was risky, and the sort of thing that one <em>should</em> anticipate problems with.","msgtype":"m.text"},"ts":1636655702432,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9Pxu7WSBjh-z6oP5HBnURYtEC6npXTKcuH0B1ll-X9k"}
]