[
{"content":{"body":"Henllo. I'm expanding my knowlede in order to get my money back after being scamed :') help? I found this inspecting element on the website trying to get to the domain but I'm not so versed in this","msgtype":"m.text"},"ts":1636603395501,"senderName":"Cam Morales Silva","senderId":"@camisdead:matrix.org","id":"$xI2ZG1kVDzVdJcjb-c9XgWtF6YOPsttOIbjcDPFNV2I"},
{"content":{"body":"I know for experience that I can get away with something like this","msgtype":"m.text"},"ts":1636603435785,"senderName":"Cam Morales Silva","senderId":"@camisdead:matrix.org","id":"$Bm0z2dwKbcATjRPG1qS2qssIqz2h2Es_xy3Zl_7N604"},
{"content":{"body":"TabAtkins (or anyone who may know): are the old Web IDL spec stylesheets still accessible somewhere?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> (or anyone who may know): are the old Web IDL spec stylesheets still accessible somewhere?","msgtype":"m.text"},"ts":1636609954224,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$UQr28tSmT08kx8AEPOxnpOE3MmP8nHCpZ274vgr4Do8"},
{"content":{"body":"DerekNonGeneric: yeah it's just the Bikeshed default stylesheet","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dereknongeneric:mozilla.org\">DerekNonGeneric</a>: yeah it's just the Bikeshed default stylesheet","msgtype":"m.text"},"ts":1636610279234,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EIl1sst3qjK2TFuIOi1QR8-kifWWh9rZbGYmOzGJj3Y"},
{"content":{"body":"TabAtkins: oh, yeah, they are indeed similar, but alas still no dark mode; was looking for the rest of this gist that i happened to save a while ago https://gist.github.com/DerekNonGeneric/e3072db4ea16cc64e138512a4a95bf56","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: oh, yeah, they are indeed similar, but alas still no dark mode; was looking for the rest of this gist that i happened to save a while ago https://gist.github.com/DerekNonGeneric/e3072db4ea16cc64e138512a4a95bf56","msgtype":"m.text"},"ts":1636610587289,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$7uUwueKuf7iayBZlrKzEJZFTyesAX0fs72CJpc1IFL8"},
{"content":{"body":"Oh the dark-mode colors are inserted separately from the stylesheet itself. Look at any Bikeshed-generated spec, like the CSS specs, you'll find them.","msgtype":"m.text"},"ts":1636611316159,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5GH6J1NSU_DdXz3HsEwJ_BysYfWVCHbVb_yMmzSE2FU"},
{"content":{"body":"Domenic: annevk : Hey, there was some agreement to remove <object usemap> from the spec, and I see the HTMLObjectElement doesn't have it anymore in the spec. However, it is still there in Gecko & Blink & WPT.   ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a> : Hey, there was some agreement to remove &lt;object usemap&gt; from the spec, and I see the HTMLObjectElement doesn't have it anymore in the spec. However, it is still there in Gecko &amp; Blink &amp; WPT.","msgtype":"m.text"},"ts":1636623943732,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$Bbs_4oY_WuDbJApa8Q26WDa4bPKhGjjtgClX9rgfbu8"},
{"content":{"body":"Is that intentional?","msgtype":"m.text"},"ts":1636623952232,"senderName":"ntim","senderId":"@ntim:mozilla.org","id":"$HaSwDYSiSlDNYd2EFFUuC9zCt1K1td-BRunfooDHBEk"},
{"content":{"body":"ntim: hmm, there was https://github.com/web-platform-tests/wpt/pull/27830","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ntim:mozilla.org\">ntim</a>: hmm, there was https://github.com/web-platform-tests/wpt/pull/27830","msgtype":"m.text"},"ts":1636627374572,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$19EmVYER6kyjR_nKorB9Fxs4SkLToLvdtezI3_7_DT0"},
{"content":{"body":"ntim: Gecko has an open bug still","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ntim:mozilla.org\">ntim</a>: Gecko has an open bug still","msgtype":"m.text"},"ts":1636627382887,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$nIMJZIAwfn3MH502lj1iFEwolzDqIs57Q3rDF743reQ"},
{"content":{"body":"Morning all, I have a silly question about `DocumentOrShadowRoot` mixin in https://dom.spec.whatwg.org/#mixin-documentorshadowroot. If I have a shadow root, should I be able to use `getElementByTagName` since it's part of the mixin?","format":"org.matrix.custom.html","formatted_body":"Morning all, I have a silly question about <code>DocumentOrShadowRoot</code> mixin in https://dom.spec.whatwg.org/#mixin-documentorshadowroot. If I have a shadow root, should I be able to use <code>getElementByTagName</code> since it's part of the mixin?","msgtype":"m.text"},"ts":1636632275975,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$ur5vViDyBgf-8-J1dPueC1QSqL44ie6DyjfT9dDnc08"},
{"content":{"body":"AutomatedTester: I don't see it on the mixin?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: I don't see it on the mixin?","msgtype":"m.text"},"ts":1636633663770,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$VNnW4hyuYIZUWcBHs5jQI4ldXBe5d2RnB4jpZTXIB9w"},
{"content":{"body":"AutomatedTester: in particular, note how the mixin doesn't define any members (HTML defines some)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: in particular, note how the mixin doesn't define any members (HTML defines some)","msgtype":"m.text"},"ts":1636633680723,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$UeYwREl0NtXbN6T0PvbamMhhotFKgZLVs53ghS4QsRU"},
{"content":{"body":"ok, I thought (probably wrongly) that when I saw `DocumentOrShadowroot` that I could use the APIs interchangeable","format":"org.matrix.custom.html","formatted_body":"ok, I thought (probably wrongly) that when I saw <code>DocumentOrShadowroot</code> that I could use the APIs interchangeable","msgtype":"m.text"},"ts":1636633749801,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$qLVfZGE-T4PQ07rJUkPhF_AdEcvLnrTcMlmLNYGyzgM"},
{"content":{"body":"so, `getElementsByTagName` is not available then on a shadow root?","format":"org.matrix.custom.html","formatted_body":"so, <code>getElementsByTagName</code> is not available then on a shadow root?","msgtype":"m.text"},"ts":1636633882431,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$pp091ba4QHzsphXhRnVPKBTb7b89wdeE_Fn-NHvHkCU"},
{"content":{"body":"AutomatedTester: that is only defined on Document and Element, so no","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: that is only defined on Document and Element, so no","msgtype":"m.text"},"ts":1636633923659,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$oRqvQlFKCoVIWOTuP47U4k8tkA7vwDGCKUD5TL3hPp8"},
{"content":{"body":"AutomatedTester: I think you might have inverted the logic of mixins (or something to that effect)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: I think you might have inverted the logic of mixins (or something to that effect)","msgtype":"m.text"},"ts":1636633963858,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$RVA72spLmNmwPpf7_0rkh8dGuse4L2XqsibggTdf7IE"},
{"content":{"body":"probably :D","msgtype":"m.text"},"ts":1636633983635,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$OgbfUIDjmLLn4pTKry0q_xII9HumbzI1wz7R_GEP9Lc"},
{"content":{"body":"annevk: so to look inside the Shadow Root one would need to do something like `document.get...().shadowRoot.host.get...()` or something along those lines?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: so to look inside the Shadow Root one would need to do something like <code>document.get...().shadowRoot.host.get...()</code> or something along those lines?","msgtype":"m.text"},"ts":1636634463868,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$-cQdFLYunVRw240Q_Rwea6sdjlcW_PpEG5DbLc0fiLY"},
{"content":{"body":"AutomatedTester: it has querySelector() and getElementById()","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: it has querySelector() and getElementById()","msgtype":"m.text"},"ts":1636634620449,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$uQyms_YRxNgzXvsHHov1txZkuj2qniyR8Og7lLVEjbM"},
{"content":{"body":"AutomatedTester: through DocumentFragment","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@automatedtester:matrix.org\">AutomatedTester</a>: through DocumentFragment","msgtype":"m.text"},"ts":1636634632118,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$fXBU30rjQowfDwaw1ioGlugLmW8TYRu3SXMYB_cMsew"},
{"content":{"body":"ahhh ok","msgtype":"m.text"},"ts":1636634670288,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$10xYFG4Si7GzvrnZw06ma3BegncYM3p5jtYqWy2BVrE"},
{"content":{"body":"why is the API limited ?","msgtype":"m.text"},"ts":1636634690573,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$wDtlhMYBcAneK-Ya9KY1hoO1DWJf25jbuOZ79U3pkro"},
{"content":{"body":"I'm not sure I understand what you mean","msgtype":"m.text"},"ts":1636634813076,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Fok5t3ZX_mt9lWIZBKsyN6T5ZwCPG5GrBWtb8JmUNpM"},
{"content":{"body":"Why are querySelector and getElementById but not the getElementsBy* APIs. ","format":"org.matrix.custom.html","formatted_body":"Why are querySelector and getElementById but not the getElementsBy* APIs.","msgtype":"m.text"},"ts":1636635002964,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$BlMbztStYGZFQVUy0e5lvpPHadc1Wb7e7NxTymI2UOU"},
{"content":{"body":"My reason for asking is people are using selenium for working with web components but in Chrome 96, they can’t search for element’s anymore by tag name","msgtype":"m.text"},"ts":1636635092501,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$_6ak02k4D5Gu22HVphc-DW7cm3gN9bqn5PjQ6KQhI1s"},
{"content":{"body":"So want to understand the why so I can fix this properly ","format":"org.matrix.custom.html","formatted_body":"So want to understand the why so I can fix this properly","msgtype":"m.text"},"ts":1636635107651,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$bsPpazhdMcUfD3pzSbBsBGr7Ckb1MyFXiT9pPf5uGrk"},
{"content":{"body":"They were never included as they're kind of legacy APIs","msgtype":"m.text"},"ts":1636635629170,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$ma4w4YeftAN-SJFpqbIKORSaVNzVVztgowUX6SfrpV4"},
{"content":{"body":"Ok, thanks ","format":"org.matrix.custom.html","formatted_body":"Ok, thanks","msgtype":"m.text"},"ts":1636635778110,"senderName":"AutomatedTester","senderId":"@automatedtester:matrix.org","id":"$hNemG4973SSmZ1ISbEaAHsdebNxWqkSmL8nW8pESVTM"},
{"content":{"body":"Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","msgtype":"m.text"},"ts":1636639989694,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Yvcp1R-Aty462E0U4aT3ZP6GCnv5M-S872M7H2ydWbY"},
{"content":{"body":"* Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","m.new_content":{"body":"Have there been any web-API functions in the past that were later extended to accept more input types, instead of throwing errors? And if there have been any such functions, were there any web-compatibility and polyfilling problems? (I’m interested because of https://github.com/tc39/proposal-bigint-math/issues/17.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$Yvcp1R-Aty462E0U4aT3ZP6GCnv5M-S872M7H2ydWbY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636640045782,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5khmK9G_xwVOo7_OMzpcEODllWUL0PGkMHIrz1_DqBY"},
{"content":{"body":"jschoi: I think we've done that plenty of times, though coming up with examples is a little harder","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I think we've done that plenty of times, though coming up with examples is a little harder","msgtype":"m.text"},"ts":1636640506589,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$v_-obgakAvRQvXTe-9Etj1jsXzumjpSMjgNvR1dpuWk"},
{"content":{"body":"jschoi: e.g., the types you can pass to XMLHttpRequest's send() increased over time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: e.g., the types you can pass to XMLHttpRequest's send() increased over time","msgtype":"m.text"},"ts":1636640536702,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$g9XNhs5wCcQMMpeW0qjoQ23HWcejp2b5Ib3AXY-FKag"},
{"content":{"body":"jschoi: the fallback there was stringification though, not throwing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: the fallback there was stringification though, not throwing","msgtype":"m.text"},"ts":1636640564108,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$JHmsasQv2jzf3bq-mVDFAwuywWCUWG8RdeJeghHtBCs"},
{"content":{"body":"That’s similar, yeah. I’d love any more specific examples later if you or anyone else thinks of any; feel free to direct-message me or comment on that issue.","msgtype":"m.text"},"ts":1636640603706,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bwsOZwDIqqImgxPzR6offoOb59Sj_j6QcpgpM2ylmbM"},
{"content":{"body":"Any Web Platform API function `fn` that originally threw a TypeError when given a certain value `x` but later was changed to not throw…","format":"org.matrix.custom.html","formatted_body":"Any Web Platform API function <code>fn</code> that originally threw a TypeError when given a certain value <code>x</code> but later was changed to not throw…","msgtype":"m.text"},"ts":1636640632326,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9m9y0EkH-Bg2ThAo_7hGXqpA2KYR9Igd1VY759tO4vI"},
{"content":{"body":"jschoi: addEventListener's third argument was overloaded with a dictionary, that was a bit contentious, but still the right call imo","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: addEventListener's third argument was overloaded with a dictionary, that was a bit contentious, but still the right call imo","msgtype":"m.text"},"ts":1636640657896,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$jxTOyRh9Jf1Rt5unzq3FU4jy58jltDH9yxBh1SctkX8"},
{"content":{"body":"jschoi: there too though I guess it didn't throw, since {} coerces to true","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: there too though I guess it didn't throw, since {} coerces to true","msgtype":"m.text"},"ts":1636640684781,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$7ytvjIOBSiIr666oFN6aKxOzX19woEzJSNCDrRxpUGI"},
{"content":{"body":"Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":"Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","msgtype":"m.text"},"ts":1636640805018,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$X0CL7jRyiJ9uXsRFsfZE_EnozDyxTN7gp1h9apv8L8U"},
{"content":{"body":" * Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":" * Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","m.new_content":{"body":"Background: TC39 is considering doing something similar to some `Math` functions with BigInt inputs. `Math.abs(-1n)` currently throws a TypeError but this would extend it to return `+1n`. `Math.max(0, 1n)` would return `1n` because `0 < 1n` is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","format":"org.matrix.custom.html","formatted_body":"Background: TC39 is considering doing something similar to some <code>Math</code> functions with BigInt inputs. <code>Math.abs(-1n)</code> currently throws a TypeError but this would extend it to return <code>+1n</code>. <code>Math.max(0, 1n)</code> would return <code>1n</code> because <code>0 &lt; 1n</code> is valid. I have suspected that similar things have been done with web APIs plenty of times before, though of course I’d like to be able to give specific examples.","msgtype":"m.text"},"m.relates_to":{"event_id":"$X0CL7jRyiJ9uXsRFsfZE_EnozDyxTN7gp1h9apv8L8U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636640809138,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gDB4z5090acNykFV8eAm4goblaRc_K5xZnQSd9yBmwo"},
{"content":{"body":"jschoi: all the path overloads in https://html.spec.whatwg.org/#canvasdrawpath are additions, but also changes the number of arguments","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: all the path overloads in https://html.spec.whatwg.org/#canvasdrawpath are additions, but also changes the number of arguments","msgtype":"m.text"},"ts":1636640910413,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$AMLdKT5sZUr336r0gsm7h_TFySKN0OWpEIl7p2AzLA4"},
{"content":{"body":"I wonder if that's the sort of thing you can add a use counter for, to see if any sites are currently relying on bigints throwing there. Maybe js engines are too low-level to support use counters though.","msgtype":"m.text"},"ts":1636640959701,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$Rd5tq9-pqnffKkwBW437_wBXegaanofyv-a_hooqL6k"},
{"content":{"body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","msgtype":"m.text"},"ts":1636641110788,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7XN9WITAov6yTqwmWu7WdRh8kGKc6k1V689R8sfO2so"},
{"content":{"body":" * Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":" * Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","m.new_content":{"body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from annevk, without compatibility problems. But yeah.","format":"org.matrix.custom.html","formatted_body":"Telemetry data would be useful, but I struggle to think of a way in which throwing behavior would actually break something…Why would anyone already be supplying mixed Number/BigInt inputs to Math functions? And web APIs have done function-domain broadening before already, e.g., with those CanvasDrawPath extensions and XMLHttpRequest examples from <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>, without compatibility problems. But yeah.","msgtype":"m.text"},"m.relates_to":{"event_id":"$7XN9WITAov6yTqwmWu7WdRh8kGKc6k1V689R8sfO2so","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636641134415,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CmEi9ca1JOYqRd9ufGbWOkTMD8RxRhPNVAJYFg_e9eU"},
{"content":{"body":"So I agree that in general this doesn't feel like it would be a very risky change. But experience suggests that it being hard to rationalise why someone might use a feature in a specific way doesn't mean that no one is depending on that behaviour in practice.","msgtype":"m.text"},"ts":1636641246882,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$iqXhzY9c1-dqxoUk8Q_SzYgez9UBrzhavgMIhwpMpZk"},
{"content":{"body":"Or to quote the /topic; \"please leave your sense of logic at the door\" :)","msgtype":"m.text"},"ts":1636641341299,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$h-k45URmrg7tHNGH62YZV9Vh3pWf2rU-5s0FqeAr7jU"},
{"content":{"body":"I don't think we ever really did that kind of study when the current behavior is an exception though","msgtype":"m.text"},"ts":1636641403669,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Kt8XNtVnLHEjQVe-r2dZKrBynxq6wU60alLwreagtAY"},
{"content":{"body":"Removing exceptions has always been considered acceptable","msgtype":"m.text"},"ts":1636641419083,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$v5v5hj2C5PVq0Tl5PYl6W3jVz4F5fT7LE6jv5kVqZUE"},
{"content":{"body":"Yeah. Any more examples of removing exceptions would be super welcome. ","msgtype":"m.text"},"ts":1636641451849,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gzfCpXybJOs1IiB8EeJ3zkrWOJ6ve_c5KqLbLPyKxC8"},
{"content":{"body":"That's also why we like to start out with throwing if we can","msgtype":"m.text"},"ts":1636641467117,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$JsmVL5mBmUs-KwoxSYcBjzCBIKS1fopqYupNvfuIzYM"},
{"content":{"body":"Yeah, it's definitely less likely that people depend on throwing. But it's at least conceivable to write code that expects anything that worked with Math.abs() must be a Number and would try to do some other operation that doesn't make sense with a bigint. I also vaugely wonder if typecheckers dinstinguish the two and if this could change type inference in a way that would require code changes for users of those tools.","msgtype":"m.text"},"ts":1636642401058,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$CxghzU1od0plTFTJ5KauTF8T95n6M_nJWPcc7WdriF0"},
{"content":{"body":"(but again, I have the general sense this is probably not a very worrying change)","msgtype":"m.text"},"ts":1636642427584,"senderName":"jgraham","senderId":"@jgraham_:matrix.org","id":"$FF4JW5QbcioxVzOgTZ_dgeEOwi2bLllSsny8JcPf3X0"}
]