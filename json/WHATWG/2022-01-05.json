[
{"content":{"body":"sideshowbarker: there are some existing CSP + CSS issues, not sure if they cover this","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: there are some existing CSP + CSS issues, not sure if they cover this","msgtype":"m.text"},"ts":1641400846490,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$y0EVt52psVaPaVXaHqJGah7vFDR0Vnk_Frqrwg_8WdM"},
{"content":{"body":"Oh right, the spec even links https://github.com/w3c/webappsec-csp/issues/212","msgtype":"m.text"},"ts":1641400925697,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$ynbPGEycww7mQqAqMpuy6qnidXDXyfwQDCedI2z9kio"},
{"content":{"body":"annevk: thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: thanks","msgtype":"m.text"},"ts":1641409594650,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$wW0wjZawwOknav7XB82OgKOF9t6sHfsnpcVWsDea1FA"},
{"content":{"body":"I've just learned that `postMessage` is async, such that if you do `worker.postMessage(); while (true) {}` the message will never actually fire. Is there a reason for this? If no, could it be changed, possibly as an opt-in option? This comes up in the context of emscripten.","format":"org.matrix.custom.html","formatted_body":"I've just learned that <code>postMessage</code> is async, such that if you do <code>worker.postMessage(); while (true) {}</code> the message will never actually fire. Is there a reason for this? If no, could it be changed, possibly as an opt-in option? This comes up in the context of emscripten.","msgtype":"m.text"},"ts":1641413042755,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z4CitGYg9e2l0VjCa19xtx0Mq3JL-qoGS5JAo-epmQo"},
{"content":{"body":"I don't think that's true per the spec","msgtype":"m.text"},"ts":1641413369250,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$E-faZ9coToQ0FxRakBlxRZ8C2dl7AJCyyt0FxbyOId8"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage","msgtype":"m.text"},"ts":1641413370043,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$9f4CLnwu6q7wFfPxVS9VDWPoXncyZ-QIKfhGv57NMEo"},
{"content":{"body":"The only task or microtask queued in that algorithm is the one that is actually queued on the worker's event loop","msgtype":"m.text"},"ts":1641413425841,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$cHgt-q2uMa3AhyLGUaxmWEHyi6ZpNnZ4rHvKRU6Z154"},
{"content":{"body":"But I guess it comes down to the notion of observability, since you can't observe the result of a task in a worker thread if the main thread is stuck in a loop","msgtype":"m.text"},"ts":1641413534827,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$lak9U3zu1nyGgSP79PFiW4xJ5WS-pAwJEozNYDK1LI0"},
{"content":{"body":"you can with a SAB","msgtype":"m.text"},"ts":1641413614204,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZGUc3UqnV_FAkxy_rFeUPy-x11BADAAgmmLPPv1d8N0"},
{"content":{"body":"True. Then this is a bug","msgtype":"m.text"},"ts":1641413626792,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$tXFBDXPndAI_y9HfEU0C5yFObD5YZ5hgFdRnCMFNkng"},
{"content":{"body":"MDN has it documented:\n\n> After postMessage() is called, the MessageEvent will be dispatched only after all pending execution contexts have finished. For example, if postMessage() is invoked in an event handler, that event handler will run to completion, as will any remaining handlers for that same event, before the MessageEvent is dispatched.","format":"org.matrix.custom.html","formatted_body":"<p>MDN has it documented:</p>\n<blockquote>\n<p>After postMessage() is called, the MessageEvent will be dispatched only after all pending execution contexts have finished. For example, if postMessage() is invoked in an event handler, that event handler will run to completion, as will any remaining handlers for that same event, before the MessageEvent is dispatched.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641414356599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9n8exPdC90xkOaj1RPUAxvupaJgdv2PRiROpw2nxU90"},
{"content":{"body":"I can't actually tell from reading the spec if the \"add a task\" implies adding it on the current thread or the worker's, but I'll take your word for it.","msgtype":"m.text"},"ts":1641414482789,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vaT16Ev9844DKwnSt3Z7oBBfCpcp5wBN_hC1isvSTTc"},
{"content":{"body":"That task fires the `message` event, and event firing is synchronous, so it must be on the worker's thread","format":"org.matrix.custom.html","formatted_body":"That task fires the <code>message</code> event, and event firing is synchronous, so it must be on the worker's thread","msgtype":"m.text"},"ts":1641414632783,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$wJtD3OAmyeuUK2V3HWwnz5hqIiIRJJQtsj4rVHk1ALU"}
]