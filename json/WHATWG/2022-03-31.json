[
{"content":{"body":"if a figure containing a figcaption isn't allowed to have any other roles but I want to annotate the figure as a \"doc-example\" using DPUB-ARIA, would enclosing the figure in a `<div>` that has the doc-example role be acceptable?","format":"org.matrix.custom.html","formatted_body":"if a figure containing a figcaption isn't allowed to have any other roles but I want to annotate the figure as a \"doc-example\" using DPUB-ARIA, would enclosing the figure in a <code>&lt;div&gt;</code> that has the doc-example role be acceptable?","msgtype":"m.text"},"ts":1648684852114,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$SVRNhbRjG4oxsxMZ4Dt4aZGd7SPZerGdv5MrmQObVik"},
{"content":{"body":"semantics are tricky; it's hard to show that something is an example and has a caption. but on really long documents with lots of figures, being able to skim by filtering figures (esp. when reading linearly, eg with a screenreader) should be helpful.","msgtype":"m.text"},"ts":1648685026321,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$4YNGfz-22PFOwImYkrr6sZqYaOQ9_RkHkcFyE4Vcfk0"},
{"content":{"body":"Seirdy, noticed the same thing...DPUB-ARIA table says you should be able to use it on figcaption; specs are inconsistant.","msgtype":"m.text","org.matrix.msc1767.text":"Seirdy, noticed the same thing...DPUB-ARIA table says you should be able to use it on figcaption; specs are inconsistant."},"ts":1648689738428,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$-HDv-itlUnXah2IHHIGiHfBmxR-jA_97biwGcVuVba4"},
{"content":{"body":"also noted some some auditing tools don't like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?","msgtype":"m.text","org.matrix.msc1767.text":"also noted some some auditing tools don't like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?"},"ts":1648690242726,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$tXlXHSWdt9W9FMk1q13ZiL0waxel63LVbX8WsKsXWFo"},
{"content":{"body":"> <@aja:mozilla.org> also noted some some auditing tools don't like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?\n\nwhich tools?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$tXlXHSWdt9W9FMk1q13ZiL0waxel63LVbX8WsKsXWFo?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aja:mozilla.org\">@aja:mozilla.org</a><br>also noted some some auditing tools don&#39;t like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?</blockquote></mx-reply>which tools?","m.relates_to":{"m.in_reply_to":{"event_id":"$tXlXHSWdt9W9FMk1q13ZiL0waxel63LVbX8WsKsXWFo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@aja:mozilla.org> also noted some some auditing tools don't like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?\n\nwhich tools?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$tXlXHSWdt9W9FMk1q13ZiL0waxel63LVbX8WsKsXWFo?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aja:mozilla.org\">@aja:mozilla.org</a><br>also noted some some auditing tools don&#39;t like page-header or page-footer on section element, as DPUB-ARIA table indicates.  perhaps wanting them to be on header or footer elements instead?</blockquote></mx-reply>which tools?","mimetype":"text/html"}]},"ts":1648701238193,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$dcOvFdm1CQCISjg1DaIvxl83ZZrjFREzLOoJ3gyYECc"},
{"content":{"body":"iirc, aXe ???","msgtype":"m.text","org.matrix.msc1767.text":"iirc, aXe ???"},"ts":1648701287197,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$CeHHTRrcZG5Ce-a64AK6xeKmqAfehUlnPEISDzJ9pDM"},
{"content":{"body":"ugh, ofc it's aXe :peko_confounded: ","format":"org.matrix.custom.html","formatted_body":"ugh, ofc it's aXe <img data-mx-emoticon=\"\" src=\"mxc://envs.net/57eac499d24d4bd232cafaa623c5392c240a6d08\" alt=\":peko_confounded:\" title=\":peko_confounded:\" height=\"32\" vertical-align=\"middle\" />","msgtype":"m.text"},"ts":1648701366260,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$R2xeYR6iG7KRZhh4_8-YheelfQ7GSSmhfZxg-yYkdnU"},
{"content":{"body":"seem to recall it being fixed in pre-lease now","msgtype":"m.text","org.matrix.msc1767.text":"seem to recall it being fixed in pre-lease now"},"ts":1648701403318,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$MHX0-oBcDcjMv4QgyM9PDhGVNiRRQbmZxYZQ9TirAIM"},
{"content":{"body":"yeah the very latest release fixed a few dpub issues (finally making the skipping of doc-endnote a non-error), didn't know about this tho","msgtype":"m.text"},"ts":1648701452946,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$AjoMDrGZYrdEj48Vj8YJqRf4wa4eYzsgo3au_Xzn8QI"},
{"content":{"body":"may be confused....been a few months since doing related testing","msgtype":"m.text","org.matrix.msc1767.text":"may be confused....been a few months since doing related testing"},"ts":1648701514684,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$LXH-RsxzfM4soVnkzSq4G2m1Epn8sT6nyRaFzsgqJBY"},
{"content":{"body":"maybe by Q4 2023 we'll be freed from the outdated audits of aXe-4.3 and earlier, as all the meta-auditors finally bump their dependencies","msgtype":"m.text"},"ts":1648701545911,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$q2nBk4erPQMddlop5HvBI6NUawq66wkGZ7qxUG5YG3c"},
{"content":{"body":"* maybe by Q4 2023 we'll be freed from the outdated audits of aXe-4.3 and earlier, as all the meta-auditors finally bump their dependencies","m.new_content":{"body":"maybe by Q4 2023 we'll be freed from the outdated audits of aXe-4.3 and earlier, as all the meta-auditors finally bump their dependencies","msgtype":"m.text"},"m.relates_to":{"event_id":"$q2nBk4erPQMddlop5HvBI6NUawq66wkGZ7qxUG5YG3c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648701558165,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$6S7BbAAjJViYpiSETHFpGIX6-G82o4tgl9L4UVP3_X4"},
{"content":{"body":"for now tho, would it be a good idea to wrap the figure in a div with `role=example`?","format":"org.matrix.custom.html","formatted_body":"for now tho, would it be a good idea to wrap the figure in a div with <code>role=example</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for now tho, would it be a good idea to wrap the figure in a div with `role=example`?","mimetype":"text/plain"},{"body":"for now tho, would it be a good idea to wrap the figure in a div with <code>role=example</code>?","mimetype":"text/html"}]},"ts":1648701763457,"senderName":"Seirdy","senderId":"@seirdy:seirdy.one","id":"$4JHUS41FbCVyaUycNODezM9Da2PjKA_J0oGO8r0ezzQ"},
{"content":{"body":"i guess...never bothered since mine were multiple font samples in a details element in a colophon (non-landmark) section","msgtype":"m.text","org.matrix.msc1767.text":"i guess...never bothered since mine were multiple font samples in a details element in a colophon (non-landmark) section"},"ts":1648702146765,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$2v7Gw5dFanuBDKzKqjq1Sqbowg8XnukQHbwueBcE-sA"},
{"content":{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw. \n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is just a dynamic assertion that this should never throw here, and so I should be able to assert that","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is just a dynamic assertion that this should never throw here, and so I should be able to assert that</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw. \n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is just a dynamic assertion that this should never throw here, and so I should be able to assert that","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is just a dynamic assertion that this should never throw here, and so I should be able to assert that</p>\n","mimetype":"text/html"}]},"ts":1648746869220,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$tIf-0IYCYHNCU_J82x7j_5iaC6xEa51hSJT3GTYUK6w"},
{"content":{"body":" * Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,</p>\n","m.new_content":{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tIf-0IYCYHNCU_J82x7j_5iaC6xEa51hSJT3GTYUK6w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that,</p>\n","mimetype":"text/html"}]},"ts":1648747002589,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$4C9ut5ye1MEgkPxnMn9gx21DwKa9lG5KDiUbdbkfK1I"},
{"content":{"body":" * Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.</p>\n","m.new_content":{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tIf-0IYCYHNCU_J82x7j_5iaC6xEa51hSJT3GTYUK6w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Domenic: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in [ReadableByteStreamTee](https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee), 15.2 close steps, [ReadableByteStreamControllerClose](https://streams.spec.whatwg.org/#readable-byte-stream-controller-close) is annotated with a `!`... but looking at the algorithm, it _can_ throw.\n\nSo I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Sort of related to the completion values conversation in Streams: One thing that's not clear to me is how strong we should take completion value annotation. For example, in <a href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>, 15.2 close steps, <a href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a> is annotated with a <code>!</code>... but looking at the algorithm, it <em>can</em> throw.</p>\n<p>So I'm left wondering if this is a specification bug (and wondering what it means if close steps throws, as they're not annotated one way or another completion record wise), or if this is a dynamic assertion that this should never throw here, and so I should be able to assert that.</p>\n","mimetype":"text/html"}]},"ts":1648747005368,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$_whyXYNGe38mLMoPnptIdhzhztRuNq6YqgLv8JOJ-tY"},
{"content":{"body":"(This matters because of the signature changes error-handling brings, and how far you have to propagate these errors) ","msgtype":"m.text","org.matrix.msc1767.text":"(This matters because of the signature changes error-handling brings, and how far you have to propagate these errors) "},"ts":1648747054793,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$F8cIFpL6G95W0uMbnx0LaHrwIqn2DVpIYQBlqwdVB18"},
{"content":{"body":"mgaudet: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a>: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"mgaudet: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a>: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.","mimetype":"text/html"}]},"ts":1648752176337,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$JPcncrvvho0hmufQzbMCPf6Kcx7R-tDaMvwOxPzZEjs"},
{"content":{"body":"> <@domenicdenicola:matrix.org> mgaudet: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.\n\nOk. I totally see how that can happen; just hard to verify at the call sites (and generally leaves me torn about assertion; on the one hand assertion leaves the rest of the code cleaner at the cost of user crashes should specification authors make a mistake-- on the other hand, crashes would help flag mistakes if they happen.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$JPcncrvvho0hmufQzbMCPf6Kcx7R-tDaMvwOxPzZEjs?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a>: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.</blockquote></mx-reply>Ok. I totally see how that can happen; just hard to verify at the call sites (and generally leaves me torn about assertion; on the one hand assertion leaves the rest of the code cleaner at the cost of user crashes should specification authors make a mistake-- on the other hand, crashes would help flag mistakes if they happen.)","m.relates_to":{"m.in_reply_to":{"event_id":"$JPcncrvvho0hmufQzbMCPf6Kcx7R-tDaMvwOxPzZEjs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> mgaudet: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.\n\nOk. I totally see how that can happen; just hard to verify at the call sites (and generally leaves me torn about assertion; on the one hand assertion leaves the rest of the code cleaner at the cost of user crashes should specification authors make a mistake-- on the other hand, crashes would help flag mistakes if they happen.)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$JPcncrvvho0hmufQzbMCPf6Kcx7R-tDaMvwOxPzZEjs?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a>: that is asserting that that particular call cannot throw, because of how we've set things up. Often those kind of mismatches occur when things can throw because of web developers doing something weird, and if the spec calls something, it is asserting that it is not doing something weird.</blockquote></mx-reply>Ok. I totally see how that can happen; just hard to verify at the call sites (and generally leaves me torn about assertion; on the one hand assertion leaves the rest of the code cleaner at the cost of user crashes should specification authors make a mistake-- on the other hand, crashes would help flag mistakes if they happen.)","mimetype":"text/html"}]},"ts":1648758006221,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$GEYC0bkAHbBzhRr4e9X7k-YbTBf7NNI0MaoZrXaZxmg"},
{"content":{"body":"Honestly... I think playing with this makes me less convinced of the value of the completion value **assertions**; i.e. I think I'd still see value in `? Algo` in the spec, but `! Foo` doesn't align with the reality of implementation when you factor in all the un-specified throw locations that actually exist in implementation. ","format":"org.matrix.custom.html","formatted_body":"Honestly... I think playing with this makes me less convinced of the value of the completion value <strong>assertions</strong>; i.e. I think I'd still see value in <code>? Algo</code> in the spec, but <code>! Foo</code> doesn't align with the reality of implementation when you factor in all the un-specified throw locations that actually exist in implementation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Honestly... I think playing with this makes me less convinced of the value of the completion value **assertions**; i.e. I think I'd still see value in `? Algo` in the spec, but `! Foo` doesn't align with the reality of implementation when you factor in all the un-specified throw locations that actually exist in implementation. ","mimetype":"text/plain"},{"body":"Honestly... I think playing with this makes me less convinced of the value of the completion value <strong>assertions</strong>; i.e. I think I'd still see value in <code>? Algo</code> in the spec, but <code>! Foo</code> doesn't align with the reality of implementation when you factor in all the un-specified throw locations that actually exist in implementation.","mimetype":"text/html"}]},"ts":1648758283213,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$-oIg1ykvT6t7pdt27qyp4601xYRQ1SRkM8J9f9FoPWg"}
]