[
{"content":{"body":"> <@tabatkins:matrix.org> sideshowbarker: Yeah, `spec.inputSource.mtime()` (for input types that support it)\n\nPerfect — thanks much","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$ufzzqOnHtAlm8vxrnxVKOaB_2OWFv3N5o6YU7i6cRYw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: Yeah, <code>spec.inputSource.mtime()</code> (for input types that support it)</blockquote></mx-reply>Perfect — thanks much","m.relates_to":{"m.in_reply_to":{"event_id":"$ufzzqOnHtAlm8vxrnxVKOaB_2OWFv3N5o6YU7i6cRYw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> sideshowbarker: Yeah, `spec.inputSource.mtime()` (for input types that support it)\n\nPerfect — thanks much","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$ufzzqOnHtAlm8vxrnxVKOaB_2OWFv3N5o6YU7i6cRYw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: Yeah, <code>spec.inputSource.mtime()</code> (for input types that support it)</blockquote></mx-reply>Perfect — thanks much","mimetype":"text/html"}]},"ts":1665798438170,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$bN4muyk1GzIS9nBLxK--r0-4E9Y495J445WLGpHwt1Q"},
{"content":{"body":"Hi, I've got a question about stream reader closed promise, specifically whether it should resolve before all enqueued data has been read","msgtype":"m.text","org.matrix.msc1767.text":"Hi, I've got a question about stream reader closed promise, specifically whether it should resolve before all enqueued data has been read"},"ts":1665836677953,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$lGT6om4SHCDJDQ-EWdNMC3ltzv3zUf2mkHDwtHTJcNA"},
{"content":{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","format":"org.matrix.custom.html","formatted_body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","mimetype":"text/plain"},{"body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","mimetype":"text/html"}]},"ts":1665836830502,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$S5KqRXDzzuSC2NIaopOT2c17tEkBfNJEwr27wFFWXPU"},
{"content":{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```jsconst rs = new ReadableStream({\n  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);","format":"org.matrix.custom.html","formatted_body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-jsconst\">  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","m.new_content":{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```jsconst rs = new ReadableStream({\n  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);","format":"org.matrix.custom.html","formatted_body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-jsconst\">  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```jsconst rs = new ReadableStream({\n  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);","mimetype":"text/plain"},{"body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-jsconst\">  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$S5KqRXDzzuSC2NIaopOT2c17tEkBfNJEwr27wFFWXPU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```jsconst rs = new ReadableStream({\n  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);","mimetype":"text/plain"},{"body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-jsconst\">  start(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1665836880620,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$oHXJTFpN_B0uZJhlQ1b6YznUJBhaF2jEgRJzwwMhj1M"},
{"content":{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","m.new_content":{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","format":"org.matrix.custom.html","formatted_body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","mimetype":"text/plain"},{"body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$S5KqRXDzzuSC2NIaopOT2c17tEkBfNJEwr27wFFWXPU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\nconst rs = new ReadableStream({\nstart(controller) {\ncontroller.enqueue(new Uint8Array(3));\ncontroller.close();\n}\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\nif (!data) {\nconsole.error('data not read yet');\n}\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","mimetype":"text/plain"},{"body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<p>const rs = new ReadableStream({<br>start(controller) {<br>controller.enqueue(new Uint8Array(3));<br>controller.close();<br>}<br>});</p>\n<p>let data = null;<br>const reader = rs.getReader();</p>\n<p>reader.closed.then(() =&gt; {<br>if (!data) {<br>console.error('data not read yet');<br>}<br>});</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<p>data = await reader.read();<br>console.log(data);</p>\n<pre><code></code></pre>\n","mimetype":"text/html"}]},"ts":1665836915831,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$uNrfG3fIvc5v5cBexFhplpkbLlKk35HDGqWQgAb46kc"},
{"content":{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```\n","format":"org.matrix.custom.html","formatted_body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","m.new_content":{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```\n","mimetype":"text/plain"},{"body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$S5KqRXDzzuSC2NIaopOT2c17tEkBfNJEwr27wFFWXPU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it `closed` should be resolved after the queue is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```\n","mimetype":"text/plain"},{"body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it <code>closed</code> should be resolved after the queue is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1665837031666,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$lMoGvWYDoBBhrSVv24bHEidSDYmO9Jy6Yz94an-5DaE"},
{"content":{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it says`closed` should be resolved after the queue of data is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it says<code>closed</code> should be resolved after the queue of data is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","m.new_content":{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it says`closed` should be resolved after the queue of data is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","format":"org.matrix.custom.html","formatted_body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it says<code>closed</code> should be resolved after the queue of data is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it says`closed` should be resolved after the queue of data is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","mimetype":"text/plain"},{"body":"<p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it says<code>closed</code> should be resolved after the queue of data is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$S5KqRXDzzuSC2NIaopOT2c17tEkBfNJEwr27wFFWXPU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In this program, I'm seeing `data not read yet` being logged. I was assuming `reader.closed` wouldn't get resolved until the program had read the data. I've read the spec and it says`closed` should be resolved after the queue of data is empty.\n\n```js\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() => {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n```","mimetype":"text/plain"},{"body":" * <p>In this program, I'm seeing <code>data not read yet</code> being logged. I was assuming <code>reader.closed</code> wouldn't get resolved until the program had read the data. I've read the spec and it says<code>closed</code> should be resolved after the queue of data is empty.</p>\n<pre><code class=\"language-js\">const rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new Uint8Array(3));\n    controller.close();\n  }\n});\n\nlet data = null;\nconst reader = rs.getReader();\n\nreader.closed.then(() =&gt; {\n  if (!data) {\n    console.error('data not read yet');\n  }\n});\n\ndata = await reader.read();\nconsole.log(data);\n\ndata = await reader.read();\nconsole.log(data);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1665837076074,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$lHSwcBQ90ZBb1GCiSOhmHK3COIjt1I-cW2dvq5G9lO0"},
{"content":{"body":"In this algorithm: https://streams.spec.whatwg.org/#rs-default-controller-private-pull you can see what's happening:  ReadableStreamClose is performed before the read request's chunk steps.","msgtype":"m.text","org.matrix.msc1767.text":"In this algorithm: https://streams.spec.whatwg.org/#rs-default-controller-private-pull you can see what's happening:  ReadableStreamClose is performed before the read request's chunk steps."},"ts":1665837585892,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$psEWl1uejOAMWA1yiDfZyENPGHKPoy2fMevF-KeHTP4"},
{"content":{"body":"I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)","msgtype":"m.text","org.matrix.msc1767.text":"I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)"},"ts":1665837656331,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$6vuUiouqHEhJ_qovVS8TOxTpX5_UGrXqHCJkN6haKAM"},
{"content":{"body":" * I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)","m.new_content":{"body":"I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)","msgtype":"m.text","org.matrix.msc1767.text":"I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)"},"m.relates_to":{"event_id":"$6vuUiouqHEhJ_qovVS8TOxTpX5_UGrXqHCJkN6haKAM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I would expect that to be the other way around (i.e. resolve the final read request before resolving the closed promise)"},"ts":1665837665253,"senderName":"David Halls","senderId":"@davedoesdev:matrix.org","id":"$GTBzHNlkQoVYrsyl61uVfrF82ZwZKLc-OAj6kjioY60"}
]