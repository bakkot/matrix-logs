[
{"content":{"body":"referencing <https://github.com/whatwg/html/issues/9920> is it the case that all 3 major engines use separate processes for Shared/ServiceWorkers but keep DedicatedWorkers in the same process as the renderer, just in different threads? ","msgtype":"m.text"},"ts":1699592240931,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$lr--5oftOC7g4TYJS9ic8tTzC4bYfhZLplnyq4uoTow"},
{"content":{"body":"I was hoping to start implementing DedicatedWorkers in Ladybird assuming that any worker type would \"always\" have its own process (until there's too many processes and we have to start sharing etc etc). Which would mean we can keep covering our ears and pretend that the thread-unsafety of LibWeb/LibJS can wait until 'later' still. ","msgtype":"m.text"},"ts":1699592375458,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$5TsAh5y5UBz2Vg9O-zyGNMPNXdV7N6wrY5h_XSZm180"},
{"content":{"body":"Per the issue, Domenic:  was saying his understanding was that that's not a good idea because of the requirements for SharedArrayBuffers in the ECMAScript spec. ","format":"org.matrix.custom.html","formatted_body":"Per the issue, <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>:  was saying his understanding was that that's not a good idea because of the requirements for SharedArrayBuffers in the ECMAScript spec. ","msgtype":"m.text"},"ts":1699592491915,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$dxr5bnGpV5mhYtEDpHHKFtPAxhKYmVKBjYBIfDgTZpc"},
{"content":{"body":"> <@akaster:serenityos.org> referencing <https://github.com/whatwg/html/issues/9920> is it the case that all 3 major engines use separate processes for Shared/ServiceWorkers but keep DedicatedWorkers in the same process as the renderer, just in different threads?\n\nCorrect, I think. At least definitely correct for dedicated workers in same process; not sure if shared and service are process-isolated everywhere.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$lr--5oftOC7g4TYJS9ic8tTzC4bYfhZLplnyq4uoTow?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@akaster:serenityos.org\">@akaster:serenityos.org</a><br>referencing &lt;https://github.com/whatwg/html/issues/9920&gt; is it the case that all 3 major engines use separate processes for Shared/ServiceWorkers but keep DedicatedWorkers in the same process as the renderer, just in different threads? </blockquote></mx-reply>Correct, I think. At least definitely correct for dedicated workers in same process; not sure if shared and service are process-isolated everywhere.","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lr--5oftOC7g4TYJS9ic8tTzC4bYfhZLplnyq4uoTow"}},"msgtype":"m.text"},"ts":1699592639581,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$PSaNQSQ00tjlRJZRQ5WiU6RLnAVmcK90flpxBtHk3dM"},
{"content":{"body":"Hmm all right.. well, we'll have to handle distinct realms existing in the same process to handle window.open, so handling separate agents (called VM, in our implementation) is probably not going to be too far from that. I'm mostly worried about the places where we still reach out to the \"main thread VM\" Singleton.. would be nice to always know which agent we're working with though.","msgtype":"m.text"},"ts":1699592783963,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$WurtFXvUVAsA7IalphhGxO3TmowUavJnE54TMAL9dU8"},
{"content":{"body":"same-origin window.open, but also same-origin iframes","m.mentions":{},"msgtype":"m.text"},"ts":1699595647919,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$gCnHFNywBfOM61yNEP_BHVK1I76KB1fg0M5D8HXRJqE"},
{"content":{"body":"HTML properties seem inconsistent when it comes to throwing or silently ignoring invalid values. Is either of those seen as the \"right way\" these days?","msgtype":"m.text"},"ts":1699598473892,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$ad_k5YtIhdcLdBbIgxcMB6ON6V1bx__KKZ6NqiKcmYI"},
{"content":{"body":"* HTML property setters seem inconsistent when it comes to throwing or silently ignoring invalid values. Is either of those seen as the \"right way\" these days?","m.new_content":{"body":"HTML property setters seem inconsistent when it comes to throwing or silently ignoring invalid values. Is either of those seen as the \"right way\" these days?","msgtype":"m.text"},"m.relates_to":{"event_id":"$ad_k5YtIhdcLdBbIgxcMB6ON6V1bx__KKZ6NqiKcmYI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1699601206546,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$I9FvYX37oi33vd5xjcncgEP_YHpLzFpuOgybyQWs8n0"},
{"content":{"body":"Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced by enums","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced by enums","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1699601753554,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$XRVaRVgYRGgiIH-UswYo6jpk3gSW9wXh1TgUEffZFZE"},
{"content":{"body":" * Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums","m.mentions":{},"m.new_content":{"body":"Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XRVaRVgYRGgiIH-UswYo6jpk3gSW9wXh1TgUEffZFZE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1699601770644,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$V7meaBTTYN6vxOhz3M8-6HspZs2LHzjp3kM2TdNHn1E"},
{"content":{"body":"I guided someone to follow the \"new feature\" template a bit more closely and https://github.com/whatwg/dom/issues/1233 is quite understandable now in terms of what it's trying to achieve. Hopefully it continues to work that well.","m.mentions":{},"msgtype":"m.text"},"ts":1699601966563,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ZlrTQYSAhIyS-Fxzi_TKz3i54Vhzi5vneF7hMfNEm50"},
{"content":{"body":"> <@annevk:matrix.org> Jake Archibald: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums\n\nSo things like `valueAsDate` throwing on, say, a range input, is that breaking convention, or is it correct by some other rule?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$XRVaRVgYRGgiIH-UswYo6jpk3gSW9wXh1TgUEffZFZE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br /><a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: methods generally throw, setters generally ignore (and then the getter continues to return the same value); this is somewhat enforced for enums</blockquote></mx-reply>So things like <code>valueAsDate</code> throwing on, say, a range input, is that breaking convention, or is it correct by some other rule?","m.relates_to":{"m.in_reply_to":{"event_id":"$XRVaRVgYRGgiIH-UswYo6jpk3gSW9wXh1TgUEffZFZE"}},"msgtype":"m.text"},"ts":1699602336897,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$0yG2U_VGqmyDyOkmZHcsKciq4Treud_xe0BAtoRgN8o"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate","msgtype":"m.text"},"ts":1699602406406,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$zIkE1ZvQNvwI4jrbx0Ylyb75Du-AU6CrJFo5_0jM6zI"},
{"content":{"body":"Jake Archibald: I think `valueAsDate` is breaking several conventions; doesn't it return a new object each time you invoke the getter?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: I think <code>valueAsDate</code> is breaking several conventions; doesn't it return a new object each time you invoke the getter?","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1699602637921,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$UGdUGrsVwnVcVNYs9TEMvux3BOg18c7q3mLVlzmD1Pg"},
{"content":{"body":"Ohh that's a good point","msgtype":"m.text"},"ts":1699602665832,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$cXXXMtTGwY5kmuEEQCOzyVzGEAeAtTOqDGVbXqlH2ZM"},
{"content":{"body":"Jake Archibald: having said that, I guess I'm not entirely sure about what the convention is for non-enums, but I wouldn't base precedent on `valueAsDate`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jakea:matrix.org\">Jake Archibald</a>: having said that, I guess I'm not entirely sure about what the convention is for non-enums, but I wouldn't base precedent on <code>valueAsDate</code>.","m.mentions":{"user_ids":["@jakea:matrix.org"]},"msgtype":"m.text"},"ts":1699602690848,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8AA51q1Tmaib4Lktjm_KmoPMDD4r9li0wDJ_ewBLqjY"},
{"content":{"body":"I'm not sure setters ignoring is really best practice, but I admit not thinking too hard about it...","m.mentions":{},"msgtype":"m.text"},"ts":1699604373584,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$xI90YHExrbjdrtrs6x9AjjXIqgADI5JbwwX1qmwkBMg"},
{"content":{"body":"In JS itself there are some cases where setters throw in strict mode and ignore in sloppy mode, IIRC.","m.mentions":{},"msgtype":"m.text"},"ts":1699604390790,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$arTiBwdja68M7B8rhJVKWNLnFnc9Go_0ZaZhhOS-AQM"},
{"content":{"body":"Is this anchor meant to serve as a placeholder to describe the grammar and lexical scanner? https://www.w3.org/TR/css-syntax-3/#placement","m.mentions":{},"msgtype":"m.text"},"ts":1699606285915,"senderName":"chargeitall","senderId":"@chargeitall:matrix.org","id":"$791DFeLRlR16LeyIcW4Z4CstssJ1I-fWnOX8KOTGVi4"},
{"content":{"body":"Domenic: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this \"new thing\", couldn't you refactor `EventListener` in terms of that?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this \"new thing\", couldn't you refactor <code>EventListener</code> in terms of that?","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1699611189289,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$R4Zip63Hzz5KflTWfEI3KUEWau8g2kia4CjE4YdHPmg"},
{"content":{"body":"> <@annevk:matrix.org> Domenic: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this \"new thing\", couldn't you refactor `EventListener` in terms of that?\n\nProbably, as long as we had the same sort of abstraction layer for turning raw JS functions into this new thing. (Which I am not sure I would otherwise add... although maybe, I dunno.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$R4Zip63Hzz5KflTWfEI3KUEWau8g2kia4CjE4YdHPmg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: https://github.com/WICG/observable/issues/71#issuecomment-1804956795 say we had this \"new thing\", couldn't you refactor <code>EventListener</code> in terms of that?</blockquote></mx-reply>Probably, as long as we had the same sort of abstraction layer for turning raw JS functions into this new thing. (Which I am not sure I would otherwise add... although maybe, I dunno.)","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$R4Zip63Hzz5KflTWfEI3KUEWau8g2kia4CjE4YdHPmg"}},"msgtype":"m.text"},"ts":1699611280864,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$xNfRjPP4xdXnqBFDx-a-TH5t8jctOuB33ow1qeQY5vA"},
{"content":{"body":"Domenic: well that could also be the overload, provided Web IDL gets support for that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: well that could also be the overload, provided Web IDL gets support for that","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1699611356227,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$v7hpYeGuv3Ogm0y28JvG3kq3oy7zOVVLZkvAUfIi0rw"},
{"content":{"body":"Domenic: but thanks, that confirms my suspicion that these patterns are in fact identical","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: but thanks, that confirms my suspicion that these patterns are in fact identical","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1699611404625,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$P4HRXclveCDC-vjpcVIg54lXm3pQpQuMeAwQVwth-Ok"},
{"content":{"body":"It's a bit tricky because it seems like the use cases are:\n\n- Streams: need to grab a property eagerly, need to grab methods to call later\n- Custom elements: needs to be a constructor, need  to grab properties eagerly, need to grab its *prototype* methods to call later\n- EventListener: need to grab a single method eagerly, or convert an incoming JS function into a wrapper around that method. Only one function/method so it's kind of nicer if you don't have to specify the method name.\n- Observable, maybe: need to grab methods to call later, or convert an incoming JS function into a wrapper around one of the specific method.","format":"org.matrix.custom.html","formatted_body":"<p>It's a bit tricky because it seems like the use cases are:</p>\n<ul>\n<li>Streams: need to grab a property eagerly, need to grab methods to call later</li>\n<li>Custom elements: needs to be a constructor, need  to grab properties eagerly, need to grab its <em>prototype</em> methods to call later</li>\n<li>EventListener: need to grab a single method eagerly, or convert an incoming JS function into a wrapper around that method. Only one function/method so it's kind of nicer if you don't have to specify the method name.</li>\n<li>Observable, maybe: need to grab methods to call later, or convert an incoming JS function into a wrapper around one of the specific method.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1699611452735,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$n2Nj07K9Kh9XYyc9qIV0KJn5h-4Bd3HjxiWIc-3C8w4"},
{"content":{"body":"Unifying streams & EventListener & observable-maybe seems doable, with minor tradeoffs in syntax that make one case nicer than others.","m.mentions":{},"msgtype":"m.text"},"ts":1699611511030,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Mf-nDvXRT5jUM86it9AhRd2xOipC8fpK59A0CFNEORs"},
{"content":{"body":"Custom elements is probably too wacky, although you might want to design both at once and share as much infrastructure & syntax as possible.","m.mentions":{},"msgtype":"m.text"},"ts":1699611558438,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$sVkolYogGPBR26GGZ_JuU7tX9z1MZw6UKjoCRoU34Po"},
{"content":{"body":"Oh right, what do worklets need... I think they're the same as custom elements?","m.mentions":{},"msgtype":"m.text"},"ts":1699611597322,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$HUIUx4LBQBv3moTncVkQXsOR8aeFJodAoTj_ve9HeCA"},
{"content":{"body":"Yes, or at least PaintWorklet is","m.mentions":{},"msgtype":"m.text"},"ts":1699611687127,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$OPC0E2ivnm4zCtqb6d9DDy3l-fMvyfpSdTvsw-cQzbY"},
{"content":{"body":"Does kind of have strong \"callback interface\" vibes","m.mentions":{},"msgtype":"m.text"},"ts":1699611835242,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$gzOO-qtsmKcVhAvp-yUUPictv4bldl_MgnKoAOoGx3E"},
{"content":{"body":"I dunno, I think you're forgetting how weird and Java-ey callback interfaces were. E.g. the constants, the legacy callback interface object stuff. They definitely didn't have dictionary-type semantics for properties, which is what we'd want here.","m.mentions":{},"msgtype":"m.text"},"ts":1699611903466,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Vtnlf3me95OoMUTX6BsPc1NiU--2kKzHrBOdzKbHxsI"},
{"content":{"body":"I guess I would say \"callback dictionary\" is what we want, vs. \"callback interface\"","m.mentions":{},"msgtype":"m.text"},"ts":1699611925044,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$JY0lekvlg6punuYUIqpgLHb1OoW-qzDBQ-tRxbPuzN0"},
{"content":{"body":"True, `NodeFilter` still exists btw","format":"org.matrix.custom.html","formatted_body":"True, <code>NodeFilter</code> still exists btw","m.mentions":{},"msgtype":"m.text"},"ts":1699611986794,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$H0stya6nEKn41iALVJj6JcVEmKOBISKh8hcfieKIWWU"},
{"content":{"body":"akaster: using a process as agent boundary seems interesting, but also quite bad for perf? The idea is that a document and its dedicated workers end up in a single agent cluster. Which can be 1:1 with a process, but even that you might not want to do as you'd get many processes that way too. Existing user agents typically share multiple agent clusters in a single process.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akaster:serenityos.org\">akaster</a>: using a process as agent boundary seems interesting, but also quite bad for perf? The idea is that a document and its dedicated workers end up in a single agent cluster. Which can be 1:1 with a process, but even that you might not want to do as you'd get many processes that way too. Existing user agents typically share multiple agent clusters in a single process.","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"msgtype":"m.text"},"ts":1699613074064,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$UOppXlXaqUxVbmRINZ3cjm-Lw_uTkprlt9nl3L8Ef6k"},
{"content":{"body":"akaster: also note that you can have multiple realms/globals within a single agent with `<iframe>` too, not just `window.open()`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akaster:serenityos.org\">akaster</a>: also note that you can have multiple realms/globals within a single agent with <code>&lt;iframe&gt;</code> too, not just <code>window.open()</code>.","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"msgtype":"m.text"},"ts":1699613150569,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ltXjHrQvBzv2qC5ECTTCGO1i9z7uD13dUXx4onpEa2A"},
{"content":{"body":"I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting at the moment. And we don't even support SharedArrayBuffers yet 😅. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering will force us to put all the agents in an agent cluster in one memory space in the future","msgtype":"m.text"},"ts":1699636068439,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$tr-r4AmjqqQAZlqC3RcGC9O-VzSkPctp8XcKG63ggwI"},
{"content":{"body":"* I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet 😅. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering will force us to put all the agents in an agent cluster in one memory space in the future","m.new_content":{"body":"I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet 😅. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering will force us to put all the agents in an agent cluster in one memory space in the future","msgtype":"m.text"},"m.relates_to":{"event_id":"$tr-r4AmjqqQAZlqC3RcGC9O-VzSkPctp8XcKG63ggwI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1699636084333,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$mz7rkLcEtytrIOI_GWPzXHC4cPa-MF3oFMVK-nEowX0"},
{"content":{"body":"* I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet 😅. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering constraints will force us to put all the agents in an agent cluster in one memory space in the future","m.new_content":{"body":"I think there's many lower hanging fruit for perf than process boundaries in our implementation at the moment. I think the isolation possibilities are a lot more interesting as well. And we don't even support SharedArrayBuffers yet 😅. From my reading of the JS spec it seems like there's no reason we *couldn't* do it that way, but perhaps some of the total ordering constraints will force us to put all the agents in an agent cluster in one memory space in the future","msgtype":"m.text"},"m.relates_to":{"event_id":"$tr-r4AmjqqQAZlqC3RcGC9O-VzSkPctp8XcKG63ggwI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1699636101159,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$h7kqT2eNK5CNoIwKvqKaAX-nOrzrZXkDQP9y2lsYMXM"},
{"content":{"body":"Dependent/source abort signals are a little confusing to me. https://dom.spec.whatwg.org/#create-a-dependent-abort-signal step 4.2.1 seems to assert that a source signal is itself not dependent. Does this mean that there can not be a chain of dependent signals more than 2 long?","m.mentions":{},"msgtype":"m.text"},"ts":1699643660586,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$foraY1GsqouDzwLlcxh1FpSj3w0RST6AIOue35H69CQ"}
]