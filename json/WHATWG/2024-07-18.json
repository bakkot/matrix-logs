[
{"content":{"body":"could use some rapid spam hiding/deleting on https://github.com/whatwg/webidl/pull/1421#pullrequestreview-2184595148 (warning, there's a graphic image)","m.mentions":{},"msgtype":"m.text"},"ts":1721276705442,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GadXqeiHcS8hn97tSz4j8Sg-jAMPXD-t6FcyWP2Veic"},
{"content":{"body":"Jeez","m.mentions":{},"msgtype":"m.text"},"ts":1721276898777,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IrsFq18u2eNwbkyKqCU9n8ukFCJmwkJiy-G2SqyJyiI"},
{"content":{"body":"More than 10 years after the progress promises discussions and we still don't have a *great* pattern for progress signals...\n\nMy choices seem to be either: `createX()` returns a promise for a not-yet-initialized `X` object, which fires `progress` events and has a `ready` promise for when it's fully usable. Or, `createX({ progressCallback })`, which only fulfills once the `X` is fully ready.\n\nThe latter is a bit nicer but I can find zero precedent for it on the web platform...","format":"org.matrix.custom.html","formatted_body":"<p>More than 10 years after the progress promises discussions and we still don't have a <em>great</em> pattern for progress signals...</p>\n<p>My choices seem to be either: <code>createX()</code> returns a promise for a not-yet-initialized <code>X</code> object, which fires <code>progress</code> events and has a <code>ready</code> promise for when it's fully usable. Or, <code>createX({ progressCallback })</code>, which only fulfills once the <code>X</code> is fully ready.</p>\n<p>The latter is a bit nicer but I can find zero precedent for it on the web platform...</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721287204585,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$h22VRBYrS1iko2H2ERUzYELi_KK2f-H9ZUdNmhFxqbc"},
{"content":{"body":"Domenic: this in light of some of the chatter about people returning to XHR? I thought we had some kind of plan for that, though a general solution for promises also sounds interesting.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: this in light of some of the chatter about people returning to XHR? I thought we had some kind of plan for that, though a general solution for promises also sounds interesting.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1721287769726,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ST8MtUFudv21-kHqSk4--BqSPQuyQBQ1HjO186VWiV4"},
{"content":{"body":"It's actually reflecting on some feedback on the former pattern which I've used in https://github.com/WICG/translation-api#downloading-new-languages .\n\nA general solution for promises is probably not really possible. Or if it is, it'll be like AbortController and be something separate that just often integrates with promises.\n\nWhat plan do you think we have? I vaguely remember some sort of FetchController or FetchSignal or something?","m.mentions":{},"msgtype":"m.text"},"ts":1721287867552,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0kNuZhi7KmNn8jztvGDxA-hbjt-2du2mjRyKuX4qjFM"},
{"content":{"body":"https://github.com/whatwg/fetch/issues/607 isn't very enlightening","m.mentions":{},"msgtype":"m.text"},"ts":1721287938576,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ztaKHa27vD92itxrniSUTeNw4JEJIvkkvyKmAk5SXA0"},
{"content":{"body":"I guess https://github.com/whatwg/fetch/issues/447#issuecomment-281731850 proposes a callback that gives you an object that fires events, that's even more complex, hmm.","m.mentions":{},"msgtype":"m.text"},"ts":1721289666256,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$-aC76bdPRtcAZBFclzrSeVQfV0VUxVcYCpcvgUIWZ0U"},
{"content":{"body":"Seems like this should be on the `Response` rather than the fetch?","format":"org.matrix.custom.html","formatted_body":"Seems like this should be on the <code>Response</code> rather than the fetch?","m.mentions":{},"msgtype":"m.text"},"ts":1721290134882,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$O_QP46agx8eh-cOxT97VeYjMI9Qw7g_ZAvsxmxDdY0g"},
{"content":{"body":"Domenic: yeah, I think that's the plan of record. A callback that reveals a FetchObserver object upon which you can listen for progress, and can potentially monitor things like 1xx responses.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: yeah, I think that's the plan of record. A callback that reveals a FetchObserver object upon which you can listen for progress, and can potentially monitor things like 1xx responses.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1721290144864,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Ee0J8sRNbsAoeRCBpd7yhHKExZXFRMokuexRdiOZwfg"},
{"content":{"body":"Noam Rosenthal: no, that would not work for 1xx.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: no, that would not work for 1xx.","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1721290150337,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$uTfptIp4SK8_CmsE5S3c2K1EjnfQmuWI2a5OMgSMRYw"},
{"content":{"body":"Might have to be careful about when it starts sending progress though to not give additional timing channels.","m.mentions":{},"msgtype":"m.text"},"ts":1721290203549,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HA1bG-HjoGqxIyN_64nbTGlpWtk0QMZZ6QFNCB3RZmc"},
{"content":{"body":"Hmm, for my case that's more complexity than needed, but maybe for future extensibility it's worth it??","msgtype":"m.text"},"ts":1721290233936,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jfjGaOELnDo5M-vK_OzQX-r_yfXldKWwhsrxe3hdtis"},
{"content":{"body":"What would be simpler that gives both download and upload progress? One callback for each?","m.mentions":{},"msgtype":"m.text"},"ts":1721290268955,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$DUbgqdXdH9FP0JDO931V9Sf85geWCT5aM14C6wjkoSY"},
{"content":{"body":"What's the meaning download/upload progress for a 1xx response? didn't see that in the issue","m.mentions":{},"msgtype":"m.text"},"ts":1721290672256,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$8ArhinXbte5vX8hQtlFqiwC0-TsFMpn29yvlS7MTidg"},
{"content":{"body":" * What's the meaning of download/upload progress for a 1xx response? didn't see that in the issue","m.mentions":{},"m.new_content":{"body":"What's the meaning of download/upload progress for a 1xx response? didn't see that in the issue","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8ArhinXbte5vX8hQtlFqiwC0-TsFMpn29yvlS7MTidg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721290879097,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ARS3T0gflsHz_gHmnKCY7pcmB1KAycUvKRKG6d7gPL4"},
{"content":{"body":"> <@annevk:matrix.org> What would be simpler that gives both download and upload progress? One callback for each?\n\nMy case only needs download progress.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$DUbgqdXdH9FP0JDO931V9Sf85geWCT5aM14C6wjkoSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br />What would be simpler that gives both download and upload progress? One callback for each?</blockquote></mx-reply>My case only needs download progress.","m.relates_to":{"m.in_reply_to":{"event_id":"$DUbgqdXdH9FP0JDO931V9Sf85geWCT5aM14C6wjkoSY"}},"msgtype":"m.text"},"ts":1721291739387,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$D__bJ8l9Qp0vsF8l0v0VdU-eYNgF81Km5CJy5vEVnTs"},
{"content":{"body":"Wouldn't `request.onprogress` and `response.onprogress` be simpler? Sure it doesn't support 1xx responses but isn't this good for the use cases authors care about? (Apologies if I'm missing something basic about this)","format":"org.matrix.custom.html","formatted_body":"Wouldn't <code>request.onprogress</code> and <code>response.onprogress</code> be simpler? Sure it doesn't support 1xx responses but isn't this good for the use cases authors care about? (Apologies if I'm missing something basic about this)","m.mentions":{},"msgtype":"m.text"},"ts":1721291799788,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ONLMrUNtl51yPD4nEaZmybNErzYIql715elKU1g1e10"},
{"content":{"body":"Neither of those objects is stateful today, I'd kinda like to keep it that way","m.mentions":{},"msgtype":"m.text"},"ts":1721299566856,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2AFwvTmk2gAUgH5JCQAOpKSU1W_6r0AjlomrpWcGTLk"},
{"content":{"body":"`FetchObserver` is still the best idea I've seen for 1xx responses, upload progress, download progress, priority changes (although maybe this one can be covered by signal?), and future esoteric HTTP features (e.g., trailers that appear mid-stream has been suggested as a feature at one point). But it is somewhat clunky and I can already see people complaining about it when compared to XHR.","format":"org.matrix.custom.html","formatted_body":"<code>FetchObserver</code> is still the best idea I've seen for 1xx responses, upload progress, download progress, priority changes (although maybe this one can be covered by signal?), and future esoteric HTTP features (e.g., trailers that appear mid-stream has been suggested as a feature at one point). But it is somewhat clunky and I can already see people complaining about it when compared to XHR.","m.mentions":{},"msgtype":"m.text"},"ts":1721300387893,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$dlODmSyEoKf6XHbpdGlprvREZNICtEfdUcaoQIS2Buw"},
{"content":{"body":"That's very probably a spec bug. The Dom parsing spec has a number of open issues on it which need reviewing and migrating to html or closing. ","m.relates_to":{"event_id":"$yvGl5lRGQo37VIrIN-6SQtOWs15AkNbvJJT1UmxPnX8","is_falling_back":true,"m.in_reply_to":{"event_id":"$yvGl5lRGQo37VIrIN-6SQtOWs15AkNbvJJT1UmxPnX8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1721300852555,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$_5KneJspyaLkaz9ozp6YKikHZxG1ljjXiTiCAWzO-Qo"},
{"content":{"body":"```\nfetch(\"test\", {\n  method: \"POST\",\n  observer => {\n    observer.onprogress = () => {\n      console.log(\"finally\");\n    }\n  }\n});\n\nconst client = new XMLHttpRequest();\nclient.open(\"POST\", \"test\");\nclient.onprogress = () => {\n  console.log(\"been doing this for a long time\");\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>fetch(\"test\", {\n  method: \"POST\",\n  observer =&gt; {\n    observer.onprogress = () =&gt; {\n      console.log(\"finally\");\n    }\n  }\n});\n\nconst client = new XMLHttpRequest();\nclient.open(\"POST\", \"test\");\nclient.onprogress = () =&gt; {\n  console.log(\"been doing this for a long time\");\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721300863802,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Wev9faHK1KXlMF26YUMLFlCkyMohqohpzEKeO-XiETU"},
{"content":{"body":"Maybe interesting to run a Twitter/Mastodon poll on at some point.","m.mentions":{},"msgtype":"m.text"},"ts":1721301000205,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Rwn7cxtroVFsQ-zO9DY9l1KaLW1vGFHsqzyFDdsHz-Y"},
{"content":{"body":"Am I missing something or is that fetch one not quite valid JS?","msgtype":"m.text"},"ts":1721301056257,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$QuhOhiKzF91zkP2hW8RUNn8qvXKZ2C6L9If65TBZbsQ"},
{"content":{"body":"Luke Warlow: I might well have fumbled it. 😅","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lwarlow:igalia.com\">Luke Warlow</a>: I might well have fumbled it. 😅","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"msgtype":"m.text"},"ts":1721301085437,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$36_x-i6a-FVdBJ6zCYBp9qF7BMODTMQMzuxek9haHkw"},
{"content":{"body":"* Am I missing something or is that fetch one not quite valid JS? Should be 'observer: observer => ...' I think ","m.new_content":{"body":"Am I missing something or is that fetch one not quite valid JS? Should be 'observer: observer => ...' I think ","msgtype":"m.text"},"m.relates_to":{"event_id":"$QuhOhiKzF91zkP2hW8RUNn8qvXKZ2C6L9If65TBZbsQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721301109831,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$C93UJiqFOjuBNEpRBU17cdLubZmGvSR4ujfXj91MVTs"},
{"content":{"body":"I guess it has to be `observer(x) => x.on...` or some such?","format":"org.matrix.custom.html","formatted_body":"I guess it has to be <code>observer(x) =&gt; x.on...</code> or some such?","m.mentions":{},"msgtype":"m.text"},"ts":1721301169568,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$e4gA6bChroG0Vok7h_Ef9a76mhQjLocumQK-Thgla3I"},
{"content":{"body":"Fwiw that fetch call seems like a pretty nice API?","msgtype":"m.text"},"ts":1721301175267,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg"},
{"content":{"body":"* Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.","m.new_content":{"body":"Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721301223928,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$togH8eZgepop6Ra3RRKoFf2vRAhVATcbCZPxPYNgiJA"},
{"content":{"body":"* Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.\n\nAs in, do what's best from a spec and implementation point of view over purely the \"best\" API design especially if it allows more use cases","m.new_content":{"body":"Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.\n\nAs in, do what's best from a spec and implementation point of view over purely the \"best\" API design especially if it allows more use cases","msgtype":"m.text"},"m.relates_to":{"event_id":"$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721301298100,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$hOLpg2vgTAkmob7FfAkIhIEYd2yoG38Fw_7MgfDsi_0"},
{"content":{"body":"It's not terrible, I think what people might prefer is an overloaded return promise. But subclassing promises is very much uncharted territory and prolly has its own issues.","m.mentions":{},"msgtype":"m.text"},"ts":1721301316208,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$YiB0e1cULRS_dTEhkwHAKObwF97xES-2x5_Qq0mIz-E"},
{"content":{"body":" * It's not terrible, I think what people might prefer is an overloaded return promise. But subclassing promises is very much uncharted territory and prolly has its own issues.\n\nAs in, naively I would expect this:\n\n```\nconst observer = fetch(\"test\", { method: \"POST\" });\nobserver.onprogress = () => {\n  console.log(\"finally\");\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>It's not terrible, I think what people might prefer is an overloaded return promise. But subclassing promises is very much uncharted territory and prolly has its own issues.</p>\n<p>As in, naively I would expect this:</p>\n<pre><code>const observer = fetch(\"test\", { method: \"POST\" });\nobserver.onprogress = () =&gt; {\n  console.log(\"finally\");\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"It's not terrible, I think what people might prefer is an overloaded return promise. But subclassing promises is very much uncharted territory and prolly has its own issues.\n\nAs in, naively I would expect this:\n\n```\nconst observer = fetch(\"test\", { method: \"POST\" });\nobserver.onprogress = () => {\n  console.log(\"finally\");\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>It's not terrible, I think what people might prefer is an overloaded return promise. But subclassing promises is very much uncharted territory and prolly has its own issues.</p>\n<p>As in, naively I would expect this:</p>\n<pre><code>const observer = fetch(\"test\", { method: \"POST\" });\nobserver.onprogress = () =&gt; {\n  console.log(\"finally\");\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YiB0e1cULRS_dTEhkwHAKObwF97xES-2x5_Qq0mIz-E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721301403637,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$oi-_SVn65VH0glK0uUByLaQrneY1Jof8wKjej0N5GmQ"},
{"content":{"body":"I wonder if Domenic still recalls the thinking around promise subclasses.","format":"org.matrix.custom.html","formatted_body":"I wonder if <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> still recalls the thinking around promise subclasses.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1721301527937,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$D5avybf9HqufkhGq8bO4Ha1p7391qCOvfgmqA6eEC9U"},
{"content":{"body":"> <@lwarlow:igalia.com> Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.\n> \n> As in, do what's best from a spec and implementation point of view over purely the \"best\" API design especially if it allows more use cases\n\nI vote for whatever we could agree on that gets something in the hands sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lwarlow:igalia.com\">@lwarlow:igalia.com</a><br>Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won&#39;t mind the API too much at this point they just want a non XHR way to do it.<br/><br/>As in, do what&#39;s best from a spec and implementation point of view over purely the &quot;best&quot; API design especially if it allows more use cases</blockquote></mx-reply>I vote for whatever we could agree on that gets something in the hands sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg"}},"msgtype":"m.text"},"ts":1721302189318,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$H6qIGl6YeHDG94awjWJyxr_2YRqPG5iIQHpzk43sufE"},
{"content":{"body":" * I vote for whatever we could agree on that gets something in the hands of developers sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$H1wfEUexHz5LcmeljrE_TuxlX9mDVJibS4oYRUK62Xg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lwarlow:igalia.com\">@lwarlow:igalia.com</a><br>Fwiw that fetch call seems like a pretty nice API? Though I feel like most developers won't mind the API too much at this point they just want a non XHR way to do it.<br><br>As in, do what's best from a spec and implementation point of view over purely the \"best\" API design especially if it allows more use cases</blockquote></mx-reply> * I vote for whatever we could agree on that gets something in the hands of developers sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","m.mentions":{},"m.new_content":{"body":"I vote for whatever we could agree on that gets something in the hands of developers sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","format":"org.matrix.custom.html","formatted_body":"I vote for whatever we could agree on that gets something in the hands of developers sooner rather than later. It seems like we have plenty of evidence that this remains a major pain point for developers, and addressing it will save developers from a lot of frustration, and save them a lot of time.","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$H6qIGl6YeHDG94awjWJyxr_2YRqPG5iIQHpzk43sufE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721302200990,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$9Xq1VYduLmQDCSOlbIdILI9RaJKmWBbpKTmNobdIBMU"},
{"content":{"body":"I'll be out for a couple of weeks. If you need me, check back mid-August.","m.mentions":{},"msgtype":"m.text"},"ts":1721303032188,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$3YMqSAdX6nHD-GmU_AAoQnggBaMzn6CC6h-5MyYqXlA"},
{"content":{"body":" * I'll be out for a couple of weeks. If you need me, check back mid-August. (Though I'll show up at WHATNOT today.)","m.mentions":{},"m.new_content":{"body":"I'll be out for a couple of weeks. If you need me, check back mid-August. (Though I'll show up at WHATNOT today.)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3YMqSAdX6nHD-GmU_AAoQnggBaMzn6CC6h-5MyYqXlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721311902923,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$yXT_GNqoIUPzoJ1ub9KAnyZQGFgXrahHgnLGl1eSCPk"},
{"content":{"body":"Luke Warlow: FWIW, Gecko's innerHTML serializer is also like GetMarkup(bool aIncludeSelf, nsAString& aMarkup). I was expecting to see something similar in the spec","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lwarlow:igalia.com\">Luke Warlow</a>: FWIW, Gecko's innerHTML serializer is also like GetMarkup(bool aIncludeSelf, nsAString&amp; aMarkup). I was expecting to see something similar in the spec","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"msgtype":"m.text"},"ts":1721321849710,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$lt6RugJr1IlOOCVE34mGFTcz-BFJrTo_jUj4sl-H2L8"},
{"content":{"body":"Oh, outerHTML indeed has this weird \"fictional node\" https://html.spec.whatwg.org/#dom-element-outerhtml","m.mentions":{},"msgtype":"m.text"},"ts":1721321861334,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$lC0cAf7JGay8zVYWjl7mK9j1GnSDxRqAz72vUY4Hw_8"},
{"content":{"body":"In that case I think all *5* engines pass a flag through to the fragment serializing steps","format":"org.matrix.custom.html","formatted_body":"In that case I think all <em>5</em> engines pass a flag through to the fragment serializing steps","m.mentions":{},"msgtype":"m.text"},"ts":1721322144468,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$RBFLCGCLh0PVw3OspF3i6b6S1WoiRIVv-s7xnecwcDg"},
{"content":{"body":" * In that case I think all __5__ engines pass a flag through to the fragment serializing steps","format":"org.matrix.custom.html","formatted_body":" * In that case I think all <strong>5</strong> engines pass a flag through to the fragment serializing steps","m.mentions":{},"m.new_content":{"body":"In that case I think all __5__ engines pass a flag through to the fragment serializing steps","format":"org.matrix.custom.html","formatted_body":"In that case I think all <strong>5</strong> engines pass a flag through to the fragment serializing steps","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RBFLCGCLh0PVw3OspF3i6b6S1WoiRIVv-s7xnecwcDg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721322154295,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$FQkRVW6cD_5nueTplfqy4TO05xkCdmSzO8bP6kpkMH4"},
{"content":{"body":"So it seems like a no brainer for the spec to match. And then we can do away with finctional nodes.","m.mentions":{},"msgtype":"m.text"},"ts":1721322219973,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$uO91uUL9RNBkFsX8rIkD3u4ixOFpksMkCMr5Fkp2xXU"},
{"content":{"body":"Is https://html.spec.whatwg.org/multipage/xhtml.html#xml-fragment-serialisation-algorithm actually used?","m.mentions":{},"msgtype":"m.text"},"ts":1721336064764,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$7ebkC_2Prh_H9E0lGp2gPAsVjzoYBdWHtH5LwbEabdU"},
{"content":{"body":" * Is https://html.spec.whatwg.org/multipage/xhtml.html#xml-fragment-serialisation-algorithm actually used?\n\nOnly reference I can find is https://www.w3.org/TR/DOM-Parsing/#:~:text=XML%20fragment%20serialization%20algorithm which (incorrectly) links to it.","m.mentions":{},"m.new_content":{"body":"Is https://html.spec.whatwg.org/multipage/xhtml.html#xml-fragment-serialisation-algorithm actually used?\n\nOnly reference I can find is https://www.w3.org/TR/DOM-Parsing/#:~:text=XML%20fragment%20serialization%20algorithm which (incorrectly) links to it.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7ebkC_2Prh_H9E0lGp2gPAsVjzoYBdWHtH5LwbEabdU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721336427788,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$QbJpP7ugtwm_PypVEBJZAbhhgqeLCc5lpJtaaNMc3Os"},
{"content":{"body":"Yeah, seems so — https://github.com/search?q=repo%3Aw3c%2Fwebref%20xml-fragment-serialization-algorithm&type=code","m.mentions":{},"msgtype":"m.text"},"ts":1721336842048,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$R1_k90E0IChQ_ZFxLGYoxhGji03G-Wp9JPdqkKdz2ic"},
{"content":{"body":"only result is `tr/links/DOM-Parsing.json` file","format":"org.matrix.custom.html","formatted_body":"only result is <code>tr/links/DOM-Parsing.json</code> file","m.mentions":{},"msgtype":"m.text"},"ts":1721336875928,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$KSYjt9PPihLXEnh9EqilEpARlVqmG-C1kP90HTj8fu0"},
{"content":{"body":"(I thought there was some actual web frontend for doing searches for references in specs — but if so, I can’t remember where)","m.mentions":{},"msgtype":"m.text"},"ts":1721336932992,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$HbXYB-ihhBcP8DKoRqpJdK6g4hUcyxLP9LVtRFLTgcs"},
{"content":{"body":"I guess just doing https://github.com/search?q=%22xml-fragment-serialization-algorithm%22&type=code works OK — since all the spec sources are in GitHub anyway","m.mentions":{},"msgtype":"m.text"},"ts":1721337058569,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$7zalOtb9HvRCSq03ZHLfbDi9lIb8Ba7dfN5zPK4OmnE"},
{"content":{"body":"oh, from that I just now found a reference in the XHR spec too","m.mentions":{},"msgtype":"m.text"},"ts":1721337199815,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Uck24ycnzyNHa1yrBGNW5NrgcOpJ14-y2VPR2znbJuw"},
{"content":{"body":"in https://xhr.spec.whatwg.org/#dom-xmlhttprequest-send","m.mentions":{},"msgtype":"m.text"},"ts":1721337220006,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$lM-2rVaC2P8f2Y6mO4ja-Bab07p9zxvVi5D-Zh8XIlg"},
{"content":{"body":"> If body is a [Document](https://dom.spec.whatwg.org/#document), then set [this](https://webidl.spec.whatwg.org/#this)’s [request body](https://xhr.spec.whatwg.org/#request-body) to body, [serialized](https://w3c.github.io/DOM-Parsing/#dfn-fragment-serializing-algorithm), [converted](https://infra.spec.whatwg.org/#javascript-string-convert), and [UTF-8 encoded](https://encoding.spec.whatwg.org/#utf-8-encode).","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>If body is a <a href=\"https://dom.spec.whatwg.org/#document\">Document</a>, then set <a href=\"https://webidl.spec.whatwg.org/#this\">this</a>’s <a href=\"https://xhr.spec.whatwg.org/#request-body\">request body</a> to body, <a href=\"https://w3c.github.io/DOM-Parsing/#dfn-fragment-serializing-algorithm\">serialized</a>, <a href=\"https://infra.spec.whatwg.org/#javascript-string-convert\">converted</a>, and <a href=\"https://encoding.spec.whatwg.org/#utf-8-encode\">UTF-8 encoded</a>.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721337249890,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$70gHoFVgmZNul0Z6_18eZagvAY0SZQI4gbIYehFJsxI"},
{"content":{"body":"ah, sorry not that","m.mentions":{},"msgtype":"m.text"},"ts":1721337285362,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$BAuxwa6WFRPAl04luIlAFnGXMtP4oryA4VzKM73ezrQ"}
]