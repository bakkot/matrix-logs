[
{"content":{"body":"could use some rapid spam hiding/deleting on https://github.com/whatwg/webidl/pull/1421#pullrequestreview-2184595148 (warning, there's a graphic image)","m.mentions":{},"msgtype":"m.text"},"ts":1721276705442,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GadXqeiHcS8hn97tSz4j8Sg-jAMPXD-t6FcyWP2Veic"},
{"content":{"body":"Jeez","m.mentions":{},"msgtype":"m.text"},"ts":1721276898777,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IrsFq18u2eNwbkyKqCU9n8ukFCJmwkJiy-G2SqyJyiI"},
{"content":{"body":"More than 10 years after the progress promises discussions and we still don't have a *great* pattern for progress signals...\n\nMy choices seem to be either: `createX()` returns a promise for a not-yet-initialized `X` object, which fires `progress` events and has a `ready` promise for when it's fully usable. Or, `createX({ progressCallback })`, which only fulfills once the `X` is fully ready.\n\nThe latter is a bit nicer but I can find zero precedent for it on the web platform...","format":"org.matrix.custom.html","formatted_body":"<p>More than 10 years after the progress promises discussions and we still don't have a <em>great</em> pattern for progress signals...</p>\n<p>My choices seem to be either: <code>createX()</code> returns a promise for a not-yet-initialized <code>X</code> object, which fires <code>progress</code> events and has a <code>ready</code> promise for when it's fully usable. Or, <code>createX({ progressCallback })</code>, which only fulfills once the <code>X</code> is fully ready.</p>\n<p>The latter is a bit nicer but I can find zero precedent for it on the web platform...</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721287204585,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$h22VRBYrS1iko2H2ERUzYELi_KK2f-H9ZUdNmhFxqbc"},
{"content":{"body":"Domenic: this in light of some of the chatter about people returning to XHR? I thought we had some kind of plan for that, though a general solution for promises also sounds interesting.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: this in light of some of the chatter about people returning to XHR? I thought we had some kind of plan for that, though a general solution for promises also sounds interesting.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1721287769726,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ST8MtUFudv21-kHqSk4--BqSPQuyQBQ1HjO186VWiV4"},
{"content":{"body":"It's actually reflecting on some feedback on the former pattern which I've used in https://github.com/WICG/translation-api#downloading-new-languages .\n\nA general solution for promises is probably not really possible. Or if it is, it'll be like AbortController and be something separate that just often integrates with promises.\n\nWhat plan do you think we have? I vaguely remember some sort of FetchController or FetchSignal or something?","m.mentions":{},"msgtype":"m.text"},"ts":1721287867552,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0kNuZhi7KmNn8jztvGDxA-hbjt-2du2mjRyKuX4qjFM"},
{"content":{"body":"https://github.com/whatwg/fetch/issues/607 isn't very enlightening","m.mentions":{},"msgtype":"m.text"},"ts":1721287938576,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ztaKHa27vD92itxrniSUTeNw4JEJIvkkvyKmAk5SXA0"},
{"content":{"body":"I guess https://github.com/whatwg/fetch/issues/447#issuecomment-281731850 proposes a callback that gives you an object that fires events, that's even more complex, hmm.","m.mentions":{},"msgtype":"m.text"},"ts":1721289666256,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$-aC76bdPRtcAZBFclzrSeVQfV0VUxVcYCpcvgUIWZ0U"},
{"content":{"body":"Seems like this should be on the `Response` rather than the fetch?","format":"org.matrix.custom.html","formatted_body":"Seems like this should be on the <code>Response</code> rather than the fetch?","m.mentions":{},"msgtype":"m.text"},"ts":1721290134882,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$O_QP46agx8eh-cOxT97VeYjMI9Qw7g_ZAvsxmxDdY0g"},
{"content":{"body":"Domenic: yeah, I think that's the plan of record. A callback that reveals a FetchObserver object upon which you can listen for progress, and can potentially monitor things like 1xx responses.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: yeah, I think that's the plan of record. A callback that reveals a FetchObserver object upon which you can listen for progress, and can potentially monitor things like 1xx responses.","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1721290144864,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Ee0J8sRNbsAoeRCBpd7yhHKExZXFRMokuexRdiOZwfg"},
{"content":{"body":"Noam Rosenthal: no, that would not work for 1xx.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: no, that would not work for 1xx.","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1721290150337,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$uTfptIp4SK8_CmsE5S3c2K1EjnfQmuWI2a5OMgSMRYw"},
{"content":{"body":"Might have to be careful about when it starts sending progress though to not give additional timing channels.","m.mentions":{},"msgtype":"m.text"},"ts":1721290203549,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HA1bG-HjoGqxIyN_64nbTGlpWtk0QMZZ6QFNCB3RZmc"},
{"content":{"body":"Hmm, for my case that's more complexity than needed, but maybe for future extensibility it's worth it??","msgtype":"m.text"},"ts":1721290233936,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jfjGaOELnDo5M-vK_OzQX-r_yfXldKWwhsrxe3hdtis"},
{"content":{"body":"What would be simpler that gives both download and upload progress? One callback for each?","m.mentions":{},"msgtype":"m.text"},"ts":1721290268955,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$DUbgqdXdH9FP0JDO931V9Sf85geWCT5aM14C6wjkoSY"}
]