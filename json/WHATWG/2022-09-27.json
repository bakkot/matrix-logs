[
{"content":{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","format":"org.matrix.custom.html","formatted_body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","mimetype":"text/plain"},{"body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","mimetype":"text/html"}]},"ts":1664240899244,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"},
{"content":{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","m.relates_to":{"m.in_reply_to":{"event_id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/html"}]},"ts":1664241416472,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jngh94lynqlM9WWBjw-DvIK9s5H8DuqH91m-afg6vEs"},
{"content":{"body":"step 6","msgtype":"m.text","org.matrix.msc1767.text":"step 6"},"ts":1664241508522,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$-vhQxM9LvOCPArpOyqPt_ADeGjyk5jKwXUgvsVxODss"},
{"content":{"body":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)","msgtype":"m.text","org.matrix.msc1767.text":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)"},"ts":1664248837613,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$51AmzM25M_xGrkIQFvEP4XVvNx75kJ4zIbhrgue5CDY"},
{"content":{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","m.relates_to":{"m.in_reply_to":{"event_id":"$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","mimetype":"text/html"}]},"ts":1664258303803,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$cyBFfH_P_MTyz1kU9NbGED4kNE2XG0CnitnXE4OFdxo"},
{"content":{"body":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked.","msgtype":"m.text","org.matrix.msc1767.text":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked."},"ts":1664267767130,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$rFWbI4DTBfIReTU6VDkqsjYrjkqj8o8WufWSfjl846c"},
{"content":{"body":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either.","msgtype":"m.text","org.matrix.msc1767.text":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either."},"ts":1664267903399,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$JikPr3RhnHZnMhoVJE5OAoSK_yUupGrsKy4fX01DQoc"},
{"content":{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","format":"org.matrix.custom.html","formatted_body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","mimetype":"text/plain"},{"body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","mimetype":"text/html"}]},"ts":1664267979261,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_6qcrmldtKi7lSMbUt_98Mak7I86-ndkUU1qAycLGM4"},
{"content":{"body":"So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?","msgtype":"m.text","org.matrix.msc1767.text":"So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?"},"ts":1664268064087,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$Ko60i7zPmE-sobnyQ70CiU9qdB47yalL-2SGbeee6W8"},
{"content":{"body":"(Also, nobody would fault you for making this consistent. You might even get some applause.)","msgtype":"m.text","org.matrix.msc1767.text":"(Also, nobody would fault you for making this consistent. You might even get some applause.)"},"ts":1664268071454,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$lRcxARdHGsZp0a_-C5qlFkDHacyy6xaZgt540Z3Airg"},
{"content":{"body":"Or does precedent with other specs matter at all here?","msgtype":"m.text","org.matrix.msc1767.text":"Or does precedent with other specs matter at all here?"},"ts":1664268083380,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$KA0y7g_OuroHPQ3r7W-OQj6X5DDbN2Iyobbs83qSv48"},
{"content":{"body":"Yeah I was thinking of just going around sending PRs to make things consistent but really don't want to deal with the compat fallout :D Are you saying there's likely not that much breakage as developers don't branch on types anyway?","msgtype":"m.text","org.matrix.msc1767.text":"Yeah I was thinking of just going around sending PRs to make things consistent but really don't want to deal with the compat fallout :D Are you saying there's likely not that much breakage as developers don't branch on types anyway?"},"ts":1664268139171,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$77qYyrzWL3mw4ZivuRD3-GMOJ9DuC2nU8Zjgp-L_KDc"},
{"content":{"body":"Historically it's been pretty easy to change exceptions around, yeah. I think you're right that simpler advice would be welcome here, but I'm not immediately sure where it would go. Web IDL or the TAG's document on APIs I suppose.","msgtype":"m.text","org.matrix.msc1767.text":"Historically it's been pretty easy to change exceptions around, yeah. I think you're right that simpler advice would be welcome here, but I'm not immediately sure where it would go. Web IDL or the TAG's document on APIs I suppose."},"ts":1664268212021,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$dQ37Rd_rRT0kgWgQNmOisNY95FszakHAI5xoie2NuLI"},
{"content":{"body":"E.g., https://www.w3.org/TR/DOM-Level-2/range.html#RangeException was a thing.","msgtype":"m.text","org.matrix.msc1767.text":"E.g., https://www.w3.org/TR/DOM-Level-2/range.html#RangeException was a thing."},"ts":1664268331840,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$cJytUW3lDVf5wQZbKdq5ugSujwvpPzW4nwi5YthPASg"},
{"content":{"body":"hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n\nI have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements. ","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n\nI have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements. ","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n","mimetype":"text/html"}]},"ts":1664268462153,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c"},
{"content":{"body":"> <@sideshowbarker:matrix.org> hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n> \n> I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.\n\nSorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br><p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n</blockquote></mx-reply>Sorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","m.relates_to":{"m.in_reply_to":{"event_id":"$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sideshowbarker:matrix.org> hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n> \n> I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.\n\nSorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br><p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n</blockquote></mx-reply>Sorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","mimetype":"text/html"}]},"ts":1664269563372,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$ORZULuKWH7yIScJ0BXxWoz-_4NR_7ivJu8wVbuAsMQw"}
]