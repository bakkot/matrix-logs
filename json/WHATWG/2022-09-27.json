[
{"content":{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","format":"org.matrix.custom.html","formatted_body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","mimetype":"text/plain"},{"body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","mimetype":"text/html"}]},"ts":1664240899244,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"},
{"content":{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","m.relates_to":{"m.in_reply_to":{"event_id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/html"}]},"ts":1664241416472,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jngh94lynqlM9WWBjw-DvIK9s5H8DuqH91m-afg6vEs"},
{"content":{"body":"step 6","msgtype":"m.text","org.matrix.msc1767.text":"step 6"},"ts":1664241508522,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$-vhQxM9LvOCPArpOyqPt_ADeGjyk5jKwXUgvsVxODss"},
{"content":{"body":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)","msgtype":"m.text","org.matrix.msc1767.text":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)"},"ts":1664248837613,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$51AmzM25M_xGrkIQFvEP4XVvNx75kJ4zIbhrgue5CDY"},
{"content":{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","m.relates_to":{"m.in_reply_to":{"event_id":"$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","mimetype":"text/html"}]},"ts":1664258303803,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$cyBFfH_P_MTyz1kU9NbGED4kNE2XG0CnitnXE4OFdxo"},
{"content":{"body":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked.","msgtype":"m.text","org.matrix.msc1767.text":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked."},"ts":1664267767130,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$rFWbI4DTBfIReTU6VDkqsjYrjkqj8o8WufWSfjl846c"},
{"content":{"body":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either.","msgtype":"m.text","org.matrix.msc1767.text":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either."},"ts":1664267903399,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$JikPr3RhnHZnMhoVJE5OAoSK_yUupGrsKy4fX01DQoc"},
{"content":{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","format":"org.matrix.custom.html","formatted_body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","mimetype":"text/plain"},{"body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","mimetype":"text/html"}]},"ts":1664267979261,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_6qcrmldtKi7lSMbUt_98Mak7I86-ndkUU1qAycLGM4"}
]