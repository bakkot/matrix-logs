[
{"content":{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","format":"org.matrix.custom.html","formatted_body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n```js\nconst ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n```","mimetype":"text/plain"},{"body":"<p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n","mimetype":"text/html"}]},"ts":1664240899244,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"},
{"content":{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","m.relates_to":{"m.in_reply_to":{"event_id":"$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@khafra:matrix.org> With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful\n> ```js\n> const ac = new AbortController()\n> const { signal } = ac\n> \n> const response = await fetch('https://example.com', {\n> \tsignal: signal\n> })\n> \n> ac.abort()\n> \n> await response.text()\n> ```\n\nhttps://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TtG3ubsBpPjUvc1qxbArLZA0Up7Vy_in2ZjJFAMYWq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@khafra:matrix.org\">@khafra:matrix.org</a><br><p>With fetch, an implementation is supposed to throw an AbortError DOMException when consuming the body if the signal passed to fetch is aborted, however I'm unsure which part of the spec covers this. Does anyone know where this comes from? Thanks, would be super helpful</p>\n<pre><code class=\"language-js\">const ac = new AbortController()\nconst { signal } = ac\n\nconst response = await fetch('https://example.com', {\n\tsignal: signal\n})\n\nac.abort()\n\nawait response.text()\n</code></pre>\n</blockquote></mx-reply>https://fetch.spec.whatwg.org/#abort-fetch","mimetype":"text/html"}]},"ts":1664241416472,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$jngh94lynqlM9WWBjw-DvIK9s5H8DuqH91m-afg6vEs"},
{"content":{"body":"step 6","msgtype":"m.text","org.matrix.msc1767.text":"step 6"},"ts":1664241508522,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$-vhQxM9LvOCPArpOyqPt_ADeGjyk5jKwXUgvsVxODss"},
{"content":{"body":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)","msgtype":"m.text","org.matrix.msc1767.text":"thanks, had an issue where the error was getting swallowed. Got it sorted out now :)"},"ts":1664248837613,"senderName":"khafra","senderId":"@khafra:matrix.org","id":"$51AmzM25M_xGrkIQFvEP4XVvNx75kJ4zIbhrgue5CDY"},
{"content":{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","m.relates_to":{"m.in_reply_to":{"event_id":"$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@hsivonen:mozilla.org> Filed as https://github.com/microsoft/vscode/issues/161764\n\nWell, that wasn't particularly successful.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$oGi1kKWplAlC1Kly4jPLj5SkOFK7pX-dXxsnHMUh2qk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Filed as https://github.com/microsoft/vscode/issues/161764</blockquote></mx-reply>Well, that wasn't particularly successful.","mimetype":"text/html"}]},"ts":1664258303803,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$cyBFfH_P_MTyz1kU9NbGED4kNE2XG0CnitnXE4OFdxo"},
{"content":{"body":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked.","msgtype":"m.text","org.matrix.msc1767.text":"It really feels like specs are extremely inconsistent in which error to throw when some common condition such as not \"allowed to use\", non-fully active document or missing user activation is checked."},"ts":1664267767130,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$rFWbI4DTBfIReTU6VDkqsjYrjkqj8o8WufWSfjl846c"},
{"content":{"body":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either.","msgtype":"m.text","org.matrix.msc1767.text":"In part it's because web developers don't branch on exception types and JavaScript doesn't really encourage that kind of programming either."},"ts":1664267903399,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$JikPr3RhnHZnMhoVJE5OAoSK_yUupGrsKy4fX01DQoc"},
{"content":{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","format":"org.matrix.custom.html","formatted_body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So my recommendation is to just `TypeError` most things. Now, `AbortSignal` has changed things a bit so if the API takes a signal perhaps some non-\"`AbortError`\" `DOMException` makes sense.","mimetype":"text/plain"},{"body":"So my recommendation is to just <code>TypeError</code> most things. Now, <code>AbortSignal</code> has changed things a bit so if the API takes a signal perhaps some non-&quot;<code>AbortError</code>&quot; <code>DOMException</code> makes sense.","mimetype":"text/html"}]},"ts":1664267979261,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_6qcrmldtKi7lSMbUt_98Mak7I86-ndkUU1qAycLGM4"},
{"content":{"body":"So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?","msgtype":"m.text","org.matrix.msc1767.text":"So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?"},"ts":1664268064087,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$Ko60i7zPmE-sobnyQ70CiU9qdB47yalL-2SGbeee6W8"},
{"content":{"body":"(Also, nobody would fault you for making this consistent. You might even get some applause.)","msgtype":"m.text","org.matrix.msc1767.text":"(Also, nobody would fault you for making this consistent. You might even get some applause.)"},"ts":1664268071454,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$lRcxARdHGsZp0a_-C5qlFkDHacyy6xaZgt540Z3Airg"},
{"content":{"body":"Or does precedent with other specs matter at all here?","msgtype":"m.text","org.matrix.msc1767.text":"Or does precedent with other specs matter at all here?"},"ts":1664268083380,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$KA0y7g_OuroHPQ3r7W-OQj6X5DDbN2Iyobbs83qSv48"},
{"content":{"body":"Yeah I was thinking of just going around sending PRs to make things consistent but really don't want to deal with the compat fallout :D Are you saying there's likely not that much breakage as developers don't branch on types anyway?","msgtype":"m.text","org.matrix.msc1767.text":"Yeah I was thinking of just going around sending PRs to make things consistent but really don't want to deal with the compat fallout :D Are you saying there's likely not that much breakage as developers don't branch on types anyway?"},"ts":1664268139171,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$77qYyrzWL3mw4ZivuRD3-GMOJ9DuC2nU8Zjgp-L_KDc"},
{"content":{"body":"Historically it's been pretty easy to change exceptions around, yeah. I think you're right that simpler advice would be welcome here, but I'm not immediately sure where it would go. Web IDL or the TAG's document on APIs I suppose.","msgtype":"m.text","org.matrix.msc1767.text":"Historically it's been pretty easy to change exceptions around, yeah. I think you're right that simpler advice would be welcome here, but I'm not immediately sure where it would go. Web IDL or the TAG's document on APIs I suppose."},"ts":1664268212021,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$dQ37Rd_rRT0kgWgQNmOisNY95FszakHAI5xoie2NuLI"},
{"content":{"body":"E.g., https://www.w3.org/TR/DOM-Level-2/range.html#RangeException was a thing.","msgtype":"m.text","org.matrix.msc1767.text":"E.g., https://www.w3.org/TR/DOM-Level-2/range.html#RangeException was a thing."},"ts":1664268331840,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$cJytUW3lDVf5wQZbKdq5ugSujwvpPzW4nwi5YthPASg"},
{"content":{"body":"hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n\nI have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements. ","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n\nI have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements. ","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n","mimetype":"text/html"}]},"ts":1664268462153,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c"},
{"content":{"body":"> <@sideshowbarker:matrix.org> hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n> \n> I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.\n\nSorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br><p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n</blockquote></mx-reply>Sorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","m.relates_to":{"m.in_reply_to":{"event_id":"$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sideshowbarker:matrix.org> hsivonen: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html\n> \n> I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.\n\nSorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$00C5vUWuPYjpdDvc0YTghHsc2EZH-VTssmEuE4Yh65c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br><p><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://lists.w3.org/Archives/Public/www-validator/2022Sep/0012.html</p>\n<p>I have the self-closing-tag check in the Tokenizer code but I guess I should have it in the TreeBuilder code instead — so I can make it namespace-aware, and so that the warning doesn’t get reported for SVG elements.</p>\n</blockquote></mx-reply>Sorry. Bad review on my part. Yeah, it should go in the tree builder where the slash is acknowledged.","mimetype":"text/html"}]},"ts":1664269563372,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$ORZULuKWH7yIScJ0BXxWoz-_4NR_7ivJu8wVbuAsMQw"},
{"content":{"body":"hsivonen: I don't really see negative tests for old IBM encoding labels; do you remember creating those?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't really see negative tests for old IBM encoding labels; do you remember creating those?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: I don't really see negative tests for old IBM encoding labels; do you remember creating those?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't really see negative tests for old IBM encoding labels; do you remember creating those?","mimetype":"text/html"}]},"ts":1664269928633,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$fCWsUOdwDNBmuG-niqYOp2Nm3BKvFfOmgEAQXM2aVzY"},
{"content":{"body":"We could maybe add some to `unsupported-encodings.any.js` though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?","format":"org.matrix.custom.html","formatted_body":"We could maybe add some to <code>unsupported-encodings.any.js</code> though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could maybe add some to `unsupported-encodings.any.js` though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?","mimetype":"text/plain"},{"body":"We could maybe add some to <code>unsupported-encodings.any.js</code> though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?","mimetype":"text/html"}]},"ts":1664269971832,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$sgoHVyiRyj-c2XnynPFTsSx43y3DcsQFe1YW9nrszGE"},
{"content":{"body":"> <@annevk:matrix.org> hsivonen: I don't really see negative tests for old IBM encoding labels; do you remember creating those?\n\nI don't remember creating negative tests for those.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$fCWsUOdwDNBmuG-niqYOp2Nm3BKvFfOmgEAQXM2aVzY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't really see negative tests for old IBM encoding labels; do you remember creating those?</blockquote></mx-reply>I don't remember creating negative tests for those.","m.relates_to":{"m.in_reply_to":{"event_id":"$fCWsUOdwDNBmuG-niqYOp2Nm3BKvFfOmgEAQXM2aVzY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> hsivonen: I don't really see negative tests for old IBM encoding labels; do you remember creating those?\n\nI don't remember creating negative tests for those.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$fCWsUOdwDNBmuG-niqYOp2Nm3BKvFfOmgEAQXM2aVzY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't really see negative tests for old IBM encoding labels; do you remember creating those?</blockquote></mx-reply>I don't remember creating negative tests for those.","mimetype":"text/html"}]},"ts":1664269974559,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$96OSFWUN1VmKhluMMgKH_uVTTn_xHnP7eeUjvokXR0k"},
{"content":{"body":"> <@annevk:matrix.org> We could maybe add some to `unsupported-encodings.any.js` though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?\n\nShould be safe to assume a windows-1252 default if the content is ASCII. If in the future we do the work to change that case to result in UTF-8, we can change the tests at that time.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$sgoHVyiRyj-c2XnynPFTsSx43y3DcsQFe1YW9nrszGE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>We could maybe add some to <code>unsupported-encodings.any.js</code> though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?</blockquote></mx-reply>Should be safe to assume a windows-1252 default if the content is ASCII. If in the future we do the work to change that case to result in UTF-8, we can change the tests at that time.","m.relates_to":{"m.in_reply_to":{"event_id":"$sgoHVyiRyj-c2XnynPFTsSx43y3DcsQFe1YW9nrszGE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> We could maybe add some to `unsupported-encodings.any.js` though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?\n\nShould be safe to assume a windows-1252 default if the content is ASCII. If in the future we do the work to change that case to result in UTF-8, we can change the tests at that time.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$sgoHVyiRyj-c2XnynPFTsSx43y3DcsQFe1YW9nrszGE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>We could maybe add some to <code>unsupported-encodings.any.js</code> though I'm not sure as we'd have to assume some kind of default I guess. We do for UTF-7 and UTF-32 though so maybe that's okay?</blockquote></mx-reply>Should be safe to assume a windows-1252 default if the content is ASCII. If in the future we do the work to change that case to result in UTF-8, we can change the tests at that time.","mimetype":"text/html"}]},"ts":1664270050740,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$-pq0hRCLeHAhN6X3a009lhPESTm-HX0odKC8F1ds40U"},
{"content":{"body":"I wonder why I waited, perhaps because we also had this idea of using the replacement encoding for some.","msgtype":"m.text","org.matrix.msc1767.text":"I wonder why I waited, perhaps because we also had this idea of using the replacement encoding for some."},"ts":1664270119577,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$7TJY89UmKWmbS95cHGrGrPIAymUvXOyMgMpCVa8UDFQ"},
{"content":{"body":"hsivonen: r? https://github.com/validator/htmlparser/pull/74","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: r? https://github.com/validator/htmlparser/pull/74","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: r? https://github.com/validator/htmlparser/pull/74","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: r? https://github.com/validator/htmlparser/pull/74","mimetype":"text/html"}]},"ts":1664271865213,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$cpY8wIXxEtmCfGgrvC_s68i42MvVrToIokF5exzzaXM"},
{"content":{"body":"> <@johannhof:matrix.org> So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?\n\nI'd be more in favor of consistent, separate error types. I agree with Anne that it doesn't matter much, but my takeaway isn't to convert everything to TypeError, personally.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Ko60i7zPmE-sobnyQ70CiU9qdB47yalL-2SGbeee6W8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@johannhof:matrix.org\">@johannhof:matrix.org</a><br>So, if, say, ~70% of precedent is &quot;NotAllowedError&quot; and 30% are something else including TypeError, should we still use TypeError?</blockquote></mx-reply>I'd be more in favor of consistent, separate error types. I agree with Anne that it doesn't matter much, but my takeaway isn't to convert everything to TypeError, personally.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ko60i7zPmE-sobnyQ70CiU9qdB47yalL-2SGbeee6W8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@johannhof:matrix.org> So, if, say, ~70% of precedent is \"NotAllowedError\" and 30% are something else including TypeError, should we still use TypeError?\n\nI'd be more in favor of consistent, separate error types. I agree with Anne that it doesn't matter much, but my takeaway isn't to convert everything to TypeError, personally.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Ko60i7zPmE-sobnyQ70CiU9qdB47yalL-2SGbeee6W8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@johannhof:matrix.org\">@johannhof:matrix.org</a><br>So, if, say, ~70% of precedent is &quot;NotAllowedError&quot; and 30% are something else including TypeError, should we still use TypeError?</blockquote></mx-reply>I'd be more in favor of consistent, separate error types. I agree with Anne that it doesn't matter much, but my takeaway isn't to convert everything to TypeError, personally.","mimetype":"text/html"}]},"ts":1664273379795,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$_0_mkUyfRBHqqS8yV4i5LS7kZ7yY8bz2Q6qk4wOpl7k"},
{"content":{"body":"I've ended up on \"NotAllowedError\" for allowed to use, \"InvalidStateError\" for non-fully active document... not sure about user activation.","msgtype":"m.text","org.matrix.msc1767.text":"I've ended up on \"NotAllowedError\" for allowed to use, \"InvalidStateError\" for non-fully active document... not sure about user activation."},"ts":1664273403424,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$tZG-zvcZ4h_PzP0RRZhBjTywBqFPzhvZpKi2apRBxD0"},
{"content":{"body":"I think that would be \"SecurityError\" by majority vote","msgtype":"m.text","org.matrix.msc1767.text":"I think that would be \"SecurityError\" by majority vote"},"ts":1664273538194,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$aowIk44HI2hJe9i89Rr9btGi0Q77shITRJ99hHuOgRs"},
{"content":{"body":"Yeah intuitively I agree with you Domenic that just flattening all errors to one type seems a little oversimplistic?","format":"org.matrix.custom.html","formatted_body":"Yeah intuitively I agree with you <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that just flattening all errors to one type seems a little oversimplistic?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah intuitively I agree with you Domenic that just flattening all errors to one type seems a little oversimplistic?","mimetype":"text/plain"},{"body":"Yeah intuitively I agree with you <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that just flattening all errors to one type seems a little oversimplistic?","mimetype":"text/html"}]},"ts":1664273652358,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$H8htY_J1Yxdvtf7sBp4QDydwIMULcKE8E8vegjTNVBI"},
{"content":{"body":"I don't feel strongly, but I also rather not reveal more information than strictly necessary. The states alluded to above end up exposed in other ways as well so they are probably fine though.","msgtype":"m.text","org.matrix.msc1767.text":"I don't feel strongly, but I also rather not reveal more information than strictly necessary. The states alluded to above end up exposed in other ways as well so they are probably fine though."},"ts":1664273721971,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$FTscu2Ep_koAbqDV7pl6yiWW_M8VUCU9FATaqMBw87Y"},
{"content":{"body":"(also don't fully understand \"NotAllowedError\" vs. \"SecurityError\" use cases, and looking at specs I suspect most people don't)","msgtype":"m.text","org.matrix.msc1767.text":"(also don't fully understand \"NotAllowedError\" vs. \"SecurityError\" use cases, and looking at specs I suspect most people don't)"},"ts":1664273805331,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$d75ktxSoo1ZcDtG9VFsZCOntHNrl1cWpwfUVIDp4Tmg"},
{"content":{"body":"I guess there are things that aren't allowed for non-security reasons","msgtype":"m.text","org.matrix.msc1767.text":"I guess there are things that aren't allowed for non-security reasons"},"ts":1664273819874,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$XPnE_Ox1LHsmSj21wOBJRDFHd4uA403G_ga7TcMvNH8"},
{"content":{"body":"Right, although I can't imagine we've been very clear about what's a security reason vs. not, and I'm not sure I'd classify either permissions policy or user activation as a security reason :)","msgtype":"m.text","org.matrix.msc1767.text":"Right, although I can't imagine we've been very clear about what's a security reason vs. not, and I'm not sure I'd classify either permissions policy or user activation as a security reason :)"},"ts":1664273874149,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$z5TiLWAYOLpy_D73iWOMEnF6gye-jVwQoVE5ybCZXR8"},
{"content":{"body":"I guess the most clear-cut \"SecurityError\" cases are cross-origin access stuff","msgtype":"m.text","org.matrix.msc1767.text":"I guess the most clear-cut \"SecurityError\" cases are cross-origin access stuff"},"ts":1664273890445,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$8trIc2kI1VjjcO8yXouBP6h9yZCmcO9ZLkwXL1DG0ac"},
{"content":{"body":"Yeah looking at https://webidl.spec.whatwg.org/#notallowederror those two actually seem clear cut for NotAllowedError","msgtype":"m.text","org.matrix.msc1767.text":"Yeah looking at https://webidl.spec.whatwg.org/#notallowederror those two actually seem clear cut for NotAllowedError"},"ts":1664273986770,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$hG2TXvdNK7CF2ryF-n8wuRm_e0q2H_XuzkHXn-xVp3o"},
{"content":{"body":"Anyway I would personally support any consistification efforts here but it just feels like you're setting yourself up for potential compat pain. Perhaps better would be to tackle the problem going forward by having a reference of common checks => usual errors they produce.","msgtype":"m.text","org.matrix.msc1767.text":"Anyway I would personally support any consistification efforts here but it just feels like you're setting yourself up for potential compat pain. Perhaps better would be to tackle the problem going forward by having a reference of common checks => usual errors they produce."},"ts":1664274162104,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$sGGph8qIV_q814qhSLckLzRqyaxaBRESDaeqDBwKq6U"},
{"content":{"body":"Right, I agree that this seems painful to fix across the board retroactively now. Should the TAG Design Principles require authors of \"new things that could be used to throw errors\" to recommend an error type in the respective spec?","msgtype":"m.text","org.matrix.msc1767.text":"Right, I agree that this seems painful to fix across the board retroactively now. Should the TAG Design Principles require authors of \"new things that could be used to throw errors\" to recommend an error type in the respective spec?"},"ts":1664274267750,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$TneYHCHCRkTR560NaU76_1dgdNfUPys4Gvv83t-9WF0"},
{"content":{"body":"I filed this for \"fully active\" before: https://github.com/w3ctag/design-principles/issues/395","msgtype":"m.text","org.matrix.msc1767.text":"I filed this for \"fully active\" before: https://github.com/w3ctag/design-principles/issues/395"},"ts":1664274307834,"senderName":"johannhof","senderId":"@johannhof:matrix.org","id":"$7_VbybIK44k7Z4z2eKeGjh3jw0I0Tz-SMZUbXID6CHI"},
{"content":{"body":"hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/html"}]},"ts":1664274636363,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$VnWEsJ7j2QXhXwMQ2au7iFyCjT6zj_5lvnmoCqGRvMA"},
{"content":{"body":" * hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","m.new_content":{"body":"hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$VnWEsJ7j2QXhXwMQ2au7iFyCjT6zj_5lvnmoCqGRvMA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * hsivonen: turns out Safari still supports some x-mac-\\* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: turns out Safari still supports some x-mac-* labels (will PR later and will take suggestions for additional labels to include)","mimetype":"text/html"}]},"ts":1664274681352,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$7feDc_aPeKyr_5PcBIFeOB0Fxa6CvOMbaScMEnM4yUw"}
]