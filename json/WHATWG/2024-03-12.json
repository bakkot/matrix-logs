[
{"content":{"body":"Is the https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values algorithm known to differ in any way from the behavior of [`strtod`](https://en.cppreference.com/w/c/string/byte/strtof)?","format":"org.matrix.custom.html","formatted_body":"Is the https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values algorithm known to differ in any way from the behavior of <a href=\"https://en.cppreference.com/w/c/string/byte/strtof\"><code>strtod</code></a>?","m.mentions":{},"msgtype":"m.text"},"ts":1710214952405,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$sMT6AOEFEyFwNQ3aV1dvW3RPesw0ewefinBjVxEqtWY"},
{"content":{"body":"I assume you could find any number of differences if you looked, if those are even consistent between platforms","m.mentions":{},"msgtype":"m.text"},"ts":1710239897946,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$jhz2gm68pibmYp4r4nnKpyf9oj_7m4awOH3U7Df1FAk"},
{"content":{"body":"Well the thing is, as far as I can see, in practice none of Blink, Gecko, Servo, or WebKit actually implement that algorithm — at least not intentionally.\n\nInstead, as far as I can see, Blink and Gecko use https://github.com/google/double-conversion — and until a year ago, WebKit did too. WebKit now uses https://github.com/fastfloat/fast_float — which is functionally equivalent to `strtod` — as a drop-in replacement for the double-conversion it had also been using previously.\n\nSo if our goal is interoperability, it seems like what we’d ideally need to specify is, functional equivalence with double-conversion — which essentially seems to mean functional equivalence with `strtod`.","format":"org.matrix.custom.html","formatted_body":"<p>Well the thing is, as far as I can see, in practice none of Blink, Gecko, Servo, or WebKit actually implement that algorithm — at least not intentionally.</p>\n<p>Instead, as far as I can see, Blink and Gecko use https://github.com/google/double-conversion — and until a year ago, WebKit did too. WebKit now uses https://github.com/fastfloat/fast_float — which is functionally equivalent to <code>strtod</code> — as a drop-in replacement for the double-conversion it had also been using previously.</p>\n<p>So if our goal is interoperability, it seems like what we’d ideally need to specify is, functional equivalence with double-conversion — which essentially seems to mean functional equivalence with <code>strtod</code>.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710240701391,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$8yZIhan0YX3BfPGcalXrpKX0rXb0qjGRTRlCq0rxWRk"},
{"content":{"body":"And for the case of Servo, as far as I can see, it just uses the Rust standard library’s `parse()`","format":"org.matrix.custom.html","formatted_body":"And for the case of Servo, as far as I can see, it just uses the Rust standard library’s <code>parse()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1710240754223,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$sKik9GocVc5GztQIGyGZIINdSy3nILg98GGd87-HNco"},
{"content":{"body":"The only engine implementation I have found that seems to attempt to implement its own double parser is the one in Ladybird.","m.mentions":{},"msgtype":"m.text"},"ts":1710240805463,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$xdWUe1jw301uLubi823vV_Lh56gG2rCXG2DsWor5_H0"},
{"content":{"body":"But by attempting implement what’s in the spec rather than just using double-conversion or fast_float, it seems like the Ladybird implementation risks lack of interoperability with the other engines.","m.mentions":{},"msgtype":"m.text"},"ts":1710240932338,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$YlTZjQfIvwezQeYQI3PWSNg1q94fQs6R-rDHEdwnlRE"},
{"content":{"body":"Oh, hmm. I seem to recall that all the integer ones were handcrafted, at least; but maybe floats are too hard","m.mentions":{},"msgtype":"m.text"},"ts":1710244719176,"senderName":"Ms2ger","senderId":"@ms2ger:igalia.com","id":"$CxXlXn6QgbIgDndfENXJ-Yh6NFmNHzKtjYrkMmNfyNY"},
{"content":{"body":"I suspect Ladybird will have quite a few Interop concerns like that, seeing as implementing the spec as written before trying to optimize is a project goal/strategy. And that pulling in a third party dependency would be against the project's... Identity? Ethos? Something like that. \n\nIf the status quo is that everyone uses an implementation that \"matches strtod\" then perhaps the spec should have a normative reference to ISO C rather than define the float parsing algorithm itself.","msgtype":"m.text"},"ts":1710253579439,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$vz8npHj3jYgRJGX73376lP5mIjdoSlyOtsOfwkEujWQ"},
{"content":{"body":"Hmm, has anyone actually identified any differences? Also, it's unclear to me if ISO C is a suitable reference. I thought most ISO standards were not freely accessible.","m.mentions":{},"msgtype":"m.text"},"ts":1710256454758,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$S5KXag_p4ev6FnsAtIiEvcaj1g_oRofJkpCKazhQBac"},
{"content":{"body":"Both strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in\n<float.h>) significant digits, the result should be correctly rounded. If the subject\nsequence D has the decimal form and more than DECIMAL_DIG significant digits,\nconsider the two bounding, adjacent decimal strings L and U, both having\nDECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.\nThe result should be one of the (equal or adjacent) values that would be obtained by\ncorrectly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current\nrounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".\n\nSo there's not just one \"strtod\"; potentially each platform can have its own. Looking at `fast_float()`, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.","format":"org.matrix.custom.html","formatted_body":"<p>Both strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in<br>&lt;float.h&gt;) significant digits, the result should be correctly rounded. If the subject<br>sequence D has the decimal form and more than DECIMAL_DIG significant digits,<br>consider the two bounding, adjacent decimal strings L and U, both having<br>DECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.<br>The result should be one of the (equal or adjacent) values that would be obtained by<br>correctly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current<br>rounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".</p>\n<p>So there's not just one \"strtod\"; potentially each platform can have its own. Looking at <code>fast_float()</code>, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710259977393,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$qbdNHNhscHR_OzPPh8p9-lh2LsLpTQ4MyRsmpAwvcug"},
{"content":{"body":" * Both (the specification of) strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL\\_DIG (defined in\n\\<float.h>) significant digits, the result should be correctly rounded. If the subject\nsequence D has the decimal form and more than DECIMAL\\_DIG significant digits,\nconsider the two bounding, adjacent decimal strings L and U, both having\nDECIMAL\\_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.\nThe result should be one of the (equal or adjacent) values that would be obtained by\ncorrectly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current\nrounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".\n\nSo there's not just one \"strtod\"; potentially each platform can have its own. Looking at `fast_float()`, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.","format":"org.matrix.custom.html","formatted_body":" * <p>Both (the specification of) strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in<br>&lt;float.h&gt;) significant digits, the result should be correctly rounded. If the subject<br>sequence D has the decimal form and more than DECIMAL_DIG significant digits,<br>consider the two bounding, adjacent decimal strings L and U, both having<br>DECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.<br>The result should be one of the (equal or adjacent) values that would be obtained by<br>correctly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current<br>rounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".</p>\n<p>So there's not just one \"strtod\"; potentially each platform can have its own. Looking at <code>fast_float()</code>, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.</p>\n","m.mentions":{},"m.new_content":{"body":"Both (the specification of) strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL\\_DIG (defined in\n\\<float.h>) significant digits, the result should be correctly rounded. If the subject\nsequence D has the decimal form and more than DECIMAL\\_DIG significant digits,\nconsider the two bounding, adjacent decimal strings L and U, both having\nDECIMAL\\_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.\nThe result should be one of the (equal or adjacent) values that would be obtained by\ncorrectly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current\nrounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".\n\nSo there's not just one \"strtod\"; potentially each platform can have its own. Looking at `fast_float()`, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.","format":"org.matrix.custom.html","formatted_body":"<p>Both (the specification of) strtod and HTML start with a computation of the exact mathematical value of the number, and then round to a nearby representation. strtod's rounding is: \" If the subject sequence has the decimal form and at most DECIMAL_DIG (defined in<br>&lt;float.h&gt;) significant digits, the result should be correctly rounded. If the subject<br>sequence D has the decimal form and more than DECIMAL_DIG significant digits,<br>consider the two bounding, adjacent decimal strings L and U, both having<br>DECIMAL_DIG significant digits, such that the values of L, D, and U satisfy L ≤ D ≤ U.<br>The result should be one of the (equal or adjacent) values that would be obtained by<br>correctly rounding L and U according to the current rounding direction, with the extra stipulation that the error with respect to D should have a correct sign for the current<br>rounding direction.\" This is also a \"should\"-level requirement, while HTML's is a \"must\".</p>\n<p>So there's not just one \"strtod\"; potentially each platform can have its own. Looking at <code>fast_float()</code>, they say \"We provide exact rounding (including round to even).\", which I think matches HTML's requirement.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qbdNHNhscHR_OzPPh8p9-lh2LsLpTQ4MyRsmpAwvcug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710260014775,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$L7_wWxSVKKQMvnkq545rWzBpctl5lh2HSUL_c0EW8OE"},
{"content":{"body":"FYI, https://whatwg.org/working-mode links to https://whatwg.org/Stages.md, which doesn't exist.","m.mentions":{},"msgtype":"m.text"},"ts":1710281579187,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$olNCJM_zAgClib3qskSmx1MhQ3CMx_2Qfk98VIxi2tg"},
{"content":{"body":"(I'll file an issue at some point, but distracted by the W3C Breakout Day right now.)","m.mentions":{},"msgtype":"m.text"},"ts":1710281604487,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$exZ4cxnHtHS0XO8ZsIGNpRNnm19QUtKEFbH7S60LqTA"}
]