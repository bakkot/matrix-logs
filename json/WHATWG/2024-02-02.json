[
{"content":{"body":"mfreed: I think it would be nice if you or we together drafted a small blog post around the shadow tree changes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mfreed:matrix.org\">mfreed</a>: I think it would be nice if you or we together drafted a small blog post around the shadow tree changes","m.mentions":{"user_ids":["@mfreed:matrix.org"]},"msgtype":"m.text"},"ts":1706856216613,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$E5mVC5GOcmFCcued8k_GuOfmJrrdrRKy13wB_Tg6-48"},
{"content":{"body":"Regarding trailing (not leading) characters in floating-point number values: Does the parsing algorithm at https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values require implementations to ignore all trailing characters that are not ASCII digits?","m.mentions":{},"msgtype":"m.text"},"ts":1706861268300,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$6L4hAPXEksMeaCEKmQGIw-LTnymQ5msf33AxerXyesM"},
{"content":{"body":"sideshowbarker: yeah, it ends up ignoring essentially everything at a certain point. Whereas before that it is quite strict.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: yeah, it ends up ignoring essentially everything at a certain point. Whereas before that it is quite strict.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1706862921240,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$tjurM6tE3D7eIy6v-5EtNNMyodUaeDGcTT6MnJ6awmk"},
{"content":{"body":"OK, thanks","m.mentions":{},"msgtype":"m.text"},"ts":1706862960858,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$W_3FgQqJBU8L9W06dxJT7w1u1Kjj6qvLm10K7dywK9Q"},
{"content":{"body":"That complicates dealing with U+000B… Implementation-wise, it would be easier to just reject it everywhere","m.mentions":{},"msgtype":"m.text"},"ts":1706863038064,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$v2qdeAGiNSwWPDekzArgcOWBdNK2H1sgDRXTjVfyPuM"},
{"content":{"body":"sideshowbarker: I left a comment on your implementation. You need to go deeper. :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: I left a comment on your implementation. You need to go deeper. :-)","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1706863593257,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$IuU2sBHFGBX1jw_iSSliB-SvhIPiBOARYDceme-djq0"},
{"content":{"body":"The source of the problem is WebKit's (copied by Chromium) string to double operations. They do a bit too much.","m.mentions":{},"msgtype":"m.text"},"ts":1706863661550,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HRJ0xUFlAk0VYqRJzZ2hEmLo-mMr7U5rLwkkuAgnRWc"},
{"content":{"body":"> <@annevk:matrix.org> The source of the problem is WebKit's (copied by Chromium) string to double operations. They do a bit too much.\n\nYeah, I’m discovering that now…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$HRJ0xUFlAk0VYqRJzZ2hEmLo-mMr7U5rLwkkuAgnRWc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>The source of the problem is WebKit&#39;s (copied by Chromium) string to double operations. They do a bit too much.</blockquote></mx-reply>Yeah, I’m discovering that now…","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HRJ0xUFlAk0VYqRJzZ2hEmLo-mMr7U5rLwkkuAgnRWc"}},"msgtype":"m.text"},"ts":1706863912182,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$pY1UdLPHhe2SsEwNBImjfi6TrSFzl8E6umPR10-WYo0"},
{"content":{"body":"sideshowbarker: It might be a bit much though so not handling U+000B for now would be reasonable too.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It might be a bit much though so not handling U+000B for now would be reasonable too.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1706863922089,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$eCb1iyOtkz3sBVa6sKejkbNjlSg15W-5QSNzDCcpGOU"},
{"content":{"body":" * sideshowbarker: It might be a bit much though so not handling U+000B correctly for now would be reasonable too.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It might be a bit much though so not handling U+000B correctly for now would be reasonable too.","m.mentions":{},"m.new_content":{"body":"sideshowbarker: It might be a bit much though so not handling U+000B correctly for now would be reasonable too.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It might be a bit much though so not handling U+000B correctly for now would be reasonable too.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eCb1iyOtkz3sBVa6sKejkbNjlSg15W-5QSNzDCcpGOU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706863945817,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$TG6tSJzFdf6kqzIYUuq5WKovfdMrCNmTndQpDEk4bWs"},
{"content":{"body":"OK","m.mentions":{},"msgtype":"m.text"},"ts":1706863949143,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$GrOZT-Tv5SSIm7vNjDijQ8cFkrFAXlky3uGwwcdkxBQ"},
{"content":{"body":"Ideally string to double would just do the minimal thing. It would progress some character pointer and return failure or a number. And then after that the caller gets to decide whether to ignore trailing characters or not.","m.mentions":{},"msgtype":"m.text"},"ts":1706864016470,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$rtJksWTCHGw3sGWfAblwZydwyxIXYNn7VSaptEHCTfQ"},
{"content":{"body":"And the caller also gets to decide where the character pointer starts (i.e., whether to skip whitespace and what type of whitespace beforehand).","m.mentions":{},"msgtype":"m.text"},"ts":1706864044471,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$L1Xny3xoV8x6GtQP41oRJPnKkXYQu3a954R1gPD1oq8"},
{"content":{"body":"And had already thought about changing `parseDouble()` to disallow U+000B as leading whitespace, but figured the problem with hard-coding it that way would be that it could regress other existing code that does expect `parseDouble()` allow U+000B.\n\nSo yeah — ideally would need to be made configurable, as you said in your comment.\n","format":"org.matrix.custom.html","formatted_body":"<p>And had already thought about changing <code>parseDouble()</code> to disallow U+000B as leading whitespace, but figured the problem with hard-coding it that way would be that it could regress other existing code that does expect <code>parseDouble()</code> allow U+000B.</p>\n<p>So yeah —&nbsp;ideally would need to be made configurable, as you said in your comment.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1706864240664,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$5_TR3io8A8J3eUKFnbgJT2dyZ20r6HTGdGsCEJHmyx0"},
{"content":{"body":"sideshowbarker: It looks like the other callers are in JSC. You could ask in the WebKit JSC channel maybe.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It looks like the other callers are in JSC. You could ask in the WebKit JSC channel maybe.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1706864524717,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Fr_HfG96ySvKse3JBbfPXWvoBfk1hxTdSWjcKvQD_rI"},
{"content":{"body":"OK","m.mentions":{},"msgtype":"m.text"},"ts":1706864540086,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$xGWcBFrxgrjZru--ulRxgnHl6m86AU0lEi3txBfHvew"},
{"content":{"body":"For now I guess I may also go ahead and hard-code the `parseDouble()` code to disallow U+000B, and see what that breaks","format":"org.matrix.custom.html","formatted_body":"For now I guess I may also go ahead and hard-code the <code>parseDouble()</code> code to disallow U+000B, and see what that breaks","m.mentions":{},"msgtype":"m.text"},"ts":1706864614771,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$tuxUt9OcIfuj4iqa4H_ZVFQ0K_2GflYVj8Lx_bx8bWs"},
{"content":{"body":"(just locally, I mean)","m.mentions":{},"msgtype":"m.text"},"ts":1706864636255,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$pNcmYKBTCtpIPR1DJP_Kx6UHShO7ruBM3nTNnEpZkyA"},
{"content":{"body":"Yeah seems reasonable to try. JavaScript should be concerned about more whitespace than just ASCII anyway, but maybe that's handled separately?","m.mentions":{},"msgtype":"m.text"},"ts":1706864670266,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$iSwAUn6N8foVDIY2M6JqOHuzr0pcxGPC5HHd_fTljL0"},
{"content":{"body":"maybe so… we’ll see, anyway","m.mentions":{},"msgtype":"m.text"},"ts":1706864697620,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$pyCcuzHjsLuwwrMeph6c6KWSF9YJ_GW-h5_yaYQ-8eM"},
{"content":{"body":"CSS seems to have mostly its own conversion, which seems suboptimal.","m.mentions":{},"msgtype":"m.text"},"ts":1706864720657,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Gr-GAWKFfzqGVwHONBY26n6gOSpUvFk7Ep1w52VsMyk"},
{"content":{"body":"annevk: Am I counting correctly that there are 16 ASCII characters that the URL Standard allows in a domain but STD3 does not? The list is surprising. Also, some characters on that list don't go to DNS resolution in Firefox but to the search engine if typed into the URL bar. How did you derive the forbidden domain code point list?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: Am I counting correctly that there are 16 ASCII characters that the URL Standard allows in a domain but STD3 does not? The list is surprising. Also, some characters on that list don't go to DNS resolution in Firefox but to the search engine if typed into the URL bar. How did you derive the forbidden domain code point list?","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1706878438200,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$6KgLvTB_lyy_lD4oHWxvoejjes0kND3TFUjYALzlhGs"},
{"content":{"body":"hsivonen: it's an attempt to be as reasonable as possible to non-DNS systems which Ryan Sleevi deemed important (and probably are in certain deployments, though unclear to what extent they have non-DNS names as that is hard to find out)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: it's an attempt to be as reasonable as possible to non-DNS systems which Ryan Sleevi deemed important (and probably are in certain deployments, though unclear to what extent they have non-DNS names as that is hard to find out)","m.mentions":{"user_ids":["@hsivonen:mozilla.org"]},"msgtype":"m.text"},"ts":1706878645379,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$C4nCEr8IM2DEHOcBY46lFlzXnxApe4I3_IOXFMjnZqg"},
{"content":{"body":"I don't know the exact numbers offhand though, definitely not at this point","m.mentions":{},"msgtype":"m.text"},"ts":1706878668504,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$C4W4CT4wSrn_0ObkTUV1Wscw3lVi1acKf5kfaSDHm6g"},
{"content":{"body":"annevk: I see. I'm wondering if it's a good idea for an IDNA library to have the UTS 46 flag of `UseSTD3ASCIIRules` where `false` means anything goes, or if an IDNA library should have an ASCIIRules parameter that take STD3 or WHATWG.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I see. I'm wondering if it's a good idea for an IDNA library to have the UTS 46 flag of <code>UseSTD3ASCIIRules</code> where <code>false</code> means anything goes, or if an IDNA library should have an ASCIIRules parameter that take STD3 or WHATWG.","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1706878783790,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$UQHBN_A8DTNd7R8oqCPBQ-I9ptaJ89v03ctpECXCTIg"},
{"content":{"body":"hsivonen: https://github.com/whatwg/url/issues/397","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://github.com/whatwg/url/issues/397","m.mentions":{"user_ids":["@hsivonen:mozilla.org"]},"msgtype":"m.text"},"ts":1706878810273,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$sHTL-lJXSIaIDpNZkzJhSdPRUGimjNQd8OYKvvcKX8U"},
{"content":{"body":"That's a good question and I'm not sure. I don't really know what email does for instance. It would be very nice if the library could just be \"domain to ASCII\" and \"domain to Unicode\" without any kind of configuration. But we might still be too much in a state of flux.","m.mentions":{},"msgtype":"m.text"},"ts":1706878931393,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Mk9Eth5aa0ykRdYorTFUc5jbqxkSaE6oBe2Qp0MRDV4"},
{"content":{"body":"Today, I'm been wondering if I should ask UTS 46 to document the use cases for its tunables.","m.mentions":{},"msgtype":"m.text"},"ts":1706878971390,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$aAGLaegxcppD-dr2hoTO3LyB8aiZvq1bw4VST-yRJOs"},
{"content":{"body":"I'm rather unhappy about how the spec definition of the UTS 46 STD3 stuff is so much more complicated than what ICU4C does. I've spent way too much time designing data structures from the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1706879010413,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$29lnktrGsjaE2fufmbOAbiKubL0r2CKdnUt9rMgFaA4"},
{"content":{"body":"I'm also a bit unhappy about it taking me so long to realize that the next step in the URL Standard after the UTS 46 integration point provides a somewhat similar filter as ICU4C's STD3 filter. (But I didn't notice it by reading just the UTS 46 integration language in the URL Standard.)","m.mentions":{},"msgtype":"m.text"},"ts":1706879091436,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$EK_8XYuduFGmX75vI9mS0WpGel-ZP8Eek1UVBttDxKM"}
]