[
{"content":{"body":"Has anybody made a diagram that shows the relationship/structure for navigables, browsing contexts, Windows, documents?\n\nFor example, something similar to https://docs.google.com/presentation/d/1ZRIQbUKw9Tf077odCh66OrrwRIVNLvI_nhLm2Gi__F0/embed?start=false&loop=false&delayms=3000&slide=id.g30f0fc55_0_152","m.mentions":{},"msgtype":"m.text"},"ts":1700615303834,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$CZRfMEskHFJdtcvJ7MJwbRjYDckp4qt6e4lnrbPA27I"},
{"content":{"body":"Some attempts in https://github.com/whatwg/html/issues/3863 , outdated by now","m.mentions":{},"msgtype":"m.text"},"ts":1700616164025,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$DqNxJNIfZg1uJEAJst6TJp2jp51DnlbgPEGgmfxnyMg"},
{"content":{"body":"One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to an observable/JavaScript-testable condition.\n\nExample: `if (!frame->page()`)\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":"<p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to an observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page()</code>)</p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700618054264,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$n1OKoNdy74mgbFzXKvYtI63wtoeSErtDHsjGGf4dCOg"},
{"content":{"body":" * One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to an observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":" * <p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to an observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"m.new_content":{"body":"One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to an observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":"<p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to an observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n1OKoNdy74mgbFzXKvYtI63wtoeSErtDHsjGGf4dCOg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700618101968,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$9BxkBV33rnTBDSQ8fjAT_8__3Rq6aITjH9nYuUR8KNE"},
{"content":{"body":" * One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to an observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":" * <p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to an observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"m.new_content":{"body":"One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to an observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":"<p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to an observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n1OKoNdy74mgbFzXKvYtI63wtoeSErtDHsjGGf4dCOg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700618125290,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$jjB8Yrp7O4aO3XZYcJx93OPKa-a-kWgRvJ6zpBd7RR4"},
{"content":{"body":" * One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to _any_ observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":" * <p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to <em>any</em> observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"m.new_content":{"body":"One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.\n\nI mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.\n\nAnd then WebKit and Blink have a Page class — which in Gecko corresponds maybe to a _docshell_? But neither Page nor docshell seem to map clearly to anything in the spec.\n\nAnd because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even _if_ it corresponds to _any_ observable/JavaScript-testable condition.\n\nExample: `if (!frame->page())`\n\nSince I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.","format":"org.matrix.custom.html","formatted_body":"<p>One thing that’s challenging about implementing spec features is that the abstractions/classes used in browser-engine source — other than Document and maybe Window — don’t clearly map to spec constructs.</p>\n<p>I mean the fact that, for example, there’s no, say, BrowsingContext class in WebKit/Blink — instead the closest thing to that (and to a navigable) is called Frame, and it’s not completely clear that really does correspond very directly to the spec constructs.</p>\n<p>And then WebKit and Blink have a Page class —&nbsp;which in Gecko corresponds maybe to a <em>docshell</em>? But neither Page nor docshell seem to map clearly to anything in the spec.</p>\n<p>And because of all that, sometimes when I look at some particular conditional check in the engine sources, I can’t see what particular observable (JavaScript-testable) condition in frontend JavaScript code that condition corresponds to — or even <em>if</em> it corresponds to <em>any</em> observable/JavaScript-testable condition.</p>\n<p>Example: <code>if (!frame-&gt;page())</code></p>\n<p>Since I don’t know what (if anything) a Page maps to in the spec, I also don’t know what it means for a Frame to not have an associated Page, and whether a change to the code block for that condition is something that will be observable from frontend code and potentially affect existing tests — or that should require new tests.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n1OKoNdy74mgbFzXKvYtI63wtoeSErtDHsjGGf4dCOg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700618223844,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$xv91BlsZwCnnQ2gDDcqrHltU3T82OFgOLFFm5XYz_-8"},
{"content":{"body":"Dominic Farolino has thought a lot about these things in Chromium","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a> has thought a lot about these things in Chromium","m.mentions":{"user_ids":["@domfarolino:matrix.org"]},"msgtype":"m.text"},"ts":1700625108323,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$voMph4yREsFxAlOIzCDZHraejFjm0vWRLMCzzf6i2-c"}
]