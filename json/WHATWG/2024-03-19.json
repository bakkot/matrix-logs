[
{"content":{"body":"What's the matrix \"script\"","m.mentions":{},"msgtype":"m.text"},"ts":1710834429429,"senderName":"nakima","senderId":"@dripg:matrix.org","id":"$MzmaqX7SHP_u1y282pmsLr4gdVv7ChukahvQI1IWdds"},
{"content":{"body":"Woe","m.mentions":{},"m.relates_to":{"event_id":"$837kiHuvdITI_8xmWtbK5Ot9yXxtcY_VD9UqKgE88jk","is_falling_back":true,"m.in_reply_to":{"event_id":"$e86LIezzusxEDYSS6V3suH6YErWOFNz0O0S9ZWH9jp8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1710834567107,"senderName":"nakima","senderId":"@dripg:matrix.org","id":"$QIYw69XFMpz24EkB1bDKKgq4pA2cjxdFu29qgo7xVMc"},
{"content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user)” — and so, that the combination of `inert` + `content-visibility: auto` on a node should cause it to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>” — and so, that the combination of <code>inert</code> + <code>content-visibility: auto</code> on a node should cause it to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement the closing and opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"ts":1710837611486,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA"},
{"content":{"body":" * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, that the combination of `inert` + `content-visibility: auto` on a node should cause it to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, that the combination of <code>inert</code> + <code>content-visibility: auto</code> on a node should cause it to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement the closing and opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{},"m.new_content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, that the combination of `inert` + `content-visibility: auto` on a node should cause it to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, that the combination of <code>inert</code> + <code>content-visibility: auto</code> on a node should cause it to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement the closing and opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710837646966,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$hb_e5tTKoEoEXJUlshu-RCTywdW6w-SqESFkUTc6MaU"},
{"content":{"body":" * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement the closing and opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{},"m.new_content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement the closing and opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement the closing and opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710837676610,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$4cILNXbpC0Y_R7MAgW8ohl6JEE8N6YNMwTJ8MHUIrUk"},
{"content":{"body":" * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{},"m.new_content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710837696498,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$1MIlfbWR_oXbnwpcnczqNFv0xXfM1XC9frHiPk5qB-s"},
{"content":{"body":" * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> could/should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{},"m.new_content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor due implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> could/should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor due implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710837772877,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$azp4ozMJEcSpfYfykFt7diCiarfn3SFabbuRYVSyzTU"},
{"content":{"body":" * TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor do implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> could/should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor do implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{},"m.new_content":{"body":"TabAtkins: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user) state? And a way to use that in combination with its content-visibility state to toggle making it visible?\n\nOn the face of it, it seems like what the HTML [`inert`](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of `inert` + `content-visibility: auto` could/should cause a node to be non-visible.\n\nBut the CSS doesn’t actually say that, nor do implementations do that.\n\nThe context is: I want to implement closing/opening of `details` elements using content-visibility internally but also make the contents searchable with find-in-page. The [relevant part of the current HTML spec requirements](https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6) say to use `hidden`:\n\n> The [`details`](https://html.spec.whatwg.org/#the-details-element) element's second [slot](https://dom.spec.whatwg.org/#concept-slot) is expected to have its [`style`](https://html.spec.whatwg.org/#attr-style) attribute set to `\"display: block; content-visibility: hidden;\"` when the [`details`](https://html.spec.whatwg.org/#the-details-element) element does not have an [`open`](https://html.spec.whatwg.org/#attr-details-open) attribute.\n\n…however, the relevant part of the current CSS Containment spec about `hidden` says this:\n\n> The element [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). The [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **_must not_ be accessible to user-agent features, such as find-in-page**, tab-order navigation, etc., nor be selectable or focusable.\n\n…while the relevant part about `auto` says this:\n\n> If the element is not [relevant to the user](https://drafts.csswg.org/css-contain/#relevant-to-the-user), it also [skips its contents](https://drafts.csswg.org/css-contain/#skips-its-contents). Unlike [`hidden`](https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden), the [skipped contents](https://drafts.csswg.org/css-contain/#skips-its-contents) **must still be available as normal to user-agent features such as find-in-page**, tab order navigation, etc., and must be focusable and selectable as normal.\n\nSo, to conform to the current CSS spec requirements, to allow find-in-page on closed `details` elements, it seems I actually should not use `hidden` to make them closed (despite what the HTML spec currently says), but should instead use `auto`.\n\nHowever, just using `content-visibility: auto` for closed `details` will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not [_“relevant to the user”_](https://drafts.csswg.org/css-contain/#relevant-to-the-user). And to me at least, it seems like `inert` could/should be the way to do that, and the CSS and/or HTML specs could/should say that.\n\nBut if not with `inert`, is there some other way to make a node not “relevant to the user”?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: (or any others here with insight into this area) Is there any mechanism I can use with either CSS and/or HTML attributes to programatically toggle a node’s <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a> state? And a way to use that in combination with its content-visibility state to toggle making it visible?</p>\n<p>On the face of it, it seems like what the HTML <a href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute\"><code>inert</code></a> attribute means is the same as what CSS means by “not relevant to the user” — and so, the combination of <code>inert</code> + <code>content-visibility: auto</code> could/should cause a node to be non-visible.</p>\n<p>But the CSS doesn’t actually say that, nor do implementations do that.</p>\n<p>The context is: I want to implement closing/opening of <code>details</code> elements using content-visibility internally but also make the contents searchable with find-in-page. The <a href=\"https://html.spec.whatwg.org/#the-details-and-summary-elements:the-details-element-6\">relevant part of the current HTML spec requirements</a> say to use <code>hidden</code>:</p>\n<blockquote>\n<p>The <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element's second <a href=\"https://dom.spec.whatwg.org/#concept-slot\">slot</a> is expected to have its <a href=\"https://html.spec.whatwg.org/#attr-style\"><code>style</code></a> attribute set to <code>\"display: block; content-visibility: hidden;\"</code> when the <a href=\"https://html.spec.whatwg.org/#the-details-element\"><code>details</code></a> element does not have an <a href=\"https://html.spec.whatwg.org/#attr-details-open\"><code>open</code></a> attribute.</p>\n</blockquote>\n<p>…however, the relevant part of the current CSS Containment spec about <code>hidden</code> says this:</p>\n<blockquote>\n<p>The element <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. The <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong><em>must not</em> be accessible to user-agent features, such as find-in-page</strong>, tab-order navigation, etc., nor be selectable or focusable.</p>\n</blockquote>\n<p>…while the relevant part about <code>auto</code> says this:</p>\n<blockquote>\n<p>If the element is not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\">relevant to the user</a>, it also <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skips its contents</a>. Unlike <a href=\"https://drafts.csswg.org/css-contain/#valdef-content-visibility-hidden\"><code>hidden</code></a>, the <a href=\"https://drafts.csswg.org/css-contain/#skips-its-contents\">skipped contents</a> <strong>must still be available as normal to user-agent features such as find-in-page</strong>, tab order navigation, etc., and must be focusable and selectable as normal.</p>\n</blockquote>\n<p>So, to conform to the current CSS spec requirements, to allow find-in-page on closed <code>details</code> elements, it seems I actually should not use <code>hidden</code> to make them closed (despite what the HTML spec currently says), but should instead use <code>auto</code>.</p>\n<p>However, just using <code>content-visibility: auto</code> for closed <code>details</code> will not on its own make their contents non-visible — instead it seems I need to somehow also make the contents not <a href=\"https://drafts.csswg.org/css-contain/#relevant-to-the-user\"><em>“relevant to the user”</em></a>. And to me at least, it seems like <code>inert</code> could/should be the way to do that, and the CSS and/or HTML specs could/should say that.</p>\n<p>But if not with <code>inert</code>, is there some other way to make a node not “relevant to the user”?</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afxMVVUl_y3Dso4jDkPlI5y3sFE8BxTp18Tu-XYqQdA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710837784565,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$s5O1TKkDamCPdYDcwaWUWHpvrSnazJDZmhdKbDBmnM8"},
{"content":{"body":"Or alternatively, we could change the HTML spec to not say that content-visibility should be used for `details` — but instead just that UAs must make the contents of closed `details` elements non-visible to users (using whatever internal means the UA chooses to use for that) while also requiring the contents must not be skipped contents for the purposes of find-in-page. (While also having the spec continue to state that for any closed `details` in which find-in-page locates a match, the UA must auto-expand it — by setting its `open` attribute).","format":"org.matrix.custom.html","formatted_body":"Or alternatively, we could change the HTML spec to not say that content-visibility should be used for <code>details</code> — but instead just that UAs must make the contents of closed <code>details</code> elements non-visible to users (using whatever internal means the UA chooses to use for that) while also requiring the contents must not be skipped contents for the purposes of find-in-page. (While also having the spec continue to state that for any closed <code>details</code> in which find-in-page locates a match, the UA must auto-expand it —&nbsp;by setting its <code>open</code> attribute).","m.mentions":{},"msgtype":"m.text"},"ts":1710839253686,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$8-o0bDNEEQ9zXz78WvAEAuJ7yUVKdnR-7cQkq4Z4dLU"},
{"content":{"body":"It’s starting to seem to me now that having the HTML spec say that UAs are expected to use content-visibility for closing/opening `details` may not be a great choice. It certainly doesn’t seem _necessary_ to use content-visibility for that case, because the CSS `content-visibility` state of any `details` contents is not observable by web developers anyway.","format":"org.matrix.custom.html","formatted_body":"It’s starting to seem to me now that having the HTML spec say that UAs are expected to use content-visibility for closing/opening <code>details</code> may not be a great choice. It certainly doesn’t seem <em>necessary</em> to use content-visibility for that case, because the CSS <code>content-visibility</code> state of any <code>details</code> contents is not observable by web developers anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1710839693640,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$hiwkICfcdNWIjw6yEvEyhihVTXp1CAAd7GdhlhtaKho"},
{"content":{"body":"All that said, though, I guess since it’s not exposed/observable to web developers anyway, then it seems like I could reasonably argue that implementing opening/closing of `details` with `content-visibility: hidden` _internally_ doesn’t strictly break conformance with CSS spec requirements","format":"org.matrix.custom.html","formatted_body":"All that said, though, I guess since it’s not exposed/observable to web developers anyway, then it seems like I could reasonably argue that implementing opening/closing of <code>details</code> with <code>content-visibility: hidden</code> <em>internally</em> doesn’t strictly break conformance with CSS spec requirements","m.mentions":{},"msgtype":"m.text"},"ts":1710840386982,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$yrwYUYmWI8n1TSh-o2k09NljXc9j3FBWYdUAl6PBkag"},
{"content":{"body":"sideshowbarker: hmm, what gives? https://participate.whatwg.org/agreement-status?user=sideshowbarker&repo=html&pull=9870","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: hmm, what gives? https://participate.whatwg.org/agreement-status?user=sideshowbarker&amp;repo=html&amp;pull=9870","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1710844695348,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$vWEue-CqMd8AI2KZEQnDiRzdafiivTbCa5JWR0Gm-LA"},
{"content":{"body":"zcorpan:  sigh yeah that’s because my membership in the relevant GitHub organization is private, not public","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>:  sigh yeah that’s because my membership in the relevant GitHub organization is private, not public","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1710844773384,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$3C-QfCjgTA3yGuq3qytheWPlNWl2NP6f7MVUJFH5mbo"},
{"content":{"body":"I very much don’t like the fact that the participation mechanism requires me to make my membership in that relevant GitHub public","m.mentions":{},"msgtype":"m.text"},"ts":1710844843508,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$jFtmV1d1u1c_sBCtePY5UeJzUygOU8uNT0_GiOoyA20"},
{"content":{"body":"but anyway, I can turn it back on temporarily","m.mentions":{},"msgtype":"m.text"},"ts":1710844856781,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$4Dv3eLXHjlcf4f0193I29t4tBs8GixHsqts8IFFyI1o"},
{"content":{"body":"sideshowbarker: hmm, can you create a new GH org that's just for the IPR check?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: hmm, can you create a new GH org that's just for the IPR check?","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1710844941191,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$f3BEuy5gIZYoN7qVo16MgI1BZiuuKIZssxzcbke66RU"},
{"content":{"body":"Yeah, I guess I could, but I rightly shouldn’t have to","m.mentions":{},"msgtype":"m.text"},"ts":1710844968634,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$1Dj9cgOiYZVvWLN64hp50Zw645mThK-fFXBH39ihTGM"},
{"content":{"body":"Instead, the participation mechanism should be made to work in some different way","m.mentions":{},"msgtype":"m.text"},"ts":1710844995958,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$BqQyTEpzsITCIk1kQsq68AlrKXC7aQrqrWcneOkvgGE"},
{"content":{"body":"And I don’t say that personally about my own case — but in general, for all participants, we should not be forcing them to publicly leak any organizational membership to the entire world that they might not really want to","m.mentions":{},"msgtype":"m.text"},"ts":1710845056173,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$LN-B8-PfN6hb_P6X-giTGB88rd4nKWDkduRRg1JJRzQ"},
{"content":{"body":"Myself, a while back, I made all my GitHub org memberships private — because I don’t personally have much need to make them public","m.mentions":{},"msgtype":"m.text"},"ts":1710845113712,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Qd_Jsrb6J6DIz5OROFIbOKtPQuMMKmHc5tB-O3vl2hU"},
{"content":{"body":"We should be allowing everybody to have the same choice if they want","m.mentions":{},"msgtype":"m.text"},"ts":1710845139742,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$9F5m9ox91_dNnrqMTNJPLnecf5WXNT7040XplySHlxE"},
{"content":{"body":" * We should be allowing everybody to have that same choice if they want","m.mentions":{},"m.new_content":{"body":"We should be allowing everybody to have that same choice if they want","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9F5m9ox91_dNnrqMTNJPLnecf5WXNT7040XplySHlxE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710845146388,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$J1xeOTfIIUFT-AsCCCRgNYcyhaKXNg6FTluoLX57o2Q"},
{"content":{"body":"sideshowbarker: seems like something to bring up with the sg","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: seems like something to bring up with the sg","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1710845150750,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$6RLvQm0WbBL-NOj2Sjg_ebwQ1XqgNZIZpFOe3ms3fN0"},
{"content":{"body":"In the past, I have not had much success in getting the SG to see anything my way","m.mentions":{},"msgtype":"m.text"},"ts":1710845175766,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$LyLAmWS5oOrIXT6bu6pWnspMxnsGC-enBbMQdFxIhlw"},
{"content":{"body":"I tried with the pseudonymous-contributor case, and lost","m.mentions":{},"msgtype":"m.text"},"ts":1710845205778,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$3Z_8goe0mFX-f9dNFpV3HUbrHMX3AvmFLYUPJGatUGU"},
{"content":{"body":"I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — I _think_ the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","format":"org.matrix.custom.html","formatted_body":"I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — I <em>think</em> the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","m.mentions":{},"msgtype":"m.text"},"ts":1710845352952,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$1pkNOX6mAIxbECBh1wJTYGihb-qZ2wpJEEYjrpQtxbs"},
{"content":{"body":" * I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — and I _think_ the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","format":"org.matrix.custom.html","formatted_body":" * I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — and I <em>think</em> the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","m.mentions":{},"m.new_content":{"body":"I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — and I _think_ the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","format":"org.matrix.custom.html","formatted_body":"I also tried with the case of distinguishing editorial/non-substantive/no-possible-IPR-impact changes from substantive/IPR-impacting changes — and I <em>think</em> the SG ended up deciding to make some change there, but if so, it was after such a long time that I had lost energy for paying attention","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1pkNOX6mAIxbECBh1wJTYGihb-qZ2wpJEEYjrpQtxbs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710845361948,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$v5ETWXMTli5Dh44ZOF__Qf6adBnIvOUH-R3OBKuPllk"},
{"content":{"body":"https://github.com/whatwg/sg/pull/228","m.mentions":{},"msgtype":"m.text"},"ts":1710845609155,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$D9KgR8jb_ZAutuUeljk5E-UfQ3B_DfQprgb71V8_zBs"},
{"content":{"body":"> <@sideshowbarker:matrix.org> And I don’t say that personally about my own case — but in general, for all participants, we should not be forcing them to publicly leak any organizational membership to the entire world that they might not really want to\n\nI have mixed feelings about that: on the one hand, you're right that people should be able to participate in github without their affiliations always being fully public. On the other, when someone's contributing to an open standard on behalf of their employer, it's both useful for reviewers to know that we should think of their contribution as coming from that organization, and important for the public to be able to see what organizations are influencing the standards. I wish Github had a \"public-but-not-publicized\" setting for this, where the affiliation would appear in the context of certain contributions, but wouldn't appear on the profile page.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$LN-B8-PfN6hb_P6X-giTGB88rd4nKWDkduRRg1JJRzQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">@sideshowbarker:matrix.org</a><br>And I don’t say that personally about my own case — but in general, for all participants, we should not be forcing them to publicly leak any organizational membership to the entire world that they might not really want to</blockquote></mx-reply>I have mixed feelings about that: on the one hand, you're right that people should be able to participate in github without their affiliations always being fully public. On the other, when someone's contributing to an open standard on behalf of their employer, it's both useful for reviewers to know that we should think of their contribution as coming from that organization, and important for the public to be able to see what organizations are influencing the standards. I wish Github had a \"public-but-not-publicized\" setting for this, where the affiliation would appear in the context of certain contributions, but wouldn't appear on the profile page.","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LN-B8-PfN6hb_P6X-giTGB88rd4nKWDkduRRg1JJRzQ"}},"msgtype":"m.text"},"ts":1710867961595,"senderName":"Jeffrey Yasskin","senderId":"@jyasskin:matrix.org","id":"$3W5OCn6IM9yk9S6Ftgtwx2MhOADvL5McQ9w5QzbKevA"},
{"content":{"body":"Is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost **node** on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","format":"org.matrix.custom.html","formatted_body":"Is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost <strong>node</strong> on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","m.mentions":{},"msgtype":"m.text"},"ts":1710878621548,"senderName":"Arnau","senderId":"@arnau478:matrix.org","id":"$I7Br265-3jxxxdXELpof-MI7cLYp5IhDc1vADWm8dhg"},
{"content":{"body":" * For HTML tree construction, is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost **node** on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","format":"org.matrix.custom.html","formatted_body":" * For HTML tree construction, is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost <strong>node</strong> on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","m.mentions":{},"m.new_content":{"body":"For HTML tree construction, is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost **node** on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","format":"org.matrix.custom.html","formatted_body":"For HTML tree construction, is the stack of open elements a stack of elements or nodes? By the name I would guess elements, but the definition (https://html.spec.whatwg.org/multipage/parsing.html#stack-of-open-elements) seems a bit ambiguous and says \"the topmost <strong>node</strong> on the stack is the first one added to the stack\". Plus, if the stack only has element nodes, wouldn't the current node and adjusted current node always be elements?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I7Br265-3jxxxdXELpof-MI7cLYp5IhDc1vADWm8dhg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710878681627,"senderName":"Arnau","senderId":"@arnau478:matrix.org","id":"$uL50RjMg1cSceIjC0YcMhpYm317WlAlCHsnfT1kAhqs"},
{"content":{"body":"The stack of open nodes can also be seen as the set of ancestors of the current point in the DOM into which you're currently parsing","m.mentions":{},"msgtype":"m.text"},"ts":1710878895533,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$yXCpyKAup09NfQB7B0dFoAgRmlziLv4tnvknmdBMQ_E"},
{"content":{"body":"since the stack is created empty (so there's no `Document` node in it), and the only non-Document nodes that can contain children are `Element` nodes, I think it can be safely assumed that it only contains elements","format":"org.matrix.custom.html","formatted_body":"since the stack is created empty (so there's no <code>Document</code> node in it), and the only non-Document nodes that can contain children are <code>Element</code> nodes, I think it can be safely assumed that it only contains elements","m.mentions":{},"msgtype":"m.text"},"ts":1710878951985,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Np-t6SqyF8GNla_ZFPgNwh6pW0GePg4IKJZu2jdLfUg"},
{"content":{"body":"(wait, no, `Document` also can't contain children)","format":"org.matrix.custom.html","formatted_body":"(wait, no, <code>Document</code> also can't contain children)","m.mentions":{},"msgtype":"m.text"},"ts":1710878988723,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-y5hfZR32a5wGXfHtKRRiBM1olkq2V_Yo2GCa33ZPNg"},
{"content":{"body":" * (oh, actually `Document` also can't contain children)","format":"org.matrix.custom.html","formatted_body":" * (oh, actually <code>Document</code> also can't contain children)","m.mentions":{},"m.new_content":{"body":"(oh, actually `Document` also can't contain children)","format":"org.matrix.custom.html","formatted_body":"(oh, actually <code>Document</code> also can't contain children)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-y5hfZR32a5wGXfHtKRRiBM1olkq2V_Yo2GCa33ZPNg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710879000723,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$jOcBhXpWmrD3Q93qnv7BTIReX5YA7NjoG6d0e0ZMiMM"},
{"content":{"body":"Oh, I get it","m.mentions":{},"msgtype":"m.text"},"ts":1710879908948,"senderName":"Arnau","senderId":"@arnau478:matrix.org","id":"$SQmM_27scTkM1UypTup5U4YF3H4MRYBzxy8YZNABSCw"},
{"content":{"body":"So I can make it a stack of element nodes, right?","m.mentions":{},"msgtype":"m.text"},"ts":1710879946302,"senderName":"Arnau","senderId":"@arnau478:matrix.org","id":"$UPl56LBTULmNJ1WixXPU6hIEgwUWkz1VKm983_B3GQI"},
{"content":{"body":"TabAtkins Florian Rivoal: should `contain-intrinsic-size` alter `Image.naturalWidth/Height` ? https://codepen.io/eeeps/pen/RwOKmJL?editors=1111","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> <a href=\"https://matrix.to/#/@florian:rivoal.net\">Florian Rivoal</a>: should <code>contain-intrinsic-size</code> alter <code>Image.naturalWidth/Height</code> ? https://codepen.io/eeeps/pen/RwOKmJL?editors=1111","m.mentions":{"user_ids":["@tabatkins:matrix.org","@florian:rivoal.net"]},"msgtype":"m.text"},"ts":1710892512962,"senderName":"Eric Portis (he/him)","senderId":"@etportis:matrix.org","id":"$WrFRxk0sOcNihIZifFljkgSWFW253zh7Lybsnk5-R9o"}
]