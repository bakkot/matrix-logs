[
{"content":{"body":"foolip: Yet another area which is causing webcompat issues for Firefox because of wrong chrome behavior assumed good. https://bugs.chromium.org/p/chromium/issues/detail?id=1141209\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1400958\n\nhttps://bugs.webkit.org/show_bug.cgi?id=233956","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Yet another area which is causing webcompat issues for Firefox because of wrong chrome behavior assumed good. https://bugs.chromium.org/p/chromium/issues/detail?id=1141209</p>\n<p>https://bugzilla.mozilla.org/show_bug.cgi?id=1400958</p>\n<p>https://bugs.webkit.org/show_bug.cgi?id=233956</p>\n","msgtype":"m.text"},"ts":1638923320359,"senderName":"karlcow","senderId":"@karlcow:mozilla.org","id":"$CQBVFu9PcBYv3VSSMQLQUatz2VcZl-y_nvRaUdq2QMg"},
{"content":{"body":"good work here from krosylight about events across browsers https://bugzilla.mozilla.org/show_bug.cgi?id=1653882#c14","format":"org.matrix.custom.html","formatted_body":"good work here from <a href=\"https://matrix.to/#/@krosylight:mozilla.org\">krosylight</a> about events across browsers https://bugzilla.mozilla.org/show_bug.cgi?id=1653882#c14","msgtype":"m.text"},"ts":1638928094831,"senderName":"karlcow","senderId":"@karlcow:mozilla.org","id":"$HMb2oxCtysYMUgB6ZLaqiS7eQkFg0XBtFANttGELZDA"},
{"content":{"body":"kaleidea: from a quick skim those seem to cover the topic, yes; I forgot I blogged about this stuff","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kaleidea:matrix.org\">kaleidea</a>: from a quick skim those seem to cover the topic, yes; I forgot I blogged about this stuff","msgtype":"m.text"},"ts":1638949454696,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$7SoqEqlBK_GGjqjG_5y5Hbxd5CV7H7_TOFqCRDggf8Q"},
{"content":{"body":"annevk: Thank you. Nice blog, btw. Quite interesting articles, too.\n\nThere are a few questions in relation if you have the time:\n> custom elements has the is=\"\" hack (which in retrospect I wish we never shipped)\n\nAlthough not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?\n> WICG/webcomponents is prolly a better starting point\n\nThe 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96\nmentioned \"various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers\", but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Thank you. Nice blog, btw. Quite interesting articles, too.</p>\n<p>There are a few questions in relation if you have the time:</p>\n<blockquote>\n<p>custom elements has the is=&quot;&quot; hack (which in retrospect I wish we never shipped)</p>\n</blockquote>\n<p>Although not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?</p>\n<blockquote>\n<p>WICG/webcomponents is prolly a better starting point</p>\n</blockquote>\n<p>The 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96<br>mentioned &quot;various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers&quot;, but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?</p>\n","msgtype":"m.text"},"ts":1638951615232,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$1laghnNDmvWaGs8P2Oz5n61t4CFwLAPgwLERBeMzWLA"},
{"content":{"body":" * annevk: Thank you. Nice blog, btw. Quite interesting articles, too.\n\nThere are a few questions in relation if you have the time:\n> custom elements has the is=\"\" hack (which in retrospect I wish we never shipped)\n\nAlthough not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?\n> WICG/webcomponents is prolly a better starting point\n\nThe 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96\nmentioned \"various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers\", but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Thank you. Nice blog, btw. Quite interesting articles, too.</p>\n<p>There are a few questions in relation if you have the time:</p>\n<blockquote>\n<p>custom elements has the is=&quot;&quot; hack (which in retrospect I wish we never shipped)</p>\n</blockquote>\n<p>Although not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?</p>\n<blockquote>\n<p>WICG/webcomponents is prolly a better starting point</p>\n</blockquote>\n<p>The 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96<br>mentioned &quot;various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers&quot;, but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?</p>\n","m.new_content":{"body":"annevk: Thank you. Nice blog, btw. Quite interesting articles, too.\n\nThere are a few questions in relation if you have the time:\n> custom elements has the is=\"\" hack (which in retrospect I wish we never shipped)\n\nAlthough not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?\n> WICG/webcomponents is prolly a better starting point\n\nThe 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96\nmentioned \"various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers\", but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Thank you. Nice blog, btw. Quite interesting articles, too.</p>\n<p>There are a few questions in relation if you have the time:</p>\n<blockquote>\n<p>custom elements has the is=&quot;&quot; hack (which in retrospect I wish we never shipped)</p>\n</blockquote>\n<p>Although not related to the current topic, one day I'd be interested what other solution you prefer now: removal / other?</p>\n<blockquote>\n<p>WICG/webcomponents is prolly a better starting point</p>\n</blockquote>\n<p>The 4 discussions listed at  https://gist.github.com/Kaleidea/49055f021e7da814c233846a95115f96<br>mentioned &quot;various tools which key on local name, including JavaScript frameworks, HTML preprocessors and postprocessors, HTML conformance checkers&quot;, but did not refer to a research document that lists specific code examples or scenarios that would be affected. Is that research summarized somewhere?</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$1laghnNDmvWaGs8P2Oz5n61t4CFwLAPgwLERBeMzWLA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638951791119,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$H07IefyALb-OoEUBml-guldz5Pt5eCGw0Wpy60gWIjk"},
{"content":{"body":"kaleidea: it might be too late for removal, though Safari notably does not ship it; I think that would be better.\n\nI don't think there's research, those were known facts by the participants who work on such code.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kaleidea:matrix.org\">kaleidea</a>: it might be too late for removal, though Safari notably does not ship it; I think that would be better.</p>\n<p>I don't think there's research, those were known facts by the participants who work on such code.</p>\n","msgtype":"m.text"},"ts":1638952230658,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$iwwkZhHiCS65--YqmEVW0j2oC1jdAXQIeTsTCFKTiCw"},
{"content":{"body":"Just to be clear: removal without an alternative?","msgtype":"m.text"},"ts":1638952388047,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$KeJCuc4Bu2_lfy0pEnG_67KDjDcARJSFG0oTdT1-gT8"},
{"content":{"body":"kaleidea: yeah, we could probably support inheritance with a lot of work by moving things to use instance checks, change Selectors around, etc. but it's not clear to me that inheritance is really that great of a programming pattern to go through all that effort for","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kaleidea:matrix.org\">kaleidea</a>: yeah, we could probably support inheritance with a lot of work by moving things to use instance checks, change Selectors around, etc. but it's not clear to me that inheritance is really that great of a programming pattern to go through all that effort for","msgtype":"m.text"},"ts":1638952717681,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$NvZT5y1Y7BeXRPCq7Cx-pu-TUUUy8JT560Qh7nYomms"},
{"content":{"body":"I think the strides we're making with composition-like semantics (see form-associated custom elements for instance) show a lot more promise","msgtype":"m.text"},"ts":1638952775017,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$QAU4zlu8gUTqq2z4t_7TeDn6GlCeuEOapIH5rgw2p94"},
{"content":{"body":"> moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","msgtype":"m.text"},"ts":1638953236263,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$vem3GDl198PXw7YxUFVLfK25EaOzCYGre7z3-0ZFh68"},
{"content":{"body":" * > moving things to use instance checks\n> I'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n> That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>moving things to use instance checks<br>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code><br>composition-like semantics (see form-associated custom elements<br>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n</blockquote>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","m.new_content":{"body":"> moving things to use instance checks\n> I'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n> That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>moving things to use instance checks<br>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code><br>composition-like semantics (see form-associated custom elements<br>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n</blockquote>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$vem3GDl198PXw7YxUFVLfK25EaOzCYGre7z3-0ZFh68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638953303156,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$AYD0i9wn0XssfLu6eMHrMhuSges6z_q7koVqAPJBkkM"},
{"content":{"body":" * > moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","m.new_content":{"body":"> moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$vem3GDl198PXw7YxUFVLfK25EaOzCYGre7z3-0ZFh68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638953314119,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$dNLGaH2LZaE1miBp2epjvFuVd1cektrdqk-Ahrl32vo"},
{"content":{"body":" * > moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","m.new_content":{"body":"> moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me it there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$vem3GDl198PXw7YxUFVLfK25EaOzCYGre7z3-0ZFh68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638953336609,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$zl-zLshsfeMRz8_VGADl30GyUTLyXM5ST0aVhFPo4G0"},
{"content":{"body":" * > moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","m.new_content":{"body":"> moving things to use instance checks\n\nI'd imagine that would more likely look like `element.builtinTagName === 'button'`. Selectors are a longer story though, for ex. `@button`, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as `my-button { @apply button; }`\n> composition-like semantics (see form-associated custom elements\n\nThat's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.\n\nJust a few thoughts. I'm going to return to the original topic.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>moving things to use instance checks</p>\n</blockquote>\n<p>I'd imagine that would more likely look like <code>element.builtinTagName === 'button'</code>. Selectors are a longer story though, for ex. <code>@button</code>, but choosing the spec. char would be difficult. Maybe that wouldn't be necessary if style inheritance would be as easy as <code>my-button { @apply button; }</code></p>\n<blockquote>\n<p>composition-like semantics (see form-associated custom elements</p>\n</blockquote>\n<p>That's one specific case. It seems to me there's a lot of work to do to make that into a general composition pattern.</p>\n<p>Just a few thoughts. I'm going to return to the original topic.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$vem3GDl198PXw7YxUFVLfK25EaOzCYGre7z3-0ZFh68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638953355950,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$CYDKPkOfJb1dx7j6pBwI98JiEgmjQATSOUabh1ckqYk"},
{"content":{"body":"annevk: Back to your point:\n> FWIW, the fundamental problem with inheritance for HTML elements is that engine logic is based on local name\n\nYes and no. The entry point of the basic logic is virtual functions such as ParseAttribute() and HandleLocalEvents(), which is based on the vftable, independent of local name. Parsing and cross-cutting logic is dependent on tagName, but some of that uses `IsA<>` type-checking (which is trivial to implement with a more reliable form of type identification).\n\nBtw, did you mean to refer to RTTI being disabled in Blink and substituted with tagName checking?\n\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Back to your point:</p>\n<blockquote>\n<p>FWIW, the fundamental problem with inheritance for HTML elements is that engine logic is based on local name</p>\n</blockquote>\n<p>Yes and no. The entry point of the basic logic is virtual functions such as ParseAttribute() and HandleLocalEvents(), which is based on the vftable, independent of local name. Parsing and cross-cutting logic is dependent on tagName, but some of that uses <code>IsA&lt;&gt;</code> type-checking (which is trivial to implement with a more reliable form of type identification).</p>\n<p>Btw, did you mean to refer to RTTI being disabled in Blink and substituted with tagName checking?</p>\n","msgtype":"m.text"},"ts":1638953852126,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$VPrsQ3xfoFGP4qmSzp89Zq9a8IHhmkk8Ug14PjQIauk"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1638954708979,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$leL9OhMwVgEfMeuGeTqj4MxWbNWyQBD8Uw-u66ImoG0"},
{"content":{"body":"Implementing the search element requires only 10 tagName comparisons (3 of which are type checks), 5 more than without form.\n3 comparisons are in the parser, pre-instantiation, that must be tagName check. 2 is to differentiate with form, must be tagName. The remaining 5 can be type checks (dynamic_cast).\nThat's the extent of the impact the search element has on the browser. How does that affect your views?\n","msgtype":"m.text"},"ts":1638955693939,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$x-k8JOdUWunRfePa_NMPsaHVn4FdklBxnS2VF9LCLuU"},
{"content":{"body":"I think you're underestimating the effort required.","msgtype":"m.text"},"ts":1638955940900,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$0PPxc_1FlWTZwpgJ05AWyR_z2d80CNGM2NmJ1HCSwaM"},
{"content":{"body":"Did you know that I've already implemented it?\n","msgtype":"m.text"},"ts":1638955977885,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$Ckd5mxHIy3u9sfnQb7BCi5ZxEh7jBQPZS50I6bVXSlo"},
{"content":{"body":"I got that impression, but I strongly suspect there will be things that are broken. Anyway, it's also not clear to me this is the best design. Overloading functionality and having multiple elements to do the same thing has created problems in the past.","msgtype":"m.text"},"ts":1638956138389,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$lPVysn6B3Ixs1S7nxG7Oulqw_SS0w2kpA5pORyVGnm4"},
{"content":{"body":"annevk: I've shared it probably 5-10 times. If you find any test vectors that are broken that would help my work.\n","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: I've shared it probably 5-10 times. If you find any test vectors that are broken that would help my work.","msgtype":"m.text"},"ts":1638956317562,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$VsKiG5cN4153tCV3hOyZVMP-GNhdpotWVDO8h3Cta3M"},
{"content":{"body":"> <@karlcow:mozilla.org> good work here from krosylight about events across browsers https://bugzilla.mozilla.org/show_bug.cgi?id=1653882#c14\n\nThis seems like really good research, and the sort of thing we've been solving in the HTML Standard triage meetings. A spec issue with research + proposal for best behavior that is sensible but also likely web-compatible + list of deltas between current behavior and that proposal would be a great next step IMO.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$HMb2oxCtysYMUgB6ZLaqiS7eQkFg0XBtFANttGELZDA?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@karlcow:mozilla.org\">@karlcow:mozilla.org</a><br>good work here from <a href=\"https://matrix.to/#/@krosylight:mozilla.org\">krosylight</a> about events across browsers https://bugzilla.mozilla.org/show_bug.cgi?id=1653882#c14</blockquote></mx-reply>This seems like really good research, and the sort of thing we've been solving in the HTML Standard triage meetings. A spec issue with research + proposal for best behavior that is sensible but also likely web-compatible + list of deltas between current behavior and that proposal would be a great next step IMO.","m.relates_to":{"m.in_reply_to":{"event_id":"$HMb2oxCtysYMUgB6ZLaqiS7eQkFg0XBtFANttGELZDA"}},"msgtype":"m.text"},"ts":1638956358567,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$tm0BnU49vGS1Zq-CP5Sfx7Wi_lyx_yrn76sQrMRsdik"},
{"content":{"body":"> not clear to me this is the best design\n\nWell, there's no competitor aiming to be a better design. This OTOH matches developer expectations.\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>not clear to me this is the best design</p>\n</blockquote>\n<p>Well, there's no competitor aiming to be a better design. This OTOH matches developer expectations.</p>\n","msgtype":"m.text"},"ts":1638956686137,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$7V8nBrn4Ry8Yf4UU4UIZuEgum6aCAKM1KHRvIWsun2Y"},
{"content":{"body":" * annevk: I've shared it probably 5-10 times. Assumptions aren't useful. If you find any test vectors that are broken that would help my work. Good solutions are built on facts and testing.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: I've shared it probably 5-10 times. Assumptions aren't useful. If you find any test vectors that are broken that would help my work. Good solutions are built on facts and testing.","m.new_content":{"body":"annevk: I've shared it probably 5-10 times. Assumptions aren't useful. If you find any test vectors that are broken that would help my work. Good solutions are built on facts and testing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: I've shared it probably 5-10 times. Assumptions aren't useful. If you find any test vectors that are broken that would help my work. Good solutions are built on facts and testing.","msgtype":"m.text"},"m.relates_to":{"event_id":"$VsKiG5cN4153tCV3hOyZVMP-GNhdpotWVDO8h3Cta3M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638999514928,"senderName":"kaleidea","senderId":"@kaleidea:matrix.org","id":"$aGXXybyyAIVamHiBKFMI1iMOrFyWLD3duuwj7S5RoVc"}
]