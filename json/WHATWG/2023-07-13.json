[
{"content":{"body":"sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.","msgtype":"m.text"},"ts":1689207188088,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7TamMymxdpiQrPhVok5KumvSpQhp53mVHe_ROIxkxQY"},
{"content":{"body":"(Bikeshed is pulling down some 404 pages for mdn data right now.)","msgtype":"m.text"},"ts":1689207204604,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CdFz770DZJC-Ww9S4L6wQYNMLwpnej-Wndfk-mhDxkg"},
{"content":{"body":"> <@tabatkins:matrix.org> sideshowbarker: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.\n\nNot moved. The html-now SPECMAP.json is a copy. But spec-links is just borked at the moment, for some reason. I’ll look into right now and fix it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$7TamMymxdpiQrPhVok5KumvSpQhp53mVHe_ROIxkxQY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: It looks like the MDN-spec-links project moved to html-now? But the SPECMAP.json file is still present at the old location, and apparently out of date.</blockquote></mx-reply>Not moved. The html-now SPECMAP.json is a copy. But spec-links is just borked at the moment, for some reason. I’ll look into right now and fix it.","m.relates_to":{"m.in_reply_to":{"event_id":"$7TamMymxdpiQrPhVok5KumvSpQhp53mVHe_ROIxkxQY"}},"msgtype":"m.text"},"ts":1689210772335,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$DYzs_WK6W3pS065Ce_60KLUR_MNsL8QzBswknEI5zxU"},
{"content":{"body":"Kk. I should respond to 404s better too ","msgtype":"m.text"},"ts":1689210870240,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BspeBAVZCfYsbQ8LxScagzTOecIL0GV_lDQ9p4_GVA0"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1689210884844,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$J_iZFDbunibEp0oNF1BZoJwC4UJyB-QJn9yhXQWic88"},
{"content":{"body":"can you give me one that you are getting a 404 on right now?","msgtype":"m.text"},"ts":1689210914530,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$vLuDLH1vJepG8JQRsmeGB2zRVWFcGO9-Y2gkouZVJOE"},
{"content":{"body":"ah nevermind","msgtype":"m.text"},"ts":1689210954628,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$jUXdM9418Jla5ujOm-7FzJVwfuBFyt0o7uIFGhgCRAw"},
{"content":{"body":"I see now","msgtype":"m.text"},"ts":1689210959396,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$bDWKt1pRG8ikPgaNXQ6bt2fwRhLsBV6BfQApZoyzk-g"},
{"content":{"body":"lord, what did I do","msgtype":"m.text"},"ts":1689210968161,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$qBgrpxdTRURIV96rXCfntvyHV6vn__qKBgxv1v9s9Hw"},
{"content":{"body":"w3c.github.io/mdn-spec-links is just entirely redirecting to https://html-now.github.io/","msgtype":"m.text"},"ts":1689211027864,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$yLrLMSq84G4QE3gWFOfjJTldpt12-ubvVorhcZVSUfA"},
{"content":{"body":"that’s completely unintentional and I don’t yet have any idea how I caused that, nor when (how long ago)","msgtype":"m.text"},"ts":1689211061976,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$TE9g_Eh8LOxwglhtRQ7TRlA9Qwpx8F9UlmP4ZbNQ5To"},
{"content":{"body":"…and unfortunately, used a 301 rather than a 302","msgtype":"m.text"},"ts":1689211396243,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fmhyMgNxprDu7OjYTO4e-dYejRKXn6j0ko4UyXpbt0c"},
{"content":{"body":"TabAtkins: should be un-borked now — at least from non-browser requests without some network cache in between","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: should be un-borked now —&nbsp;at least from non-browser requests without some network cache in between","msgtype":"m.text"},"ts":1689211630523,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$vjKbrLTHQWuc37-5kYQX6S_4hwh_JUrInCpXSV7ku9E"},
{"content":{"body":"for browsers, may need to do some fiddling in devtools","msgtype":"m.text"},"ts":1689211656434,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$8sxNIW-327SiD5anlXZvvW5k-ZGuezsKGnet0wrc-w4"},
{"content":{"body":"The web platform and JS are inconsistent wrt each other in the handling of `undefined` & missing arguments to functions. (When I speak of \"missing arguments\", I mean only for cases where an argument is required, and is not typed to accept `undefined`.)\n\nHistorically in JS, missing arguments are treated the same way as explicit `undefined`: coerce the value `undefined` to the relevant argument type. So for example `escape()` returns the string `\"undefined\"`.\n\nIn the web platform, missing arguments are an error, in contrast to JS. Like in JS, an explicit `undefined` is coerced to the relevant argument type, so it is handled differently from missing arguments.\n\nTC39 just came to consensus that we'd like to be stricter here, for new APIs. In fact we'd like to be stricter even than the web platform currently is - we'll adopt the \"missing arguments are an error\" thing from the web platform, but in addition we'll start treating explicit `undefined` as an error.\n\nI'm hoping the web platform can make the same change: treat missing arguments and explicit `undefined` consistently with each other, as an error. Obviously this is not a trivial change.\n\nAssuming people are open to this, what's the best way to go about making such a change? I was thinking a new [LegacyCoerceUndefined] Web IDL attribute, which would be attached to ~every existing API specified with Web IDL, and then change the default definition for argument handling without that attribute so that explicit `undefined` throws. Does that sound reasonable?","format":"org.matrix.custom.html","formatted_body":"<p>The web platform and JS are inconsistent wrt each other in the handling of <code>undefined</code> &amp; missing arguments to functions. (When I speak of \"missing arguments\", I mean only for cases where an argument is required, and is not typed to accept <code>undefined</code>.)</p>\n<p>Historically in JS, missing arguments are treated the same way as explicit <code>undefined</code>: coerce the value <code>undefined</code> to the relevant argument type. So for example <code>escape()</code> returns the string <code>\"undefined\"</code>.</p>\n<p>In the web platform, missing arguments are an error, in contrast to JS. Like in JS, an explicit <code>undefined</code> is coerced to the relevant argument type, so it is handled differently from missing arguments.</p>\n<p>TC39 just came to consensus that we'd like to be stricter here, for new APIs. In fact we'd like to be stricter even than the web platform currently is - we'll adopt the \"missing arguments are an error\" thing from the web platform, but in addition we'll start treating explicit <code>undefined</code> as an error.</p>\n<p>I'm hoping the web platform can make the same change: treat missing arguments and explicit <code>undefined</code> consistently with each other, as an error. Obviously this is not a trivial change.</p>\n<p>Assuming people are open to this, what's the best way to go about making such a change? I was thinking a new [LegacyCoerceUndefined] Web IDL attribute, which would be attached to ~every existing API specified with Web IDL, and then change the default definition for argument handling without that attribute so that explicit <code>undefined</code> throws. Does that sound reasonable?</p>\n","msgtype":"m.text"},"ts":1689278469814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3pn67tf8jk4UDe8h4bd3P7WR3CjDZV7st8dl75lB74w"},
{"content":{"body":"cc Domenic since we were talking about this over in the tc39 channel","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> since we were talking about this over in the tc39 channel","msgtype":"m.text"},"ts":1689278511211,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$99NQOYUypwXixHj8uCJfH4m3l3nyjQW8XH4EoVMaz2c"},
{"content":{"body":"bakkot: in principle I think that could work, modulo the amount of work; but presumably it only applies to a subset of arguments, strings and nullables?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: in principle I think that could work, modulo the amount of work; but presumably it only applies to a subset of arguments, strings and nullables?","msgtype":"m.text"},"ts":1689282676050,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$GD8nN_-crX_lBB7EieXsScBlZPf09qb_GHYsWuzWYBo"},
{"content":{"body":"we don't want to coerce `undefined` to 0 either? and for nullables accepting `undefined` is fine","format":"org.matrix.custom.html","formatted_body":"we don't want to coerce <code>undefined</code> to 0 either? and for nullables accepting <code>undefined</code> is fine","msgtype":"m.text"},"ts":1689282729869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PyCDkpd3vF4v8tcE76b84jJp5YT4uaGsj9CYtQf2HIQ"},
{"content":{"body":"for booleans the default value is generally `false` so coercing is fine, as long as you can also just omit the argument and get `false`","format":"org.matrix.custom.html","formatted_body":"for booleans the default value is generally <code>false</code> so coercing is fine, as long as you can also just omit the argument and get <code>false</code>","msgtype":"m.text"},"ts":1689282758217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IBX8PSFe1_h5_4XIwnDcZBzX9WgFbLiZRFR4csrssl4"},
{"content":{"body":"you can't coerce `undefined` to object types, of course. I think that covers everything?","format":"org.matrix.custom.html","formatted_body":"you can't coerce <code>undefined</code> to object types, of course. I think that covers everything?","msgtype":"m.text"},"ts":1689282777278,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZDl8pqGxpwosLDQPQWd8X49jC-BS-NAUcEfUaagy5eI"},
{"content":{"body":"that is, when passing an explicit `undefined`:\n- any object type: already an error\n- nullable: legal because that's what \"nullable\" means\n- boolean: presumably intended to default to `false`; should continue to do so\n- string: should become error\n- number: should become error\n","format":"org.matrix.custom.html","formatted_body":"<p>that is, when passing an explicit <code>undefined</code>:</p>\n<ul>\n<li>any object type: already an error</li>\n<li>nullable: legal because that's what &quot;nullable&quot; means</li>\n<li>boolean: presumably intended to default to <code>false</code>; should continue to do so</li>\n<li>string: should become error</li>\n<li>number: should become error</li>\n</ul>\n","msgtype":"m.text"},"ts":1689282852057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fV9M3Np3JW8AXM39_UBZhrN7IZudjogaT--SejaZ16M"},
{"content":{"body":" * that is, when passing an explicit `undefined`:\n\n- any object type: already an error\n- nullable: legal because that's what \"nullable\" means\n- boolean: presumably intended to default to `false`; should continue to do so\n- string: should become error\n- number: should become error (unless 0 is intended to be the default, as it often is)","format":"org.matrix.custom.html","formatted_body":" * <p>that is, when passing an explicit <code>undefined</code>:</p>\n<ul>\n<li>any object type: already an error</li>\n<li>nullable: legal because that's what &quot;nullable&quot; means</li>\n<li>boolean: presumably intended to default to <code>false</code>; should continue to do so</li>\n<li>string: should become error</li>\n<li>number: should become error (unless 0 is intended to be the default, as it often is)</li>\n</ul>\n","m.new_content":{"body":"that is, when passing an explicit `undefined`:\n\n- any object type: already an error\n- nullable: legal because that's what \"nullable\" means\n- boolean: presumably intended to default to `false`; should continue to do so\n- string: should become error\n- number: should become error (unless 0 is intended to be the default, as it often is)","format":"org.matrix.custom.html","formatted_body":"<p>that is, when passing an explicit <code>undefined</code>:</p>\n<ul>\n<li>any object type: already an error</li>\n<li>nullable: legal because that's what &quot;nullable&quot; means</li>\n<li>boolean: presumably intended to default to <code>false</code>; should continue to do so</li>\n<li>string: should become error</li>\n<li>number: should become error (unless 0 is intended to be the default, as it often is)</li>\n</ul>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$fV9M3Np3JW8AXM39_UBZhrN7IZudjogaT--SejaZ16M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689282871695,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-0A78pOKXl3CnBfyjz4WE0WEHNxz4P-bHHYIyceKv-Q"}
]