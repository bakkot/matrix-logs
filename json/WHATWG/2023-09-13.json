[
{"content":{"body":"I'm looking into StructuredSerializeInternal for Ladybird, and steps 22 and 23 are tripping me up. From looking into blink, it seems like they defer to v8 for the serialization steps, in v8::ValueSerializer. And v8 seems to encode all the data about whether an object (a \"receiver\") is a well known ES object or ES prototype in a tag field. But LibJS doesn't do that, we just have a bunch of classical c++ inheritance. Like there's no \"IsExotic()\" function I can call. \n\nDo all the other engines do this type of tagging of JS objects so that those two catch-all steps are trivial and/or fall out of handling the known object types?","msgtype":"m.text"},"ts":1694630627968,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$fQgmLf_JjgUrPwNAAng7bsbBvWIKg3ecahA7bytE2gA"},
{"content":{"body":"There's certainly no ECMAScript abstract operation I can call to say \"is this a plain old object\" (I think?)","msgtype":"m.text"},"ts":1694630742432,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$0VUZyehYYlKsLQJHuJfUML1SoSfsu4LA7QIHdS4giIQ"},
{"content":{"body":"the prose \"is an ordinary object\" is how 262 does it.","msgtype":"m.text"},"ts":1694631939319,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y0cgDslGyzbpNtcHDatWiZM7tOGJ_u2a5-FFtgkDSlA"},
{"content":{"body":" * the prose \"is an ordinary object\" is how 262 does it (in a condition, or assertion, or parameter/return type)","m.new_content":{"body":"the prose \"is an ordinary object\" is how 262 does it (in a condition, or assertion, or parameter/return type)","msgtype":"m.text"},"m.relates_to":{"event_id":"$Y0cgDslGyzbpNtcHDatWiZM7tOGJ_u2a5-FFtgkDSlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694631974792,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EToVXKy2I1YRNdPrPXFuBWXX4yfUilKMgjzP_dDbdeQ"},
{"content":{"body":"Aha, there's like 40 or so objects in the spec that say \"such and such object: - is an ordinary object\"","msgtype":"m.text"},"ts":1694632240901,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$45DqfVepssQDPrHsDuEkbX0vYTfOaVoaZaQYq91HEyM"},
{"content":{"body":"But I can't clone all of those. Like, no promise, no weakmap, no Finalization registry, no Arguments, ...","msgtype":"m.text"},"ts":1694632426857,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$_0MosOeZbTIl3RmFQAZVGxOkOgudWz_7mB4CSCzLBJw"},
{"content":{"body":"Oh lovely. If I create a new RegExp(\".\", \"\") and try to structuredClone its __proto__ property, Firefox says \"can't clone RegExp.prototype\", and Chromium says \"here's your object\"","msgtype":"m.text"},"ts":1694632893418,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$9d3X7CpxVXYQwA475fHj9NpvPeoZ2Nunol-LVC06Ivw"},
{"content":{"body":"Safari refuses to clone it too ","msgtype":"m.text"},"ts":1694633051578,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$gk98_fFDgl6i1i4lMTQyYrovTU5rkWprrWjKSgRN8Rs"}
]