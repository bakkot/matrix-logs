[
{"content":{"body":"I don't have a lot of hope that doing so would result in new resources magically being discovered.","m.mentions":{},"m.relates_to":{"event_id":"$qiqhgdiEoW1HpN4UR9DLkB1ghoZO1O293ctXRioA-AA","is_falling_back":true,"m.in_reply_to":{"event_id":"$yD_Svx-FcqOL7uLJ6uZpGDbGRy4Yrye5Q_vZbwJZ3AM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1741052339156,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$O7rme6_6_hxuAa77ir_W49gK1Zbs-b-a992WXHW2qm0"},
{"content":{"body":"For those who are unfamiliar, NativeScript has added a spec-compliant URLPattern implementation to both of their iOS and Android runtimes - https://github.com/NativeScript/ios/pull/268","m.mentions":{},"msgtype":"m.text"},"ts":1741054954181,"senderName":"Yagiz Nizipli","senderId":"@yagiznizipli:matrix.org","id":"$oZOnniZS_77688-qun00vA1V-bze6gGELwcbcatVlPA"},
{"content":{"body":"Domenic: could I ask you to get someone familiar with URLPattern to comment on https://github.com/w3c/IFT/issues/259? Perhaps the URLPattern specification should have some examples as how to address URI template use cases?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: could I ask you to get someone familiar with URLPattern to comment on https://github.com/w3c/IFT/issues/259? Perhaps the URLPattern specification should have some examples as how to address URI template use cases?","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1741073698795,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$F8gX7BGGJH3lNX72FkgV5oS5Kta59639jkMkcEy5cAg"},
{"content":{"body":"I’m looking at the test case at https://github.com/web-platform-tests/wpt/blob/3c11c5bae7639991e1a300ad841dd53f571eecf3/html/semantics/forms/constraints/form-validation-checkValidity.html#L96 and trying to determine figure out how the expectation of false aligns with the actual spec requirements.\n\nThat test case just creates this:\n\n```html\n<input type=time value=\"12:03:00\" step=\"2 * 60 * 1000\">\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I’m looking at the test case at https://github.com/web-platform-tests/wpt/blob/3c11c5bae7639991e1a300ad841dd53f571eecf3/html/semantics/forms/constraints/form-validation-checkValidity.html#L96 and trying to determine figure out how the expectation of false aligns with the actual spec requirements.</p>\n<p>That test case just creates this:</p>\n<pre><code class=\"language-html\">&lt;input type=time value=\"12:03:00\" step=\"2 * 60 * 1000\"&gt;\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1741074114646,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$dp62M6qkOvqV0M95eRbxg8umbOd5FmMz89jf9cM-ufA"},
{"content":{"body":"So I guess the intent of that test case is, the value shouldn’t be allowed to have a `:00` seconds part.","format":"org.matrix.custom.html","formatted_body":"So I guess the intent of that test case is, the value shouldn’t be allowed to have a <code>:00</code> seconds part.","m.mentions":{},"msgtype":"m.text"},"ts":1741074152325,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$tzHAXkIrVzmWykGXGY1kJMbHqv0qyjhEoifrL4evP78"},
{"content":{"body":"But determining whether it’s allowed or not involves running the algorithm at https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero — the second step of which is:\n> If the element has a value content attribute, and the result of applying the algorithm to convert a string to a number to the value of the value content attribute is not an error, then return that result.","format":"org.matrix.custom.html","formatted_body":"<p>But determining whether it’s allowed or not involves running the algorithm at https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero —&nbsp;the second step of which is:</p>\n<blockquote>\n<p>If the element has a value content attribute, and the result of applying the algorithm to convert a string to a number to the value of the value content attribute is not an error, then return that result.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1741074239016,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$6OzWdYVDVhnMr3TeoB16M8DxfDQACOU_DVESFd3oxeA"},
{"content":{"body":"So the ”step base” is the same as the value.","m.mentions":{},"msgtype":"m.text"},"ts":1741074280444,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$jPGsazx_GMKGGw6DcCkZCiVWCaVk-PgNn00glOCdfJI"},
{"content":{"body":"So then I look at https://html.spec.whatwg.org/multipage/input.html#the-step-attribute%3Asuffering-from-a-step-mismatch, and that says:\n> When the element has an allowed value step, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and that number subtracted from the step base is not an integral multiple of the allowed value step, the element is suffering from a step mismatch\n","format":"org.matrix.custom.html","formatted_body":"<p>So then I look at https://html.spec.whatwg.org/multipage/input.html#the-step-attribute%3Asuffering-from-a-step-mismatch, and that says:</p>\n<blockquote>\n<p>When the element has an allowed value step, and the result of applying the algorithm to convert a string to a number to the string given by the element's value is a number, and that number subtracted from the step base is not an integral multiple of the allowed value step, the element is suffering from a step mismatch</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1741074363332,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$nyUVZU0SoX0Oc9B1AeTVplQ4eXKbhy5C3Kqo4ux3M34"},
{"content":{"body":"“step base” - value = 0 (since “step base” is the same as the value)","m.mentions":{},"msgtype":"m.text"},"ts":1741074529506,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$VeSA34-CturMcQ07C9nXkjJAYzqgR551qaMC2g0MD7I"},
{"content":{"body":"…and “allowed value step” is 2 * 60 * 1000","m.mentions":{},"msgtype":"m.text"},"ts":1741074587588,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$sdgV6VANJibzRu3mgcPJagVwqXNXKp2h9EiDMyrxwhU"},
{"content":{"body":"I’m wondering if the intended requirement is instead to just use the value as-is — that is, not subtract it from “step base”","m.mentions":{},"msgtype":"m.text"},"ts":1741075395010,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$APjioQIez3_Fh5eUvrCkAOW2rSGO5EKnE7gQG_4bNS4"},
{"content":{"body":"So, 12:03:00 is the number 43380000 — and 43380000 is not an integral multiple of 120000 (2 * 60 * 1000)","m.mentions":{},"msgtype":"m.text"},"ts":1741075467110,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$-R1DVRnPkLlon9ZU57QRMt2NrVDVckwJO-IRO7XU1Dc"},
{"content":{"body":"Or maybe I’m just misreading the spec requirement — and the spec isn’t saying to do `“step base” - value`","format":"org.matrix.custom.html","formatted_body":"Or maybe I’m just misreading the spec requirement — and the spec isn’t saying to do <code>“step base” - value</code>","m.mentions":{},"msgtype":"m.text"},"ts":1741075537535,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Zf2vFSBtyzG4elTXnyqy8qnGOjPPzugiuh_FIaXE0a8"},
{"content":{"body":"Or else at https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero, the 2nd step of that algorithm should just be removed — and then it would always return 0 unless there’s a `min` value or a “default step base“ defined (which is only the case for type=week)","format":"org.matrix.custom.html","formatted_body":"Or else at https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero, the 2nd step of that algorithm should just be removed —&nbsp;and then it would always return 0 unless there’s a <code>min</code> value or a “default step base“ defined (which is only the case for type=week)","m.mentions":{},"msgtype":"m.text"},"ts":1741075917689,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$IQE80YkTPcdc3PnP_NsMk5uvIBhrQI1IaX5LRGBe4P4"},
{"content":{"body":"Doesn't it create `<input type=time value=\"12:03:00\" step=\"120000\">`?","format":"org.matrix.custom.html","formatted_body":"Doesn't it create <code>&lt;input type=time value=\"12:03:00\" step=\"120000\"&gt;</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1741075936466,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$xTzvqLzPdsizPalDP29rF1Te8vR2ShEs9txT6_Zmsts"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1741075963110,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$S8Mua57AXKhEhg4P1PQblnCUzoUwa6w28YDAJ-gj2tY"},
{"content":{"body":"All browsers appear to consider that valid. Maybe the test is wrong?","m.mentions":{},"msgtype":"m.text"},"ts":1741075984406,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$CFCSd7y5MYiIxzfSw9bHDo_-GtR0dOT9yjOUk9KK1ww"},
{"content":{"body":"Well, all of WebKit/Gecko/Blink pass that test","m.mentions":{},"msgtype":"m.text"},"ts":1741076017733,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$Q1uVIyrM7jugPIWowN_0sYelNIRb9gY3DKFvvSxE3EM"},
{"content":{"body":"I don't really like the way the `input` element is organized in the specification, but I also never attempted a different approach.","format":"org.matrix.custom.html","formatted_body":"I don't really like the way the <code>input</code> element is organized in the specification, but I also never attempted a different approach.","m.mentions":{},"msgtype":"m.text"},"ts":1741076021080,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$jccFgk_cwsoL8rKwhxeaWxVSKQIGqynvbBZE2GvXMF4"},
{"content":{"body":"Yeah I really don’t like it either","m.mentions":{},"msgtype":"m.text"},"ts":1741076035997,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$VjC9PU9jtDh0KZt_ndXFwwmPh4kfxpXcDORHcRHiCBA"},
{"content":{"body":"But I also don’t have any great suggestions for how else to organize it","m.mentions":{},"msgtype":"m.text"},"ts":1741076062661,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$h8forUCOEP846vpbcEmJbiDdvzJAgn_ckrFZMRe-iuA"},
{"content":{"body":"It's weird that they all pass. Because `:invalid` doesn't match in any of them.","format":"org.matrix.custom.html","formatted_body":"It's weird that they all pass. Because <code>:invalid</code> doesn't match in any of them.","m.mentions":{},"msgtype":"m.text"},"ts":1741076100746,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$A8iTDiFk36YZ6kiv0ySrPkZsEgglPooRpn13uT4Kfms"},
{"content":{"body":"https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%3Cstyle%3E%0A%3Ainvalid%20%7B%20background%3Ared%20%7D%0A%3C%2Fstyle%3E%0A...%3Cinput%20type%3Dtime%20value%3D%2212%3A03%3A00%22%20step%3D%22120000%22%3E","m.mentions":{},"msgtype":"m.text"},"ts":1741076101900,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ORH1z75O-q1oTGpL3YJ97f4RhbzcPNhsw0CqWPRBfd4"},
{"content":{"body":"hmm, I hopes this is not one of those cases where existing engines just implemented whatever would get them passing the tests","m.mentions":{},"msgtype":"m.text"},"ts":1741076178731,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$LqQ2bduaxdv7kY0QrLZKYIrCYDT_qa07gw9TS9rzp9c"},
{"content":{"body":"the constraint-validation tests are not super-great tests anyway","m.mentions":{},"msgtype":"m.text"},"ts":1741076202091,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$snnYVfJCLOuUd-icBufpmcgWCJcCNnBHy0MyhX97P84"},
{"content":{"body":"the coverage is extremely minimal","m.mentions":{},"msgtype":"m.text"},"ts":1741076223049,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$i5niCIG6vkuG3e1_eQDd5TnJO2j8QF-OqRzl32CGRK4"},
{"content":{"body":"But I’m also not super enthusiastic about being the person who has to add more test coverage for all this stuff","m.mentions":{},"msgtype":"m.text"},"ts":1741076311995,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$0s9u8t7RZaLHmBxX-ZMV9KNVmS8rswkKVWKMz6LOAis"},
{"content":{"body":"I think for my implementation I’m going to go ahead and drop step 2 of https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero from the implementation — with a comment saying why","m.mentions":{},"msgtype":"m.text"},"ts":1741076386914,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$y6ONtp0HfdofEoXt2-0mpUmkiOzbukk11nA1LWx76B0"},
{"content":{"body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is _always_ going to end up returning the same thing as the `value` attribute value. And that doesn’t logically seem like the “step base” for the element should always be same as the value of the `value` attribute. Instead the “step base” should just be either `min` or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","format":"org.matrix.custom.html","formatted_body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is <em>always</em> going to end up returning the same thing as the <code>value</code> attribute value. And that doesn’t logically seem like the “step base” for the element should always be same as the value of the <code>value</code> attribute. Instead the “step base” should just be either <code>min</code> or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","m.mentions":{},"msgtype":"m.text"},"ts":1741076665113,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$0FaHucFigHe7U-c3uvOMH_dUJvvNevezxwHVuNfHx0k"},
{"content":{"body":"* Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is _always_ going to end up returning the same thing as the `value` attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the `value` attribute. Instead the “step base” should just be either `min` or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","format":"org.matrix.custom.html","formatted_body":"* Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is <em>always</em> going to end up returning the same thing as the <code>value</code> attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the <code>value</code> attribute. Instead the “step base” should just be either <code>min</code> or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","m.mentions":{},"m.new_content":{"body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is _always_ going to end up returning the same thing as the `value` attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the `value` attribute. Instead the “step base” should just be either `min` or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","format":"org.matrix.custom.html","formatted_body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is <em>always</em> going to end up returning the same thing as the <code>value</code> attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the <code>value</code> attribute. Instead the “step base” should just be either <code>min</code> or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0FaHucFigHe7U-c3uvOMH_dUJvvNevezxwHVuNfHx0k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741076687214,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$WZklusGbdLtl98jh3LiY1gjGbjLpARccw5mmaeGd724"},
{"content":{"body":"* Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is _always_ going to end up returning the same thing as the `value` attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the `value` attribute (in the absence of a `min` or “default step base“ ). Instead the “step base” should just be either `min` or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","format":"org.matrix.custom.html","formatted_body":"* Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is <em>always</em> going to end up returning the same thing as the <code>value</code> attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the <code>value</code> attribute (in the absence of a <code>min</code> or “default step base“ ). Instead the “step base” should just be either <code>min</code> or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","m.mentions":{},"m.new_content":{"body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is _always_ going to end up returning the same thing as the `value` attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the `value` attribute (in the absence of a `min` or “default step base“ ). Instead the “step base” should just be either `min` or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","format":"org.matrix.custom.html","formatted_body":"Because, If I do that that, the tests pass. And also, I can’t actually make sense of that step. I mean, it seems to me that step is <em>always</em> going to end up returning the same thing as the <code>value</code> attribute value. And it doesn’t logically seem like the “step base” for the element should always be same as the value of the <code>value</code> attribute (in the absence of a <code>min</code> or “default step base“ ). Instead the “step base” should just be either <code>min</code> or a “default step base“ or else just zero. That is, it’s a floor against which the value is evaluated.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0FaHucFigHe7U-c3uvOMH_dUJvvNevezxwHVuNfHx0k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741076721877,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$QEf7RL4ULxlj-DHbExSL-jttgJGi0wImuNorjbXUS3A"}
]