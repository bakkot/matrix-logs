[
{"content":{"body":"Join BlackHat_Nexus ‚Äì Trusted by Over 23,000 Subscribers\nYour reliable hub for Cybersecurity, Digital Recovery, and Tech Support Services.\nWe provide fast, secure, and confidential solutions for a wide range of digital challenges‚Äîtrusted by individuals and businesses worldwide Our Expert Services Include:      \n  üîê Account Recovery ‚Äì Email, Social Media, Crypto Wallets\nüíº Digital Investigations & Fund Recovery ‚Äì Lost funds, scam cases\nüì± Lost Device Tracking ‚Äì Phones, Laptops, Vehicles\nüß† Password Recovery & Access Support ‚Äì Secure, consent-based assistance\nüõ°Ô∏è Cybersecurity Consultations ‚Äì Protect your digital identity\nüß∞ System Troubleshooting ‚Äì Windows, Android, iOS\nüåê Website Security Audits ‚Äì Vulnerability detection & protection\nüéì Academic Access Support ‚Äì Authorized educational record recovery\nüì° Network Security Testing ‚Äì Wi-Fi & CCTV configuration & checks\nüëÅÔ∏è‚Äçüó®Ô∏è Ethical Monitoring Solutions ‚Äì Discreet and compliant digital oversight\n---\n\nWhy Choose Us?\n‚úÖ Fast, Professional Response\n‚úÖ 24/7 Availability\n‚úÖ Confidential & Secure Handling\n‚úÖ Experienced Digital Experts\n\n\n---\n\nJoin us today and secure your digital world.\nhttps://t.me/BlackHat_Nexus\n\n\n","format":"org.matrix.custom.html","formatted_body":"<h2>Join BlackHat_Nexus ‚Äì Trusted by Over 23,000 Subscribers<br>Your reliable hub for Cybersecurity, Digital Recovery, and Tech Support Services.<br>We provide fast, secure, and confidential solutions for a wide range of digital challenges‚Äîtrusted by individuals and businesses worldwide Our Expert Services Include:<br>\nüîê Account Recovery ‚Äì Email, Social Media, Crypto Wallets<br>üíº Digital Investigations &amp; Fund Recovery ‚Äì Lost funds, scam cases<br>üì± Lost Device Tracking ‚Äì Phones, Laptops, Vehicles<br>üß† Password Recovery &amp; Access Support ‚Äì Secure, consent-based assistance<br>üõ°Ô∏è Cybersecurity Consultations ‚Äì Protect your digital identity<br>üß∞ System Troubleshooting ‚Äì Windows, Android, iOS<br>üåê Website Security Audits ‚Äì Vulnerability detection &amp; protection<br>üéì Academic Access Support ‚Äì Authorized educational record recovery<br>üì° Network Security Testing ‚Äì Wi-Fi &amp; CCTV configuration &amp; checks<br>üëÅÔ∏è‚Äçüó®Ô∏è Ethical Monitoring Solutions ‚Äì Discreet and compliant digital oversight</h2>\n<p>Why Choose Us?<br>‚úÖ Fast, Professional Response<br>‚úÖ 24/7 Availability<br>‚úÖ Confidential &amp; Secure Handling<br>‚úÖ Experienced Digital Experts</p>\n<hr>\n<p>Join us today and secure your digital world.<br>https://t.me/BlackHat_Nexus</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749518958417,"senderName":"james7474","senderId":"@james7474:envs.net","id":"$-15Bh9eRbIf_RPIxjziz1ah8EOK-yTr2nNCljkX2fRU"},
{"content":{"body":"Hello. I want to document the latest version of the w3c parser for finding client side vulnerabilities.\n\nI started with a DOM XSS using the RFC of the parser with element.innerHTML = \"XSS\";. My goal is to have the syntax possible for each XSS possible. \n\nI started with:\n\nhttps://html.spec.whatwg.org/multipage/parsing.html#overview-of-the-parsing-model\n\naccording to the schema, the loop starts at the HTML tree builder at https://github.com/WebKit/WebKit/blob/main/Source/WebCore/html/parser/HTMLTreeBuilder.cpp#L816 and then \n\n\nI am wondering if according to the code at https://github.com/WebKit/WebKit/blob/2246a2aa28d527e129ebec66183569db035fdc8a/Source/WebCore/dom/Element.cpp#L4347 , the policy of innerHTML could deny to execute a script even if not sanitized. I need to find the parser location to see the grammar syntax for potential XSS as mentrionned there: https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-element-innerhtml .\n\nIs Elements::replaceChildrenWithMarkup the parser please?","m.mentions":{},"msgtype":"m.text"},"ts":1749567524953,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY"},
{"content":{"body":"if you're looking for the HTML parser, have you tried looking in the directory called \"html/parser\" ? https://github.com/WebKit/WebKit/tree/main/Source/WebCore/html/parser","m.mentions":{},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749569310863,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$sX9zcfHh8cU4spQ1SKZUCgJ0djolKT5X1Mso8mwQJ3E"},
{"content":{"body":"also your definition of XSS doesn't seem to make much sense. in what way is javascript code that calls the innerHTML setter of an arbitrary element a cross-site  scripting vulnerability?","m.mentions":{},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$sX9zcfHh8cU4spQ1SKZUCgJ0djolKT5X1Mso8mwQJ3E"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749569554216,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$z7XrlpX2mODrRiBC_Ama4lvxlhSaKgZk8J0kTlLFXEE"},
{"content":{"body":"Yes I did. I mentionned it for parser/element webkit folder.","m.mentions":{},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$sX9zcfHh8cU4spQ1SKZUCgJ0djolKT5X1Mso8mwQJ3E"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749569890577,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$8PCWgUfX4vYWcIcQ6iZAa4jrX6tU2OXxEcR_SJx34ks"},
{"content":{"body":"To clarify technically:\n\nElement.innerHTML = \"<script>alert(1);</script>\";\n\nWill not execute contrary to:\n\nElement.innerHTML = \"<img src='error' onerror='alert(1);'>\";\n\nThat will print the 1.","format":"org.matrix.custom.html","formatted_body":"<p>To clarify technically:</p>\n<p>Element.innerHTML = \"<script>alert(1);</script>\";</p>\n<p>Will not execute contrary to:</p>\n<p>Element.innerHTML = \"<img src='error' onerror='alert(1);'>\";</p>\n<p>That will print the 1.</p>\n","m.mentions":{},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$z7XrlpX2mODrRiBC_Ama4lvxlhSaKgZk8J0kTlLFXEE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749570287669,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$MNSw96QIJR1RZDQ5TUvgsL-cNyKVrmWfjai-bUv2tk8"},
{"content":{"body":"In this contextvi need the parser code of policy/ parser of innerHTML output","m.mentions":{},"msgtype":"m.text"},"ts":1749570322849,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$N-QcELwjsvDmPlNvo0kvEULtsqbrwmSW9XNYXppLlUk"},
{"content":{"body":"you're setting JavaScript code to a HTML sink, if you wrap it in a script element it will execute (I think)","m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$MNSw96QIJR1RZDQ5TUvgsL-cNyKVrmWfjai-bUv2tk8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749571210316,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$Fs16s_I0pVgl4pIy_WJph1AZOHlqayw4O9NF9H-85mo"},
{"content":{"body":"no. It will not. Sanitization is *one* of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","format":"org.matrix.custom.html","formatted_body":"no. It will not. Sanitization is <em>one</em> of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":false,"m.in_reply_to":{"event_id":"$Fs16s_I0pVgl4pIy_WJph1AZOHlqayw4O9NF9H-85mo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749587857953,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$iL-_ffcLE_Jl1RVgKbW39HyxJl7JntekC5_PpDpc-KA"},
{"content":{"body":"* wrong. It will not. Sanitization is _one_ of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","format":"org.matrix.custom.html","formatted_body":"* wrong. It will not. Sanitization is <em>one</em> of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","m.mentions":{},"m.new_content":{"body":"wrong. It will not. Sanitization is _one_ of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","format":"org.matrix.custom.html","formatted_body":"wrong. It will not. Sanitization is <em>one</em> of the securing methodologies. Check out at https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink to see what you must do with the syntax to make it run.","m.mentions":{"user_ids":["@lwarlow:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iL-_ffcLE_Jl1RVgKbW39HyxJl7JntekC5_PpDpc-KA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1749587864954,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$UIjPK2eMCGDSBrI0PMNEK7jY6vZTmCPaxDZdFFmIpEQ"},
{"content":{"body":"Domenic or annevk : Would be really useful to have one of y'all comment on https://github.com/tc39/proposal-idl/issues/8 about the history of getting W3C to be able to refer to WHATWG specs (so ECMA can do the same).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> or <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> : Would be really useful to have one of y'all comment on https://github.com/tc39/proposal-idl/issues/8 about the history of getting W3C to be able to refer to WHATWG specs (so ECMA can do the same).","m.mentions":{"user_ids":["@domenicdenicola:matrix.org","@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1749590181368,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4CkyVPvdhra-7v57qMbV30T7dxV0r4C0j70kvlddgN0"},
{"content":{"body":"element.innerHTML = \"XXX\"; calls setInnerHTML at ","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":false,"m.in_reply_to":{"event_id":"$z7XrlpX2mODrRiBC_Ama4lvxlhSaKgZk8J0kTlLFXEE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749590899526,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$D3Z870oEZtPhBvgwbI7zDBaNMCuMqe62Wt72a_ccBnY"},
{"content":{"body":"https://github.com/WebKit/WebKit/blob/main/Source/WebCore/dom/Element.cpp#L4347","m.mentions":{},"m.relates_to":{"event_id":"$oPBdTh6c4gHz4iu6yJgGG43EQorE3uNWwXUbCaV8NOY","is_falling_back":true,"m.in_reply_to":{"event_id":"$D3Z870oEZtPhBvgwbI7zDBaNMCuMqe62Wt72a_ccBnY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1749590908500,"senderName":"gogo","senderId":"@gogo2464:matrix.org","id":"$E6NTkN4ImcigWMlUl4Pfr-LO156Yis_UkKHGTGZfe_8"},
{"content":{"body":"There isn't much to say. One day W3C decided to stop self-inflicting problems on themselves. SDOs can set their own policies. Ecma can decide at any time what it wants, and TC39 has a lot of power over Ecma since it's the main spec Ecma produces.","msgtype":"m.text"},"ts":1749598219023,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$WQkI8yEOVTYxAHtQikvpuJhTmUEtDbsJhUzVXTBk9JE"}
]