[
{"content":{"body":"Is there a syntactic convention for enum values?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a syntactic convention for enum values?"},"ts":1671495803983,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$9Ydu0I95WGwKuD-og8ESr63AnjNrcD1nY7JS7_2XTRg"},
{"content":{"body":"It looks like they're indistinguishable from strings https://webidl.spec.whatwg.org/#idl-enums","msgtype":"m.text","org.matrix.msc1767.text":"It looks like they're indistinguishable from strings https://webidl.spec.whatwg.org/#idl-enums"},"ts":1671496547373,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$S8tompvH1wm8auNNGmO9QtTYusCHRr_G7NMJXv8QQ_Y"},
{"content":{"body":"ðŸ‘»","msgtype":"m.text"},"ts":1671518751424,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$9_FTq91MykZ3kMrsOBLgeel33sTSRC-4Rc_VPJYNcRc"},
{"content":{"body":"jugglinmike: they are, but also: https://w3ctag.github.io/design-principles/#casing-rules","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">jugglinmike</a>: they are, but also: https://w3ctag.github.io/design-principles/#casing-rules","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jugglinmike: they are, but also: https://w3ctag.github.io/design-principles/#casing-rules","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">jugglinmike</a>: they are, but also: https://w3ctag.github.io/design-principles/#casing-rules","mimetype":"text/html"}]},"ts":1671525315341,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Xf7KWUCfJemnRfHF1Jp3VfiM7CPjhXAR33XxBPCsGRs"},
{"content":{"body":"(perhaps we should enforce those casing rules in IDL)","msgtype":"m.text","org.matrix.msc1767.text":"(perhaps we should enforce those casing rules in IDL)"},"ts":1671525338629,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$eZeCtS0AtXGC_hMrUmASw1VGC4jVLl303FXH6yWxELs"},
{"content":{"body":"But im back with same question as yesterday?","msgtype":"m.text"},"ts":1671525878498,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$AlU_TnDcIE83xZw87nXetvnZlVE57oBjR9q5WTc3i0M"},
{"content":{"body":"hacknorris: It sounds like you're asking for more of https://w3c.github.io/csswg-drafts/css-values-5/#attr-notation to be supported?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: It sounds like you're asking for more of https://w3c.github.io/csswg-drafts/css-values-5/#attr-notation to be supported?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hacknorris: It sounds like you're asking for more of https://w3c.github.io/csswg-drafts/css-values-5/#attr-notation to be supported?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: It sounds like you're asking for more of https://w3c.github.io/csswg-drafts/css-values-5/#attr-notation to be supported?","mimetype":"text/html"}]},"ts":1671525980939,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$-PBnuOBwqZZLBxzt0Q3JLLjXYNfCUeMVUMJoYrXHwn8"},
{"content":{"body":"sort of too but also for a way to imitiate img tag with only css","msgtype":"m.text"},"ts":1671528089588,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$ZS2B8mbx6KPt4HssBl36xeCf69nuJRhAoW9ik6H8Xks"},
{"content":{"body":"* sort of too but also for a way to imitiate img tag with only css","m.new_content":{"body":"sort of too but also for a way to imitiate img tag with only css","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZS2B8mbx6KPt4HssBl36xeCf69nuJRhAoW9ik6H8Xks","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1671528096173,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$bJdPJAyl4TSRuQQFHkdC120djYOZvzUFcYJyAkKAxIM"},
{"content":{"body":"And making ot automated for different image sizes","msgtype":"m.text"},"ts":1671528140038,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$8_r44n7DBSzTJLfvYp-IUwAFT9FjjMPO80e49uVzx1w"},
{"content":{"body":"Image source","msgtype":"m.text"},"ts":1671528241863,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$D6JfpsRZuoHln096NlVhRZYmozvxmfFkTe85oPtRZl0"},
{"content":{"body":"Containers source","msgtype":"m.text"},"ts":1671528277746,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$CPzSCBuaWPSgQazM11BpIb4fum3AVrJufB0A_53f3No"},
{"content":{"body":"App-container > app-box > app-icon","msgtype":"m.text"},"ts":1671528307056,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$xDuMteerTY1dLMM7UrXIKCoMLpcYzMJEgUFJb6t_8_U"},
{"content":{"body":"hacknorris: I'm not sure that I understand, but WHATWG doesn't maintain CSS, if it's one or more new CSS features you'd like to suggest, https://github.com/w3c/csswg-drafts/issues is the place for that. Although just filing an issue and waiting will probably be a bad first experience, https://www.w3.org/Style/CSS/current-work#contribute might be a better place to start.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: I'm not sure that I understand, but WHATWG doesn't maintain CSS, if it's one or more new CSS features you'd like to suggest, https://github.com/w3c/csswg-drafts/issues is the place for that. Although just filing an issue and waiting will probably be a bad first experience, https://www.w3.org/Style/CSS/current-work#contribute might be a better place to start.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hacknorris: I'm not sure that I understand, but WHATWG doesn't maintain CSS, if it's one or more new CSS features you'd like to suggest, https://github.com/w3c/csswg-drafts/issues is the place for that. Although just filing an issue and waiting will probably be a bad first experience, https://www.w3.org/Style/CSS/current-work#contribute might be a better place to start.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: I'm not sure that I understand, but WHATWG doesn't maintain CSS, if it's one or more new CSS features you'd like to suggest, https://github.com/w3c/csswg-drafts/issues is the place for that. Although just filing an issue and waiting will probably be a bad first experience, https://www.w3.org/Style/CSS/current-work#contribute might be a better place to start.","mimetype":"text/html"}]},"ts":1671529523661,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$xQNfsm97PNmHZu91Fqc_GcKg3-GfZ5wo9LGCiQVgyIY"},
{"content":{"body":"But attr() url property is documented?","msgtype":"m.text"},"ts":1671529628568,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$eZKRG0T4drtRZhICte98-yQdWgKr2JgIDwwDdU6D96A"},
{"content":{"body":"just not used","msgtype":"m.text"},"ts":1671529632888,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$W5XDAEf45-6li1WVCg5J8a2Xr3DKFrnyqTExIGDKr1A"},
{"content":{"body":"And i'd like to know if there is any other way to convert custom tag to embed/img","msgtype":"m.text"},"ts":1671530563422,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$p8EeQKoHuy_Svj41E46huOWIrC7eC_7YVm-7xZzswxo"},
{"content":{"body":"It's only partially implemented, in particular using it for URLs isn't supported and a topic of security discussion, see https://github.com/w3c/csswg-drafts/issues/5092","msgtype":"m.text","org.matrix.msc1767.text":"It's only partially implemented, in particular using it for URLs isn't supported and a topic of security discussion, see https://github.com/w3c/csswg-drafts/issues/5092"},"ts":1671530613848,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$j3v-0Bl-pcxL1I_SI9AXDM4BBxJzvbibYlovPjNmieE"},
{"content":{"body":"* And i'd like to know if there is any other way to convert custom tag to embed/img","m.new_content":{"body":"And i'd like to know if there is any other way to convert custom tag to embed/img","msgtype":"m.text"},"m.relates_to":{"event_id":"$p8EeQKoHuy_Svj41E46huOWIrC7eC_7YVm-7xZzswxo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1671530634624,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$x7uvDP96umzO2nPae0jK4yf--_qyel9OAGdlHsi0VtA"},
{"content":{"body":"hacknorris: assuming you want something that works today, can you use a framework with a template system, to generate the complex markup from much simpler inputs?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: assuming you want something that works today, can you use a framework with a template system, to generate the complex markup from much simpler inputs?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hacknorris: assuming you want something that works today, can you use a framework with a template system, to generate the complex markup from much simpler inputs?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@hacknorris:arcticfoxes.net\">hacknorris</a>: assuming you want something that works today, can you use a framework with a template system, to generate the complex markup from much simpler inputs?","mimetype":"text/html"}]},"ts":1671530706253,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$NHDxcgfuheXYuOwDZUKqH4EQ1KLVLH1M2lxq65lePIY"},
{"content":{"body":"Mhm","msgtype":"m.text"},"ts":1671531260886,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$zgCSEueUQGYYandNn6RnK0BbsOJ7_fvcdweLTLvn3mU"},
{"content":{"body":"Dtd?","msgtype":"m.text"},"ts":1671531316527,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$9uQdijpO4WXBgtzQ_Qb_4qIXitq4oMPwKuF7-KEcxMg"},
{"content":{"body":"> <@foolip:matrix.org> It's only partially implemented, in particular using it for URLs isn't supported and a topic of security discussion, see https://github.com/w3c/csswg-drafts/issues/5092\n\nwill check later - temporary problems in hosting service","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$j3v-0Bl-pcxL1I_SI9AXDM4BBxJzvbibYlovPjNmieE\">In reply to</a> <a href=\"https://matrix.to/#/@foolip:matrix.org\">@foolip:matrix.org</a><br>It&#39;s only partially implemented, in particular using it for URLs isn&#39;t supported and a topic of security discussion, see https:&#47;&#47;github.com&#47;w3c&#47;csswg-drafts&#47;issues&#47;5092</blockquote></mx-reply>will check later - temporary problems in hosting service","m.relates_to":{"m.in_reply_to":{"event_id":"$j3v-0Bl-pcxL1I_SI9AXDM4BBxJzvbibYlovPjNmieE"}},"msgtype":"m.text"},"ts":1671532629009,"senderName":"hacknorris","senderId":"@hacknorris:arcticfoxes.net","id":"$0zEjQKtLV8pbjinAr04KJ_HKt7opZOER8ftlHtI7miA"},
{"content":{"body":"Hello,\n\nI've been playing around with the File System Access API. I experimented with it and found it may lack of a functionality. As I'm new to the WHATWG / specification world I'd rather ask here before submitting anything on the repository (https://github.com/whatwg/fs).\n\nWhen retrieving a FileSystemHandle (either a file or a directory) from IndexedDB storage, there is currently no direct way to test if an entry exists on user's device. While trying (on Chrome at least), you need to call a method (like `createWritable` / `getFileHandle`) which will ultimately test that such entry does exist, when it does not, returned Promise rejects with a NotFoundError.\n\nMay I suggest to add a new method on the FileSystemHandle interface, something like `Promise<boolean> exists()` to test it? Apart from this storage use-case, I think it could be used in other use-cases (e.g. watch-like feature).\n\nBtw, what difference is there between specification of WICG and WHATWG? I don't see which one would be more suited to eventually post my issue.","format":"org.matrix.custom.html","formatted_body":"<p>Hello,</p>\n<p>I've been playing around with the File System Access API. I experimented with it and found it may lack of a functionality. As I'm new to the WHATWG / specification world I'd rather ask here before submitting anything on the repository (https://github.com/whatwg/fs).</p>\n<p>When retrieving a FileSystemHandle (either a file or a directory) from IndexedDB storage, there is currently no direct way to test if an entry exists on user's device. While trying (on Chrome at least), you need to call a method (like <code>createWritable</code> / <code>getFileHandle</code>) which will ultimately test that such entry does exist, when it does not, returned Promise rejects with a NotFoundError.</p>\n<p>May I suggest to add a new method on the FileSystemHandle interface, something like <code>Promise&lt;boolean&gt; exists()</code> to test it? Apart from this storage use-case, I think it could be used in other use-cases (e.g. watch-like feature).</p>\n<p>Btw, what difference is there between specification of WICG and WHATWG? I don't see which one would be more suited to eventually post my issue.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hello,\n\nI've been playing around with the File System Access API. I experimented with it and found it may lack of a functionality. As I'm new to the WHATWG / specification world I'd rather ask here before submitting anything on the repository (https://github.com/whatwg/fs).\n\nWhen retrieving a FileSystemHandle (either a file or a directory) from IndexedDB storage, there is currently no direct way to test if an entry exists on user's device. While trying (on Chrome at least), you need to call a method (like `createWritable` / `getFileHandle`) which will ultimately test that such entry does exist, when it does not, returned Promise rejects with a NotFoundError.\n\nMay I suggest to add a new method on the FileSystemHandle interface, something like `Promise<boolean> exists()` to test it? Apart from this storage use-case, I think it could be used in other use-cases (e.g. watch-like feature).\n\nBtw, what difference is there between specification of WICG and WHATWG? I don't see which one would be more suited to eventually post my issue.","mimetype":"text/plain"},{"body":"<p>Hello,</p>\n<p>I've been playing around with the File System Access API. I experimented with it and found it may lack of a functionality. As I'm new to the WHATWG / specification world I'd rather ask here before submitting anything on the repository (https://github.com/whatwg/fs).</p>\n<p>When retrieving a FileSystemHandle (either a file or a directory) from IndexedDB storage, there is currently no direct way to test if an entry exists on user's device. While trying (on Chrome at least), you need to call a method (like <code>createWritable</code> / <code>getFileHandle</code>) which will ultimately test that such entry does exist, when it does not, returned Promise rejects with a NotFoundError.</p>\n<p>May I suggest to add a new method on the FileSystemHandle interface, something like <code>Promise&lt;boolean&gt; exists()</code> to test it? Apart from this storage use-case, I think it could be used in other use-cases (e.g. watch-like feature).</p>\n<p>Btw, what difference is there between specification of WICG and WHATWG? I don't see which one would be more suited to eventually post my issue.</p>\n","mimetype":"text/html"}]},"ts":1671536088310,"senderName":"lpfreelance","senderId":"@lpfreelance:matrix.org","id":"$BhsNF0HzpMRs3r_I1YxNkxCh-g_fbLcOxn0eaotLcxY"},
{"content":{"body":"In general such methods are bad, for all file system APIs, because they create TOCTTOU errors. https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use","msgtype":"m.text","org.matrix.msc1767.text":"In general such methods are bad, for all file system APIs, because they create TOCTTOU errors. https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use"},"ts":1671537172981,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$DpkEgsgllSyjUWxC5ktO1HDll3zTaYn3OAYvQpE8LPE"},
{"content":{"body":"It's better to do the thing you want to do, and if it fails, handle the error, instead of checking if what you want to do is possible, then trying to do it (which might still fail)","msgtype":"m.text","org.matrix.msc1767.text":"It's better to do the thing you want to do, and if it fails, handle the error, instead of checking if what you want to do is possible, then trying to do it (which might still fail)"},"ts":1671537198743,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$m88SXeJIvHxX9bkOgnUGuZJ9HzZaRlWCgP6V1s7_8lY"},
{"content":{"body":"See also https://nodejs.org/api/fs.html#fsaccesspath-mode-callback for a different ecosystem's documentation of the problem","msgtype":"m.text","org.matrix.msc1767.text":"See also https://nodejs.org/api/fs.html#fsaccesspath-mode-callback for a different ecosystem's documentation of the problem"},"ts":1671537257579,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0NQmXA9jlksbZGl_tGOWz55G98kBaMuSiHscxxPVfcI"},
{"content":{"body":"Can there be an attribute's getter steps which has side effect?  or is it prohibited?  I'm wondering if we can assume all DOM-related getters (represented by `attribute` in `WebIDL`) can be considered side-effect free.  the context is https://bugzilla.mozilla.org/show_bug.cgi?id=1806598 , where we're trying to figure out the list of side-effect free native functions in getters","format":"org.matrix.custom.html","formatted_body":"Can there be an attribute's getter steps which has side effect?  or is it prohibited?  I'm wondering if we can assume all DOM-related getters (represented by <code>attribute</code> in <code>WebIDL</code>) can be considered side-effect free.  the context is https://bugzilla.mozilla.org/show_bug.cgi?id=1806598 , where we're trying to figure out the list of side-effect free native functions in getters","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Can there be an attribute's getter steps which has side effect?  or is it prohibited?  I'm wondering if we can assume all DOM-related getters (represented by `attribute` in `WebIDL`) can be considered side-effect free.  the context is https://bugzilla.mozilla.org/show_bug.cgi?id=1806598 , where we're trying to figure out the list of side-effect free native functions in getters","mimetype":"text/plain"},{"body":"Can there be an attribute's getter steps which has side effect?  or is it prohibited?  I'm wondering if we can assume all DOM-related getters (represented by <code>attribute</code> in <code>WebIDL</code>) can be considered side-effect free.  the context is https://bugzilla.mozilla.org/show_bug.cgi?id=1806598 , where we're trying to figure out the list of side-effect free native functions in getters","mimetype":"text/html"}]},"ts":1671537505111,"senderName":"arai","senderId":"@arai:mozilla.org","id":"$4planh2w20eVJvEFj8al1R_WiFq77CLJT8qWCEIIQgo"}
]