[
{"content":{"body":"jugglinmike: we prefer explicit callbacks these days, like we've done for all other WebDriver BiDi hooks.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">jugglinmike</a>: we prefer explicit callbacks these days, like we've done for all other WebDriver BiDi hooks.","msgtype":"m.text"},"ts":1694052619942,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$LV5_FHqP0wi0WY7JCvQ_n2bB-SRM18N6Xg5uPvgVarg"},
{"content":{"body":"In particular, this helps get the ordering clear.","msgtype":"m.text"},"ts":1694052626457,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$QM2M8JljnL6CSTR6w_YLfGvzeZlJXAEinvoveBdZCz4"},
{"content":{"body":"Not sure what hooks you're referring to that already exist, although it's a long section so maybe I just missed them","msgtype":"m.text"},"ts":1694052655245,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$vqzqh_5qS2iqDLP0NlOE8gZD5VXE9ppCqF2-kaPhAlc"},
{"content":{"body":"Oh you mean the many specific ones, not a generic one.","msgtype":"m.text"},"ts":1694052694583,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$O6-LGQ8SGILVTGZBP1806jyHvIyyGNCsWlzuyknh0og"},
{"content":{"body":"Hello All,","msgtype":"m.text"},"ts":1694077570160,"senderName":"sbastiandev","senderId":"@sbastiandev:matrix.org","id":"$xn4A1j4YX6c_po-pbYYTRb-hXl5o_Iym1WF7a4nvfO4"},
{"content":{"body":"I am almost done implementing the latest URL Spec in Java and was wondering if the various URL's setters should throw Exceptions when something goes wrong ? I read the specification and didn't find anything on this ? Can anyone shed some light ? Thx a lot","msgtype":"m.text"},"ts":1694077742795,"senderName":"sbastiandev","senderId":"@sbastiandev:matrix.org","id":"$P-X-_PCwocl6d2QyBDo576keZLewUJ4Xqho23gyoVWM"},
{"content":{"body":"sbastiandev: judging by this note: https://url.spec.whatwg.org/#validation-error whether validation errors throw is left to the user agent","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sbastiandev:matrix.org\">sbastiandev</a>: judging by this note: https://url.spec.whatwg.org/#validation-error whether validation errors throw is left to the user agent","msgtype":"m.text"},"ts":1694082298636,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$g7OGHZhCjz73SHO2UJiIV1YC-1uE4Jx4XEi5M371rp8"},
{"content":{"body":"as in, the web platform doesn't throw on validation errors (based on the note, for backwards compatibility), but conformance checkers probably should. Makes sense to me that this is a library/platform decision rather than spec decision. probably some people here with more context though","msgtype":"m.text"},"ts":1694082527946,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$vtVju0Ir2BX99cUf2lRy-bCf657TQVGNOvBFLALLwJw"},
{"content":{"body":"> <@noamr:matrix.org> sbastiandev: judging by this note: https://url.spec.whatwg.org/#validation-error whether validation errors throw is left to the user agent\n\nThanks for your reply. The main concern though is that you've got cases where the behavior of setting parts versus parsing a url is not consistent in term of reporting failures. For instance parsing a url with a wrong port would fail. However calling url.port = \"bad-port-number\" would not. But as you said it's probably a library/platform decision. Thank you","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$g7OGHZhCjz73SHO2UJiIV1YC-1uE4Jx4XEi5M371rp8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@noamr:matrix.org\">@noamr:matrix.org</a><br><a href=\"https://matrix.to/#/@sbastiandev:matrix.org\">sbastiandev</a>: judging by this note: https://url.spec.whatwg.org/#validation-error whether validation errors throw is left to the user agent</blockquote></mx-reply>Thanks for your reply. The main concern though is that you've got cases where the behavior of setting parts versus parsing a url is not consistent in term of reporting failures. For instance parsing a url with a wrong port would fail. However calling url.port = \"bad-port-number\" would not. But as you said it's probably a library/platform decision. Thank you","m.relates_to":{"m.in_reply_to":{"event_id":"$g7OGHZhCjz73SHO2UJiIV1YC-1uE4Jx4XEi5M371rp8"}},"msgtype":"m.text"},"ts":1694090214153,"senderName":"sbastiandev","senderId":"@sbastiandev:matrix.org","id":"$1pmQR16aVhAkdsvmfMyPwCqLmLTnAAeNbayPUJGTJgU"},
{"content":{"body":"sbastiandev:  if you see the setter algorithm, those do something and then call the parsing algorithm and some parsing leads to validation errors, which leads back to this note","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sbastiandev:matrix.org\">sbastiandev</a>:  if you see the setter algorithm, those do something and then call the parsing algorithm and some parsing leads to validation errors, which leads back to this note","msgtype":"m.text"},"ts":1694090801435,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$Ve2IPfsMfHTRxTiQscenBApKlMCLC31NdIPJlILeL3o"},
{"content":{"body":"(setter algorithms)","msgtype":"m.text"},"ts":1694090814317,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$QQeilVwl4-GMSGan5rFwQfgpplzSnztt2xB-L5WkXL0"},
{"content":{"body":"e.g. \"The protocol setter steps are to *basic URL parse* the given value, followed by U+003A (:), with this’s URL as url and scheme start state as state override.\"","format":"org.matrix.custom.html","formatted_body":"e.g. \"The protocol setter steps are to <em>basic URL parse</em> the given value, followed by U+003A (:), with this’s URL as url and scheme start state as state override.\"","msgtype":"m.text"},"ts":1694090880107,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$uxNp-HICt0nEsM4mDhToyVRHD7EcyfRKTIePU0BN-o8"},
{"content":{"body":"Thanks Domenic !","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> !","msgtype":"m.text"},"ts":1694098658707,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$03n_26lSJDnYAVGm7Hq7dEpoN0Q-ZSDEu2uO4PSxK1Q"},
{"content":{"body":"Can you define a custom conversion from arbitrary ES types to your specific IDL type? Like, if I have an interface, and I want methods that accept objects of that interface type to also accept a handful of other types that my native interface type can be constructed from, how can I do this? Do those methods have to accept `any`, and then I just write their dfn as delegating to an internal conversion algorithm that I provide? Or can I just accept `MyInterface` types, and specify some some conversion algorithm that gets invoked whenever anything is passed in as a `MyInterface`?","format":"org.matrix.custom.html","formatted_body":"Can you define a custom conversion from arbitrary ES types to your specific IDL type? Like, if I have an interface, and I want methods that accept objects of that interface type to also accept a handful of other types that my native interface type can be constructed from, how can I do this? Do those methods have to accept <code>any</code>, and then I just write their dfn as delegating to an internal conversion algorithm that I provide? Or can I just accept <code>MyInterface</code> types, and specify some some conversion algorithm that gets invoked whenever anything is passed in as a <code>MyInterface</code>?","msgtype":"m.text"},"ts":1694099016835,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$VYxVZm7Td0uQ0wZn3069RB1M7fD4unXN7zGuoB66860"},
{"content":{"body":"I think I'm interested in simulating something like the WebIDL Promise type, which accepts all thenables but also native Promises, IIUC","msgtype":"m.text"},"ts":1694099062617,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$iRaGiMT1AMpYkusPtyUvWAoyloVNFNBGh26US5iHYyo"},
{"content":{"body":"(Context is for https://github.com/domfarolino/observable, where it'd be nice for methods that accept an Observable to also accept Async Iterables, that Observables can be constructed around to wrap)","msgtype":"m.text"},"ts":1694099118292,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$tYmrXnQYWwwOLxnbdzH0xwEZAX_kPA5l1vI9ioaGJDk"},
{"content":{"body":"Dominic Farolino: define ObservableInit as a union of Observable and whatever syntax we have for async iterables (maybe needs to be added?) and make people use that?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: define ObservableInit as a union of Observable and whatever syntax we have for async iterables (maybe needs to be added?) and make people use that?","msgtype":"m.text"},"ts":1694099250329,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$qLS2jkOt_iO5DA3vt5FogHZVbWYMuiYyNRiQ_fauXS8"},
{"content":{"body":"Dominic Farolino: Promise is an ES type and therefore gets its own to-and-from ES conversion, but you don't have that if you define an interface","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: Promise is an ES type and therefore gets its own to-and-from ES conversion, but you don't have that if you define an interface","msgtype":"m.text"},"ts":1694099276931,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$DX49K81xxrxVW6EqGexZHnhehclNr-6RRFSd6l5mpQ4"},
{"content":{"body":"Yeah it's the latter part of \"and whatever syntax we have for async iterables\" that I'm stuck on. We of course have syntax to make an interface async iterable, but I'm not sure that's usable from within a union... perhaps it does need to be added though idk","msgtype":"m.text"},"ts":1694099476577,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$4jOy0CfJiVQVxGJAfH9tZS-uhaO5zeZCoCk6ZeV4x6g"},
{"content":{"body":"(Same goes for normal iterable I think)","msgtype":"m.text"},"ts":1694099503499,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$tYJ9DYgTeUMOsSp4RlbhKi9NK2pRgGi4HRi0ByTsVGA"},
{"content":{"body":"(Or no, I guess maybe sequence<T> can be used for iterable)","msgtype":"m.text"},"ts":1694099763313,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$kjfXzCmm8kC88yFAS6njZEBPw2e3ecdUH4e7DYZQGIU"},
{"content":{"body":"Dominic Farolino: yeah, you want `async sequence<T>` or some such","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: yeah, you want <code>async sequence&lt;T&gt;</code> or some such","msgtype":"m.text"},"ts":1694101295033,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$G3xJ458SuwXB72OVq5wXsI8X0x9CVjEOHRpsK115kjg"},
{"content":{"body":"Dominic Farolino: I think you need `object` or `any` with manual steps. In particular, overloading on promises is basically impossible in Web IDL by design. And this would be the second method on the platform to consume async iterators, so you'd need to add something to Web IDL to support that, which I'm not sure is worth it.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: I think you need <code>object</code> or <code>any</code> with manual steps. In particular, overloading on promises is basically impossible in Web IDL by design. And this would be the second method on the platform to consume async iterators, so you'd need to add something to Web IDL to support that, which I'm not sure is worth it.","msgtype":"m.text"},"ts":1694128086080,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$NTWiYkLFpwcrO6IqKXHfs2yirz0VEfFmrFp2OT6oTHY"},
{"content":{"body":"Oh, but, if this is just for `Observable` + async iterable overloads, then maybe that's worth doing","format":"org.matrix.custom.html","formatted_body":"Oh, but, if this is just for <code>Observable</code> + async iterable overloads, then maybe that's worth doing","msgtype":"m.text"},"ts":1694128109176,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$7JAqE97DblfKiYM_uv9xgGh-lZ6D_pZEx9nLLKD46BI"},
{"content":{"body":"I thought this was just for `Observable.from` which is very special.","format":"org.matrix.custom.html","formatted_body":"I thought this was just for <code>Observable.from</code> which is very special.","msgtype":"m.text"},"ts":1694128116563,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$TsboGTigmwuS8hnxn6wpi2i7PSrTFQ28aZY1z8y_D_o"}
]