[
{"content":{"body":"Implemented Node.js `fs` API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916\n\nLive demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed `fs` global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS.","format":"org.matrix.custom.html","formatted_body":"<p>Implemented Node.js <code>fs</code> API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916</p>\n<p>Live demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed <code>fs</code> global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS.</p>\n","msgtype":"m.text"},"ts":1687222588914,"senderName":"Vadim Dalecky","senderId":"@streamich:matrix.org","id":"$3JAVZ0zXkMifNvunQcS-6rFMrL5qhrxKKUG6uX-l8Fg"},
{"content":{"body":" * Implemented Node.js `fs` API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916\n\nLive demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed `fs` global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS. One can use OPFS Explorer to verify: https://chrome.google.com/webstore/detail/opfs-explorer/acndjpgkpaclldomagafnognkcgjignd","format":"org.matrix.custom.html","formatted_body":" * <p>Implemented Node.js <code>fs</code> API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916</p>\n<p>Live demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed <code>fs</code> global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS. One can use OPFS Explorer to verify: https://chrome.google.com/webstore/detail/opfs-explorer/acndjpgkpaclldomagafnognkcgjignd</p>\n","m.new_content":{"body":"Implemented Node.js `fs` API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916\n\nLive demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed `fs` global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS. One can use OPFS Explorer to verify: https://chrome.google.com/webstore/detail/opfs-explorer/acndjpgkpaclldomagafnognkcgjignd","format":"org.matrix.custom.html","formatted_body":"<p>Implemented Node.js <code>fs</code> API on top of File System Access API (an the other way around), PR: https://github.com/streamich/memfs/pull/916</p>\n<p>Live demo: https://streamich.github.io/memfs/ - in the demo if you open dev console, there will be exposed <code>fs</code> global, which allows you to perform all Node.js file system calls, including streams (createWriteStream) and synchronous calls. It runs on top of OPFS. One can use OPFS Explorer to verify: https://chrome.google.com/webstore/detail/opfs-explorer/acndjpgkpaclldomagafnognkcgjignd</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$3JAVZ0zXkMifNvunQcS-6rFMrL5qhrxKKUG6uX-l8Fg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1687222722482,"senderName":"Vadim Dalecky","senderId":"@streamich:matrix.org","id":"$zR98OfR9ZQOSqhZvST0lEIy_R7JIYAv5Fi-hV95YtZ8"},
{"content":{"body":"TabAtkins: Is `bikeshed echidna` intended to be usable under CI? If so, how do groups use the `W3C username` and `W3C password`? I mean in particular, how/where can they store the `W3C password` value in a GitHub repo? I guess they encrypt it and store it encrypted?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Is <code>bikeshed echidna</code> intended to be usable under CI? If so, how do groups use the <code>W3C username</code> and <code>W3C password</code>? I mean in particular, how/where can they store the <code>W3C password</code> value in a GitHub repo? I guess they encrypt it and store it encrypted?","msgtype":"m.text"},"ts":1687228617095,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$CnWizjTmjtVGY93rePpJJn8E7mHCSbjM_r2clRWcU3w"}
]