[
{"content":{"body":"streams question:\n\n```\n(async () => {\n  let stream = new ReadableStream(\n    {\n      start(controller) {\n          controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise\n          controller.close();\n      },\n    },\n  );\n  for await (let item of stream) {\n    console.log({ item });\n  }\n})();\n```\n\n(Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)\n\nHere, should the `console.log` be of `0` or of a Promise for `0`? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196\n\nthis is really an edge case, so maybe the \"contract violation\" is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT","format":"org.matrix.custom.html","formatted_body":"<p>streams question:</p>\n<pre><code>(async () =&gt; {\n  let stream = new ReadableStream(\n    {\n      start(controller) {\n          controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise\n          controller.close();\n      },\n    },\n  );\n  for await (let item of stream) {\n    console.log({ item });\n  }\n})();\n</code></pre>\n<p>(Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)</p>\n<p>Here, should the <code>console.log</code> be of <code>0</code> or of a Promise for <code>0</code>? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196</p>\n<p>this is really an edge case, so maybe the &quot;contract violation&quot; is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT</p>\n","msgtype":"m.text"},"ts":1680655162737,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iuo2aP5SS1FFYJuEGxoBDb6LXU2FOYOo2TkQG--9waM"},
{"content":{"body":"a document loading question:\n\nhttps://html.spec.whatwg.org/multipage/document-lifecycle.html#read-ua-inline\nstep 3 assumes there is \"response\" from which URL can be obtained but \"response\" is not listed in the parameters.\nstep 4 initialize navigationParams params with newly created response but step 5 that creates document using these navigationParams seems to assume that response always has non-empty URL.\n\nam I missing something or there is a bug that \"Loading a document for inline content that doesn't have a DOM\" should accept url?","msgtype":"m.text"},"ts":1680656307638,"senderName":"Alexander Kalenik","senderId":"@aliaksandr.kalenik:matrix.org","id":"$1NZWGvVJGtHKSyQK4jYbYQBsBAiP91pd9H1JKvI-zds"},
{"content":{"body":"> <@aliaksandr.kalenik:matrix.org> a document loading question:\n> \n> https://html.spec.whatwg.org/multipage/document-lifecycle.html#read-ua-inline\n> step 3 assumes there is \"response\" from which URL can be obtained but \"response\" is not listed in the parameters.\n> step 4 initialize navigationParams params with newly created response but step 5 that creates document using these navigationParams seems to assume that response always has non-empty URL.\n> \n> am I missing something or there is a bug that \"Loading a document for inline content that doesn't have a DOM\" should accept url?\n\nLooks like a bug to me. I think we can just use about:blank though instead of passing in a URL.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$1NZWGvVJGtHKSyQK4jYbYQBsBAiP91pd9H1JKvI-zds?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aliaksandr.kalenik:matrix.org\">@aliaksandr.kalenik:matrix.org</a><br>a document loading question:<br/><br/>https://html.spec.whatwg.org/multipage/document-lifecycle.html#read-ua-inline<br/>step 3 assumes there is &quot;response&quot; from which URL can be obtained but &quot;response&quot; is not listed in the parameters.<br/>step 4 initialize navigationParams params with newly created response but step 5 that creates document using these navigationParams seems to assume that response always has non-empty URL.<br/><br/>am I missing something or there is a bug that &quot;Loading a document for inline content that doesn&#39;t have a DOM&quot; should accept url?</blockquote></mx-reply>Looks like a bug to me. I think we can just use about:blank though instead of passing in a URL.","m.relates_to":{"m.in_reply_to":{"event_id":"$1NZWGvVJGtHKSyQK4jYbYQBsBAiP91pd9H1JKvI-zds"}},"msgtype":"m.text"},"ts":1680656430441,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$cpmm85A9DaH7MjZESQHxzA1x309ALhsFv-cNryZ95t4"},
{"content":{"body":"> <@bakkot:matrix.org> streams question:\n> \n> ```\n> (async () => {\n>   let stream = new ReadableStream(\n>     {\n>       start(controller) {\n>           controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise\n>           controller.close();\n>       },\n>     },\n>   );\n>   for await (let item of stream) {\n>     console.log({ item });\n>   }\n> })();\n> ```\n> \n> (Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)\n> \n> Here, should the `console.log` be of `0` or of a Promise for `0`? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196\n> \n> this is really an edge case, so maybe the \"contract violation\" is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT\n\nI think it'd be best if Web IDL enforced that such cases get unwrapped, like (IIRC) the relevant ES machinery does.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$iuo2aP5SS1FFYJuEGxoBDb6LXU2FOYOo2TkQG--9waM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>streams question:</p>\n<pre><code>(async () =&gt; {\n  let stream = new ReadableStream(\n    {\n      start(controller) {\n          controller.enqueue(Promise.resolve(0)); // NOTE: enqueuing a promise\n          controller.close();\n      },\n    },\n  );\n  for await (let item of stream) {\n    console.log({ item });\n  }\n})();\n</code></pre>\n<p>(Streams are async iterable as of https://github.com/whatwg/streams/pull/980, though only FF has implemented as far as I know.)</p>\n<p>Here, should the <code>console.log</code> be of <code>0</code> or of a Promise for <code>0</code>? If I'm reading the various specs right, it should be a Promise. FF has it as an actual 0. The original conversation about async iterators which yield promises (in the iterator result object) decided that it should be considered a contract violation to do so - see slide 27 of https://docs.google.com/presentation/d/1U6PivKbFO0YgoFlrYB82MtXf1ofCp1xSVOODOvranBM/edit#slide=id.g223fba4116_0_196</p>\n<p>this is really an edge case, so maybe the \"contract violation\" is fine? it's not like the language enforces that contract. but if the intent is that it should be a Promise for 0, that probably warrants a WPT</p>\n</blockquote></mx-reply>I think it'd be best if Web IDL enforced that such cases get unwrapped, like (IIRC) the relevant ES machinery does.","m.relates_to":{"m.in_reply_to":{"event_id":"$iuo2aP5SS1FFYJuEGxoBDb6LXU2FOYOo2TkQG--9waM"}},"msgtype":"m.text"},"ts":1680656463262,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$szx6wPLZedeSs0MWktypJR6s9T1lprG5T2R_PjkodBE"},
{"content":{"body":"there's not much ES machinery, but the closest things are async generators manually `yield`ing promises, and `for-await` over sync iterator of promises as in `for await (let item of [Promise.resolve(0)]) ...`, both of which do indeed unwrap","format":"org.matrix.custom.html","formatted_body":"there's not much ES machinery, but the closest things are async generators manually <code>yield</code>ing promises, and <code>for-await</code> over sync iterator of promises as in <code>for await (let item of [Promise.resolve(0)]) ...</code>, both of which do indeed unwrap","msgtype":"m.text"},"ts":1680656551631,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Nxc_cVdOSmbkt7utOGDHVsm_W_YicrwLpWFIr84kfXA"},
{"content":{"body":"Yes, this feels analogous to async generators manually `yield`ing promises","format":"org.matrix.custom.html","formatted_body":"Yes, this feels analogous to async generators manually <code>yield</code>ing promises","msgtype":"m.text"},"ts":1680656586571,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$xj4DrtXzFUeVB_yWTTqP5Fz74ctik-2e_Z-_NntBV9w"},
{"content":{"body":"unfortunately unwrapping means you have to `await` every value, which is kind of annoying. maybe there can be a check to see if the type of the iterator could be something `await`-able, so it's only in generic cases like the ReadableStream ctor rather than having to pay the cost of `await`ing for all async iterables? but on the other hand maybe not worth trying to optimize away the extra `await`.","format":"org.matrix.custom.html","formatted_body":"unfortunately unwrapping means you have to <code>await</code> every value, which is kind of annoying. maybe there can be a check to see if the type of the iterator could be something <code>await</code>-able, so it's only in generic cases like the ReadableStream ctor rather than having to pay the cost of <code>await</code>ing for all async iterables? but on the other hand maybe not worth trying to optimize away the extra <code>await</code>.","msgtype":"m.text"},"ts":1680656679871,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m33boGMqG_WBMSmWXPq_iJ7mj3C0ZbHnNj8WXgDFrG4"},
{"content":{"body":"anyway, I'll open a webIDL issue","msgtype":"m.text"},"ts":1680656693211,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$arVzBUQsQ0-bIwY2sSWfd_kOY_cMtAVzUYlNQz96Q10"},
{"content":{"body":"done: https://github.com/whatwg/webidl/issues/1288","msgtype":"m.text"},"ts":1680657321295,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nWHOu0JUZloX-MlkBUBw9gvhA6_UZKXtvoYJuyIWhoA"},
{"content":{"body":"(also added an edge case around error handling which occurred to me while writing it.)","msgtype":"m.text"},"ts":1680657342353,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lnyq6Orjk_gksObUvtIAwn_avNXLZbqkt7gyPdbEVmw"}
]