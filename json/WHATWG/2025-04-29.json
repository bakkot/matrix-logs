[
{"content":{"body":"okay, done :+1: ","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xrSXE8x6VujuCCMmrd2Rv5owaXDyMcD4VjmCC0scRwk"}},"msgtype":"m.text"},"ts":1745896769161,"senderName":"gingeh","senderId":"@gingeh:matrix.org","id":"$rLL1wEUY-V6WpLKANPaFrdHC5dPJBtr-pzxPQBkBsS0"},
{"content":{"body":"* okay, done üëçÔ∏è","m.mentions":{},"m.new_content":{"body":"okay, done üëçÔ∏è","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rLL1wEUY-V6WpLKANPaFrdHC5dPJBtr-pzxPQBkBsS0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1745896785428,"senderName":"gingeh","senderId":"@gingeh:matrix.org","id":"$1dCk4JBpVWPqqNTfyy2ym-bwRu-hqclbsv-eLd-3Mgs"},
{"content":{"body":"Hello everyone, I'm looking for some advice on using streams. We're maintaining a library for [resumable uploads](https://github.com/tus/tus-js-client/) and want to allow our users to upload discrete data objects (e.g. Blob, TypedArray) as well as readable streams. When a readable stream would be uploaded, its chunks are passed to the network while also buffering some data in memory to allow retransmission in case of a network interruption. To optimize the buffering, we could take advantage of readable byte streams to avoid copying data, although the process would also work with \"normal\" streams.\n\nI'm currently debating whether the library should accept ReadableStream instances from the users or reader instances (ReadableStreamBYOBReader/ReadableStreamDefaultReader). As far as I have seen, there is no way to tell if a ReadableStream is a byte stream or not (or is there?). If the library were to accept ReadableStreams, we would have to require users to specify the stream type manually in a separate option to know if we can use BYOB readers. On the other hand, if the library accepts reader instances directly, we can use `instanceof` to check its type. However, this pushes the responsibility of creating the reader onto the user.\n\nI've searched through existing Web APIs to find precedence for places where streams are accepted as arguments/options and only found the Fetch API so far, where the request body can be a ReadableStream (not a reader). So this doesn't seem to be a common pattern. Some APIs integrate streams by exposing a writeable stream that users can pipe to, but this would be cumbersome to implement in our current API, hence this wouldn't be my first choice right now.\n\nDo you have some guidance on how libraries should consume readable streams in these case? Thank you very much in advance!","format":"org.matrix.custom.html","formatted_body":"<p>Hello everyone, I'm looking for some advice on using streams. We're maintaining a library for <a href=\"https://github.com/tus/tus-js-client/\">resumable uploads</a> and want to allow our users to upload discrete data objects (e.g. Blob, TypedArray) as well as readable streams. When a readable stream would be uploaded, its chunks are passed to the network while also buffering some data in memory to allow retransmission in case of a network interruption. To optimize the buffering, we could take advantage of readable byte streams to avoid copying data, although the process would also work with \"normal\" streams.</p>\n<p>I'm currently debating whether the library should accept ReadableStream instances from the users or reader instances (ReadableStreamBYOBReader/ReadableStreamDefaultReader). As far as I have seen, there is no way to tell if a ReadableStream is a byte stream or not (or is there?). If the library were to accept ReadableStreams, we would have to require users to specify the stream type manually in a separate option to know if we can use BYOB readers. On the other hand, if the library accepts reader instances directly, we can use <code>instanceof</code> to check its type. However, this pushes the responsibility of creating the reader onto the user.</p>\n<p>I've searched through existing Web APIs to find precedence for places where streams are accepted as arguments/options and only found the Fetch API so far, where the request body can be a ReadableStream (not a reader). So this doesn't seem to be a common pattern. Some APIs integrate streams by exposing a writeable stream that users can pipe to, but this would be cumbersome to implement in our current API, hence this wouldn't be my first choice right now.</p>\n<p>Do you have some guidance on how libraries should consume readable streams in these case? Thank you very much in advance!</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1745907798552,"senderName":"Marius Kleidl","senderId":"@acconut:matrix.org","id":"$txZ0CEHmHG4wgkmG_SiMC6IR3Wh335Eue4uJFlB7hG0"},
{"content":{"body":"Mattias Buelens Domenic ^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mattiasbuelens:matrix.org\">Mattias Buelens</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> ^^","m.mentions":{"user_ids":["@mattiasbuelens:matrix.org","@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1745911671659,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$OZZq41s5bCEyhPECBH1o_HFoxHteMJNq2G9G9JtbrYo"}
]