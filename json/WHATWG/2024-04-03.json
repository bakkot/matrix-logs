[
{"content":{"body":"> <@timotijhof:matrix.org> I'm trying to preload requests for `<script type=module src=…>` via the HTTP Link header.\n> \n> I'm aware of, and have read, the past discussions around why `rel=modulepreload` was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).\n> \n> I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of \"real\" requests that will be made.\n> \n> All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by `<script type=module>`.\n> \n> In Chrome, if I use `Link: </static/foo.js>;rel=preload;as=script;crossorigin` it will correctly satisfy the later demand for `<script type=module src=foo.js>` by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).\n> \n> In Firefox, it doesn't and there's instead a duplicate request made later on.\n\nI've comment at https://github.com/whatwg/html/issues/7854#issuecomment-2033368873 instead. Hoping I've missed something and that there is at least a way to do these \"manually\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$_4_YF8Il-D4neXibFNoZh00jh7YepJvXx9q3zhRUiZU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@timotijhof:matrix.org\">@timotijhof:matrix.org</a><br><p>I'm trying to preload requests for <code>&lt;script type=module src=…&gt;</code> via the HTTP Link header.</p>\n<p>I'm aware of, and have read, the past discussions around why <code>rel=modulepreload</code> was introduced separately instead of within rel=preload. As I understand it, module requests are made with a different CORS setting, plus by signalling the module type this way, browsers can do additional optimizations (e.g. look for indirect imports and preload those as well, and honouring import maps).</p>\n<p>I'm also aware that at this time, there is no way to apply an import map to preloaded resources, which is fine, since the server-side in my case knows the flat and full list of \"real\" requests that will be made.</p>\n<p>All that having been said, I can't seem to find in the spec what rel=preload incantation will result in the preloaded result being used by <code>&lt;script type=module&gt;</code>.</p>\n<p>In Chrome, if I use <code>Link: &lt;/static/foo.js&gt;;rel=preload;as=script;crossorigin</code> it will correctly satisfy the later demand for <code>&lt;script type=module src=foo.js&gt;</code> by re-using the preload response (I can tell by the timing, the initiator, the order, and there not being a duplicat req).</p>\n<p>In Firefox, it doesn't and there's instead a duplicate request made later on.</p>\n</blockquote></mx-reply>I've comment at https://github.com/whatwg/html/issues/7854#issuecomment-2033368873 instead. Hoping I've missed something and that there is at least a way to do these \"manually\".","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$_4_YF8Il-D4neXibFNoZh00jh7YepJvXx9q3zhRUiZU"}},"msgtype":"m.text"},"ts":1712107086193,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$s5ZLAgmshRvI8UfukSQwCzgmDyJMbMHxqLTbSM1Poqc"}
]