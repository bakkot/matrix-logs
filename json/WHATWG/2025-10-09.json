[
{"content":{"body":"Yoav Weiss nicolo-ribaudo generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the `data:` URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the <code>data:</code> URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.","m.mentions":{"user_ids":["@yoavweiss:matrix.org","@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1760024860601,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$LuZ6GEZLNQCpUoYdi6_4BBSJlSMSLELrAMBMrHvFFWg"},
{"content":{"body":"tbh, I haven't followed the CSS module work, so no opinions atm..","m.mentions":{},"msgtype":"m.text"},"ts":1760026012402,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$fB0A0vdobcxGOOKeU5Ye2949fxpffffEAuR_yOx-ePY"},
{"content":{"body":"Noam Rosenthal: I'm hoping you'll post the minutes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: I'm hoping you'll post the minutes","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1760029399951,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$_YYi9oOmLYq8JWn9rPDQrBQZ_Bb7nJsSeB3gWWfAyug"},
{"content":{"body":"[Yes, wil](https://github.com/whatwg/html/issues/11747#issuecomment-3386836764)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://github.com/whatwg/html/issues/11747#issuecomment-3386836764\">Yes, wil</a>","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_YYi9oOmLYq8JWn9rPDQrBQZ_Bb7nJsSeB3gWWfAyug"}},"msgtype":"m.text"},"ts":1760030414564,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$ZpI4fpofw5F-wReDoRz-eOCr8DnkvNUDPI3eqhS_Y3Q"},
{"content":{"body":"* https://github.com/whatwg/html/issues/11747#issuecomment-3386836764","m.mentions":{},"m.new_content":{"body":"https://github.com/whatwg/html/issues/11747#issuecomment-3386836764","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZpI4fpofw5F-wReDoRz-eOCr8DnkvNUDPI3eqhS_Y3Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1760030430797,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$wS7LuZOUK-vcy-G6QbLAhtQ-_Z5CBLLs8uMOqi25xxo"},
{"content":{"body":"> <@annevk:matrix.org> Yoav Weiss nicolo-ribaudo generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the `data:` URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.\n\nNot sure exactly I understand where this is coming from, but deduplication is observable by checking the identity of the style sheet object","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$LuZ6GEZLNQCpUoYdi6_4BBSJlSMSLELrAMBMrHvFFWg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br /><a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> generally with JS module imports the URL is an observable, right? It's a thing you de-duplicate with. That seems a bit annoying with the <code>data:</code> URL approach for CSS module scripts. Although maybe the de-duplication is not strictly observable? Hmm.</blockquote></mx-reply>Not sure exactly I understand where this is coming from, but deduplication is observable by checking the identity of the style sheet object","m.relates_to":{"m.in_reply_to":{"event_id":"$LuZ6GEZLNQCpUoYdi6_4BBSJlSMSLELrAMBMrHvFFWg"}},"msgtype":"m.text"},"ts":1760032483826,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SxPWZhfAeqdLbsi8PWeyQSoa58VJszXTz9amzg1Knm8"},
{"content":{"body":"But data URLs behave in the same way for JS modules, not just css","msgtype":"m.text"},"ts":1760032515184,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ga3HJ088uYPCr84jedes0hYWprSGZR9SYkZM4Wl2d0o"},
{"content":{"body":"Hi, I'm working on (re)implementing HTMLMediaElement for the Ladybird browser, and I've noticed a few issues I'd like to sanity check before writing issues/PRs for the spec. I hope I'm in the right place!\n\nThe main thing I wanted to bring up is that the `ended` attribute and the condition under which the internal play steps seek back to the earliest position don't seem to agree with existing implementations. Specifically, when the `looped` attribute is unset, playback reaches the end, then the `looped` attribute is subsequently set, the spec seems to dictate that the `ended` attribute is then `false`, and the play steps do not seek to the earliest position. Chrome and Firefox both keep the `ended` attribute set to `true`, and seek to the start. \n\nI wonder if the `ended` attribute should be a variable set to `true` when reaching the end of playback, and then set to `false` when beginning a seek, and then the play steps should rely on the value of that attribute to dictate whether to seek to the earliest position.\n\nAlternatively perhaps, the `has ended playback` definition could specify that the `looped` attribute must only be unset when the playback first reaches the end of the resource, which I want to say would have the same effect.\n\nLet me know if there's another spec interpretation for any of this, not sure if I'm missing anything.","format":"org.matrix.custom.html","formatted_body":"<p>Hi, I'm working on (re)implementing HTMLMediaElement for the Ladybird browser, and I've noticed a few issues I'd like to sanity check before writing issues/PRs for the spec. I hope I'm in the right place!</p>\n<p>The main thing I wanted to bring up is that the <code>ended</code> attribute and the condition under which the internal play steps seek back to the earliest position don't seem to agree with existing implementations. Specifically, when the <code>looped</code> attribute is unset, playback reaches the end, then the <code>looped</code> attribute is subsequently set, the spec seems to dictate that the <code>ended</code> attribute is then <code>false</code>, and the play steps do not seek to the earliest position. Chrome and Firefox both keep the <code>ended</code> attribute set to <code>true</code>, and seek to the start.</p>\n<p>I wonder if the <code>ended</code> attribute should be a variable set to <code>true</code> when reaching the end of playback, and then set to <code>false</code> when beginning a seek, and then the play steps should rely on the value of that attribute to dictate whether to seek to the earliest position.</p>\n<p>Alternatively perhaps, the <code>has ended playback</code> definition could specify that the <code>looped</code> attribute must only be unset when the playback first reaches the end of the resource, which I want to say would have the same effect.</p>\n<p>Let me know if there's another spec interpretation for any of this, not sure if I'm missing anything.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1760037250532,"senderName":"zaggy1024","senderId":"@zaggy1024:matrix.org","id":"$NgwoQhQYa0yTAOAbJMKdX-FPojJM-LtnBREppGNJoNs"}
]