[
{"content":{"body":"RFC: I wrote an emoji proposal for \"semla\" (as requested by my wife): https://docs.google.com/document/d/1aw0Md2v7twwmj1DMjh5ryBEjt32sJx4tGb3w4rV7NCo/edit?usp=sharing\n\nSubmissions are accepted from 2025-04-02 apparently https://unicode.org/emoji/proposals.html","m.mentions":{},"msgtype":"m.text"},"ts":1740013946834,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$3_uE58owkTPBlb4CB09oy2hzmhdnBvM8hsQps24lLZM"},
{"content":{"body":"Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.","m.mentions":{},"msgtype":"m.text"},"ts":1740050758107,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Gi5Gw5CTQvIL9_3aoJ0m39usFx541rPLtogFouE1wfE"},
{"content":{"body":"zcorpan: can you also get bitterballen added?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: can you also get bitterballen added?","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1740051345580,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$gTBa9x9eKganEBcjY5SGZ7igVZiY-fEg70nBk41VqSc"},
{"content":{"body":"annevk: do you have evidence of demand? :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: do you have evidence of demand? :)","m.mentions":{"user_ids":["@annevk:matrix.org"]},"msgtype":"m.text"},"ts":1740053322805,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$J1_0wAGMX15DHD_czr76t_O5pg4UXa0h8Azzg2x5Nc4"},
{"content":{"body":"> <@annevk:matrix.org> Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.\n\nYeah apologies. That auto state change seemed to break things a bit and not get caught","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Gi5Gw5CTQvIL9_3aoJ0m39usFx541rPLtogFouE1wfE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br />Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.</blockquote></mx-reply>Yeah apologies. That auto state change seemed to break things a bit and not get caught","m.relates_to":{"m.in_reply_to":{"event_id":"$Gi5Gw5CTQvIL9_3aoJ0m39usFx541rPLtogFouE1wfE"}},"msgtype":"m.text"},"ts":1740053419233,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$z8r0V3A1yltS73wg6fp3hnINXB_kNRYZqrj8OAeS4gA"},
{"content":{"body":"* Yeah apologies. That auto state change seemed to break things a bit and not get caught. + Some last minute feedback about desired behaviours also meant a slightly bigger normative change in that last PR I've put up","m.new_content":{"body":"> <@annevk:matrix.org> Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.\n\nYeah apologies. That auto state change seemed to break things a bit and not get caught. + Some last minute feedback about desired behaviours also meant a slightly bigger normative change in that last PR I've put up","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Gi5Gw5CTQvIL9_3aoJ0m39usFx541rPLtogFouE1wfE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a><br />Hmm well I guess command/commandfor landed too quickly after all. :-( That's way too many regressions for something that's supposed to be a standard.</blockquote></mx-reply>Yeah apologies. That auto state change seemed to break things a bit and not get caught. + Some last minute feedback about desired behaviours also meant a slightly bigger normative change in that last PR I've put up","msgtype":"m.text"},"m.relates_to":{"event_id":"$z8r0V3A1yltS73wg6fp3hnINXB_kNRYZqrj8OAeS4gA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740053468809,"senderName":"Luke Warlow","senderId":"@lwarlow:igalia.com","id":"$GoJvCvm9xRukxek06sA1QBe4dfiYgkkSadKVO-ycZwY"},
{"content":{"body":"I wonder if folks here can help me with some IDL. Say I have a method `importNode` that takes a `Node` _node_ and a boolean or a dictionary _options_. The dictionary has two members: `subtree` and `customElements`.\n\nI want the semantics to be like this:\n\n- `importNode(node, false)` == `importNode(node, { subtree: false })`\n- `importNode(node, true)` == `importNode(node, { subtree: true })`\n- `importNode(node)` == `importNode(node, { subtree: false })`\n- `importNode(node, undefined)` == `importNode(node, { subtree: false })`\n- `importNode(node, { customElements })` == `importNode(node, { subtree: true, customElements })`\n- `importNode(node, { })` == `importNode(node, { subtree: true })`\n- `importNode(node, aRandomObject)` == `importNode(node, { subtree: true })` (I think this is the same case as `{ }`)\n\nAt least that would generally match how it behaves today when an object is passed instead of a boolean.\n\nThe path of least resistance is probably to not handle empty dictionary differently from undefined, but curious if people have thoughts. (Opinions are fine too.) cc smaug Domenic keithamus","format":"org.matrix.custom.html","formatted_body":"<p>I wonder if folks here can help me with some IDL. Say I have a method <code>importNode</code> that takes a <code>Node</code> <em>node</em> and a boolean or a dictionary <em>options</em>. The dictionary has two members: <code>subtree</code> and <code>customElements</code>.</p>\n<p>I want the semantics to be like this:</p>\n<ul>\n<li><code>importNode(node, false)</code> == <code>importNode(node, { subtree: false })</code></li>\n<li><code>importNode(node, true)</code> == <code>importNode(node, { subtree: true })</code></li>\n<li><code>importNode(node)</code> == <code>importNode(node, { subtree: false })</code></li>\n<li><code>importNode(node, undefined)</code> == <code>importNode(node, { subtree: false })</code></li>\n<li><code>importNode(node, { customElements })</code> == <code>importNode(node, { subtree: true, customElements })</code></li>\n<li><code>importNode(node, { })</code> == <code>importNode(node, { subtree: true })</code></li>\n<li><code>importNode(node, aRandomObject)</code> == <code>importNode(node, { subtree: true })</code> (I think this is the same case as <code>{ }</code>)</li>\n</ul>\n<p>At least that would generally match how it behaves today when an object is passed instead of a boolean.</p>\n<p>The path of least resistance is probably to not handle empty dictionary differently from undefined, but curious if people have thoughts. (Opinions are fine too.) cc <a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> <a href=\"https://matrix.to/#/@keithamus:matrix.org\">keithamus</a></p>\n","m.mentions":{"user_ids":["@smaug:mozilla.org","@domenicdenicola:matrix.org","@keithamus:matrix.org"]},"msgtype":"m.text"},"ts":1740074470658,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$jAKlALYcPJmL5Zl3phvjkwFzPpcZNfQCYc6dY-_l1qU"},
{"content":{"body":"So `subtree` would default to `true` unless explicitly set to `false`?","format":"org.matrix.custom.html","formatted_body":"So <code>subtree</code> would default to <code>true</code> unless explicitly set to <code>false</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740074591345,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$XXJXttog2DKfeaAC1jQuSuJaULEjfd3N5ylDu6anK6w"},
{"content":{"body":"So it would be defined something a bit like...\n\n```\ndictionary ImportNodeOptions {\n  boolean subtree = true;\n  CustomElementRegistry customElements = null;\n};\n\nimportNode(Node node, optional (ImportNodeOptions or boolean) options = false)\n```\n\nI think?","format":"org.matrix.custom.html","formatted_body":"<p>So it would be defined something a bit like...</p>\n<pre><code>dictionary ImportNodeOptions {\n  boolean subtree = true;\n  CustomElementRegistry customElements = null;\n};\n\nimportNode(Node node, optional (ImportNodeOptions or boolean) options = false)\n</code></pre>\n<p>I think?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740075007488,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$sER27d4z4_-XWd4YBd5-5orcSs75QGfNiOJIuUn45gA"},
{"content":{"body":"It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary `captures = false`?","format":"org.matrix.custom.html","formatted_body":"It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary <code>captures = false</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740075092598,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$fnH1mTk6wsT7wu7-2smljdZm0goEcCW5OTRGRjlGuAY"},
{"content":{"body":"* It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary `capture = false`.","format":"org.matrix.custom.html","formatted_body":"* It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary <code>capture = false</code>.","m.mentions":{},"m.new_content":{"body":"It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary `capture = false`.","format":"org.matrix.custom.html","formatted_body":"It seems reasonable to me at least. I think boolean properties defaulting to false is a little weird - especially as I think the only other similar API is addEventListener? Where if you pass a dictionary <code>capture = false</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fnH1mTk6wsT7wu7-2smljdZm0goEcCW5OTRGRjlGuAY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740075132387,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$DYm9D6ykDsOE64UhIouQzakGRQbQcsvTsS6mYjdxVPE"},
{"content":{"body":"The dictionary member name can prolly be inverted to account for that. I'm mainly wondering whether this is something we want to do and if this actually works in IDL (I haven't tried your option, I'm not sure if that runs counter to requirements around dictionaries defaulting to { }).","m.mentions":{},"msgtype":"m.text"},"ts":1740075338717,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$h1jFzWZicRI29MahdwPpW_sNdCpLayvpj3BL8iLtwdk"},
{"content":{"body":"This case is a bit different from capture in that people want subtree to be true by default. (Or have a selfOnly that defaults to false instead of true, however you want to put it.) Nobody wanted that for capture.","m.mentions":{},"msgtype":"m.text"},"ts":1740075412398,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$b4WOI03vNRnXntb7nnyltBFJECrXz9WpeP4HwkWxnIg"},
{"content":{"body":"From a developer perspective I think the dictionary member defaulting to true is perhaps less confusing than inverting the argument (e.g. `selfOnly = false`). I understand that `capture` was intentionally `false` I am just trying to think of how existing intuitions might map.","format":"org.matrix.custom.html","formatted_body":"From a developer perspective I think the dictionary member defaulting to true is perhaps less confusing than inverting the argument (e.g. <code>selfOnly = false</code>). I understand that <code>capture</code> was intentionally <code>false</code> I am just trying to think of how existing intuitions might map.","m.mentions":{},"msgtype":"m.text"},"ts":1740075656456,"senderName":"keithamus","senderId":"@keithamus:matrix.org","id":"$S4nJC-C4AeK_hi0BMz-WB-IZs_VLHDs7HkTXIqNuaFw"}
]