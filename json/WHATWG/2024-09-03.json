[
{"content":{"body":"Very slightly related to import maps. I talked to someone about Subresource Integrity and they complained that `<script src=.. integrity..>` has no declarative fallback to a canonical/fallback URL if the `src` resource doesn't match. E.g., point to CDN for speed but fallback to same-origin resource for robustness. I recall that we cut `fallbacksrc` (name TBD) out of SRI v1 for a couple of reason. The main one I remember is that I was too cautious to break assumptions w/ HTML/XSS sanitizers and other security libraries. Essentially not allowing a \"new\" XSS vector like `<script src=x integrity=x fallbacksrc=xssurl>`.","format":"org.matrix.custom.html","formatted_body":"Very slightly related to import maps. I talked to someone about Subresource Integrity and they complained that <code>&lt;script src=.. integrity..&gt;</code> has no declarative fallback to a canonical/fallback URL if the <code>src</code> resource doesn't match. E.g., point to CDN for speed but fallback to same-origin resource for robustness. I recall that we cut <code>fallbacksrc</code> (name TBD) out of SRI v1 for a couple of reason. The main one I remember is that I was too cautious to break assumptions w/ HTML/XSS sanitizers and other security libraries. Essentially not allowing a \"new\" XSS vector like <code>&lt;script src=x integrity=x fallbacksrc=xssurl&gt;</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1725345213924,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$rW_guIH0R-RNl397nAKgfChZ77rar2lzk5cG3iibh8A"},
{"content":{"body":"I wonder if fallback-URLs would be an interesting thing to consider for import maps, as their syntax is not in HTML and less likely to break assumptions (because most libraries will block/remove inline `<script>`, likely including those of type import maps)","format":"org.matrix.custom.html","formatted_body":"I wonder if fallback-URLs would be an interesting thing to consider for import maps, as their syntax is not in HTML and less likely to break assumptions (because most libraries will block/remove inline <code>&lt;script&gt;</code>, likely including those of type import maps)","m.mentions":{},"msgtype":"m.text"},"ts":1725345289872,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$Ypfhtq78TLG8lO-K8oqIXovndK2d8Psjm54wgrVgzMs"},
{"content":{"body":"freddy: I guess that could fit into importmaps somehow, but would only work for modules. At the same time, I'm not sure the use case is worth the complexity. Is this a real issue people are trying to solve for? Can they do that with e.g. onerror handlers that rewrite the `src`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@fbraun:mozilla.org\">freddy</a>: I guess that could fit into importmaps somehow, but would only work for modules. At the same time, I'm not sure the use case is worth the complexity. Is this a real issue people are trying to solve for? Can they do that with e.g. onerror handlers that rewrite the <code>src</code>?","m.mentions":{"user_ids":["@fbraun:mozilla.org"]},"msgtype":"m.text"},"ts":1725362414190,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$TQTz6lZ53nrMwKXzy_YJwhmINauQTJJ3TdRTafPKliI"},
{"content":{"body":"they _can_ solve it with onerror handlers, but it requires more script","format":"org.matrix.custom.html","formatted_body":"they <em>can</em> solve it with onerror handlers, but it requires more script","m.mentions":{},"msgtype":"m.text"},"ts":1725362437524,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$IbOaCFztqpvRHBCODs8ZaHXvqjyDM3YAdjxJLuRgbpo"},
{"content":{"body":"(script that needs to load first. stuff you originally set out to put on a CDN)","m.mentions":{},"msgtype":"m.text"},"ts":1725362455758,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$86MnRAvIRZ-NyKyh301YMHxAMnpa5mc80LDkonbLRBw"},
{"content":{"body":"(beyond that, I don't see the onerror event firing.. https://iron-organic-rainstorm.glitch.me/)","m.mentions":{},"msgtype":"m.text"},"ts":1725363337675,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$shL4rO4F0TXEH9g_f-FOwofJmWpt-z_rIF1GnwLnR_c"},
{"content":{"body":"huh..","m.mentions":{},"msgtype":"m.text"},"ts":1725365303566,"senderName":"freddy","senderId":"@fbraun:mozilla.org","id":"$w4nd-HNHtHI5Xi9IfjlUecMviTiyU208db31V2gyqxw"},
{"content":{"body":"Yoav Weiss: I think it should, step 4 in https://html.spec.whatwg.org/#execute-the-script-element , called from https://html.spec.whatwg.org/#script-processing-model:execute-the-script-element-3","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>: I think it should, step 4 in https://html.spec.whatwg.org/#execute-the-script-element , called from https://html.spec.whatwg.org/#script-processing-model:execute-the-script-element-3","m.mentions":{"user_ids":["@yoavweiss:matrix.org"]},"msgtype":"m.text"},"ts":1725366545894,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$cr_mUNSAMplEZSTxIfj6215hsfOoF0M8eeg8kgh0dsI"},
{"content":{"body":"(or maybe not called from there, since it's parser inserted)","m.mentions":{},"msgtype":"m.text"},"ts":1725366613540,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$MaC05nLJFGFZeeY74HKQHBKUrstvDlMIMq-4HZ2VvgI"},
{"content":{"body":"#parsing-main-incdata:execute-the-script-element","m.mentions":{},"msgtype":"m.text"},"ts":1725366704043,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$U4Bf66WhfakXcMXnB7VNH3V2EZVNmMFyobSV8Sf7daY"},
{"content":{"body":"Yoav Weiss: you're not calling the functions :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>: you're not calling the functions :)","m.mentions":{"user_ids":["@yoavweiss:matrix.org"]},"msgtype":"m.text"},"ts":1725366994978,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$oFaPQdNCOV6HZAnrw522XKsNZDuXg4LEaTwevIjChts"},
{"content":{"body":"with `onerror=\"errorHandler(event)\"` it wfm","format":"org.matrix.custom.html","formatted_body":"with <code>onerror=\"errorHandler(event)\"</code> it wfm","m.mentions":{},"msgtype":"m.text"},"ts":1725367094705,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$qktK_f8k0k3xTD6O6AzeLt5C2PCl_Oeoeq4xAvYEdMo"},
{"content":{"body":"ðŸ¤¦","m.mentions":{},"msgtype":"m.text"},"ts":1725370195559,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$89wj2b5IDrDHTKIl8kpZbtoNJtzfnJ75ihgw3OV302g"},
{"content":{"body":"Hi, I am wondering what is the rationale behind the difference between`location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","format":"org.matrix.custom.html","formatted_body":"Hi, I am wondering what is the rationale behind the difference between<code>location.href</code> and <code>document.URL</code> when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since <code>Location</code> object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat <code>Document</code> as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","m.mentions":{},"msgtype":"m.text"},"ts":1725381274066,"senderName":"govocin165","senderId":"@govocin165:matrix.org","id":"$dViKn1jEiaqpAyV7o49ueX1hCRGeAR2KrK6E7Uf5ye8"},
{"content":{"body":" * Hi, I am wondering what is the rationale behind the difference between `location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","format":"org.matrix.custom.html","formatted_body":" * Hi, I am wondering what is the rationale behind the difference between <code>location.href</code> and <code>document.URL</code> when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since <code>Location</code> object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat <code>Document</code> as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","m.mentions":{},"m.new_content":{"body":"Hi, I am wondering what is the rationale behind the difference between `location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","format":"org.matrix.custom.html","formatted_body":"Hi, I am wondering what is the rationale behind the difference between <code>location.href</code> and <code>document.URL</code> when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since <code>Location</code> object provides developers a way to navigate through links, therefore there are security concerns and credentials need to be redacted. And since browsers treat <code>Document</code> as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dViKn1jEiaqpAyV7o49ueX1hCRGeAR2KrK6E7Uf5ye8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725381298293,"senderName":"govocin165","senderId":"@govocin165:matrix.org","id":"$crJ6RfYIY8EBgO7yfEmq1hkChTiS9mM4UkWYwMIC1po"},
{"content":{"body":" * Hi, I am wondering what is the rationale behind the difference between `location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","format":"org.matrix.custom.html","formatted_body":" * Hi, I am wondering what is the rationale behind the difference between <code>location.href</code> and <code>document.URL</code> when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since <code>Location</code> object provides developers a way to navigate through links, there are security concerns and credentials need to be redacted. And since browsers treat <code>Document</code> as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","m.mentions":{},"m.new_content":{"body":"Hi, I am wondering what is the rationale behind the difference between `location.href` and `document.URL` when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since `Location` object provides developers a way to navigate through links, there are security concerns and credentials need to be redacted. And since browsers treat `Document` as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","format":"org.matrix.custom.html","formatted_body":"Hi, I am wondering what is the rationale behind the difference between <code>location.href</code> and <code>document.URL</code> when credentials are embedded (e.g. https://foo:bar@example.com). Using the former would return an URl without credentials (http://example.com) and the latter would give me the full URL. My best guess here is that since <code>Location</code> object provides developers a way to navigate through links, there are security concerns and credentials need to be redacted. And since browsers treat <code>Document</code> as an abstraction for the current web document, the property is readonly and not redacted. Could someone kindly disprove or verify my theory? Thanks in advance!","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dViKn1jEiaqpAyV7o49ueX1hCRGeAR2KrK6E7Uf5ye8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725381957071,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$CRbcqYCJsxBeupJNhQVgGWbvgg4IsLGgMsZdBhg1qt8"},
{"content":{"body":"Meo: that seems like a bug. They are defined to be identical.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: that seems like a bug. They are defined to be identical.","m.mentions":{"user_ids":["@govocin165:matrix.org"]},"msgtype":"m.text"},"ts":1725387623435,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$sNFQxW84PaU_59CDF6B_qe2_p_MMoTJ-HkF2LNB1aWs"},
{"content":{"body":"> <@annevk:matrix.org> Meo: that seems like a bug. They are defined to be identical.\n\nI don't think that's the case for Chrome (128.0.6613.113). As I just tried few moments ago, it gives out different results.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$sNFQxW84PaU_59CDF6B_qe2_p_MMoTJ-HkF2LNB1aWs?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: that seems like a bug. They are defined to be identical.</blockquote></mx-reply>I don't think that's the case for Chrome (128.0.6613.113). As I just tried few moments ago, it gives out different results.","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sNFQxW84PaU_59CDF6B_qe2_p_MMoTJ-HkF2LNB1aWs"}},"msgtype":"m.text"},"ts":1725388932637,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$sSbK7phLcCmWO6plB9ZAF4nyKEFpaliE5jB8C6adCEI"},
{"content":{"body":"Meo: I'd file a bug against Chrome (and other browsers that exhibit that behavior). Potentially if all browsers do this we need to investigate this at the specification level (file an issue against the HTML Standard for that), but it doesn't seem like something we'd want to standardize as it doesn't make a whole lot of sense.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: I'd file a bug against Chrome (and other browsers that exhibit that behavior). Potentially if all browsers do this we need to investigate this at the specification level (file an issue against the HTML Standard for that), but it doesn't seem like something we'd want to standardize as it doesn't make a whole lot of sense.","m.mentions":{"user_ids":["@govocin165:matrix.org"]},"msgtype":"m.text"},"ts":1725389592917,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$39uKMXpLQTWaLGF6j010LP7XcN3TltOtOqI5KMys5ek"},
{"content":{"body":"> <@annevk:matrix.org> Meo: that seems like a bug. They are defined to be identical.\n\nBy the way, could you please kindly shed some light on which part of the spec specify on this? Because in my opinion, if 'they are defined to be identical' then it is already something standardized? Please kindly correct me if I am wrong.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$sNFQxW84PaU_59CDF6B_qe2_p_MMoTJ-HkF2LNB1aWs?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: that seems like a bug. They are defined to be identical.</blockquote></mx-reply>By the way, could you please kindly shed some light on which part of the spec specify on this? Because in my opinion, if 'they are defined to be identical' then it is already something standardized? Please kindly correct me if I am wrong.","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sNFQxW84PaU_59CDF6B_qe2_p_MMoTJ-HkF2LNB1aWs"}},"msgtype":"m.text"},"ts":1725389777904,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$IuNRXAkrEUzEP7bgVQ8WXt47LNtsJGhgl9pWRF0Twao"},
{"content":{"body":"annevk","m.mentions":{},"msgtype":"m.text"},"ts":1725390007516,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$Efu81gPLpagTNjTigh9AkF7p2JEagLDpRmgfsACngAc"},
{"content":{"body":" * Thanks!","m.mentions":{},"m.new_content":{"body":"Thanks!","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Efu81gPLpagTNjTigh9AkF7p2JEagLDpRmgfsACngAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725390012095,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$wH1ctic7uE8u4pbqaDVLaFQTv7umu28IzeQ49UhZ1k4"},
{"content":{"body":"Meo: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in `href` getter which states you can just omit parts of the URL)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in <code>href</code> getter which states you can just omit parts of the URL)","m.mentions":{"user_ids":["@govocin165:matrix.org"]},"msgtype":"m.text"},"ts":1725391030491,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$TlwGr4SkbNyktZ2pkkaM43cDJS2Dh5_27ZNy2EDhQGo"},
{"content":{"body":" * Meo: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in `href`'s getter which states you can just omit parts of the URL)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in <code>href</code>'s getter which states you can just omit parts of the URL)","m.mentions":{},"m.new_content":{"body":"Meo: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in `href`'s getter which states you can just omit parts of the URL)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in <code>href</code>'s getter which states you can just omit parts of the URL)","m.mentions":{"user_ids":["@govocin165:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TlwGr4SkbNyktZ2pkkaM43cDJS2Dh5_27ZNy2EDhQGo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725391110125,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$8kjkVw-4aJ05E7MMIZvVchgUB7fUYwQe9-ySImsBui8"},
{"content":{"body":"> <@annevk:matrix.org> Meo: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in `href`'s getter which states you can just omit parts of the URL)\n\nThanks for the link. If I understand it correctly, the associated URL `location.href` should be the same as `document.URL`? If that's the case then almost all web browsers violated this spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$TlwGr4SkbNyktZ2pkkaM43cDJS2Dh5_27ZNy2EDhQGo?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@govocin165:matrix.org\">Meo</a>: https://html.spec.whatwg.org/multipage/nav-history-apis.html#concept-location-url (and then there's nothing in <code>href</code>'s getter which states you can just omit parts of the URL)</blockquote></mx-reply>Thanks for the link. If I understand it correctly, the associated URL <code>location.href</code> should be the same as <code>document.URL</code>? If that's the case then almost all web browsers violated this spec.","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TlwGr4SkbNyktZ2pkkaM43cDJS2Dh5_27ZNy2EDhQGo"}},"msgtype":"m.text"},"ts":1725391204277,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$HJZ9tGdRW0hY8jOA6ylFZ93GWdPNDEhSbc0eiMEVaTE"},
{"content":{"body":"Sine from the multiple browser sources I read, Firefox implemented this redaction since pre-1.0 era. Chromium did it ~2010, and WebKit followed sometime later.","m.mentions":{},"msgtype":"m.text"},"ts":1725391240583,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$1mGwV7o2eJBFSTLxmhqNavqOjmrqEq4OvCx9k3Fu7Q8"},
{"content":{"body":" * Since from the multiple browser sources I read, Firefox implemented this redaction since pre-1.0 era. Chromium did it ~2010, and WebKit followed sometime later.","m.mentions":{},"m.new_content":{"body":"Since from the multiple browser sources I read, Firefox implemented this redaction since pre-1.0 era. Chromium did it ~2010, and WebKit followed sometime later.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1mGwV7o2eJBFSTLxmhqNavqOjmrqEq4OvCx9k3Fu7Q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725391268107,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$x8iqh8Vmqj_TumF34IUNveGYB4WR4m_V4R7o2l63OfE"},
{"content":{"body":" * From the multiple browser sources I read, Firefox implemented this redaction since pre-1.0 era. Chromium did it ~2010, and WebKit followed sometime later.","m.mentions":{},"m.new_content":{"body":"From the multiple browser sources I read, Firefox implemented this redaction since pre-1.0 era. Chromium did it ~2010, and WebKit followed sometime later.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1mGwV7o2eJBFSTLxmhqNavqOjmrqEq4OvCx9k3Fu7Q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725391636057,"senderName":"Meo","senderId":"@govocin165:matrix.org","id":"$XNv6ygG5rcQBt-_Er3sRLixc-OxFiRvIpZ5T_CK5tbM"},
{"content":{"body":"Hey folks! I might have missed this in the spec, but it seems that all browsers will automatically show subtitles if the `video` element has a `track` with the `default` boolean attribute. Is this in the specification and I missed it, or is this not yet documented as the intended behaviour? Thanks!","format":"org.matrix.custom.html","formatted_body":"Hey folks! I might have missed this in the spec, but it seems that all browsers will automatically show subtitles if the <code>video</code> element has a <code>track</code> with the <code>default</code> boolean attribute. Is this in the specification and I missed it, or is this not yet documented as the intended behaviour? Thanks!","m.mentions":{},"msgtype":"m.text"},"ts":1725392633071,"senderName":"Schalk Neethling","senderId":"@schalk_neethling:matrix.org","id":"$Z1ksIwPqe8ub9RCOdaLGezwTqdCLHUMPE61Sg9Z8BEw"}
]