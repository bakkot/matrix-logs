[
{"content":{"body":"> <@kaiido:matrix.org> Noam Rosenthal: I'm quite confused by this message about `nextEvent`. If you init your event as `cancelable` then you can very well call `preventDefault()` on it, it even sets the return value of `dispatchEvent()`. Also I'm not sure how `stop[Immediate]Propagation` would be an issue for a `nextEvent()`, which I assume would be a kind of \"after non-capture\" phase, and would thus possibly only prevent other `nextEvent()` listeners. Or did you envision a second round of the whole dispatching with all 3 phases?  \n> The issue I see would actually be with the return value of `dispatchEvent()`, and maybe it's what you were hinting at? Dispatchers could wait for one more microtask before checking the event's `defaultPrevented` but that seems indeed problematic that listeners don't know if the dispatcher will receive the info in time.\n\nI haven't thought of all the details here, just that something that turns \"once\" events into promises could be useful in some scenarios ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs%3Amatrix.org/%24tIgFrP08TU0QmbGQnPGtFFfguBjuDZcofy0PvgbRK6k\">In reply to</a> <a href=\"https://matrix.to/#/@kaiido:matrix.org\">@kaiido:matrix.org</a><br><a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: I'm quite confused by this message about <code>nextEvent</code>. If you init your event as <code>cancelable</code> then you can very well call <code>preventDefault()</code> on it, it even sets the return value of <code>dispatchEvent()</code>. Also I'm not sure how <code>stop[Immediate]Propagation</code> would be an issue for a <code>nextEvent()</code>, which I assume would be a kind of \"after non-capture\" phase, and would thus possibly only prevent other <code>nextEvent()</code> listeners. Or did you envision a second round of the whole dispatching with all 3 phases?<br>\nThe issue I see would actually be with the return value of <code>dispatchEvent()</code>, and maybe it's what you were hinting at? Dispatchers could wait for one more microtask before checking the event's <code>defaultPrevented</code> but that seems indeed problematic that listeners don't know if the dispatcher will receive the info in time.</blockquote></mx-reply>I haven't thought of all the details here, just that something that turns &quot;once&quot; events into promises could be useful in some scenarios","m.relates_to":{"m.in_reply_to":{"event_id":"$tIgFrP08TU0QmbGQnPGtFFfguBjuDZcofy0PvgbRK6k"}},"msgtype":"m.text"},"ts":1736923572933,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$lE18ULFol5tLi5DK2fbizC4zgeVps1skMwKGThjgaMk"}
]