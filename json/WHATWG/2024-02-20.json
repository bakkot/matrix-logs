[
{"content":{"body":"hsivonen: https://github.com/validator/htmlparser/pull/91","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: https://github.com/validator/htmlparser/pull/91","m.mentions":{"user_ids":["@hsivonen:mozilla.org"]},"msgtype":"m.text"},"ts":1708390746916,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$51FlZB5s7uoJEw5toqUqwkDJgcYKhGX74lOmanr3Xb4"},
{"content":{"body":"> <@noamr:matrix.org> zcorpan: how about `<link rel=expect idref=foo blocking=render>`? It's a tad more verbose, but then we can use IDRefs for future \"internal resource links\", they don't have to be \"expect\", and it feels a bit more consistent with links.\n\nThat seems OK","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$eguXj9HKDHEO9y-zALBq9j5fdJfFyMJNjUtalZ7WNdo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@noamr:matrix.org\">@noamr:matrix.org</a><br><a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: how about <code>&lt;link rel=expect idref=foo blocking=render&gt;</code>? It's a tad more verbose, but then we can use IDRefs for future \"internal resource links\", they don't have to be \"expect\", and it feels a bit more consistent with links.</blockquote></mx-reply>That seems OK","m.mentions":{"user_ids":["@noamr:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eguXj9HKDHEO9y-zALBq9j5fdJfFyMJNjUtalZ7WNdo"}},"msgtype":"m.text"},"ts":1708420200171,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$xtolOfstF0qhQ2D1IOsP5TkhpOZ4W2ZPRMB-piCwwbI"},
{"content":{"body":"Maybe confusing if it only works for `rel=expect` though","format":"org.matrix.custom.html","formatted_body":"Maybe confusing if it only works for <code>rel=expect</code> though","m.mentions":{},"msgtype":"m.text"},"ts":1708420323934,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$UI_HXLBgWjOYlt9buEVd-i4AesOx5iLpdenIfDaeDnU"},
{"content":{"body":"zcorpan: after internal discussion we thought it could be `element=foo` instead of `idref=foo`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: after internal discussion we thought it could be <code>element=foo</code> instead of <code>idref=foo</code>","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"msgtype":"m.text"},"ts":1708421818410,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$3Dy40lBXN-dAe0R89U4AhaFI856lVyAfAIJWkHEMxQQ"},
{"content":{"body":"It would work only for `expect` initially, but no reason why it can't be used for future internal links if the need arises","format":"org.matrix.custom.html","formatted_body":"It would work only for <code>expect</code> initially, but no reason why it can't be used for future internal links if the need arises","m.mentions":{},"msgtype":"m.text"},"ts":1708421848453,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$KEp0TMwn-ka9935hRiJoL4NhhVwRb_jkvSdFy1hBOV0"},
{"content":{"body":"Noam Rosenthal: yeah, SGTM","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a>: yeah, SGTM","m.mentions":{"user_ids":["@noamr:matrix.org"]},"msgtype":"m.text"},"ts":1708421908724,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$vA6sM566PeT2bGueMJoI_H7XV67jYnoOu6WjL9X_guQ"},
{"content":{"body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for `html5lib._inputstream.HTMLUnicodeInputStream.charsUntil` docstring states that `'characters' must be a container that supports the 'in' method and iteration over its characters.`. Since there's two `in` operators in Python, are we talking about `__contains__` or just that it should be `Iterable`? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","format":"org.matrix.custom.html","formatted_body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for <code>html5lib._inputstream.HTMLUnicodeInputStream.charsUntil</code> docstring states that <code>'characters' must be a container that supports the 'in' method and iteration over its characters.</code>. Since there's two <code>in</code> operators in Python, are we talking about <code>__contains__</code> or just that it should be <code>Iterable</code>? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","m.mentions":{},"msgtype":"m.text"},"ts":1708452247879,"senderName":"Avasam","senderId":"@avasam:matrix.org","id":"$qmbY8vx3r1fPV2A_ZlftxOCM7_rG7O5lljHPUjqOHmY"},
{"content":{"body":" * Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for `html5lib._inputstream.HTMLUnicodeInputStream.charsUntil` states that `'characters' must be a container that supports the 'in' method and iteration over its characters.`. Since there's two `in` operators in Python, are we talking about `__contains__` or just that it should be `Iterable`? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","format":"org.matrix.custom.html","formatted_body":" * Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for <code>html5lib._inputstream.HTMLUnicodeInputStream.charsUntil</code> states that <code>'characters' must be a container that supports the 'in' method and iteration over its characters.</code>. Since there's two <code>in</code> operators in Python, are we talking about <code>__contains__</code> or just that it should be <code>Iterable</code>? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","m.mentions":{},"m.new_content":{"body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for `html5lib._inputstream.HTMLUnicodeInputStream.charsUntil` states that `'characters' must be a container that supports the 'in' method and iteration over its characters.`. Since there's two `in` operators in Python, are we talking about `__contains__` or just that it should be `Iterable`? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","format":"org.matrix.custom.html","formatted_body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for <code>html5lib._inputstream.HTMLUnicodeInputStream.charsUntil</code> states that <code>'characters' must be a container that supports the 'in' method and iteration over its characters.</code>. Since there's two <code>in</code> operators in Python, are we talking about <code>__contains__</code> or just that it should be <code>Iterable</code>? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qmbY8vx3r1fPV2A_ZlftxOCM7_rG7O5lljHPUjqOHmY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1708452260155,"senderName":"Avasam","senderId":"@avasam:matrix.org","id":"$qPl6mL1RTXY-iWxp7GqNcxum0E4GoUcE18ov8_fOwxs"},
{"content":{"body":" * Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for `html5lib._inputstream.HTMLUnicodeInputStream.charsUntil` states that `'characters' must be a container that supports the 'in' method and iteration over its characters`. Since there's two `in` operators in Python, are we talking about `__contains__` or just that it should be `Iterable`? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","format":"org.matrix.custom.html","formatted_body":" * Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for <code>html5lib._inputstream.HTMLUnicodeInputStream.charsUntil</code> states that <code>'characters' must be a container that supports the 'in' method and iteration over its characters</code>. Since there's two <code>in</code> operators in Python, are we talking about <code>__contains__</code> or just that it should be <code>Iterable</code>? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","m.mentions":{},"m.new_content":{"body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for `html5lib._inputstream.HTMLUnicodeInputStream.charsUntil` states that `'characters' must be a container that supports the 'in' method and iteration over its characters`. Since there's two `in` operators in Python, are we talking about `__contains__` or just that it should be `Iterable`? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","format":"org.matrix.custom.html","formatted_body":"Hi! Quick html5lib-python question in the context of typing-annotations for typeshed. The docstring for <code>html5lib._inputstream.HTMLUnicodeInputStream.charsUntil</code> states that <code>'characters' must be a container that supports the 'in' method and iteration over its characters</code>. Since there's two <code>in</code> operators in Python, are we talking about <code>__contains__</code> or just that it should be <code>Iterable</code>? (or both). Looking at the implementation, it's just iterable, but it's contractually vague according to the docstring.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qmbY8vx3r1fPV2A_ZlftxOCM7_rG7O5lljHPUjqOHmY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1708452272041,"senderName":"Avasam","senderId":"@avasam:matrix.org","id":"$RFsLrUjTLb0RXdJRkc1A9GsF8IDvBUdgnDitr2YWe1k"}
]