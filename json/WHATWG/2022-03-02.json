[
{"content":{"body":"annevk: https://stackoverflow.com/questions/71311305/how-to-prevent-safari-from-dropping-the-authorization-header-when-following-a-re\n> Safari seems to drop the `Authorization` header when following a [same-origin] 301 redirect... Chrome (98) and Firefox (97) both follow the redirect and include the `Authorization` header in the subsequent `GET` request.\n\nWonder what behavior the spec requires here","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: https://stackoverflow.com/questions/71311305/how-to-prevent-safari-from-dropping-the-authorization-header-when-following-a-re</p>\n<blockquote>\n<p>Safari seems to drop the <code>Authorization</code> header when following a [same-origin] 301 redirect... Chrome (98) and Firefox (97) both follow the redirect and include the <code>Authorization</code> header in the subsequent <code>GET</code> request.</p>\n</blockquote>\n<p>Wonder what behavior the spec requires here</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: https://stackoverflow.com/questions/71311305/how-to-prevent-safari-from-dropping-the-authorization-header-when-following-a-re\n> Safari seems to drop the `Authorization` header when following a [same-origin] 301 redirect... Chrome (98) and Firefox (97) both follow the redirect and include the `Authorization` header in the subsequent `GET` request.\n\nWonder what behavior the spec requires here","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: https://stackoverflow.com/questions/71311305/how-to-prevent-safari-from-dropping-the-authorization-header-when-following-a-re</p>\n<blockquote>\n<p>Safari seems to drop the <code>Authorization</code> header when following a [same-origin] 301 redirect... Chrome (98) and Firefox (97) both follow the redirect and include the <code>Authorization</code> header in the subsequent <code>GET</code> request.</p>\n</blockquote>\n<p>Wonder what behavior the spec requires here</p>\n","mimetype":"text/html"}]},"ts":1646183266284,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ztE1uu4TV9DFoma-V5BJSVcZsb4vbTYO-6OtIoKDpvA"},
{"content":{"body":"and https://stackoverflow.com/questions/57974176/safari-does-not-persist-the-authorization-header-on-redirect is another 2-year-old question about the same thing","msgtype":"m.text","org.matrix.msc1767.text":"and https://stackoverflow.com/questions/57974176/safari-does-not-persist-the-authorization-header-on-redirect is another 2-year-old question about the same thing"},"ts":1646183349809,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$v_ngyjVId0Q8CEX5mImhBZl6HTBVTXo_RIl-i2kijOE"},
{"content":{"body":"> <@domenicdenicola:matrix.org> Yoav Weiss: Noam Rosenthal : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -> y.com --redirects to-> x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.\n\nI checked, and the specific scenario (same->cross->same redirect, check that unload is not available) is tested in WPT and passes all 3 browsers... https://github.com/web-platform-tests/wpt/blob/master/navigation-timing/unload-event-same-origin-check.html#L57\nhttps://wpt.fyi/results/navigation-timing/unload-event-same-origin-check.html?label=experimental&label=master&aligned","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Eub-Y9YeUY1HnYK4ufho6fzvmtW3Q8DeopACXgSSLe8?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>: <a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a> : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -&gt; y.com --redirects to-&gt; x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.</blockquote></mx-reply>I checked, and the specific scenario (same-&gt;cross-&gt;same redirect, check that unload is not available) is tested in WPT and passes all 3 browsers... https://github.com/web-platform-tests/wpt/blob/master/navigation-timing/unload-event-same-origin-check.html#L57<br>https://wpt.fyi/results/navigation-timing/unload-event-same-origin-check.html?label=experimental&amp;label=master&amp;aligned","m.relates_to":{"m.in_reply_to":{"event_id":"$Eub-Y9YeUY1HnYK4ufho6fzvmtW3Q8DeopACXgSSLe8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> Yoav Weiss: Noam Rosenthal : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -> y.com --redirects to-> x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.\n\nI checked, and the specific scenario (same->cross->same redirect, check that unload is not available) is tested in WPT and passes all 3 browsers... https://github.com/web-platform-tests/wpt/blob/master/navigation-timing/unload-event-same-origin-check.html#L57\nhttps://wpt.fyi/results/navigation-timing/unload-event-same-origin-check.html?label=experimental&label=master&aligned","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$Eub-Y9YeUY1HnYK4ufho6fzvmtW3Q8DeopACXgSSLe8?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>: <a href=\"https://matrix.to/#/@noamr:matrix.org\">Noam Rosenthal</a> : what is the cross-origin redirects case for unload timing protecting against? It's basically saying if you go x.com -&gt; y.com --redirects to-&gt; x.com/bar, x.com/bar does not get unload timing for x.com. Why? No information about y.com leaked.</blockquote></mx-reply>I checked, and the specific scenario (same-&gt;cross-&gt;same redirect, check that unload is not available) is tested in WPT and passes all 3 browsers... https://github.com/web-platform-tests/wpt/blob/master/navigation-timing/unload-event-same-origin-check.html#L57<br>https://wpt.fyi/results/navigation-timing/unload-event-same-origin-check.html?label=experimental&amp;label=master&amp;aligned","mimetype":"text/html"}]},"ts":1646197935255,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$4PoGIEgPNzOfMUpYNIAUu_SQTEGdOyXkhH7yr3TopS0"},
{"content":{"body":"to me it seems like an unnecessary security measure or I don't understand it. Yoav Weiss ?","format":"org.matrix.custom.html","formatted_body":"to me it seems like an unnecessary security measure or I don't understand it. <a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"to me it seems like an unnecessary security measure or I don't understand it. Yoav Weiss ?","mimetype":"text/plain"},{"body":"to me it seems like an unnecessary security measure or I don't understand it. <a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a> ?","mimetype":"text/html"}]},"ts":1646197989653,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$_BBU5-nyFQOWUSw-VM5FFk9O4Y7CwgIY9k0sGVl7MIY"},
{"content":{"body":"It's possible that this is overly strict. It used to be TAO protected and have the same rules as TAO, but at some point we realized that it's not really protecting anything (it's not the origin which information was exposed that was opting in), so moved to a same origin check. The same=>cross=>same scenario was one that we protected against in TAO, so maybe that logic sticked around through the move to same origin checks.","msgtype":"m.text","org.matrix.msc1767.text":"It's possible that this is overly strict. It used to be TAO protected and have the same rules as TAO, but at some point we realized that it's not really protecting anything (it's not the origin which information was exposed that was opting in), so moved to a same origin check. The same=>cross=>same scenario was one that we protected against in TAO, so maybe that logic sticked around through the move to same origin checks."},"ts":1646199356574,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$_gSzKZi1W0xEkad4KZ75OjsG6T9vTQiDXoQeiJ0Rkv8"},
{"content":{"body":"Maybe annevk has reasons as to why we should keep it, but I tend to agree with y'all that if the previous origin is the same as the destination origin, we could expose the data ","format":"org.matrix.custom.html","formatted_body":"Maybe <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a> has reasons as to why we should keep it, but I tend to agree with y'all that if the previous origin is the same as the destination origin, we could expose the data","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Maybe annevk has reasons as to why we should keep it, but I tend to agree with y'all that if the previous origin is the same as the destination origin, we could expose the data ","mimetype":"text/plain"},{"body":"Maybe <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a> has reasons as to why we should keep it, but I tend to agree with y'all that if the previous origin is the same as the destination origin, we could expose the data","mimetype":"text/html"}]},"ts":1646199450182,"senderName":"Yoav Weiss","senderId":"@yoavweiss:matrix.org","id":"$8A9HFAQv1E5efg8UOPWq3y5-BmKHhNg7ZLEzTBXVEmA"}
]