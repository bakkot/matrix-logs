[
{"content":{"body":"About the new static Response.json() which can't be documented in MDN/BCD yet: https://github.com/mdn/browser-compat-data/issues/16613","msgtype":"m.text","org.matrix.msc1767.text":"About the new static Response.json() which can't be documented in MDN/BCD yet: https://github.com/mdn/browser-compat-data/issues/16613"},"ts":1654757522256,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$5bWHLMXef41jA85z8k_a46SUl3JNwZclfTXEQtD3xYk"},
{"content":{"body":"Oops","msgtype":"m.text","org.matrix.msc1767.text":"Oops"},"ts":1654757801385,"senderName":"Ms2ger üíâüíâ","senderId":"@ms2ger:igalia.com","id":"$CWd_7O4L0S6Sn3ewhHR46uKmQJcsw22-1szR0K0byLY"},
{"content":{"body":"_‚Äúhope this doesn't happen much‚Äù_ indeed","format":"org.matrix.custom.html","formatted_body":"<em>‚Äúhope this doesn't happen much‚Äù</em> indeed","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"_‚Äúhope this doesn't happen much‚Äù_ indeed","mimetype":"text/plain"},{"body":"<em>‚Äúhope this doesn't happen much‚Äù</em> indeed","mimetype":"text/html"}]},"ts":1654757924810,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$umdzPzgRllGoaVAsz6d9NY-q7T_Sa7c7sSK_dI5HCxI"},
{"content":{"body":"foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/html"}]},"ts":1654758098602,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$cTT0BwMddyc98a-z9vhVEfr5AnSAIcM2WmI3gVtoguE"},
{"content":{"body":"foolip: perhaps you could do something like api.Response$statics.json, but stuffing prototype in all of the existing members would be correct","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: perhaps you could do something like api.Response$statics.json, but stuffing prototype in all of the existing members would be correct","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"foolip: perhaps you could do something like api.Response$statics.json, but stuffing prototype in all of the existing members would be correct","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: perhaps you could do something like api.Response$statics.json, but stuffing prototype in all of the existing members would be correct","mimetype":"text/html"}]},"ts":1654758110201,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Qz20gm35xt4Vqq373RVrFQIBdlBDbsZcud7009aHurA"},
{"content":{"body":" * foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","m.new_content":{"body":"foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$cTT0BwMddyc98a-z9vhVEfr5AnSAIcM2WmI3gVtoguE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * foolip: Another possible option is to make a subfeature of `api.Response.json` named `\"static\"` ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: Another possible option is to make a subfeature of <code>api.Response.json</code> named <code>&quot;static&quot;</code> ‚Äî¬†which is ugly and backwards but at least we wouldn‚Äôt need a separate filename or new subdirectory (and no mass updates of existing data)","mimetype":"text/html"}]},"ts":1654758147804,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$9kZJmLb49pfHfYhCsVV0qJ3sco1dmmGdyRarS0K-HUg"},
{"content":{"body":"It would solve the problem, and would have the benefit that it tells BCD consumers what's static and what's not, but it would be a big change. It's notable that it's not done even for the javascript.* data, even though .prototype. is in the page titles (but not URLs) there, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/groupByToMap for example.","msgtype":"m.text","org.matrix.msc1767.text":"It would solve the problem, and would have the benefit that it tells BCD consumers what's static and what's not, but it would be a big change. It's notable that it's not done even for the javascript.* data, even though .prototype. is in the page titles (but not URLs) there, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/groupByToMap for example."},"ts":1654758290457,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$zVznM-uIvr5e4YUtdaZkK8TNDmvWA3wLhj2oJeeg4AU"},
{"content":{"body":"yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like the correcting it globally would maybe be a case of the cure being worse than the disease","msgtype":"m.text","org.matrix.msc1767.text":"yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like the correcting it globally would maybe be a case of the cure being worse than the disease"},"ts":1654758592911,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Z1ZFYOqNEkyr5Th5cC_-aLNZOn_bNgXYR5T_vPCkVLg"},
{"content":{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","format":"org.matrix.custom.html","formatted_body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","mimetype":"text/plain"},{"body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","mimetype":"text/html"}]},"ts":1654758938059,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$MCeVHPw0QJuF41N5PSDZhDUXV1QjDmjkgf-D6N7q22Q"},
{"content":{"body":" * As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","format":"org.matrix.custom.html","formatted_body":" * <p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","m.new_content":{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","format":"org.matrix.custom.html","formatted_body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","mimetype":"text/plain"},{"body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$MCeVHPw0QJuF41N5PSDZhDUXV1QjDmjkgf-D6N7q22Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","mimetype":"text/plain"},{"body":" * <p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","mimetype":"text/html"}]},"ts":1654758980376,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ufhqkbf2MRJ06hGaHs5YHErliHd7VxZwGkBwrWXHVVI"},
{"content":{"body":" * As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","format":"org.matrix.custom.html","formatted_body":" * <p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","m.new_content":{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","format":"org.matrix.custom.html","formatted_body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","mimetype":"text/plain"},{"body":"<p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$MCeVHPw0QJuF41N5PSDZhDUXV1QjDmjkgf-D6N7q22Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * As far as my `\"static\"` subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser\\_compatibility as an additional subfeature.\n\nWe wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of `\"static\"` as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is `api.Response.json` but not ignore it if the MDN page specifies its relevant BCD feature/query is `api.Response.json.static`.","mimetype":"text/plain"},{"body":" * <p>As far as my <code>&quot;static&quot;</code> subfeature hack, one side effect of it is that the current tooling would cause the compat data for the static method to show up in the BCD table for the instance method at https://developer.mozilla.org/en-US/docs/Web/API/Response/json#browser_compatibility as an additional subfeature.</p>\n<p>We wouldn‚Äôt want that of course ‚Äî but I know the code for generating the BCD tables very well, and it would be easy to add some special-handling to it to cause it ignore any case of <code>&quot;static&quot;</code> as a subfeature but not ignore it when it‚Äôs called directly as a feature ‚Äî¬†that is, ignore it for the MDN page that specifies its relevant BCD feature/query is <code>api.Response.json</code> but not ignore it if the MDN page specifies its relevant BCD feature/query is <code>api.Response.json.static</code>.</p>\n","mimetype":"text/html"}]},"ts":1654759004153,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$8ZDmV3CX0h73tEuPk3QCwcL_ZSgKBkklQ65KDmFRv-I"},
{"content":{"body":" * yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like correcting it globally would maybe be a case of the cure being worse than the disease","m.new_content":{"body":"yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like correcting it globally would maybe be a case of the cure being worse than the disease","msgtype":"m.text","org.matrix.msc1767.text":"yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"m.relates_to":{"event_id":"$Z1ZFYOqNEkyr5Th5cC_-aLNZOn_bNgXYR5T_vPCkVLg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * yeah in hindsight I guess it all should have been done that way from the beginning but at the point is seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"ts":1654759038887,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$6qQCpQjRAG7LjWk9-X8_vuNOVeuWc5N06_lUGd39D9A"},
{"content":{"body":" * yeah in hindsight I guess it all should have been done that way from the beginning but at this point is seems like correcting it globally would maybe be a case of the cure being worse than the disease","m.new_content":{"body":"yeah in hindsight I guess it all should have been done that way from the beginning but at this point is seems like correcting it globally would maybe be a case of the cure being worse than the disease","msgtype":"m.text","org.matrix.msc1767.text":"yeah in hindsight I guess it all should have been done that way from the beginning but at this point is seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"m.relates_to":{"event_id":"$Z1ZFYOqNEkyr5Th5cC_-aLNZOn_bNgXYR5T_vPCkVLg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * yeah in hindsight I guess it all should have been done that way from the beginning but at this point is seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"ts":1654759051146,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$hSZQsPFqNfqZ0t1xyQvcnasGL5xk_LaKpHdtQj4VULU"},
{"content":{"body":" * Yeah in hindsight I guess it all should have been done that way from the beginning but at this point it seems like correcting it globally would maybe be a case of the cure being worse than the disease","m.new_content":{"body":"Yeah in hindsight I guess it all should have been done that way from the beginning but at this point it seems like correcting it globally would maybe be a case of the cure being worse than the disease","msgtype":"m.text","org.matrix.msc1767.text":"Yeah in hindsight I guess it all should have been done that way from the beginning but at this point it seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"m.relates_to":{"event_id":"$Z1ZFYOqNEkyr5Th5cC_-aLNZOn_bNgXYR5T_vPCkVLg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Yeah in hindsight I guess it all should have been done that way from the beginning but at this point it seems like correcting it globally would maybe be a case of the cure being worse than the disease"},"ts":1654759062584,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$7d00tAF1rlxPe3aC3Z2sOd6K15mWEtAilCFTDcpmyr4"},
{"content":{"body":"dlrobertson: what other parts of the range syntax do browsers support?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dlrobertson:matrix.org\">dlrobertson</a>: what other parts of the range syntax do browsers support?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"dlrobertson: what other parts of the range syntax do browsers support?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@dlrobertson:matrix.org\">dlrobertson</a>: what other parts of the range syntax do browsers support?","mimetype":"text/html"}]},"ts":1654761980407,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$QjUJGIRokGKjDq2S33oMyAZr5heRPRjps8Q95R5icEQ"},
{"content":{"body":"(I've replied to the issue)","msgtype":"m.text","org.matrix.msc1767.text":"(I've replied to the issue)"},"ts":1654763436660,"senderName":"Jake Archibald","senderId":"@jakea:matrix.org","id":"$n5kVL-Yp0ShquH3xNZ2s-2SUUok7avmn0DpWnYEiJlk"},
{"content":{"body":"annevk: About the controller PR, I ended up spelling out all the initiator types, it does feel cleaner than a string. The PR build passes now and I went through all the comments again, I think it's ready.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: About the controller PR, I ended up spelling out all the initiator types, it does feel cleaner than a string. The PR build passes now and I went through all the comments again, I think it's ready.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"annevk: About the controller PR, I ended up spelling out all the initiator types, it does feel cleaner than a string. The PR build passes now and I went through all the comments again, I think it's ready.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: About the controller PR, I ended up spelling out all the initiator types, it does feel cleaner than a string. The PR build passes now and I went through all the comments again, I think it's ready.","mimetype":"text/html"}]},"ts":1654770518282,"senderName":"Noam Rosenthal","senderId":"@noamr:matrix.org","id":"$NKWqupKMe4EYwV9uyHIlSzgC6daRBvhuTHyt52uQCfc"},
{"content":{"body":"> <@jakea:matrix.org> dlrobertson: what other parts of the range syntax do browsers support?\n\nThanks! I'll comment in the issue as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$QjUJGIRokGKjDq2S33oMyAZr5heRPRjps8Q95R5icEQ?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jakea:matrix.org\">@jakea:matrix.org</a><br><a href=\"https://matrix.to/#/@dlrobertson:matrix.org\">dlrobertson</a>: what other parts of the range syntax do browsers support?</blockquote></mx-reply>Thanks! I'll comment in the issue as well","m.relates_to":{"m.in_reply_to":{"event_id":"$QjUJGIRokGKjDq2S33oMyAZr5heRPRjps8Q95R5icEQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jakea:matrix.org> dlrobertson: what other parts of the range syntax do browsers support?\n\nThanks! I'll comment in the issue as well","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$QjUJGIRokGKjDq2S33oMyAZr5heRPRjps8Q95R5icEQ?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jakea:matrix.org\">@jakea:matrix.org</a><br><a href=\"https://matrix.to/#/@dlrobertson:matrix.org\">dlrobertson</a>: what other parts of the range syntax do browsers support?</blockquote></mx-reply>Thanks! I'll comment in the issue as well","mimetype":"text/html"}]},"ts":1654778327411,"senderName":"dlrobertson","senderId":"@dlrobertson:matrix.org","id":"$t20xifpXQyde83XgfGbHGgqhvDOI4DjwK2-4lxHpOtA"},
{"content":{"body":"tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this)","msgtype":"m.text","org.matrix.msc1767.text":"tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this)"},"ts":1654778752193,"senderName":"dlrobertson","senderId":"@dlrobertson:matrix.org","id":"$57dT-xldTLLMm4qFcntY0QF9cEtuntSC4vLWqUgA1BM"},
{"content":{"body":" * tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this form of range there)","m.new_content":{"body":"tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this form of range there)","msgtype":"m.text","org.matrix.msc1767.text":"tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this form of range there)"},"m.relates_to":{"event_id":"$57dT-xldTLLMm4qFcntY0QF9cEtuntSC4vLWqUgA1BM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * tl;dr I think this would in practice only be used for blob slicing (and we don't have to support this form of range there)"},"ts":1654781616801,"senderName":"dlrobertson","senderId":"@dlrobertson:matrix.org","id":"$mjpT2NuQXXwujaddGOhL2bFgyZqnqnxaT15q94ooAg4"},
{"content":{"body":"foolip: sideshowbarker: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like \"Document.createElement\" never appear in anyone's infrastructure...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like &quot;Document.createElement&quot; never appear in anyone's infrastructure...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"foolip: sideshowbarker: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like \"Document.createElement\" never appear in anyone's infrastructure...","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like &quot;Document.createElement&quot; never appear in anyone's infrastructure...","mimetype":"text/html"}]},"ts":1654784432316,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$otU-5erNGLPc2LdoHWtE5gReY4mTRxuhJINgzCnTXRA"},
{"content":{"body":"> <@domenicdenicola:matrix.org> foolip: sideshowbarker: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like \"Document.createElement\" never appear in anyone's infrastructure...\n\nIt‚Äôs just a lot of work, and even if done there isn‚Äôt another agreed-upon shorthand, so I think we‚Äôll keep seeing this for a long time‚Ä¶","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs%3Amatrix.org/%24otU-5erNGLPc2LdoHWtE5gReY4mTRxuhJINgzCnTXRA\">Svar p√•</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@foolip:matrix.org\">foolip</a>: <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: IMO the more we can move the ecosystem away from incorrectly thinking of prototype/instance methods and properties as static ones the better... I'm excited that this is providing a forcing function. I hope one day strings like &quot;Document.createElement&quot; never appear in anyone's infrastructure...</blockquote></mx-reply>It‚Äôs just a lot of work, and even if done there isn‚Äôt another agreed-upon shorthand, so I think we‚Äôll keep seeing this for a long time‚Ä¶","m.relates_to":{"m.in_reply_to":{"event_id":"$otU-5erNGLPc2LdoHWtE5gReY4mTRxuhJINgzCnTXRA"}},"msgtype":"m.text"},"ts":1654785905337,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$E015UfMhsUzf8SbLVgGzN5i2G-jCijhYTMeTtftRbjs"},
{"content":{"body":"Someone would have to go on a long and dedicated cleanup campaign to sort this out across MDN, BCD and maybe other places.","msgtype":"m.text"},"ts":1654786001060,"senderName":"foolip","senderId":"@foolip:matrix.org","id":"$8fG5kgg84HSYrnGyNR3CjNKUDDdiJXhNiARcYcXOF-s"},
{"content":{"body":"Shorthand doesn't seem necessary, `.prototype` is not a lot of extra characters","format":"org.matrix.custom.html","formatted_body":"Shorthand doesn't seem necessary, <code>.prototype</code> is not a lot of extra characters","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Shorthand doesn't seem necessary, `.prototype` is not a lot of extra characters","mimetype":"text/plain"},{"body":"Shorthand doesn't seem necessary, <code>.prototype</code> is not a lot of extra characters","mimetype":"text/html"}]},"ts":1654789198594,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$hzq3OZhhH9_c8LaJmS_iQOLInQZrgJMCm9cioQ2mCBY"},
{"content":{"body":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal.","msgtype":"m.text","org.matrix.msc1767.text":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal."},"ts":1654789223415,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ozsDX6AAgCUePW-JtkODSbw8rewX1DUWGkAsLv4eH6Q"},
{"content":{"body":" * I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principle.","m.new_content":{"body":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principle.","msgtype":"m.text","org.matrix.msc1767.text":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principle."},"m.relates_to":{"event_id":"$ozsDX6AAgCUePW-JtkODSbw8rewX1DUWGkAsLv4eH6Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principle."},"ts":1654789229010,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ERJfwF2xrND_80h6uymbis1hN2ij_fitQKIUfY0S4So"},
{"content":{"body":" * I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal.","m.new_content":{"body":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal.","msgtype":"m.text","org.matrix.msc1767.text":"I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal."},"m.relates_to":{"event_id":"$ozsDX6AAgCUePW-JtkODSbw8rewX1DUWGkAsLv4eH6Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I agree this is a lot of tech debt. Like all tech debt, it was waiting to bite us one day. You can keep paying interest or you can pay down the principal."},"ts":1654789248264,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$KRi0GMB1TMsr7JUrlSOXiIgWp8ju9XjS48cSsW5Jf1Y"},
{"content":{"body":"Hi all! What do you all think of this idea?","msgtype":"m.text","org.matrix.msc1767.text":"Hi all! What do you all think of this idea?"},"ts":1654793278663,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$eOa1kkqvGwue1KQOg8FuuaPp70WdbNqM0t2ar-0i95I"},
{"content":{"body":"https://github.com/WICG/scroll-to-text-fragment/issues/185","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/WICG/scroll-to-text-fragment/issues/185"},"ts":1654793284812,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$teliM8RvRPEOoped8wbmeqYA_Bs87n85XRJrq_cVINc"},
{"content":{"body":"I open an issue - I would like to know the opinion of everyone here.","msgtype":"m.text","org.matrix.msc1767.text":"I open an issue - I would like to know the opinion of everyone here."},"ts":1654793323561,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$18Wnblwq5oGni5uZtdmusXuTZ6B1cLD02PDHBzaIqNE"},
{"content":{"body":"`https://example.com/#:~:text=character_start&character_end&elementHTML`","format":"org.matrix.custom.html","formatted_body":"<code>https://example.com/#:~:text=character_start&amp;character_end&amp;elementHTML</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`https://example.com/#:~:text=character_start&character_end&elementHTML`","mimetype":"text/plain"},{"body":"<code>https://example.com/#:~:text=character_start&amp;character_end&amp;elementHTML</code>","mimetype":"text/html"}]},"ts":1654793343943,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$luduoxBKuYgXXUXgRZv63WfhXOEUjbyqAM0GwwmFOTU"},
{"content":{"body":"`https://example.com/#:~:text=characters&words&lines&without_white_space&paragraphs&spaces&sentences`","format":"org.matrix.custom.html","formatted_body":"<code>https://example.com/#:~:text=characters&amp;words&amp;lines&amp;without_white_space&amp;paragraphs&amp;spaces&amp;sentences</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`https://example.com/#:~:text=characters&words&lines&without_white_space&paragraphs&spaces&sentences`","mimetype":"text/plain"},{"body":"<code>https://example.com/#:~:text=characters&amp;words&amp;lines&amp;without_white_space&amp;paragraphs&amp;spaces&amp;sentences</code>","mimetype":"text/html"}]},"ts":1654793361092,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$7hdV3wb9HHIc4gfeFun2-Q6gz8PV3VGKW7qiR6hYnbY"},
{"content":{"body":"My idea is to search text snippets according to character size or html reference","msgtype":"m.text","org.matrix.msc1767.text":"My idea is to search text snippets according to character size or html reference"},"ts":1654793412494,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$19gDgrr-hyWiaXsRB6Mvtb4A1IcYKUJq4ioxCbpcOt4"},
{"content":{"body":"`https://en.wikipedia.org/w/index.php?title=Cat#:~:text=38,7,1,32,1,6,1`","format":"org.matrix.custom.html","formatted_body":"<code>https://en.wikipedia.org/w/index.php?title=Cat#:~:text=38,7,1,32,1,6,1</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`https://en.wikipedia.org/w/index.php?title=Cat#:~:text=38,7,1,32,1,6,1`","mimetype":"text/plain"},{"body":"<code>https://en.wikipedia.org/w/index.php?title=Cat#:~:text=38,7,1,32,1,6,1</code>","mimetype":"text/html"}]},"ts":1654793428983,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$LR8Is8b9328eqO8buBn_0oRjX7YTCMqLBWDUOQclhac"},
{"content":{"body":"\"characters\": \"38\", \"words\": \"7\", \"lines\":\"1\", \"without white space\":\"32\", \"paragraphs\": \"1\", \"spaces\": \"6\", \"sentences\":\"1\", \"string\": \"Like almost all members of the Felidae\"","msgtype":"m.text","org.matrix.msc1767.text":"\"characters\": \"38\", \"words\": \"7\", \"lines\":\"1\", \"without white space\":\"32\", \"paragraphs\": \"1\", \"spaces\": \"6\", \"sentences\":\"1\", \"string\": \"Like almost all members of the Felidae\""},"ts":1654793449425,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$HSTJk2qVM9zaZNXPugNYm2ABuAtLRh87rcvlMTxxTaw"},
{"content":{"body":"`https://en.wikipedia.org/w/index.php?title=Cat#:~:text=0&38&h3`","format":"org.matrix.custom.html","formatted_body":"<code>https://en.wikipedia.org/w/index.php?title=Cat#:~:text=0&amp;38&amp;h3</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`https://en.wikipedia.org/w/index.php?title=Cat#:~:text=0&38&h3`","mimetype":"text/plain"},{"body":"<code>https://en.wikipedia.org/w/index.php?title=Cat#:~:text=0&amp;38&amp;h3</code>","mimetype":"text/html"}]},"ts":1654793541524,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$AZNXI6yKgAl25IL4DRA7EVVv3NLIDfBfjC2YuwRDpTc"},
{"content":{"body":"please,  I would like to know the opinion of everyone here.","msgtype":"m.text","org.matrix.msc1767.text":"please,  I would like to know the opinion of everyone here."},"ts":1654795126239,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$6a9IGebXkUxkeVrE87gZTLfyUYp10BJDj04ku6C6s1A"},
{"content":{"body":"is anyone online?\n","msgtype":"m.text","org.matrix.msc1767.text":"is anyone online?\n"},"ts":1654796836742,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$A6SNaC4ObNMd57bu7OUGD5_NXVJHuflAHc78vjqSaYE"},
{"content":{"body":"Is this idea good or bad?","msgtype":"m.text","org.matrix.msc1767.text":"Is this idea good or bad?"},"ts":1654797237136,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$tDOsgX1whV9YDBWEeYZfU9mbqAqH5jhz_q6zPNOOzuE"},
{"content":{"body":"if you think this idea is bad, an alternative would be this idea/concept: https://discourse.wicg.io/t/proposal-built-in-e2e-encryption-into-web-browsers/5897 - Hi all! A question is it possible to use the FIDO protocol and hardware keys through E2E in browsers?","msgtype":"m.text","org.matrix.msc1767.text":"if you think this idea is bad, an alternative would be this idea/concept: https://discourse.wicg.io/t/proposal-built-in-e2e-encryption-into-web-browsers/5897 - Hi all! A question is it possible to use the FIDO protocol and hardware keys through E2E in browsers?"},"ts":1654797449004,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$D9yABUeVhcFx6dh6TjVbeP_DIv9t-52f8UArOOmRcKc"},
{"content":{"body":"another doubt/concept: 3. Integrating css+js+html into a single language will allow what many call Embedded markup as RTF - Rich Text Format?","msgtype":"m.text","org.matrix.msc1767.text":"another doubt/concept: 3. Integrating css+js+html into a single language will allow what many call Embedded markup as RTF - Rich Text Format?"},"ts":1654797511672,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$EwBLeRbmpBZpQAPGE-b-3vT6AXtSEZqfwIyBVgtzUgo"},
{"content":{"body":"4. What do you all think of this idea of having an official standard for importing/exporting passwords in browsers?","format":"org.matrix.custom.html","formatted_body":"<ol start=\"4\">\n<li>What do you all think of this idea of having an official standard for importing/exporting passwords in browsers?</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"4. What do you all think of this idea of having an official standard for importing/exporting passwords in browsers?","mimetype":"text/plain"},{"body":"<ol start=\"4\">\n<li>What do you all think of this idea of having an official standard for importing/exporting passwords in browsers?</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1654797570850,"senderName":"raphaellouis","senderId":"@raphaellouis:matrix.org","id":"$pw0MvS2rclm45TkBEiqjTmBOo69ctymYDt4YxZu-c0s"},
{"content":{"body":"raphaellouis: I think you should consider that if you are not getting responses, then this forum might not be the best place for your ideas. In general people most interested in hearing about a proposal for a specification are already on the specification's issue tracker. Or people interested in hearing new general ideas are already subscribed to the WICG discourse. Going to an unrelated standards forum's chat room and linking to your idea is maybe not a good way of interacting with that standards forum.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@raphaellouis:matrix.org\">raphaellouis</a>: I think you should consider that if you are not getting responses, then this forum might not be the best place for your ideas. In general people most interested in hearing about a proposal for a specification are already on the specification's issue tracker. Or people interested in hearing new general ideas are already subscribed to the WICG discourse. Going to an unrelated standards forum's chat room and linking to your idea is maybe not a good way of interacting with that standards forum.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"raphaellouis: I think you should consider that if you are not getting responses, then this forum might not be the best place for your ideas. In general people most interested in hearing about a proposal for a specification are already on the specification's issue tracker. Or people interested in hearing new general ideas are already subscribed to the WICG discourse. Going to an unrelated standards forum's chat room and linking to your idea is maybe not a good way of interacting with that standards forum.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@raphaellouis:matrix.org\">raphaellouis</a>: I think you should consider that if you are not getting responses, then this forum might not be the best place for your ideas. In general people most interested in hearing about a proposal for a specification are already on the specification's issue tracker. Or people interested in hearing new general ideas are already subscribed to the WICG discourse. Going to an unrelated standards forum's chat room and linking to your idea is maybe not a good way of interacting with that standards forum.","mimetype":"text/html"}]},"ts":1654799091867,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$cDs_ddj6_Oq13S91Dxl4oOss1iauOXeoRLqrNnLJCok"}
]