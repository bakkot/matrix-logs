[
{"content":{"body":"There’s a workable alternative to doing that “prepare a script” step there?","m.mentions":{},"m.relates_to":{"event_id":"$efJl1oXVobezyNkpiMMI9loWISKRN685yERsSiigQnQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$nne-0JfhOKYVWgGlQhc90dB-xPBfuI6C1upDkXdvp34"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1738978163782,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$InFJZ8m4P6TLPQH8OS-bEr9Q2Jyd7so4B3KY-1SKaxo"},
{"content":{"body":"Maybe a weird question but does anyone here know of an algorithm in a whatwg spec which takes a collection (preferably a list) by reference? I'm just hoping for an example because I'm not sure how it's usually described in spec-speak","m.mentions":{},"msgtype":"m.text"},"ts":1738985165151,"senderName":"gingeh","senderId":"@gingeh:matrix.org","id":"$ELOTayRrd1nDIuA8ZxEGP7zQ04xGGLeJFuvbWYPWCEU"},
{"content":{"body":"It's always assumed to be by reference. In general algorithms are JS-ish semantics, with the biggest exception being that strings are often treated as mutable.","m.mentions":{"user_ids":["@gingeh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ELOTayRrd1nDIuA8ZxEGP7zQ04xGGLeJFuvbWYPWCEU"}},"msgtype":"m.text"},"ts":1738989847422,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ZqP7z_vNFD6FdI0E95ipWGcC8peniXs8VK6lXCtnQ4Y"},
{"content":{"body":"https://github.com/whatwg/infra/issues/91 for discussion of mutable vs. immutable strings","m.mentions":{},"msgtype":"m.text"},"ts":1738989920209,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$iSCtStD466oI8RwmUefAfgMDRfmRAvvEPjVBnjKhVxs"},
{"content":{"body":"I wonder if something like `background-image: element()` is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would a standalone node, no?","format":"org.matrix.custom.html","formatted_body":"I wonder if something like <code>background-image: element()</code> is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would a standalone node, no?","m.mentions":{"user_ids":["@emilio:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MaDny6BCJDB-1We1ERKSqtZQ-1bERRBq3ySncxENELQ"}},"msgtype":"m.text"},"ts":1738998209802,"senderName":"Valery","senderId":"@framemuse:matrix.org","id":"$h5MtGBjXIc-fqfZp_MDzpGwNOko1QyKt_B15PX1Oj08"},
{"content":{"body":"* I wonder if something like `background-image: element()` is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would be a standalone node, no?","format":"org.matrix.custom.html","formatted_body":"* I wonder if something like <code>background-image: element()</code> is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would be a standalone node, no?","m.mentions":{},"m.new_content":{"body":"I wonder if something like `background-image: element()` is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would be a standalone node, no?","format":"org.matrix.custom.html","formatted_body":"I wonder if something like <code>background-image: element()</code> is possible to be a document node type, where I can select a node to be mirrored, so that I can add it to the document, visually, it would behave in the same way, but it doesn't need to be processed once again. All the computations can be reused up to the GPU level. I feel like it should not be so complex since this would be a standalone node, no?","m.mentions":{"user_ids":["@emilio:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h5MtGBjXIc-fqfZp_MDzpGwNOko1QyKt_B15PX1Oj08","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1738998224916,"senderName":"Valery","senderId":"@framemuse:matrix.org","id":"$KUxD75AcmK1QD95LChNexh1to_sqcGaAFQovihM_NM4"},
{"content":{"body":"I have a question about this test: \"Aborting a WritableStream before it starts should cause the writer\\'s unsettled ready promise to reject\" in [`/streams/writable-streams/aborting.any.js`](https://github.com/web-platform-tests/wpt/blob/cecda71212f41f96b03bd93ca800bfc2b9aaa974/streams/writable-streams/aborting.any.js#L30)\n\nThe test:\n1. acquires a writer on a newly created stream, \n2. then writes on it, \n3. then assigns writer.ready to a variable\n4. and aborts the writer. \n\nAfter 3, it seems to expect the promise to equal the readyPromise on the writer, and to finally reject with the error passed to abort. \n\n","format":"org.matrix.custom.html","formatted_body":"<p>I have a question about this test: \"Aborting a WritableStream before it starts should cause the writer's unsettled ready promise to reject\" in <a href=\"https://github.com/web-platform-tests/wpt/blob/cecda71212f41f96b03bd93ca800bfc2b9aaa974/streams/writable-streams/aborting.any.js#L30\"><code>/streams/writable-streams/aborting.any.js</code></a></p>\n<p>The test:</p>\n<ol>\n<li>acquires a writer on a newly created stream,</li>\n<li>then writes on it,</li>\n<li>then assigns writer.ready to a variable</li>\n<li>and aborts the writer.</li>\n</ol>\n<p>After 3, it seems to expect the promise to equal the readyPromise on the writer, and to finally reject with the error passed to abort.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739007943460,"senderName":"Gregory Terzian","senderId":"@gterzian:matrix.org","id":"$ywsB3afOX5nbhIce_SMxfE6ktIROA0APr21dmwz5500"},
{"content":{"body":"But, it appears to me that the readyPromise would have already been resolved in [`set-up-writable-stream-default-writer`](https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer), at step 5.2(\"Otherwise, set writer.[[readyPromise]] to a promise resolved with undefined.\"). \n\nThen the promise assigned to the variable at 3 is in fact already resolved, and then the abort call at 4 will end-up calling into [`ensure-ready-promise-rejected`](https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected), which replaces writer.readyPromise with a new rejected promise(because the promise is not pending anymore). \n\nOn way this would be false would be if the write(or the setup) would reach \"If backpressure is true, set writer.[[readyPromise]] to a new promise.\" of [`update-backpressure`](https://streams.spec.whatwg.org/#writable-stream-update-backpressure), but this would require backpressure to be true, and the test does not seem to provide any such backpressure other than the default one where the desired size is 1, and then that single write should not trigger backpressure. \n\nThe test passes in all implementation, so I'm wondering what I'm missing, or if perhaps the spec was updated to fail the test, and this wasn't reflected in any implementation. ","format":"org.matrix.custom.html","formatted_body":"<p>But, it appears to me that the readyPromise would have already been resolved in <a href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer\"><code>set-up-writable-stream-default-writer</code></a>, at step 5.2(\"Otherwise, set writer.[[readyPromise]] to a promise resolved with undefined.\").</p>\n<p>Then the promise assigned to the variable at 3 is in fact already resolved, and then the abort call at 4 will end-up calling into <a href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected\"><code>ensure-ready-promise-rejected</code></a>, which replaces writer.readyPromise with a new rejected promise(because the promise is not pending anymore).</p>\n<p>On way this would be false would be if the write(or the setup) would reach \"If backpressure is true, set writer.[[readyPromise]] to a new promise.\" of <a href=\"https://streams.spec.whatwg.org/#writable-stream-update-backpressure\"><code>update-backpressure</code></a>, but this would require backpressure to be true, and the test does not seem to provide any such backpressure other than the default one where the desired size is 1, and then that single write should not trigger backpressure.</p>\n<p>The test passes in all implementation, so I'm wondering what I'm missing, or if perhaps the spec was updated to fail the test, and this wasn't reflected in any implementation.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739008382818,"senderName":"Gregory Terzian","senderId":"@gterzian:matrix.org","id":"$E5ewMAr7dArAL6p-exiFUiLFO-xrOwYYQ2gUbXtvlGM"}
]