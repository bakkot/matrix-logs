[
{"content":{"body":"The spec changed from `Promise<any>` to `object` in https://github.com/whatwg/html/pull/9897. Referring to my just-written comment in https://github.com/whatwg/html/issues/10721#issuecomment-2436548874 , we lost (3) but gained (2) in that change.","format":"org.matrix.custom.html","formatted_body":"The spec changed from <code>Promise&lt;any&gt;</code> to <code>object</code> in https://github.com/whatwg/html/pull/9897. Referring to my just-written comment in https://github.com/whatwg/html/issues/10721#issuecomment-2436548874 , we lost (3) but gained (2) in that change.","m.mentions":{},"msgtype":"m.text"},"ts":1729815068636,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$qnnBlEoFlhITK5aEdZqO2it7Q8FnFJmIyrT2s7WgmIA"},
{"content":{"body":"It seems that Chrome and Safari have 2 and 3 today.","m.mentions":{},"msgtype":"m.text"},"ts":1729853245238,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$iHonJNNcCLgdMJM60Sn40Yvv0yUSfsgTO4B2dUWg8v4"},
{"content":{"body":"Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, that all seems like what that instead would be is: the computed label would be for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing","format":"org.matrix.custom.html","formatted_body":"<p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, that all seems like what that instead would be is: the computed label would be for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729857244001,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$H7DLzRhWtlmUF2gNZb0JhuaS10LW9INvno2dJzCEy1Q"},
{"content":{"body":" * Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, that all seems like what that instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing","format":"org.matrix.custom.html","formatted_body":" * <p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, that all seems like what that instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing</p>\n","m.mentions":{},"m.new_content":{"body":"Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, that all seems like what that instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing","format":"org.matrix.custom.html","formatted_body":"<p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, that all seems like what that instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly their must be something I’m missing</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$H7DLzRhWtlmUF2gNZb0JhuaS10LW9INvno2dJzCEy1Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729857303447,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$34iE5z4P77rqY3sPaDalRc-fX0n7NkAj5oclD95F8nQ"},
{"content":{"body":" * Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, that all seems like what that instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing","format":"org.matrix.custom.html","formatted_body":" * <p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, that all seems like what that instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing</p>\n","m.mentions":{},"m.new_content":{"body":"Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, that all seems like what that instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing","format":"org.matrix.custom.html","formatted_body":"<p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, that all seems like what that instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$H7DLzRhWtlmUF2gNZb0JhuaS10LW9INvno2dJzCEy1Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729857331454,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$FmBdsD_lwG6r-Ieq4izuJ2-eRm5bXep1OmPQGvVAqcU"},
{"content":{"body":" * Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, it seems like what that all instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing","format":"org.matrix.custom.html","formatted_body":" * <p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, it seems like what that all instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing</p>\n","m.mentions":{},"m.new_content":{"body":"Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp\\_embedded\\_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?\n\nWhat I don’t understand about the test is: Given the following:\n\n```\n<label>\n  <input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\">\n  Flash the screen\n  <input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"> times\n</label>\n```\n\n…the test expects `test_driver.get_computed_label()` for that first `input` element to be `Flash the screen 3 times`.\n\nBut I don’t understand how, from the spec, the computed label for that `input` element ends up being the concatenation of:\n\n1. the `Flash the screen ` text node that follows that `input`\n2. the value of the second `input` element\n3. the value of the ` times` text node which follows the second `input` element\n\nI mean, it seems like what that all instead would be is: the computed label for the `label` element that contains those other elements and those text nodes.\n\nBut that `label` element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a `class=\"ex\"` attribute. And not concatenating those.\n\nBut Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing","format":"org.matrix.custom.html","formatted_body":"<p>Any chance somebody’s around who understands the https://w3c.github.io/accname/#computation-steps spec and the test at https://github.com/web-platform-tests/wpt/blob/master/accname/name/comp_embedded_control.html and https://github.com/web-platform-tests/wpt/blob/master/wai-aria/scripts/aria-utils.js#L133 ?</p>\n<p>What I don’t understand about the test is: Given the following:</p>\n<pre><code>&lt;label&gt;\n  &lt;input type=\"checkbox\" data-expectedlabel=\"Flash the screen 3 times\" data-testname=\"checkbox label with embedded textfield\" class=\"ex\"&gt;\n  Flash the screen\n  &lt;input value=\"3\" aria-label=\"number of times\" data-expectedlabel=\"number of times\" data-testname=\"label of embedded textfield inside checkbox label\" class=\"ex\"&gt; times\n&lt;/label&gt;\n</code></pre>\n<p>…the test expects <code>test_driver.get_computed_label()</code> for that first <code>input</code> element to be <code>Flash the screen 3 times</code>.</p>\n<p>But I don’t understand how, from the spec, the computed label for that <code>input</code> element ends up being the concatenation of:</p>\n<ol>\n<li>the <code>Flash the screen </code> text node that follows that <code>input</code></li>\n<li>the value of the second <code>input</code> element</li>\n<li>the value of the <code> times</code> text node which follows the second <code>input</code> element</li>\n</ol>\n<p>I mean, it seems like what that all instead would be is: the computed label for the <code>label</code> element that contains those other elements and those text nodes.</p>\n<p>But that <code>label</code> element is not what the test is actually checking, as far as can see — the test is instead just checking, one by one, the computed label for each of the elements that have a <code>class=\"ex\"</code> attribute. And not concatenating those.</p>\n<p>But Gecko, WebKit, and Blink pass all those tests. So clearly, there must be something I’m missing</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$H7DLzRhWtlmUF2gNZb0JhuaS10LW9INvno2dJzCEy1Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729857839129,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$hbYMdWEm6mBeLTMEbj3kjtLSkOUHysYtVYoFBstgrPA"},
{"content":{"body":"ah nevermind, I see now I just need to implement **E. Host Language Label** from the spec correctly — https://w3c.github.io/accname/#step2E:\n\n> if the current node's native markup provides an attribute (e.g. alt) or element (e.g. HTML label or SVG title) that defines a text alternative, return that alternative in the form of a flat string\n\nsince there’s a `label` wrapped around that `input`, the computed label is the that actual label textcontent","format":"org.matrix.custom.html","formatted_body":"<p>ah nevermind, I see now I just need to implement <strong>E. Host Language Label</strong> from the spec correctly — https://w3c.github.io/accname/#step2E:</p>\n<blockquote>\n<p>if the current node's native markup provides an attribute (e.g. alt) or element (e.g. HTML label or SVG title) that defines a text alternative, return that alternative in the form of a flat string</p>\n</blockquote>\n<p>since there’s a <code>label</code> wrapped around that <code>input</code>, the computed label is the that actual label textcontent</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729860131444,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$2n-QJrP10TwMHEg-JWsPPNj9RdHk-kQkbPI1i7dbr2Y"},
{"content":{"body":" sideshowbarker the integration between accname and <hostlanguage>-aam are not great","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a> the integration between accname and &lt;hostlanguage&gt;-aam are not great","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1729862028843,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$fKdhZ9TKvpTYyjzXn4PpqYRZKlIOOWBxpJmXkGnxPjA"},
{"content":{"body":"sideshowbarker: though where does it say to use the `value`? i.e. where does the \"3\" come from? https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-number-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-name-computation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: though where does it say to use the <code>value</code>? i.e. where does the \"3\" come from? https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-number-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-name-computation","m.mentions":{"user_ids":["@sideshowbarker:matrix.org"]},"msgtype":"m.text"},"ts":1729862290908,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$k_Wf6QaZOtU76KifawCJkvxqvzdXNpiopblQb4-tjbE"},
{"content":{"body":"Question: Certain elements, such as `<li>` or `<option>` are only permitted within certain element types. Should this perhaps be expanded to custom elements? Many use cases where a custom element may reasonably want to slot these, and currently they need to invent their own elements that mirror the API of these.\n(I can file an issue, just wanted a sanity check)","format":"org.matrix.custom.html","formatted_body":"Question: Certain elements, such as <code>&lt;li&gt;</code> or <code>&lt;option&gt;</code> are only permitted within certain element types. Should this perhaps be expanded to custom elements? Many use cases where a custom element may reasonably want to slot these, and currently they need to invent their own elements that mirror the API of these.<br>(I can file an issue, just wanted a sanity check)","m.mentions":{},"msgtype":"m.text"},"ts":1729869772729,"senderName":"Lea Verou","senderId":"@leaverou:matrix.org","id":"$NjV5dAwnGDg_vdzmR4UNme8TObfR3eP35Ts9abgSdMw"},
{"content":{"body":"Lea Verou: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leaverou:matrix.org\">Lea Verou</a>: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).","m.mentions":{"user_ids":["@leaverou:matrix.org"]},"msgtype":"m.text"},"ts":1729872021544,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$uijKIIA1QjKujdL3QyDnUsgulefkjauoyL_ueZUCzrk"},
{"content":{"body":"> <@annevk:matrix.org> Lea Verou: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).\n\nNo need to do all at once, it could be done one at a time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$uijKIIA1QjKujdL3QyDnUsgulefkjauoyL_ueZUCzrk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@leaverou:matrix.org\">Lea Verou</a>: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).</blockquote></mx-reply>No need to do all at once, it could be done one at a time","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uijKIIA1QjKujdL3QyDnUsgulefkjauoyL_ueZUCzrk"}},"msgtype":"m.text"},"ts":1729876008417,"senderName":"Lea Verou","senderId":"@leaverou:matrix.org","id":"$UkDjOT6E5Y9I_eggQq79Kow5TezeOE4i4PanOKh9I88"},
{"content":{"body":"> <@annevk:matrix.org> Lea Verou: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).\n\nOk, issue filed: https://github.com/whatwg/html/issues/10722 Thanks!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$uijKIIA1QjKujdL3QyDnUsgulefkjauoyL_ueZUCzrk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@leaverou:matrix.org\">Lea Verou</a>: if there is no HTML parser weirdness that might be okay. Might be tricky to correctly update everything that needs to be updated (and find it all).</blockquote></mx-reply>Ok, issue filed: https://github.com/whatwg/html/issues/10722 Thanks!","m.mentions":{"user_ids":["@annevk:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uijKIIA1QjKujdL3QyDnUsgulefkjauoyL_ueZUCzrk"}},"msgtype":"m.text"},"ts":1729876262526,"senderName":"Lea Verou","senderId":"@leaverou:matrix.org","id":"$Jpo9Q3cBk2yBffiwAMxvBUKl3xRmn8vqY8Kz04VoZLA"},
{"content":{"body":"Should specs be directly referencing the \"promise-calling\" concept in spec steps? WebDriver's Execute Script AO https://w3c.github.io/webdriver/#execute-script says:\n\n> 8. Let scriptPromise be the result of promise-calling execute a function body, with arguments body and arguments. \n\nReading into https://www.w3.org/2001/tag/doc/promises-guide#should-promise-call, which is linked from that step, it sounds like specification writers are supposed to 'achieve' promise calling, rather than telling implementers to make it happen?","format":"org.matrix.custom.html","formatted_body":"<p>Should specs be directly referencing the \"promise-calling\" concept in spec steps? WebDriver's Execute Script AO https://w3c.github.io/webdriver/#execute-script says:</p>\n<blockquote>\n<ol start=\"8\">\n<li>Let scriptPromise be the result of promise-calling execute a function body, with arguments body and arguments.</li>\n</ol>\n</blockquote>\n<p>Reading into https://www.w3.org/2001/tag/doc/promises-guide#should-promise-call, which is linked from that step, it sounds like specification writers are supposed to 'achieve' promise calling, rather than telling implementers to make it happen?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729882955197,"senderName":"akaster","senderId":"@akaster:serenityos.org","id":"$XbP_o1KNEsp24GxNdXwkzfOa9zPf5SAkurvg4lCKd9g"}
]