[
{"content":{"body":"there was a dark mode too","msgtype":"m.text"},"ts":1635990090680,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$16IoiPXVlSDFBRQhmctTfyikCgyKKxFZsGsMJTI-KVA"},
{"content":{"body":"Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"ts":1635999042203,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c"},
{"content":{"body":"As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing `method_missing` hacks), which is a shame since I do really like having classes generated with all the proper metadata.","format":"org.matrix.custom.html","formatted_body":"As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing <code>method_missing</code> hacks), which is a shame since I do really like having classes generated with all the proper metadata.","msgtype":"m.text"},"ts":1635999141668,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$SpCLD1oFh38gQLcbT39Aghwob3Xkk9QKQREmT8WgTug"},
{"content":{"body":" * Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":" * <p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","m.new_content":{"body":"Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635999207569,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$ZC0uzzXszVa4Ki4WaX7GwnDB1zv9Qqzo8uICdsrHSDs"},
{"content":{"body":" * Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":" * <p>Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","m.new_content":{"body":"Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635999483592,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$gLCMXhR7WeNVTBwPG6zkyRSQBLEDQwfJb_ScrvVgsQw"}
]