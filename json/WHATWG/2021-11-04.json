[
{"content":{"body":"there was a dark mode too","msgtype":"m.text"},"ts":1635990090680,"senderName":"DerekNonGeneric","senderId":"@dereknongeneric:mozilla.org","id":"$16IoiPXVlSDFBRQhmctTfyikCgyKKxFZsGsMJTI-KVA"},
{"content":{"body":"Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"ts":1635999042203,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c"},
{"content":{"body":"As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing `method_missing` hacks), which is a shame since I do really like having classes generated with all the proper metadata.","format":"org.matrix.custom.html","formatted_body":"As it stands, I think I'll have to opt to create bindings for JavaScript objects at runtime based on reflection (or just depressing <code>method_missing</code> hacks), which is a shame since I do really like having classes generated with all the proper metadata.","msgtype":"m.text"},"ts":1635999141668,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$SpCLD1oFh38gQLcbT39Aghwob3Xkk9QKQREmT8WgTug"},
{"content":{"body":" * Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":" * <p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","m.new_content":{"body":"Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the WebIDL bindings to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635999207569,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$ZC0uzzXszVa4Ki4WaX7GwnDB1zv9Qqzo8uICdsrHSDs"},
{"content":{"body":" * Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":" * <p>Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","m.new_content":{"body":"Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The `@webref/idl` package made this especially easy, thanks for providing that.\n\nWhile generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.\n\nI was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks, had some good successes using the Web IDL standard to implement bindings between mruby and browser APIs. The <code>@webref/idl</code> package made this especially easy, thanks for providing that.</p>\n<p>While generating bindings works well, it feels like there are some fairly severe issues with this approach for a dynamic language. My current generated bindings are 800kb, which is non-trivial for a webapp, especially on top of the mruby interpreter and emscripten runtime. This isn't too bad with caching but will still be a show-stopper for many users.</p>\n<p>I was wondering if there's ever been any interest in providing a JavaScript API that can be used to load Web IDL bindings directly from the browser at runtime. This would allow dynamic languages to lazily bind to Web APIs as necessary, saving on the need to send and process all bindings upfront.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$W8YXh0qkIRquS7PRkn7QWEp_RODZsldtY5jIAI2RN_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635999483592,"senderName":"Widdershin","senderId":"@widdershin:matrix.org","id":"$gLCMXhR7WeNVTBwPG6zkyRSQBLEDQwfJb_ScrvVgsQw"},
{"content":{"body":"Jeffrey Yasskin: TabAtkins mentioned he might do something about it, I don't have the bandwidth at the moment","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jyasskin:matrix.org\">Jeffrey Yasskin</a>: <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> mentioned he might do something about it, I don't have the bandwidth at the moment","msgtype":"m.text"},"ts":1636011121202,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$WRv_9jhXkaID4t3G_d2gNrGYW-1et69KyheAukwzaDM"},
{"content":{"body":"yes, it's on my plate, tho i'm rather busy this month","msgtype":"m.text"},"ts":1636040264134,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oDB3D1kAoQnN88l5ZM1X83pfZOtWzf_ci4PhS55dr0k"},
{"content":{"body":"but generally i want to adapt the current w3c layout to whatwg, plus darkmode","msgtype":"m.text"},"ts":1636040297522,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GpLDOrS2PNR1UJ5BmjvoLIOnBTUD3ZMqS-8x1043gXY"},
{"content":{"body":"annevk: I was mumbling to krosylight how rarely I write spec prs and how I always need to go through all the documentation scattered in random places before writing the pr (well, first I need to always find the documentation). It would be really nice to have some step-by-step documentation for all the normal tooling around spec writing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: I was mumbling to <a href=\"https://matrix.to/#/@krosylight:mozilla.org\">krosylight</a> how rarely I write spec prs and how I always need to go through all the documentation scattered in random places before writing the pr (well, first I need to always find the documentation). It would be really nice to have some step-by-step documentation for all the normal tooling around spec writing.","msgtype":"m.text"},"ts":1636060044121,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$sn5q--vxHYfxfNBU4_gB77PbIZ-lHrSe7KOyO544hvU"},
{"content":{"body":"I wonder if you or Domenic had time to write something down. ","format":"org.matrix.custom.html","formatted_body":"I wonder if you or <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> had time to write something down.","msgtype":"m.text"},"ts":1636060065699,"senderName":"smaug","senderId":"@smaug:mozilla.org","id":"$GrIdz6uR47BXfiO-1M5QxGfu42CubFIbNppGU-UTbW4"},
{"content":{"body":"There are https://respec.org/docs/ and https://tabatkins.github.io/bikeshed/ but maybe it's not easy enough to find them","msgtype":"m.text"},"ts":1636060445466,"senderName":"krosylight","senderId":"@krosylight:mozilla.org","id":"$qgAPtEmMMPbv_Fa3m51H7AgKsD2Z7V6zwjR6b2G7dFg"}
]