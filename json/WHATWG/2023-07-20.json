[
{"content":{"body":"If someone familiar with image lazy loading could take a minute to look at https://github.com/mdn/content/pull/28077 and comment, that would be great. That change is adding this note:\n> **Note:** Images that have `loading` set to `lazy` will never be loaded if their width or height is `0`, even if loading them would change that.","format":"org.matrix.custom.html","formatted_body":"<p>If someone familiar with image lazy loading could take a minute to look at https://github.com/mdn/content/pull/28077 and comment, that would be great. That change is adding this note:</p>\n<blockquote>\n<p><strong>Note:</strong> Images that have <code>loading</code> set to <code>lazy</code> will never be loaded if their width or height is <code>0</code>, even if loading them would change that.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1689867404774,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$RSYNjKzouRWqg4ajoRfL0sKaSZcIRHZK8drvsOASh00"},
{"content":{"body":"sideshowbarker: This isn't an answer, but IIRC it's based on IntersectionObserver, I wonder if that's spec'd to fire when elements have no area","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: This isn't an answer, but IIRC it's based on IntersectionObserver, I wonder if that's spec'd to fire when elements have no area","msgtype":"m.text"},"ts":1689867556096,"senderName":"Eric Portis (he/him)","senderId":"@etportis:matrix.org","id":"$JFgdXCAwoRiPDhgj8vx5lNFWZA1O4Yh8W5U6M_z4DBU"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1689867572674,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$7lX7awe06URCIvCOSNio7ja1mUUS2nYxp8dxG2fL15M"},
{"content":{"body":"from a quick read through https://w3c.github.io/IntersectionObserver/#run-the-update-intersection-observations-steps, I can‚Äôt tell","msgtype":"m.text"},"ts":1689867941837,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$skzW8SFIRxRSvw94RHe5vGJVQlx1gVdgNI9a3kRlU20"},
{"content":{"body":"sideshowbarker: Because the lazyload spec uses the default threshold of zero, I think it is supposed to fire: https://wpt.fyi/results/intersection-observer/same-document-zero-size-target.html","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:matrix.org\">sideshowbarker</a>: Because the lazyload spec uses the default threshold of zero, I think it is supposed to fire: https://wpt.fyi/results/intersection-observer/same-document-zero-size-target.html","msgtype":"m.text"},"ts":1689868220798,"senderName":"Eric Portis (he/him)","senderId":"@etportis:matrix.org","id":"$HuKoCz0ac_eynGM2BAvXIaoefRPKCoakpTVZMdpGzVA"},
{"content":{"body":"I'll comment and if I'm wrong maybe somebody else will chime in (:","msgtype":"m.text"},"ts":1689868291582,"senderName":"Eric Portis (he/him)","senderId":"@etportis:matrix.org","id":"$oAAB_L6IJ-dMe1RXoUaMuLLtPYQwqvWJm601whz8QOI"},
{"content":{"body":"Cheers and thanks üëç","msgtype":"m.text"},"ts":1689868319571,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$OxIVwklX_J2CTULe2E8-9ccwUX6eWfRuv8JzrxBgrfg"},
{"content":{"body":"does JS support 64 bit numbers yet?","msgtype":"m.text"},"ts":1689887281249,"senderName":"Ian Hickson","senderId":"@hixie:matrix.org","id":"$PLmQY2ogBENlaDrNZtIlZCihwEfBX6HRdBU_GxjxgLg"},
{"content":{"body":"i'm trying to parse a binary data format that uses quadwords as the main building block","msgtype":"m.text"},"ts":1689887415388,"senderName":"Ian Hickson","senderId":"@hixie:matrix.org","id":"$xfE-wluwBu9NZEaxuwzKl8zUu5-qW5e9Zw7LiUSqaW8"},
{"content":{"body":"Ian Hickson: are you looking for https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array and/or https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array ?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hixie:matrix.org\">Ian Hickson</a>: are you looking for https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array and/or https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array ?","msgtype":"m.text"},"ts":1689887956095,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$O_u4GwHlVomLsjsSZ_BCKQzhGx4k0qwrPpBrt1Kf4tk"},
{"content":{"body":"ideally i would like to be able to store a 64 bit int in a variable and do maths with it","msgtype":"m.text"},"ts":1689888105565,"senderName":"Ian Hickson","senderId":"@hixie:matrix.org","id":"$2awN7hzr8PJSTr0lGAKw_OzwJIz84IYS_Zg_qqxW3yI"},
{"content":{"body":"yes, that is possible with BigInt","msgtype":"m.text"},"ts":1689888282529,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$O_TvnXEQTTsuaMJyzrgoPqTuzSwGI6GXjJ34De0z5Fs"},
{"content":{"body":"for example:\n```\n// Make an array-like view over a byte buffer containing the data for\n// 3 big-endian uint64s with the first two set to 2**63 - 1.\nconst uint8View = new Uint8Array([\n  127, ...Array(7).fill(255),\n  127, ...Array(7).fill(255),\n  ...Array(8),\n]);\nconst dataView = new DataView(uint8View.buffer);\nconst uint64View = {\n  get: i => dataView.getBigUint64(i * 8),\n  set: (i, n) => dataView.setBigUint64(i * 8, n),\n};\n\n// Read the first two values and set the third to their sum.\nconst a = uint64View.get(0);\nconst b = uint64View.get(1);\nassert(a === 2n ** 63n - 1n, \"a\");\nassert(b === 2n ** 63n - 1n, \"b\");\nconst c = a + b;\nuint64View.set(2, c);\n\n// Verify the results from both perspectives.\nassert(uint64View.get(2) == 2n ** 64n - 2n, \"c\");\nassert.deepEqual(uint8View.slice(0, 8), [127, ...Array(7).fill(255)], \"a bytes\");\nassert.deepEqual(uint8View.slice(8, 16), [127, ...Array(7).fill(255)], \"b bytes\");\nassert.deepEqual(uint8View.slice(16, 24), [...Array(7).fill(255), 254], \"c bytes\");\n```","format":"org.matrix.custom.html","formatted_body":"<p>for example:</p>\n<pre><code>// Make an array-like view over a byte buffer containing the data for\n// 3 big-endian uint64s with the first two set to 2**63 - 1.\nconst uint8View = new Uint8Array([\n  127, ...Array(7).fill(255),\n  127, ...Array(7).fill(255),\n  ...Array(8),\n]);\nconst dataView = new DataView(uint8View.buffer);\nconst uint64View = {\n  get: i =&gt; dataView.getBigUint64(i * 8),\n  set: (i, n) =&gt; dataView.setBigUint64(i * 8, n),\n};\n\n// Read the first two values and set the third to their sum.\nconst a = uint64View.get(0);\nconst b = uint64View.get(1);\nassert(a === 2n ** 63n - 1n, \"a\");\nassert(b === 2n ** 63n - 1n, \"b\");\nconst c = a + b;\nuint64View.set(2, c);\n\n// Verify the results from both perspectives.\nassert(uint64View.get(2) == 2n ** 64n - 2n, \"c\");\nassert.deepEqual(uint8View.slice(0, 8), [127, ...Array(7).fill(255)], \"a bytes\");\nassert.deepEqual(uint8View.slice(8, 16), [127, ...Array(7).fill(255)], \"b bytes\");\nassert.deepEqual(uint8View.slice(16, 24), [...Array(7).fill(255), 254], \"c bytes\");\n</code></pre>\n","msgtype":"m.text"},"ts":1689890293724,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$y68Uw--M8nTIa176_ovFDaNLD3vvSf-D_9QVggyx7q0"}
]