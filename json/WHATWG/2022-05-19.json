[
{"content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939477261,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `If classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>If classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `If classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>If classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `If classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>If classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `If classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>If classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939518790,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$F3jJo-qlDkZbzV53k3cRLTWF6a87-hyvS7HGeLFku30"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if classList.contains(\"a\") then replace(\"a\", \"d\") else replace(\"d\", \"a\")` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if classList.contains(&quot;a&quot;) then replace(&quot;a&quot;, &quot;d&quot;) else replace(&quot;d&quot;, &quot;a&quot;)</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939544483,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$1EM_fFzlqJeq-nk7PbekfLIO-M2yPC7Pxx7eUzyTuag"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) { replace(\"a\", \"d\") } else { replace(\"d\", \"a\") }` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) { replace(&quot;a&quot;, &quot;d&quot;) } else { replace(&quot;d&quot;, &quot;a&quot;) }</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) { replace(\"a\", \"d\") } else { replace(\"d\", \"a\") }` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) { replace(&quot;a&quot;, &quot;d&quot;) } else { replace(&quot;d&quot;, &quot;a&quot;) }</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) { replace(\"a\", \"d\") } else { replace(\"d\", \"a\") }` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) { replace(&quot;a&quot;, &quot;d&quot;) } else { replace(&quot;d&quot;, &quot;a&quot;) }</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) { replace(\"a\", \"d\") } else { replace(\"d\", \"a\") }` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) { replace(&quot;a&quot;, &quot;d&quot;) } else { replace(&quot;d&quot;, &quot;a&quot;) }</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939585248,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$QuvneXn0o29Nz43bc1GlI2qEO2SlO8_advcR4Abo8rQ"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")}` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)}</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")}` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)}</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")}` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)}</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")}` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)}</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939601235,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$9xt8z3GxbMtf_es347cGQU-oXsXBs63p6KwoKMRgqxI"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\")` returns `\"d b c\"`; next, `switch(\"a\", \"d\")` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;)</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939633231,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$uGpBk7XXSYiWzXOR_qV0HpLMkXIA1YQ_uEmXNgUzDR8"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {replace(\"a\", \"d\")} else {replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {replace(&quot;a&quot;, &quot;d&quot;)} else {replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939643283,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$wo1U75xlyMTP0rdNZBfzHUon8yEe6Wtg14BnM_u_3ZQ"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse an element, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939701445,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$sKSoscaJ-nEJYLJggkNxgXyKw3_Yvr2gkrn-pGXlZ2g"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div` as part of a custom component, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code> as part of a custom component, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div` as part of a custom component, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code> as part of a custom component, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div` as part of a custom component, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code> as part of a custom component, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div` as part of a custom component, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code> as part of a custom component, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652939962031,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$3KTqLYkTGWtH3e2ocUWg7IEMOSI0lZegujmnSJuMEK0"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div`, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code>, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div`, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code>, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div`, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code>, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a `div`, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I want to expand/collapse a <code>div</code>, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652940000849,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$aKku7tVyt8khBQVyrAKvma2AXy1pEQPNcdCjuEbakkI"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility.","mimetype":"text/html"}]},"ts":1652940007760,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$KaTR9V4paulQwkde1gWn90BZBOZJdaDFvLdy-NmHjbM"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"ts":1652940064512,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$3EB4tTDXVswKz8hWhVxcro8t707j3R1ZlPkvg0YrLQw"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`.","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>.","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`.","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`.","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`.","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>.","mimetype":"text/html"}]},"ts":1652940087279,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$d4zonjofB7O2z9OCdVnp_7-9rkJoaHWF2uBQPZiv4cs"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility: `classList.switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"ts":1652940092269,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$A0A9Yh3D9UZhLLDS9PscZdCX1nkHYHjzeVttpiYfu6s"},
{"content":{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility like so: `classList.switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility like so: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","m.new_content":{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility like so: `classList.switch(\"h-1/2\", \"h-full\");`","format":"org.matrix.custom.html","formatted_body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility like so: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility like so: `classList.switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":"Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility like so: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4AB_8J1amb__ZN48b3AdRc3AlCNTu7KVZ82Tbnt-ZrU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given `class=\"a b c\"`, the conditional statement `if (classList.contains(\"a\")) {classList.replace(\"a\", \"d\")} else {classList.replace(\"d\", \"a\")};` could be encapsulated by a function, call it `switch()`. For example, `switch(\"a\", \"d\");` returns `\"d b c\"`; next, `switch(\"a\", \"d\");` returns `\"a b c\"`. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a `div`, I could use this on the height utility like so: `classList.switch(\"h-1/2\", \"h-full\");`","mimetype":"text/plain"},{"body":" * Hi everyone. I have a suggestion for the DOMTokenList interface. Given <code>class=&quot;a b c&quot;</code>, the conditional statement <code>if (classList.contains(&quot;a&quot;)) {classList.replace(&quot;a&quot;, &quot;d&quot;)} else {classList.replace(&quot;d&quot;, &quot;a&quot;)};</code> could be encapsulated by a function, call it <code>switch()</code>. For example, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;d b c&quot;</code>; next, <code>switch(&quot;a&quot;, &quot;d&quot;);</code> returns <code>&quot;a b c&quot;</code>. I would find this useful for something like Tailwind utilities. For example, if I wanted to expand/collapse a <code>div</code>, I could use this on the height utility like so: <code>classList.switch(&quot;h-1/2&quot;, &quot;h-full&quot;);</code>","mimetype":"text/html"}]},"ts":1652940116217,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$A3HalaYxJHbtDvKqeCraZMjOxPIZWbPLhmpuHAqKJWQ"},
{"content":{"body":"Ben Smyth: in principle it seems you could do the same with `toggle()` and less classes, but you could file the sugestion against whatwg/dom; it would help a lot to see Stack Overflow questions requesting similar functionality, library usage, etc. https://whatwg.org/faq#adding-new-features might also help","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@benjsmyth:matrix.org\">Ben Smyth</a>: in principle it seems you could do the same with <code>toggle()</code> and less classes, but you could file the sugestion against whatwg/dom; it would help a lot to see Stack Overflow questions requesting similar functionality, library usage, etc. https://whatwg.org/faq#adding-new-features might also help","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ben Smyth: in principle it seems you could do the same with `toggle()` and less classes, but you could file the sugestion against whatwg/dom; it would help a lot to see Stack Overflow questions requesting similar functionality, library usage, etc. https://whatwg.org/faq#adding-new-features might also help","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@benjsmyth:matrix.org\">Ben Smyth</a>: in principle it seems you could do the same with <code>toggle()</code> and less classes, but you could file the sugestion against whatwg/dom; it would help a lot to see Stack Overflow questions requesting similar functionality, library usage, etc. https://whatwg.org/faq#adding-new-features might also help","mimetype":"text/html"}]},"ts":1652942172344,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$FeiMdflN0snWVWe6xcttiShGiBmXVsnH6YbZ-JEgGf4"},
{"content":{"body":"`classList.toggle(\"a\"); classList.toggle(\"d\");` seems pretty good to me...","format":"org.matrix.custom.html","formatted_body":"<code>classList.toggle(&quot;a&quot;); classList.toggle(&quot;d&quot;);</code> seems pretty good to me...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`classList.toggle(\"a\"); classList.toggle(\"d\");` seems pretty good to me...","mimetype":"text/plain"},{"body":"<code>classList.toggle(&quot;a&quot;); classList.toggle(&quot;d&quot;);</code> seems pretty good to me...","mimetype":"text/html"}]},"ts":1652944060543,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Rt5UHkG5LfLgfNdQoqWrcLJZ6lLpesThtix1sZg-2Cw"},
{"content":{"body":"Yeah, I just realized ... thanks for listening to my naive pitch anyways","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I just realized ... thanks for listening to my naive pitch anyways"},"ts":1652944540438,"senderName":"Ben Smyth","senderId":"@benjsmyth:matrix.org","id":"$ZIFvGqrlNtbeS1YwHSjewkt9UO8jNzN8EV3y91AiUl4"}
]