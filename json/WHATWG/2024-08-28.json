[
{"content":{"body":"> <@zcorpan:mozilla.org> https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values step 16\n\nRight — and that’s relevant _if_ either the “valid floating-point number” algorithm or the https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 requirement invoke the “rules for parsing floating-point number values” algorithm. But as far as I can see, neither part does. At least they definitely don’t _directly_ invoke it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$98QHAFDNNet-okzroViVSeNOscsCaWTTKHXFFPOhra4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">@zcorpan:mozilla.org</a><br>https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values step 16</blockquote></mx-reply>Right — and that’s relevant <em>if</em> either the “valid floating-point number” algorithm or the https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 requirement invoke the “rules for parsing floating-point number values” algorithm. But as far as I can see, neither part does. At least they definitely don’t <em>directly</em> invoke it.","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$98QHAFDNNet-okzroViVSeNOscsCaWTTKHXFFPOhra4"}},"msgtype":"m.text"},"ts":1724823763370,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$W7JZucepeHIj9qmzXLnNTzzOPEuMneY2_g1KuJL40m4"},
{"content":{"body":"> <@domenicdenicola:matrix.org> How would you expose a value larger than Number.MAX_VALUE to JS?\n\nAs far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>How would you expose a value larger than Number.MAX_VALUE to JS?</blockquote></mx-reply><p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA"}},"msgtype":"m.text"},"ts":1724824285772,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$WaeK3ehor10hD4paPj-4I4bnGnOFuQwxkh-ZBLnMtDA"},
{"content":{"body":"> <@domenicdenicola:matrix.org> How would you expose a value larger than Number.MAX_VALUE to JS?\n\n * As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ statement seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>How would you expose a value larger than Number.MAX_VALUE to JS?</blockquote></mx-reply> * <p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> statement seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{},"m.new_content":{"body":"As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ statement seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> statement seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WaeK3ehor10hD4paPj-4I4bnGnOFuQwxkh-ZBLnMtDA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724824319767,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$N9w0AmrHj26Ecl9lKil-tHK1IzfDtplmGuPJKqtV1CE"},
{"content":{"body":"sideshowbarker: aha, yeah. Maybe it makes more sense to invoke the parse rules then","msgtype":"m.text"},"ts":1724824829829,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$fHEpKV5EwAUW_BtqEU0InAwDCnrUa6oHdbvZvbppkwc"},
{"content":{"body":"Yeah — or maybe drop the requirement entirely?","m.mentions":{},"msgtype":"m.text"},"ts":1724824947321,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$_2JT_DcRxEj8kBAgJbJ2cXXTd8uAtVq3i5czXfP5DG4"},
{"content":{"body":"Though I guess that wouldn’t be backward-compatible now","m.mentions":{},"msgtype":"m.text"},"ts":1724824994176,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$iuzzkJCDfEdzdO3dUZWcaXqv3AEU4VyZqM24XyNoJy0"},
{"content":{"body":"But I mean, it doesn’t seem like anyone knows why that is-valid requirement was added to begin with, or what problem it’s meant to solve","m.mentions":{},"msgtype":"m.text"},"ts":1724825012651,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$K40UsU-oZ4Lybl7uvu2NKgmhgGHU2Do3jp_II2OWRxI"},
{"content":{"body":"And the parse rules already get invoked on that string — just elsewhere, later","m.mentions":{},"msgtype":"m.text"},"ts":1724825130423,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$HSJ36cvkLaLGMXWq9wnNR8FyHq9LS54wwYhYI9pWhqU"},
{"content":{"body":"Also implementations don't show the result of parse as per the test I showed yesterday. They only do that once you manipulate the value using the up and down buttons. That leads me to think implementations do have a non-parsing validator as required by the specification, however weird that may be.","m.mentions":{},"msgtype":"m.text"},"ts":1724837392484,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$vaTsXVGJRzgZFzD7RiPvLaHEybg00qT8iFsrGr0z6vk"},
{"content":{"body":"How is it valid to return `? ReadableStreamFromIterable(...)` from https://streams.spec.whatwg.org/#rs-from?","format":"org.matrix.custom.html","formatted_body":"How is it valid to return <code>? ReadableStreamFromIterable(...)</code> from https://streams.spec.whatwg.org/#rs-from?","m.mentions":{},"msgtype":"m.text"},"ts":1724875495466,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$3dr2rxieu9Z38ueKfbVN3IgHGqFnQkgmkJnT44Dxz7w"},
{"content":{"body":"The `?` means operations can give you a throw completion, which we're just returning instead of converting to an exception and re-throwing it to Web IDL?","format":"org.matrix.custom.html","formatted_body":"The <code>?</code> means operations can give you a throw completion, which we're just returning instead of converting to an exception and re-throwing it to Web IDL?","m.mentions":{},"msgtype":"m.text"},"ts":1724875527819,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$IOnr6bAPfxZ4IirpuLvZj17dvpmSqrAMgl_v07VwkXQ"},
{"content":{"body":"Or does `?` somehow translate to \"re-throw\" in Web IDL world. It doesn't seem like it though.","format":"org.matrix.custom.html","formatted_body":"Or does <code>?</code> somehow translate to \"re-throw\" in Web IDL world. It doesn't seem like it though.","m.mentions":{},"msgtype":"m.text"},"ts":1724875878607,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$82cTSWa-7014KtXIjtMVnYWkkIiPIgagIwSFouV3oTs"},
{"content":{"body":"HTML does this too: https://html.spec.whatwg.org/C#structuredserialize","m.mentions":{},"msgtype":"m.text"},"ts":1724876101980,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$oQU2aJaukL32NnFNg8CGFcHuNWm8mzrOIyfZlKkxJzo"},
{"content":{"body":"Dominic Farolino: does https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt help?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: does https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt help?","m.mentions":{"user_ids":["@domfarolino:matrix.org"]},"msgtype":"m.text"},"ts":1724876118333,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$XaDbOEOjR9dWuu_QXUTSYIh6-M3cx6gtIMBgRFFiULs"},
{"content":{"body":"and the next section","m.mentions":{},"msgtype":"m.text"},"ts":1724876124800,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$XhoE0CC4EMAJF1bV712aSppzp_57E1URBm_Sn6lX6Jg"},
{"content":{"body":"that's indeed what it means in JS.","m.mentions":{},"msgtype":"m.text"},"ts":1724876128426,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uvEBajJ1u4pu6bvenAT4MLs76QBa_xNG4YybzOrQK9w"},
{"content":{"body":"> <@zcorpan:mozilla.org> Dominic Farolino: does https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt help?\n\nTo me it does not, but probably that's just because I don't get it :) those algorithms just Return the abrupt completions early. So ultimately that leads to us passing abrupt completions to Web IDL as the return value of some methods, and I don't see anything in Web IDL that converts abrupt completions to proper Exceptions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$XaDbOEOjR9dWuu_QXUTSYIh6-M3cx6gtIMBgRFFiULs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">@zcorpan:mozilla.org</a><br><a href=\"https://matrix.to/#/@domfarolino:matrix.org\">Dominic Farolino</a>: does https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt help?</blockquote></mx-reply>To me it does not, but probably that's just because I don't get it :) those algorithms just Return the abrupt completions early. So ultimately that leads to us passing abrupt completions to Web IDL as the return value of some methods, and I don't see anything in Web IDL that converts abrupt completions to proper Exceptions","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XaDbOEOjR9dWuu_QXUTSYIh6-M3cx6gtIMBgRFFiULs"}},"msgtype":"m.text"},"ts":1724876261457,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$JXyP2Dh8vjIYlvTJwoArXM0bVDd4_npiWDvwGMNS-pw"},
{"content":{"body":"Except for in the places where we invoke user callbacks. That seems to be the only place Web IDL specifically references \"abrupt completions\" and re-throws their completion record value.","m.mentions":{},"msgtype":"m.text"},"ts":1724876293928,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$jwNq_3Zm9QYkNRIKubVqFjAtIxP23SiwrmfQ00F-83U"},
{"content":{"body":"I'd expect generalized handling of that sort elsewhere in Web IDL, if we were allowed to return ES completion records from Web IDL methods","m.mentions":{},"msgtype":"m.text"},"ts":1724876385148,"senderName":"Dominic Farolino","senderId":"@domfarolino:matrix.org","id":"$UWguzOJ57CcZqtI5LbP_xp12haiBv4vzDYAJL6a7joQ"},
{"content":{"body":"Maybe Domenic knows this better :)","format":"org.matrix.custom.html","formatted_body":"Maybe <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> knows this better :)","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"ts":1724876577410,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$uEIabm2oa7HP2Dfkk9M2Iou1S-8UbMdM_LwMEohTJXQ"},
{"content":{"body":"The boundary between these is not super clear but the intention is that if you \"return\" an abrupt completion that's equivalent to throwing in the rest of the web ecosystem","m.mentions":{},"msgtype":"m.text"},"ts":1724876918097,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Ba28arEPPMkByzP8I9WPrdc6Y9GF2E2mu7NDAWk_eyE"},
{"content":{"body":"https://github.com/whatwg/infra/pull/539 tried to do stuff with this","m.mentions":{},"msgtype":"m.text"},"ts":1724876943134,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$1ogTsTH1FohiuwUPiDzQOjJZfj_OnV1z1qc3HtnwOrY"},
{"content":{"body":"A lot of places in Web IDL use the ?/! notation and thus completions","m.mentions":{},"msgtype":"m.text"},"ts":1724876952500,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$WZqMZupnwPSQiywC6EXu-mS_ot-pxVOkIcdZvc_2RLU"},
{"content":{"body":"https://github.com/whatwg/infra/issues/518 seems to express the same confusion","m.mentions":{},"msgtype":"m.text"},"ts":1724877163943,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$oA6xYeuHKHsN2OR22po94iWDoLw9C9186reGibMDjrA"}
]