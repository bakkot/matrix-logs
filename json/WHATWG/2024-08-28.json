[
{"content":{"body":"> <@zcorpan:mozilla.org> https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values step 16\n\nRight — and that’s relevant _if_ either the “valid floating-point number” algorithm or the https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 requirement invoke the “rules for parsing floating-point number values” algorithm. But as far as I can see, neither part does. At least they definitely don’t _directly_ invoke it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$98QHAFDNNet-okzroViVSeNOscsCaWTTKHXFFPOhra4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">@zcorpan:mozilla.org</a><br>https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values step 16</blockquote></mx-reply>Right — and that’s relevant <em>if</em> either the “valid floating-point number” algorithm or the https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4 requirement invoke the “rules for parsing floating-point number values” algorithm. But as far as I can see, neither part does. At least they definitely don’t <em>directly</em> invoke it.","m.mentions":{"user_ids":["@zcorpan:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$98QHAFDNNet-okzroViVSeNOscsCaWTTKHXFFPOhra4"}},"msgtype":"m.text"},"ts":1724823763370,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$W7JZucepeHIj9qmzXLnNTzzOPEuMneY2_g1KuJL40m4"},
{"content":{"body":"> <@domenicdenicola:matrix.org> How would you expose a value larger than Number.MAX_VALUE to JS?\n\nAs far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>How would you expose a value larger than Number.MAX_VALUE to JS?</blockquote></mx-reply><p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA"}},"msgtype":"m.text"},"ts":1724824285772,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$WaeK3ehor10hD4paPj-4I4bnGnOFuQwxkh-ZBLnMtDA"},
{"content":{"body":"> <@domenicdenicola:matrix.org> How would you expose a value larger than Number.MAX_VALUE to JS?\n\n * As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ statement seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$21I4pDRYI_26k61lAXMId1QN095Q5zbbRGVN-o2SgKA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>How would you expose a value larger than Number.MAX_VALUE to JS?</blockquote></mx-reply> * <p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> statement seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{},"m.new_content":{"body":"As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the [If the value of the element is not a valid floating-point number, then set it to the empty string instead](https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4) statement specify anything about requiring the number to be exposed to JS.\n\nCertainly the requirements (elsewhere) for actually doing anything with `HTMLInputElement.value` are about exposing the value to JS. But those are separate requirements. The _“rules for parsing floating-point number values”_ algorithm and the _“If the value of the element is not a valid floating-point number, then set it to the empty string instead”_ statement seem to be just limited to the _string value_. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character — without converting or otherwise processing the string in any way.","format":"org.matrix.custom.html","formatted_body":"<p>As far as I can understand, neither the “rules for parsing floating-point number values” algorithm nor the <a href=\"https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):valid-floating-point-number-4\">If the value of the element is not a valid floating-point number, then set it to the empty string instead</a> statement specify anything about requiring the number to be exposed to JS.</p>\n<p>Certainly the requirements (elsewhere) for actually doing anything with <code>HTMLInputElement.value</code> are about exposing the value to JS. But those are separate requirements. The <em>“rules for parsing floating-point number values”</em> algorithm and the <em>“If the value of the element is not a valid floating-point number, then set it to the empty string instead”</em> statement seem to be just limited to the <em>string value</em>. And implementation-wise, all they require is to essentially just run a lexer on the string, looking at the string character-by-character —&nbsp;without converting or otherwise processing the string in any way.</p>\n","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WaeK3ehor10hD4paPj-4I4bnGnOFuQwxkh-ZBLnMtDA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724824319767,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$N9w0AmrHj26Ecl9lKil-tHK1IzfDtplmGuPJKqtV1CE"}
]