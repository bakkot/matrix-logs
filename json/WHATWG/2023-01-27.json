[
{"content":{"body":"I'm thinking of blending them with the guess that half of the datapoints overlap","msgtype":"m.text"},"ts":1674778457279,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$G33c_lau5dFUF3yIc78mdlmscyIP7Z9LdaMTcL_rX40"},
{"content":{"body":"annevk: I finally found some corroboration for my belief that \"e.g.\" doesn't always need a comma after it: https://www.grammarly.com/blog/know-your-latin-i-e-vs-e-g/ talks about how it's important to add a comma when introducing a *list* of examples, but (implicitly) not for a single example. Also https://english.stackexchange.com/questions/16172/should-i-always-use-a-comma-after-e-g-or-i-e talks about how all the grammar guides hedge.\n\nThat said, I'm happy to settle on consistent and easy-to-remember WHATWG style being always to use the comma. I just wanted to make sure I wasn't crazy.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a>: I finally found some corroboration for my belief that &quot;e.g.&quot; doesn't always need a comma after it: https://www.grammarly.com/blog/know-your-latin-i-e-vs-e-g/ talks about how it's important to add a comma when introducing a <em>list</em> of examples, but (implicitly) not for a single example. Also https://english.stackexchange.com/questions/16172/should-i-always-use-a-comma-after-e-g-or-i-e talks about how all the grammar guides hedge.</p>\n<p>That said, I'm happy to settle on consistent and easy-to-remember WHATWG style being always to use the comma. I just wanted to make sure I wasn't crazy.</p>\n","msgtype":"m.text"},"ts":1674781681313,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$qov_D1RyNq_E01VNMU0YfOBsXWBTknZzbWmnaFy7iGU"},
{"content":{"body":"oxford commas...pick your style guide","msgtype":"m.text"},"ts":1674788722566,"senderName":"aja","senderId":"@aja:mozilla.org","id":"$eNRH1i-Oy-gKy_7OnSqsy6t09R3aGAsAJ6gSwo5sPP4"},
{"content":{"body":"Domenic: oh sorry, I never thought you were wrong. I was mainly trying to keep us consistent with a style someone expressed preference for at some point. ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: oh sorry, I never thought you were wrong. I was mainly trying to keep us consistent with a style someone expressed preference for at some point. ðŸ˜…","msgtype":"m.text"},"ts":1674801384093,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Smep88_890XWli4GzYlZFTAVwUVkz-RtvYrE3DC9L-U"},
{"content":{"body":"Domenic: About the error check after enqueue in Fetch:\n\n```js\nr = new ReadableStream({\n  async pull(c) {\n    await new Promise(r => setTimeout(r, 100));\n    c.byobRequest.respond(512);\n  },\n  type: \"bytes\"\n});\nreader = r.getReader({mode: \"byob\"});\nreader.read(new Uint16Array(1024));\nsetTimeout(() => reader.releaseLock(), 5);\n```\n\nThis eventually hits https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue which theoretically can error the stream. Can Fetch really ignore this?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: About the error check after enqueue in Fetch:</p>\n<pre><code class=\"language-js\">r = new ReadableStream({\n  async pull(c) {\n    await new Promise(r =&gt; setTimeout(r, 100));\n    c.byobRequest.respond(512);\n  },\n  type: &quot;bytes&quot;\n});\nreader = r.getReader({mode: &quot;byob&quot;});\nreader.read(new Uint16Array(1024));\nsetTimeout(() =&gt; reader.releaseLock(), 5);\n</code></pre>\n<p>This eventually hits https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue which theoretically can error the stream. Can Fetch really ignore this?</p>\n","msgtype":"m.text"},"ts":1674801545154,"senderName":"krosylight","senderId":"@krosylight:mozilla.org","id":"$1y0cHr7B913RupwXNW93uLA06GT5Uls6nV8Ds8khB80"},
{"content":{"body":"I wonder why the coalescing in popover was duplicated and not factored out, but maybe I can attempt to do that.","msgtype":"m.text"},"ts":1674810671100,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$XMzGUMeNoreRhiHcLduwzb61vZuFcQbteCSsAFoSBrg"},
{"content":{"body":"> <@annevk:matrix.org> smaug: hsivonen: I guess I clean those tests up, and also make the `encoding/` tests use `<meta>` instead for now so we don't run into this particular issue. And then file bugs against Chromium/WebKit or open a spec issue to see if we want to collectively reconsider given that more sites might rely on Chromium/WebKit behavior at this point...\n\nThanks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$3ZMB_RRZ0ds2E--qWnNMhn6qG9NQ3T9yyCnnPQZHa80?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br><a href=\"https://matrix.to/#/@smaug:mozilla.org\">smaug</a>: <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I guess I clean those tests up, and also make the <code>encoding/</code> tests use <code>&lt;meta&gt;</code> instead for now so we don't run into this particular issue. And then file bugs against Chromium/WebKit or open a spec issue to see if we want to collectively reconsider given that more sites might rely on Chromium/WebKit behavior at this point...</blockquote></mx-reply>Thanks.","m.relates_to":{"m.in_reply_to":{"event_id":"$3ZMB_RRZ0ds2E--qWnNMhn6qG9NQ3T9yyCnnPQZHa80"}},"msgtype":"m.text"},"ts":1674812055642,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$NUqyzqbT5o949d4OkYlSootsqxw4vUa0oDQA-2VG_ls"},
{"content":{"body":"zcorpan: Do you happen to recall history around https://www.w3.org/Bugs/Public/show_bug.cgi?id=25168 ? IIRC, the `XMLSerializer` API was introduced in Gecko. How did non-Gecko behaviors around bogus XML get introduced? Context: https://bugzilla.mozilla.org/show_bug.cgi?id=1763779","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">zcorpan</a>: Do you happen to recall history around https://www.w3.org/Bugs/Public/show_bug.cgi?id=25168 ? IIRC, the <code>XMLSerializer</code> API was introduced in Gecko. How did non-Gecko behaviors around bogus XML get introduced? Context: https://bugzilla.mozilla.org/show_bug.cgi?id=1763779","msgtype":"m.text"},"ts":1674812247739,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$4vOAGANVQqPN2z9qMLGdpePZODjDZiWrRiTCTh50sPE"},
{"content":{"body":"hsivonen: I don't know the history. Guessing that maybe the serializer was only expecting input that has been parsed by an XML parser, and not HTML parser or DOM APIs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't know the history. Guessing that maybe the serializer was only expecting input that has been parsed by an XML parser, and not HTML parser or DOM APIs","msgtype":"m.text"},"ts":1674815710724,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$8EFxUZCBjcukuqoZyYprHOX6khlADjtQSDN6Ihmkb08"},
{"content":{"body":"hsivonen: I guess that bug depends on what `createElement` does for that case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I guess that bug depends on what <code>createElement</code> does for that case","msgtype":"m.text"},"ts":1674815859994,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$60wbQg1jL9zom3HfRvRvy3AYD5dVAMLh4GD9P5bkVEg"},
{"content":{"body":"> <@zcorpan:mozilla.org> hsivonen: I don't know the history. Guessing that maybe the serializer was only expecting input that has been parsed by an XML parser, and not HTML parser or DOM APIs\n\nI'm pretty sure that as introduced in Gecko, `XMLSerializer` tried hard to skip over bogus stuff that might have been introduced via DOM Level 1 APIs. So where did contrary behavior come from? Anyway, it looks it's now 2 vs. 1 by the way of the 2 being whatever WebKit had before the Blink fork.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$8EFxUZCBjcukuqoZyYprHOX6khlADjtQSDN6Ihmkb08?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@zcorpan:mozilla.org\">@zcorpan:mozilla.org</a><br><a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">hsivonen</a>: I don't know the history. Guessing that maybe the serializer was only expecting input that has been parsed by an XML parser, and not HTML parser or DOM APIs</blockquote></mx-reply>I'm pretty sure that as introduced in Gecko, <code>XMLSerializer</code> tried hard to skip over bogus stuff that might have been introduced via DOM Level 1 APIs. So where did contrary behavior come from? Anyway, it looks it's now 2 vs. 1 by the way of the 2 being whatever WebKit had before the Blink fork.","m.relates_to":{"m.in_reply_to":{"event_id":"$8EFxUZCBjcukuqoZyYprHOX6khlADjtQSDN6Ihmkb08"}},"msgtype":"m.text"},"ts":1674816235023,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$7C9EYfElIBAauW_4qbTFet2jS6Um61mu8O2-jYtRi7Y"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1674816293614,"senderName":"zcorpan","senderId":"@zcorpan:mozilla.org","id":"$7J36mSlzQQGhnJF1onaBPcb-EN7QlYbgVlYvg4vnKEE"},
{"content":{"body":"Jonas Sicking might recall the details. Not sure how to reach him though. My impression is that there have always been problematic corner cases.","msgtype":"m.text"},"ts":1674817906678,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$aBzODbllwILzodsp7e9XEDr3Wl4YTvWA96_6t2DWI6Q"},
{"content":{"body":"annevk I addressed the pointerevents comment in the popover PR","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> I addressed the pointerevents comment in the popover PR","msgtype":"m.text"},"ts":1674839606564,"senderName":"jarhar","senderId":"@jarhar:matrix.org","id":"$X8yfZbRKNTK9DvQE_C0Hpzkz97GFdtBSNEpZP63TM2g"}
]