[
{"content":{"body":"CSS module scripts are standardized in HTML, not in CSS. The idea is that you can append whatever you imported to a style sheet set. For instance, a style sheet set belonging to a shadow root.","msgtype":"m.text"},"ts":1630911001626,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$r3yBJUfXwCavndKyb_KDJ9aXfuGv66CHUxwOMHckXzY"},
{"content":{"body":"Ambiguous ampersand made it to Nightly. ðŸŽ‰ Thanks sideshowbarker !","format":"org.matrix.custom.html","formatted_body":"Ambiguous ampersand made it to Nightly. ðŸŽ‰ Thanks <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a> !","msgtype":"m.text"},"ts":1630914309538,"senderName":"hsivonen","senderId":"@hsivonen:mozilla.org","id":"$WrMLGnxmmLZ3kvMkhTETXwWZF9TAMEHt0jyIelEljVs"},
{"content":{"body":"> <@hsivonen:mozilla.org> Ambiguous ampersand made it to Nightly. ðŸŽ‰ Thanks sideshowbarker !\n\nExcellent â€” laissez les bons temps rouler","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!AGetWbsMpFPdSgUrbs:matrix.org/$WrMLGnxmmLZ3kvMkhTETXwWZF9TAMEHt0jyIelEljVs?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@hsivonen:mozilla.org\">@hsivonen:mozilla.org</a><br>Ambiguous ampersand made it to Nightly. ðŸŽ‰ Thanks <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a> !</blockquote></mx-reply>Excellent â€” laissez les bons temps rouler","m.relates_to":{"m.in_reply_to":{"event_id":"$WrMLGnxmmLZ3kvMkhTETXwWZF9TAMEHt0jyIelEljVs"}},"msgtype":"m.text"},"ts":1630916089368,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$laO13-Xe5VuwbiWu_7-02aHcqpIw30ZCbbY9_PXYwc8"},
{"content":{"body":"annevk: Ok. already back with the first example of where javascript will not be sufficient for modifying the time input to become a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Ok. already back with the first example of where javascript will not be sufficient for modifying the time input to become a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","msgtype":"m.text"},"ts":1630923442325,"senderName":"stephanluis","senderId":"@stephanluis:matrix.org","id":"$8YfbIilRtkY-FL1w_24sTXCm1tz5wqI-No_21MtuEPg"},
{"content":{"body":" * annevk: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","m.new_content":{"body":"annevk: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: Ok. already back with the first example of where javascript is not sufficient for modifying the time input into a duration input.  The hurdle is that Safari adds AM or PM and converts to a 12hr clock.  While the 12hr conversion is straightforward to deal with -- for a timer up to 12 hours, removing the AM/PM with css updates is unreliable as this seems the only way to approach it  ::-webkit-datetime-edit-ampm-field { display: none;}  .  AM/PM is still displaying in my tests. I'm doubting that js/css can be used for a duration input polyfill .","msgtype":"m.text"},"m.relates_to":{"event_id":"$8YfbIilRtkY-FL1w_24sTXCm1tz5wqI-No_21MtuEPg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630923484558,"senderName":"stephanluis","senderId":"@stephanluis:matrix.org","id":"$M9ih8ZUD9QH7lfBRvQ1uDQVUXQAQR0_Up7qAz-HkY1M"}
]