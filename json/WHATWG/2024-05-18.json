[
{"content":{"body":"Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\nThen the bindings generator appears to be trying to do this:\n\n```\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).\n","format":"org.matrix.custom.html","formatted_body":"<p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code>RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject, *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716026309989,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q"},
{"content":{"body":" * Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code>RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code>RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026342708,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$wVyq98yA7_bNvREHJyDOr7fre8JeTwKymvf4_g-L3fI"},
{"content":{"body":" * Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject, \\\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026366800,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$VeVFnhOFeAlYrBk5itQmeuUmELY-64qPrxOIv9VTH2k"},
{"content":{"body":" * Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026404599,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$KKR8ZBGF9kAxPb9X5nDwW7BldFre1fTIkIeP2sXt7VU"},
{"content":{"body":" * WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in IDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026460533,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$QwNtavssQMQlbIQGJf3kttJZcI03cJZnAX40y8lzO5U"},
{"content":{"body":" * WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective xfragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective xfragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026474248,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$IDstVtJMMGuT0buVA5dFgdjfH0R4c6SH8pIwlvKnRhc"},
{"content":{"body":" * WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective fragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":" * <p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective fragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"m.new_content":{"body":"WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?\n\nSpecifically, if I’ve updated `Document.idl` to add this:\n\n```webidl\n [SameObject] readonly attribute FragmentDirective fragmentDirective;\n```\n\nAnd in some corresponding C++ sources, for `Document.h`, I’ve just done this:\n\n```\n FragmentDirective fragmentDirective;\n```\n\nThen the bindings generator appears to be trying to do this:\n\n```js\nRELEASE_AND_RETURN(throwScope, (toJS<IDLInterface<FragmentDirective>>(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n```\n\nAnd I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable `fragmentDirective()`).","format":"org.matrix.custom.html","formatted_body":"<p>WebIDL JS bindings-generation question: Any clues as to why JS bindings-generation code would try to generate a callable function for something defined in WebIDL as an attribute?</p>\n<p>Specifically, if I’ve updated <code>Document.idl</code> to add this:</p>\n<pre><code class=\"language-webidl\"> [SameObject] readonly attribute FragmentDirective fragmentDirective;\n</code></pre>\n<p>And in some corresponding C++ sources, for <code>Document.h</code>, I’ve just done this:</p>\n<pre><code> FragmentDirective fragmentDirective;\n</code></pre>\n<p>Then the bindings generator appears to be trying to do this:</p>\n<pre><code class=\"language-js\">RELEASE_AND_RETURN(throwScope, (toJS&lt;IDLInterface&lt;FragmentDirective&gt;&gt;(lexicalGlobalObject,\n    *thisObject.globalObject(), throwScope, impl.fragmentDirective())));\n</code></pre>\n<p>And I realize that different bindings generators for different engines might do some different things — but I’d assume they should be doing basically the same thing (e.g., in this case, they’d all for some reason try to generate a callable <code>fragmentDirective()</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fpEJPSxeelw9jG4rpyg-TDXELH_eW7Incs2xxM2O42Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716026522531,"senderName":"sideshowbarker","senderId":"@sideshowbarker:matrix.org","id":"$gaE7B3W-qxNV5WSFxM91GrsnE9BaBDbboopdwMue-xg"}
]