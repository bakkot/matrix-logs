[
{"content":{"body":"So from the ES spec's PoV, the JS -> wasm interface is some non-standard host-provided functions?","m.mentions":{},"msgtype":"m.text"},"ts":1722384039362,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$EWC4sI0u5XWMruw1AXK_JVjhpgaa5hMpMFUVtdX75bE"},
{"content":{"body":"yes, it is this spec: https://www.w3.org/TR/wasm-js-api-2/","m.mentions":{},"msgtype":"m.text"},"ts":1722384065270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nSu4I-6VuQWPuayzKLU6_Vy87QZMrp0sUGgwsULGowE"},
{"content":{"body":"how kosher it is idk, i didn't review it","m.mentions":{},"msgtype":"m.text"},"ts":1722384069652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h5Uunq93p4rbuawnX-C4tjD7_0rxZa6dLseUlBLbZek"},
{"content":{"body":"https://www.w3.org/TR/wasm-js-api-2/#run-a-host-function 's step 5 invokes ES's Call operation, that's how control shifts back to ES semantics?","m.mentions":{},"msgtype":"m.text"},"ts":1722384400175,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Z1RkCsNwad__hvl02mIe-SWq38SsrP3IpgqXTFgExXk"},
{"content":{"body":"So Call invokes the (host) function's [[Call]], which is (say) 10.2.1, which invokes PrepareForOrdinaryCall, which is where the stack manipulation happens.","m.mentions":{},"msgtype":"m.text"},"ts":1722384758337,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$O-cZ8_zfjXYfmaNhwC-2h6d3PPOVg_d7cm7z7cH6EXg"},
{"content":{"body":"... hm, if I understand correctly, your questions are independent of what the host function *does*, you're just asking about what happens when the host function returns?","format":"org.matrix.custom.html","formatted_body":"... hm, if I understand correctly, your questions are independent of what the host function <em>does</em>, you're just asking about what happens when the host function returns?","m.mentions":{},"msgtype":"m.text"},"ts":1722385984936,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$coL40UhFyXjMtsFAUJlRbfYscTtGz1pKuY-Gv-euh2c"},
{"content":{"body":"\"my question is: the entry EC is suspended in the middle of wasm doing its own thing in step 2. when we resume, is it reasonable to say that we'll magically return to step 3 and then 2?\" Modulo some terminology, and assuming I'm not misunderstanding, yes, I think it's reasonable.","m.mentions":{},"msgtype":"m.text"},"ts":1722386541467,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$i8mntlEOfvd23CyUaoHbR4QtwY48Kb30QZ6VWyxCPck"},
{"content":{"body":"The ES spec doesn't explicitly consider the case where an ordinary function calls a non-standard exotic function which then calls an ordinary function, but I don't think the spec has a problem with it.","m.mentions":{},"msgtype":"m.text"},"ts":1722387596227,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$df4TJvsWveDiIifuqDZE4dwoaC2H1SNo2C0_K376BMA"},
{"content":{"body":"The spec assumes that the exotic function isn't mangling the execution context stack somehow. (I.e., there are Asserts to something like that effect.)","m.mentions":{},"msgtype":"m.text"},"ts":1722387673257,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$xejlfBsnDvJVHgcRYLJ-kQLdvUheqO5xs-SJTpzuDA4"},
{"content":{"body":" * The spec assumes that the exotic function isn't mangling the execution context stack somehow. (I.e., there are Asserts to something like that effect.) I suppose it could be more explicit about that, but I don't think that would change the answer to your question.","m.mentions":{},"m.new_content":{"body":"The spec assumes that the exotic function isn't mangling the execution context stack somehow. (I.e., there are Asserts to something like that effect.) I suppose it could be more explicit about that, but I don't think that would change the answer to your question.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xejlfBsnDvJVHgcRYLJ-kQLdvUheqO5xs-SJTpzuDA4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722387725396,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$iq-uzeBCjEH3VvnbrAt3I2HkYilt5ca63Ys5mzhJTy0"},
{"content":{"body":"A different way to look at it: Implicit in the ES spec (and Infra-based specs) is that when algorithm A invokes algorithm B, algo A waits, doing nothing, until algo B returns, at which point algo A picks up right where it left off. (Note that this is distinct from Suspend and Resume, which are verbs that apply to execution contexts, not algos.)","m.mentions":{},"msgtype":"m.text"},"ts":1722393554981,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$hrw1P2UDT8RJ5pubtkY0wwj4dR-Dxl7h5vtdMdhxNPQ"},
{"content":{"body":" So when https://www.w3.org/TR/wasm-js-api-2/#run-a-host-function invokes the Call operation (to execute the host function), the understanding is that the 'run a host function' algorithm will wait there, doing nothing, until the Call operation returns, at which point the 'run a host function' will pick up where it left off.","m.mentions":{},"msgtype":"m.text"},"ts":1722393559553,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Kt9Vb5rlcCb-qF1mPK40xmRstT4J9jyQd-2XO8m3wvs"},
{"content":{"body":"So it's not magical, it's just the normal meta-semantics of one algo invoking another.","m.mentions":{},"msgtype":"m.text"},"ts":1722393693604,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$YokIn-BcMqyDyp8phrJ7UiTqf-JfD4qe_32L6Yx5iIE"},
{"content":{"body":"And I don't think it has much to do with execution contexts (or Suspend and Resume). ","m.mentions":{},"msgtype":"m.text"},"ts":1722393814345,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PNfEC6EyIsuGZb2_8cGZNMqKaKJJFxBVYtTy4nhkBGc"},
{"content":{"body":"You're right that 2962's clarification of transfer-of-control doesn't help with this question, because the question doesn't involve a transfer-of-control in 2962's sense. But 2962 does eliminate \"Suspend\" and \"Resume\" as things you can do to execution contexts, which might help in thinking about the question.","m.mentions":{},"msgtype":"m.text"},"ts":1722394348099,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$QfFUEdLmXtZu9mZCWf1Mrey2QtnptjSGmncwIykt628"},
{"content":{"body":"You ask: \"if another spec embeds JS, and is running its own machinery, then removes a JS execution context in the middle of its own steps, do we think that pauses at that point in the embedder's spec's machinery?\" What do you think would remove an execution context?","m.mentions":{},"msgtype":"m.text"},"ts":1722394692807,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$kCGiGvJpQg0TPRaI1uKiSR9gYHA67NUxA_oHx6f5mEE"},
{"content":{"body":"> <@jmdyck:matrix.org> You ask: \"if another spec embeds JS, and is running its own machinery, then removes a JS execution context in the middle of its own steps, do we think that pauses at that point in the embedder's spec's machinery?\" What do you think would remove an execution context?\n\nif the wasm machinery has some operation that explicitly Suspends the execution context","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!nSLHQtIRJQxUJbEuGt:matrix.org/$kCGiGvJpQg0TPRaI1uKiSR9gYHA67NUxA_oHx6f5mEE?via=matrix.org&via=igalia.com&via=beeper.com\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br>You ask: &quot;if another spec embeds JS, and is running its own machinery, then removes a JS execution context in the middle of its own steps, do we think that pauses at that point in the embedder&#39;s spec&#39;s machinery?&quot; What do you think would remove an execution context?</blockquote></mx-reply>if the wasm machinery has some operation that explicitly Suspends the execution context","m.mentions":{"user_ids":["@jmdyck:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kCGiGvJpQg0TPRaI1uKiSR9gYHA67NUxA_oHx6f5mEE"}},"msgtype":"m.text"},"ts":1722400731553,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MB9EMrU9-axX21AYFoDhgbAwCBWVixjiNt5qAjSmtjU"},
{"content":{"body":"like, it normatively refers to the 262 notion of EC and Suspend","m.mentions":{},"msgtype":"m.text"},"ts":1722400740848,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LR8qH-d0bWFOZ97vVjBv_RAHSM0T378HEo_Aepf3PqY"}
]