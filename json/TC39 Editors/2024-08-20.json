[
{"content":{"body":"@bakkot:matrix.org do you have an opinion on this? https://github.com/tc39/ecma262/issues/3370","format":"org.matrix.custom.html","formatted_body":"<a href=\"https%3A%2F%2Fmatrix.to%2F%23%2F%40bakkot%3Amatrix.org\">@bakkot</a> do you have an opinion on this? https://github.com/tc39/ecma262/issues/3370","msgtype":"m.text"},"ts":1724187268971,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IfpbVrgLi2i3f1uXQ_SdyoIBGcTnr5-pUVyKeUE506w"},
{"content":{"body":"lean negative. the prose becomes hard to read without knowing the types if we do that, I think","m.mentions":{},"msgtype":"m.text"},"ts":1724190025415,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TgsDWYohfGJb2gFDyI5T3NPcGBOiP6hGfD1Vt_QOY2g"},
{"content":{"body":"wouldn't the return type of these expressions that have \"is true\" or \"is false\" elided always be Boolean?","m.mentions":{},"msgtype":"m.text"},"ts":1724190254525,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LKJtLROOrLy6mGixB-gL4vmHuOzQ4xlMi2Afw1BDbEg"},
{"content":{"body":"well, yes, but if you're reading an english sentence it's kind of weird to encounter something which would normally be a noun and instead it's being used as a condition","m.mentions":{},"msgtype":"m.text"},"ts":1724190609355,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UXveriCXVYNyLrEoceMzYI9utQvm43Wvg88ro31PFAQ"},
{"content":{"body":"not sure i follow","m.mentions":{},"msgtype":"m.text"},"ts":1724190938213,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6f7Qc7NJdmET4lJTvxEn4kxIRETvpmlSv-fvYha0XCY"},
{"content":{"body":"the proposal is allow elisions where it reads naturally in english, not that \"is true\" and \"is false\" be systematically dropped everywhere","m.mentions":{},"msgtype":"m.text"},"ts":1724190964631,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_eFeLeLZdZjBcfOSM2oC6z31GrX2tPe1MOsjknRE7OI"},
{"content":{"body":"how would you systematically drop \"is false\"?","m.mentions":{},"msgtype":"m.text"},"ts":1724191248437,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$VrJGfiLYXeuAHZSF9nbaN4bDs-0jtRIjiNmKLJdSFzs"},
{"content":{"body":"or un-systematically?","m.mentions":{},"msgtype":"m.text"},"ts":1724191268804,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PnCEnmmSnBeVyb-MBk8Sop_mM-hifJZcUrxJpAKpn7s"},
{"content":{"body":"like, would you change `X is false` to `it is not the case that X` ?","format":"org.matrix.custom.html","formatted_body":"like, would you change <code>X is false</code> to <code>it is not the case that X</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1724191333737,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$iU3MbtnVMMVkqJQXXKYmknQuXjOx-twUigtQUorRhuQ"},
{"content":{"body":"no, you just wouldn't change it","m.mentions":{},"msgtype":"m.text"},"ts":1724191780681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1CEW8xIcQchge4oOUa7tZBXl5nYtnMbTZsM0huXHH78"},
{"content":{"body":"So ignore mentions of eliding \"is false\"?","m.mentions":{},"msgtype":"m.text"},"ts":1724191821453,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$e68YPYFHMKngcJu-wj49FXacHx696hiGnytKBEJx30E"},
{"content":{"body":"i want to type e.g. \"If IsFoo(foo), then\" instead of \"If IsFoo(foo) is true, then\"","m.mentions":{},"msgtype":"m.text"},"ts":1724191837224,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sieYMbfC10JEco3dsub3Tg4tY6Mje6wppUsZD9FTveg"},
{"content":{"body":"oh sorry, you were specifically talking about false","m.mentions":{},"msgtype":"m.text"},"ts":1724191845471,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$okPu8a8i8iiwL8BR4JxU7Kftq8urUuJKbZHKfFf29_w"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1724191849925,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$SfWMu4iwbrZztT86tmSOhhRNJgk5IT6cKff05KSAkcc"},
{"content":{"body":"hmm that's a good point, i don't see a natural way to elide \"is false\" at the moment","m.mentions":{},"msgtype":"m.text"},"ts":1724191858969,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mLXrRQA6V0KizW-RPVwsuou8dZAhgmvjC-uZZ2VMTlQ"},
{"content":{"body":"I'm trying out eliding \"is true\", modifying my pseudocode grammar to handle the result, but I'm hitting some ambiguities.","m.mentions":{},"msgtype":"m.text"},"ts":1724191975841,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$J1T7J6O9szCHCBRov9jxlF7RbMI-2QksXsze79guT_c"},
{"content":{"body":"ooh fun, do tell","m.mentions":{},"msgtype":"m.text"},"ts":1724192051418,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FOqdl_2fCD5lp8eotwrYNnuPFTM6f9GdGcZZ3HLAfn8"},
{"content":{"body":"later; time for food","m.mentions":{},"msgtype":"m.text"},"ts":1724192245478,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$gpax8zQXnYqSV4cGDo4axyAkn5XrTJ0HBAfr3vgZskE"},
{"content":{"body":"> <@shuyuguo:matrix.org> the proposal is allow elisions where it reads naturally in english, not that \"is true\" and \"is false\" be systematically dropped everywhere\n\nAOs return values, which are nouns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!nSLHQtIRJQxUJbEuGt:matrix.org/$_eFeLeLZdZjBcfOSM2oC6z31GrX2tPe1MOsjknRE7OI?via=matrix.org&via=igalia.com&via=beeper.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>the proposal is allow elisions where it reads naturally in english, not that &quot;is true&quot; and &quot;is false&quot; be systematically dropped everywhere</blockquote></mx-reply>AOs return values, which are nouns","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_eFeLeLZdZjBcfOSM2oC6z31GrX2tPe1MOsjknRE7OI"}},"msgtype":"m.text"},"ts":1724192422632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-M6NBC-fBrFo1ADD5lulXAhNscxChwLNLupGrr0-yX8"},
{"content":{"body":"conditions like \"x is y\" are not nouns","m.mentions":{},"msgtype":"m.text"},"ts":1724192449416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D58WYXpO711-O4KFuhcCVNO9pj-grqZLFF1ORq0GLr8"},
{"content":{"body":"so it cannot read naturally unless you stop seeing the AO invocation as an AO invocation and instead read it as words based on its name","m.mentions":{},"msgtype":"m.text"},"ts":1724192490561,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kc_Fc5O-boQtB7hCFW5crsD4HLvF15SJiQ5UXmDZ2rU"},
{"content":{"body":"also michael did want to drop it everywhere it sounded like","m.mentions":{},"msgtype":"m.text"},"ts":1724192512615,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bmhADrwJXuA3g-HiGwAlMIsZME46wE4qvw2rHRIrohY"},
{"content":{"body":"i also don't want to drop it everywhere i don't think","m.mentions":{},"msgtype":"m.text"},"ts":1724192622762,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E2tku8zwoiQ4ij__ZOK8GGH5SmjhsqDd9NlpHBfvVzU"},
{"content":{"body":"yeah I don't see a reason not to drop it everywhere","msgtype":"m.text"},"ts":1724197170627,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xSShIzw7W1wrpL4zLqKH_z4rw5r0FyW3jj_DzxpTTXs"},
{"content":{"body":"it can be easily explained","msgtype":"m.text"},"ts":1724197178765,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$p1oV8jvgRHCgPAQn7xc5kUkd6zhIxgvS6NWPo8xfsE0"},
{"content":{"body":"I made the ambiguities go away, but at the expense of misparsing at least one condition.","m.mentions":{},"msgtype":"m.text"},"ts":1724197451184,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$jyV_LhEywo-DsbMygk6SYVGvPnlloDF7QFclRtp5Yc4"},
{"content":{"body":"In `IsLessThan`, there's a step `If _nx_ or _ny_ is *NaN*, return *undefined*.`, which required me (long ago) to add a production to my pseudocode grammar `{CONDITION} : {var} or {var} is {LITERAL}`. If I leave that production in, I get tons of ambiguities. If I take it out, no ambigs, but `_nx_ or _ny_ is *NaN*` is now parsed like `(_nx_) or (_ny_ is *NaN*)`.","format":"org.matrix.custom.html","formatted_body":"In <code>IsLessThan</code>, there's a step <code>If _nx_ or _ny_ is *NaN*, return *undefined*.</code>, which required me (long ago) to add a production to my pseudocode grammar <code>{CONDITION} : {var} or {var} is {LITERAL}</code>. If I leave that production in, I get tons of ambiguities. If I take it out, no ambigs, but <code>_nx_ or _ny_ is *NaN*</code> is now parsed like <code>(_nx_) or (_ny_ is *NaN*)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1724197632028,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$evae-_zUadH3YJJ6ErEkdx0W93oGfpqaomNsjr8GN6k"},
{"content":{"body":"That one step has the only instance of that production in the whole spec, so if you rewrote the condition to `_nx_ is *NaN* or _ny_ is *NaN*`, I wouldn't need the production.","format":"org.matrix.custom.html","formatted_body":"That one step has the only instance of that production in the whole spec, so if you rewrote the condition to <code>_nx_ is *NaN* or _ny_ is *NaN*</code>, I wouldn't need the production.","m.mentions":{},"msgtype":"m.text"},"ts":1724197861732,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$IAn_A85gNV0c_valz56UuffOtgQPs-AoTfXH1gDW7Cs"}
]