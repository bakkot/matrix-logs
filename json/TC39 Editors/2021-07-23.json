[
{"content":{"body":"nope","msgtype":"m.text"},"ts":1626999612109,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oD9jadOboHghgT9L_4q217-I9VwAAJJgS4AyvIkgtwQ"},
{"content":{"body":"all AOs do, though, of any stripe","msgtype":"m.text"},"ts":1626999620906,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pl_1opqGDEgkIllHC2p-vTtZu9Nldiyw8mnVnVheRBQ"},
{"content":{"body":"(I believe)","msgtype":"m.text"},"ts":1626999624172,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9fCeEqbjCmHBTFZs1hiaWIFDbaaXzhoezTFOkIQeR3Q"},
{"content":{"body":" * all AOs do, though, including SDOs and host-defined AOs and so on","m.new_content":{"body":"all AOs do, though, including SDOs and host-defined AOs and so on","msgtype":"m.text"},"m.relates_to":{"event_id":"$pl_1opqGDEgkIllHC2p-vTtZu9Nldiyw8mnVnVheRBQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1626999648460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jx3_IUKNn33C2ZRGZbuVJHKH96X_rxJNm-4hOEk7DbY"},
{"content":{"body":"what about all static semantics that also have aoids?","msgtype":"m.text"},"ts":1626999763936,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aXpJ-9nYOaX-TbTBPPaQosxh7OLZ829Weo1Gx3u-Ljg"},
{"content":{"body":"i classified all the the `type=\"sdo\"` into `type=\"static sdo\"` vs `type=\"dynamic sdo\"`, since i need that info to stop propagating the can-call-user-code annotation","format":"org.matrix.custom.html","formatted_body":"i classified all the the <code>type=&quot;sdo&quot;</code> into <code>type=&quot;static sdo&quot;</code> vs <code>type=&quot;dynamic sdo&quot;</code>, since i need that info to stop propagating the can-call-user-code annotation","msgtype":"m.text"},"ts":1626999794439,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6mrZy0hgJhWHVkwufKKleNofdZzKHnSnaAYrGz6PfZw"},
{"content":{"body":"but that only works if we already exhaustively marked the SDOs","msgtype":"m.text"},"ts":1626999809787,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4BMMa_zEzL0ZXMxz-6rqfFbQ5w8b_V28H3JyoevMyJE"},
{"content":{"body":"I believe we have exhaustively marked the SDOs, yes","msgtype":"m.text"},"ts":1627009420814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DKm1_iQ6EP4Sn_Rarwae-wT986Pnb52HQlxjWX3g7TY"},
{"content":{"body":"SDOs have AOIDs still only because they do not yet have structured headers, since we just wanted to get that PR landed","msgtype":"m.text"},"ts":1627009447098,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BTT-nGOgQGPFpSEIOa4d0G9377_SuRR1vswNS8Iseco"},
{"content":{"body":"jmdyck: you should be able to speak here now if you're so inclined","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: you should be able to speak here now if you're so inclined","msgtype":"m.text"},"ts":1627009666859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7T5qlEVheIHFARm9TXm8s2q1MxvkDdjtVI5hc_sTJIc"},
{"content":{"body":"cool, thanks","msgtype":"m.text"},"ts":1627012806120,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$QE1r9cWNCLGtt_jvbXijJvuL-I0bQhlwnhnkcG08kmk"},
{"content":{"body":"\nThere are a few AOs that aren't the 'subject' of the emu-clause they appear in, so don't get a type attribute. E.g. thisBooleanValue\n","msgtype":"m.text"},"ts":1627013183270,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Ir21NXXbfBGlvivSeLNG0KePqti1gWCayMQAorKK9ZM"},
{"content":{"body":"As for SDOs, there are a few we don't mark with type=\"sdo\": Evaluation, regex-evaluation, MV, TV and TRV.\nAlso, the two clauses that define HasCallInTailPosition, although their parent does.\nPlus there are a few emu-annex'es that extend SDOs that don't get type=\"sdo\"","msgtype":"m.text"},"ts":1627013217444,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$uLMiUoCAsGNGHZ-kNIuL3_CJGh_FavxxPJLmLXfQjTI"},
{"content":{"body":"(So the rule appears to be: an emu-clause gets`type=\"sdo\"` iff it contains the complete definition of exactly one SDO.)","format":"org.matrix.custom.html","formatted_body":"(So the rule appears to be: an emu-clause gets<code>type=&quot;sdo&quot;</code> iff it contains the complete definition of exactly one SDO.)","msgtype":"m.text"},"ts":1627013303551,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$cUbx39bRGlsDR38EO8POAIgu6Iz_qjQQMm0O7PNDQzM"},
{"content":{"body":"(\"complete\" ignoring the existence of Annex B)","msgtype":"m.text"},"ts":1627013340199,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PJIbZ37wYjFl2EJ4JZrw5rC15r7GJfILF4Lyq8hhBPo"},
{"content":{"body":"The static/dynamic (or Static/Runtime) dichotomy applies to more than just SDOs, so you might want to express it in the dl.header, unless you also want e.g. type=\"static abstract operation\" and type=\"dynamic abstract operation\".","msgtype":"m.text"},"ts":1627013397017,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Pp5i1t3Ff5QcCc5VNj8z8GMpySs3rimw-IHlD1W4cz0"},
{"content":{"body":"Also, classifying ToString as static or dynamic is problematic, as shu has seen. You might consider duplicating the part of it that's needed for static processing, which I think would be just NumericToString. (So then you could classify NumericToString as static and ToString as dynamic.)","msgtype":"m.text"},"ts":1627013495082,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$8HkAs7hw_iTyS0nLIjofiqrZO3No2VtnghF4wGY2tRk"},
{"content":{"body":"jmdyck: i don't think AOs themselves need to be classified as static or dynamic, just the SDOs (for the purposes of this can-call-user-code annotation anyway)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: i don't think AOs themselves need to be classified as static or dynamic, just the SDOs (for the purposes of this can-call-user-code annotation anyway)","msgtype":"m.text"},"ts":1627052758481,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TKhhjIJJS0ijkpOdpoVMNSUydosmVgwhLSRcW4T3HRU"},
{"content":{"body":"Hm. So if you're classifying SDOs as to whether or not they can call user-code, why do you *also* need to classify them as static or dynamic?","format":"org.matrix.custom.html","formatted_body":"Hm. So if you're classifying SDOs as to whether or not they can call user-code, why do you <em>also</em> need to classify them as static or dynamic?","msgtype":"m.text"},"ts":1627059106966,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$V__WcbN1yXa6dfwN7lj74LtOKTALiFFb2JRrDeZVGA8"},
{"content":{"body":"jmdyck: i'm doing a simple reachability analysis so AOs don't need to be manually classified. the idea is to mark a few leaves as \"can call user code\", and then propagate that up all AOs that can transitively call them","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: i'm doing a simple reachability analysis so AOs don't need to be manually classified. the idea is to mark a few leaves as &quot;can call user code&quot;, and then propagate that up all AOs that can transitively call them","msgtype":"m.text"},"ts":1627059218632,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kew6ntD8DsAB14anbup-_i9FXt1BWrFEHVWpjQggYaU"},
{"content":{"body":"i'd like this propagation to stop at static SDO boundaries","msgtype":"m.text"},"ts":1627059231583,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jkwG574hY0I7bHyjgRCqps-JL6pbD5wukikbyLhc0P0"}
]