[
{"content":{"body":"oh hm, maybe i have it in my polyfill from before it was changed, i'll update","m.mentions":{},"msgtype":"m.text"},"ts":1706574628239,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Sqr7wbgVU8mUKL4mf-3Pt1hfLXmg0bgerT1bECJEdYw"},
{"content":{"body":"shu: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:\n```\n\t\t\t\tvar ta = new Uint8Array([1, 2, 3]);\n\t\t\t\tvar obj = { length: 1 };\n\t\t\t\tObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\n\t\t\t\tt.throws(\n\t\t\t\t\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'when a Get detaches the buffer, it throws'\n\t\t\t\t);\n\n```\n\nis it possible that there's an issue in the algorithm where it's missing a detachedness check?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:</p>\n<pre><code>\t\t\t\tvar ta = new Uint8Array([1, 2, 3]);\n\t\t\t\tvar obj = { length: 1 };\n\t\t\t\tObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\n\t\t\t\tt.throws(\n\t\t\t\t\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'when a Get detaches the buffer, it throws'\n\t\t\t\t);\n\n</code></pre>\n<p>is it possible that there's an issue in the algorithm where it's missing a detachedness check?</p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1706574723085,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oKJL-HRj1JYDR87UyFVJbFrr_9P4GNrCDNR2RRTR9-k"},
{"content":{"body":" * shu: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:\n\n```\nvar ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n```\n\nis it possible that there's an issue in the algorithm where it's missing a detachedness check?","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:</p>\n<pre><code>var ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n</code></pre>\n<p>is it possible that there's an issue in the algorithm where it's missing a detachedness check?</p>\n","m.mentions":{},"m.new_content":{"body":"shu: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:\n\n```\nvar ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n```\n\nis it possible that there's an issue in the algorithm where it's missing a detachedness check?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:</p>\n<pre><code>var ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n</code></pre>\n<p>is it possible that there's an issue in the algorithm where it's missing a detachedness check?</p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$oKJL-HRj1JYDR87UyFVJbFrr_9P4GNrCDNR2RRTR9-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706574754804,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vU5_joTzHqVlPUNo8HKbPLFgueSL0h-YJH999f6N_gM"},
{"content":{"body":" * shu: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:\n\n```\nvar ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n```\n\nis it possible that there's an issue in the algorithm where it's missing a detachedness check? (obv, there's always a chance the bug is in my impl, but it's pretty 1:1 with the spec text)","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:</p>\n<pre><code>var ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n</code></pre>\n<p>is it possible that there's an issue in the algorithm where it's missing a detachedness check? (obv, there's always a chance the bug is in my impl, but it's pretty 1:1 with the spec text)</p>\n","m.mentions":{},"m.new_content":{"body":"shu: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:\n\n```\nvar ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n```\n\nis it possible that there's an issue in the algorithm where it's missing a detachedness check? (obv, there's always a chance the bug is in my impl, but it's pretty 1:1 with the spec text)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: separately, i'm implementing the changes to SetTypedArrayFromArrayLike in ES2024, and only one of my tests is starting to fail - it's basically this:</p>\n<pre><code>var ta = new Uint8Array([1, 2, 3]);\nvar obj = { length: 1 };\nObject.defineProperty(obj, '0', { get: function () { ES.DetachArrayBuffer(ta.buffer); return 10; } });\n\nt.throws(\n\tfunction () { ES.SetTypedArrayFromArrayLike(ta, 1, obj); },\n\tTypeError,\n\t'when a Get detaches the buffer, it throws'\n);\n</code></pre>\n<p>is it possible that there's an issue in the algorithm where it's missing a detachedness check? (obv, there's always a chance the bug is in my impl, but it's pretty 1:1 with the spec text)</p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$oKJL-HRj1JYDR87UyFVJbFrr_9P4GNrCDNR2RRTR9-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706575030094,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xgv9K2mhHQkwF-lKvbTTbW6uSbzcv7RVeZyKfUFvTf4"},
{"content":{"body":"why do you think it should throw?","m.mentions":{},"msgtype":"m.text"},"ts":1706575099557,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jnKhHyYGvKiY1yg35uJLjLV0B27He5DM_Oms_7N3SyE"},
{"content":{"body":"like, which step do you think should be throwing","m.mentions":{},"msgtype":"m.text"},"ts":1706575109167,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D0MMiLtKugS6dr4A0zYMBSMwYQOrpIjGTUYnv56nRFY"},
{"content":{"body":"because it threw with the previous spec text","m.mentions":{},"msgtype":"m.text"},"ts":1706575116491,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CF6PoQCtg5n5ep_AUTZ2jf4hW0hYDLny6QbnxHZIA6E"},
{"content":{"body":"ah","m.mentions":{},"msgtype":"m.text"},"ts":1706575126206,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gtIQBsCNNDUqeGa1L_K5cfLB7-GCFSX0e1HeDBkxPeU"},
{"content":{"body":"so maybe it's just a spec bug that's now fixed, i haven't compared it to real TA code yet","m.mentions":{},"msgtype":"m.text"},"ts":1706575132526,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WuJ2HzxKtVSQmhy9BpNZHI7PFJsUEodDqkF81tu54Fg"},
{"content":{"body":"i mean i do see that SetTAFAL calls Get (which in this case detaches), and then it calls TypedArraySetElement, which then calls SetValueInBuffer, which then checks IsDetachedBuffer, which would throw","m.mentions":{},"msgtype":"m.text"},"ts":1706575187351,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T-Fu3RpdJ4jrvr3RTYLx1UF8Aw2-GpaLj9uZA5i7tmY"},
{"content":{"body":"i don't really know why it would throw previously","m.mentions":{},"msgtype":"m.text"},"ts":1706575202686,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WJ_SbM5qcakDjlWe7uoP0GePS9lraSvVSSdGDcEzmTY"},
{"content":{"body":"because the Get detaches it, right before it tries to Set to a detached buffer. shouldn't (doesn't) it throw now too?","m.mentions":{},"msgtype":"m.text"},"ts":1706575227713,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i1sRQaM8B3zLjsnZHvvqcJCfkz5ne6zMtRngDGDeVI4"},
{"content":{"body":"ah, but see step 3 here: https://tc39.es/ecma262/#sec-typedarraysetelement","m.mentions":{},"msgtype":"m.text"},"ts":1706575229041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8Ix0GiS2wDpWC2d7OJYEPrsofMDnnMgYY0O3g_VOeXg"},
{"content":{"body":"if it's not a valid index (which no index would be, if the buffer is detached), that AO just no-ops","m.mentions":{},"msgtype":"m.text"},"ts":1706575244198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IO6Fs3HjGyK8f6rMAlNI7l_T0SOIq-eaqn33oM0mnBI"},
{"content":{"body":"ohhhhhhhh","m.mentions":{},"msgtype":"m.text"},"ts":1706575249417,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tXc4wYGH0YKfUp50A1zV0Q5Ih3Zq61XfLXafUgGkEdg"},
{"content":{"body":"this was part of the reality alignment changes that rkirsling did a while back","m.mentions":{},"msgtype":"m.text"},"ts":1706575257216,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g7P7yhzFYNdof6Dh_gqSJoXamjV8IzjYo8vhUBrlMCA"},
{"content":{"body":"but that should predate es2024 for sure","m.mentions":{},"msgtype":"m.text"},"ts":1706575262274,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ruXpINImEkNSLa7TlfD3f7-3C5rqhN7FS5qwrzei1T8"},
{"content":{"body":"hm, ok, maybe it's a bug in my earlier implementations too then. but that suggests that at some point, the spec said to throw for this test but impls did not?","m.mentions":{},"msgtype":"m.text"},"ts":1706575293705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eQyT6JvVxJ-OrMfF2ik5eRLL87p-497gLDB_lJTdwBA"},
{"content":{"body":"yes, the TA stuff is famously out of sync with impl reality since it was imported from Khronos","m.mentions":{},"msgtype":"m.text"},"ts":1706575324939,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E5-8wMZE5pTU663jbRA2CiE67WeyVrENd2IsbDoOyno"},
{"content":{"body":"which is why ross proposed those changes","m.mentions":{},"msgtype":"m.text"},"ts":1706575333827,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9aSzQEBgC_fEyvAffYVHsbJZmExNxGxF0bA7SQA8X00"},
{"content":{"body":"thanks for confirming, i can dive in from here. it's probably that SetTAFromArrayLike changed at some point before 24, and i failed to update my impl to match","m.mentions":{},"msgtype":"m.text"},"ts":1706575366418,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HNnTafbv5BJMEAygjuVEfwnTIuFIBJ1K_6kMCJ5owfE"},
{"content":{"body":"famously out of sync with impl reality, specifically on what throws on detached and what no-ops, and what returns 0 etc","m.mentions":{},"msgtype":"m.text"},"ts":1706575368924,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vF6Y5XvJFR3jO4Bp64-UlO8fBXi8qGpjEIp50K-sa9c"}
]