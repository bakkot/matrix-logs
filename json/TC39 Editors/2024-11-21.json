[
{"content":{"body":"@bakkot:matrix.org explain this: https://github.com/tc39/ecmarkup/blob/main/src/Spec.ts#L1878-L1887","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> explain this: https://github.com/tc39/ecmarkup/blob/main/src/Spec.ts#L1878-L1887","msgtype":"m.text"},"ts":1732149301433,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$J0XbVkbUAsiUZs3JRTQnyjjq6Oh8UVf-RSO-2TeZpKY"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1732149378703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9oH5ZhjiLJzz_TjlhyChgffXxJkMlQNAspNCiaHcQPY"},
{"content":{"body":"I mean, that one is necessary because ecmarkup outputs utf8","m.mentions":{},"msgtype":"m.text"},"ts":1732149390533,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IU2XCMUFITLSdS_pK8fs6AXxbFIBa-ju3y1CEZKQxA8"},
{"content":{"body":"significantly predates me https://github.com/tc39/ecmarkup/commit/ce5fcdd77cda052fdadc93b0f6bf12f69ecf2f98","m.mentions":{},"msgtype":"m.text"},"ts":1732149421556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DFcCKrQSo1yxZmRdP-irih54E4iOAYC6N_hcAcy-PbQ"},
{"content":{"body":"before i merge the pending things, could perhaps https://github.com/tc39/ecma262/pull/3480 land so i don't have to manually check the IPR pre-merge anymore?","m.mentions":{},"msgtype":"m.text"},"ts":1732210115790,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IForkyBXQ4AWcj59W7q3TzRyhVupYURfYLl1Y3M3VpU"},
{"content":{"body":"I'm not interested in reviewing it, so if @bakkot:matrix.org says it's good, it's fine by me","format":"org.matrix.custom.html","formatted_body":"I&#39;m not interested in reviewing it, so if <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> says it&#39;s good, it&#39;s fine by me","msgtype":"m.text"},"ts":1732210217971,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gpCV-jI3WidgiUFNEXOYOS50cjWNK7S1Qi3VJSeuKiE"},
{"content":{"body":"yeah ship it","m.mentions":{},"msgtype":"m.text"},"ts":1732210236157,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_oMWjhGneaTsnfDnrpFLWRwM3Uf1m2ubp1iOvp_EWL8"},
{"content":{"body":"@bakkot:matrix.org wanna stamp https://github.com/tc39/ecma262/pull/3487 if you approve of that plan?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> wanna stamp https://github.com/tc39/ecma262/pull/3487 if you approve of that plan?","msgtype":"m.text"},"ts":1732210614997,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UUFWa9ZUYO0iy25KoBUaIZQYPucWrYrGXfJF92QG22E"},
{"content":{"body":"wfm","m.mentions":{},"msgtype":"m.text"},"ts":1732211751027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YefVIG73p8IOHpKZMOU-34mYQvBsr0M_IaINsn_KnTA"},
{"content":{"body":"ljharb: https://github.com/tc39/ecma262/pull/2924 should land as one commit","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: https://github.com/tc39/ecma262/pull/2924 should land as one commit","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1732212673492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MV9ZE4xC-JhNs-CFJ5K-Vfumn1tViMIV79UXH90-OKI"},
{"content":{"body":"ah ok, will fix","m.mentions":{},"msgtype":"m.text"},"ts":1732212687992,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RVtRE5oTu08sqlVA3rHk5LV_VPg-VaxHS0NsH9VerNI"},
{"content":{"body":"as is the second one is basically reverting the first; no reason to have both","m.mentions":{},"msgtype":"m.text"},"ts":1732212710593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n45UGr2SM5t7pIeCf_aXJcDE2FiI48HUk4vo2C60FH8"},
{"content":{"body":"shu: https://github.com/tc39/ecma262/issues/3117 we can just pull the `1. Let type be TypedArrayElementType(typedArray).` into the abstract closure, yeah? that way it won't happen until after the validation. and it's pure so that's allowed even inside of a read-modify-write modification function","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: https://github.com/tc39/ecma262/issues/3117 we can just pull the <code>1. Let type be TypedArrayElementType(typedArray).</code> into the abstract closure, yeah? that way it won't happen until after the validation. and it's pure so that's allowed even inside of a read-modify-write modification function","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1732216789375,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G1wDkpmYy5V-udSijakRqzee2QuXdcv3JXGgi2i4LZc"},
{"content":{"body":"alternative is that we do the validation eagerly there and then allow it to be re-done in the `AtomicReadModifyWrite` call","format":"org.matrix.custom.html","formatted_body":"alternative is that we do the validation eagerly there and then allow it to be re-done in the <code>AtomicReadModifyWrite</code> call","m.mentions":{},"msgtype":"m.text"},"ts":1732216820967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8whc8tKNHAOpeP-OXfGhd3lmdoEOQkJkHfpLNtFFxIQ"},
{"content":{"body":"I guess I'm fine with either","m.mentions":{},"msgtype":"m.text"},"ts":1732216854295,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MQHEJc2Tbk7bbn7fb5JlXXf4aER-2UPCrHcODGOG0d4"},
{"content":{"body":"bakkot: yeah i'd just put it into the AC","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yeah i'd just put it into the AC","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1732218773648,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GpOBDXs8HLc2f2eSDpkjUc4Vp3eWvSpnaGyQHEZD5wQ"},
{"content":{"body":"both the type and the little endian thing don't need to be closed over, actually","m.mentions":{},"msgtype":"m.text"},"ts":1732218824997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oB2zqFgEVFwTB3Eai1KxiseWpZhIOHuIV44qjlZg24Q"},
{"content":{"body":"depends a little on what you are allowed to do inside of a \"mathematical function\", which the read-modify-write functions are supposed to be","m.mentions":{},"msgtype":"m.text"},"ts":1732218961371,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BZY4igiMEFGbecRcrZxD356squT-njXR-tJBtXn9MWk"},
{"content":{"body":"but I'm fine with it","m.mentions":{},"msgtype":"m.text"},"ts":1732218965437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QET1KYpWG8FNCtvFNXCblgsYOoWHV9z1nS57OuYCSXo"},
{"content":{"body":"spec-wise the requirements are:\n\nThey perform all their algorithm steps atomically.\nTheir individual algorithm steps are not observable.\n","m.mentions":{},"msgtype":"m.text"},"ts":1732219138138,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7Rm4WMyPZx0g83EXMpjhnGdtqJ_7480F5ZkIWcHrE4I"},
{"content":{"body":"both getting the type and getting the endianess satisfy both counts. implementations should understand the as-if nature that getting the type can be lifted out","m.mentions":{},"msgtype":"m.text"},"ts":1732219169881,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nou2C1PA23E8bYvfwsEmSV7i-xok0rhcNxuIgtOXpLg"},
{"content":{"body":"(and since obviously no RMW operations are implemented like this with a higher order function)","m.mentions":{},"msgtype":"m.text"},"ts":1732219185732,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FAjatHwZ3-pSWGwRzzsN6rXgvnIzh-ZktSdk61g-kkA"}
]