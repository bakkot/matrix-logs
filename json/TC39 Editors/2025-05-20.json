[
{"content":{"body":"module namespace exotic objects should define their `[[SetPrototypeOf]]` as the immutable prototype exotic object `[[SetPrototypeOf]]` so that they're considered immutable prototype exotic objects","format":"org.matrix.custom.html","formatted_body":"module namespace exotic objects should define their <code data-md=\"`\">[[SetPrototypeOf]]</code> as the immutable prototype exotic object <code data-md=\"`\">[[SetPrototypeOf]]</code> so that they&#39;re considered immutable prototype exotic objects","m.mentions":{},"msgtype":"m.text"},"ts":1747759418543,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FL4EuR7AFCph1zYO8tg7tp5zvnjGWsDt42aIsmJZlag"},
{"content":{"body":"I'll send a PR","msgtype":"m.text"},"ts":1747759772051,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lM5no7psQkgqViygwdaIjBdBT-Glm4Y5aSfj4RfL1YU"},
{"content":{"body":"... but why","m.mentions":{},"msgtype":"m.text"},"ts":1747760457119,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JBSep_T36LLsLkhYdvMlhpF39sh6gcoXmL4queCSH5U"},
{"content":{"body":"you will also need to update the note:\n\n> Unlike other exotic objects, there is not a dedicated creation abstract operation provided for immutable prototype exotic objects. This is because they are only used by %Object.prototype% and by host environments","format":"org.matrix.custom.html","formatted_body":"<p>you will also need to update the note:</p>\n<blockquote>\n<p>Unlike other exotic objects, there is not a dedicated creation abstract operation provided for immutable prototype exotic objects. This is because they are only used by %Object.prototype% and by host environments</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1747760459113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yN5qVH4oEAN1fIOf4rThaGMuMHakAFuD9oj9WwVNQOg"},
{"content":{"body":"yeah there will be a couple places to update","m.mentions":{},"msgtype":"m.text"},"ts":1747760723169,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wOtQyRDu6OojKQR4fXKhgG_CVIgYs2UcLNBSiTJ0LHw"},
{"content":{"body":"why are you doing this?","m.mentions":{},"msgtype":"m.text"},"ts":1747764091819,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_c7nsTqGG2Cs261jVCAjW95mfeTjXwKwED0IeKTAACs"},
{"content":{"body":"i'm not sure what value immutable prototype exotic objects provide, other than as a shorthand for \"it's like a normal object, except [[SetPrototypeOf]] is overridden\"","m.mentions":{},"msgtype":"m.text"},"ts":1747764262719,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n2ox2ZJLFJJuPZF87VhGDvN5GS4FYzK8pRKBxOoUnBA"},
{"content":{"body":"and your proposed change would make it also lose that notion","m.mentions":{},"msgtype":"m.text"},"ts":1747764275823,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tE13YvC5MlIU9fNvCTVeQrHwlftwj6H9pfLMnBR8sfo"},
{"content":{"body":"since module namespace exotic objects override the other internal methods itself","m.mentions":{},"msgtype":"m.text"},"ts":1747764287166,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RmyA0zro_vgb3aIxbfN0j1TH9KaS4napYZSu2cEI5uQ"},
{"content":{"body":"is there any reason https://tc39.es/ecma262/2025/#sec-createiteratorfromclosure requires generatorPrototype to be an Object, vs \"an Object or null\"? (or is the reason just, we don't send it null ever)","m.mentions":{},"msgtype":"m.text"},"ts":1747767948535,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OwtYgO5KDiAanbmQAG2FOw58gm7YWF_4hTBdUGI-uIs"},
{"content":{"body":"not that i recall, but having the narrowest type for how it's used is something we generally do, yes","m.mentions":{},"msgtype":"m.text"},"ts":1747768024306,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HJKTM93h4bAS2w8xKVtaogalkvKWC2en83j718eY2Ps"},
{"content":{"body":"for this particular AO, creating a generator object with a null prototype seems like it'd always be an error, no?","m.mentions":{},"msgtype":"m.text"},"ts":1747768121874,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qLhxRMWTe6WlbgDWNl1NOQXz8FFwrUyLTo28iWTGgrk"},
{"content":{"body":"it just means \"[[SetPrototypeOf]]\" has this special behaviour, which is also true of module namespace exotic objects","format":"org.matrix.custom.html","formatted_body":"it just means &quot;[[SetPrototypeOf]]&quot; has this special behaviour, which is also true of module namespace exotic objects","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n2ox2ZJLFJJuPZF87VhGDvN5GS4FYzK8pRKBxOoUnBA"}},"msgtype":"m.text"},"ts":1747770047950,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1ZAtCQJDtwds9V7Vd8ORGbvAse7WC9xIZcN5n3n71xM"},
{"content":{"body":"if you asked anyone whether module namespace exotic objects were immutable prototype exotic objects, they would say yes, but due to a technicality in the way we specified it, it's not actually the case","m.mentions":{},"msgtype":"m.text"},"ts":1747770087440,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Han6PcddY-baV2-4xxCuKLTWsi6aNAFJRl649HFZpe8"},
{"content":{"body":"because it's not \"the same\" definition, even though it's defined using the same steps","m.mentions":{},"msgtype":"m.text"},"ts":1747770138123,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fkPX-0fuw62Yf1DnTpMNwlUI6bxLvbZC88rTCBE27DA"},
{"content":{"body":"i think the answer \"anyone\" would respond with is \"what are immutable prototype exotic objects\"?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Han6PcddY-baV2-4xxCuKLTWsi6aNAFJRl649HFZpe8"}},"msgtype":"m.text"},"ts":1747772964733,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I6E2ROfV4jbrAU9NXg01F1GwSRqy4_m_89YkDFokuA8"},
{"content":{"body":"* i think the answer \"anyone\" would respond with is \"what are immutable prototype exotic objects?\"","m.mentions":{},"m.new_content":{"body":"i think the answer \"anyone\" would respond with is \"what are immutable prototype exotic objects?\"","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I6E2ROfV4jbrAU9NXg01F1GwSRqy4_m_89YkDFokuA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1747772968680,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ifRW2j3Ta-RZGs9w1LONJ-NFK2s6964MwG5ipyqst9U"},
{"content":{"body":"as one of the very few people in the world who actually does have familiarity with the term, I would have told you it refers to Object.prototype, and possibly the HTML windowproxy","m.mentions":{},"msgtype":"m.text"},"ts":1747773275593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2_tD0eLi6fObjnKfCdJArbiySBxvFFkpgOVBV5yXc4g"},
{"content":{"body":"namespace exotic objects have immutable prototypes but \"immutable prototype exotic object\" means Object.prototype to me","m.mentions":{},"msgtype":"m.text"},"ts":1747773300599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xySF0BYQoeQLkxGs82LFqQWlLiAPK7vaQP28Ve5bCyU"},
{"content":{"body":"if anything i'd rather we remove the concept of \"immutable prototype exotic object\" at all","m.mentions":{},"msgtype":"m.text"},"ts":1747774599808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wGsAaYGjMcuOsK4ACKBMtCYd7H1Zh7gKel9iXGiwdWg"},
{"content":{"body":"> An object is an immutable prototype exotic object if its [[SetPrototypeOf]] internal method uses the following implementation. Its other essential internal methods may use any implementation, depending on the specific immutable prototype exotic object in question.","format":"org.matrix.custom.html","formatted_body":"<blockquote data-md=\">\">An object is an immutable prototype exotic object if its [[SetPrototypeOf]] internal method uses the following implementation. Its other essential internal methods may use any implementation, depending on the specific immutable prototype exotic object in question.<br/></blockquote>","m.mentions":{},"msgtype":"m.text"},"ts":1747775241330,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pWT4Hm2razXOzS7ciYkjcLEis3uLDdcAehx60cwz9GE"},
{"content":{"body":"it doesn't get much more clear than that","m.mentions":{},"msgtype":"m.text"},"ts":1747775245327,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wFnNx-SoMufTjfwUZ-IzT6XD_ujOYcd_b3_ViTvB2BI"},
{"content":{"body":"that should apply to module namespace exotic objects","m.mentions":{},"msgtype":"m.text"},"ts":1747775271265,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zwg47x3gMOzvBmE9mOsHt5j9Z3YIvZiH16OGK6yxq90"},
{"content":{"body":"PR is here: https://github.com/tc39/ecma262/pull/3611","m.mentions":{},"msgtype":"m.text"},"ts":1747775296463,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rdVjoZgfgr8Ep3300IYYbHLI2E3rwub4Hg5Eiok68SA"},
{"content":{"body":"it does get clearer: you don't need to think of them as a special object","m.mentions":{},"msgtype":"m.text"},"ts":1747775937636,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sDvKtYyN1igFrZERtd-faOKvAAW7YiRB7b4f-h0M0co"},
{"content":{"body":"you just think of them as having a certain implementation of [[SetPrototypeOf]]","m.mentions":{},"msgtype":"m.text"},"ts":1747775948239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wA5aBbNJkfTcDANajhoe0iHyOo6sQv5ChquJW4umUvY"},
{"content":{"body":"i don't see what we get out of assigning a term to objects with that certain implementation","m.mentions":{},"msgtype":"m.text"},"ts":1747775962592,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YvdKaqTcF5XBhC1Fx101BxRanAucMPYEmxXDzRojawM"},
{"content":{"body":"like, the information you're trying to communicate is \"[[SetPrototypeOf]] has this behavior\". why not communicate that directly instead indirectly by first defining \"the set of objects with [[SetPrototypeOf]] with that behavior is called X\"?","m.mentions":{},"msgtype":"m.text"},"ts":1747776014089,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VweZryGcJg9i76mQKrwR9hE7bwcKxUz1jrH7N_z4tnc"},
{"content":{"body":"* like, the information you're trying to communicate is \"\\[\\[SetPrototypeOf\\]\\] has this behavior\". why not communicate that directly instead of indirectly by first defining \"the set of objects with \\[\\[SetPrototypeOf\\]\\] with that behavior is called X\"?","format":"org.matrix.custom.html","formatted_body":"* like, the information you&#39;re trying to communicate is &quot;[[SetPrototypeOf]] has this behavior&quot;. why not communicate that directly instead of indirectly by first defining &quot;the set of objects with [[SetPrototypeOf]] with that behavior is called X&quot;?","m.mentions":{},"m.new_content":{"body":"like, the information you're trying to communicate is \"\\[\\[SetPrototypeOf\\]\\] has this behavior\". why not communicate that directly instead of indirectly by first defining \"the set of objects with \\[\\[SetPrototypeOf\\]\\] with that behavior is called X\"?","format":"org.matrix.custom.html","formatted_body":"like, the information you&#39;re trying to communicate is &quot;[[SetPrototypeOf]] has this behavior&quot;. why not communicate that directly instead of indirectly by first defining &quot;the set of objects with [[SetPrototypeOf]] with that behavior is called X&quot;?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VweZryGcJg9i76mQKrwR9hE7bwcKxUz1jrH7N_z4tnc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1747776198953,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EBur6RgBnPJWZI1NAtWVqtJGH9lvejWeNL82nmc3ryY"}
]