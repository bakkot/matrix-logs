[
{"content":{"body":"same meeting link as yesterday, right?","msgtype":"m.text"},"ts":1595350362000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I don't think any of us have that link anymore though","msgtype":"m.text"},"ts":1595350403000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's going to need to be posted","msgtype":"m.text"},"ts":1595350409000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you can go through the form again","msgtype":"m.text"},"ts":1595350417000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is that desired though?","msgtype":"m.text"},"ts":1595350425000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bterlson: ^","msgtype":"m.text"},"ts":1595350432000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: they said yesterday you can fill the form out twice","msgtype":"m.text"},"ts":1595350444000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1595350449000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"alright","msgtype":"m.text"},"ts":1595350452000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it doesn't hurt anything we can dedupe as needed","msgtype":"m.text"},"ts":1595350454000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"so much stage 4 this meeting","msgtype":"m.text"},"ts":1595350567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"very exciting","msgtype":"m.text"},"ts":1595350568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Could we just post the link in the Reflector issue?","msgtype":"m.text"},"ts":1595350670000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: the goal was that nobody saw the link who hadn't filled out the attendance form","msgtype":"m.text"},"ts":1595350685000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(from what i understand)","msgtype":"m.text"},"ts":1595350718000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I filled it out a second time, and then bookmarked the final link.","msgtype":"m.text"},"ts":1595350815000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"the \"thanks for filling out the form\" page is bookmarkable, ftr","msgtype":"m.text"},"ts":1595350849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or at least, refreshing it loads it fine","msgtype":"m.text"},"ts":1595350868000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I wish the Teams client could remember your previous meeting link","msgtype":"m.text"},"ts":1595350902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"üéâ","msgtype":"m.text"},"ts":1595351192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that was fast","msgtype":"m.text"},"ts":1595351196000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1595351381000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"nice work devsnek","msgtype":"m.text"},"ts":1595351400000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1595351411000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that x++ one is really something","msgtype":"m.text"},"ts":1595351510000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: woohoo, thanks for merging https://github.com/tc39/ecma262/pull/2040 \\o/","msgtype":"m.text"},"ts":1595352029000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so fast","msgtype":"m.text"},"ts":1595352052000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"‚òö(Ôæü„ÉÆÔæü‚òö)","msgtype":"m.text"},"ts":1595352095000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"now i gotta remove the flag in engine262","msgtype":"m.text"},"ts":1595352101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: if i can't screenshare from linux can you share your screen, its just issue 1941 and pr 1948","msgtype":"m.text"},"ts":1595352710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"huh, I didn't know there was a `\"unit\"` type","msgtype":"m.text"},"ts":1595352711000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: i'm on an ipad (Ôºç‚Ä∏·Éö) but i can try","msgtype":"m.text"},"ts":1595352731000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1595352736000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we'll make it work","msgtype":"m.text"},"ts":1595352743000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"someone's tea is going","msgtype":"m.text"},"ts":1595352756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was just gonna say that hahaha","msgtype":"m.text"},"ts":1595352766000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"better make your cup before the water's gone","msgtype":"m.text"},"ts":1595352790000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"yeah that water is totally gonna be gone","msgtype":"m.text"},"ts":1595353037000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ears gone","msgtype":"m.text"},"ts":1595353166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: you said you prefer not to have \"function get name() { ‚Ä¶ }\", right?","msgtype":"m.text"},"ts":1595354645000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: ideally i prefer `get name() { ... }`","msgtype":"m.text"},"ts":1595354692000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1595354868000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan / ystartsev: can you point me to something which explains the motivation for the callback argument to cleanupSome?","msgtype":"m.text"},"ts":1595355667000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's a little weird to have \"function\" before \"get name\" :-)","msgtype":"m.text"},"ts":1595355673000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1948/commits/e417f396a276953c8329ddb89d8e523cf9cbe642","msgtype":"m.text"},"ts":1595355706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: michaelficarra: Bakkot: ^","msgtype":"m.text"},"ts":1595355717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: do you mean the iterator or the per item callback?","msgtype":"m.text"},"ts":1595355818000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev the per-item callback","msgtype":"m.text"},"ts":1595355962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that overrides the one the registry has","msgtype":"m.text"},"ts":1595355966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that bit is weird to me","msgtype":"m.text"},"ts":1595355968000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: These design discussions were mostly offline. I recommend you file an issue if you're skeptical of this design.","msgtype":"m.text"},"ts":1595356535000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think someone found it to be more natural when writing code samples using it","msgtype":"m.text"},"ts":1595356547000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan mostly I just want to know what the motivation for it is","msgtype":"m.text"},"ts":1595356550000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"will file if I remember after taking notes","msgtype":"m.text"},"ts":1595356560000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"same motivation as using an iterator and returning a boolean","msgtype":"m.text"},"ts":1595356567000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1595356612000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's the \"overriding the original callback\" part which is the strangest to me","msgtype":"m.text"},"ts":1595356625000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"using an iterator and returning a boolean\"?","msgtype":"m.text"},"ts":1595356628000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the fact that the registry's original callback isn't used anymore","msgtype":"m.text"},"ts":1595356634000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bakkot, we have some emails i can summarize","msgtype":"m.text"},"ts":1595356638000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"jridgewell I always appreciate your presentations","msgtype":"m.text"},"ts":1595356726000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"specifically I like the recaps","msgtype":"m.text"},"ts":1595356733000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"recaps are important, everyone should take note","msgtype":"m.text"},"ts":1595356789000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"üòÄ, thanks!","msgtype":"m.text"},"ts":1595356810000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"can anyone contact the numeric separator folk (Sam Goto, Rick, Leo) to see if they can go next?","msgtype":"m.text"},"ts":1595356948000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"leobalter ^","msgtype":"m.text"},"ts":1595356957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rwaldron ^","msgtype":"m.text"},"ts":1595356965000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tc39 wg 3 js for build tools","msgtype":"m.text"},"ts":1595357150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"honestly wouldn't even be the most awful idea","msgtype":"m.text"},"ts":1595357163000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a tooling outreach call I think?","msgtype":"m.text"},"ts":1595357208000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which I keep meaning to attend and failing to for reasons","msgtype":"m.text"},"ts":1595357215000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean like, have a formal specification of js features for build tools","msgtype":"m.text"},"ts":1595357222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like 402 is for internationalization","msgtype":"m.text"},"ts":1595357233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i guess the embedded devices group is a better example","msgtype":"m.text"},"ts":1595357329000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Decorators standardized in tools would still run into these constraints; we'd still have to decide which one(s) to violate","msgtype":"m.text"},"ts":1595357339000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: well you don't have to polyfill it if its defined to be part of build tools","msgtype":"m.text"},"ts":1595357364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't know whether all polyfill authors would agree with that. Anyway, we also heard from tools authors that they would prefer if transforms were per-file, without requiring cross-file knowledge","msgtype":"m.text"},"ts":1595357416000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"its time for build tools to be cognizant of cross-file information","msgtype":"m.text"},"ts":1595357451000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tell me if my exported function isn't used anywhere else in the codebase","msgtype":"m.text"},"ts":1595357466000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"p sure https://github.com/benmosher/eslint-plugin-import does that","msgtype":"m.text"},"ts":1595357540000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i have not observed it being able to do that","msgtype":"m.text"},"ts":1595357606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"might have it configured wrong though ü§∑üèª","msgtype":"m.text"},"ts":1595357630000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"Report modules without exports, or exports without matching import in another module (no-unused-modules)\"","msgtype":"m.text"},"ts":1595357686000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"claims to do that","msgtype":"m.text"},"ts":1595357690000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"unusedExports: if true, exports without any static usage within other modules are reported (defaults to false)\"","msgtype":"m.text"},"ts":1595357702000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so you'd have to opt in","msgtype":"m.text"},"ts":1595357710000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if it doesn't do that, file me an issue","msgtype":"m.text"},"ts":1595357723000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It seems unusedExports is not well fit for library?? It's likely a library will not use all its exports?","msgtype":"m.text"},"ts":1595357832000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1595357858000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably why it's off by default","msgtype":"m.text"},"ts":1595357868000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"haxjs: which is why the rule allows you to explicitly configure your entry points","msgtype":"m.text"},"ts":1595357869000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for library usage, or for apps where the entry points are all bundler entry points","msgtype":"m.text"},"ts":1595357885000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(that are referenced in ERB templates, for example)","msgtype":"m.text"},"ts":1595357894000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Great, I will try it in my next project :)","msgtype":"m.text"},"ts":1595357939000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"does anyone disagree with the claim that https://github.com/tc39/ecma262/pull/2106 already has consensus, based on yesterday's consensus on https://github.com/tc39/ecma262/pull/2057 ?","msgtype":"m.text"},"ts":1595358216000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes; import.meta does not seem liek the same kind of thing as the Math and Reflect namespaces","msgtype":"m.text"},"ts":1595358265000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1595358276000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I didn't realize we were talking about `import.meta`","msgtype":"m.text"},"ts":1595358279000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"import.meta having a tostringtag seems wrong","msgtype":"m.text"},"ts":1595358287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sounds good, i'll mark it as needs consensus","msgtype":"m.text"},"ts":1595358293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan: https://github.com/tc39/ecma262/issues/1970#issuecomment-622248793","msgtype":"m.text"},"ts":1595358338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"technically a host could do something weird","msgtype":"m.text"},"ts":1595358353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like set import.meta.[[Prototype]] to something that already has a tostringtag","msgtype":"m.text"},"ts":1595358365000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: i misconstrued your comment as agreement that import.meta should have it","msgtype":"m.text"},"ts":1595358394000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which comment?","msgtype":"m.text"},"ts":1595358403000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: the one that says \"+1 on new namespaces going forward\", right after the one where i asked about import.meta","msgtype":"m.text"},"ts":1595358427000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"import.meta being a namespace, since its properties matter but it itself doesn't","msgtype":"m.text"},"ts":1595358445000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why would we add it to import.meta","msgtype":"m.text"},"ts":1595358447000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it isn't a namespace like the others","msgtype":"m.text"},"ts":1595358454000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh, sorry, I was responding to the original post","msgtype":"m.text"},"ts":1595358458000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it isn't something TC39 is going to populate","msgtype":"m.text"},"ts":1595358462000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it might add something to it one day ¬Ø\\_(„ÉÑ)_/¬Ø","msgtype":"m.text"},"ts":1595358478000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it's still a builtin object","msgtype":"m.text"},"ts":1595358486000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hallway track dead todya?","msgtype":"m.text"},"ts":1595358489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: hosts can add any key","msgtype":"m.text"},"ts":1595358490000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: it isn't builtin, it is something a host supplies","msgtype":"m.text"},"ts":1595358501000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and there are many of them, so each having an own prop seems weird","msgtype":"m.text"},"ts":1595358516000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"those are all reasonable concenrs","msgtype":"m.text"},"ts":1595358526000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*concerns","msgtype":"m.text"},"ts":1595358528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hosts can supply their own toStringTag already it looks like (odd to allow setting symbols, but ü§∑)","msgtype":"m.text"},"ts":1595358573000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if you could comment on the PR that'd be great; if it's not able to reach consensus we don't have to waste plenary time on it","msgtype":"m.text"},"ts":1595358575000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1595358835000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1595358849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"when is lunch over","msgtype":"m.text"},"ts":1595361675000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Now","msgtype":"m.text"},"ts":1595361686000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"someone made a good point in the rust server about allowing multiple underscores in a row for padding binary literals","msgtype":"m.text"},"ts":1595361741000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sad we didn't get that","msgtype":"m.text"},"ts":1595361744000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can always be added later though","msgtype":"m.text"},"ts":1595361758000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what padding bin literal mean?","msgtype":"m.text"},"ts":1595361911000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: right now you can only use one underscore at a time","msgtype":"m.text"},"ts":1595361944000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`1__0` is a syntax error","msgtype":"m.text"},"ts":1595361947000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"who is chewing","msgtype":"m.text"},"ts":1595361949000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I mean why 1__0 is useful?","msgtype":"m.text"},"ts":1595361989000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i have the same question","msgtype":"m.text"},"ts":1595361995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"though I don't think it's harmful :-) just don't get the use case.","msgtype":"m.text"},"ts":1595362041000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"woo slice","msgtype":"m.text"},"ts":1595362058000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`1111_1111_1111_1111_1111_1111_1111_1111`","msgtype":"m.text"},"ts":1595362059000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's only 32 bits","msgtype":"m.text"},"ts":1595362067000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"imagine 64 bits","msgtype":"m.text"},"ts":1595362075000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron: please assign https://github.com/tc39/ecma262/pull/2043 to me once you've made all the planned updates","msgtype":"m.text"},"ts":1595362079000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek that's only one _ at a time","msgtype":"m.text"},"ts":1595362084000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`1111_1111_1111_1111__1111_1111_1111_1111`","msgtype":"m.text"},"ts":1595362095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"two underscores helps","msgtype":"m.text"},"ts":1595362108000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1595362129000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1_________________________________________1","msgtype":"m.text"},"ts":1595362134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1595362136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah makes sense","msgtype":"m.text"},"ts":1595362137000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb sure will do. I think leobalter is actually going to tackle the fixes","msgtype":"m.text"},"ts":1595362142000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"and at 64 you might have three in the middle","msgtype":"m.text"},"ts":1595362146000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"two at each half way point","msgtype":"m.text"},"ts":1595362151000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one for each nibble","msgtype":"m.text"},"ts":1595362166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the end of the world obviously","msgtype":"m.text"},"ts":1595362191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek oh, sounds useful :)","msgtype":"m.text"},"ts":1595362326000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ljharb: strings do have @@slice","msgtype":"m.text"},"ts":1595362401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in terms of this proposal","msgtype":"m.text"},"ts":1595362407000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: not according to the proposal's readme","msgtype":"m.text"},"ts":1595362415000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unless i missed it","msgtype":"m.text"},"ts":1595362419000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"on twitter they did","msgtype":"m.text"},"ts":1595362423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sathya explicitly said string is not included because it's unclear what slice means on strings","msgtype":"m.text"},"ts":1595362439000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/proposal-slice-notation#should-slice-notation-work-on-strings","msgtype":"m.text"},"ts":1595362444000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"imo it's perfectly clear what it means on strings :-)","msgtype":"m.text"},"ts":1595362457000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh that's unfortunate","msgtype":"m.text"},"ts":1595362458000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'll get to that once the queue hits","msgtype":"m.text"},"ts":1595362469000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd rather argue about whether slicing strings should be utf16 or utf32 instead of whether strings should have slice","msgtype":"m.text"},"ts":1595362497000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"strings already have slice, it's .slice.","msgtype":"m.text"},"ts":1595362545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how we can make it slice on code point?","msgtype":"m.text"},"ts":1595362568000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"make .slice work on code points","msgtype":"m.text"},"ts":1595362596000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: what","msgtype":"m.text"},"ts":1595362609000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm not saying that's possible nor proposing it","msgtype":"m.text"},"ts":1595362617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's an good idea, but it cause inconsitency between s[a:b] and s.slice(a,b)?","msgtype":"m.text"},"ts":1595362623000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"but this is called \"slice notation\" so it should only do \"what slice does\"","msgtype":"m.text"},"ts":1595362624000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"anyone regret making for-of a string iterate over code points?","msgtype":"m.text"},"ts":1595362637000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"+1000","msgtype":"m.text"},"ts":1595362645000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"strings shouldn't be iterable, there should be a normal method for that","msgtype":"m.text"},"ts":1595362653000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nooo, it's by far the most useful choice","msgtype":"m.text"},"ts":1595362658000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"bterlson: no","msgtype":"m.text"},"ts":1595362659000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like .keys/.values/.entries","msgtype":"m.text"},"ts":1595362659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think iterate over code points is good.","msgtype":"m.text"},"ts":1595362660000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"code points isn't actually what people want, grapheme clusters is.","msgtype":"m.text"},"ts":1595362668000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"speaking personally, I supported it but have since gotten zero value and have made mistakes","msgtype":"m.text"},"ts":1595362673000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"keith_mi_: i think the first tack for that would be to see if we can replace more HTML collections with ObservableArray (which is what's motivating adding .item() to Arrays)","msgtype":"m.text"},"ts":1595362675000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"code points is what people want","msgtype":"m.text"},"ts":1595362677000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"code points are pretty much useless","msgtype":"m.text"},"ts":1595362680000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1595362682000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"also, iterable strings interfered with flat/flatMap","msgtype":"m.text"},"ts":1595362683000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_mi_: if that's possible, then they should get @@slice for free, if this becomes a thing","msgtype":"m.text"},"ts":1595362684000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: they want üí© but they also want üè≥Ô∏è‚Äçüåà","msgtype":"m.text"},"ts":1595362695000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"code points doesn't give you both","msgtype":"m.text"},"ts":1595362701000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: is @@slice not the same as Array.prototype.slice?","msgtype":"m.text"},"ts":1595362701000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"but yeah doesn't TabAtkins have an essay about this?","msgtype":"m.text"},"ts":1595362703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"keith_miller: it is","msgtype":"m.text"},"ts":1595362708000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: people don't want locale-dependent string iteration","msgtype":"m.text"},"ts":1595362717000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"slice looks up .item?","msgtype":"m.text"},"ts":1595362719000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: no no, i'm saying the tack to get HTML collections to have @@slice is to actually replace the bespoke HTML collections with ObservableArray, which inherits Array","msgtype":"m.text"},"ts":1595362731000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://www.xanthir.com/b4wJ1","msgtype":"m.text"},"ts":1595362734000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra: i agree, but they *definitely* don't want to have to piece together grapheme clusters","msgtype":"m.text"},"ts":1595362736000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ohh, gotcha","msgtype":"m.text"},"ts":1595362741000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"sounds good to me","msgtype":"m.text"},"ts":1595362751000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"it should have just been String.prototype.codePoints to return an iterator","msgtype":"m.text"},"ts":1595362759000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: I like the ObservableArray thing anyway","msgtype":"m.text"},"ts":1595362768000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1595362772000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so sounds good to me","msgtype":"m.text"},"ts":1595362773000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: I agree there's no one-size-fits-all default, so no default would've been best","msgtype":"m.text"},"ts":1595362784000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"but if we HAD to have a default‚Ä¶ code points","msgtype":"m.text"},"ts":1595362791000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"perhaps. but we definitely didn't have to have one","msgtype":"m.text"},"ts":1595362800000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"obv the ship has long since sailed :-)","msgtype":"m.text"},"ts":1595362810000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if code points were used everywhere then yeah, obviously indexing by code points is better than utf-16 units","msgtype":"m.text"},"ts":1595362858000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"but having both in hindsight feels like a wrong choice :/","msgtype":"m.text"},"ts":1595362865000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"new string type","msgtype":"m.text"},"ts":1595362877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like new bigint type","msgtype":"m.text"},"ts":1595362881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah at least it will not split string  at surrogate","msgtype":"m.text"},"ts":1595362909000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"hypothesis: most uses of for-of string are bugged and assume a correspondence between iteration steps and string indexes","msgtype":"m.text"},"ts":1595362979000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"devsnek yeah , i really hope we can have utf8 string which eliminate the need of many encoding/decoding","msgtype":"m.text"},"ts":1595362981000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"most uses of for-of string are bugged  --- how ? u can't get index in for-of, so how to make bug?","msgtype":"m.text"},"ts":1595363032000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"this can't do more than slice, definitionally","msgtype":"m.text"},"ts":1595363063000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure how to argue for it beyond \"I would use the crap out of it\"","msgtype":"m.text"},"ts":1595363082000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ +1","msgtype":"m.text"},"ts":1595363092000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"original proposal have step, but seems removed now","msgtype":"m.text"},"ts":1595363116000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i would also use the crap out of it","msgtype":"m.text"},"ts":1595363137000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait, are we assuming this will support negative indices? because if so, I don't think we can implement it as an iterator helper :(","msgtype":"m.text"},"ts":1595363147000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also, substr vs substring vs slice would all become this nice pretty syntax","msgtype":"m.text"},"ts":1595363150000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: yes, it supports negatives","msgtype":"m.text"},"ts":1595363157000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: FWIW here's a list of languages with syntax: https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)#Slicing","msgtype":"m.text"},"ts":1595363166000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: that's unfortunate","msgtype":"m.text"},"ts":1595363167000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: it would throw i guess","msgtype":"m.text"},"ts":1595363182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or yeah just not support it","msgtype":"m.text"},"ts":1595363185000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it has to, it's slice.","msgtype":"m.text"},"ts":1595363188000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That's probably not exhaustive though","msgtype":"m.text"},"ts":1595363193000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: im not sure that \"its in other languages\" is the bar we want to use","msgtype":"m.text"},"ts":1595363195000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if its *all* of them though...","msgtype":"m.text"},"ts":1595363216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"definitely not a bar, but a strong indication that the syntax weight may be worth it","msgtype":"m.text"},"ts":1595363217000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what other bar is there then?","msgtype":"m.text"},"ts":1595363223000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I think it's a signal at least","msgtype":"m.text"},"ts":1595363228000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"how do you determine if something is useful without it existing","msgtype":"m.text"},"ts":1595363230000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"does elang have slice syntax","msgtype":"m.text"},"ts":1595363240000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"drousso: we don't need any other languages to decide what's useful for JS. it's just massively helpful as a guide.","msgtype":"m.text"},"ts":1595363250000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh sure i'm not saying \"it's in other languages\" should instantly mean \"yes we should do it too\"","msgtype":"m.text"},"ts":1595363275000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"introducing new syntax means two things: syntax is more difficult for beginners to learn than names and it is more difficult to search. secondly -- this takes up syntax space which might be used for other thins","msgtype":"m.text"},"ts":1595363278000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in the cases of logical assignment, this aligned ??, ||, && with other binary operators","msgtype":"m.text"},"ts":1595363309000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I'm not sure this conflicts with any other syntactic space though, given that it's strictly within []","msgtype":"m.text"},"ts":1595363315000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it made the language, in a way, more consistent","msgtype":"m.text"},"ts":1595363315000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i would argue that using this syntax for something else is possibly worse than the complexity of learning that it means slice","msgtype":"m.text"},"ts":1595363316000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"ystartsev: in the case of slice notation, what else could it do that wouldn't be confusing for users of \"most every other language\"?","msgtype":"m.text"},"ts":1595363326000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^ +1","msgtype":"m.text"},"ts":1595363334000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i don't see consistency in other languages","msgtype":"m.text"},"ts":1595363357000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's definitely harder to google for syntax tho, i agree with that one for sure","msgtype":"m.text"},"ts":1595363359000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they all have unique ways in which they slice","msgtype":"m.text"},"ts":1595363367000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: sure but is there anything like this syntax in another language that doesn't slice in some form?","msgtype":"m.text"},"ts":1595363382000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is some organization aroudn `[a...b]`","msgtype":"m.text"},"ts":1595363390000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"FYI PureScript strings don't have any default iterability; all String operations have code point and UTF-16 code unit variants","msgtype":"m.text"},"ts":1595363391000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there's consistency in it being within [] though","msgtype":"m.text"},"ts":1595363409000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which is used for slice","msgtype":"m.text"},"ts":1595363409000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"is Philip Chimento in here? he's up to present next","msgtype":"m.text"},"ts":1595363412000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i would be more open to this proposal, if it solved something","msgtype":"m.text"},"ts":1595363428000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i am confused by the random noises that start up, because presumably someone is manually unmuting","msgtype":"m.text"},"ts":1595363451000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but why, since there's a queue of speakers?","msgtype":"m.text"},"ts":1595363456000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"can't jump the queue if you're muted","msgtype":"m.text"},"ts":1595363475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah the biggest concern around this proposal is conflict with .item(), I think","msgtype":"m.text"},"ts":1595363483000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it does solve *something* - it solves the lack of ergonomics around the slice methods, and the lack of anything beyond \"magic word: slice\" as a protocol for other objects to participate in","msgtype":"m.text"},"ts":1595363487000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because negative indices are the selling point","msgtype":"m.text"},"ts":1595363491000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it doesn't conflict i don't think","msgtype":"m.text"},"ts":1595363497000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why it will conflict with item() ?","msgtype":"m.text"},"ts":1595363503000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"oh because element vs. range","msgtype":"m.text"},"ts":1595363507000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: right","msgtype":"m.text"},"ts":1595363512000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if anything they're complementary","msgtype":"m.text"},"ts":1595363514000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"alright nevermind then","msgtype":"m.text"},"ts":1595363517000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: It's Brian when he unmutes to moderate","msgtype":"m.text"},"ts":1595363520000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb: does `slice` have a lack of ergonomics?","msgtype":"m.text"},"ts":1595363525000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"jridgewell: i see","msgtype":"m.text"},"ts":1595363533000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because i think this is debatable","msgtype":"m.text"},"ts":1595363533000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: it's very debatable, as is anything around ergonomics, and it's fine that we ascribe different weights to that :-)","msgtype":"m.text"},"ts":1595363557000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i consider ergonomics to be quite important, but i am not convinced by the argument at the present moment","msgtype":"m.text"},"ts":1595363578000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it would be good to identify how we could identify sufficient demand then","msgtype":"m.text"},"ts":1595363599000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"'cause I don't think we'll be able to identify a \"need\"","msgtype":"m.text"},"ts":1595363613000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this seems like something where status quo is \"fine\" but this proposal would _feel_ a lot better","msgtype":"m.text"},"ts":1595363690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so it's not solving a burning trash fire, but it's salving an irritant","msgtype":"m.text"},"ts":1595363704000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gsathya: part of my point is that the analogy to \"other languages have slice notation\" may be not as strong an argument as it sounds, because their slice notations weren't retrofitted, and thus are more symmetrical with their existing indexing notations","msgtype":"m.text"},"ts":1595363718000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah. that ended in kind of a sad way","msgtype":"m.text"},"ts":1595363723000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also echoing shu there, i think this is another argument","msgtype":"m.text"},"ts":1595363737000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that said i'm not anti this notation, i'm maybe weakly against but would be just fine with it being in the language","msgtype":"m.text"},"ts":1595363780000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu, i'm not sure about that","msgtype":"m.text"},"ts":1595363783000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"I agree with shu, a[-1] and a[-1:5] inconsistency is bad","msgtype":"m.text"},"ts":1595363797000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i'm sure a bunch of languages didn't ship their initial version with slicing syntax","msgtype":"m.text"},"ts":1595363820000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"I remeber rbuckton suggest use ^1 instead of -1 :)","msgtype":"m.text"},"ts":1595363854000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"fair enough, the high-order bit is whether there're points of inconsistencies and does it affect DX","msgtype":"m.text"},"ts":1595363856000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu, how do i answer that?","msgtype":"m.text"},"ts":1595363881000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"every second we don't have temporal is a second of pain","msgtype":"m.text"},"ts":1595363897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: on which TimeZone?","msgtype":"m.text"},"ts":1595363916000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: mars time","msgtype":"m.text"},"ts":1595363925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we need more feedback for temporal , it's now a really big proposal","msgtype":"m.text"},"ts":1595363928000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"gsathya: hmm, i suspect the answer is \"existing languages don't have this point of inconsistency\". but maybe pick 3 popular languages that have slice syntax, and check if `n` in `[n:m]` is interpreted sorta-kinda the same as `[n]`?","msgtype":"m.text"},"ts":1595363929000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gsathya: python, rust, and something else?","msgtype":"m.text"},"ts":1595363936000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what does `n` in `[n:m]` is same as `[n]` mean?","msgtype":"m.text"},"ts":1595363975000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"it mean a[-1] should work (but can't)","msgtype":"m.text"},"ts":1595363993000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"yeah that seems to be the concrete barrier here","msgtype":"m.text"},"ts":1595364007000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"given the domain of `n`, are all values in the domain interpreted the same in both notations wrt things like negatives, coercion","msgtype":"m.text"},"ts":1595364013000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so the only way to overcome it is introduce syntax like ^1","msgtype":"m.text"},"ts":1595364033000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"yeah, I guess you could disallow negative indexing in slice notation but now its no longer consistent with array.prototype.slice","msgtype":"m.text"},"ts":1595364073000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"imo without negative indexing it's not worth the syntax weight","msgtype":"m.text"},"ts":1595364096000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1595364100000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"yeah that's kind of the key subfeature","msgtype":"m.text"},"ts":1595364107000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we could allow slice support ^1  if ^1 is sugar of new Index(1, {from:'end'})","msgtype":"m.text"},"ts":1595364113000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"`arr[-1]` may be counter intuitive in JS but I don't see it as a blocker for a richer feature such as `arr[-n:m]`.","msgtype":"m.text"},"ts":1595364131000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"well, i would very much like it to be consistent with existing slice methods","msgtype":"m.text"},"ts":1595364131000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"gsathya: i wanna be clear that i don't consider this inconsistency fatal, but an extra gotcha","msgtype":"m.text"},"ts":1595364223000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gsathya I think maybe we'd better first consider a[^1] ?","msgtype":"m.text"},"ts":1595364238000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"that seems weird to me","msgtype":"m.text"},"ts":1595364250000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`[^1]` means \"not 1\" in git, and regex","msgtype":"m.text"},"ts":1595364255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah I don't think I could support that","msgtype":"m.text"},"ts":1595364261000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sorry, in git it means \"1 commit back\"","msgtype":"m.text"},"ts":1595364281000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so, people were cool with the Temporal timeline? ystartsev and ljharb expressed concerns with that in the past; I think this timeline leaves plenty of time for review","msgtype":"m.text"},"ts":1595364323000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"`^1` come from c#  , but we could also consider other syntax","msgtype":"m.text"},"ts":1595364323000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"littledan: they have given a timeframe within the realm of what i requested, so i am fine with it","msgtype":"m.text"},"ts":1595364352000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb so ^1 seems ok as git usage?","msgtype":"m.text"},"ts":1595364418000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"littledan: sorry, maybe i missed it; what timeline?","msgtype":"m.text"},"ts":1595364424000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu, gotcha","msgtype":"m.text"},"ts":1595364442000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"i'm pretty sure i'm going to need to see finalized spec text that has minimal further churn, for more than 2 months, to be able to properly review it","msgtype":"m.text"},"ts":1595364452000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iiuc we have till november?","msgtype":"m.text"},"ts":1595364465000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"is the spec text settled? i feel like i've seen lots of changes still, recently","msgtype":"m.text"},"ts":1595364504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, I'm excited but it's basically a new spec","msgtype":"m.text"},"ts":1595364504000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what the diff of `if` vs `with`?","msgtype":"m.text"},"ts":1595364555000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"(new spec as in \"it's the size of 402\", not as in \"it's changed completely\")","msgtype":"m.text"},"ts":1595364556000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"haxjs: nothing, new term","msgtype":"m.text"},"ts":1595364575000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I prefer \"if\" over \"assert\" FWIW","msgtype":"m.text"},"ts":1595364591000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra the example is  ... if {type:json} with {...}","msgtype":"m.text"},"ts":1595364624000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"`if` does kind of imply that if the condition isn't met, the import doesn't happen, when in fact it throws","msgtype":"m.text"},"ts":1595364635000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which is the semantics `assert` has already","msgtype":"m.text"},"ts":1595364641000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's been some comments with that mistaken assumption on the repo already","msgtype":"m.text"},"ts":1595364659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so `with` do not throw, only provide metadata?","msgtype":"m.text"},"ts":1595364666000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"`with` isn't in the current proposal","msgtype":"m.text"},"ts":1595364684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah the `with` also threw me when i readd this","msgtype":"m.text"},"ts":1595364704000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"previously the proposal also allowed the possibility of \"evaluators\", ie, things that change what module you import","msgtype":"m.text"},"ts":1595364707000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but since it was restricted to conditions/assertions, changing `with` to `if` made more sense","msgtype":"m.text"},"ts":1595364727000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh, `if` is a little bit strange, `assert` is a little bit clear.","msgtype":"m.text"},"ts":1595364957000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"maybe `must {type:'json'}`  :P","msgtype":"m.text"},"ts":1595364999000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"thinking out loud: what about returning a Record/Tuple/primitive for JSON imports?","msgtype":"m.text"},"ts":1595365179000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"would reduce __proto__ errors","msgtype":"m.text"},"ts":1595365259000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not bad. I like this idea!","msgtype":"m.text"},"ts":1595365267000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ah I see Mark M is on the queue with that point :)","msgtype":"m.text"},"ts":1595365310000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"but it means we must first land record/tuple","msgtype":"m.text"},"ts":1595365311000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"yep, that seems like the main objection, but maybe there's something strategic we can do, like saying record/tuple will be used only if available?","msgtype":"m.text"},"ts":1595365371000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"is philip on irc?","msgtype":"m.text"},"ts":1595365906000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"or i guess i can ping sffc: wdyt of contacting hebrew / arab communities? do we have contacts there?","msgtype":"m.text"},"ts":1595365932000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"re: temporal","msgtype":"m.text"},"ts":1595365936000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: I know some arab expats who are software engineers","msgtype":"m.text"},"ts":1595365996000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"can someone give me an example of valid properties without quotes","msgtype":"m.text"},"ts":1595366513000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i'm confused and i went through the slides again and did not feel any less confused","msgtype":"m.text"},"ts":1595366536000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose: { type: \"json\" } vs. { \"type\": \"json\" }","msgtype":"m.text"},"ts":1595366560000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ohhhhhh lolol right","msgtype":"m.text"},"ts":1595366658000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"assert { \"\\0\": \"YOLO\" }","msgtype":"m.text"},"ts":1595366685000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"can someone record the consensus in the notes for import conditions?","msgtype":"m.text"},"ts":1595366880000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan ^","msgtype":"m.text"},"ts":1595366985000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rricard ^","msgtype":"m.text"},"ts":1595367308000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"anyone looking to get a stream of explainations or ask questions can join #tc39-beginners","msgtype":"m.text"},"ts":1595367506000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sorry about that ljharb, I will let dan properly record it","msgtype":"m.text"},"ts":1595367556000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"ljharb: Draft conclusion at https://docs.google.com/document/d/1IHoLaRSH41oU4an4HwfngP8aASTM51HYzlWgEhjGyI0/edit#bookmark=id.3zje6vza7bnl please review","msgtype":"m.text"},"ts":1595367605000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"thanks, sgtm - please lmk when there's a repo URL for json modules","msgtype":"m.text"},"ts":1595367631000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1595367670000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Whoever's running the meeting, could you approve me joining via phone?","msgtype":"m.text"},"ts":1595367849000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Probably an (832) number.","msgtype":"m.text"},"ts":1595367864000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ooh `item` has appeared","msgtype":"m.text"},"ts":1595367947000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I take no credit nor blame for Shu's slides","msgtype":"m.text"},"ts":1595367989000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"good lord","msgtype":"m.text"},"ts":1595367990000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Note: not inherit, a Proxy around Array.","msgtype":"m.text"},"ts":1595368060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mmm negative indices","msgtype":"m.text"},"ts":1595368198000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"should i add a queue item asking if `.item` should go on strings </troll>","msgtype":"m.text"},"ts":1595368221000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there a good way we can express support for proposals without unmuting and taking the floor etc.?","msgtype":"m.text"},"ts":1595368256000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"benjamn: I too wish for that","msgtype":"m.text"},"ts":1595368299000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"benjamn: you can put a queue item that's like \"+1 <EOM\" maybe","msgtype":"m.text"},"ts":1595368333000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"part of what I have recorded in the conclusion of the import conditions topic is, \"Split JSON modules into a separate Stage 2 proposal\". Does this match everyone's understanding of the conclusion, or would we need another committee proposal for consensus to really make JSON modules at Stage 2?","msgtype":"m.text"},"ts":1595368347000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm sure we could come up with a convention for things where it's \"read the queue item, move along\"","msgtype":"m.text"},"ts":1595368351000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan: that matches my understanding","msgtype":"m.text"},"ts":1595368359000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: READONLY?","msgtype":"m.text"},"ts":1595368474000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1595368483000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll save my bikeshed energy for actual proposals, pick any word you like :-p","msgtype":"m.text"},"ts":1595368510000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haha sure, I hear that","msgtype":"m.text"},"ts":1595368535000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"oops i clicked the wrong button","msgtype":"m.text"},"ts":1595368541000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hung up on the call","msgtype":"m.text"},"ts":1595368543000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: what was the question?","msgtype":"m.text"},"ts":1595368545000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"node 14.6.0 is OUT","msgtype":"m.text"},"ts":1595368545000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"WEAK REFS ARE LIVE","msgtype":"m.text"},"ts":1595368548000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"* might be live","msgtype":"m.text"},"ts":1595368562000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: \"what stuff is still open for stage 3?\" and tab said basically only the clamping question","msgtype":"m.text"},"ts":1595368567000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lmao","msgtype":"m.text"},"ts":1595368567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: yeah that sounds right","msgtype":"m.text"},"ts":1595368573000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1595368578000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"getify raised some good points about \"providing numbers larger than the length\" and i think it's worth serious consideration","msgtype":"m.text"},"ts":1595368598000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: oh? link?","msgtype":"m.text"},"ts":1595368611000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: it's an issue on the repo, one sec","msgtype":"m.text"},"ts":1595368618000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1595368621000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://github.com/tc39/proposal-array-last/issues/21 might be it","msgtype":"m.text"},"ts":1595368661000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh no wait, wrong proposal","msgtype":"m.text"},"ts":1595368709000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: https://github.com/tabatkins/proposal-item-method/issues/6","msgtype":"m.text"},"ts":1595368731000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: the discussions have wandered around a bunch","msgtype":"m.text"},"ts":1595368741000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah I'm really confident in rejecting that, at least as an issue against this proposal. There is no way we can have the function throw or return a new truthy value for oob access.","msgtype":"m.text"},"ts":1595368752000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it seems reasonable to me for `.item` to accept any negatives but only to accept positives up to the length - 1","msgtype":"m.text"},"ts":1595368764000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's the open question i had","msgtype":"m.text"},"ts":1595368776000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Hm, can you expand on that? I don't see the cases being at all distinct.","msgtype":"m.text"},"ts":1595368786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(i'm very -1 on a sentinel value ofc, and also throwing)","msgtype":"m.text"},"ts":1595368786000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: yeah maybe issue 6 wasn't relevant, my bad if so","msgtype":"m.text"},"ts":1595368797000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yeah undefined being conflated with \"empty\" is a ship that has sailed","msgtype":"m.text"},"ts":1595368809000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bbl, mtg","msgtype":"m.text"},"ts":1595368810000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1595368818000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's like a big ship that has sailed too, like a carrier","msgtype":"m.text"},"ts":1595368827000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hm, let me look harder for where the overflow question came up","msgtype":"m.text"},"ts":1595368840000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's particularly relevant for empty arrays tho, i think?","msgtype":"m.text"},"ts":1595368853000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"altho `[].item(n)` would just return undefined for any n, i guess","msgtype":"m.text"},"ts":1595368867000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's what I would expect though","msgtype":"m.text"},"ts":1595368892000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: ystartsev The timeline for Temporal that I was talking about is in https://pipobscure.dev/slides/temporal-2020-07/#5 . This is designed to give everyone enough time to review and iterate, based on the concerns expressed last meeting. Do you have any thoughts on it?","msgtype":"m.text"},"ts":1595368990000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: \"now til november\" is plenty of time iff the spec is largely finalized. has that happened? because i feel like i'm still seeing discussions bandying about major changes","msgtype":"m.text"},"ts":1595369156000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"did you see the bullet point, \"Finalize specification and pass to reviewers by September\" ?","msgtype":"m.text"},"ts":1595369185000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ahhh ok, missed that, sorry","msgtype":"m.text"},"ts":1595369193000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"september to november feels like a very tight window to me","msgtype":"m.text"},"ts":1595369203000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"temporal feels like one of the largest proposals ever to land","msgtype":"m.text"},"ts":1595369219000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i will certainly try","msgtype":"m.text"},"ts":1595369225000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"IMO two months is a lot of review time. We usually use two weeks to ten days as the standard","msgtype":"m.text"},"ts":1595369228000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's true that it's a big proposal, so I think it's justified to increase from 10 days to two months","msgtype":"m.text"},"ts":1595369265000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"there's also a ton of context and concepts to page in","msgtype":"m.text"},"ts":1595369280000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe we can also recruit more than two reviewers and figure out good ways to split things up","msgtype":"m.text"},"ts":1595369281000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yes, that's true. I'm really happy about the proposal's documentation, so I hope that helps the review.","msgtype":"m.text"},"ts":1595369313000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"how easily can the docs be dumped into mdn","msgtype":"m.text"},"ts":1595369328000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: That was a sorta-kinda design goal for these docs, but we'll see","msgtype":"m.text"},"ts":1595369347000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"exciting","msgtype":"m.text"},"ts":1595369358000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: The WeakRefs docs got dumped into MDN and that seems to have worked out well","msgtype":"m.text"},"ts":1595369358000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1595369381000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"benjamn: would you assume that even if https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js#L389 is fixed, it will remain present on the web for a very long time? (https://bugzilla.mozilla.org/show_bug.cgi?id=1644581 for context)","msgtype":"m.text"},"ts":1595371309000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I'm actually somewhat optimistic that people update regenerator-runtime fairly often","msgtype":"m.text"},"ts":1595371708000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"it would be a different story if it was transpiled code, but it's just a runtime library","msgtype":"m.text"},"ts":1595371726000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"how quickly do you think that kind of fix could get in, to conditionally define toStringTag values?","msgtype":"m.text"},"ts":1595371740000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: in my mind this is a backwards-compatible change, so any new patch version I release will be compatible with https://github.com/babel/babel/blob/2bf38fb9149eb514a13bb608e5a9a0c06ad5cacd/packages/babel-runtime/package.json#L17","msgtype":"m.text"},"ts":1595371863000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"in other words, very quickly","msgtype":"m.text"},"ts":1595371873000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"are you opposed to just using Object.defineProperty, to avoid the conditional? could do both obviously","msgtype":"m.text"},"ts":1595371890000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"re: the last couple of comments in the bugzilla thread","msgtype":"m.text"},"ts":1595371910000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"depends on your targets; if you use dP then it can't work in IE < 9, which might be a breaking change","msgtype":"m.text"},"ts":1595371910000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but also the define is unnecessary when there's already a toStringTag value","msgtype":"m.text"},"ts":1595371927000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so the conditional seemed simpler to me","msgtype":"m.text"},"ts":1595371931000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(the specific string isn't really important, just that there is one)","msgtype":"m.text"},"ts":1595371956000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah yes, and Regenerator is increasingly only needed for older IE versions, so I guess that's still an essential audience","msgtype":"m.text"},"ts":1595371970000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"realistically you could even do `if (!(toStringTag in whatever)) { whatever[toStringTag] = blah }` (don't have the code in front of me)","msgtype":"m.text"},"ts":1595372008000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that way it's only set where it's absent","msgtype":"m.text"},"ts":1595372014000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(probably tons of ways that could be worded ofc)","msgtype":"m.text"},"ts":1595372029000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: interestingly, when these toString tags were added, one of them was conditional and the other wasn't: https://github.com/facebook/regenerator/commit/28621286a46c95e2cde2970918b565545fcf5cdf","msgtype":"m.text"},"ts":1595372104000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"1 out of 3 ain't bad","msgtype":"m.text"},"ts":1595372146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do you want a PR, or is it easier for you to do it?","msgtype":"m.text"},"ts":1595372161000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm imagining they should all be conditional?","msgtype":"m.text"},"ts":1595372162000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1595372168000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a quick PR would be great, so I don't have to self-review","msgtype":"m.text"},"ts":1595372188000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1595372191000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: although there already appears to be one? https://github.com/facebook/regenerator/pull/399","msgtype":"m.text"},"ts":1595372256000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"haha k, exe beat me to it","msgtype":"m.text"},"ts":1595372287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll make the alternative","msgtype":"m.text"},"ts":1595372292000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that one uses defineProperty.","msgtype":"m.text"},"ts":1595372319000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"++","msgtype":"m.text"},"ts":1595372382000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"benjamn: https://github.com/facebook/regenerator/pull/400","msgtype":"m.text"},"ts":1595372414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i did it on the web ui, so lmk if i need to clone it and flesh anything out","msgtype":"m.text"},"ts":1595372426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no worries, I'll make any tweaks necessary","msgtype":"m.text"},"ts":1595372478000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"word, thanks","msgtype":"m.text"},"ts":1595372494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tfw the polyfill breaks the actual feature","msgtype":"m.text"},"ts":1595372530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the first time this author's polyfill code has done that :-(","msgtype":"m.text"},"ts":1595372558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yep, definitely a sad moment for any polyfill","msgtype":"m.text"},"ts":1595372568000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"i don't *think* any of mine have had this problem yet, but i'm sure the second i post this, it's gonna happen","msgtype":"m.text"},"ts":1595372593000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this is why instead of writing polyfills you should just use a separate js engine","msgtype":"m.text"},"ts":1595372679000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ironically transpiling engine252 would involve regenerator","msgtype":"m.text"},"ts":1595372728000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that have 10 fewer features than what's in JS","msgtype":"m.text"},"ts":1595372776000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"fascinatingly (to me), the Rust Babel clone actually went to the trouble of converting Regenerator to Rust: https://github.com/swc-project/swc","msgtype":"m.text"},"ts":1595372788000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"i'm going to start telling people it's called ecma262 because there are 262 features","msgtype":"m.text"},"ts":1595372788000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://github.com/swc-project/swc/pull/554","msgtype":"m.text"},"ts":1595372810000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"I've never even heard of this","msgtype":"m.text"},"ts":1595372851000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I did at one point write my own regenerator though","msgtype":"m.text"},"ts":1595372873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that might be when I first became interested in compilers","msgtype":"m.text"},"ts":1595372894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wow this parser code is rough","msgtype":"m.text"},"ts":1595373120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah I can't vouch for swc from personal use, but it does seem to have users","msgtype":"m.text"},"ts":1595374034000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"and it's ~fast~","msgtype":"m.text"},"ts":1595374257000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"ljharb: ok theoretically new installs of regenerator-runtime (or babel-runtime) will now have this fix! (regenerator-runtime‚äô0 has been published to npm)","msgtype":"m.text"},"ts":1595374586000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"awesome, thanks - hopefully the affected sites upgrade quickly","msgtype":"m.text"},"ts":1595375610000,"senderName":"ljharb","senderId":"ljharb@irc"}
]