[
{"content":{"body":"rwaldron-: If you're thinking of async do expressions, I'd be really in favor of them. We just need to move forward on do expressions!","msgtype":"m.text"},"ts":1602677745000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but an async block statement also makes sense to me, as a complement","msgtype":"m.text"},"ts":1602677763000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan not Async Do Expressions, but yes the that I was \"floating\" a few years ago was essentially an \"Async Block Statement\" (sort of?): `async {   /* this code is executed async */ }`. I stopped pursuing it because `(async () => { })()` can be used to achieve the same outcome.","msgtype":"m.text"},"ts":1602680992000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"but yes the idea that*","msgtype":"m.text"},"ts":1602681009000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Yeah, I think that is a good idea for a complement","msgtype":"m.text"},"ts":1602681055000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I would be in favor of that addition","msgtype":"m.text"},"ts":1602681066000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I had a practice of marking synchronous code with labelled blocks and wanted to be able to do something similar for async stuff that didn't need to return anything","msgtype":"m.text"},"ts":1602681087000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"\"I think that is a good idea for a complement [09:11:06]  <+littledan> I would be in favor of that addition\" ... Neat!","msgtype":"m.text"},"ts":1602681135000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1602681137000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"One \"hard part\" is deciding what to do about var declarations, return, break, etc in such a block. I like bakkot's suggestion for do expressions to just ban them all","msgtype":"m.text"},"ts":1602681262000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I would definitely ban var, but it's not a function so there is no return, and not a loop thing so there is no continue. That leaves break, which I think might be useful (unless there is some strong argument that I'm not aware of?)","msgtype":"m.text"},"ts":1602681520000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"https://i.gyazo.com/4ecb7eed84e4f6a74d740c82868baaf1.png","msgtype":"m.text"},"ts":1602681632000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"my main concern is swallowed errors","msgtype":"m.text"},"ts":1602686313000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"return/break/etc. are confusing but probably not fatal","msgtype":"m.text"},"ts":1602686337000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rwaldron-: I guess break could work if it comes before the first await, but sometimes you can't statically tell whether it will be preceded by an await or not","msgtype":"m.text"},"ts":1602688166000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh, to break out of the async block? yeah, that case seems fine","msgtype":"m.text"},"ts":1602688205000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but only that one label could be allowed (and inner labels), not labels that are further out","msgtype":"m.text"},"ts":1602688228000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Yes, just to break out of the async block","msgtype":"m.text"},"ts":1602688240000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I would be +1 to disallowing the label by name","msgtype":"m.text"},"ts":1602688268000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"yeah so it seems like we agree on all these points. IMO we should go for your idea here. Let me know if there's something I can do to help.","msgtype":"m.text"},"ts":1602688286000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"async blocks seem meh","msgtype":"m.text"},"ts":1602688297000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: why?","msgtype":"m.text"},"ts":1602688304000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"because of all the rules y'all are iterating through here","msgtype":"m.text"},"ts":1602688309000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek isn't wrong","msgtype":"m.text"},"ts":1602688319000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"recreating functions from first principles lol","msgtype":"m.text"},"ts":1602688321000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1602688323000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"devsnek see above, that's why I ultimately stopped pursuing this idea.","msgtype":"m.text"},"ts":1602688351000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"it's interesting but also scary","msgtype":"m.text"},"ts":1602688393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But maybe there's merit to \"something that is definitely not a function, that ensures async execution\". Maybe that thing is async do expressions.","msgtype":"m.text"},"ts":1602688470000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"yeah I like the idea...","msgtype":"m.text"},"ts":1602688532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are just so many assumptions people need to have that are already implied by function boundaries... it seems like a learning nightmare","msgtype":"m.text"},"ts":1602688569000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'll just leave this here: https://github.com/tc39/ecmarkup/pull/263#issuecomment-708470782","msgtype":"m.text"},"ts":1602690118000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"whoops, didn't mean to link to any specific comment https://github.com/tc39/ecmarkup/pull/263","msgtype":"m.text"},"ts":1602690130000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens neat, although I am extremely hesitant to rely on chrome-only APIs; has any other browser even started work on this, to your knowledge?","msgtype":"m.text"},"ts":1602692241000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rwaldron-: if do expressions exist, then async do expressions seem like an easy/trivial addition on top of them to me","msgtype":"m.text"},"ts":1602692265000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb agreed.","msgtype":"m.text"},"ts":1602692279000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Bakkot: it’s not “relying” — browsers that don’t yet implement this modern CSS feature just don’t get the benefit (i.e. they get the same experience they’re getting today)","msgtype":"m.text"},"ts":1602692305000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: but yeah only Chrome implements this standard, currently","msgtype":"m.text"},"ts":1602692320000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens I don't really care about whether you label this a standard; my concern is whether other browsers are intending to ship it","msgtype":"m.text"},"ts":1602692549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am not dead set against chrome-only performance hacks, especially since this is a chrome-only performance issue in the first place - god knows I've shipped enough of those - I'd just be more comfortable if other browsers had said they were working on shipping the feature","msgtype":"m.text"},"ts":1602692708000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(that is, it would no longer feel like a chrome-only hack)","msgtype":"m.text"},"ts":1602692729000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Mozilla is on board: https://github.com/mozilla/standards-positions/issues/135#issuecomment-650923098 WebKit: <crickets> https://lists.webkit.org/pipermail/webkit-dev/2020-May/031217.html","msgtype":"m.text"},"ts":1602693118000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1602693125000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1602693128000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that certainly does give a much nicer experience in Chrome","msgtype":"m.text"},"ts":1602693547000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"will land once the upstream bug (which I also observe) is fixed on chrome stable and you've marked the PR ready to go","msgtype":"m.text"},"ts":1602693600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens also there was https://github.com/tc39/ecmarkup/pull/261; I'm not sure how these things interact","msgtype":"m.text"},"ts":1602696367000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]