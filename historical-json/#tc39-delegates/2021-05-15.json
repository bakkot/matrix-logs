[
{"content":{"body":"i'm looking at `await`-as-identifier rules in v8's implementation of static blocks and i'm kind of confused","msgtype":"m.text"},"ts":1621038029000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it seems like the intention was that `await` is allowed as an identifier in both named function expressions and named class expressions","msgtype":"m.text"},"ts":1621038061000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but |ClassExpression| has BindingIdentifier[?Await]","msgtype":"m.text"},"ts":1621038097000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"|FunctionExpression| has BindingIdentifier[~Await]","msgtype":"m.text"},"ts":1621038120000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also |FunctionExpression| has FunctionParameters[~Await] while |ArrowFunction| has ArrowParameters[?Await]","msgtype":"m.text"},"ts":1621038306000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so there's a couple things going on there","msgtype":"m.text"},"ts":1621039967000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> `await` is allowed as an identifier in both named function expressions","msgtype":"m.text"},"ts":1621039986000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"true, because it's a function boundary","msgtype":"m.text"},"ts":1621039991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> and named class expressions","msgtype":"m.text"},"ts":1621039995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, i think the spec has been updated since i last looked at it","msgtype":"m.text"},"ts":1621040019000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no, class bodies inherit the ability to `await` from the surrounding environment - e.g. in a class within an async function, you can do `class { [await x](){} }` or whatever","msgtype":"m.text"},"ts":1621040027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's now specced as an [~Await] on every statement item","msgtype":"m.text"},"ts":1621040029000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"> also |FunctionExpression| has FunctionParameters[~Await] while |ArrowFunction| has ArrowParameters[?Await]","msgtype":"m.text"},"ts":1621040045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, i didn't mean as identifiers _inside_ class bodies, i meant as the names","msgtype":"m.text"},"ts":1621040054000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the reason `ArrowParameters` has `?Await`, unlike `FunctionParameters`, is because of the cover grammar - you don't know you're parsing arrow parameters until you get to the end, and you don't want to have to go back and re-parse, so they're parsed with `?Await` and then there's an early error for arrow parameters containing AwaitExpression","msgtype":"m.text"},"ts":1621040105000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1621040129000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i suspect the BindingIdentifier[?Await] for the named class expressions is a spec bug?","msgtype":"m.text"},"ts":1621040145000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why would it be? class bodies inherit async-ness, no reason the name shouldn't","msgtype":"m.text"},"ts":1621040166000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i see, okay, so...","msgtype":"m.text"},"ts":1621040189000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if the intention is that static blocks be parsed like async function bodies for future-proofing await inside static blocks...","msgtype":"m.text"},"ts":1621040215000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then `(class await {})` should not be allowed, even though `(function await() {})` is?","msgtype":"m.text"},"ts":1621040242000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"> if the intention is that static blocks be parsed like async function bodies for future-proofing await inside static blocks","msgtype":"m.text"},"ts":1621040283000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1621040283000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> then `(class await {})` should not be allowed, even though `(function await() {})` is?","msgtype":"m.text"},"ts":1621040287000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's my intuition, yes","msgtype":"m.text"},"ts":1621040290000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(assuming you are in an async context for both those last code snippets)","msgtype":"m.text"},"ts":1621040303000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"now, `async function f() { ((await)=>1); }` doesn't parse, right? that is, `await` is not parsed as identifiers for arrow function parameters inside async function bodies?","msgtype":"m.text"},"ts":1621040350000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1621040371000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because `ArrowParameters` has `?Await`","msgtype":"m.text"},"ts":1621040376000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, exactly","msgtype":"m.text"},"ts":1621040380000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay, then i think some of these test262 tests are wrong, as are some items in https://github.com/tc39/proposal-class-static-block/issues/43#issuecomment-812224819","msgtype":"m.text"},"ts":1621040411000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but this is all good news","msgtype":"m.text"},"ts":1621040418000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i am very much against a _new_ kind of context for determining where awaits are allowed as identifiers","msgtype":"m.text"},"ts":1621040430000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and static block == async function body is eminently workable","msgtype":"m.text"},"ts":1621040457000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah I see that comment has `(class await {}); // legal`, which is wrong","msgtype":"m.text"},"ts":1621040491000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"otherwise I think it is correct","msgtype":"m.text"},"ts":1621040548000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, ron's example doesn't have arrow params, https://github.com/tc39/test262/pull/2968#pullrequestreview-660291176 does unfortunately","msgtype":"m.text"},"ts":1621040667000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, the next comment in that thread calls out that discrepancy, I see","msgtype":"m.text"},"ts":1621040674000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but not merged yet! so still time","msgtype":"m.text"},"ts":1621040677000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"anyway i think the constraint must be \"parsing `await` inside static blocks as you would inside async function bodies\"","msgtype":"m.text"},"ts":1621040743000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1621040826000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I really want it to be specified that way: https://github.com/tc39/proposal-class-static-block/issues/27#issuecomment-724955380","msgtype":"m.text"},"ts":1621040840000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but that is not how it is currently written","msgtype":"m.text"},"ts":1621040845000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, definitely +1 from me now for that approach after trying to understand these tests","msgtype":"m.text"},"ts":1621040948000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I really ought to have insisted on it for stage 3","msgtype":"m.text"},"ts":1621041462000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would've if I'd remembered how many edge cases there are, with arrow parameters and so on","msgtype":"m.text"},"ts":1621041476000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]