[
{"content":{"body":"given that Temporal seems almost similar to 402 in size, I think it would be an excellent way to ease into having a multifile 262","msgtype":"m.text"},"ts":1591233005000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I could rewrite that as an issue on the repo, I suppose)","msgtype":"m.text"},"ts":1591233926000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"gibson042: mozilla doesn't have any remaining concerns, as i mentioned earlier","msgtype":"m.text"},"ts":1591256566000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"also, we have objected to stage advancement for proposals that did not have stage appropriate materials present such as spec text","msgtype":"m.text"},"ts":1591256607000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"the deadline represents the point at which I finish my collection and summarization of materials for the spidermonkey team, and we begin the process of review","msgtype":"m.text"},"ts":1591256633000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"If we do not have a chance to review, then we can't approriately evaluate a proposal for stage advancement. for lower stage proposals such as stage 1, a detailed review is not required, we are usually just happy to listen","msgtype":"m.text"},"ts":1591256680000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"however for other stages, review is necessary","msgtype":"m.text"},"ts":1591256692000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in this case, we were following Intl.segmenter closely, we are aware of what is being advanced, however not all members have been and many likely have a similar process as us","msgtype":"m.text"},"ts":1591256726000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and for this reason, i raised the importance of the deadline.","msgtype":"m.text"},"ts":1591256734000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I didn't make the decision of prioritization, that is with the chairs, but i support whatever they will choose, as the schedule is particularily challenging this time","msgtype":"m.text"},"ts":1591256856000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I imagine this is very frustrating for you, and it is unfortunate since Intl.Segmenter has gone through a long and difficult process to get to where it is. However, this is the second time this year that we are looking a proposal you are trying to advance that can, and arguably should be blocked on process grounds. Submitting a proposal for advancement to stage 3 with only one working day until the committee","msgtype":"m.text"},"ts":1591257321000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"member is far too little notice. Would it be helpful for you to review the process document and agenda structure? I would like to see this situation avoided in the future, since it is disappointing to have to say something like this about a proposal that is otherwise in good state.","msgtype":"m.text"},"ts":1591257321000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"(that is, bar the missing review)","msgtype":"m.text"},"ts":1591257748000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I may have been a bit too direct here, sorry about that. I am open for continuing the conversation though.","msgtype":"m.text"},"ts":1591264207000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I want to second what Mozilla is saying about Intl.Segmenter. I want this proposal to advance, but these things should be put up with more notice so that everyone can review them.","msgtype":"m.text"},"ts":1591272392000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think it's more important to declare the advancement with a repository link ahead of the deadline than to have all the slide presentation ready by then (since, ultimately, the advancement is of the contents of the repository)","msgtype":"m.text"},"ts":1591273061000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not disputing the above. The agenda matters, and I own my mistake in adding to it late, and that on its own is grounds for blocking advancement. But Intl.Segmenter was not the only or even the last entry to be added late, and that's even more true for the supporting materials requirement (which includes the slides, but more importantly also includes significant work in proposal repositories between the deadline and the m","msgtype":"m.text"},"ts":1591282420000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"bradleymeck: hmm... it's always smalltalk... :(","msgtype":"m.text"},"ts":1591282456000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"As for how to ensure sufficient review time in the future (which I agree is the right perspective), I appreciate upcoming-meeting reminders but would *never* expect someone else to provide them. The root issue for me personally is that the rest of my professional life is very far removed from this space, with a compounding factor in this case of thinking \"TC39 in June\" when the relevant deadline was well ahead of that.","msgtype":"m.text"},"ts":1591282465000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"There is something that would help, though: creating the next meeting's document by the start of the current meeting. This is the time when I'm most likely to be thinking about TC39-relevant content, and it would be really great to add agenda items in the moment rather than taking a note for future action.","msgtype":"m.text"},"ts":1591282506000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"that often happens, but I guess we don't have the July meeting agenda yet this time around","msgtype":"m.text"},"ts":1591282667000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i am not really sure what to respond here. I have protested in the past if something was added to the agenda without the required materials, late. and it is clearly outlined in our agenda document that this is a likely outcome","msgtype":"m.text"},"ts":1591282883000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and to be clear, any frustration I feel is self-directed. I had hoped to move JSON.parse source text access forward, but didn't have time to work on it. I was able to Intl.Segmenter only because it was ready to go from before.","msgtype":"m.text"},"ts":1591282892000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I do not have ill feelings towards anyone about this, and ystartsev in particular has been a consistent voice of reason and fairness","msgtype":"m.text"},"ts":1591282953000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: i am looking forward to giving this the green light very soon. i think the spec looks good","msgtype":"m.text"},"ts":1591282987000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"leobalter: ready in 3 minutes?","msgtype":"m.text"},"ts":1591283134000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"jorendorff: Why have only one function for all iterator helpers? Seem bad for profiling","msgtype":"m.text"},"ts":1591283144000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"@bterlson yes, Caridy will present","msgtype":"m.text"},"ts":1591283153000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"he's ready too","msgtype":"m.text"},"ts":1591283158000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"jorendorff: Since you'll end up with a megamorphic function for each of the things your iterating","msgtype":"m.text"},"ts":1591283286000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"You really want to know that only one iterable type is going into each loop so you can inline the next functions it.","msgtype":"m.text"},"ts":1591283330000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"into it*","msgtype":"m.text"},"ts":1591283339000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: I don't think it'll end up being bad for profiling. It might be more work to optimize, since it's a new thing","msgtype":"m.text"},"ts":1591283355000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"This is a problem for all the TypedArray share functions too","msgtype":"m.text"},"ts":1591283364000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"the inlining is harder to do","msgtype":"m.text"},"ts":1591283366000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"You'd need to do some very sophisticated optimizations that AFAIK, no engine does","msgtype":"m.text"},"ts":1591283396000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i have another request for time from the chairs akirose bterlson MylesBorins robpalme -> if there is time, Felienne and i have a 1 min announcement regarding the new research call","msgtype":"m.text"},"ts":1591283417000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Since you're profiling well see the next call as a virtual call","msgtype":"m.text"},"ts":1591283418000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"will*","msgtype":"m.text"},"ts":1591283423000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"If you see 10 different iterators it's going to be 10 different call targets","msgtype":"m.text"},"ts":1591283451000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ystartsev: literally 1 minute?","msgtype":"m.text"},"ts":1591283453000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"keith_miller: It is up to the implementation to decide whether it's a virtual call or what. It could easily be part of the \"hidden class\" that is not visible to users","msgtype":"m.text"},"ts":1591283456000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"keith_miller: I say \"easily\", knowing nothing about how that's implemented in other engines","msgtype":"m.text"},"ts":1591283468000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"for anyone here, Felienne and I are opening out 1:1 research call to everyone, who might want to discuss data gathering and research methods, first one is June 25 at 17:45 CEST","msgtype":"m.text"},"ts":1591283471000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"bterlson: it is exactly that ^","msgtype":"m.text"},"ts":1591283479000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"quick PSA for everyone","msgtype":"m.text"},"ts":1591283489000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"jorendorff: You have 10 different hidden objects in coming into map each has a different next function","msgtype":"m.text"},"ts":1591283501000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: but if an implementation wants to make all of these objects distinct types, it certainly can.","msgtype":"m.text"},"ts":1591283501000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"How do you inline those nexts into map without map being inlined into every caller?","msgtype":"m.text"},"ts":1591283527000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh, you mean optimizing .map() itself, rather than .next()?","msgtype":"m.text"},"ts":1591283528000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"any time you have one of those moments where you're like \"i need to request a little schedule change in the middle of the meeting and idk which chair to ping\"","msgtype":"m.text"},"ts":1591283532000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"jorendorff: yeah","msgtype":"m.text"},"ts":1591283534000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"you have *many* different objects coming into .map(), it's a method on Iterator.prototype","msgtype":"m.text"},"ts":1591283543000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I want to be able to trivially inline the next call into the map","msgtype":"m.text"},"ts":1591283546000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"any time you need to send a quick message to the chair group","msgtype":"m.text"},"ts":1591283547000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i just joined, did he say why import() is on realms?","msgtype":"m.text"},"ts":1591283550000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"could be called on anything","msgtype":"m.text"},"ts":1591283553000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"use `/notice #tc39-chairs your message here`","msgtype":"m.text"},"ts":1591283558000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"but that's exactly why I want it to be one per iterator helper prototype","msgtype":"m.text"},"ts":1591283568000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek: we will have more examples over the import() in Realms and use cases","msgtype":"m.text"},"ts":1591283582000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"keith_miller: I want to make sure I understand. \"inlining next into map\" doesn't make sense to me because Iterator.prototype.map doesn't call any next method","msgtype":"m.text"},"ts":1591283643000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"But also I think you have a particular implementation in mind that does inlining but then can't specialize on what is inlined, forgive me, I don't know much about that stuff to begin with","msgtype":"m.text"},"ts":1591283681000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"keith_miller: the next methods call into differing user code","msgtype":"m.text"},"ts":1591283695000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: but just to be clear, this is a performance problem caused by the extra level of indirection, right? and not a profiling problem exactly","msgtype":"m.text"},"ts":1591283763000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"It can't inline when calls are non-monomorphic because it's almost never profitable to do inlining there","msgtype":"m.text"},"ts":1591283767000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"gibson042: i'll create the july agenda today","msgtype":"m.text"},"ts":1591283781000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they should have the same characteristics as optimizing Generator.prototype.next except you know a lot more about the body of the generator","msgtype":"m.text"},"ts":1591283783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's a performance problem because inlining when monomorphic can be VERY profitable","msgtype":"m.text"},"ts":1591283788000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"So over sharing functions can hurt performance","msgtype":"m.text"},"ts":1591283807000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"jorendorff: To clarify this is to share map with Iterator.prototype and AsyncIterator.prototype on some shared prototyp?","msgtype":"m.text"},"ts":1591283848000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"maybe I misunderstood the slides","msgtype":"m.text"},"ts":1591283861000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: yeah, let's start over :)","msgtype":"m.text"},"ts":1591283885000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"haha ok","msgtype":"m.text"},"ts":1591283902000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: so, Iterator.prototype and AsyncIterator.prototype are totally separate prototype chains, we can set aside AsyncIterator","msgtype":"m.text"},"ts":1591283910000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's too early for me >.>","msgtype":"m.text"},"ts":1591283913000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: no, you're great, I'm glad you brought it up","msgtype":"m.text"},"ts":1591283926000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"they're different interfaces","msgtype":"m.text"},"ts":1591283929000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so Iterator.prototype.map is inherently a generic method shared across all (sync) iterators.","msgtype":"m.text"},"ts":1591283990000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"AIUI Array.prototype.map already poses some issues for inlining strategy because the mapFn you pass to it will be different every time; the function call in there is megamorphic, unless you inline .map into its caller","msgtype":"m.text"},"ts":1591284030000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and then it magically isn't","msgtype":"m.text"},"ts":1591284037000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Iterator.prototype.map is like that, only much worse, because","msgtype":"m.text"},"ts":1591284078000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: The main difference is that for any given iterator the next will be the same consistently","msgtype":"m.text"},"ts":1591284080000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"1. it has the same problem with mapFn;","msgtype":"m.text"},"ts":1591284085000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"2. it *also* is going to be megamorphic in `this` which will be all different kinds of iterator","msgtype":"m.text"},"ts":1591284091000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"each with a different next method, layout etc.","msgtype":"m.text"},"ts":1591284107000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I mean I can imagine things that change their next but... that seems rare","msgtype":"m.text"},"ts":1591284117000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"no, there are already a dozen next methods in the spec","msgtype":"m.text"},"ts":1591284134000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"many iterator types","msgtype":"m.text"},"ts":1591284143000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but we're not done yet","msgtype":"m.text"},"ts":1591284155000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"3. Array.prototype.map() at least gets to do all its work at once. Iterator.prototype.map() has to return an iterator. The JIT doesn't necessarily get to see how/where that iterator is used","msgtype":"m.text"},"ts":1591284183000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I get that, I'm saying that each prototype that has a next could also have a map.","msgtype":"m.text"},"ts":1591284184000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"That's a bit grosser because user iterators don't have access to a map","msgtype":"m.text"},"ts":1591284200000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Otherwise users will be better off, for each iterator adding their own map function, since they'll likely get better performance","msgtype":"m.text"},"ts":1591284249000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i.e. put a new map onto each ArrayIterator.prototype MapIterator.prototype, etc","msgtype":"m.text"},"ts":1591284292000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"there are about 12 iterator helper methods","msgtype":"m.text"},"ts":1591284407000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"FWIW, I've given this advice to people using typed arrays that had perf problems","msgtype":"m.text"},"ts":1591284423000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1591284433000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"IIRC, they got a 2-4x improvement","msgtype":"m.text"},"ts":1591284435000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"just working in pure JS?","msgtype":"m.text"},"ts":1591284442000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1591284449000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I mean they can also skip a bunch of checks","msgtype":"m.text"},"ts":1591284460000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i mean, should the spec add a .map for each TypedArray type?","msgtype":"m.text"},"ts":1591284462000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if that's inherently more performant?","msgtype":"m.text"},"ts":1591284477000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: It used to!","msgtype":"m.text"},"ts":1591284480000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"then ES6 changed it lol","msgtype":"m.text"},"ts":1591284485000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"that one seems like not an obviously bad idea, tbh","msgtype":"m.text"},"ts":1591284488000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean like, philosophically imo the current way it's done is better, with a single method","msgtype":"m.text"},"ts":1591284514000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the iterator helpers seem more obviously like shared things, to me","msgtype":"m.text"},"ts":1591284514000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but if there's a significant perf improvement from not sharing the methods, and it's not likely to ever be overcome, then we should be encouraging non=-sharing of megamorphic things as a pattern (which, coincidentally, is what the \"remove species\" proposal will force for subclasses)","msgtype":"m.text"},"ts":1591284559000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"an iterator is free to specialize the implementation of something on the prototype","msgtype":"m.text"},"ts":1591284587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example if your iterator is over a collection type, the map can walk directly over that instead of indirecting through the collection iterator","msgtype":"m.text"},"ts":1591284642000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sorry, 🐈 had a panic attack that I was up but didn't feed them","msgtype":"m.text"},"ts":1591284644000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"no worries","msgtype":"m.text"},"ts":1591284660000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Yeah, we could move back to pre-ES6 behavior","msgtype":"m.text"},"ts":1591284698000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I'm not opposed to that","msgtype":"m.text"},"ts":1591284704000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"did leo say why import is directly on realms instead of compartments","msgtype":"m.text"},"ts":1591284706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i got distracted by iterator stuff","msgtype":"m.text"},"ts":1591284739000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: The hard part is when is it profitable to decide to do that, which requires profiling, which has costs","msgtype":"m.text"},"ts":1591284739000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: oh i meant a human can do that","msgtype":"m.text"},"ts":1591284755000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it's going to be on a realm which has a root/host provided behavior, compartment would have a more granular/user provided behavior. so both would be having a import mechanism","msgtype":"m.text"},"ts":1591284793000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"does metamorphic mean this? https://en.wikipedia.org/wiki/Inline_caching#Megamorphic_inline_caching","msgtype":"m.text"},"ts":1591284807000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"s\\meta\\mega","msgtype":"m.text"},"ts":1591284823000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"bradleymeck: doesn't a compartment with no hook defer to the host?","msgtype":"m.text"},"ts":1591284826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: yeah","msgtype":"m.text"},"ts":1591284838000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: In the engine? That would still be hard because you'd need to teach executables that they can have different ones base on the this value","msgtype":"m.text"},"ts":1591284840000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"for import, it should defer to its realm","msgtype":"m.text"},"ts":1591284843000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it's not impossible but it's far far from simple","msgtype":"m.text"},"ts":1591284855000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: no i meant like, if you're writing a hashmap class in js, you can bring your own iterator forEach impl","msgtype":"m.text"},"ts":1591284871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does anyone have a link to the slides that Caridy is presenting?","msgtype":"m.text"},"ts":1591284897000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Oh, yeah, that's the recommendation I've given to devs when they find these methods hot","msgtype":"m.text"},"ts":1591284898000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"are hot*","msgtype":"m.text"},"ts":1591284904000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"gibson042: https://docs.google.com/presentation/d/1TfVtfolisUrxAPflzm8wIhBBv_7ij3KLeqkfpdvpFiQ/edit?ts=5ed5d3e7","msgtype":"m.text"},"ts":1591284922000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"devsnek: but I'd be good for that to be \"free\"","msgtype":"m.text"},"ts":1591284923000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1591284933000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"bradleymeck: the realm is the host, cuz the realm can't hook anything","msgtype":"m.text"},"ts":1591284944000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"realm inside a compartment is hooked","msgtype":"m.text"},"ts":1591284967000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jorendorff: shu: Does SM/V8 do inlining?","msgtype":"m.text"},"ts":1591284976000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek bradleymeck I can't focus in answering here but if you could bring it to the queue...","msgtype":"m.text"},"ts":1591284979000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I don't actually know. I assume yes","msgtype":"m.text"},"ts":1591284992000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"v8 has inlining","msgtype":"m.text"},"ts":1591285009000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i won't go so far as to say what makes something eligible for it","msgtype":"m.text"},"ts":1591285022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: in the optimized tier, yes","msgtype":"m.text"},"ts":1591285055000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: I mean JSC's heuristic is basically just bytecode size...","msgtype":"m.text"},"ts":1591285055000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: both user code and manually written inlines for recognized builtins","msgtype":"m.text"},"ts":1591285076000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which is a surprisingly good heuristic","msgtype":"m.text"},"ts":1591285078000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"all i know about v8's inlining is that the compiler doesn't account for the scope changing and you have to manually look it up every time","msgtype":"m.text"},"ts":1591285121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: Oh, you can't parse your torque (name?) bytecode for builtins?","msgtype":"m.text"},"ts":1591285122000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"torque doesn't have bytecode","msgtype":"m.text"},"ts":1591285133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: torque compiles down to masm calls, basically","msgtype":"m.text"},"ts":1591285138000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it compiles to c++ csa","msgtype":"m.text"},"ts":1591285139000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ah, I thought it was compiled to bytecode","msgtype":"m.text"},"ts":1591285157000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"my b","msgtype":"m.text"},"ts":1591285160000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: sm has inlining","msgtype":"m.text"},"ts":1591285163000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Cool so then I'd guess every has some flavor of the issue I'm talking about","msgtype":"m.text"},"ts":1591285200000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: Yes, SM does inlining in the most-optimized tier","msgtype":"m.text"},"ts":1591285201000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"everyone*","msgtype":"m.text"},"ts":1591285205000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: that seems like a reasonable extension to me, of parsing torque, identifying the fast paths, and auto-generating optimized tier specializations as well","msgtype":"m.text"},"ts":1591285236000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jorendorff: Do you have more than one optimizing tier? I thought it was just one?","msgtype":"m.text"},"ts":1591285238000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: though i'm not on the compiler team and that might not be feasible for other reasons","msgtype":"m.text"},"ts":1591285243000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1591285255000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: just the one","msgtype":"m.text"},"ts":1591285259000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"shu: i think its generally more profitable to handle the output of torque in the graph form","msgtype":"m.text"},"ts":1591285295000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff Yeah, wasn't sure from the phrasing. Inlining into a template JIT seems less profitable :P","msgtype":"m.text"},"ts":1591285322000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek: not sure what you mean; if what you're driving at is torque needing a new output format that feeds into the graph builder instead emitting CSA calls, then i agree","msgtype":"m.text"},"ts":1591285444000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: does csa not go through the sea of nodes graph","msgtype":"m.text"},"ts":1591285523000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"graph reducer","msgtype":"m.text"},"ts":1591285586000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes but that's pretty low level. my intuition is you need to do some higher-level processing to identify what fast paths make sense to emit for the optimized tier","msgtype":"m.text"},"ts":1591285842000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry, more dumb questions. What does CSA mean? my search turned up Coupled Simulated Annealing","msgtype":"m.text"},"ts":1591286046000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's a v8-ism","msgtype":"m.text"},"ts":1591286056000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"CodeStubAssembler","msgtype":"m.text"},"ts":1591286060000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: is that you typing?","msgtype":"m.text"},"ts":1591286072000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a higher-level assembler abstracion","msgtype":"m.text"},"ts":1591286077000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oops sorryu","msgtype":"m.text"},"ts":1591286078000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i see, thanks for the clarification","msgtype":"m.text"},"ts":1591286087000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"heh I tried to figure that out from googling too but it's part of the Torque article evidently","msgtype":"m.text"},"ts":1591286096000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er well linked from there","msgtype":"m.text"},"ts":1591286113000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(https://v8.dev/blog/csa)","msgtype":"m.text"},"ts":1591286115000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"neat, thanks for the link","msgtype":"m.text"},"ts":1591286129000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"the idea of torque is basically to make writing csa less of a pain","msgtype":"m.text"},"ts":1591286164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"JSC just uses JS itself but with reviewer-enforced stylistic restrictions, hehe","msgtype":"m.text"},"ts":1591286222000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"v8 used to do that","msgtype":"m.text"},"ts":1591286278000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Right, SM does that. Ours is not great; it's kind of JS, but with every one-off hack we need","msgtype":"m.text"},"ts":1591286449000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Apart from our lack of investment, JS turns out to be a kind of meh language for the purpose of implementing spec algorithms","msgtype":"m.text"},"ts":1591286474000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"my view is SM and V8 have both been bitten by the cons of self-hosting","msgtype":"m.text"},"ts":1591286547000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"node is also doing some stylistic stuff with robustness :-/ , it is difficult at best and definitely down to human review","msgtype":"m.text"},"ts":1591286636000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that glorious span of time where people hated promises because v8's self-hosted impl was so slow","msgtype":"m.text"},"ts":1591286650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so even runtimes ontop of engines are doing this kind of stuff","msgtype":"m.text"},"ts":1591286651000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"AFAIK chemists use Celsius","msgtype":"m.text"},"ts":1591286833000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"which scientific fields primarily use Kelvin?","msgtype":"m.text"},"ts":1591286840000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"maybe physics?","msgtype":"m.text"},"ts":1591286851000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"astrophysics surely","msgtype":"m.text"},"ts":1591286857000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I would guess physics?","msgtype":"m.text"},"ts":1591286861000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"physics for sure","msgtype":"m.text"},"ts":1591286909000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"y'all see all the \"missing information\" tags on these new delegate issues? I'd love to get them wrapped & closed! pls check if you're on there or someone you know is https://github.com/tc39/Admin-and-Business/issues","msgtype":"m.text"},"ts":1591286979000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"as an American, I can't help but be embarrassed during this presentation","msgtype":"m.text"},"ts":1591287032000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Except for fahrenheit which is a superior scale for non-scientific applications 😀","msgtype":"m.text"},"ts":1591287074000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":":fry:","msgtype":"m.text"},"ts":1591287132000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what is the phrase they're saying?","msgtype":"m.text"},"ts":1591287305000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"baby highs?","msgtype":"m.text"},"ts":1591287308000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"@bterlson +1 omg _thank you_ yes","msgtype":"m.text"},"ts":1591287347000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"shu: baby heights","msgtype":"m.text"},"ts":1591287376000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"does that... use different units than teenager heights or adult heights? i am not a parent","msgtype":"m.text"},"ts":1591287437000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"baby height is \"about 4 inches higher than you thought was safe\"","msgtype":"m.text"},"ts":1591287480000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"baby heights are inches","msgtype":"m.text"},"ts":1591287485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not feet and inches","msgtype":"m.text"},"ts":1591287490000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, yes","msgtype":"m.text"},"ts":1591287491000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe it's locale specific. in the uk babies are measured in cm","msgtype":"m.text"},"ts":1591287497000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i suspect this is for temporaldeadzone","msgtype":"m.text"},"ts":1591287507000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh oops, sorry","msgtype":"m.text"},"ts":1591287519000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm curious why we're prioritizing Intl.Segmenter when it was a late agenda addition","msgtype":"m.text"},"ts":1591288374000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this is pushing other things off the agenda that were added before the agenda deadline","msgtype":"m.text"},"ts":1591288386000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"wow that Array.from second param","msgtype":"m.text"},"ts":1591288499000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"littledan: we discussed this yesterday, late additions do not mean deprioritised","msgtype":"m.text"},"ts":1591288504000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we should still prioritise higher-stage proposals over lower-stage ones","msgtype":"m.text"},"ts":1591288532000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sorry, I guess I missed that discussion (and continue to disagree)","msgtype":"m.text"},"ts":1591288567000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"by \"we discussed this yesterday\", I mean it was discussed in this channel yesterday","msgtype":"m.text"},"ts":1591288581000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I did not mean to imply you were present","msgtype":"m.text"},"ts":1591288585000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"right, I didn't mean to imply that anyone but me was at fault for missing it","msgtype":"m.text"},"ts":1591288610000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ystartsev: do you think subclassing removal would benefit from an incubation call? i'm thinking no, since the feedback we want are not from delegates","msgtype":"m.text"},"ts":1591288621000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think no","msgtype":"m.text"},"ts":1591288638000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"littledan: we can have that process discussion at some point, but there's no precedent for changing priority based on when an agenda item was added","msgtype":"m.text"},"ts":1591288642000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the deadline has always been indended only for advancement, since that's the only thing that requires sufficient time to review","msgtype":"m.text"},"ts":1591288703000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'll drop this; it's not productive for me to be complaining, and I hope the presenter understands that this isn't personal (of course I'm a fan of this proposal, and I'm really happy that the presenter has taken it up and is championing it in an improved direction from when I started it)","msgtype":"m.text"},"ts":1591288772000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I've reviewed these changes and they all seem like good ideas to me","msgtype":"m.text"},"ts":1591288802000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"well, except I disagree about the exotic internal slots hazard","msgtype":"m.text"},"ts":1591288819000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I wish the committee would form a consistent security model that we can use to inform our designs","msgtype":"m.text"},"ts":1591288869000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I feel we are constantly going back and forth on whether the model SES is based on is valid","msgtype":"m.text"},"ts":1591288891000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: yes, i wish we'd settle as well","msgtype":"m.text"},"ts":1591288919000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591288923000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"michaelficarra: though of course i am, as a browser, firmly on the invalid side","msgtype":"m.text"},"ts":1591288932000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so, the exotic internal slot thing seems new. I've been working on following SES constraints for years, but this is a new idea about restrictions on proposals","msgtype":"m.text"},"ts":1591288952000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't see why you couldn't have a prototype around something that has an internal slot containing an object","msgtype":"m.text"},"ts":1591288962000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"did we move to Promise.any stuff","msgtype":"m.text"},"ts":1591289000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no but the concern overlaps","msgtype":"m.text"},"ts":1591289028000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"promises have internal slots that hold non-primitive data","msgtype":"m.text"},"ts":1591289060000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thenables and whatnot","msgtype":"m.text"},"ts":1591289070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the problem isn't slots holding objects","msgtype":"m.text"},"ts":1591289079000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's *revealing* mutable objects, held in slots","msgtype":"m.text"},"ts":1591289087000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: yeah same.","msgtype":"m.text"},"ts":1591289104000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i think the real issue here is that the design of Proxy didn't account for internal slots \"properly\" for the security model they have in mind","msgtype":"m.text"},"ts":1591289181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sounds about right ljharb","msgtype":"m.text"},"ts":1591289223000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1591289338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"every single JS type besides Error and Array has prototype methods that check internal slots and thus throw on proxies","msgtype":"m.text"},"ts":1591289357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that slots make proxies throw is irrelevant here","msgtype":"m.text"},"ts":1591289369000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(specifically, things with exotic objects are defined in the spec to mean \"has exotic internal methods\" which has nothing to do with slots)","msgtype":"m.text"},"ts":1591289437000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mpcsh, maybe try reloading the doc? There is a lot of activity, and maybe you have lag","msgtype":"m.text"},"ts":1591289492000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"(objects are also data; \"primitives\" is the term that we should be using here)","msgtype":"m.text"},"ts":1591289504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sffc: good call","msgtype":"m.text"},"ts":1591289523000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-get-%typedarray%.prototype.buffer","msgtype":"m.text"},"ts":1591289699000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is there any precedent for \"getting back to the Intl class instance\"?","msgtype":"m.text"},"ts":1591289707000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems super random","msgtype":"m.text"},"ts":1591289713000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ that seems to be a getter that returns an object out of an internal slot","msgtype":"m.text"},"ts":1591289725000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: ohhhh snap","msgtype":"m.text"},"ts":1591289775000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol what is going on right now","msgtype":"m.text"},"ts":1591289779000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"how are function closures not reified","msgtype":"m.text"},"ts":1591289786000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1591289794000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can clarify but i don't think this discussion is useful right now","msgtype":"m.text"},"ts":1591289810000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they're using the word closure differently","msgtype":"m.text"},"ts":1591289818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"waldemar is referring to the function as a closure","msgtype":"m.text"},"ts":1591289826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think there's an ecmascript value that we call a \"closure\" in the spec","msgtype":"m.text"},"ts":1591289829000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i don't think there are different meanings of \"closure\", there is a single meaning of closure","msgtype":"m.text"},"ts":1591289842000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and someone else is using the term closure to refer to the scope","msgtype":"m.text"},"ts":1591289857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the function","msgtype":"m.text"},"ts":1591289865000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb is right, this conversation is *terrible*","msgtype":"m.text"},"ts":1591289878000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1591289902000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"really, I blame this committee for not having a consistent security model that we could be reasoning about right now","msgtype":"m.text"},"ts":1591289954000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1 shu, let's not hypothesize about SES without Mark Miller here","msgtype":"m.text"},"ts":1591290048000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"You want to do the opposite of table it. It's on the table right now; we're discussing it.","msgtype":"m.text"},"ts":1591290075000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"seems to me like if the membrane pattern is fragile to changes in the spec like this, it SHOULD in fact be actually part of the spec","msgtype":"m.text"},"ts":1591290096000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"bterlson: boooo","msgtype":"m.text"},"ts":1591290102000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"have i been using \"tabling\" wrong my entire life??","msgtype":"m.text"},"ts":1591290133000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry no","msgtype":"m.text"},"ts":1591290137000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"NilSet: that, or, we should have consensus not to support that pattern. the problem is that consensus for either one is likely not possible.","msgtype":"m.text"},"ts":1591290139000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: no you're 100% correct for US english","msgtype":"m.text"},"ts":1591290143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"US vs British english distinction","msgtype":"m.text"},"ts":1591290144000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"for real?","msgtype":"m.text"},"ts":1591290148000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it means the opposite in british english?","msgtype":"m.text"},"ts":1591290154000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah it's literally the opposite","msgtype":"m.text"},"ts":1591290156000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's horrible","msgtype":"m.text"},"ts":1591290158000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"IMO the meaning of \"to table\" is one of the few things British English gets right. We already have ways to say \"defer\"","msgtype":"m.text"},"ts":1591290169000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bollocks","msgtype":"m.text"},"ts":1591290181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1591290198000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"🤯🤯🤯","msgtype":"m.text"},"ts":1591290203000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"but i'll take my blown mind about UK english's meaning of \"table\" to tdz","msgtype":"m.text"},"ts":1591290206000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://english.stackexchange.com/questions/16285/what-is-the-meaning-of-the-expression-we-can-table-this","msgtype":"m.text"},"ts":1591290208000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"For a US-based meeting let's use the US definition of \"table\" :)","msgtype":"m.text"},"ts":1591290215000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"bterlson: we also have ways to say \"schedule\" though","msgtype":"m.text"},"ts":1591290216000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"table is to bring up for discussion immediately","msgtype":"m.text"},"ts":1591290248000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"it's also a good metaphor. You table a proposal. You can table supporting documents.","msgtype":"m.text"},"ts":1591290275000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"so table is a contronym?","msgtype":"m.text"},"ts":1591290368000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"like chuffed?","msgtype":"m.text"},"ts":1591290376000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"NilSet: join #temporaldeadzone, i have questions","msgtype":"m.text"},"ts":1591290562000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is frank tang on irc","msgtype":"m.text"},"ts":1591291792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we are restarting in 1 minute!","msgtype":"m.text"},"ts":1591293568000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"devsnek: I don't think so but I can introduce you by email if you want","msgtype":"m.text"},"ts":1591294407000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh i just wanted to let him know his camera was on during lunch","msgtype":"m.text"},"ts":1591294430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: fwiw we do have that strawperson solution, it's the spaceship operator","msgtype":"m.text"},"ts":1591294541000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah OK. That would work with Arrays?","msgtype":"m.text"},"ts":1591294582000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe we should go down the queue?","msgtype":"m.text"},"ts":1591294598000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: yes, it would come with a Symbol.compare protocol, as in the example in the slides, that would be defined on Array.prototype","msgtype":"m.text"},"ts":1591294641000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"[false, null, 1, \"1\"].sort() today would return [ 1, '1', false, null ]","msgtype":"m.text"},"ts":1591294659000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"shu: (not to preempt your queue item) but arrays can contain any value, so to compare array contents we need to know how to compare any variable","msgtype":"m.text"},"ts":1591294766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*any value","msgtype":"m.text"},"ts":1591294769000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I agree with Shu that I do not want to spend committee time on the black hole that is generic equality","msgtype":"m.text"},"ts":1591294957000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's a bigger hole than just equality","msgtype":"m.text"},"ts":1591294973000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that's true, also ordering","msgtype":"m.text"},"ts":1591294987000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think shu's summarized opinion was quite well put","msgtype":"m.text"},"ts":1591294989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't think we should think about partial orders and so forth","msgtype":"m.text"},"ts":1591294992000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't think we should spend time on either individually or both","msgtype":"m.text"},"ts":1591295013000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"to wit, i don't think it's sensical kinda along the arguments that waldemar put forward","msgtype":"m.text"},"ts":1591295017000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"does Set equality take into account the insertion order? gross","msgtype":"m.text"},"ts":1591295058000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"its observable via -0","msgtype":"m.text"},"ts":1591295072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's observable via iteration","msgtype":"m.text"},"ts":1591295081000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: it wouldn't have to","msgtype":"m.text"},"ts":1591295082000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: all the deepEqual libraries on npm do not regard order in Set and Map comparison","msgtype":"m.text"},"ts":1591295093000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(also node's assert)","msgtype":"m.text"},"ts":1591295108000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that doesn't mean it's the *one true equality definition*","msgtype":"m.text"},"ts":1591295111000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if I want it to do I need to overwrite Set.prototype[Symbol.whatever]?","msgtype":"m.text"},"ts":1591295113000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"iow the semantics for how to judge values as equal are already largely consistent in the ecosystem","msgtype":"m.text"},"ts":1591295124000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: replace it, or shadow it via own or subclass, yes","msgtype":"m.text"},"ts":1591295144000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm interested in exploring equality, relational equality, and structural equality","msgtype":"m.text"},"ts":1591295212000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: what is relational equality?","msgtype":"m.text"},"ts":1591295251000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"relational operators, essentially `Symbol.compare`","msgtype":"m.text"},"ts":1591295274000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(from the slides)","msgtype":"m.text"},"ts":1591295281000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"what is the equality part of \"relational equality\"?","msgtype":"m.text"},"ts":1591295301000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm just talking about relational operators like `<`, `<=`, `>`, `>=`","msgtype":"m.text"},"ts":1591295363000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ah okay","msgtype":"m.text"},"ts":1591295369000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"For example, If we had a `[Symbol.compareTo]` method, we could have `Array.prototype.sort` use that as a fallback before going to comparing the `ToString` of each element.","msgtype":"m.text"},"ts":1591295421000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"agree with Shu again, even though he jumped queue","msgtype":"m.text"},"ts":1591295559000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm sorry i didn't know there was a queue!","msgtype":"m.text"},"ts":1591295569000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"thought it was empty, should have the tab open","msgtype":"m.text"},"ts":1591295578000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's always a queue","msgtype":"m.text"},"ts":1591295578000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":":-P","msgtype":"m.text"},"ts":1591295582000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i heard rob said it was empty","msgtype":"m.text"},"ts":1591295584000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it was","msgtype":"m.text"},"ts":1591295615000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"and then it wasn't","msgtype":"m.text"},"ts":1591295617000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"good point, littledan, public perception of what we've approved is important","msgtype":"m.text"},"ts":1591295699000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"agree","msgtype":"m.text"},"ts":1591295707000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591295733000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm very happy in general with everyone's contributions during this topic. Good job everyone!","msgtype":"m.text"},"ts":1591295757000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":":nod:","msgtype":"m.text"},"ts":1591295773000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ftr I think a spaceship operator someday would be awesome, but I agree with Waldemar that it would need to be four-valued","msgtype":"m.text"},"ts":1591295834000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"what's the fourth value","msgtype":"m.text"},"ts":1591295867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no comparison?","msgtype":"m.text"},"ts":1591295869000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe spaceship could be built on operator overloading, if we do that. It'd be cool if spaceship and other comparison operators kinda agreed","msgtype":"m.text"},"ts":1591295869000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: Yes, uncomparable. Like NaN, but there are other partial orders","msgtype":"m.text"},"ts":1591295881000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"mmm negative indices","msgtype":"m.text"},"ts":1591295900000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"negative, postiive, zero, NaN?","msgtype":"m.text"},"ts":1591295904000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"+Infinity, -Infinity, 0, null","msgtype":"m.text"},"ts":1591295938000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: may want to look here for some inspiration: https://pursuit.purescript.org/packages/purescript-higher-order/0.2.0/docs/Data.PartialOrd#t:PartialOrd","msgtype":"m.text"},"ts":1591295960000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"\"just true\"?","msgtype":"m.text"},"ts":1591295995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html","msgtype":"m.text"},"ts":1591296016000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those laws do make sense to me tho; if i wasn't afraid of touching > and < and == i'd expect them all to agree","msgtype":"m.text"},"ts":1591296029000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"are Arguments exotic objects \"indexable\"?","msgtype":"m.text"},"ts":1591296036000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes?","msgtype":"m.text"},"ts":1591296047000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so how will they get this method?","msgtype":"m.text"},"ts":1591296087000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i don't see much of a reason to add it","msgtype":"m.text"},"ts":1591296116000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What I've been thinking about is a set of protocols and APIs around equality:","msgtype":"m.text"},"ts":1591296117000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `[@@equals](other)`, `[@@hash]()` - Allows an object itself to define whether it is equal to another object in a generic fashion. Useful for `Map`, `Set`, and cross-compatibility between userland libraries.","msgtype":"m.text"},"ts":1591296117000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `[@@compareTo](other)` - Defines a relational comparison on an object itself, returning `-1 | 0 | 1` (similar to this proposal)","msgtype":"m.text"},"ts":1591296117000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `[@@structuralEquals](other, equaler)` - Allows an object to define how it should be equated structurally with another object, using the provided `Equaler` (see below)","msgtype":"m.text"},"ts":1591296117000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `[@@structuralHash](equaler)` - A version of `@@hash` for structural equality.","msgtype":"m.text"},"ts":1591296117000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `[@@structuralCompareTo](other, comparer)` - A version of `@@compareTo` for structural comparisons.","msgtype":"m.text"},"ts":1591296118000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `Equaler` - An object with `equals(a, b)` and `hash(a)` methods that can be used to define equality independent of objects. Also useful for `Map` and `Set` when working with keys that do not maintain their own `@@equals`/`@@hash` members.","msgtype":"m.text"},"ts":1591296118000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `Comparer` - An object with a `compare(a, b)` method that can be used to define comparability independent of objects.","msgtype":"m.text"},"ts":1591296119000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `StructuralEqualer` - An object with `structuralEquals(a, b, equaler)` and `structuralHash(a, equaler)` methods.","msgtype":"m.text"},"ts":1591296119000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"- `StructuralComparer` - An object with `structuralCompare(a, b, comparer)` methods.","msgtype":"m.text"},"ts":1591296120000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"The design is derived from `IEquatable`, `IComparable`, `IStructuralEquatable`, `IStructuralComparable`, `EqualityComparer`, and `Comparer` in C#/.NET.","msgtype":"m.text"},"ts":1591296121000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"eesh","msgtype":"m.text"},"ts":1591296123000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but its not like they can't have an own property","msgtype":"m.text"},"ts":1591296125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: you don't need to end every proposal with \"this design is derived from […] C#/.NET\"; we already know","msgtype":"m.text"},"ts":1591296195000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lulz","msgtype":"m.text"},"ts":1591296205000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: :P","msgtype":"m.text"},"ts":1591296205000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i need to start adding js features to c#","msgtype":"m.text"},"ts":1591296247000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to balance it out","msgtype":"m.text"},"ts":1591296249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"add typeof null","msgtype":"m.text"},"ts":1591296258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oops this isn't tdz","msgtype":"m.text"},"ts":1591296262000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: 🔥","msgtype":"m.text"},"ts":1591296263000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: 💙","msgtype":"m.text"},"ts":1591296304000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ActiveX/COM objects in old IE/Chakra exposed both an indexer and a `item()` method with the same meaning. Probably not a compat issue for Array.prototype...","msgtype":"m.text"},"ts":1591296306000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I feel like switching null to undefined is going to break stuff","msgtype":"m.text"},"ts":1591296342000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra: not always true though, partial application isn't based on .NET at all :)","msgtype":"m.text"},"ts":1591296343000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(re: null → undefined) yes ...only if anyone is using .item() to start with","msgtype":"m.text"},"ts":1591296399000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1591296421000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i assumed it was common","msgtype":"m.text"},"ts":1591296425000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe? literally no idea","msgtype":"m.text"},"ts":1591296444000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I guess I'd usually use the indexing syntax though","msgtype":"m.text"},"ts":1591296455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would be surprised if it's a thing","msgtype":"m.text"},"ts":1591296464000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but the web is a surprising place, so who knows","msgtype":"m.text"},"ts":1591296473000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"michaelficarra I don't see a reason to want that","msgtype":"m.text"},"ts":1591296531000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra: own proprety :P","msgtype":"m.text"},"ts":1591296532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't see a reason for people to have arguments objects in new code at all","msgtype":"m.text"},"ts":1591296545000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's funny to have `arr.item(Infinity)` able to hit an expando property","msgtype":"m.text"},"ts":1591296566000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sometimes you have to make bad choices to level out the good ones Bakkot","msgtype":"m.text"},"ts":1591296576000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I guess if we can had arguments be array, it already be array in ES6?","msgtype":"m.text"},"ts":1591296576000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"it's also funny to have `arr.item(-100)`, where arr.length is 3, able to hit expando properties","msgtype":"m.text"},"ts":1591296607000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"We define `Symbol.iterator` on `arguments`","msgtype":"m.text"},"ts":1591296610000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"haxjs I don't know if we explored having arguments be an array in strict mode. it definitely could not be in sloppy mode because there is the magical behavior of mapped arguments objects","msgtype":"m.text"},"ts":1591296631000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"As an own-data method","msgtype":"m.text"},"ts":1591296636000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"michaelficarra: I don't see a use case for arguments other than we don't have it there. I don't think it's interesting enough to add just because this","msgtype":"m.text"},"ts":1591296639000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"jridgewell that's a good example","msgtype":"m.text"},"ts":1591296646000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"arguments.item(-1) is useful","msgtype":"m.text"},"ts":1591296657000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra only if you have an arguments object, which, why do you have an arguments object","msgtype":"m.text"},"ts":1591296671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because it's in-scope as `arguments` in every function invocation?","msgtype":"m.text"},"ts":1591296686000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"And it's the `Array.prototype.values` method, so shared between all `arguments`","msgtype":"m.text"},"ts":1591296690000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jorendorff: wait, what","msgtype":"m.text"},"ts":1591296698000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jorendorff: why would `item` accept anything that's not an integer","msgtype":"m.text"},"ts":1591296707000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: that's great precedent! even if gross","msgtype":"m.text"},"ts":1591296707000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"jorendorff: or at least a finite number","msgtype":"m.text"},"ts":1591296715000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra so? `eval` is in scope too, but, like, don't touch it","msgtype":"m.text"},"ts":1591296725000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sounds like we could probably do the same with Array::item","msgtype":"m.text"},"ts":1591296730000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: I'm kind of saying I agree. just going by the slides","msgtype":"m.text"},"ts":1591296756000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"michaelficarra: `...args` is an array that you can item(-1) on","msgtype":"m.text"},"ts":1591296757000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: https://apidock.com/rails/Array/forty_two","msgtype":"m.text"},"ts":1591296761000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: can't always use rest parameters","msgtype":"m.text"},"ts":1591296780000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I mean if we hit web compat issues with the Web APIs then *just* having a \"from the right\" method might suffice","msgtype":"m.text"},"ts":1591296785000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"michaelficarra: why not","msgtype":"m.text"},"ts":1591296796000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan I don't see why indexing with `-1` is any worse than indexing with `0`","msgtype":"m.text"},"ts":1591296797000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: use strict directive or weird parameter ordering conventions a la node","msgtype":"m.text"},"ts":1591296809000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: +1","msgtype":"m.text"},"ts":1591296820000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Array.prototype.item.call(arguments, -1)","msgtype":"m.text"},"ts":1591296822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah that's a decent alternative","msgtype":"m.text"},"ts":1591296834000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"or the old reliable `args = [].slice.call(arguments)`","msgtype":"m.text"},"ts":1591296855000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"RIP `arguments::Array.prototype.item(-1)`","msgtype":"m.text"},"ts":1591296856000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lmao","msgtype":"m.text"},"ts":1591296863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: :'(","msgtype":"m.text"},"ts":1591296876000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Can we revive it?","msgtype":"m.text"},"ts":1591296890000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: it wasn't too popular","msgtype":"m.text"},"ts":1591296901000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: epic! self[41]","msgtype":"m.text"},"ts":1591296904000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"rbuckton: peek sounds like a great name","msgtype":"m.text"},"ts":1591296919000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"picking the last item from `arguments` without checking the length sounds weird. For arguments you either expect a length or - if you expect many arguments - it feels like rest parameter is already a good design","msgtype":"m.text"},"ts":1591296923000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"peek by convention is from the front","msgtype":"m.text"},"ts":1591296950000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"peek sounds too ambiguous to me","msgtype":"m.text"},"ts":1591296964000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://apidock.com/rails/Array/forty_two","msgtype":"m.text"},"ts":1591296971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"x.peek(0) is like x[0]","msgtype":"m.text"},"ts":1591296977000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"what does peek mean","msgtype":"m.text"},"ts":1591296989000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i understand peek as similar to next, without advancing","msgtype":"m.text"},"ts":1591296994000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i only know it in the context of iterators","msgtype":"m.text"},"ts":1591296997000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's actually a good candidate replacement for \"item\" if that name doesn't work out","msgtype":"m.text"},"ts":1591296999000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"peek is great if you're already a parser geek, but...","msgtype":"m.text"},"ts":1591297002000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"gibson042: that wouldn't match with `push` and `pop` being from the back and being queue-like operations on Array.","msgtype":"m.text"},"ts":1591297010000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"sorry don't worry about my concern about .item(-1), it doesn't seem really bad to me, ljharb makes a good point about .slice","msgtype":"m.text"},"ts":1591297017000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"peek is like pop and push, it's just weird because arrays conflate Lists and Queues","msgtype":"m.text"},"ts":1591297021000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I still like the idea of .lastElement() somehow or other","msgtype":"m.text"},"ts":1591297029000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"This proposal was already suggested in an issue on last: https://github.com/tc39/proposal-array-last/issues/27","msgtype":"m.text"},"ts":1591297037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think the concept is good","msgtype":"m.text"},"ts":1591297037000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: wdym \"like pop and push\"","msgtype":"m.text"},"ts":1591297040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i would support moving it forward","msgtype":"m.text"},"ts":1591297041000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"devsnek: peek is \"pop but don't remove it\"","msgtype":"m.text"},"ts":1591297059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Well maybe not the same proposal, please ignore.","msgtype":"m.text"},"ts":1591297063000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ahhh got it","msgtype":"m.text"},"ts":1591297069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"peek is \"next but don't remove it\"","msgtype":"m.text"},"ts":1591297071000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah i wasn't sure what it meant on collection types","msgtype":"m.text"},"ts":1591297091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"arrays actually conflate the concepts of List, Stack, and Queue, i think?","msgtype":"m.text"},"ts":1591297093000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591297099000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"pop/push, shift/unshift, and then everything else","msgtype":"m.text"},"ts":1591297102000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they're also dictionaries","msgtype":"m.text"},"ts":1591297130000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"+1 for Stage 1!","msgtype":"m.text"},"ts":1591297139000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ship it","msgtype":"m.text"},"ts":1591297143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"[-1] for stage 1","msgtype":"m.text"},"ts":1591297153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think of arrays as being closer to stacks then queues","msgtype":"m.text"},"ts":1591297250000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"they have the methods needed to be queues","msgtype":"m.text"},"ts":1591297266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: I think performance encourages that view","msgtype":"m.text"},"ts":1591297267000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Mainly because `shift` is O(n) and `pop` is O(1)","msgtype":"m.text"},"ts":1591297274000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah performance *definitely* is on the side of that","msgtype":"m.text"},"ts":1591297278000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1591297278000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1591297301000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"you could do a butterfly allocation for every array","msgtype":"m.text"},"ts":1591297308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: agreed, I misspoke when I said \"queue-like operations\" above, I meant to say \"stack-like operations\" w.r.t. `push/pop`. Hence why I think `.peek` makes sense as \"look at the nth element of the array starting from the last element\".","msgtype":"m.text"},"ts":1591297449000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ystartsev: fwiw the motivation is to do it in node, and even if node is adding webcrypto, it seems like it should be in the language :-/","msgtype":"m.text"},"ts":1591297483000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yah, I agree with `peek` being backwards looking for it","msgtype":"m.text"},"ts":1591297502000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"crypto sounds good","msgtype":"m.text"},"ts":1591297508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i still don't think uuid belongs in stdlib","msgtype":"m.text"},"ts":1591297517000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: thats actually the argument we had regarding why it should be in webcrypto, node is implementing it","msgtype":"m.text"},"ts":1591297626000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"shu: in case it was not obvious, I have an interest in attending that security model call","msgtype":"m.text"},"ts":1591297630000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ystartsev: ok but then that still means it wouldn't be portable outside browsers and node","msgtype":"m.text"},"ts":1591297657000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: we have already discussed it, we may rechartere it","msgtype":"m.text"},"ts":1591297665000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's really weird imo for stuff that's not web-specific to only be in web specs.","msgtype":"m.text"},"ts":1591297673000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: this is why i brought up a more wholistic approach to crypto","msgtype":"m.text"},"ts":1591297691000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1591297705000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: Sorry, I missed part of this because I had a thingy. Was it discussed if we could have these be normative optional?","msgtype":"m.text"},"ts":1591297713000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Given that NodeJS is also intending to implement something akin to Web Cryptography, I feel it might make sense to adopt part or all of Web Crypto in the language/standard library itself.","msgtype":"m.text"},"ts":1591297731000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1591297736000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the view of our security folks is that if we start introducing bits and pieces of crypto to just js, we should have a holistic picture so that we add things that are strateegic","msgtype":"m.text"},"ts":1591297738000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"littledan: i'm not sure temporal is ready for wider review until the rate of change slows?","msgtype":"m.text"},"ts":1591297748000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there was also discussion about moving web crypto to tc39, but it is blocked","msgtype":"m.text"},"ts":1591297752000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"its worth noting that node and the web are not all of js","msgtype":"m.text"},"ts":1591297754000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just most of it","msgtype":"m.text"},"ts":1591297755000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: phrased that way (\"the view of\" part) is quite compelling","msgtype":"m.text"},"ts":1591297765000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: Due to EventTarget, or for some other reason?","msgtype":"m.text"},"ts":1591297770000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"due to a process reason","msgtype":"m.text"},"ts":1591297777000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i can raise it again, there was an ongoing discussion around this","msgtype":"m.text"},"ts":1591297798000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: Was it blocked becaues there are places where it doesn't make sense or because we don't want to be the arbiters?","msgtype":"m.text"},"ts":1591297803000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"IMO, I'm kind of a fan of standardizing many more things as normative optional and letting hosts define which things they should expose","msgtype":"m.text"},"ts":1591297841000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: Temporal is seeking feedback, as announced in the presentation.","msgtype":"m.text"},"ts":1591297847000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'd be interested in knowing more, as I was asked by the committee to explore moving my `ArrayBuffer.getRandomBytes` proposal to bringing at least part of `crypto` to the language.","msgtype":"m.text"},"ts":1591297850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"If we don't think they make sense everywhere","msgtype":"m.text"},"ts":1591297859000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: what's normative optional?","msgtype":"m.text"},"ts":1591297882000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"therre were a couple of things -> one is that the layering and moving of bits of web crypto was offered by someone who was in an admin role but couldn't make that call","msgtype":"m.text"},"ts":1591297884000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"keith_miller: .item()?","msgtype":"m.text"},"ts":1591297894000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: no sorry, things like getRandomBytes","msgtype":"m.text"},"ts":1591297905000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: oh i have no idea","msgtype":"m.text"},"ts":1591297910000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"where some contexts don't want it","msgtype":"m.text"},"ts":1591297914000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"bradleymeck: did you pull the module string exports","msgtype":"m.text"},"ts":1591297914000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: i'm kinda on the move to webcrypto train","msgtype":"m.text"},"ts":1591297918000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because security or w/e","msgtype":"m.text"},"ts":1591297919000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"the second issue is that mozilla itself would be opposed to moving things out of web crypto as they see this as well defined and are being implemented by external consumers anyway (such as node)","msgtype":"m.text"},"ts":1591297921000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"workers don't expose most of crypto, for reasons which are totally unclear to me","msgtype":"m.text"},"ts":1591297927000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they expose getRandomValues and nothing else, IIRC","msgtype":"m.text"},"ts":1591297934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"keith_miller: but i want the champions to hear that and respond, not me parroting them","msgtype":"m.text"},"ts":1591297936000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: arbitrary namespace bindings? nah, that went through","msgtype":"m.text"},"ts":1591297936000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: One upside is that then node can share the spec","msgtype":"m.text"},"ts":1591297937000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"but I don't care too much","msgtype":"m.text"},"ts":1591297943000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"bradleymeck: stage 1?","msgtype":"m.text"},"ts":1591297946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see it on the queue now","msgtype":"m.text"},"ts":1591297951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`from ... import` has feedback that it doesn't carry enough weight so I'm de-prioritizing","msgtype":"m.text"},"ts":1591297957000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I guess we can implement it in JSC regardless 🤷‍♂️","msgtype":"m.text"},"ts":1591297965000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Just feels like a failure of the language if the spec can't have \"core\" library features","msgtype":"m.text"},"ts":1591297996000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek: no stage because i didn't ask, it should go quickly through staging though as it seemed only validity of strings is the question","msgtype":"m.text"},"ts":1591297996000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: like utf validity?","msgtype":"m.text"},"ts":1591298018000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1591298041000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ystartsev: `UUID` is essentially dependent on `getRandomValues` (at least per the requirements of some members of TC39). Are you suggesting that `UUID` be moved from TC39 to a proposal to Web Crypto?","msgtype":"m.text"},"ts":1591298058000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"js strings aren't required to be valid utf anything are they?","msgtype":"m.text"},"ts":1591298063000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: yse","msgtype":"m.text"},"ts":1591298069000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"devsnek indeed","msgtype":"m.text"},"ts":1591298074000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they are in many other languages","msgtype":"m.text"},"ts":1591298079000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: Oh sure, I'm not saying they should feel obligated. Just that I think a lot of proposals don't come to TC-39 because of things like SES concerns, which I think is a shame.","msgtype":"m.text"},"ts":1591298080000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rathre than move getRandomValues to tc39","msgtype":"m.text"},"ts":1591298081000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"devsnek: nope, just a sequence of UTF-16 code units","msgtype":"m.text"},"ts":1591298092000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"so what's the problem then lol","msgtype":"m.text"},"ts":1591298101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: ah, interesting observation","msgtype":"m.text"},"ts":1591298104000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: exporting invalid stuff that other langs couldn't deal w/","msgtype":"m.text"},"ts":1591298125000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: if we could solve that via normative optional then we might have a better path forwar","msgtype":"m.text"},"ts":1591298137000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"forward*","msgtype":"m.text"},"ts":1591298141000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I'm glad we're getting to this editorial topic","msgtype":"m.text"},"ts":1591298150000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh man","msgtype":"m.text"},"ts":1591298154000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"being an editor and all lol","msgtype":"m.text"},"ts":1591298155000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"most heated editorial topic ever","msgtype":"m.text"},"ts":1591298162000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ystartsev: There's a broader question of whether there's the possibility of other ES standard library APIs that might depend on UUID, and then can't because it isn't specified. I suppose they would have to rely on merely a string or `ArrayBuffer` representation of the UUID.","msgtype":"m.text"},"ts":1591298166000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: are there specific apis you have in mind?","msgtype":"m.text"},"ts":1591298185000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"\"might depend on UUID\" in the future, rather.","msgtype":"m.text"},"ts":1591298194000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"why would something have to depend on uuid","msgtype":"m.text"},"ts":1591298215000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: optional to implement, but if implemented must conform with the spec","msgtype":"m.text"},"ts":1591298241000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"definitely did *not* know about cbrt","msgtype":"m.text"},"ts":1591298261000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ystartsev: Nothing concrete at the moment, no. I know that, in languages like C#, UUID (or rather, `Guid`) usage is fairly prevalent within the standard library.","msgtype":"m.text"},"ts":1591298342000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: I don't think they are forced to be UTF-16 but it's a pain to do a lot of RegExp stuff if they're not in that form","msgtype":"m.text"},"ts":1591298345000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"If we didn't have non-unicode RegExp's with unicode characters then it would probably fine lol","msgtype":"m.text"},"ts":1591298378000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: of course one *shouldn't* store nonsense in them","msgtype":"m.text"},"ts":1591298382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: what kind of usage do we mean here? as a building block for other rthings?","msgtype":"m.text"},"ts":1591298384000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but one *can*","msgtype":"m.text"},"ts":1591298385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: store?","msgtype":"m.text"},"ts":1591298406000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"maybe we are talking about different things?","msgtype":"m.text"},"ts":1591298417000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ystartsev: Yes.","msgtype":"m.text"},"ts":1591298418000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"strings","msgtype":"m.text"},"ts":1591298420000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in js","msgtype":"m.text"},"ts":1591298422000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people used to store binary data in them before we got arraybuffer","msgtype":"m.text"},"ts":1591298432000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: from our perspective, it doesn't make sense in duplicating the standard, or having slightly different implementations of the same thing, or maintaining two implementations in parallel","msgtype":"m.text"},"ts":1591298437000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"fwiw I am in favor of requiring those strings to be valid UTF16","msgtype":"m.text"},"ts":1591298438000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think it's the string so much as the code points","msgtype":"m.text"},"ts":1591298439000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"they're not arbitrary data; they're specifically an interop point, potentially with other languages","msgtype":"m.text"},"ts":1591298450000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for regexps","msgtype":"m.text"},"ts":1591298450000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rbuckton: i am unaware of any features that we are planning to add to js that would rely on uuid","msgtype":"m.text"},"ts":1591298456000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I'm not opposed to UUID moving to web crypto, but I do wonder if we might have to revisit this again in the future.","msgtype":"m.text"},"ts":1591298459000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"and you can't export a dynamic string, so it's not like you have to check your strings or whatever","msgtype":"m.text"},"ts":1591298469000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: a language may use a mangling scheme which is not valid utf","msgtype":"m.text"},"ts":1591298473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would be an early error","msgtype":"m.text"},"ts":1591298475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek ehhhhh","msgtype":"m.text"},"ts":1591298481000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean i doubt it exists","msgtype":"m.text"},"ts":1591298486000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek JS strings are not strings of bytes","msgtype":"m.text"},"ts":1591298489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't see a reason to limit it though","msgtype":"m.text"},"ts":1591298492000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they are strings of 16-bit values","msgtype":"m.text"},"ts":1591298493000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i will see where the rechartering of webcrypto is at the moment, and i will get back to folks","msgtype":"m.text"},"ts":1591298497000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Bakkot: people used them as byte strings","msgtype":"m.text"},"ts":1591298508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the alternative is a holistic approach to crypto in tc39 that compliments web crypto","msgtype":"m.text"},"ts":1591298510000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"rbuckton: If we put UUID in W3C how would anything in TC-39 depend on it anyway?","msgtype":"m.text"},"ts":1591298516000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek yes, but this is an interop point, not an arbitrary string","msgtype":"m.text"},"ts":1591298523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek the reason to limit it is so that the interop is \"unicode strings\" rather \"sequences of 16-bit values\"","msgtype":"m.text"},"ts":1591298530000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the strings were literally bytes, that might be reasonable, but they aren't","msgtype":"m.text"},"ts":1591298546000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bytes are a kind of reasonable interop point","msgtype":"m.text"},"ts":1591298552000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sequences of 16-bit values are not","msgtype":"m.text"},"ts":1591298559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e. I don't see how having TC-39 have it as normative optional would be different from a TC-39 use","msgtype":"m.text"},"ts":1591298582000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: As far as I can tell, we couldn't. At best, if we did need to support it we could depend on a uniform string representation of a UUID and users would have to depend on the host to give them a mechanism to generate one.","msgtype":"m.text"},"ts":1591298584000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"string or ArrayBuffer","msgtype":"m.text"},"ts":1591298593000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: what is the use case that requires uuids","msgtype":"m.text"},"ts":1591298618000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"vs some other somewhat unique value","msgtype":"m.text"},"ts":1591298645000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: I'd also be surprised since we can't add UUID to TC-39 we could add anything that depends on it","msgtype":"m.text"},"ts":1591298646000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"devsnek: I don't have one currently. I find myself often needing UUIDs in user code, and would find it acceptable if Web Crypto implemented UUID, as long as a compatible implementation is also available on Node.","msgtype":"m.text"},"ts":1591298680000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ystartsev: I'd really like to see us consider normative optional before moving to WebCrypto but obviously I'm not championing the UUID proposal","msgtype":"m.text"},"ts":1591298807000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"My experience in C# has shown that `Guid` is often heavily used in larger programs and is tied to a number of standard library features in .NET. It would be unfortunate that we wouldn't be able to define something that is consistent and broadly available across all hosts, but it isn't the end of the world.","msgtype":"m.text"},"ts":1591298816000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ystartsev: Not that you are either AFAICT, but you mentioned rechartering the group above","msgtype":"m.text"},"ts":1591298838000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"just a sec","msgtype":"m.text"},"ts":1591298857000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"no worries","msgtype":"m.text"},"ts":1591298863000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rbuckton fwiw I think that's a C3-specific thing","msgtype":"m.text"},"ts":1591298929000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*C#","msgtype":"m.text"},"ts":1591298932000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think Guid gets a lot of use in random programs in other languages","msgtype":"m.text"},"ts":1591298941000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It's also a C++/MFC thing, heavily steeped in the fact that much of the Windows registry is built around GUID/UUIDs","msgtype":"m.text"},"ts":1591298992000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i've literally never seen UUIDs used outside of databases","msgtype":"m.text"},"ts":1591299014000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: You pretty much can't write a shared Windows native library without them, though in recent years its not as obvious to the user.","msgtype":"m.text"},"ts":1591299090000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ah there's the problem","msgtype":"m.text"},"ts":1591299108000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't write shared windows libaries","msgtype":"m.text"},"ts":1591299112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or libraries","msgtype":"m.text"},"ts":1591299118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff host hooks are \"host-defined abstract operations\"","msgtype":"m.text"},"ts":1591299185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is the phrase used in the spec","msgtype":"m.text"},"ts":1591299190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think this is equivalent to \"AOs which start with the word Host\"","msgtype":"m.text"},"ts":1591299198000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should we go down the queue?","msgtype":"m.text"},"ts":1591299397000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"shu ljharb michaelficarra fwiw I am fine with writing down the thing Waldemar said and preserving that distinction","msgtype":"m.text"},"ts":1591300297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, i was about to suggest that","msgtype":"m.text"},"ts":1591300307000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what waldemar is saying he finds it useful to editorially distinguish","msgtype":"m.text"},"ts":1591300318000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that is fine with me, as long as we get guidelines for editors to apply our judgment","msgtype":"m.text"},"ts":1591300328000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't fully understand what Waldemar wants","msgtype":"m.text"},"ts":1591300356000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra he wants us to only use \"implementation-defined\" when there is not a clearly correct answer","msgtype":"m.text"},"ts":1591300384000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"still just an editorial distinction?","msgtype":"m.text"},"ts":1591300389000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1591300395000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and we can still make it host-defined?","msgtype":"m.text"},"ts":1591300403000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"with committee approval, it sounds like","msgtype":"m.text"},"ts":1591300411000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aww","msgtype":"m.text"},"ts":1591300414000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(that was chip's point)","msgtype":"m.text"},"ts":1591300436000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(not waldemar's)","msgtype":"m.text"},"ts":1591300441000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how does \"implementation-dependent\" as a phrase conjure up an image of \"there is a best answer\"","msgtype":"m.text"},"ts":1591300470000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"to me, \"dependent\" and \"defined\" are identical","msgtype":"m.text"},"ts":1591300486000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like in terms of english words","msgtype":"m.text"},"ts":1591300490000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"You folks just play word games","msgtype":"m.text"},"ts":1591300498000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Is that like words with friends?","msgtype":"m.text"},"ts":1591300504000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i mean, that's accurate","msgtype":"m.text"},"ts":1591300504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I appreciate the distinction in of \"defined\" being specifiable and \"dependent\" not","msgtype":"m.text"},"ts":1591300512000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"^ I'm okay with \"defined\" emphasizing a \"definition\" but","msgtype":"m.text"},"ts":1591300534000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"regardless of the editorial category, the current wording is very unclear to me","msgtype":"m.text"},"ts":1591300536000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok so my understanding of this proposal is doing this: https://github.com/tc39/ecma262/issues/1524","msgtype":"m.text"},"ts":1591300538000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1591300542000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1591300543000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"IMO, the editors have a specific role to play word games, that's like the point?","msgtype":"m.text"},"ts":1591300547000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/1524#issuecomment-611692464","msgtype":"m.text"},"ts":1591300553000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"this","msgtype":"m.text"},"ts":1591300554000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"rickbutton: that's a triple word score right there","msgtype":"m.text"},"ts":1591300562000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the collapse of a quantum superposition is experiment-dependent, but the result of a classical coin flip is experiment-defined","msgtype":"m.text"},"ts":1591300577000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"my question might not have been clear","msgtype":"m.text"},"ts":1591300590000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"gibson042: how are those not the same, a classical coin flip still depends on quantum effects","msgtype":"m.text"},"ts":1591300601000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"classical\" by definition excludes quantum","msgtype":"m.text"},"ts":1591300613000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1591300617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"still not clear on the difference in the terms tho","msgtype":"m.text"},"ts":1591300627000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i just think \"dependent\" and \"defined\" don't actually have different meanings conversationally, even if in C++ era languages they have a concrete meaning","msgtype":"m.text"},"ts":1591300643000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the point there is about causality","msgtype":"m.text"},"ts":1591300661000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and importantly, the spec currently does not have any normative distinction between them i'm aware of","msgtype":"m.text"},"ts":1591300669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that part I absolutely agree with","msgtype":"m.text"},"ts":1591300679000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"like engines don't choose what the cube root of a number is","msgtype":"m.text"},"ts":1591300687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: they're allowed to, tho.","msgtype":"m.text"},"ts":1591300700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean a real number","msgtype":"m.text"},"ts":1591300707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"note-takers (rricard): feel free to use point of order, that's why it's there","msgtype":"m.text"},"ts":1591300735000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"nondeterminism would be more concerning in something specified as \"implementation-defined\" than something \"implementation-dependent\"","msgtype":"m.text"},"ts":1591300765000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"michaelficarra: Bakkot: i did get the sense some delegates have a different notion of \"normative\" than narrowly scoped to \"observably different\"","msgtype":"m.text"},"ts":1591300773000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if normative expands to also capture intent","msgtype":"m.text"},"ts":1591300790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that alarms me","msgtype":"m.text"},"ts":1591300792000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't see how anything is normative if you can't write a program that observes the difference","msgtype":"m.text"},"ts":1591300798000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but both out of scope for ECMA 262 anyway","msgtype":"m.text"},"ts":1591300800000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah I don't think everyone was fully prepared to have this conversation","msgtype":"m.text"},"ts":1591300804000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: +1","msgtype":"m.text"},"ts":1591300896000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: excellent summary, thanks","msgtype":"m.text"},"ts":1591300929000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu I think it is less that there is disagreement about \"normative\", more that there are things which are not normative which people (e.g. Chip) feel should not be totally at the discretion of editors","msgtype":"m.text"},"ts":1591302671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, that's very sensible","msgtype":"m.text"},"ts":1591302693000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ystartsev: did you and keith schedule anything next week?","msgtype":"m.text"},"ts":1591308106000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Oh I thought it was gonna happen at the incubator meeting?","msgtype":"m.text"},"ts":1591309167000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: wait -- the normative optional topic? no that wasn't my intention","msgtype":"m.text"},"ts":1591309255000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Ah ok. Sure we can set something up.","msgtype":"m.text"},"ts":1591309280000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: ystartsev: okay i'll set something up","msgtype":"m.text"},"ts":1591309399000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Ok, thanks! are you gonna send us a doodles?","msgtype":"m.text"},"ts":1591309425000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591309430000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"though that site is like, as much a cpu hog as VC software","msgtype":"m.text"},"ts":1591309446000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"are there lighter doodle alternatives","msgtype":"m.text"},"ts":1591309473000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu i used <http://whenisgood.net> a lot in college :P","msgtype":"m.text"},"ts":1591309510000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"much uglier, but still very functional and super lightweight","msgtype":"m.text"},"ts":1591309537000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"shu: I have it open and it's all of Safari is using 2% of CPU? Either I need to use your VC software or somethings weird in your browser...","msgtype":"m.text"},"ts":1591309538000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: there are like 6 banner ads","msgtype":"m.text"},"ts":1591309549000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"whenisgood is great","msgtype":"m.text"},"ts":1591309552000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh, I have content blockers","msgtype":"m.text"},"ts":1591309562000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i support the hand the feeds me i guess...","msgtype":"m.text"},"ts":1591309580000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that*","msgtype":"m.text"},"ts":1591309587000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Because I hate adds more than I want to support the web lol","msgtype":"m.text"},"ts":1591309595000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"no judgment from me","msgtype":"m.text"},"ts":1591309640000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu you could always buy a Premium account for no ads :P <http://whenisgood.net/Pricing>","msgtype":"m.text"},"ts":1591309870000,"senderName":"drousso","senderId":"drousso@irc"}
]