[
{"content":{"body":"is there a reason we delegate out to Array#Symbol.iterator by default for classes w/o a constructor? just that it was easier to write the spec?","msgtype":"m.text"},"ts":1603731066000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i wouldn't expect the default constructor to differ from \"code that does the same thing\"","msgtype":"m.text"},"ts":1603734004000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also i assume you can't do `super.apply(null, arguments)` or anything, so you have to use `...` on the super call","msgtype":"m.text"},"ts":1603734069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can do things like spread the constructor via a literal generator","msgtype":"m.text"},"ts":1603734194000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it would act same as syntax but be... more complex looking","msgtype":"m.text"},"ts":1603734207000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"in reality engines wouldn't need to do those things","msgtype":"m.text"},"ts":1603734220000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a literal generator?","msgtype":"m.text"},"ts":1603734538000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"super(...(function* () {let i = 0; while (i < args.length) yield args[i++];})())","msgtype":"m.text"},"ts":1603734579000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"though i guess that implicitly relies on the generator prototype being safe","msgtype":"m.text"},"ts":1603734601000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wouldn't that be vulnerable to deleting Iterator.prototype[Symbol.iterator]?","msgtype":"m.text"},"ts":1603734604000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think array spread can ever be a safe/robust operation","msgtype":"m.text"},"ts":1603734619000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i suspect we'd need a way to use `arguments` and `.apply` with `super`","msgtype":"m.text"},"ts":1603734633000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd agree, this is a problem in node's SafeMap impl as well","msgtype":"m.text"},"ts":1603734635000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rest params are safe","msgtype":"m.text"},"ts":1603734649000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"doesn't SafeMap have a nonconfigurable prototype property tho?","msgtype":"m.text"},"ts":1603734653000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no need to use arguments","msgtype":"m.text"},"ts":1603734654000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: yea, but the super call in unsafe YOLO","msgtype":"m.text"},"ts":1603734667000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right, but the resulting call to `super` isn't","msgtype":"m.text"},"ts":1603734667000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1603734669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol you could for-loop over the args in the SafeMap constructor and build a SafeSet, and then spread that into `super` :-p","msgtype":"m.text"},"ts":1603734702000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or the same with a \"SafeArguments\" construct","msgtype":"m.text"},"ts":1603734710000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean safeset also leaks idk if that would fix it","msgtype":"m.text"},"ts":1603734755000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"in general super(...varargs) is just dangerous imo","msgtype":"m.text"},"ts":1603734768000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"until we have a way to properly spread w/o hooks","msgtype":"m.text"},"ts":1603734782000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1603734825000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if we had that, i'd be 1000% in favor of changing the default constructor","msgtype":"m.text"},"ts":1603734837000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wonder if it'd be web compatible to make spreading of an IsArray() *not* delegate to Symbol.iterator? i guess that'd mess with array subclasses tho. but maybe if the constructor is %Array%?","msgtype":"m.text"},"ts":1603734891000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"moving this to TC39 idk why my brain put this here","msgtype":"m.text"},"ts":1603734937000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]