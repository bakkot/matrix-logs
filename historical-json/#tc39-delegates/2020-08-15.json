[
{"content":{"body":"TabAtkins: i'm finishing the polyfills for `item`, and i'm curious - what should `'abc'.item(-4)` return? `'abc'.item(3)` should obv return undefined, but should `-4` return undefined, or should it be the same as `'abc'.item(-1)`? the current algorithm seems to make it equal to `'abc'.item(0)` which seems weird","msgtype":"m.text"},"ts":1597463371000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, i'd expect modulo/wrapping, or undefined, but i wouldn't expect \"everything that tries to go before 0, provides 0\"","msgtype":"m.text"},"ts":1597463405000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(oops, obv the string one would produce the empty string while the array one produced undefined, but, same question)","msgtype":"m.text"},"ts":1597463592000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: `this.len + index`","msgtype":"m.text"},"ts":1597463717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm i get what you're asking","msgtype":"m.text"},"ts":1597463730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1597463753000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the current \"relative\" math works when it the positive or negative number is within 0,length","msgtype":"m.text"},"ts":1597463766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ya","msgtype":"m.text"},"ts":1597463773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"undefined, I would expect","msgtype":"m.text"},"ts":1597463777000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you go around more than once it forces it to be 0","msgtype":"m.text"},"ts":1597463783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but if you pass \">= length\", you'll get undefined/empty string, as expected","msgtype":"m.text"},"ts":1597463785000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"see what Python does with its negative indexes","msgtype":"m.text"},"ts":1597463790000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but if you pass `<= -length`, that's not what the current spec does","msgtype":"m.text"},"ts":1597463796000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i like undefined for that","msgtype":"m.text"},"ts":1597463802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"python gives RangeError, which means we should give undefined","msgtype":"m.text"},"ts":1597463821000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(because of the `max(?, 0)`","msgtype":"m.text"},"ts":1597463821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: i agree","msgtype":"m.text"},"ts":1597463828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok, i'll make a PR to fix the spec","msgtype":"m.text"},"ts":1597463835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*IndexError is I guess what they call it","msgtype":"m.text"},"ts":1597463836000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think there is an issue about thiis?","msgtype":"m.text"},"ts":1597463845000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1597463852000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mahttps://github.com/tc39/proposal-item-method/issues/11","msgtype":"m.text"},"ts":1597463894000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have no idea where that \"ma\" came from","msgtype":"m.text"},"ts":1597463955000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aha the built spec just needs to be updated","msgtype":"m.text"},"ts":1597463973000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my internet's having trouble, but i can make a PR for that shortly","msgtype":"m.text"},"ts":1597464019000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gotta make CI enforce that git state is clean after `npm run build`","msgtype":"m.text"},"ts":1597464089000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i suppose i could add that too","msgtype":"m.text"},"ts":1597464106000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess that would involve _having_ CI, first","msgtype":"m.text"},"ts":1597464159000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is maybe a burden not worth the benefit","msgtype":"m.text"},"ts":1597464166000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: Clamping isn't the current spec.","msgtype":"m.text"},"ts":1597464171000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"maybe it is worth it though, especially once I get linting in a state where it works for proposals","msgtype":"m.text"},"ts":1597464192000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"multipage will be key for proposals","msgtype":"m.text"},"ts":1597464208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1597464213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh wait nm, the spec proposal hasn't been updated yet, ugh.","msgtype":"m.text"},"ts":1597464213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek lol","msgtype":"m.text"},"ts":1597464226000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll get to that PR at some point before the next release probably","msgtype":"m.text"},"ts":1597464238000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1597464244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(no guarantee I'll merge it before the release though)","msgtype":"m.text"},"ts":1597464256000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"TabAtkins: looking at https://tc39.es/proposal-item-method/","msgtype":"m.text"},"ts":1597464259000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"have to figure out what I'm doing about ecma402's normative-optionality before I cut a new release","msgtype":"m.text"},"ts":1597464262000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Huh, maybe it hasnt' been built yet? https://github.com/tc39/proposal-item-method/commit/5235acba371d18dcca6383c9f0e25cdbd518a7f6 fixes it to return undefined for oob","msgtype":"m.text"},"ts":1597464271000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"did you see the normative optional thing I put in the __proto__ pr","msgtype":"m.text"},"ts":1597464286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: i think it's what Bakkot said above; CI doesn't force `npm run build` to be run","msgtype":"m.text"},"ts":1597464286000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I stole it from the weakref proposal","msgtype":"m.text"},"ts":1597464293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: i'll make a PR shortly to bring in the github action that automates doing that, from the templat","msgtype":"m.text"},"ts":1597464301000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it looks nice","msgtype":"m.text"},"ts":1597464304000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could use that","msgtype":"m.text"},"ts":1597464307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, sorry, I should have been more clear","msgtype":"m.text"},"ts":1597464335000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"402 has normative-optional steps","msgtype":"m.text"},"ts":1597464340000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ohno","msgtype":"m.text"},"ts":1597464349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, danke","msgtype":"m.text"},"ts":1597464360000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hm actually I guess we do too","msgtype":"m.text"},"ts":1597464362000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because we decided to make Optionally, do X","msgtype":"m.text"},"ts":1597464373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which they accomplish like this: https://github.com/tc39/ecma402/blob/62583d85e66bcec8639153347119d3fb1b99387d/spec/numberformat.html#L704-L716","msgtype":"m.text"},"ts":1597464375000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even though X is already a host hook","msgtype":"m.text"},"ts":1597464380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: as soon as comcast stops being broken :-p","msgtype":"m.text"},"ts":1597464387000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and ecmarkup's linter does not like starting steps with indices other than 1, because I assumed the step-references thing would suffice to get rid of those","msgtype":"m.text"},"ts":1597464405000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so I will probably teach ecmarkup about this pattern as well, so that this pattern does not require you to explicitly include the offsets","msgtype":"m.text"},"ts":1597464433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'd say, [optional]","msgtype":"m.text"},"ts":1597464450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"[optional, id=x]","msgtype":"m.text"},"ts":1597464465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1597464467000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, the alternative is to introduce a new pattern and PR 402 to use that","msgtype":"m.text"},"ts":1597464472000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I kind of prefer not changing what's there","msgtype":"m.text"},"ts":1597464484000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but only kind of","msgtype":"m.text"},"ts":1597464493000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not sure yet","msgtype":"m.text"},"ts":1597464495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think it's definitely bad for there to be explicit step numbers","msgtype":"m.text"},"ts":1597464511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, any approach will result in that not being there","msgtype":"m.text"},"ts":1597464530000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"teaching ecmarkup about this pattern\" means teaching it to compute the right offsets itself when it encounters this pattern","msgtype":"m.text"},"ts":1597464564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess the question is what's best for multiple steps in a row being optional","msgtype":"m.text"},"ts":1597464598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: https://github.com/tc39/proposal-item-method/pull/18","msgtype":"m.text"},"ts":1597469207000,"senderName":"ljharb","senderId":"ljharb@irc"}
]