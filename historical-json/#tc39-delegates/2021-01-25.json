[
{"content":{"body":"is anyone in the meeting yet?","msgtype":"m.text"},"ts":1611596648000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: to change your name, you have to leave and rejoin i believe.","msgtype":"m.text"},"ts":1611597323000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do we need to fill in the table on the docs?","msgtype":"m.text"},"ts":1611597578000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"since we already have an attendance form?","msgtype":"m.text"},"ts":1611597586000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken the table in the docs is useful for the note-takers, I think","msgtype":"m.text"},"ts":1611597720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh right","msgtype":"m.text"},"ts":1611597734000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1611597736000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"akirose: force quit and reopened the ipad app, and i briefly saw the BA again, then the slides popped in, so i'm good","msgtype":"m.text"},"ts":1611597767000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"everyone does indeed look like themself, ha","msgtype":"m.text"},"ts":1611597789000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Teams doesn't seem to be working for me; is anyone else stuck on something like \"You're not on Teams yet, but you can set it up for your organization\"?","msgtype":"m.text"},"ts":1611598092000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: you have to sign in as a guest","msgtype":"m.text"},"ts":1611598106000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't even see a way to do that","msgtype":"m.text"},"ts":1611598149000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"anyway, joining via browser seems to work","msgtype":"m.text"},"ts":1611598156000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"transcription bot: `s/Baht/bot`","msgtype":"m.text"},"ts":1611598185000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"gibson042: it's possible if you're logged into your microsoft passport account it skips that screen","msgtype":"m.text"},"ts":1611598221000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"editors ready after this?","msgtype":"m.text"},"ts":1611598440000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"hmm, now Teams is showing a \"Sign in\" screen but there is no guest option","msgtype":"m.text"},"ts":1611598491000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"what the heck","msgtype":"m.text"},"ts":1611598506000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"whatever, the web app is working so I'll stick with that","msgtype":"m.text"},"ts":1611598526000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"It might work if you join as a guest using the web client","msgtype":"m.text"},"ts":1611598562000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1611598573000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I have had some informal comms with CalConnect folks, they are actively working on it, just as an FYI.","msgtype":"m.text"},"ts":1611599066000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"sffc: wrt ECMA-402 updates, we should communicate we're doing the cut of ECMA-402 for the 2021 candidate. I believe the only next additions before the cut would be DTF formatRange and perhaps the current listed PRs if they get consensus in this meeting.","msgtype":"m.text"},"ts":1611599069000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"gibson042: ^^","msgtype":"m.text"},"ts":1611599080000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter gibson042: I added a slide.  Do you want to discuss it?","msgtype":"m.text"},"ts":1611599271000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"(also, this is #tc39-delegates; we have #tc39-ecma402 for i18n discussions)","msgtype":"m.text"},"ts":1611599305000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"moving the discussion there","msgtype":"m.text"},"ts":1611599382000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"also for anyone considering taking notes, you should know that it usually does a better job than it was doing iwth Istvan","msgtype":"m.text"},"ts":1611599446000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g. it got dan almost perfectly","msgtype":"m.text"},"ts":1611599463000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"SDO\" is also the acronym for standards orgs","msgtype":"m.text"},"ts":1611600162000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"standards develop(ing|ment) organization","msgtype":"m.text"},"ts":1611600196000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"I am so happy about this channge","msgtype":"m.text"},"ts":1611600325000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"super great","msgtype":"m.text"},"ts":1611600362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"omg I'm so excited about this","msgtype":"m.text"},"ts":1611600446000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this is awesome","msgtype":"m.text"},"ts":1611600452000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Editor group has done amazing stuff","msgtype":"m.text"},"ts":1611600802000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"That","msgtype":"m.text"},"ts":1611600830000,"senderName":"JaseW","senderId":"JaseW@irc"},
{"content":{"body":"That's great news Bakkot","msgtype":"m.text"},"ts":1611600906000,"senderName":"JaseW","senderId":"JaseW@irc"},
{"content":{"body":"btw a lot of these changes will apply to ECMA-402 as well, since they use ecmarkup","msgtype":"m.text"},"ts":1611600992000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"littledan ystartsev we are, too!","msgtype":"m.text"},"ts":1611601136000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"as editors, we spend a decent amount of time navigating the spec and we were constantly feeling the pains addressed by the SDO re-org","msgtype":"m.text"},"ts":1611601207000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I just noticed the reflector issue link in the room title is old. Current meeting is issue 340.","msgtype":"m.text"},"ts":1611601442000,"senderName":"rpamely","senderId":"rpamely@irc"},
{"content":{"body":"rpamely: thanks, fixed","msgtype":"m.text"},"ts":1611601639000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"üëè","msgtype":"m.text"},"ts":1611602279000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"the department of meta","msgtype":"m.text"},"ts":1611602431000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ok so `(console.log(0), null)[console.log(1)] = console.log(2);` logs 0,1,2 in my browser - what order does the current spec dictate? (Bakkot, ystartsev)","msgtype":"m.text"},"ts":1611603246000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb it dictates 0, 1, throw, I believe","msgtype":"m.text"},"ts":1611603267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'd kind of expect 0, throw","msgtype":"m.text"},"ts":1611603269000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1611603270000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not totally sure; might be 0, throw","msgtype":"m.text"},"ts":1611603277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, I was right the first time","msgtype":"m.text"},"ts":1611603335000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's part of why it's so painful","msgtype":"m.text"},"ts":1611603345000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because you look at the object, then the key, then the object again","msgtype":"m.text"},"ts":1611603352000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is what you already have to do for `o[k]` in case o is a proxy or has a setter on o[k], no?","msgtype":"m.text"},"ts":1611603417000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i guess in those two cases you'd have to have the RHS first","msgtype":"m.text"},"ts":1611603432000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry, so, current spec dictates:","msgtype":"m.text"},"ts":1611603466000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"object, key, object, rhs, object+key+rhs","msgtype":"m.text"},"ts":1611603479000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you do have to check for proxies or setters or whatever, but those happen as part of performing the assingment","msgtype":"m.text"},"ts":1611603496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which happens after evaluating the HRS","msgtype":"m.text"},"ts":1611603500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*RHS","msgtype":"m.text"},"ts":1611603504000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1611603543000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so this would just become \"object, key, rhs, all\"","msgtype":"m.text"},"ts":1611603561000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1611603606000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k, thanks","msgtype":"m.text"},"ts":1611603685000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry for the mixup earlier","msgtype":"m.text"},"ts":1611603701000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"the chairing transition was a bit rough","msgtype":"m.text"},"ts":1611603725000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I think the note taker has stopped","msgtype":"m.text"},"ts":1611603795000,"senderName":"JaseW","senderId":"JaseW@irc"},
{"content":{"body":"and it's back","msgtype":"m.text"},"ts":1611603807000,"senderName":"JaseW","senderId":"JaseW@irc"},
{"content":{"body":"JaseW refresh","msgtype":"m.text"},"ts":1611603808000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1611603810000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb in fact it was even worse than that, now that I've looked","msgtype":"m.text"},"ts":1611603815000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it was, evaluate obj, evaluate prop, coerce obj to object, coerce prop to string, evaluate RHS, perform assignment","msgtype":"m.text"},"ts":1611603830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and now?","msgtype":"m.text"},"ts":1611603836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"now it's just evaluate object, evaluate prop, coerce prop to string, evaluate RHS, perform assignment","msgtype":"m.text"},"ts":1611603851000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the \"evaluate prop\" and \"coerce prop to string\" become adjacent","msgtype":"m.text"},"ts":1611603863000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^ yeah that is the main change","msgtype":"m.text"},"ts":1611603914000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and \"coerce obj to object\" happens as part of \"perform assignment\"","msgtype":"m.text"},"ts":1611603921000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1611603926000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"46!","msgtype":"m.text"},"ts":1611603956000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, ToObject basically does the same","msgtype":"m.text"},"ts":1611603957000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"there is a more in depth write up in my test repo for it","msgtype":"m.text"},"ts":1611604004000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sffc: I got the thumbs up on #500","msgtype":"m.text"},"ts":1611604609000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sorry for the delay and thanks for the patience","msgtype":"m.text"},"ts":1611604615000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartzev: thanks!","msgtype":"m.text"},"ts":1611604902000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"rbuckton: yay, thanks for presenting","msgtype":"m.text"},"ts":1611605030000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1611605040000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton Someone on the JSC team ask a question about materializing \"indices\" and I didn't know the answer.","msgtype":"m.text"},"ts":1611608993000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"rbuckton With the latest, just approved, version of the spec, is there a reason we don't set 'indices' to 'undefined' when the 'd' flag isn't present?","msgtype":"m.text"},"ts":1611609079000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I haven't run any perf tests on that variant and I don't remember it being discuss as part of the new option discussion.","msgtype":"m.text"},"ts":1611609124000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"The team member noted that 'indices' has a different creation semantic than the 'groups' property.","msgtype":"m.text"},"ts":1611609173000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: No particular reason, other than not to have it if its not requested. If we unconditionally create the property (like we do for groups), and leave it as `undefined`, I would have no issue.","msgtype":"m.text"},"ts":1611609923000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton Okay.  I can run perf tests to see if there is any issue.  I'll try to get to that by the end of the meeting.","msgtype":"m.text"},"ts":1611609979000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"+100 to ljharb 's point on the queue","msgtype":"m.text"},"ts":1611610372000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I get the same impression than Waldemar, same issue with Trusted Types!","msgtype":"m.text"},"ts":1611611191000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"you must own/control the whole app, the whole code running for the app to make this any useful","msgtype":"m.text"},"ts":1611611224000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"I don't think Mark's proposed constraint makes sense. I think it would be a very unreasonable constraint on the development of the JS standard library","msgtype":"m.text"},"ts":1611611374000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I agree that checking whether a template tag is literal is a rather low-level property","msgtype":"m.text"},"ts":1611611388000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"From Google‚Äôs experience, controling the whole app is expected","msgtype":"m.text"},"ts":1611611481000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right! but majority of apps are not like that! anything using anything from NPM is automatically in the other category!","msgtype":"m.text"},"ts":1611611540000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"I‚Äôm not sure I agree","msgtype":"m.text"},"ts":1611611572000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"The point isn‚Äôt to guard against a truly malicious 3p script running on the page","msgtype":"m.text"},"ts":1611611602000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It‚Äôs to guard against accidental usage","msgtype":"m.text"},"ts":1611611613000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't think there's agreement that that's not the point","msgtype":"m.text"},"ts":1611611668000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Having `makeSafeUrl(codeIThoughtWasStaticButIsActuallyDynamic)` is a wholey different attack than `makeSafeUrl'https://im.actually.static'`","msgtype":"m.text"},"ts":1611611707000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Potecting against a page that‚Äôs exposed `eval`, you‚Äôre entire app is insecure, their‚Äôs no fixing that.","msgtype":"m.text"},"ts":1611611738000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"there's sort of an interesting parallel between the shape of Mark's argument and previous arguments against SES-motivated features: both allege that the scenario where the feature is useful is impractical","msgtype":"m.text"},"ts":1611611746000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jridgewell: there's tons of ways to protect against eval","msgtype":"m.text"},"ts":1611611761000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I wonder if we could dig into this practicality and think about how to assess it more broadly","msgtype":"m.text"},"ts":1611611762000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jridgewell: eval doesn't break closures.","msgtype":"m.text"},"ts":1611611767000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: +1","msgtype":"m.text"},"ts":1611611776000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jridgewell I still pretty much agree with waldemar","msgtype":"m.text"},"ts":1611611781000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you are not concerned about malicious code, checking for \"it's frozen and has a raw property\" is good enough","msgtype":"m.text"},"ts":1611611792000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you are concerned about malicious code, this doesn't help","msgtype":"m.text"},"ts":1611611798000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is a sort of integrity feature. It gets exactly what you want in terms of \"did this really come from syntax\". A bunch of people asked me if this feature is related to my topic later, about tests like Map.isMap, and my initial reaction was \"no\" but now I've sort of come around to, they are kind of logically similar, in letting you check whether something really is something","msgtype":"m.text"},"ts":1611611888000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jridgewell: Module blocks are like module specifiers, not namespace objects","msgtype":"m.text"},"ts":1611612462000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"If it was a _real_ ModuleSpecifier, you could do this... (though I'm unsure as to whether this is a good idea or not)","msgtype":"m.text"},"ts":1611612785000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611612786000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"import { x } from module {","msgtype":"m.text"},"ts":1611612786000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  export const x = 1;","msgtype":"m.text"},"ts":1611612786000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1611612786000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611612786000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I didn't realize you needed to import them.","msgtype":"m.text"},"ts":1611612814000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rbuckton: makes sense to me","msgtype":"m.text"},"ts":1611613070000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"kind of seems like if we had `class.foo = bar` syntax we wouldn't have to use `this`","msgtype":"m.text"},"ts":1611613872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think ClassName suffices, still, kind of like kevin","msgtype":"m.text"},"ts":1611614005000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that was the conclusion from the subclassing hazard discussion","msgtype":"m.text"},"ts":1611614018000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it doesn't follow from that that we should *ban* `this`; i'm just saying ron's implication in the other direction that `this` is the natural way to assign static properties","msgtype":"m.text"},"ts":1611614094000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"isn't that compelling","msgtype":"m.text"},"ts":1611614103000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i agree that repeating the class name is the status quo, and is \"fine\"","msgtype":"m.text"},"ts":1611614182000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i also think repeating it sucks, and that's why i liked the `class.` proposal","msgtype":"m.text"},"ts":1611614191000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but we could go with \"repeat the class name\" here and still do `class.` later","msgtype":"m.text"},"ts":1611614210000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1611614232000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there are weird inconsistencies that cut both ways","msgtype":"m.text"},"ts":1611614242000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like Ron i feel _really_ strongly that vars shouldn't hoist out","msgtype":"m.text"},"ts":1611614248000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"pls no","msgtype":"m.text"},"ts":1611614249000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is 50% idealogical and 50% a very practical concern that this straight-up doesn't work for half the code I wrote, which has `await`","msgtype":"m.text"},"ts":1611614296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I really think that this makes sense to treat like static field initializers","msgtype":"m.text"},"ts":1611614340000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"both in terms of scoping and ordering","msgtype":"m.text"},"ts":1611614354000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Bakkot: you write a lot of code that sets static properties on a class and uses `await`?","msgtype":"m.text"},"ts":1611614362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, the proposal does not match filed initializers","msgtype":"m.text"},"ts":1611614364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb of the code I wrote that sets static properties on a class, 50% uses initializers","msgtype":"m.text"},"ts":1611614381000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting, k","msgtype":"m.text"},"ts":1611614389000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1611614393000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"50% uses await","msgtype":"m.text"},"ts":1611614396000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1611614398000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: Well, it's fairly close; I'd prefer that it match entirely but I can buy the motivation for the changes","msgtype":"m.text"},"ts":1611614399000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sorry, too many words going on","msgtype":"m.text"},"ts":1611614399000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what about this proposal doesn't match field initializers?","msgtype":"m.text"},"ts":1611614402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan this proposal is that static {} runs last, regardless of where it is relative to initializers","msgtype":"m.text"},"ts":1611614408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, I'd be up for changing that","msgtype":"m.text"},"ts":1611614417000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan fwiw the major upshot of this conversation is that I feel like static initializers should inherit the ability to `await`","msgtype":"m.text"},"ts":1611614449000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well... I'm happy that we designed them to behave like little methods instead","msgtype":"m.text"},"ts":1611614470000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that was a deliberate design","msgtype":"m.text"},"ts":1611614477000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"mostly to match regular fields","msgtype":"m.text"},"ts":1611614485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where it makes a lot of sense","msgtype":"m.text"},"ts":1611614490000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"makes much less sense for static methods","msgtype":"m.text"},"ts":1611614494000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er, static initalizers","msgtype":"m.text"},"ts":1611614500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: notes, `a weight` should be `await` most often in the bot :-p","msgtype":"m.text"},"ts":1611614617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in a phrase like \"allow a weight to carry over\" you can hardly blame it lol","msgtype":"m.text"},"ts":1611614711000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol true","msgtype":"m.text"},"ts":1611614720000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I made that change a minute ago, just doesn't work if it ends up doing the post when it only has the `a` ready","msgtype":"m.text"},"ts":1611614756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah true","msgtype":"m.text"},"ts":1611614762000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it was not underspecified. It has been specified as undefined the whole time","msgtype":"m.text"},"ts":1611614768000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but the good thing is, the class features specs are all rebased and in great shape thanks to Ms2ger so this is more clear","msgtype":"m.text"},"ts":1611614802000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"you can see the spec at https://arai-a.github.io/ecma262-compare/?pr=1668","msgtype":"m.text"},"ts":1611614824000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh good","msgtype":"m.text"},"ts":1611614838000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"allowing multiple interleaving blocks in order seems the most JS-y thing","msgtype":"m.text"},"ts":1611614859000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(it = new.target in static field initializers)","msgtype":"m.text"},"ts":1611614864000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i see no good reason to limit to 1","msgtype":"m.text"},"ts":1611614864000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: +1","msgtype":"m.text"},"ts":1611614869000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"would they interleave with static initalizers?","msgtype":"m.text"},"ts":1611614876000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(presumably yes?)","msgtype":"m.text"},"ts":1611614879000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1611614879000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think that's the point yes","msgtype":"m.text"},"ts":1611614881000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"top-down order seems pretty important","msgtype":"m.text"},"ts":1611614886000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh god we've lost note taking","msgtype":"m.text"},"ts":1611615016000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would `var`s be shared?","msgtype":"m.text"},"ts":1611615254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would they be visible to computed property names?","msgtype":"m.text"},"ts":1611615264000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'd hope no","msgtype":"m.text"},"ts":1611615295000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: yeah, i also hope each block would have its own var scope as the single initialized block does now","msgtype":"m.text"},"ts":1611615502000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"woohoo!","msgtype":"m.text"},"ts":1611615885000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sorry, I'll help with notes tomorrow >_<","msgtype":"m.text"},"ts":1611615973000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the bot's unedited output definitely has some of the character of gpt2","msgtype":"m.text"},"ts":1611617384000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where it's _almost_ coherent and _almost_ topical but it's also complete gibberish","msgtype":"m.text"},"ts":1611617406000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hubs is way shinier than before","msgtype":"m.text"},"ts":1611618066000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"might just be a UI refresh but I like it","msgtype":"m.text"},"ts":1611618076000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]