[
{"content":{"body":"`let value = do { let t; for(const v of values) { if(pred(v)) { t=v; break; } }; t}`","msgtype":"m.text"},"ts":1590105697000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't hate having to do that","msgtype":"m.text"},"ts":1590105707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i much prefer using the completion value","msgtype":"m.text"},"ts":1590105712000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"vs `let value = do { for(const v of values) if(pred(v)) break with v; };`","msgtype":"m.text"},"ts":1590105716000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"actually break with and continue with are good ideas","msgtype":"m.text"},"ts":1590105745000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1590105771000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no no wait","msgtype":"m.text"},"ts":1590105775000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"loops complete with undefined unless you use `break with`","msgtype":"m.text"},"ts":1590105789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"continue with makes no sense pretend i didn't say that","msgtype":"m.text"},"ts":1590105808000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`break with` is at least explicit","msgtype":"m.text"},"ts":1590105816000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems we have options","msgtype":"m.text"},"ts":1590105845000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"options are kind of the problem because we don't have a good way to choose between them","msgtype":"m.text"},"ts":1590105872000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"options which aren't blocking each other","msgtype":"m.text"},"ts":1590105896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am hoping there is a minimal subset which just bans everything people disagree about and is still useful for some cases","msgtype":"m.text"},"ts":1590105906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there a demand for `return` to refer to the function scope though?","msgtype":"m.text"},"ts":1590105941000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1590105946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's my primary use case","msgtype":"m.text"},"ts":1590105954000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh.","msgtype":"m.text"},"ts":1590105957000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1590105976000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would be exceedingly confusing for `return` to not mean that imo","msgtype":"m.text"},"ts":1590106002000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to me it just seems","msgtype":"m.text"},"ts":1590106057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have some logic","msgtype":"m.text"},"ts":1590106060000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"depends on how you're conceiving of this magical statement-to-expression space","msgtype":"m.text"},"ts":1590106077000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you refactor it to use a do expression","msgtype":"m.text"},"ts":1590106079000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"now all of a sudden you have to restructure your control flow","msgtype":"m.text"},"ts":1590106095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because you can use break/continue/return inside it","msgtype":"m.text"},"ts":1590106101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can't*","msgtype":"m.text"},"ts":1590106115000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm that's not a bad point","msgtype":"m.text"},"ts":1590106137000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ugh the further this discussion goes on though, the more unsure I become about the feature","msgtype":"m.text"},"ts":1590106172000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, I love \"everything's an expression\" but","msgtype":"m.text"},"ts":1590106190000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does that imply that I actually have a convincing use case for \"a block that turns all your imperative logic into an expression when all is said and done\"?","msgtype":"m.text"},"ts":1590106230000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i would use it all over the place to structure things","msgtype":"m.text"},"ts":1590106251000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's like the big brother of empty lines between things","msgtype":"m.text"},"ts":1590106265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as like, local functions without call overhead?","msgtype":"m.text"},"ts":1590106298000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean like","msgtype":"m.text"},"ts":1590106306000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when you have a bunch of lines of code, you generally group them with empty lines","msgtype":"m.text"},"ts":1590106325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"often in rust people also scope them using block expressions","msgtype":"m.text"},"ts":1590106340000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i really like that pattern","msgtype":"m.text"},"ts":1590106343000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait what why","msgtype":"m.text"},"ts":1590106352000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why waste syntax if it's no better than newlines","msgtype":"m.text"},"ts":1590106367000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh ,you're saying like","msgtype":"m.text"},"ts":1590106391000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"irc needs multiline support","msgtype":"m.text"},"ts":1590106408000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"there's no need for this to go out of scope yet but doing so clarifies the fact that I'm only using it *right here*\"","msgtype":"m.text"},"ts":1590106434000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1590106447000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its just clean","msgtype":"m.text"},"ts":1590106454000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you end up at the end with just the variables you're actually using","msgtype":"m.text"},"ts":1590106461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then said \"paragraph\" or \"stanza\" or whatever you wanna call it _has_ a result","msgtype":"m.text"},"ts":1590106470000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh eah","msgtype":"m.text"},"ts":1590106477000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1590106479000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they produce results","msgtype":"m.text"},"ts":1590106481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so that'd give the block purpose in Rust","msgtype":"m.text"},"ts":1590106492000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but in JS we'd need a new thing","msgtype":"m.text"},"ts":1590106497000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1590106499000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah in rust you can do `let x = { 5 };`","msgtype":"m.text"},"ts":1590106504000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that is, while abstract, not unconvincing","msgtype":"m.text"},"ts":1590106513000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1590106522000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rust has way better semantics around that though","msgtype":"m.text"},"ts":1590106532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so then even like","msgtype":"m.text"},"ts":1590106547000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/57811604.png","msgtype":"m.text"},"ts":1590106605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"const result  = do {","msgtype":"m.text"},"ts":1590106657000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"  const myNamedBoolArg = true;","msgtype":"m.text"},"ts":1590106657000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"  foo(data, myNamedBoolArg);","msgtype":"m.text"},"ts":1590106657000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1590106657000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah you could do that","msgtype":"m.text"},"ts":1590106672000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"kinda superfluous but yeah, documents itself, perhaps","msgtype":"m.text"},"ts":1590106689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"honestly the most op pattern is if expressions","msgtype":"m.text"},"ts":1590106751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we could replace do expressions with `if (true) {}` if expressions :P","msgtype":"m.text"},"ts":1590106795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I kind of resent Rust's lack of ternary but yeah, if you have any nontrivial branches then if exprs are pretty darn great","msgtype":"m.text"},"ts":1590106798000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1590106810000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"anyway so: does anyone here _object_ to, do expressions, where you cannot have your last statement be a loop or declaration, and break/return/continue are banned?","msgtype":"m.text"},"ts":1590107025000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I know this does not meet devsnek's use case","msgtype":"m.text"},"ts":1590107030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but hope that it is useful enough anyway","msgtype":"m.text"},"ts":1590107042000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if I represented myself I would object","msgtype":"m.text"},"ts":1590107084000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"on what basis?","msgtype":"m.text"},"ts":1590107141000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"on not having control flow","msgtype":"m.text"},"ts":1590107152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I know it doesn't meet your use case; is your position that it is not worth having if it does not meet your use case?","msgtype":"m.text"},"ts":1590107164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm imagining a lot of humans would want to use it","msgtype":"m.text"},"ts":1590107180000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not like adding this without allowing break/return prevents relaxing that restriction later","msgtype":"m.text"},"ts":1590107184000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"given my refactoring point above","msgtype":"m.text"},"ts":1590107188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so I'm worried it wouldn't be useful enough without control flow","msgtype":"m.text"},"ts":1590107202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I personally would still find it very useful","msgtype":"m.text"},"ts":1590107260000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe someone with a zillion followers on twitter can make a poll","msgtype":"m.text"},"ts":1590107275000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think it's worth presenting","msgtype":"m.text"},"ts":1590107281000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think most of the pipeline proposal's use cases would be met by this, also","msgtype":"m.text"},"ts":1590107282000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh god not a Twitter poll","msgtype":"m.text"},"ts":1590107297000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems useful for pipeline yeah","msgtype":"m.text"},"ts":1590107308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also to do `let x = try { foo() } catch { null }` which is very common","msgtype":"m.text"},"ts":1590107320000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ime","msgtype":"m.text"},"ts":1590107329000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if we get do expressions do we drop the throw expression proposal","msgtype":"m.text"},"ts":1590107351000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tbh if we go back to the pipeline discussion though and the refactorings TabAtkins was showing above, I really do think the `#`-chasing leads to comprehensibility","msgtype":"m.text"},"ts":1590107364000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if the spec requires the hash to be bright red when displayed","msgtype":"m.text"},"ts":1590107406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":stare:","msgtype":"m.text"},"ts":1590107432000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: I'd feel better about it if pipelines advance","msgtype":"m.text"},"ts":1590107456000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ... why?","msgtype":"m.text"},"ts":1590107465000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but like I said I don't think I'll actually block either way","msgtype":"m.text"},"ts":1590107469000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm mostly interested in this as an _alternative_ to pipelines","msgtype":"m.text"},"ts":1590107481000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because people won't use control flow in them","msgtype":"m.text"},"ts":1590107481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh interesting","msgtype":"m.text"},"ts":1590107489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I guess that was mentioned above","msgtype":"m.text"},"ts":1590107522000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like instead of `x = a |> b(0, #) |> await #` ro whatever, you'd write `x = do { let $=a; $=b(0, #); await #}`","msgtype":"m.text"},"ts":1590107532000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/ro whatever/or whatever/","msgtype":"m.text"},"ts":1590107540000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also s/#/$/g","msgtype":"m.text"},"ts":1590107547000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I kinda thought avoiding locals was the point","msgtype":"m.text"},"ts":1590107569000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"are there real world examples of that","msgtype":"m.text"},"ts":1590107573000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"HOC with await or something","msgtype":"m.text"},"ts":1590107596000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(not the point of the proposal but the reason why existing approaches don't suffice, I mean)","msgtype":"m.text"},"ts":1590107627000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling I think the main reason for avoiding locals is so that you can remain in expression position, and also not pollute your local scope","msgtype":"m.text"},"ts":1590107649000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"some people (pointfree people) have a principled objection to locals, but I don't think that's the dominant party","msgtype":"m.text"},"ts":1590107669000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm okay","msgtype":"m.text"},"ts":1590107693000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I do see your point","msgtype":"m.text"},"ts":1590107699000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: `console.log(filter(parse(await fetch(extractRemoteUrl(await readDB(makeQuery('some query'))))));` is the sort of thing I write a lot","msgtype":"m.text"},"ts":1590107979000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, obviously I break it up into multiple lines with locals","msgtype":"m.text"},"ts":1590107989000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but you get the idea","msgtype":"m.text"},"ts":1590107991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not HOCs or whatever","msgtype":"m.text"},"ts":1590107994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just normal chasing data around","msgtype":"m.text"},"ts":1590107998000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is that code real","msgtype":"m.text"},"ts":1590108023000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it looks *plausible*, at least","msgtype":"m.text"},"ts":1590108031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've written code like that ^_^","msgtype":"m.text"},"ts":1590108036000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've never seen code like that","msgtype":"m.text"},"ts":1590108037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think","msgtype":"m.text"},"ts":1590108039000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is not literally copied from one of the proprietary code bases I work on, no","msgtype":"m.text"},"ts":1590108043000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if things like it exist I'll believe you","msgtype":"m.text"},"ts":1590108060000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it is very much the sort of thing I write in them, except I would make intermediate variables so a human could read it","msgtype":"m.text"},"ts":1590108061000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my python instincts these days would probably force me to break that up into multiple assignments, but still","msgtype":"m.text"},"ts":1590108063000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I just have never seen them so i would like to get a sense of what real world code looks like","msgtype":"m.text"},"ts":1590108132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"agree that it looks plausible","msgtype":"m.text"},"ts":1590108618000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: are you taking up do expressions again","msgtype":"m.text"},"ts":1590108626000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(regardless of whether it'd get past code review, tehe)","msgtype":"m.text"},"ts":1590108647000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: maybe","msgtype":"m.text"},"ts":1590108730000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1590108740000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: mostly I would like them discussed if we talk about pipelines again","msgtype":"m.text"},"ts":1590108748000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i do not think pipelines are a good idea currently","msgtype":"m.text"},"ts":1590108760000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because I think they are better than pipelines and also mean you don't need pipelines","msgtype":"m.text"},"ts":1590108762000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1590108778000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: what do you think about control flow in do expressions","msgtype":"m.text"},"ts":1590109028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"control flow that breaks out of do expressions?","msgtype":"m.text"},"ts":1590109099000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like a return in a do expression?","msgtype":"m.text"},"ts":1590109124000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1590109135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"return returns the outer function that is","msgtype":"m.text"},"ts":1590109147000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems like a bad idea","msgtype":"m.text"},"ts":1590109213000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1590109226000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what's the motivation for having that behavior?","msgtype":"m.text"},"ts":1590109247000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh i see some backlog, you're worried about a refactoring hazard?","msgtype":"m.text"},"ts":1590109336000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1590109341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean i also have a use case for returning in them","msgtype":"m.text"},"ts":1590109349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but more generally the refactoring hazard seems annoying","msgtype":"m.text"},"ts":1590109356000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can imagine code like `let x; try { x = z() } catch { break }` exists","msgtype":"m.text"},"ts":1590109398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or similar with if/else","msgtype":"m.text"},"ts":1590109402000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my opinion is those patterns are more harm than good","msgtype":"m.text"},"ts":1590109437000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"those patterns = to expect to wrap them in an expression and keep the same behavior","msgtype":"m.text"},"ts":1590109463000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah i mean","msgtype":"m.text"},"ts":1590109474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"adding a block around code doesn't change control flow","msgtype":"m.text"},"ts":1590109481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't get why adding `let x = do` at the front of the block is so controversial","msgtype":"m.text"},"ts":1590109504000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is that comparable here?","msgtype":"m.text"},"ts":1590109505000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"aside from the break inside while loop head","msgtype":"m.text"},"ts":1590109524000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i get why that is weird","msgtype":"m.text"},"ts":1590109527000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/while loop/loop/","msgtype":"m.text"},"ts":1590109551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because in an algol-like language there are certain (fairly strong imo) properties that tend to hold of statements and expressions","msgtype":"m.text"},"ts":1590109578000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and one of them is generally that expressions evaluate beginning to end without affecting the control flow of the surrounding context, whatever that is","msgtype":"m.text"},"ts":1590109609000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i've never used algol","msgtype":"m.text"},"ts":1590109614000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sometimes you have exceptions that aren't too confusing","msgtype":"m.text"},"ts":1590109615000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, c-like then","msgtype":"m.text"},"ts":1590109624000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1590109628000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't see any strong reason to have a separation","msgtype":"m.text"},"ts":1590109653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"dunno what to tell ya","msgtype":"m.text"},"ts":1590109661000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"most people i think do","msgtype":"m.text"},"ts":1590109665000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like some things obviously don't make sense as expressions","msgtype":"m.text"},"ts":1590109666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like variable declarations","msgtype":"m.text"},"ts":1590109693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what property do you get from strong separation of expressions and control flow","msgtype":"m.text"},"ts":1590109713000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the property of not having to think about control flow if i'm reading an expression position","msgtype":"m.text"},"ts":1590109745000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"anywho gotta run","msgtype":"m.text"},"ts":1590109773000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"aight","msgtype":"m.text"},"ts":1590109776000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fwiw i think the property i like is a little stronger than the expression/statement split, it's more about having clear scopes where control flow has effect","msgtype":"m.text"},"ts":1590109877000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"e.g. break doesn't work in expression contexts now, to suddenly make it work is a very big ask","msgtype":"m.text"},"ts":1590109905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I can agree insofar as control flow _within_ seems okay, it's control flow _through_ that gives pause","msgtype":"m.text"},"ts":1590109905000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1590109910000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"put another way, control flow in JS is delimited in certain ways today","msgtype":"m.text"},"ts":1590109926000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"to change that is a *huge* ask and break in mental model that i'd fight against","msgtype":"m.text"},"ts":1590109941000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in languages with undelimited continuations, that shit is hard to wrap your head around for similar reasons","msgtype":"m.text"},"ts":1590109958000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't quite understand what that mental model is","msgtype":"m.text"},"ts":1590109959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and why people end up using delimited continuations","msgtype":"m.text"},"ts":1590109964000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe i'll read some algol stuff","msgtype":"m.text"},"ts":1590109967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't know if algol is a good starting point","msgtype":"m.text"},"ts":1590109990000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i just really don't understand the separation of statements and expressions","msgtype":"m.text"},"ts":1590110013000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i'm pretty sure you have a mental model of what return does, right? the mental experiment i recommend is 1) ask if you also think presence of call/cc or setjmp/longjmp make reasoning about return hard, and 2) if you find the difficulty comparable, but to a lesser degree, with allowing returns in expressions","msgtype":"m.text"},"ts":1590110077000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what is cc","msgtype":"m.text"},"ts":1590110117000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/Call-with-current-continuation","msgtype":"m.text"},"ts":1590110139000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one of the other major paradigms for control flow","msgtype":"m.text"},"ts":1590110149000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's probably not a good example, return-in-expressions aren't undelimited","msgtype":"m.text"},"ts":1590110167000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well i will say","msgtype":"m.text"},"ts":1590110168000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"look at shift/reset instead","msgtype":"m.text"},"ts":1590110170000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"reasoning about longjmp is very difficult","msgtype":"m.text"},"ts":1590110177000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it funny that I know about call/cc but am having to look up longjmp","msgtype":"m.text"},"ts":1590110437000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I mean it's sort of what I was expecting but still)","msgtype":"m.text"},"ts":1590110519000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i knew about longjmp but not call/cc","msgtype":"m.text"},"ts":1590110544000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"call/cc is weird","msgtype":"m.text"},"ts":1590110547000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i find call/cc and longjmp to be a completely different universe of complexity compared to returning from inside a do expression","msgtype":"m.text"},"ts":1590110577000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"call/cc is yield on steroids, basically","msgtype":"m.text"},"ts":1590110610000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"idk why all the websites have to make it sound so complex","msgtype":"m.text"},"ts":1590110624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well i mean it is complex","msgtype":"m.text"},"ts":1590110633000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i feel like these concepts are always explained in the most difficult terms instead of the easiest terms","msgtype":"m.text"},"ts":1590110657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in any case, call/cc and longjmp are both dynamic","msgtype":"m.text"},"ts":1590110694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and involve non-local control flow","msgtype":"m.text"},"ts":1590110722000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't really see a comparison between them and allowing break/return/continue inside do expressions","msgtype":"m.text"},"ts":1590110747000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hah, good old Oleg","msgtype":"m.text"},"ts":1590111013000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/Call-with-current-continuation#Criticism","msgtype":"m.text"},"ts":1590111014000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"call/cc makes sense if you don't use the word \"continuation\"","msgtype":"m.text"},"ts":1590111030000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its like when people explain monads","msgtype":"m.text"},"ts":1590111073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I usually just think of \"continuation\" just as \"return target\" but then it makes \"current continuation\" a bit more confusing","msgtype":"m.text"},"ts":1590111636000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i posted the block-expression control flow vs call/cc thing in a programming language design discord","msgtype":"m.text"},"ts":1590111684000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people are angry that they would be equated","msgtype":"m.text"},"ts":1590111779000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i did not equate them","msgtype":"m.text"},"ts":1590112250000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't understand what the comparison is","msgtype":"m.text"},"ts":1590112303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the point was a broad one: you have expectations when reading \"return\" of what it does, and those expectations must be thrown out when you see setjmp/longjmp","msgtype":"m.text"},"ts":1590112330000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"similarly, to a lesser degree, people's expectations of \"return\" will need to be re-calibrated if they are allowed in do expressions in JS","msgtype":"m.text"},"ts":1590112363000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"aside from \"i don't expect there to be a return value in this syntactic position (because that's true of any statement)\" what is the expectation there","msgtype":"m.text"},"ts":1590112382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as i said before, that expressions do not affect control flow","msgtype":"m.text"},"ts":1590112396000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(wow I forgot that you can't throw from a ternary in JS)","msgtype":"m.text"},"ts":1590112431000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"throw expressions is a proposal","msgtype":"m.text"},"ts":1590112445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: out of curiosity have you used any languages with this feature before","msgtype":"m.text"},"ts":1590112473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like rust or smth","msgtype":"m.text"},"ts":1590112477000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have used rust, but an earlier version and not since 1.0 i don't think","msgtype":"m.text"},"ts":1590112515000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like I was saying though, I think it's very different when \"everything is a statement\"","msgtype":"m.text"},"ts":1590112521000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"dammit","msgtype":"m.text"},"ts":1590112528000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"s/statement/expression/","msgtype":"m.text"},"ts":1590112532000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also i'm curious about if yield and await violate your expectations","msgtype":"m.text"},"ts":1590112533000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like, the thing that creates confusion or weird expectations is the do block","msgtype":"m.text"},"ts":1590112556000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we have this barrier between worlds and it's tricky to decide upon its properties","msgtype":"m.text"},"ts":1590112573000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if there's no barrier, there's nothing to be confused about","msgtype":"m.text"},"ts":1590112584000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i just don't understand this expectation or why maintaining it matters","msgtype":"m.text"},"ts":1590112590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think i've ever seen a rust user be confused about it anyway","msgtype":"m.text"},"ts":1590112631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe that's because they're too busy being confused about lifetimes","msgtype":"m.text"},"ts":1590112639000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's nothing _to be confused about_ in Rust","msgtype":"m.text"},"ts":1590112648000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1590112674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`do { ... }` raises the question of \"just how much is this thing like a function scope\"","msgtype":"m.text"},"ts":1590112681000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't understand why it does","msgtype":"m.text"},"ts":1590112689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/aJYvqDl4/x.rs","msgtype":"m.text"},"ts":1590112715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so here's an example from rust","msgtype":"m.text"},"ts":1590112729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yield and await do not violate my expectations, since they produce values usable as expressions","msgtype":"m.text"},"ts":1590112773000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"they don't have to","msgtype":"m.text"},"ts":1590112783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they might never return","msgtype":"m.text"},"ts":1590112785000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: if you shorten it to that extent then it could go either way though","msgtype":"m.text"},"ts":1590112786000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: right?","msgtype":"m.text"},"ts":1590112794000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"how is that control flow different","msgtype":"m.text"},"ts":1590112809000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"than return and break, which transfer control and do not return a value?","msgtype":"m.text"},"ts":1590112839000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yield and await both transfer control","msgtype":"m.text"},"ts":1590112856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yield and return abstract their control flow in such a way that should execution resume, you're back at where you were, with a new value (that you may use or not)","msgtype":"m.text"},"ts":1590112859000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and might not return a value","msgtype":"m.text"},"ts":1590112860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1590112869000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yield and await","msgtype":"m.text"},"ts":1590112871000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: what if i told you return could resume but it never does","msgtype":"m.text"},"ts":1590112922000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't understand what that means","msgtype":"m.text"},"ts":1590112942000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it would still fire the finally around it though?","msgtype":"m.text"},"ts":1590112953000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why does being able to resume change the control-flow-ness of an operator","msgtype":"m.text"},"ts":1590112956000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"try { return } finally { ... }","msgtype":"m.text"},"ts":1590112968000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: talking about whether control flow should be allowed in do expressions btw","msgtype":"m.text"},"ts":1590112984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think its just a mental model of the control flow being a valid expression itself","msgtype":"m.text"},"ts":1590112986000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"foo(return) doesn't make any sense, and that gets confusing in foo(do { return })","msgtype":"m.text"},"ts":1590113039000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if return parsed as an expression it could make sense","msgtype":"m.text"},"ts":1590113068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it could parse in the same position but it would never have a value generated for that position","msgtype":"m.text"},"ts":1590113107000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right its a never type","msgtype":"m.text"},"ts":1590113123000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't actually care about such a thought myself, but it seems to come up","msgtype":"m.text"},"ts":1590113127000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"same as a function that always throws","msgtype":"m.text"},"ts":1590113136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but thats in a different \"frame/scope\", so often not thought of when reading the code (even if it is a valid point)","msgtype":"m.text"},"ts":1590113199000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: i feel like you are not receptive to what i have said, and that's okay. you asked what i thought of control flow in do expressions","msgtype":"m.text"},"ts":1590113229000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: no i just want to understand","msgtype":"m.text"},"ts":1590113239000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think control flow in do expressions is fine-ish, finally {} can get confusing if you cancel ending the frame","msgtype":"m.text"},"ts":1590113245000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sorry if that didn't come across well","msgtype":"m.text"},"ts":1590113246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"finally is a good point about how people can understand odd control flow","msgtype":"m.text"},"ts":1590113312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like you don't have any different expectations of expressions and statements wrt control flow","msgtype":"m.text"},"ts":1590113318000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i do","msgtype":"m.text"},"ts":1590113323000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the existence of odd control flow in the language now doesn't have generalize to \"therefore allowing them in expressions doesn't change expectations\"","msgtype":"m.text"},"ts":1590113374000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"my only concern is from half finished statements: `while(...) { foo(sideEffect, do {continue}); }` currently statements are the points to observe non-throw control flow","msgtype":"m.text"},"ts":1590113376000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if that's all it comes down to i would say keeping that expectation doesn't matter that much","msgtype":"m.text"},"ts":1590113393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, you have to walk expressions for throws but not for other things","msgtype":"m.text"},"ts":1590113396000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"await being an expression because it needs to return a value did require some extra restrictions","msgtype":"m.text"},"ts":1590113407000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like disallowing it in parameter expressions","msgtype":"m.text"},"ts":1590113423000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: that's an opinion, not an argument?","msgtype":"m.text"},"ts":1590113438000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: right i meant, there's no point in trying to draw a conclusive decision from just an opinion","msgtype":"m.text"},"ts":1590113652000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"who... is trying to do that?","msgtype":"m.text"},"ts":1590113671000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well i was trying to do that","msgtype":"m.text"},"ts":1590113705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"until you clarified","msgtype":"m.text"},"ts":1590113708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was trying to get to a point where i could make a decision based on what you were saying","msgtype":"m.text"},"ts":1590113747000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i missed that context, thought you just wanted my thoughts. a decision on?","msgtype":"m.text"},"ts":1590113835000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i was trying to figure out the importance of control flow in do expressions","msgtype":"m.text"},"ts":1590113918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or lackthereof","msgtype":"m.text"},"ts":1590113930000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seemed like your own opinion is pretty strong already, that they should be allowed","msgtype":"m.text"},"ts":1590113953000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'd be equally curious of why we couldn't enable control flow later. though i bet in general just banning them directly inside of params wouldn't be terrible","msgtype":"m.text"},"ts":1590114053000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you don't really have to explicitly ban them inside params or anything","msgtype":"m.text"},"ts":1590114329000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like theoretically loop heads and function params are already barriers to their relevant control flow","msgtype":"m.text"},"ts":1590114383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: is the PL discord public?","msgtype":"m.text"},"ts":1590114585000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: #lang-dev on the rust community discord","msgtype":"m.text"},"ts":1590114606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(a channel about developing weird programing languages using rust, not about the development of the rust language)","msgtype":"m.text"},"ts":1590114629000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thank","msgtype":"m.text"},"ts":1590114714000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway I am going to be proposing do expressions with control flow disallowed","msgtype":"m.text"},"ts":1590114731000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since I think everyone agrees on that subset","msgtype":"m.text"},"ts":1590114739000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone with more willpower than me can fight the control flow fight later","msgtype":"m.text"},"ts":1590114768000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all of it? or just abrupt completions?","msgtype":"m.text"},"ts":1590114775000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling break/return/continue crossing the do{}, specifically","msgtype":"m.text"},"ts":1590114787000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1590114792000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"those are the only things people fight about","msgtype":"m.text"},"ts":1590114793000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1590114796000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if and try seem enough for a presentation","msgtype":"m.text"},"ts":1590114855000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i missed a log, but do expressions do not obviate the need for pipelines for me.","msgtype":"m.text"},"ts":1590115146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they would be a solution, but not an ergonomic one for the use cases i have.","msgtype":"m.text"},"ts":1590115162000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb do you have examples of those use cases?","msgtype":"m.text"},"ts":1590115254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i have the HOC one above","msgtype":"m.text"},"ts":1590115262000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"those are in modules where the result is just export defaulted; local vars would work fine, but that looks way worse than the )))) versión already, let alone the pipeline one","msgtype":"m.text"},"ts":1590115296000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh wow someone's proposing spaceship operator","msgtype":"m.text"},"ts":1590115308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the desire is to have a chain of functions, just like you’d have a chain of OO methods","msgtype":"m.text"},"ts":1590115318000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do expressions only satisfy the “statements in expression position” part, which imo is not something i care about for pipeline","msgtype":"m.text"},"ts":1590115335000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: Hemanth and i yes","msgtype":"m.text"},"ts":1590115346000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb hmmm","msgtype":"m.text"},"ts":1590115360000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: well, we’re proposing that we solve a problem. Spaceship is just what we think solves it best ;-)","msgtype":"m.text"},"ts":1590115372000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: for the arbitrary module names slides, you can have cjs facades, even autogenerated","msgtype":"m.text"},"ts":1590115396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: you should lead with s/a - b/a <=> b/ for array sorting","msgtype":"m.text"},"ts":1590115441000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I do not understand the relationship between <=> and Array.prototype.compare","msgtype":"m.text"},"ts":1590116027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: the latter is comparison for arrays. The former is a comparison protocol for everything.","msgtype":"m.text"},"ts":1590116500000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if the array method and the operator both exist, then I’d expect the method to delegate to the symbol on array.prototype","msgtype":"m.text"},"ts":1590116520000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's a standard c extension which allows expression blocks","msgtype":"m.text"},"ts":1590116699000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and it allows control flow","msgtype":"m.text"},"ts":1590116702000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it also allows crashing compilers pretty regularly","msgtype":"m.text"},"ts":1590116728000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"c has a lot of extensinos","msgtype":"m.text"},"ts":1590116732000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*extensinos","msgtype":"m.text"},"ts":1590116735000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1590116736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"woords","msgtype":"m.text"},"ts":1590116737000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wooooooords","msgtype":"m.text"},"ts":1590116739000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*extensions","msgtype":"m.text"},"ts":1590116743000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you're looking for an example which allows control flow, ruby's blocks are probably more relevant","msgtype":"m.text"},"ts":1590116756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so far every example i find allows it","msgtype":"m.text"},"ts":1590116773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"every language allows reflection on private things too :-) we can be better","msgtype":"m.text"},"ts":1590116799000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"most languages just don't allow statements in expression position at all","msgtype":"m.text"},"ts":1590116830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah but people don't say its a mistake","msgtype":"m.text"},"ts":1590116830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the languages which do tend to have that as their philosophy, so it makes sense to allow control flow there also","msgtype":"m.text"},"ts":1590116848000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we are grafting this feature onto a language which already has an expression/statement dichotomy","msgtype":"m.text"},"ts":1590116862000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so our situation is somewhat unique","msgtype":"m.text"},"ts":1590116866000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"c has the same issue","msgtype":"m.text"},"ts":1590116872000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"point taken about crashes but still","msgtype":"m.text"},"ts":1590116888000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I would seriously not use GCC-specific extensions as precedent for anything ever","msgtype":"m.text"},"ts":1590116891000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they are 100% added because they solve a specific use case someone had, not coherently designed to be a reasonable feature","msgtype":"m.text"},"ts":1590116912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1590116918000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"clang supports it too","msgtype":"m.text"},"ts":1590116928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean that's not unusual though","msgtype":"m.text"},"ts":1590116944000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"clang strives to be GCC compatible","msgtype":"m.text"},"ts":1590116950000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"msvc doesn't support it","msgtype":"m.text"},"ts":1590116977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but msvc is also kind of broken in general","msgtype":"m.text"},"ts":1590116990000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean...maybe so but I don't think this exemplifies that in any way","msgtype":"m.text"},"ts":1590117179000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: will you be doing an update on iterator helpers?","msgtype":"m.text"},"ts":1590159543000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: no :(","msgtype":"m.text"},"ts":1590159820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: did you see the conversation in #tc39-implementers","msgtype":"m.text"},"ts":1590159856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: since we are starting to implement, it would be great to have a discussion about the generator stuff you and jorendorff were trying to figure out","msgtype":"m.text"},"ts":1590159857000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1590159859000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ok cool","msgtype":"m.text"},"ts":1590159863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would you be ok if i started a conversation about that?","msgtype":"m.text"},"ts":1590159875000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"wdym by conversation","msgtype":"m.text"},"ts":1590159909000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: primarily, a clarification of the positions of the editors and the champion (so, you) regarding how generators should be used in the spec","msgtype":"m.text"},"ts":1590160400000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"this is so that we can move forward with the implementation. it wouldn't be stage advancement, just discussion","msgtype":"m.text"},"ts":1590160419000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh i meant like what medium","msgtype":"m.text"},"ts":1590160423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"plenary discussion?","msgtype":"m.text"},"ts":1590160434000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, as an agenda topic","msgtype":"m.text"},"ts":1590160437000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1590160438000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sure, sound fun","msgtype":"m.text"},"ts":1590160446000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sounds*","msgtype":"m.text"},"ts":1590160452000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cool. i will add it","msgtype":"m.text"},"ts":1590160460000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and maybe make some slides based on your discussion with jorendorff","msgtype":"m.text"},"ts":1590160474000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1590160484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thanks for working on this","msgtype":"m.text"},"ts":1590160488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, happy to help!","msgtype":"m.text"},"ts":1590160527000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"can anyone give my eyes some help, i wrote up https://gist.github.com/bmeck/5f195c4ae08009db4f3eefdc8bb360c9 to see if anything is using Symbol.species on their pages for Arrays and TypedArrays, but *nothing* is hitting that code except a coreJS eager feature detection. I feel like I definitely did something wrong","msgtype":"m.text"},"ts":1590173249000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it should work for this example right?","msgtype":"m.text"},"ts":1590173610000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/KlTA1VIh/","msgtype":"m.text"},"ts":1590173614000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yea, i see the bug I hit","msgtype":"m.text"},"ts":1590173673000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"coreJS makes species a regular function not a constructor so when I was patching that to figure out the noise ratio i broke everything else","msgtype":"m.text"},"ts":1590173702000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`species().foo` should be in a try catch","msgtype":"m.text"},"ts":1590173725000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well technically we could always use new?","msgtype":"m.text"},"ts":1590173746000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ystartsev: the goal is that we detect that code, yea","msgtype":"m.text"},"ts":1590173802000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well that we detect when the species in the subclass is not the builtin*","msgtype":"m.text"},"ts":1590173828000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cause if the behavior changes to always use the builtin we aren't concerned with the subclass species being the builtin","msgtype":"m.text"},"ts":1590173887000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1590173928000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sorry the code snippit was wrong, shouldn't be set to array","msgtype":"m.text"},"ts":1590173940000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"thanks for the sanity glance","msgtype":"m.text"},"ts":1590173989000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"its hitting for me, ill post the snippit in case i did something wrong","msgtype":"m.text"},"ts":1590174199000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"can you see this? https://gist.github.com/codehag/2aaa571b6286f7f2cc28d01736c7e708","msgtype":"m.text"},"ts":1590174258000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i'm just skeptical of these sites that are extending builtins via some regexps showing things like `extends Array` but never hitting any species usage","msgtype":"m.text"},"ts":1590174260000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i can see it, let me run it","msgtype":"m.text"},"ts":1590174274000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"one thing that is surprising to me is that we are not seeing angular show up","msgtype":"m.text"},"ts":1590174284000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://github.com/angular/angular/commit/58b29f1503a180fdfb8feb73a30d0c4448afad9a","msgtype":"m.text"},"ts":1590174338000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i feel like we should see that?","msgtype":"m.text"},"ts":1590174344000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yea that gist hits the trap","msgtype":"m.text"},"ts":1590174372000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh! good","msgtype":"m.text"},"ts":1590174390000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh wait, my gist, yea that makes sense","msgtype":"m.text"},"ts":1590174398000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"idk if angular hits it, but if you have a specific site i can visit to verify that would be good","msgtype":"m.text"},"ts":1590174418000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lemme look","msgtype":"m.text"},"ts":1590174428000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"angular vs angularjs still confuses me a bit","msgtype":"m.text"},"ts":1590174442000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ystartsev: i did disable Promise detection is likely why? I can re-enable it","msgtype":"m.text"},"ts":1590174493000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this project hits it... don't know much about it","msgtype":"m.text"},"ts":1590174548000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://github.com/microsoft/ApplicationInsights-node.js","msgtype":"m.text"},"ts":1590174549000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"or this is better: https://zonejs-basic.stackblitz.io/","msgtype":"m.text"},"ts":1590174629000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i can't understand the angular code","msgtype":"m.text"},"ts":1590174712000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it seems to be trying to follow the @@species protocol but doesn't depend on the native Promise.then, since it also patches then","msgtype":"m.text"},"ts":1590174748000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ystartsev: that page does not fire it, i've been trying to poke it to see if the detection is slightly off","msgtype":"m.text"},"ts":1590174839000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it doesn't use the builtin at least","msgtype":"m.text"},"ts":1590174854000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1590174907000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"might be a good example though, shows how species is not being used as expected anyway","msgtype":"m.text"},"ts":1590174943000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i have no problems with user libraries themselves using @@species as their own subclassing machinery","msgtype":"m.text"},"ts":1590174972000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is another example, they have a few https://stackblitz.com/edit/zonejs-throttle?file=index.js","msgtype":"m.text"},"ts":1590174976000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"they don't have the implementation tradeoffs of native engines","msgtype":"m.text"},"ts":1590174987000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah it looks like that is pretty much what angular did","msgtype":"m.text"},"ts":1590174990000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"out of 1k sampled sites out of 400k, all 26 traps were from coreJS so i was losing my mind","msgtype":"m.text"},"ts":1590174992000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: you mentioned that we should formulate a bigquery for this","msgtype":"m.text"},"ts":1590175022000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: bradleymeck has already done great work there","msgtype":"m.text"},"ts":1590175032000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh great","msgtype":"m.text"},"ts":1590175036000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ok, because i wasn't sure where to start","msgtype":"m.text"},"ts":1590175040000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: though if you want to start playing with it, either send *me* queries to run, or wait until i can figure out how to get you GCP credits","msgtype":"m.text"},"ts":1590175050000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because it turns out it is expensive af","msgtype":"m.text"},"ts":1590175055000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i have no idea how to forumate them, i would need to do some reading","msgtype":"m.text"},"ts":1590175068000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i have the output if you want, but its mostly just 20mb of pages in a CSV we need to actually validate against","msgtype":"m.text"},"ts":1590175068000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ystartsev: it's SQL","msgtype":"m.text"},"ts":1590175077000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that may not solve your problem :)","msgtype":"m.text"},"ts":1590175085000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, thats straight forward","msgtype":"m.text"},"ts":1590175086000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i don't really know SQL, so that was my problem","msgtype":"m.text"},"ts":1590175092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"its basically prolog but all caps right?","msgtype":"m.text"},"ts":1590175103000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"select * from websites where breakage=true","msgtype":"m.text"},"ts":1590175111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't have to use caps i don't think","msgtype":"m.text"},"ts":1590175119000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck if you have the data and the queries i would love to take a look","msgtype":"m.text"},"ts":1590175141000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"maybe we can make a doc about it for how-we-work","msgtype":"m.text"},"ts":1590175157000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: DO NOT RUN the query I'm about to post, it is a bit pricey we found out","msgtype":"m.text"},"ts":1590175206000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the angular story is really interesting because it tells us that people don't subclass the way we thought they would, and it gives more of a reason to remove this","msgtype":"m.text"},"ts":1590175207000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":":| gotcha","msgtype":"m.text"},"ts":1590175223000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/Oyd05gui/dont_run_this","msgtype":"m.text"},"ts":1590175224000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have saved output of it","msgtype":"m.text"},"ts":1590175231000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1590175247000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ah gosh i need to stop working on this, its super late","msgtype":"m.text"},"ts":1590175270000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i am going to _call it a day_","msgtype":"m.text"},"ts":1590175279000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but i am very excited about this","msgtype":"m.text"},"ts":1590175284000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"cya! enjoy the break","msgtype":"m.text"},"ts":1590175286000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how big is the dataset","msgtype":"m.text"},"ts":1590175314000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not as huge as I thought, our first naive query was like 6k and this one is up at around 400k","msgtype":"m.text"},"ts":1590175366000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"after you dedup the page hrefs","msgtype":"m.text"},"ts":1590175379000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bigquery should rename FULL JOIN to EXPENSIVE JOIN","msgtype":"m.text"},"ts":1590176557000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu we got another coreJS noise flag apparently with https://github.com/aldehydkrotonowy/source-code/blob/6bf6ff94a485bedb02218978a62dd2881c0c54d6/core-js/packages/core-js/internals/fix-regexp-well-known-symbol-logic.js#L22","msgtype":"m.text"},"ts":1590177571000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"gah, linked to wrong line, but yea that file also does eager detection","msgtype":"m.text"},"ts":1590177619000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/fix-regexp-well-known-symbol-logic.js#L80 is the actual line, reading","msgtype":"m.text"},"ts":1590177819000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this code shouts too much","msgtype":"m.text"},"ts":1590177919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: it looks like if the detection fails it replaces the builtins with its own there","msgtype":"m.text"},"ts":1590178453000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it is odd though, i only saw it because they use {} and call ({})[RegExp.prototype[Symbol.split]]('')","msgtype":"m.text"},"ts":1590178746000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/fix-regexp-well-known-symbol-logic.js#L70-L73 sets the species for the ordinary object, but idk why, they don't seem to check the return value to be the same","msgtype":"m.text"},"ts":1590178844000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i am on PTO today since Google gave everyone off, let's pick it up on tuesday. feel free to send me a gist or an email with the cases you find","msgtype":"m.text"},"ts":1590181389000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1590181399000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"another trap fires for Promise.then in https://github.com/zloirock/core-js/blob/717ff8bca8e68508ef6cef7eb673d0b39265739a/packages/core-js/modules/es.promise.js#L76 it seems","msgtype":"m.text"},"ts":1590181704000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a false positive or?","msgtype":"m.text"},"ts":1590181783000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unclear... the code is really abstract everytime i have to cross ref all these files for corejs","msgtype":"m.text"},"ts":1590181832000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it looks like it replaces Promise if it is wrong","msgtype":"m.text"},"ts":1590181844000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we likely should make a test/script to just punch away the globals ourselves and see what breaks","msgtype":"m.text"},"ts":1590181866000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"\"see what breaks\" is tricky, turns out","msgtype":"m.text"},"ts":1590181891000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since almost all pages are throwing random errors all the time","msgtype":"m.text"},"ts":1590181899000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe a custom build of firefox or chrome that has prints in these @@species sections","msgtype":"m.text"},"ts":1590181923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and also have try-catch suppressing half of the errors","msgtype":"m.text"},"ts":1590181925000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyone with sentry on their page","msgtype":"m.text"},"ts":1590181948000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"will slurp up errors without you ever seeing them","msgtype":"m.text"},"ts":1590181958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: I'm more concerned with only the scope of these coreJS detection mechanisms","msgtype":"m.text"},"ts":1590182075000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the whole page is too big to reason about","msgtype":"m.text"},"ts":1590182082000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm already patching stuff in devtools, idk, you can't slurp up errors without me seeing them","msgtype":"m.text"},"ts":1590182120000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so far, all things i've read in the output are from coreJS","msgtype":"m.text"},"ts":1590182164000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which is kind of impressive?","msgtype":"m.text"},"ts":1590182174000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but it replaces builtins with its own stuff","msgtype":"m.text"},"ts":1590182184000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"is it babel that inserts corejs","msgtype":"m.text"},"ts":1590182229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"often","msgtype":"m.text"},"ts":1590182418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but not always","msgtype":"m.text"},"ts":1590182421000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a lot of these though are semi-easy to detect, like they construct a promise subclass that has fulfill and reject as the same function identity","msgtype":"m.text"},"ts":1590183001000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the real issue is wading through all the core-js history to see if the minified code matches up","msgtype":"m.text"},"ts":1590183083000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which at this point i'm just starting to assume it is all this feature detection","msgtype":"m.text"},"ts":1590183096000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i had to start labelling which kind of detection it is coming from, the only one i'm a bit scared of is the latest core-js i have to detect via the result of new species(...).constructor.name === 'FakePromise'","msgtype":"m.text"},"ts":1590183178000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but that gets minified out","msgtype":"m.text"},"ts":1590183198000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"detecting species().constructor is typeof 'object' might be saner?","msgtype":"m.text"},"ts":1590183230000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]