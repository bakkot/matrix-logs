[
{"content":{"body":"jridgewell can I assist in writing tests?","msgtype":"m.text"},"ts":1585612960000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I have 0 tests...","msgtype":"m.text"},"ts":1585613035000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"How would you like to test?","msgtype":"m.text"},"ts":1585613044000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"help**","msgtype":"m.text"},"ts":1585613048000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"no idea lol","msgtype":"m.text"},"ts":1585613211000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"just thought i'd offer, given that i already have something testable ;P","msgtype":"m.text"},"ts":1585613223000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i've never written anything test262, but am keen to learn :)","msgtype":"m.text"},"ts":1585613241000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"Maybe if you could make a list of the things you think we should test?","msgtype":"m.text"},"ts":1585613249000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I have also never written a test262 test...","msgtype":"m.text"},"ts":1585613263000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"aim for 100% coverage https://coveralls.io/builds/29699669/source?filename=src/runtime-semantics/AssignmentExpression.mjs","msgtype":"m.text"},"ts":1585613401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unfortunately most of my parser is a dependency so i can't get good coverage data out of that","msgtype":"m.text"},"ts":1585613426000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would be super ideal if you could just be like \"hey, when this holds, just do exactly what = is already doing\" but given that it's a totally separate operator you basically need to do all the same tests again... :(","msgtype":"m.text"},"ts":1585613496000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"use ai to merge `+=` tests with `||` tests","msgtype":"m.text"},"ts":1585613529000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"AI? In *my* parser?","msgtype":"m.text"},"ts":1585613609000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: is this still somewhere on the editor group docket? https://github.com/tc39/ecma262/pull/1860","msgtype":"m.text"},"ts":1585613626000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell i'll see if I can come up with a list tonight","msgtype":"m.text"},"ts":1585613653000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: are y'all able to get coverage from bytecode and stuff","msgtype":"m.text"},"ts":1585613672000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: it's not, but i can add it","msgtype":"m.text"},"ts":1585613679000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i already have a bunch of the straightforward cases either implemented or discussed in <https://webkit.org/b/209716>","msgtype":"m.text"},"ts":1585613695000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"devsnek i don't know, i'm a noob with JSC 😅","msgtype":"m.text"},"ts":1585613706000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i did this work partly to try to learn more","msgtype":"m.text"},"ts":1585613712000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"ljharb: much obliged","msgtype":"m.text"},"ts":1585613716000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"CC keith_miller msaboff","msgtype":"m.text"},"ts":1585613723000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"if it can't, engine262 can do `npm run coverage` for an html which might be useful","msgtype":"m.text"},"ts":1585613782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could also do `./node_modules/.bin/nyc node test/test262/test262.js test/language/whatever-logical-assignment-tests**`","msgtype":"m.text"},"ts":1585613829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol I'm pretty sure that's just engine262 though","msgtype":"m.text"},"ts":1585613940000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh yeah that's just to verify the tests","msgtype":"m.text"},"ts":1585613983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to some degree","msgtype":"m.text"},"ts":1585613993000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't tell you if all the engines will pass :P","msgtype":"m.text"},"ts":1585614010000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'd need uh","msgtype":"m.text"},"ts":1585614015000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"test262-harness for that","msgtype":"m.text"},"ts":1585614022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how does GH still not have a crying reaction","msgtype":"m.text"},"ts":1585615155000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"#stifledexpressivity","msgtype":"m.text"},"ts":1585615167000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: should I update myself as the presenter for the forbidden extensions PR, if you were just hesitant to make me do it?","msgtype":"m.text"},"ts":1585615304000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: absolutely! no need for a PR for that change either, just push a commit :-)","msgtype":"m.text"},"ts":1585632091000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what link are we using for hallway track?","msgtype":"m.text"},"ts":1585669221000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I think this - https://hub.link/bHXk2f8","msgtype":"m.text"},"ts":1585669274000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"Reminder that this chat is public.","msgtype":"m.text"},"ts":1585669486000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Only share links in the Reflector.","msgtype":"m.text"},"ts":1585669507000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"this channel is private, right? only #tc39 is public I thought","msgtype":"m.text"},"ts":1585669535000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1585669539000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this channel is public now too","msgtype":"m.text"},"ts":1585669546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oooof. sorry y'all, I didn't know that changed.","msgtype":"m.text"},"ts":1585669563000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"it is publicly viewable, not open to public contributions","msgtype":"m.text"},"ts":1585669568000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's understandable, this is only the second meeting where that's the case","msgtype":"m.text"},"ts":1585669590000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ystartsev: can a new link be generated","msgtype":"m.text"},"ts":1585669598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's easy enough to change the hubs link if we find unwanted users","msgtype":"m.text"},"ts":1585669617000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm going to have to deep clean my laptop from this zoom install","msgtype":"m.text"},"ts":1585669708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"zoom added code snippets apparently","msgtype":"m.text"},"ts":1585669790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't even know what that means","msgtype":"m.text"},"ts":1585669877000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"in the text chat","msgtype":"m.text"},"ts":1585669890000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we might need to have a no-zoom-text-chat rule btw","msgtype":"m.text"},"ts":1585669906000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, at least for the sake of my sanity","msgtype":"m.text"},"ts":1585669925000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there's already enough places to follow during a meeting","msgtype":"m.text"},"ts":1585669935000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"well for the public discussion rule as well, unless note takers are going to be summarizing the text chat","msgtype":"m.text"},"ts":1585669957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes I understood","msgtype":"m.text"},"ts":1585669997000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"where do I find the TCQ link?","msgtype":"m.text"},"ts":1585670021000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's not in the channel topic and not in the Reflector issue","msgtype":"m.text"},"ts":1585670031000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm not sure","msgtype":"m.text"},"ts":1585670055000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reflector","msgtype":"m.text"},"ts":1585670367000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Is someone going to post the hubs URL to the Reflector issue?","msgtype":"m.text"},"ts":1585670850000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"devsnek: yep","msgtype":"m.text"},"ts":1585671473000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"apaprocki i can generate one","msgtype":"m.text"},"ts":1585671505000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"its on the reflector now","msgtype":"m.text"},"ts":1585671946000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what's the idea for the hubs, are we supposed to idle there?","msgtype":"m.text"},"ts":1585671989000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or join it during breaks?","msgtype":"m.text"},"ts":1585671993000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: either works","msgtype":"m.text"},"ts":1585672041000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i do recommend reducing the settings so that it doesnt have the fan spinning all the time","msgtype":"m.text"},"ts":1585672054000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"shu: i think idling during breaks at least allows people to start conversation in the way hallway track usually works","msgtype":"m.text"},"ts":1585672083000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm planning to join it during breaks","msgtype":"m.text"},"ts":1585672114000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you don't idle there people can't approach in a public fashion, would have to do it via DMs etc. which plenary couldn't pick up on","msgtype":"m.text"},"ts":1585672116000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradley and i are in there already if people wanna join","msgtype":"m.text"},"ts":1585672140000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"might need some contrast work https://usercontent.irccloud-cdn.com/file/MuiR0i0G/IMG_20200331_112945.jpg","msgtype":"m.text"},"ts":1585672213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should the room be more.. fun?","msgtype":"m.text"},"ts":1585672711000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if you have to ask... ;)","msgtype":"m.text"},"ts":1585672757000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(just kidding, I'm still making breakfast over here)","msgtype":"m.text"},"ts":1585672767000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what does one do if one doesn't have a VR headset? :P","msgtype":"m.text"},"ts":1585672798000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: you can just use WASD controls","msgtype":"m.text"},"ts":1585672817000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"nice!","msgtype":"m.text"},"ts":1585672823000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"is there a link?","msgtype":"m.text"},"ts":1585672826000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"reflector","msgtype":"m.text"},"ts":1585672835000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"there are some fun avatars in the Newest category hehe","msgtype":"m.text"},"ts":1585673276000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"msaboff:","msgtype":"m.text"},"ts":1585673369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh oops","msgtype":"m.text"},"ts":1585673373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"over the next hour, folks are likely to request access details to dial in - in all cases please go to the Reflector link 275 (posted in the IRC channel subject)","msgtype":"m.text"},"ts":1585673719000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"resolution 1x1","msgtype":"m.text"},"ts":1585674376000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh wow there are three pages of people","msgtype":"m.text"},"ts":1585674397000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it'd be great to keep chat to IRC, instead of zoom, during plenary stuff - it's hard enough to keep track of all the existing chat venues","msgtype":"m.text"},"ts":1585674437000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes please","msgtype":"m.text"},"ts":1585674467000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bterlson: heads up if you want to call on somebody, as the zoom host, you can unmute them (which asks them to confirm) but it gets their attention","msgtype":"m.text"},"ts":1585674606000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is also a stream of the zoom in the hub","msgtype":"m.text"},"ts":1585674659000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: ah i didn't realize that, thanks","msgtype":"m.text"},"ts":1585674675000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"suggestion: introduce yourself the first time you talk","msgtype":"m.text"},"ts":1585674676000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol for Keith's background","msgtype":"m.text"},"ts":1585674691000,"senderName":"caiolima","senderId":"caiolima@irc"},
{"content":{"body":"Bakkot: because that worked so well at JSConf EU :P","msgtype":"m.text"},"ts":1585674696000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(half kidding, I think it will work better in plenary)","msgtype":"m.text"},"ts":1585674713000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I wasn't there, so I will assume it worked perfectly","msgtype":"m.text"},"ts":1585674724000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you didn't watch our panel on YouTube? 😱","msgtype":"m.text"},"ts":1585674739000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'll link it in TDZ","msgtype":"m.text"},"ts":1585674745000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't watch videos as a rule","msgtype":"m.text"},"ts":1585674825000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's...fair","msgtype":"m.text"},"ts":1585674835000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"akirose: If you're doing the schedule, i have my constraints updated here https://github.com/tc39/agendas/blob/master/2020/03.md#schedule-constraints","msgtype":"m.text"},"ts":1585675030000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"apologies for these being so last-minute","msgtype":"m.text"},"ts":1585675038000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ty for letting me know","msgtype":"m.text"},"ts":1585675075000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"We have four note-takers who have generously volunteered for this session ahead of time: Rick, Philip, Mark, and Jason!","msgtype":"m.text"},"ts":1585675229000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"👏","msgtype":"m.text"},"ts":1585675300000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"to clarify: invited experts only need to sign the IPR form *once ever*. No need to sign again for this meeting.","msgtype":"m.text"},"ts":1585675308000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"akirose: are you using side-by-side mode?","msgtype":"m.text"},"ts":1585675664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have no idea what that is","msgtype":"m.text"},"ts":1585675678000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"oh to see rob at the same time as the slides","msgtype":"m.text"},"ts":1585675690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have zoom full-screened and i'm flipping between it and the agenda schedule i'm working on","msgtype":"m.text"},"ts":1585675702000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"devsnek: i see rob in the lower right corner, floating over the shared screen","msgtype":"m.text"},"ts":1585675725000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ooohh Oracle, that should be exciting","msgtype":"m.text"},"ts":1585675730000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"aha full screen","msgtype":"m.text"},"ts":1585675730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would love to have graal people participating more","msgtype":"m.text"},"ts":1585675813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wonder how the trademark thing will go if they do join","msgtype":"m.text"},"ts":1585676282000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: see tdz","msgtype":"m.text"},"ts":1585676334000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bterlson the Test262 update is not on the TCQ agenda","msgtype":"m.text"},"ts":1585676917000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"whoops I'll add it","msgtype":"m.text"},"ts":1585676930000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"leo?","msgtype":"m.text"},"ts":1585676930000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"doing it? or you for old times sake? :-P","msgtype":"m.text"},"ts":1585676938000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"Me","msgtype":"m.text"},"ts":1585676948000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"I wanted to blurt out \"workin' on it\" re JSC but didn't know whether that was a New Topic or what lol","msgtype":"m.text"},"ts":1585677357000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"akirose: MylesBorins: bterlson: for the schedule, not sure if the agenda view on tcq is up-to-date, but please schedule the incubator call chartering to be sometime on the last day","msgtype":"m.text"},"ts":1585678525000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(as noted in the schedule constraints)","msgtype":"m.text"},"ts":1585678539000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't think it is up to date","msgtype":"m.text"},"ts":1585678557000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"it's not done yet, but i'll post the WIP schedule on the reflector","msgtype":"m.text"},"ts":1585678559000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ah okay, great","msgtype":"m.text"},"ts":1585678563000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nice speediness there jridgewell :D","msgtype":"m.text"},"ts":1585678641000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"The tests aren't great…","msgtype":"m.text"},"ts":1585678662000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah but officially nonzero","msgtype":"m.text"},"ts":1585678683000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"drousso might help me make more tests.","msgtype":"m.text"},"ts":1585678702000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1585678721000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test","msgtype":"m.text"},"ts":1585678949000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"hello jackworks79","msgtype":"m.text"},"ts":1585678977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does here a public IRC channel now?","msgtype":"m.text"},"ts":1585678996000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"jackworks79: the public can view this IRC channel and read its logs, yes","msgtype":"m.text"},"ts":1585679054000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"jackworks79: Only delegates can message, though","msgtype":"m.text"},"ts":1585679116000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"#tc39 is the one which anyone can message","msgtype":"m.text"},"ts":1585679121000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(which I'd encourage using most of the time, but not for discussing ongoing meeting stuff)","msgtype":"m.text"},"ts":1585679138000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i need to apologize— Bakkot i'm asking you to go after lunch due to a scheduling constraint, maybe i'll ask s-h-u to do his PSA next instead.","msgtype":"m.text"},"ts":1585679369000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"yup seems fine","msgtype":"m.text"},"ts":1585679391000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1585679399000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"since when have we tried to prevent people from deadlocking themselves?","msgtype":"m.text"},"ts":1585679571000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the deadlock is that it will never wake up","msgtype":"m.text"},"ts":1585679632000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing can wake it","msgtype":"m.text"},"ts":1585679636000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"while(1);","msgtype":"m.text"},"ts":1585679743000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra since we started trying to design a memory model usable by mortals","msgtype":"m.text"},"ts":1585679765000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is way less obvious when you've accidentally gotten into a deadlock with multithreading than when you just have an infinite loop, as a rule","msgtype":"m.text"},"ts":1585679792000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this was the single-threaded case though","msgtype":"m.text"},"ts":1585679808000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i think the design here is that you don't know if the buffer you're given is shared or not","msgtype":"m.text"},"ts":1585679838000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or more that you don't want to bother checking","msgtype":"m.text"},"ts":1585679846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one of my friend is doing this thing to block the main JS thread:","msgtype":"m.text"},"ts":1585679883000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"devsnek: good point","msgtype":"m.text"},"ts":1585679903000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"jridgewell: with those logical assignment tests v","msgtype":"m.text"},"ts":1585679925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/53384906.png","msgtype":"m.text"},"ts":1585679925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"100% coverage of the runtime semantics!","msgtype":"m.text"},"ts":1585679936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with ({}) while (Atomics.load(...) === old) // blocking on the main thread","msgtype":"m.text"},"ts":1585679939000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"😉","msgtype":"m.text"},"ts":1585679982000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"he said \"if you won't allowing me to lock (Atomics.wait) on the main thread, I'll use a more hacky and stupid (while loop to check spin lock) to lock the main thread\"","msgtype":"m.text"},"ts":1585680075000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"someone's audio is dying","msgtype":"m.text"},"ts":1585680098000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I muted brian","msgtype":"m.text"},"ts":1585680131000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1585680141000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"somehow I wound up with host privs so I used them :P","msgtype":"m.text"},"ts":1585680142000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"drunk with power","msgtype":"m.text"},"ts":1585680156000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"jackworks79: correct, but thats a spin lock instead of a full on sleep","msgtype":"m.text"},"ts":1585680260000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"0 is the new NaN, folks","msgtype":"m.text"},"ts":1585680384000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(he is making a remote sync DOM so he need to force block on the main thread to wait for the result from a remote DOM env)","msgtype":"m.text"},"ts":1585680405000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"Symbol.for('es.no.waiters')","msgtype":"m.text"},"ts":1585680437000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what an excellent way to burn users' battery","msgtype":"m.text"},"ts":1585680479000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should use an evented model","msgtype":"m.text"},"ts":1585680500000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's really difficult to provide an sync API over an async thread","msgtype":"m.text"},"ts":1585680578000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So, making it evented would just break the user's code","msgtype":"m.text"},"ts":1585680591000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"AMP has the same issue with WorkerDOM","msgtype":"m.text"},"ts":1585680607000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah, in workers can use Atomics.wait to block the thread and make it fake sync","msgtype":"m.text"},"ts":1585680626000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"make amp v2","msgtype":"m.text"},"ts":1585680635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can y'all give more of a heads-up when you move agenda items around? previously it was communicated that named groups would happen before lunch","msgtype":"m.text"},"ts":1585680684000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I love that the \"frozen\" slide is constantly moving","msgtype":"m.text"},"ts":1585680711000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"We also are looking at this wait behavior for instrumenting CJS in Node","msgtype":"m.text"},"ts":1585680725000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but we don't have [[CanWait]] set to false for anything","msgtype":"m.text"},"ts":1585680751000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"brad4d: it's snowflakes though","msgtype":"m.text"},"ts":1585680752000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"RIP v8 8.2","msgtype":"m.text"},"ts":1585680810000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"👀 https://gc.gy/53390815.png","msgtype":"m.text"},"ts":1585685823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/53390839.png","msgtype":"m.text"},"ts":1585685846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"agree with mathiasbynens 👍","msgtype":"m.text"},"ts":1585686121000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the whole `var y = { \\u0066or: x } = { for: 42 };` is legal thing makes me cry too","msgtype":"m.text"},"ts":1585686249000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\\u0066 in chat","msgtype":"m.text"},"ts":1585686265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: you didn't mention that in non-u regexps, there's a more interesting case for /\\u{FOO}/ if FOO consists of 0-9 only e.g. `123456`: then, it matches the literal character `u` repeated `123456` times.","msgtype":"m.text"},"ts":1585686300000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(JSC has a ton of outstanding test262 failures about keywords-with-escapes as identifiers)","msgtype":"m.text"},"ts":1585686314000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(#funfact but didn't want to waste committee time)","msgtype":"m.text"},"ts":1585686315000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"non-unicode regex has a lot of scary stuff","msgtype":"m.text"},"ts":1585686335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'd like to go on record as being opposed to allowing non-IdentifierNames in named groups, as they conflict with some RegExp related proposals I'm putting together.","msgtype":"m.text"},"ts":1585686359000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"gibson042: can't the programs be expressed with \\u{}","msgtype":"m.text"},"ts":1585686404000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not convinced that Waldemar's asciifier should be a goal... it's possible to write, but would just be slightly more complicated","msgtype":"m.text"},"ts":1585686418000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(since it sounds like my question won't make it before the queue is cut off)","msgtype":"m.text"},"ts":1585686425000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"so I don't understand why the goal needs to include that the asciifier is so simple","msgtype":"m.text"},"ts":1585686438000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I maintain such an asciifier...","msgtype":"m.text"},"ts":1585686481000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"what is an asciifier","msgtype":"m.text"},"ts":1585686490000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you quit and re-join you have you re-add your full name 🤦🏻‍♀️","msgtype":"m.text"},"ts":1585686496000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"turning things outside ascii range into escapes?","msgtype":"m.text"},"ts":1585686511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"akirose: yeah I can't figure out how to correct this :-/","msgtype":"m.text"},"ts":1585686523000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens: waldemar's contention is that you can't convert a non-unicode regex into a unicode regex in general","msgtype":"m.text"},"ts":1585686542000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mathiasbynens: i don't know enough about regexps to say, is that actually true?","msgtype":"m.text"},"ts":1585686550000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i had to find my own face in the gallery and choose \"rename\" from the context menu","msgtype":"m.text"},"ts":1585686591000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"I 口 Unicode","msgtype":"m.text"},"ts":1585686596000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"gibson042: can you give an example?","msgtype":"m.text"},"ts":1585686616000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"aah this is what i was missing earlier. we could totally make \\u{...} work specifically for group names. i missed that gibson042 wouldn't want that","msgtype":"m.text"},"ts":1585686694000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"The reason `\\u{1d49c}` isn't supported without the `u` flag is for back compat, however there's no back-compat concern to allow them without the `u` flag in a named capture group, as named capture groups were new syntax so there is no back-compat hazard.","msgtype":"m.text"},"ts":1585686739000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"please really consider if you must be on the queue - we have to end this topic in 6 mins","msgtype":"m.text"},"ts":1585686742000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"rbuckton: exactly","msgtype":"m.text"},"ts":1585686751000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I don't think this is getting resolved in the next 10 minutes","msgtype":"m.text"},"ts":1585686763000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"The main reason *not* to allow them would be confusion due to inconsistency.","msgtype":"m.text"},"ts":1585686795000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"jackworks: your pseduo-tofu bothers me so much more than real tofu","msgtype":"m.text"},"ts":1585686812000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there's gonna be inconsistency in any case. we have to pick which inconsistency we want to live with","msgtype":"m.text"},"ts":1585686818000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"are humans going to be confused by this though","msgtype":"m.text"},"ts":1585686823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is all tooling output","msgtype":"m.text"},"ts":1585686827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the inconsistency between pattern + match.groups.IDENTIFIER is what matters most","msgtype":"m.text"},"ts":1585686835000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"michaelficarra: lol I thought this too 😂","msgtype":"m.text"},"ts":1585686853000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"+1 to mathias","msgtype":"m.text"},"ts":1585686861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Then we could just allow any key name?","msgtype":"m.text"},"ts":1585686976000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"use ['for'] syntax any key name is already allowed imo 🤣","msgtype":"m.text"},"ts":1585687069000,"senderName":"jackworks79","senderId":"jackworks79@irc"},
{"content":{"body":"2 minute warning","msgtype":"m.text"},"ts":1585687112000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"gibson042: isn't that what you objected to?","msgtype":"m.text"},"ts":1585687290000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what is the \"this\" here?","msgtype":"m.text"},"ts":1585687314000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I get the urgency to resolve this matter but it feels really rushed given the temp of the room","msgtype":"m.text"},"ts":1585687332000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think \\u{…} should have identical treatment in a non-Unicode regex regardless of its use for matching vs. capture-group naming","msgtype":"m.text"},"ts":1585687347000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"akirose I would like to participate in \"Make SharedArrayBuffer optional\", but I also have to go at 5pm (hard stop, child care)","msgtype":"m.text"},"ts":1585687352000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"We could come back to it with a longer time box, but it seems to be blocking to adopting ES 2020","msgtype":"m.text"},"ts":1585687371000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"i.e., equivalence with \"u{…}\"","msgtype":"m.text"},"ts":1585687373000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"If shu doesn't mind, could we do that tomorrow?","msgtype":"m.text"},"ts":1585687374000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"i'm flexible for my items","msgtype":"m.text"},"ts":1585687386000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu I appreciate that","msgtype":"m.text"},"ts":1585687395000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"gibson042: right, what kevin and waldemar were suggesting is, that `\\u{1234}` would mean *that character* in both u and non-u regexes, not a literal \"u{1234}\", if i understand correctly","msgtype":"m.text"},"ts":1585687423000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gibson042: and i thought your position was, that in a non-u regex, `\\u{1234}` must mean `u{1234}`","msgtype":"m.text"},"ts":1585687445000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think we're talking about \\u{nnn} at all...?","msgtype":"m.text"},"ts":1585687449000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"akirose shu the only other item that I want to participate in is \"Atomics.waitAsync error rejection PR\", but presumably that wont be reached until tomorrow or Thursday anyway","msgtype":"m.text"},"ts":1585687450000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"ah, I think you have misunderstood Waldemar at least","msgtype":"m.text"},"ts":1585687454000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1585687456000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm asking about the current slide","msgtype":"m.text"},"ts":1585687462000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"aren't we talking about the surrogate pair syntax only?","msgtype":"m.text"},"ts":1585687465000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron: yeah, if at all, it's a late addition so i expect it to be at the end of the meeting","msgtype":"m.text"},"ts":1585687480000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: the question's the same tho","msgtype":"m.text"},"ts":1585687485000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In all of this, there is the other part of capture group names, the first \"character\" needs to have the Identifier_Start property and subsequent \"characters\" have the propert Identifier_Continue.","msgtype":"m.text"},"ts":1585687486000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"ljharb: it is?","msgtype":"m.text"},"ts":1585687491000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in a non-u regex, `\\u` means `u`","msgtype":"m.text"},"ts":1585687493000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu that's my expectation as well","msgtype":"m.text"},"ts":1585687497000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"there's still a bunch of people who didn't fix their display name","msgtype":"m.text"},"ts":1585687504000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"my understanding of gibson042's position was that that should remain true in named capture groups","msgtype":"m.text"},"ts":1585687506000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: ^","msgtype":"m.text"},"ts":1585687511000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and my understanding of waldemar and kevin's preference was to make it be an actual character escape in non-u regexes (as well, ofc, as in u regexes)","msgtype":"m.text"},"ts":1585687551000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"did i misunderstand?","msgtype":"m.text"},"ts":1585687559000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in order to represent in ASCII a regular expression with a non-BMP capture group name, it is necessary to allow *at least one of* `/(?<\\ud835\\udc9c>.)/` with surrogate-pair semantics or `/(?<\\u{1d49c}>.)/` with code point semantics. I am against the latter because of inconsistency with \\u{1d49c} in non-Unicode regexes outside of capture groups.","msgtype":"m.text"},"ts":1585687638000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"and I believe that is also Waldemar's position","msgtype":"m.text"},"ts":1585687652000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ahhh ok","msgtype":"m.text"},"ts":1585687659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so you want the non-curly surrogate pair syntax to mean \"the char\" but you want the curly form to be illegal (in a non-u regex)?","msgtype":"m.text"},"ts":1585687675000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm less sure about Kevin, but I think that matches as well","msgtype":"m.text"},"ts":1585687675000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"why is ?<...> not always the ID_Identifier semantics","msgtype":"m.text"},"ts":1585687679000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1585687687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ID_... semantics","msgtype":"m.text"},"ts":1585687691000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042: did my paraphrase make sense?","msgtype":"m.text"},"ts":1585687694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think i agree with shane that the thing in the arrows should always be an identifier","msgtype":"m.text"},"ts":1585687726000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"akirose: well put","msgtype":"m.text"},"ts":1585687798000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm with Shane on this one I think it should just be an identifier prooduction","msgtype":"m.text"},"ts":1585687827000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"IIUC","msgtype":"m.text"},"ts":1585687840000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"that would allow \\u{}","msgtype":"m.text"},"ts":1585687850000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1585687855000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1585687871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: even in a non-unicode regex?","msgtype":"m.text"},"ts":1585687872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585687877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I still don't understand Waldemar's ASCIIfier","msgtype":"m.text"},"ts":1585687880000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's not observable there?","msgtype":"m.text"},"ts":1585687884000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"My internet connection just died, I will try to rejoin shortly.","msgtype":"m.text"},"ts":1585687885000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"You must be aware of the RegExp context","msgtype":"m.text"},"ts":1585687890000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"                I think that identifier production should be the same for both non-Unicode and Unicode RegExp's.","msgtype":"m.text"},"ts":1585687890000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"because it's not actually used in part of the regexp","msgtype":"m.text"},"ts":1585687902000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb:^","msgtype":"m.text"},"ts":1585687907000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Because if you naively changed the pretty a until a `\\u{CODE}` in a non-unicode regex, it'd break the regex.","msgtype":"m.text"},"ts":1585687913000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's essentially a comment?","msgtype":"m.text"},"ts":1585687920000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: ah ok, so the context is different for you between \"the regex pattern itself\" and \"the annotation of the capture group\"","msgtype":"m.text"},"ts":1585687939000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gibson042: thoughts on ^ ?","msgtype":"m.text"},"ts":1585687948000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"And if we allow any \"name\" there, why not allow _any_ name?","msgtype":"m.text"},"ts":1585687954000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":" i think shane put it nicely with the template example","msgtype":"m.text"},"ts":1585687955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell you can just change it to the pretty A into the two surrogate halves and it will work in both cases","msgtype":"m.text"},"ts":1585687958000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"${...} is like (<...>","msgtype":"m.text"},"ts":1585687964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: yeah","msgtype":"m.text"},"ts":1585687964000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"er (?<...>","msgtype":"m.text"},"ts":1585687971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell the main reason not to allow any name is because it can conflict with numeric (non-named) matches, which isn't currently terrible but gets weird with some potential other features","msgtype":"m.text"},"ts":1585688000000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bringing up Waldemar's funny behavior `\\u123\\u456*` isn't the same as `\\u{12345}*`","msgtype":"m.text"},"ts":1585688003000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb I agree with keith_miller.  Capture group names should be treated separately to the RegExp's pattern","msgtype":"m.text"},"ts":1585688016000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"So naive ASCIIfier is always needs to parse the regex.","msgtype":"m.text"},"ts":1585688018000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shane, are you in IRC? I don't know your handle","msgtype":"m.text"},"ts":1585688021000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sffc:","msgtype":"m.text"},"ts":1585688025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's just not possible to do otherwise.","msgtype":"m.text"},"ts":1585688026000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell but `\\u123\\u456*` is the same as `A*`","msgtype":"m.text"},"ts":1585688046000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in both unicode and non-unicode regexes","msgtype":"m.text"},"ts":1585688053000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I think...)","msgtype":"m.text"},"ts":1585688058000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am against `/(?<\\u{1d49c}>\\u{1d49c})/` returning a group named \"𝒜\" with value \"u{1d49c}\", which is what the \"apply code point semantics specifically when naming capture groups\" implies","msgtype":"m.text"},"ts":1585688059000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Be we can use the unicode codepoint anymore","msgtype":"m.text"},"ts":1585688067000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"gibson042: ok - the thing you're against seems to be what a number of people are settling on","msgtype":"m.text"},"ts":1585688081000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am okay with the example gibson042 just sent","msgtype":"m.text"},"ts":1585688085000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hi.  ok, so I understand the desire to represent regexes as strings, in which case the thing inside (?<...>) is interpreted as a string.  In that situation, though, then (?<0>) should produce a capture group named with the string \"0\".","msgtype":"m.text"},"ts":1585688112000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"gibson042 there's a mandatory `>` after the group name, so you can't have that particular case","msgtype":"m.text"},"ts":1585688126000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"having different semantics for \"\\u{…}\" sequences based on where they appear in the regex is just too much cognitive burden for too little gain IMO","msgtype":"m.text"},"ts":1585688132000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: Won't allowing the surrogate code point do exactly that?","msgtype":"m.text"},"ts":1585688138000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah +1 to consistency about \"what an identifier is\" from me","msgtype":"m.text"},"ts":1585688139000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: it's there","msgtype":"m.text"},"ts":1585688156000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"oh, sorry, I can't read","msgtype":"m.text"},"ts":1585688164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1585688167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot Your slides said that let \\ud835\\udc9c; is not valid, but let \\u{1d49c}; is.  Shouldn't RegExp capture names be the same?","msgtype":"m.text"},"ts":1585688179000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"we're talking about IdentifierNames, right? not Identifier?","msgtype":"m.text"},"ts":1585688204000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"separate question: has anyone ever suggested making `let \\ud835\\udc9c;` valid?","msgtype":"m.text"},"ts":1585688231000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"michaelficarra: yes","msgtype":"m.text"},"ts":1585688231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I *really* hope we wouldn't apply ReservedWord restrictions to named capture groups","msgtype":"m.text"},"ts":1585688232000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"That is my understandng.","msgtype":"m.text"},"ts":1585688232000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"rkirsling: I'm actually not sure why that's invalid","msgtype":"m.text"},"ts":1585688257000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I can't figure it out","msgtype":"m.text"},"ts":1585688260000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra because `\\ud835` is not ID_Start","msgtype":"m.text"},"ts":1585688298000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"remember that `let \\u0065` is valid, so why wouldn't surrogate halves be valid?","msgtype":"m.text"},"ts":1585688298000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh really, it checks the first code unit for ID_Start?","msgtype":"m.text"},"ts":1585688318000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"okay then","msgtype":"m.text"},"ts":1585688320000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"alright that's fair","msgtype":"m.text"},"ts":1585688353000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"btw where should we having the priority discussion?","msgtype":"m.text"},"ts":1585688360000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"some people felt that it was unacceptable for the spec to go out with known incoherencies, but I think it's fine","msgtype":"m.text"},"ts":1585688386000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot If that is the case, don't we want named capture group name syntax to be the same as identifiers?","msgtype":"m.text"},"ts":1585688428000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I actually think that if we allow \\u{}, we should also allow \\u\\u","msgtype":"m.text"},"ts":1585688448000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"that would be iffy","msgtype":"m.text"},"ts":1585688468000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\\u\\u isn't disallowed btw","msgtype":"m.text"},"ts":1585688478000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its just that the first one isn't a valid identifier start","msgtype":"m.text"},"ts":1585688489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Reading the notes, I think WH's point was that anything represented in `/.../` syntax should also be able to be represented in `new RegExp(\"...\")` syntax","msgtype":"m.text"},"ts":1585688513000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"and vice-verse","msgtype":"m.text"},"ts":1585688521000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"akirose shu I have to go now, but I think this proposal is ok","msgtype":"m.text"},"ts":1585688555000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"See you all tomorrow.","msgtype":"m.text"},"ts":1585688563000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"👋🏻","msgtype":"m.text"},"ts":1585688567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I haven't looked at the spec or our parser to see if a valid first surrogate \\u is followed by a valid second surrogate that it is supposed to be treaded as a single Unicode code point.","msgtype":"m.text"},"ts":1585688570000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"ty rwaldron","msgtype":"m.text"},"ts":1585688571000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"msaboff: https://tc39.es/ecma262/#sec-identifier-names-static-semantics-early-errors","msgtype":"m.text"},"ts":1585688626000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Thanks, looking...","msgtype":"m.text"},"ts":1585688645000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"the first rule","msgtype":"m.text"},"ts":1585688649000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's stronger than that... anything representable in `/…/` should be representable without using any code unit outside of 0x20 through 0x7E","msgtype":"m.text"},"ts":1585688649000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"It is a Syntax Error if the SV of UnicodeEscapeSequence is none of \"$\", or \"_\", or the UTF16Encoding of a code point matched by the UnicodeIDStart lexical grammar production.","msgtype":"m.text"},"ts":1585688650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"msaboff y'alls parser has a bunch of problems with non-BMP in general","msgtype":"m.text"},"ts":1585688655000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"doesn't even allow `let 𝒜`","msgtype":"m.text"},"ts":1585688660000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we'd have to modify our grammar to perform utf16 decoding on identifiers","msgtype":"m.text"},"ts":1585688681000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just typing that gives me shivers","msgtype":"m.text"},"ts":1585688698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek That says that \\uHHHH is for BMP characters only.","msgtype":"m.text"},"ts":1585688787000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"what does","msgtype":"m.text"},"ts":1585688830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The spec only allows for one escape for an IdentifierStart or IndentifierPart. That is only one \\uHHHH escape and not two together","msgtype":"m.text"},"ts":1585688909000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1585688920000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If you want a non-BMP codepoint, you have to use \\u{}","msgtype":"m.text"},"ts":1585688941000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1585688944000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Given we aren't likely to change this for identifiers, I think named capture group identifiers should follow the same rules.","msgtype":"m.text"},"ts":1585688987000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Thins would include non-Unicode RegExps","msgtype":"m.text"},"ts":1585689003000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1585689020000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think we should change it for identifiers","msgtype":"m.text"},"ts":1585689049000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"with the effect that `/(?<\\u{1d49c}>\\u{1d49c})/` returns a group named \"𝒜\" with value \"u{1d49c}\", as gibson042 pointed out above?","msgtype":"m.text"},"ts":1585689072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff ^","msgtype":"m.text"},"ts":1585689076000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Can someone explain the argument for allowing \\u\\u in capturing groups?","msgtype":"m.text"},"ts":1585689084000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"sffc: that code example that bakkot just posted","msgtype":"m.text"},"ts":1585689101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek sffc I will write it out; it is not that code example","msgtype":"m.text"},"ts":1585689113000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot Yes it would.","msgtype":"m.text"},"ts":1585689120000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"it isn't?","msgtype":"m.text"},"ts":1585689126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i thought the entire argument was that the example shouldn't be allowed","msgtype":"m.text"},"ts":1585689136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you'd have to use surrogate pairs","msgtype":"m.text"},"ts":1585689140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek oh I guess that's part of it","msgtype":"m.text"},"ts":1585689169000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me write it out.","msgtype":"m.text"},"ts":1585689171000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: found the comment about different alloc trade offs https://freenode.logbot.info/tc39/20200219#c3271588-c3271590 that i was curious about, just a note no action","msgtype":"m.text"},"ts":1585689197000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't see what Bakkot's example has to do with `(?<\\u\\u>)`; the question of what to do with `(?<\\u{}>)` is a separate question","msgtype":"m.text"},"ts":1585689230000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"this makes me want to buy facerig now","msgtype":"m.text"},"ts":1585689249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sffc the major argument is, currently if you are turning a JS source text into ascii you can do that for regexes by replacing any non-BMP with two escaped surrogate halves. if we disallow `\\u\\u`, now you have to actually parse it. and if you can't use `(?<\\u{1d49c}>` in non-unicode regexs, then you can't do the thing you are trying to do at all; some people think you should not be able to use that (this is the relevance of my","msgtype":"m.text"},"ts":1585689267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":" previous example).","msgtype":"m.text"},"ts":1585689267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how are they just replacing everything with surrogate pairs","msgtype":"m.text"},"ts":1585689318000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those aren't valid identifiers","msgtype":"m.text"},"ts":1585689321000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"for regexes\"","msgtype":"m.text"},"ts":1585689327000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bradleymeck: yeah, that's the buffer allocated if you go through Wasm.Memory","msgtype":"m.text"},"ts":1585689329000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ohhh just for regexes","msgtype":"m.text"},"ts":1585689333000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: once you get the SAB constructor back out, that follows JS rules (no rounding, page boundaries, wahtever)","msgtype":"m.text"},"ts":1585689340000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: so the problem is only for non-unicode regexes.  But we already don't allow Unicode identifiers as capture group names in non-unicode regexes, according to the last slide in the presentation.","msgtype":"m.text"},"ts":1585689443000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"the current state is incoherent.","msgtype":"m.text"},"ts":1585689467000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we neither allow nor disallow; I apologize that my slides suggested otherwise.","msgtype":"m.text"},"ts":1585689484000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It makes sense if `/(?<\\u{1d49c}>\\u{1d49c})/` would have the behavior you suggested earlier (returns a group named \"𝒜\" with value \"u{1d49c}\").  Maybe it's a little weird, but it's well-defined.","msgtype":"m.text"},"ts":1585689550000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Bakkot Would you be fine with allowing \\u{} in a named capture group ID for non-unicode RegExps?","msgtype":"m.text"},"ts":1585689551000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Alternatively, it would make sense if you just forbid all non-BMP identifiers in non-unicode RegExp capture group names, in which case your example would be a compile error.","msgtype":"m.text"},"ts":1585689600000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"you can't do that; `/(?<𝒜>.)/` is already valid","msgtype":"m.text"},"ts":1585689659000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042 this feature is not widely enough used for us to worry about back compat, I think","msgtype":"m.text"},"ts":1585689682000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, fair enough","msgtype":"m.text"},"ts":1585689699000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I think we can separate what is valid for a capture group identifier and what is match by the RegExp","msgtype":"m.text"},"ts":1585689710000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff I would (actually my assumed it was uncontroversial that they should be allowed); other people have said they would object to that, though.","msgtype":"m.text"},"ts":1585689718000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*actually my presentation assumed","msgtype":"m.text"},"ts":1585689724000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"reminder: please add your company name to your Zoom display name","msgtype":"m.text"},"ts":1585689769000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"private fields aren't in the spec btw","msgtype":"m.text"},"ts":1585689773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, this is about adding it to the stage 3 private fields spec","msgtype":"m.text"},"ts":1585689799000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mhm","msgtype":"m.text"},"ts":1585689815000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot And then would you also support NOT allowing \\uHHHH\\uHHHH as a surrogate pair as a named capture group ID.  It could be valid if each escape is a valid ID start / IS part.","msgtype":"m.text"},"ts":1585689824000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"can't we just use IdentifierName","msgtype":"m.text"},"ts":1585689864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people arguing for `/(?<\\u{1d49c}>.)/` to be equivalent to `/(?<𝒜>.)/` while `/\\u{1d49c}/` is NOT equivalent to `/𝒜/`... what's the benefit?","msgtype":"m.text"},"ts":1585689911000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"`foo?.bar.#baz` => `foo == null ? undefined : foo.bar.#baz`","msgtype":"m.text"},"ts":1585689928000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"msaboff I lean towards the other side of that question. I think approximately zero humans ever write or read code containing unicode escapes in named capture groups, so it makes sense to make things as easy as possible for tooling responsible for generating it. Allowing escaped surrogate halves here makes it easy for tooling.","msgtype":"m.text"},"ts":1585689935000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: that we use a consistent identifier everywhere","msgtype":"m.text"},"ts":1585689984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042: what would Waldemar's hypothetical ASCIIfier return for the regexp-stored-as-string '[<U+0000>-<U+10FFFF>]', with the condition that it doesn't know whether the target RegExp will have the u flag or not?","msgtype":"m.text"},"ts":1585689987000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I get that, but does it make sense to have different grammar rules for identifiers in the language versus named capture group identifiers?","msgtype":"m.text"},"ts":1585690005000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"gibson042: if you know you end up in a `u` regexp, you can output `/\\0-\\u{10FFFF}/u` and call it a day, but that pattern wouldn't work in non-`u`","msgtype":"m.text"},"ts":1585690010000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens you can replace those with the two surrogate halves and it will preserve semantics in both cases, I am almost certain.","msgtype":"m.text"},"ts":1585690018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: well no you'd break the range in the non-u case","msgtype":"m.text"},"ts":1585690045000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"how sure are you?","msgtype":"m.text"},"ts":1585690049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: 100%","msgtype":"m.text"},"ts":1585690055000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: since you're now creating a range between U+0000 and highSurrogate(U+10FFFF)","msgtype":"m.text"},"ts":1585690076000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot I don't think so.  In mathiasbynens example, the RegExp is quite different with and without /u","msgtype":"m.text"},"ts":1585690081000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"mathiasbynens \"since you're now creating\"... in the non-u case?","msgtype":"m.text"},"ts":1585690098000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then trailSurrogate(U+10FFFF) is a lone character in the character class...","msgtype":"m.text"},"ts":1585690102000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"are you sure that's not what you already had?","msgtype":"m.text"},"ts":1585690104000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think that's what you already had","msgtype":"m.text"},"ts":1585690107000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: it isn't, is what i'm saying","msgtype":"m.text"},"ts":1585690137000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"gus's point here is really good.","msgtype":"m.text"},"ts":1585690185000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1585690203000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reverts PR to original state","msgtype":"m.emote"},"ts":1585690248000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585690258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"👏","msgtype":"m.text"},"ts":1585690258000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens I am pretty sure that's what you already had, at least in real engines","msgtype":"m.text"},"ts":1585690264000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`/^[𝒜]$/.test('\\ud835')` is \"true\"","msgtype":"m.text"},"ts":1585690317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think bmeck suggested we should set up specifying optional chaining and member expressions using some sort of macro syntax","msgtype":"m.text"},"ts":1585690328000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: I'm not talking about engines?","msgtype":"m.text"},"ts":1585690335000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i'd be in favor of doing such a thing","msgtype":"m.text"},"ts":1585690339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mathiasbynens I think also per spec, sorry","msgtype":"m.text"},"ts":1585690340000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think the main question for me is how `...` in `(?<...>)` is interpreted.  If it's an identifier, then `\\u\\u` should be disallowed.  If it's a string, then `0` should be allowed.","msgtype":"m.text"},"ts":1585690349000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Bakkot: I'm talking about neither of those things :/","msgtype":"m.text"},"ts":1585690355000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens sorry, I am confused then","msgtype":"m.text"},"ts":1585690364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot If mathiasbynens range was written with the last codepoint in the range as two \\u escapes, do you agree with what he says the range becomes?","msgtype":"m.text"},"ts":1585690379000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"lol, \"@jridgewell pushed 0 commits.\"","msgtype":"m.text"},"ts":1585690389000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"msaboff yes, my point is that it was already that thing to start with, I'm pretty sure","msgtype":"m.text"},"ts":1585690401000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: waldemar described an asciifier that takes a regexp-stored-as-string and turns it into an actual piece of sourcetext representing a regexp literal, WITHOUT knowing whether that literal will get a `u` flag or not","msgtype":"m.text"},"ts":1585690426000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"With the /u flag it is completely different.","msgtype":"m.text"},"ts":1585690432000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"mathiasbynens yes?","msgtype":"m.text"},"ts":1585690436000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the consensus to the optional chaining for hash names was allow everywhere, right?","msgtype":"m.text"},"ts":1585690436000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"msaboff it only becomes that thing in non-unicode regexes","msgtype":"m.text"},"ts":1585690445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(i'm confused by the second sentence in the consensus in the notes)","msgtype":"m.text"},"ts":1585690447000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yes","msgtype":"m.text"},"ts":1585690450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think I pushed -2 commits.","msgtype":"m.text"},"ts":1585690452000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"in unicode regexes, it is still the single range","msgtype":"m.text"},"ts":1585690453000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think we agree","msgtype":"m.text"},"ts":1585690468000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"let me write out the four cases here","msgtype":"m.text"},"ts":1585690479000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: that's my point. the asciifier already needs to either a) know whether or not it gets the u flag or b) go out of its way to produce polyglot patterns that work properly in either case","msgtype":"m.text"},"ts":1585690494000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens can it not just unconditionally put the two surrogate halves?","msgtype":"m.text"},"ts":1585690512000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is what I am having trouble with.","msgtype":"m.text"},"ts":1585690518000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if not, why not?","msgtype":"m.text"},"ts":1585690527000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what case does that break, and why does it break it?","msgtype":"m.text"},"ts":1585690531000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So is waldemar's point that both `/(?<𝒜>/` and `/(?<𝒜>/u` asciify to the same thing?","msgtype":"m.text"},"ts":1585690541000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I think that an asciifier must know if the u flag is present.","msgtype":"m.text"},"ts":1585690544000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"(I'm missing a `)` in those examples)","msgtype":"m.text"},"ts":1585690559000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"that would behave differently with u vs non-u","msgtype":"m.text"},"ts":1585690577000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah, are we really saying that there's currently ALWAYS a way to write a regexp-as-string without knowing whether it's unicode?","msgtype":"m.text"},"ts":1585690585000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens _what_ would behave differently with `u` vs non-`u`?","msgtype":"m.text"},"ts":1585690590000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like, why would that invariant ever exist?","msgtype":"m.text"},"ts":1585690593000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: another example: `'[💩-💫]'`","msgtype":"m.text"},"ts":1585690597000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: what would you output that works in both `u` and non-`u`?","msgtype":"m.text"},"ts":1585690612000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"that's never a legal non-u regex, so you don't have to worry about it","msgtype":"m.text"},"ts":1585690622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: you're changing the goalposts though, the asciifier needs to produce output that's valid for either, since it doesn't know!","msgtype":"m.text"},"ts":1585690649000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://mathiasbynens.be/notes/es6-unicode-regex is full of examples","msgtype":"m.text"},"ts":1585690662000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I think we are heading into the weeds here.  Lets focus on the named capture group IDs.","msgtype":"m.text"},"ts":1585690682000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"yes, please","msgtype":"m.text"},"ts":1585690689000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"mathiasbynens outputting '[\\uXXX\\uXXX-\\uXXX\\uXXX]' will preserve the semantics: in the non-u case it is (still) an error, and in the u case it is (still) a single range","msgtype":"m.text"},"ts":1585690697000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so your asciifier has preserved the semantics","msgtype":"m.text"},"ts":1585690708000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is what it needed to do","msgtype":"m.text"},"ts":1585690711000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(sorry, four Xs, obviously)","msgtype":"m.text"},"ts":1585690720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"When you're not in a named capture group, your asciifyer can output `\\u\\u`.  I think that's fine.","msgtype":"m.text"},"ts":1585690754000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"littledan: github has a \"template\" feature; you don't need to fork it, you *should* click the \"use this template\" button","msgtype":"m.text"},"ts":1585690769000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Thee is the interesting case of a RegExp with a NCG ID with non-BMP characters, but I don't think that is too controversial","msgtype":"m.text"},"ts":1585690771000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"the whole asciifier argument doesn't make sense. it's possible to produce patterns that work in either case, but it needs some work. capture group IDs would not be unique","msgtype":"m.text"},"ts":1585690782000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"littledan: as opposed to making a totally disconnected repo","msgtype":"m.text"},"ts":1585690786000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mathiasbynens... what?","msgtype":"m.text"},"ts":1585690797000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: Oh cool. Could we point people to this?","msgtype":"m.text"},"ts":1585690801000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: it's a big green button on the template repo","msgtype":"m.text"},"ts":1585690809000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"repeating myself: in order to represent in ASCII a regular expression with a non-BMP capture group name, it is necessary to allow *at least one of* `/(?<\\ud835\\udc9c>.)/` with surrogate-pair semantics or `/(?<\\u{1d49c}>.)/` with code point semantics. I am against the latter because of inconsistency with \\u{1d49c} in non-Unicode regexes outside of capture groups.","msgtype":"m.text"},"ts":1585690822000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"littledan: https://github.com/tc39/template-for-proposals","msgtype":"m.text"},"ts":1585690836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"heh yeah that's really clear","msgtype":"m.text"},"ts":1585690841000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1585690844000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"mathiasbynens I am confused. my point is, currently you can write a regex asciifier which preserves semantics easily. if you have to parse it and treat named capture groups and non-named-capture groups, it is now harder. do you disagree with either of those two sentences? if so, which and why?","msgtype":"m.text"},"ts":1585690854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"littledan: np, the feature didn't exist when i first made the template","msgtype":"m.text"},"ts":1585690863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hmm, should we tell people to use that button in the #create-your-proposal-repo section?","msgtype":"m.text"},"ts":1585690881000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ideally, but i wasn't sure the committee had consensus on recommending that template yet","msgtype":"m.text"},"ts":1585690894000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gibson042 other people are in favor of allowing `/(?<\\u{1d49c}>.)/`, it sounds like, and damn the inconsistency (which seems fair enough to me; no human will ever write that code so the inconsistency isn't really a problem)","msgtype":"m.text"},"ts":1585690904000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: I don't care about the inconsistency you mention.  I find it more inconsistent that we are introducing a context in which we allow surrogate pairs as identifier names.","msgtype":"m.text"},"ts":1585690906000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Bakkot: \"easily\"? you got the `<U+0>-<U+10FFFF>` wrong","msgtype":"m.text"},"ts":1585690938000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"gibson042 The problem is that \\ud835\\udc9c is not valid for a JS identifier but \\u{1d49c} is.","msgtype":"m.text"},"ts":1585690939000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"So I'm +1 to \"damn the inconsistency\"","msgtype":"m.text"},"ts":1585690950000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"mathiasbynens I still do not understand how I got it wrong.","msgtype":"m.text"},"ts":1585690951000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: what would you output?","msgtype":"m.text"},"ts":1585690969000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens please give an example of a regex where the output of my algorithm does not have the same semantics as the input.","msgtype":"m.text"},"ts":1585690969000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So you want different syntax for specifying an ID inthe two contexts","msgtype":"m.text"},"ts":1585690979000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"mathiasbynens '[\\uXXXX\\uXXXX-\\uXXXX\\uXXXX]'","msgtype":"m.text"},"ts":1585690994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: what would \\uXXXX\\uXXXX look like for U+0000 exactly?","msgtype":"m.text"},"ts":1585691010000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens sorry, yes, for BMP code points it would just be `\\uXXXX`, of course","msgtype":"m.text"},"ts":1585691024000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, `\\u0000`","msgtype":"m.text"},"ts":1585691033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's not a working regexp :/","msgtype":"m.text"},"ts":1585691060000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\"where the output of my algorithm does not have the same semantics as the input\" is key","msgtype":"m.text"},"ts":1585691064000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens _neither was the input_","msgtype":"m.text"},"ts":1585691075000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the semantics are preserved","msgtype":"m.text"},"ts":1585691083000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Waldemar is saying his asciifier doesn't know which output flags are used","msgtype":"m.text"},"ts":1585691085000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"or, wait, hang on","msgtype":"m.text"},"ts":1585691095000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait why isn't it a working regex","msgtype":"m.text"},"ts":1585691101000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the input _is_ valid","msgtype":"m.text"},"ts":1585691109000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I keep getting confused between this and the '[💩-💫]' case","msgtype":"m.text"},"ts":1585691113000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens why isn't it a working regex","msgtype":"m.text"},"ts":1585691123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Do we have agreement on allowing `/(?<\\u{1d49c}>\\u{1d49c})/` with the inconsistency about `\\u{1d49c}` being interpreted differently in the capture group versus the main regex?","msgtype":"m.text"},"ts":1585691128000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"back in 10 mins!","msgtype":"m.text"},"ts":1585691137000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"sffc gibson042 explicitly objected to that","msgtype":"m.text"},"ts":1585691142000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as did Waldemar, and probably more strongly than me if we're being honest","msgtype":"m.text"},"ts":1585691163000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"sffc I'm fine with that","msgtype":"m.text"},"ts":1585691186000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"that's a pretty strong point of contention among the committee then :(","msgtype":"m.text"},"ts":1585691187000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: so you'd do something like [\\0-\\uLEAD\\uTRAIL], which creates a range between U+0000 and U+LEAD, and then adds U+TRAIL as a lone character","msgtype":"m.text"},"ts":1585691191000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens right, which is what your input regex did.","msgtype":"m.text"},"ts":1585691199000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: no, the input is a string, which represents a regex, per Waldemar's description","msgtype":"m.text"},"ts":1585691227000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"The alternative from my perspective is if we allow `/(?<0>.)/` and interpret \"0\" as a string, such that you can do `.groups[\"0\"]`","msgtype":"m.text"},"ts":1585691232000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"or rather: right, that's what it does in the non-u case, which is what the input regex did in the non-u case. in the u case it creates a single range, which is what the input regex did in the u case.","msgtype":"m.text"},"ts":1585691239000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: you cannot say that's what the input did, because you cannot know this without knowing whether it's `u` vs non-`u`","msgtype":"m.text"},"ts":1585691250000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"which this supposed asciifier doesn't","msgtype":"m.text"},"ts":1585691262000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so you cannot produce a broken pattern, you have to make something that works","msgtype":"m.text"},"ts":1585691283000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens the job of the asciifier is to preserve the semantics. that is it's only job. if the input was going to be used with `u`, the semantics are preserved. if the input was going to be used without `u`, the semantics are preserved. so the semantics are preserved either way.","msgtype":"m.text"},"ts":1585691307000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"do you disagree about the job of the asciifier, or do you disagree that in both branches the semantics are the same?","msgtype":"m.text"},"ts":1585691355000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"What would an asciifier do with","msgtype":"m.text"},"ts":1585691366000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"let s = \"[\\0-<U+10fff>]\";","msgtype":"m.text"},"ts":1585691366000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"r = new RegExp(s, \"u\")","msgtype":"m.text"},"ts":1585691367000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585691378000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Where the <U+10FFFF> is the actual character","msgtype":"m.text"},"ts":1585691392000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff `let s = [\\u0000-\\uTRAIL\\uLEAD]\"`","msgtype":"m.text"},"ts":1585691397000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"r then has the same semantics","msgtype":"m.text"},"ts":1585691412000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it does not lol","msgtype":"m.text"},"ts":1585691423000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Can someone address my question about whether the capture group is a string, an identifier, or something special?  My understanding is that if we go with what gibson042 and waldemar prefer, then we're introducing a new context where surrogate pairs are allowed as identifiers, but other strings are not.","msgtype":"m.text"},"ts":1585691438000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"sffc: it (should be) an identifier","msgtype":"m.text"},"ts":1585691496000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Bakkot: oh you meant a leading quote there","msgtype":"m.text"},"ts":1585691498000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: Bakkot's point is that for both Unicode and non-Unicode regular expressions, `[\\0-\\ud835\\udc9c]` is equivalent to `[\\0-𝒜]` so that contextual awareness is irrelevant","msgtype":"m.text"},"ts":1585691501000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"mathiasbynens yes, leading quote, of course","msgtype":"m.text"},"ts":1585691542000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah what gibson042 said","msgtype":"m.text"},"ts":1585691555000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok the disconnect is, i've been thinking of an asciifier that's like a JS function that accepts a string","msgtype":"m.text"},"ts":1585691572000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"whereas you see it as a tool operating on the source code","msgtype":"m.text"},"ts":1585691586000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"gibson042: if the capture group name is an identifier, then how do you justify the inconsistency of allowing `\\u\\u` in this context but not in a `let \\u\\u` context?","msgtype":"m.text"},"ts":1585691595000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I'd prefer it in both, but would justify the inconsistency by pointing out that this is an encoding inside a literal","msgtype":"m.text"},"ts":1585691643000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"if that's what you're doing, you could just transform any such group names globally, right?","msgtype":"m.text"},"ts":1585691649000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"much like variable name minification","msgtype":"m.text"},"ts":1585691658000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but not without changing potentially observable semantics, sure","msgtype":"m.text"},"ts":1585691689000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"and the prohibition against non-IdentifierNames could in principle be relaxed without changing my position","msgtype":"m.text"},"ts":1585691713000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: ok, so we agree that we have an inconsistency with both outcomes.","msgtype":"m.text"},"ts":1585691733000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"to be fair even the asciifier would have observable semantics :P","msgtype":"m.text"},"ts":1585691734000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: right...","msgtype":"m.text"},"ts":1585691748000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"The rule in https://tc39.es/ecma262/#prod-RegExpIdentifierName resolves to RegExpIdentifierStart folowed by RegExpIdentifierPart, but they have the same productions as IdentifierStart and IdentifierPart","msgtype":"m.text"},"ts":1585691748000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"`/[\\0-\\ud835\\udc9c]/u` is not equivalent to `/[\\0-𝒜]/u`","msgtype":"m.text"},"ts":1585691749000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"changes","msgtype":"m.text"},"ts":1585691751000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"because you changed the length of the file","msgtype":"m.text"},"ts":1585691763000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"and .source and .toString() etc.","msgtype":"m.text"},"ts":1585691772000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"jridgewell how sure of that claim are you","msgtype":"m.text"},"ts":1585691777000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sffc: it's an inconsistency of the same sort that allows `\\n` but not raw U+000A in string literals","msgtype":"m.text"},"ts":1585691778000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I just tested in Chrome","msgtype":"m.text"},"ts":1585691789000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell what test did you run?","msgtype":"m.text"},"ts":1585691810000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jridgewell: for what input do you get different results?","msgtype":"m.text"},"ts":1585691811000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: that's not really observable in JS tho","msgtype":"m.text"},"ts":1585691814000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Nope, never mind, I forgot to change it.","msgtype":"m.text"},"ts":1585691819000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I hit up twice. 😳","msgtype":"m.text"},"ts":1585691831000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I meant function length","msgtype":"m.text"},"ts":1585691841000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb:^","msgtype":"m.text"},"ts":1585691845000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1585691848000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"gibson042 What is the behavior of `/(?<\\ud835\\udc9c>.)/` in your preference?  Does it throw?","msgtype":"m.text"},"ts":1585691880000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"ljharb: function tostring, and source + toString on the regexp too","msgtype":"m.text"},"ts":1585691885000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sffc: no, it is equivalent to `/(?<𝒜>.)/`","msgtype":"m.text"},"ts":1585691932000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: ah true","msgtype":"m.text"},"ts":1585691936000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mathiasbynens: also true","msgtype":"m.text"},"ts":1585691942000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it is how you express non-BMP capture group names without using non-ASCII source","msgtype":"m.text"},"ts":1585691962000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: right, so you consider `/(?<𝒜>.)/` a valid regex that produces a group name of \"𝒜\"?","msgtype":"m.text"},"ts":1585691992000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"mathiasbynens what did you mean by \"transform any such group names globally\"?","msgtype":"m.text"},"ts":1585691998000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just like `/(\\ud835\\udc9c/` is how you express non-BMP matches without using non-ASCII source","msgtype":"m.text"},"ts":1585691999000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585692006000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"err, just like `/\\ud835\\udc9c/` is how you express non-BMP matches without using non-ASCII source","msgtype":"m.text"},"ts":1585692029000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: what do you think about allowing non-IdentifierNames in the regex capture group name, as gibson042 suggested would be compatible with his position?","msgtype":"m.text"},"ts":1585692077000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Bakkot: like if the tool sees a group named `𝒜` it could rename that to `__renamed_1` and give `match.groups.𝒜` the same treatment","msgtype":"m.text"},"ts":1585692078000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens sure, but `x = match.groups; x.𝒜` is harder","msgtype":"m.text"},"ts":1585692118000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yeah","msgtype":"m.text"},"ts":1585692125000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"and by \"harder\" I mean \"uncomputable\"","msgtype":"m.text"},"ts":1585692126000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think we are letting this asciifier argument have too much sway.  Do we think this is a major use case?","msgtype":"m.text"},"ts":1585692159000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"sffc I would not want to allow capture group names which, when considered as code points, are not identifiers","msgtype":"m.text"},"ts":1585692170000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff in honesty I think it's pretty much the only use case.","msgtype":"m.text"},"ts":1585692190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff that is, I don't think a human is ever going to write unicode escape sequences in group names. it's always going to be tools.","msgtype":"m.text"},"ts":1585692208000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, my preference is to make life easy for tools.","msgtype":"m.text"},"ts":1585692223000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so just allow \\u{} everywhere","msgtype":"m.text"},"ts":1585692244000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if that's your only goal","msgtype":"m.text"},"ts":1585692258000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: we can't do that in non-u regexps OUTSIDE of named groups, but within named groups yesssssssssssssss I'm all for it","msgtype":"m.text"},"ts":1585692275000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I don't know how prevalent of a use case it is, but I believe that humans WILL write unicode escapes for group names.  Not common but likely given the use of poor dev tools.","msgtype":"m.text"},"ts":1585692280000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff it's pretty common; I have seen multiple bespoke JS-asciification tools in use at enterprises (all broken to some extent, but we don't need to make them more broken)","msgtype":"m.text"},"ts":1585692335000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra I'm for it in NCG IDs as well.","msgtype":"m.text"},"ts":1585692335000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"michaelficarra as mathiasbynens says, you can't do it outside of group names. so now the tools have to parse the regex, instead of blindingly replacing everything in the regex.","msgtype":"m.text"},"ts":1585692356000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there not just a babel plugin","msgtype":"m.text"},"ts":1585692357000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: can you explain why you would not want to allow non-identifiers in capture group names?","msgtype":"m.text"},"ts":1585692373000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"so sffc and maybe mathiasbynens are against allowing `/(?<\\ud835\\udc9c>.)/` because of IdentifierName, and Waldmar and I are against allowing `/(?<\\u{1d49c}>.)/` because of non-/u regexp semantics","msgtype":"m.text"},"ts":1585692377000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"actually doesn't babel shell out to a regex parser","msgtype":"m.text"},"ts":1585692382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but at least one of them must be allowed in order to support all-ASCII source","msgtype":"m.text"},"ts":1585692392000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: that's my understanding of the situation, yes","msgtype":"m.text"},"ts":1585692411000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I just want (or would like) to be able to copy-paste 𝒜𝒜𝒜 in `/(?<𝒜𝒜𝒜>.)/` and the corresponding `match.groups.𝒜𝒜𝒜`","msgtype":"m.text"},"ts":1585692413000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"in all cases","msgtype":"m.text"},"ts":1585692417000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot What would an asciifier do for the \"let \\u{1d49c};\" case?","msgtype":"m.text"},"ts":1585692423000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"that's already ASCII, so it would leave it alone","msgtype":"m.text"},"ts":1585692443000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"sffc: two reasons: one is that having `>` gets weird, and the other is that having numerics like `0` gets weird","msgtype":"m.text"},"ts":1585692499000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Okay, then what does an asciifier do for \"let 𝒜;\"?  Won't it also convert it to \"let \\u{1d49c};\"?","msgtype":"m.text"},"ts":1585692500000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"If so, it can't do that without context.","msgtype":"m.text"},"ts":1585692530000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Bakkot mathiasbynens: sorry yes that's what I meant by \"everwhere\"; \"regardless of u flag, inside NCGs\"","msgtype":"m.text"},"ts":1585692534000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes, it would have to","msgtype":"m.text"},"ts":1585692538000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"So the only weird context is in the pattern part of a RegExp?","msgtype":"m.text"},"ts":1585692568000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"unless we allow surrogate pairs wherever \\u{…} is allowed, an asciifier must parse","msgtype":"m.text"},"ts":1585692569000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"must tokenize","msgtype":"m.text"},"ts":1585692583000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"doesn't have to do a full parse","msgtype":"m.text"},"ts":1585692586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042 I think that is a breaking change for nomral identifiers.","msgtype":"m.text"},"ts":1585692597000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"(except as necesary for tokenization)","msgtype":"m.text"},"ts":1585692598000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there any possible (?< in regex that isn't a group name","msgtype":"m.text"},"ts":1585692615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: +1","msgtype":"m.text"},"ts":1585692621000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"devsnek: `\\(?<`","msgtype":"m.text"},"ts":1585692623000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok excluding escapes","msgtype":"m.text"},"ts":1585692635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"'[(?<]'","msgtype":"m.text"},"ts":1585692655000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think so besides the escape.","msgtype":"m.text"},"ts":1585692658000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Bakkot: wouldn't that require a parse","msgtype":"m.text"},"ts":1585692665000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not just tokenize","msgtype":"m.text"},"ts":1585692667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to know you're inside a capture group","msgtype":"m.text"},"ts":1585692679000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1585692684000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"character set","msgtype":"m.text"},"ts":1585692717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whatever you call brackets","msgtype":"m.text"},"ts":1585692720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"character class","msgtype":"m.text"},"ts":1585692723000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hmm interesting","msgtype":"m.text"},"ts":1585692731000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"devsnek why?","msgtype":"m.text"},"ts":1585692819000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"What should an asciifier do with:","msgtype":"m.text"},"ts":1585692831000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"let first = \"\\0\";","msgtype":"m.text"},"ts":1585692831000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"let last  = \"𝒜\";","msgtype":"m.text"},"ts":1585692833000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"cuz you have to know whether you're parsing a group name or not","msgtype":"m.text"},"ts":1585692841000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"theoretically","msgtype":"m.text"},"ts":1585692853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"let r = new RegExp(\"[\" + first + \"-\" + last + \"]\")","msgtype":"m.text"},"ts":1585692870000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"devsnek: my desired state is, we end up such that you can replace any non-bmp in any regex (or string) with two escaped surrogates","msgtype":"m.text"},"ts":1585692872000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff you can also safely replace non-BMP code points in strings with two escaped surrogate halves","msgtype":"m.text"},"ts":1585692893000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean if we went with \"whatever identifiers do\"","msgtype":"m.text"},"ts":1585692905000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek oh, yes. that's my point; that's what I am hoping to avoid.","msgtype":"m.text"},"ts":1585692917000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's also worth noting that `let \\u0061\\u0061` *is* valid, but `let \\ud835\\udc9c` is not simply because code unit U+D835 is not treated as part of a surrogate pair","msgtype":"m.text"},"ts":1585692923000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: I agree","msgtype":"m.text"},"ts":1585692950000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"That doesn't work for let r = new RegExp(\"(?<\" + last + \">.)\");","msgtype":"m.text"},"ts":1585692975000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff how does it not?","msgtype":"m.text"},"ts":1585692997000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"If the asciifyer isn't able to have different behavior based on whether you are in a capture group or whether you are in a Unicode vs non-Unicode regex, then you need to expand to `\\u\\u`.  Are those two restrictions required for the asciifyer?","msgtype":"m.text"},"ts":1585693023000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"let last = '\\uD835\\uDC9C'; // which is === '𝒜'","msgtype":"m.text"},"ts":1585693027000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I doubt that the two surrogate escapes are ID_Start and ID_Continue","msgtype":"m.text"},"ts":1585693037000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1585693048000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"there won't be any escapes by the time you put it into the RegExp at runtime","msgtype":"m.text"},"ts":1585693073000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sffc in practice, most asciifiers I see in the wild are bespoke and at least a little bit broken because they are not aware of all the absurd edge cases in JS. I am hopeful we can minimize new sharp edges.","msgtype":"m.text"},"ts":1585693140000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if `let \\ud835\\udc9c` were interpreted analogously to `\"\\ud835\\udc9c\"`, with the two escapes recognized as a single code point, then an asciifier could always replace non-ASCII code points with \\u…\\u… surrogate pairs","msgtype":"m.text"},"ts":1585693169000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: non-Unicode regexes already have strange behavior when you embed Unicode characters.  We're making the behavior no less strange.","msgtype":"m.text"},"ts":1585693185000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"in general, it seems bad to expose the concept of surrogates in more places","msgtype":"m.text"},"ts":1585693201000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"we're not talking about changing the semantics of non-Unicode regexes with non-ASCII characters","msgtype":"m.text"},"ts":1585693213000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"+1 mathiasbynens","msgtype":"m.text"},"ts":1585693222000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I actually disagree with that, but it's a bit of a tangent anyway","msgtype":"m.text"},"ts":1585693245000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"sffc we are making the behavior harder for tools to get right, and no harder for humans to get right","msgtype":"m.text"},"ts":1585693253000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: asciifyers aside, what should `/(?<\\u{1d49c}>.)/` do in your opinion?","msgtype":"m.text"},"ts":1585693307000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"it should be recognized as equivalent to `/(?<u{1d49c}>.)/`, i.e. an attempt to create a regex with a capture group named \"u{1d49c}\"","msgtype":"m.text"},"ts":1585693392000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1585693406000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do not like that option","msgtype":"m.text"},"ts":1585693409000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is currently invalid because group names must be IdentifierNames","msgtype":"m.text"},"ts":1585693416000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"just like `/\\u{1d49c}/` matches only \"u{1d49c}\"","msgtype":"m.text"},"ts":1585693448000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"named captures should have been `u`-only","msgtype":"m.text"},"ts":1585693484000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"IOW, \"\\u{\" has no special semantics in non-Unicode regular expressions","msgtype":"m.text"},"ts":1585693485000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"so the effective answer is, it should be an error, right?","msgtype":"m.text"},"ts":1585693500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585693507000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ok good that's not so bad then","msgtype":"m.text"},"ts":1585693533000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathias +1","msgtype":"m.text"},"ts":1585693566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the spec machinery would be essentially \"UTF16Decode, then require the result to conform with IdentifierName\"","msgtype":"m.text"},"ts":1585693586000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"i'd rather push proper unicode escapes into old regex than push old escapes into identifiers","msgtype":"m.text"},"ts":1585693659000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you *can't* push them all the way in","msgtype":"m.text"},"ts":1585693675000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"devsnek: would be amazing if that was web compatible :o","msgtype":"m.text"},"ts":1585693681000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"devsnek: they already exist in identifiers, they're just arguably handled wrong","msgtype":"m.text"},"ts":1585693688000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i meant in the group name","msgtype":"m.text"},"ts":1585693699000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not generally","msgtype":"m.text"},"ts":1585693701000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh :-(","msgtype":"m.text"},"ts":1585693706000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585693709000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ah yes, 100% agree","msgtype":"m.text"},"ts":1585693719000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"tfw you confuse three people all at once","msgtype":"m.text"},"ts":1585693722000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in different ways","msgtype":"m.text"},"ts":1585693730000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu: Out of curiosity how did this API come up?","msgtype":"m.text"},"ts":1585693742000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Was it from talking to graphics peoples?","msgtype":"m.text"},"ts":1585693750000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"gibson042: sorry for being a broken record, but why is that inconsistency (of \\u{...} being allowed in named groups, but not elsewhere, in non-u regexps) too much for you?","msgtype":"m.text"},"ts":1585693803000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"^ and is this an objection and not just a dispreference?","msgtype":"m.text"},"ts":1585693850000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"gibson042: i don't understand how that apparently outweighs the `/(?<𝒜𝒜𝒜>.)/u` && `match.groups.𝒜𝒜𝒜` consistency, which seems much more common","msgtype":"m.text"},"ts":1585693884000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: wait, what inconsistency","msgtype":"m.text"},"ts":1585693908000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"has anyone suggested `/(?<𝒜𝒜𝒜>.)/u` && `match.groups.𝒜𝒜𝒜` not work?","msgtype":"m.text"},"ts":1585693921000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1585693931000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"in plenary when it was suggested that we could make \\u{...} work in group names within non-u RegExps","msgtype":"m.text"},"ts":1585693966000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1585693975000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I am fine with that fwiw)","msgtype":"m.text"},"ts":1585693983000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: also, same question for you: why is the inconsistency of `\\u\\u` being allowed in named group names, but not in identifiers outside of literals, too much for you?","msgtype":"m.text"},"ts":1585693990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042 said that'd be inconsistent with \\u{} elsewhere in non-u RegExps (which is true)","msgtype":"m.text"},"ts":1585693993000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: the way i see it, we have to choose between the two, and so we should choose based on which pattern is more common","msgtype":"m.text"},"ts":1585694044000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"It's too much because it adds *even more* complexity to an already overwhelming part of the language, and does so for very little benefit IMO. This is a strong dispreference, but I (though not necessarily Waldemar) would yield to supermajority.","msgtype":"m.text"},"ts":1585694052000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"mathiasbynens: why do you see it that we have to choose between the two?","msgtype":"m.text"},"ts":1585694080000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: my preference is to allow both (in both kind of regexes), as we do in strings and `u` regexs","msgtype":"m.text"},"ts":1585694109000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sffc and maybe mathiasbynens are against allowing `/(?<\\ud835\\udc9c>.)/` because of IdentifierName, and Waldmar and I are against allowing `/(?<\\u{1d49c}>.)/` because of non-Unicode regexp semantics... but at least one of them must be allowed in order to support all-ASCII source","msgtype":"m.text"},"ts":1585694134000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"this makes life easiest for tooling authors and creates in expectation zero problems for any other humans, I would guess","msgtype":"m.text"},"ts":1585694145000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what gibson said ^","msgtype":"m.text"},"ts":1585694169000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1585694171000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did i get that wrong?","msgtype":"m.text"},"ts":1585694177000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah I think that's correct","msgtype":"m.text"},"ts":1585694182000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would like us to think first about what the actual effects of our decisions on future humans will be","msgtype":"m.text"},"ts":1585694198000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and i agree on \"zero problems for humans\"","msgtype":"m.text"},"ts":1585694202000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i just don't like to make the language uglier by allowing surrogates in more places","msgtype":"m.text"},"ts":1585694219000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I appreciate that preference, I just think it should be outweighed by the relatively substantial likelihood that this decision leads to someone shipping broken code to real users as a result of tooling which is not aware of this edge case","msgtype":"m.text"},"ts":1585694263000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would hope (perhaps naively) that future humans always use the `u` flag","msgtype":"m.text"},"ts":1585694264000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"some will, many won't","msgtype":"m.text"},"ts":1585694277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"isn't it worse to have `\\ud835\\udc9c` sometimes be two code points and sometimes one?","msgtype":"m.text"},"ts":1585694279000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: oh, no, not from the graphics folks","msgtype":"m.text"},"ts":1585694376000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gibson042: hmm?","msgtype":"m.text"},"ts":1585694390000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Interesting, where did it come up?","msgtype":"m.text"},"ts":1585694399000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"regarding \"i just don't like to make the language uglier by allowing surrogates in more places\", I think it's worse to have more places where `\\ud835\\udc9c` represents two code points rather than one","msgtype":"m.text"},"ts":1585694453000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"benjamn: wait, import.meta inherits from Module.prototype in node??","msgtype":"m.text"},"ts":1585694480000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"benjamn: or, you might want it to","msgtype":"m.text"},"ts":1585694486000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: surma brought it up in working with bitmaps pulling out the A's instead of the RGB's, i think is the direct motivating example","msgtype":"m.text"},"ts":1585694488000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1585694500000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: no, but Module.prototype was a useful feature of CommonJS","msgtype":"m.text"},"ts":1585694500000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"gibson042: if it's forbidden it doesn't really represent anything","msgtype":"m.text"},"ts":1585694513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"keith_miller: and indeed, the plan for RGBs was to make 3 views for each channel","msgtype":"m.text"},"ts":1585694516000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because `/(?<\\u0061\\u0061>.)/` is valid now and will presumably remain valid","msgtype":"m.text"},"ts":1585694573000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: i don't follow. how does allowing \\{...} in non-u RegExp group names increase the number of cases where `\\ud835\\udc9c` represents 2 code points?","msgtype":"m.text"},"ts":1585694575000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"keith_miller: there's a category mismatch for me for the graphics use cases needing more expressivity -- simple strides exist in other languages and enjoy use, despite lacking the extra expressivity","msgtype":"m.text"},"ts":1585694579000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gibson042: that is neither valid nor invalid now (per spec), and could be made invalid without breaking anyone (I suspect)","msgtype":"m.text"},"ts":1585694606000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"keith_miller: so maybe the high-order bit here is actually how much implementation burden is there, given that this is intended to be a smallish, incremental ergonomic win","msgtype":"m.text"},"ts":1585694610000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: hm, that would be another deviation from Identifier though","msgtype":"m.text"},"ts":1585694641000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"right. So rejecting `/(?<\\ud835\\udc9c>.)/` can only be on the basis of treating it as two code points","msgtype":"m.text"},"ts":1585694655000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: that is, i'm pushing back against the framing that satisfying all graphics use cases is a pre-req","msgtype":"m.text"},"ts":1585694669000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mathiasbynens \\ud835\\udc9c is not legal in identifiers, is it?","msgtype":"m.text"},"ts":1585694709000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which it is not in the same regex outside of naming a group","msgtype":"m.text"},"ts":1585694712000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: no","msgtype":"m.text"},"ts":1585694715000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens wait which \"no\"","msgtype":"m.text"},"ts":1585694721000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"no, it is not legal\" or \"no, you're mistaken, it is legal\"","msgtype":"m.text"},"ts":1585694743000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: escaped surrogate pairs in identifiers == not valid","msgtype":"m.text"},"ts":1585694750000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"`\\ud835\\udc9c` is not a valid IdentifierName because it is interpreted as two code units, neither of which are in a valid class","msgtype":"m.text"},"ts":1585694754000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"You can already access a non-BMP property using foo[\"\\ud835\\udc9c\"].","msgtype":"m.text"},"ts":1585694762000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"shu: I'd roughly agree with that assessment but I phrase it as the cost is roughly known/fixed but there may be enough use cases to justify it","msgtype":"m.text"},"ts":1585694776000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"(it's v late and i've been v difficult here, apologies and cheers for bearing with me so far)","msgtype":"m.text"},"ts":1585694782000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"err, two code *points*","msgtype":"m.text"},"ts":1585694788000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: yeah, point taken","msgtype":"m.text"},"ts":1585694790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if it were interpreted as a surrogate pair for a single code point, then it would be a valid identifier","msgtype":"m.text"},"ts":1585694800000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"RegExes should work like strings","msgtype":"m.text"},"ts":1585694805000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"I'm not trying to say you have to solve all use cases only that there are still a lot of use cases that are not very ergonomic anyway","msgtype":"m.text"},"ts":1585694816000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"which is what happens inside strings and inside regular expression literals outside of naming capture groups","msgtype":"m.text"},"ts":1585694822000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"with this api*","msgtype":"m.text"},"ts":1585694826000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: right, so it comes down to how big is the set of use cases that would be made ergonomic, and how much work do we have to do for it","msgtype":"m.text"},"ts":1585694839000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I just checked and the current spec only allows unicode escapes in NGC Identifiers for Unicode.  And it allows both \\uXXXX\\uXXXX and \\u{XXXXX} for NCG identifiers.","msgtype":"m.text"},"ts":1585694848000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585694849000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I think we're on the same page","msgtype":"m.text"},"ts":1585694860000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: which are both pretty valid; all the use cases on the explainer now are graphics, and if graphics folks are like \"lol no\" then that's just bad motivation. if we can't find better ones then yeah, just do it in user code","msgtype":"m.text"},"ts":1585694870000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wsdferdksl: regexes have different concepts of what constitutes a \"character\" depending on the `u` flag, so strings/regexps don't map nicely","msgtype":"m.text"},"ts":1585694900000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"msaboff: the current spec has an early error for \"the SV of RegExpUnicodeEscapeSequence\", which is not an operation which is defined","msgtype":"m.text"},"ts":1585694921000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm talking about non-u regexes","msgtype":"m.text"},"ts":1585694922000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"msaboff: sorry, what is NCG?","msgtype":"m.text"},"ts":1585694930000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"named capture group","msgtype":"m.text"},"ts":1585694935000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah duh","msgtype":"m.text"},"ts":1585694939000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Both those and strings work with 16-bit chunks","msgtype":"m.text"},"ts":1585694941000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Named Capture Group","msgtype":"m.text"},"ts":1585694951000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"regexes of both kinds recognize surrogate pairs as single code points outside of naming capture groups","msgtype":"m.text"},"ts":1585694955000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1585694965000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"no, look at atoms","msgtype":"m.text"},"ts":1585694976000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"character classes too","msgtype":"m.text"},"ts":1585694984000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042 in practice pretty much in reality no","msgtype":"m.text"},"ts":1585694994000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"gibson042: e.g. \\uLEAD\\TRAIL{2}","msgtype":"m.text"},"ts":1585694998000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://mathiasbynens.be/notes/es6-unicode-regex has some examples","msgtype":"m.text"},"ts":1585695057000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"this is veering into semantics now; non-Unicode regexes operate on UTF-16 code units","msgtype":"m.text"},"ts":1585695100000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585695125000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"wsdferdksl mathiasbynens gibson042: I don't think we're likely to resolve this today. are you all OK with the committee approving the current spec, including this oversight, as the candidate for 2020, and trying to resolve this later?","msgtype":"m.text"},"ts":1585695142000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1585695152000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"We should resolve this","msgtype":"m.text"},"ts":1585695161000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":" I am, since it's not new anyway","msgtype":"m.text"},"ts":1585695161000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: I see no rush tbh. I'd rather resolve it properly","msgtype":"m.text"},"ts":1585695169000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"wsdferdksl: given that we don't appear to be close to consensus, how can we resolve it?","msgtype":"m.text"},"ts":1585695193000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess we could call a formal vote for this question","msgtype":"m.text"},"ts":1585695200000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"There is only one solution that works for ASCIIfiers, and it's not difficult to do.","msgtype":"m.text"},"ts":1585695207000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"let's keep the spec as-is until we can get proper consensus (which doesn't have to be in this meeting imho)","msgtype":"m.text"},"ts":1585695210000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: Is the \"SV value of RegExpUnicodeEscapeSequence\" confusing in the context of a Unicode RegExp?","msgtype":"m.text"},"ts":1585695231000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"wsdferdksl: there are two solutions: we could make \\u{...} work in NCG in non-u regexps","msgtype":"m.text"},"ts":1585695236000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"msaboff It's not defined at all, yes","msgtype":"m.text"},"ts":1585695238000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's why this issue comes up","msgtype":"m.text"},"ts":1585695242000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't see why we don't have consensus. It's not like people are going to be writing this kind of stuff.","msgtype":"m.text"},"ts":1585695260000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"well, we don't","msgtype":"m.text"},"ts":1585695267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Why not?","msgtype":"m.text"},"ts":1585695281000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"people feel strongly about consistency with identifiers, mostly","msgtype":"m.text"},"ts":1585695292000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"How is that relevant?","msgtype":"m.text"},"ts":1585695308000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"It's not like people are going to be writing this kind of stuff.","msgtype":"m.text"},"ts":1585695322000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: is this your first meeting?","msgtype":"m.text"},"ts":1585695323000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"wsdferdksl: why don't we make \\u{...} work _only_ in NCG in non-u regexps? that way we don't expose the unfortunate concept of surrogates to more places in the language","msgtype":"m.text"},"ts":1585695326000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\"it adds *even more* complexity to an already overwhelming part of the language, and does so for very little benefit IMO\"","msgtype":"m.text"},"ts":1585695360000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"That would be gratuitously confusing. Once again, it's not like folks are going to be writing this stuff by hand.","msgtype":"m.text"},"ts":1585695380000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"I'm stepping out for a bit, be back later","msgtype":"m.text"},"ts":1585695397000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: can't you say the same thing about allowing individually-escaped paired surrogates in groups?","msgtype":"m.text"},"ts":1585695421000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i'm heading off, should've gone to bed hours ago. thanks for bearing with me y'all. and Bakkot, I really appreciate your work on trying to fix this spec bug, one way or another -- thanks!","msgtype":"m.text"},"ts":1585695505000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens thanks for engaging; sleep well","msgtype":"m.text"},"ts":1585695521000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot How do you reconcile that with \"SV of UnicodeEscapeSequence\"?  The only difference compared to RegExpUnicodeEscapeSequence is that RegExpUnicodeEscapeSequence includes \\uXXXX\\uXXXX.","msgtype":"m.text"},"ts":1585695620000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"xs uses freeze","msgtype":"m.text"},"ts":1585695670000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Regexes are confusing.  This is an edge case.  My preference is to make `/(?<\\u{1d49c}>.)/ == /(?<𝒜>.)/`.  I think it's more important to have consistency with language syntax than consistency in behavior.  If someone is surprised by the behavior, we have a reason for it.","msgtype":"m.text"},"ts":1585695679000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"msaboff: \"SV\" is an operation which is not defined for RegExpUnicodeEscapeSequence","msgtype":"m.text"},"ts":1585695682000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it is defined for UnicodeEscapeSequence","msgtype":"m.text"},"ts":1585695733000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wsdferdksl: to be concrete, of the following four regular expressions literals, which do you think ought to be legal? /(?<\\ud835\\udc9c.)/ /(?<\\u{1d49c}>.)/ /(?<\\ud835\\udc9c.)/u /(?<\\u{1d49c}>.)/u","msgtype":"m.text"},"ts":1585695755000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"4 min break!","msgtype":"m.text"},"ts":1585695782000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"btw https://arai-a.github.io/ecma262-compare","msgtype":"m.text"},"ts":1585695782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: 0, 2, and 3.","msgtype":"m.text"},"ts":1585695785000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Bakkot Maybe the fastest path to victory is defining \"SV of RegExpUnicodeEscapeSequence\"","msgtype":"m.text"},"ts":1585695791000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"The rationale being that's those three out of the four are \"legal\" if you don't enclose the escapes inside (?<>).","msgtype":"m.text"},"ts":1585695851000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"msaboff: yeah, but there's normative implications and we have to get people to agree on the normative behavior","msgtype":"m.text"},"ts":1585695870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: bradleymeck: https://nodejs.org/api/vm.html#vm_constructor_new_vm_sourcetextmodule_code_options","msgtype":"m.text"},"ts":1585695877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just remembered this is a thing","msgtype":"m.text"},"ts":1585695883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"non-stage 4 features, in my runtime :gasp:","msgtype":"m.text"},"ts":1585695910000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we can deprecate it","msgtype":"m.text"},"ts":1585695922000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually we don't even need to do that","msgtype":"m.text"},"ts":1585695930000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its still experimental","msgtype":"m.text"},"ts":1585695933000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wsdferdksl: would you be OK with /(?<\\u{1d49c}>.)/ being legal? I would prefer it to be legal just for simplicity of tooling, personally","msgtype":"m.text"},"ts":1585695939000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: do you think that any implementation is doing something different than the obvious?","msgtype":"m.text"},"ts":1585695947000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff yup","msgtype":"m.text"},"ts":1585695957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"both you and chrome are","msgtype":"m.text"},"ts":1585695960000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It's a bit more complex, but I wouldn't object to that, if the other three were also legal.","msgtype":"m.text"},"ts":1585695979000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Let me look at your slides again...","msgtype":"m.text"},"ts":1585695979000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff in particular, the \"obvious\" thing would not depend on the presence of the `u` flag, but JSC and V8 both do","msgtype":"m.text"},"ts":1585696002000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok break time is over!","msgtype":"m.text"},"ts":1585696020000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"It wouldn't simplify the tooling because you can't use \\u{} outside of (?<>)","msgtype":"m.text"},"ts":1585696026000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl it depends on the tooling. I could imagine tooling which parses regexes and re-serializes them, and being able to use the same serialization logic for group names for both `u` and non-`u` regexs is slightly simpler.","msgtype":"m.text"},"ts":1585696102000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yes it's a very small win","msgtype":"m.text"},"ts":1585696107000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"But the spec requires the u flag to get to the RegExpUnicodeEscapeSequence production.  I think we comply in light of the u flag.  Not that a patch landed last night in JSC that deals with this.","msgtype":"m.text"},"ts":1585696147000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"does anyone know the rationale for using the m suffix for decimals? (as in .2m)","msgtype":"m.text"},"ts":1585696164000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"as opposed to?","msgtype":"m.text"},"ts":1585696177000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haha, yes, it seems pretty arbitrary","msgtype":"m.text"},"ts":1585696187000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"msaboff the spec does not require the flag, in my reading?","msgtype":"m.text"},"ts":1585696188000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":".2d?","msgtype":"m.text"},"ts":1585696190000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"0x34d","msgtype":"m.text"},"ts":1585696203000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"f means float, i means imaginary, etc","msgtype":"m.text"},"ts":1585696215000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh sure, probably shouldn't be a-f","msgtype":"m.text"},"ts":1585696215000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"why does m mean decimal though?","msgtype":"m.text"},"ts":1585696226000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"that i don't know","msgtype":"m.text"},"ts":1585696232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it like two n's, smushed together?","msgtype":"m.text"},"ts":1585696237000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"like a fraction?","msgtype":"m.text"},"ts":1585696239000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"deciMal","msgtype":"m.text"},"ts":1585696239000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can't spell decimal without m","msgtype":"m.text"},"ts":1585696241000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://github.com/tc39/proposal-decimal/#why-are-literals-m-why-not-d","msgtype":"m.text"},"ts":1585696241000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: true that","msgtype":"m.text"},"ts":1585696255000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"_M_oney","msgtype":"m.text"},"ts":1585696271000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585696277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oooo","msgtype":"m.text"},"ts":1585696278000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that's how the twitter teachers will teach it 100%","msgtype":"m.text"},"ts":1585696288000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence has the U suffix and all rules that evaluate to it require U to be true.","msgtype":"m.text"},"ts":1585696346000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"yes! I love the idea of #{ numerator, denominator }","msgtype":"m.text"},"ts":1585696379000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"msaboff the `[U]` suffix means it's a parameter, not a requirement","msgtype":"m.text"},"ts":1585696389000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The +U means it must be true","msgtype":"m.text"},"ts":1585696405000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"benjamn: in a decimal type n/d is just that","msgtype":"m.text"},"ts":1585696409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Rationale for C#'s use of `m` (tldr; it was the next best letter in `decimal`): https://stackoverflow.com/a/977562","msgtype":"m.text"},"ts":1585696419000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"msaboff which +U?","msgtype":"m.text"},"ts":1585696448000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"definitely better `m` than `i` or `l`","msgtype":"m.text"},"ts":1585696453000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"suggestion for decimal: `#{ mantissa, scale }` where mantissa is a BigInt","msgtype":"m.text"},"ts":1585696454000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"what is scale","msgtype":"m.text"},"ts":1585696470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: oh yes, I'm not suggesting that tuples would automatically serve all the decimal use cases","msgtype":"m.text"},"ts":1585696472000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"scale is a power of 10","msgtype":"m.text"},"ts":1585696478000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"oh exponent ok","msgtype":"m.text"},"ts":1585696483000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`#{ 123n, -2 }` is 1.23","msgtype":"m.text"},"ts":1585696499000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Every RHS rule for https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence","msgtype":"m.text"},"ts":1585696503000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"1.23m is 1.23","msgtype":"m.text"},"ts":1585696508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"msaboff: `[~U] u Hex4Digits`","msgtype":"m.text"},"ts":1585696517000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so not every RHS rule","msgtype":"m.text"},"ts":1585696542000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That is not valid for NCG Identifiers.","msgtype":"m.text"},"ts":1585696562000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"How not?","msgtype":"m.text"},"ts":1585696580000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"GroupName is `GroupName[U] :: < RegExpIdentifierName[?U] >`","msgtype":"m.text"},"ts":1585696604000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then `RegExpIdentifierName[U] ::  RegExpIdentifierStart[?U]` -> `RegExpIdentifierStart[U] :: \\RegExpUnicodeEscapeSequence[?U]`","msgtype":"m.text"},"ts":1585696676000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"In your mind, how does the character value definition for RegExpUnicodeEscapeSequence in https://tc39.es/ecma262/#sec-patterns-static-semantics-character-value answer the SV question?","msgtype":"m.text"},"ts":1585696712000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"rbuckton: oh wow, I did not expect \"the [first good] letter in decimal\" to be such a persuasive argument","msgtype":"m.text"},"ts":1585696764000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-patterns-static-semantics-character-value gives semantics for CharacterValue for every RHS that RegExpUnicodeEscapeSequence produces","msgtype":"m.text"},"ts":1585696779000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but d, e, c, and i are all quite problematic… so yeah","msgtype":"m.text"},"ts":1585696782000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"Only the \\uHexDIgits is valid to NCG ids in non-u RegExps","msgtype":"m.text"},"ts":1585696820000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"sffc: that sounds a lot like a reduced form of Rationals","msgtype":"m.text"},"ts":1585696847000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"in C#: `d`-double,`e`-exponent, `c`-char, `i`-integer, `l`-long. Only other option would have been `a`","msgtype":"m.text"},"ts":1585696848000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Therefore we (currently) can't have a non-BMP character in a NCG id for non-u RegExps.  Agree?","msgtype":"m.text"},"ts":1585696898000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I'm currently pursuing a struct/value-type proposal with syntax for operator overloading.","msgtype":"m.text"},"ts":1585696900000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"And we (currently) can have non-BMP codepoints in NCG ids for u flagged RegExps.","msgtype":"m.text"},"ts":1585696934000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"can we get a tc39-regex channel","msgtype":"m.text"},"ts":1585696964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(/s)","msgtype":"m.text"},"ts":1585696969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So your slide #10 is conforming.","msgtype":"m.text"},"ts":1585696974000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff we can have a non-BMP character in a NCG id as two `\\uHex4Digits`. or rather, the spec does not say whether or not we can ahve that.","msgtype":"m.text"},"ts":1585696976000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The way I read the spec is we must interpret  two `\\uHex4Digits` as two individual codepoints for non-unicode RegExp NGC ids.  The must each be appropriate ID characters depending on their position.","msgtype":"m.text"},"ts":1585697111000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"They might be dangling surrogates, but that would be a syntax error as they wouldn't be ID codepoints.","msgtype":"m.text"},"ts":1585697151000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: that's how I originally expected non-u regexps to work","msgtype":"m.text"},"ts":1585697173000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"The \"must each be appropriate ID characters depending on their position\" bit is the part where the current specification does not provide an answer.","msgtype":"m.text"},"ts":1585697180000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but, yes, that would be the smallest delta from the current specification (and is what my current PR does)","msgtype":"m.text"},"ts":1585697205000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"First position IDStart and following codepoints IDContinue","msgtype":"m.text"},"ts":1585697241000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I think we need an official \"stage 1\" proposal repo to investigate operator overloading in all of its various forms, and as a single place to collect the various requirements and concerns.","msgtype":"m.text"},"ts":1585697248000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"https://github.com/tc39/proposal-operator-overloading","msgtype":"m.text"},"ts":1585697270000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^ thanks :)","msgtype":"m.text"},"ts":1585697288000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i'm really not a fan of that proposal though","msgtype":"m.text"},"ts":1585697303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot I think the current spec DOES provide the answer for the non u flag NCG id case.","msgtype":"m.text"},"ts":1585697322000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"devsnek: yes and no. That proposal is currently very specific to the constructor-based overloading approach. I've already expressed concern over this approach from a static analysis/tooling perspective.","msgtype":"m.text"},"ts":1585697330000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"if js had operator overloading i'd want it to be all dynamic and whatnot","msgtype":"m.text"},"ts":1585697345000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at stage 1, proposals are about solving problems","msgtype":"m.text"},"ts":1585697347000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"msaboff: it doesn't tell you what \"SV of UnicodeEscapeSequence\" is, so you can't tell if it satisfies \"the UTF16Encoding of a code point matched by the UnicodeIDStart lexical grammar production\"","msgtype":"m.text"},"ts":1585697356000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I may disagree with what is says and be sympathetic to what you want, but that is different than how I read the current spec.","msgtype":"m.text"},"ts":1585697390000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"What does the end of section https://tc39.es/ecma262/#sec-static-semantics-sv say to you about \"SV of UnicodeEscapeSequence","msgtype":"m.text"},"ts":1585697443000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: sorry, my previous message should read \"it doesn't tell you what the SV of RegExpUnicodeEscapeSequence is\"","msgtype":"m.text"},"ts":1585697486000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff: the relevant rule is \"Early Errors: RegExpIdentifierStart[U]::\\RegExpUnicodeEscapeSequence[?U]      It is a Syntax Error if the SV of RegExpUnicodeEscapeSequence is none of \"$\", or \"_\", or the UTF16Encoding of a code point matched by the UnicodeIDStart lexical grammar production.\"","msgtype":"m.text"},"ts":1585697498000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It feels like we are being pulled off topic a bit","msgtype":"m.text"},"ts":1585697499000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"(comment regarding discussion in the video)","msgtype":"m.text"},"ts":1585697513000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"mfw 1n is not equal to 1","msgtype":"m.text"},"ts":1585697586000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"did someone remove my queue item?","msgtype":"m.text"},"ts":1585697610000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why do they have relational equality but not absolute equality","msgtype":"m.text"},"ts":1585697616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: `===` does not do type coercion","msgtype":"m.text"},"ts":1585697664000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Back to what I said earlier, I think that is what the end of https://tc39.es/ecma262/#sec-patterns-static-semantics-character-value describes.  (Even though it talks about the CharacterValue, which is a String with one code point.)","msgtype":"m.text"},"ts":1585697664000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Bakkot: i'm not saying type coercion is needed","msgtype":"m.text"},"ts":1585697672000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"msaboff: that defines CharacterValue, not SV","msgtype":"m.text"},"ts":1585697697000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1n and 1 both exactly represent the mathematical value 1","msgtype":"m.text"},"ts":1585697703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my point is that \"SV of RegExpUnicodeEscapeSequence\" is not defined","msgtype":"m.text"},"ts":1585697715000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, the smallest delta would be to use CharacterValue instead; that's what my current PR does","msgtype":"m.text"},"ts":1585697728000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it does not, currently, use CharacterValue instead","msgtype":"m.text"},"ts":1585697734000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"IMHO, SV is the obvious string with a single CharacterValue.","msgtype":"m.text"},"ts":1585697783000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"If we added such a rule, would that be suficient?","msgtype":"m.text"},"ts":1585697807000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Yes, the problem is that the absence of semantics here means that such a decision would be normative","msgtype":"m.text"},"ts":1585697856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is why I brought it to committee","msgtype":"m.text"},"ts":1585697861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then people had opinions about which semantics to choose","msgtype":"m.text"},"ts":1585697878000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"msaboff: although, that said, that decision would mean it was impossible to render `/(?<𝒜>.)/` as ascii","msgtype":"m.text"},"ts":1585697978000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Make your PR \"the SV of RegExpUnicodeEscapeSequence is the one character string of the CharacterValue of RegExpUnicodeEscapeSequence.\" and make it normative.","msgtype":"m.text"},"ts":1585697981000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"which also does seem legitimately bad","msgtype":"m.text"},"ts":1585697990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That is a separate change to the RegExp section.","msgtype":"m.text"},"ts":1585698019000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"akirose: Can we post the meeting agenda for June? I meant to put https://github.com/tc39/ecma262/pull/1912 on the agenda but I thought PRs were automatic... I don't want to forget about it lol","msgtype":"m.text"},"ts":1585698034000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i'll do that","msgtype":"m.text"},"ts":1585698055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"great thanks!","msgtype":"m.text"},"ts":1585698062000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Bakkot You need to change how RegExpIdentifierStart and RegExpIdentifierPart are defined","msgtype":"m.text"},"ts":1585698064000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585698086000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am reasonably sure I can spec any possible semantics here if we can agree on the semantics","msgtype":"m.text"},"ts":1585698103000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just want os to agree on one thing","msgtype":"m.text"},"ts":1585698110000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we may finish at 17:09 if this runs for the full 30 minute slot","msgtype":"m.text"},"ts":1585698149000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"🎉","msgtype":"m.text"},"ts":1585698191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i may be interested in helping","msgtype":"m.text"},"ts":1585698278000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"how exciting","msgtype":"m.text"},"ts":1585698297000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i may be interested in commenting on the github issues","msgtype":"m.text"},"ts":1585698304000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"am I correct in assuming `a ??= b ??= c` would mean `a ?? (a = (b ?? (b = c)))`?","msgtype":"m.text"},"ts":1585698372000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"devsnek: I might be interested in the complement of that","msgtype":"m.text"},"ts":1585698382000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's how you open the js portal","msgtype":"m.text"},"ts":1585698383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"benjamn: yep looks right","msgtype":"m.text"},"ts":1585698430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(just without the double-evaluations)","msgtype":"m.text"},"ts":1585698448000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: ahh good point","msgtype":"m.text"},"ts":1585698461000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"i think it would be `a = a ?? b ?? c` ?","msgtype":"m.text"},"ts":1585698462000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1585698470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"assignment chains return the most right-hand side","msgtype":"m.text"},"ts":1585698476000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/return/use/","msgtype":"m.text"},"ts":1585698480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1585698494000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"`let _v = c; b ??= _v; a ??= _v;`","msgtype":"m.text"},"ts":1585698526000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"benjamn: I believe you are correct","msgtype":"m.text"},"ts":1585698527000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"devsnek: is there a way to avoid evaluating c in that, if a or b is already defined?","msgtype":"m.text"},"ts":1585698581000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"https://babeljs.io/repl/#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=IYAg_GC8IEblIDGQ&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=stage-1&prettier=false&targets=&version=7.9.0&externalPlugins=","msgtype":"m.text"},"ts":1585698596000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I don't believe `b` is set if `a` short-circuits","msgtype":"m.text"},"ts":1585698618000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"benjamn: oh you're right it doesn","msgtype":"m.text"},"ts":1585698618000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doesn't evaluate the right hand side","msgtype":"m.text"},"ts":1585698624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1585698629000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i forgot about that","msgtype":"m.text"},"ts":1585698634000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"time pressure isn't good","msgtype":"m.text"},"ts":1585698634000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jridgewell: that reduces to","msgtype":"m.text"},"ts":1585698691000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"(sorry premature send)","msgtype":"m.text"},"ts":1585698699000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"`a != null ? a : a = b != null ? _b : b = c;`","msgtype":"m.text"},"ts":1585698773000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585698790000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"(s/_b/b/)","msgtype":"m.text"},"ts":1585698808000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"if null there means nullish (including undefined)","msgtype":"m.text"},"ts":1585698809000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1585698813000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ystartsev: awesome, thanks! i'll post an issue shortly and tag you","msgtype":"m.text"},"ts":1585698815000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: great thanks","msgtype":"m.text"},"ts":1585698824000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://engine262.js.org/#gist=b972418f6ec2e52a7c9c711eda60a446","msgtype":"m.text"},"ts":1585698862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: cool that's what I would hope","msgtype":"m.text"},"ts":1585698900000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"chained logical assignment seems entirely… logical","msgtype":"m.text"},"ts":1585698915000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"keith_miller: june agenda is pushed, feel free to commit directly to it","msgtype":"m.text"},"ts":1585698930000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"except when the assignment target is const /s","msgtype":"m.text"},"ts":1585698931000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh shit that didn't get brought up did it","msgtype":"m.text"},"ts":1585698944000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or did I just look away and miss it?","msgtype":"m.text"},"ts":1585698961000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't remember it happening","msgtype":"m.text"},"ts":1585698969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: it didn't, no","msgtype":"m.text"},"ts":1585698970000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"😬","msgtype":"m.text"},"ts":1585698991000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like","msgtype":"m.text"},"ts":1585698992000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't expect it to change consensus","msgtype":"m.text"},"ts":1585699001000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it deserves public mention","msgtype":"m.text"},"ts":1585699007000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I should've thought to bring it up myself","msgtype":"m.text"},"ts":1585699028000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...oops","msgtype":"m.text"},"ts":1585699030000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"yeah same","msgtype":"m.text"},"ts":1585699035000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"if we don't ship a spec, the latest spec will still have the bug","msgtype":"m.text"},"ts":1585699042000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: put that on the queue","msgtype":"m.text"},"ts":1585699059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585699062000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585699063000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"eh I'm fine just leaving it here; the day's almost over","msgtype":"m.text"},"ts":1585699084000,"senderName":"littledan","senderId":"littledan@irc"}
]