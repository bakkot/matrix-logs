[
{"content":{"body":"bakkot: access granted","msgtype":"m.text"},"ts":1611792219000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme thanks!","msgtype":"m.text"},"ts":1611792792000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> do do 42; while (false) while (false)","msgtype":"m.text"},"ts":1611793846000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is legal","msgtype":"m.text"},"ts":1611793849000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1611793854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(as in, already legal)","msgtype":"m.text"},"ts":1611793860000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: with your proposal tho, if you added curly braces it wouldn't be suddenly legal tho, right?","msgtype":"m.text"},"ts":1611794217000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, it's legal right now as a statement, but it'd be a syntax error as a do expression","msgtype":"m.text"},"ts":1611794230000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb uuhhhh can you be more concrete?","msgtype":"m.text"},"ts":1611794322000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e. write out what you're asking about","msgtype":"m.text"},"ts":1611794328000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`do { do { 42 } while (false) } while (false)` wouldn't be legal","msgtype":"m.text"},"ts":1611794386000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is currently legal","msgtype":"m.text"},"ts":1611794405000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and would remain so","msgtype":"m.text"},"ts":1611794408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, i mean, in expression position","msgtype":"m.text"},"ts":1611794479000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`(do { do { 42 } while (false) } while (false))` or `(do do 42; while (false) while (false))`","msgtype":"m.text"},"ts":1611794497000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah: yeah, those are both illegal","msgtype":"m.text"},"ts":1611794517000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so there's not a refactoring hazard","msgtype":"m.text"},"ts":1611794533000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"first is illegal twice: it has a do-expr ending in a loop, and also it has `while` in a context it can't appear","msgtype":"m.text"},"ts":1611794548000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"second is illegal because `do`-exprs need braces","msgtype":"m.text"},"ts":1611794556000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(though... I guess we could revisit that...)","msgtype":"m.text"},"ts":1611794588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(but maybe at a later point.)","msgtype":"m.text"},"ts":1611794594000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"needing braces feels weird if you're thinking of `do` as a control flow keyword but it doesn't feel weird if it's effectively a sigil on the braces","msgtype":"m.text"},"ts":1611794788000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"more and more I feel like `class {}` is a helpful comparison","msgtype":"m.text"},"ts":1611794806000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(because I think braces should be required but that requires a conception that it's a \"block marked by `do`\" and not \"`do` taking a block as an argument\")","msgtype":"m.text"},"ts":1611794934000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fwiw a `catch` block requires braces and there's no obvious \"it's a block marked by `catch`\" analogy there","msgtype":"m.text"},"ts":1611794980000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hrmmmm","msgtype":"m.text"},"ts":1611795015000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I don't actually have any idea why we allow `if`/`else` without braces but not `try`/`catch`.)","msgtype":"m.text"},"ts":1611795018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tbh try/catch could easily drop the braces requirement","msgtype":"m.text"},"ts":1611795037000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I just expect somebody to object","msgtype":"m.text"},"ts":1611795048000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"on a \"you get a new footgun but you're not really solving a problem\" basis","msgtype":"m.text"},"ts":1611795076000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess maybe you end up with the dangling-else problem?","msgtype":"m.text"},"ts":1611795078000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm, I haven't thought that through","msgtype":"m.text"},"ts":1611795089000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`try try foo(); catch bar(); finally baz();` -> with which `try` do associate the `finally`?","msgtype":"m.text"},"ts":1611795127000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*do you associate","msgtype":"m.text"},"ts":1611795133000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aaaaaanyway I don't really want to do it for `catch` but it's marginally more appealing for `do`","msgtype":"m.text"},"ts":1611795258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"surely the second but yeah, I'd expect that to raise an objection from somebody","msgtype":"m.text"},"ts":1611795265000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"surely the second? I'd say surely the first","msgtype":"m.text"},"ts":1611795282000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait really","msgtype":"m.text"},"ts":1611795294000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"how come","msgtype":"m.text"},"ts":1611795297000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`else` binds to the closest `if`; why wouldn't `finally`?","msgtype":"m.text"},"ts":1611795297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that was my rationale for saying the second but I might have confused myself","msgtype":"m.text"},"ts":1611795344000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if you put it on the second you end up (in that particular example) with something which would be legal, whereas you do not if you put it on the frst","msgtype":"m.text"},"ts":1611795395000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but, you don't know if there's another `finally` coming","msgtype":"m.text"},"ts":1611795408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and it would be odd to say you have to wait until you parse the next thing to decide which `try` to associate the `finally` with","msgtype":"m.text"},"ts":1611795437000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm actually not sure how you'd describe the logic to have it interpreted as `try { try foo(); } catch bar(); finally baz();` though, if that's what you mean","msgtype":"m.text"},"ts":1611795683000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1611795830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the natural interpretation is `try { try foo(); catch { bar(); } finally { baz(); }`","msgtype":"m.text"},"ts":1611795856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which would be as syntax error because the other `try` has neither `catch` nor `finally`","msgtype":"m.text"},"ts":1611795870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er, sorry, that should be `try { try { foo(); } catch { bar(); } finally { baz(); }`","msgtype":"m.text"},"ts":1611795884000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah that was what I meant by \"second\"","msgtype":"m.text"},"ts":1611795895000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"second lexically","msgtype":"m.text"},"ts":1611795905000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1611795911000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok yes that was the confusion","msgtype":"m.text"},"ts":1611795929000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"whoops :)","msgtype":"m.text"},"ts":1611795936000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's on me probably; you're right that the token that comes first is \"first\"","msgtype":"m.text"},"ts":1611795960000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb I found this comment from 2018: https://github.com/tc39/proposal-do-expressions/issues/30#issuecomment-417389134","msgtype":"m.text"},"ts":1611796022000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(not holding you to that opinion, obviously, just was amused)","msgtype":"m.text"},"ts":1611796076000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did relative indexing make stage 4","msgtype":"m.text"},"ts":1611797307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, wasn't going for it because of the web compat issue","msgtype":"m.text"},"ts":1611797355000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they're gonna try outreach and re-shipping","msgtype":"m.text"},"ts":1611797367000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"compat with \"item\" or \"at\"?","msgtype":"m.text"},"ts":1611797376000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`at`","msgtype":"m.text"},"ts":1611797605000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/tc39/proposal-relative-indexing-method/issues/41","msgtype":"m.text"},"ts":1611797617000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, unfortunate","msgtype":"m.text"},"ts":1611797638000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: lol yeah, altho essentially i've been convinced that 2 is confusing, leaving 3","msgtype":"m.text"},"ts":1611803843000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: right, no problem. I was wondering if you wanted to order how we did the \"intent to prototype\" emails because that might give you something to point at, where developers from different communities might comment. We have the same situation with mozilla standards positions, where we sometimes have developers commenting on specific features.","msgtype":"m.text"},"ts":1611825989000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"But i think what you came up with will be closer to your goal so, we don't have to discuss it further","msgtype":"m.text"},"ts":1611826012000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"are we really only 10 people?","msgtype":"m.text"},"ts":1611856717000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"4 days is rough","msgtype":"m.text"},"ts":1611856755000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"up to 18 now","msgtype":"m.text"},"ts":1611856818000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"people were just waiting for 10am","msgtype":"m.text"},"ts":1611856826000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"everybody out chatting in the hallway over breakfast?","msgtype":"m.text"},"ts":1611856874000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"remember that this is for stage 1, so this example syntax is not set in stone","msgtype":"m.text"},"ts":1611857181000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the syntax shown on the previous slide would not have been backwards compatible, for example","msgtype":"m.text"},"ts":1611857198000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Does this proposal end up meaning that infinite numbers of nested square brackets are valid? like `[0-9]` and `[[[[[0-9]]]]]` are the same thing","msgtype":"m.text"},"ts":1611857250000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"pretty soon we're gonna need multiline regex","msgtype":"m.text"},"ts":1611857310000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it appears that way TabAtkins","msgtype":"m.text"},"ts":1611857323000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"not a problem, was just wondering. ^_^","msgtype":"m.text"},"ts":1611857341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"enter, comments via \"number of square brackets\"","msgtype":"m.text"},"ts":1611857352000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: already got them via RegExp() with backtick strings","msgtype":"m.text"},"ts":1611857367000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"awkward escaping though","msgtype":"m.text"},"ts":1611857376000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess new RegExp(String.raw``) would work?","msgtype":"m.text"},"ts":1611857406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bot seems to be working better today","msgtype":"m.text"},"ts":1611857525000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think we should adopt that character class operand restriction","msgtype":"m.text"},"ts":1611857528000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I know it's not either-or but actual Set operations seem much higher priority than this, hmm","msgtype":"m.text"},"ts":1611857529000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I tweaked it a bit to maybe have fewer doubled words, which seems to have woorked, or else the speakers are just speaking more clearly","msgtype":"m.text"},"ts":1611857549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: I'm working up multiple RegExp proposals at https://gist.github.com/rbuckton/2f262b5298d4b2031cb7e0d5a1a62e19. One feature would allow for multi-line regexp. I'm also putting together a broad comparison of regexp engines (I showed some of that on day one with the flag comparisons at https://gist.github.com/rbuckton/cb0ea57949a8dfe0b4998301b6f46552).","msgtype":"m.text"},"ts":1611857556000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"mathiasbynens: Does regexpu already support set notation?","msgtype":"m.text"},"ts":1611857916000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Or will Babel need to parse syntax to do it?","msgtype":"m.text"},"ts":1611857927000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: it does not. I've been using `regenerate` to do this kind of stuff by hand","msgtype":"m.text"},"ts":1611857936000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it seems the schedule changed?","msgtype":"m.text"},"ts":1611857958000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: Is there a change you're concerned about?","msgtype":"m.text"},"ts":1611858003000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Isn't that my turn to present?","msgtype":"m.text"},"ts":1611858021000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I think he was expecting to present now?","msgtype":"m.text"},"ts":1611858023000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1611858034000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"what's the latest schedule?","msgtype":"m.text"},"ts":1611858044000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Don't link it here","msgtype":"m.text"},"ts":1611858063000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's the hack.md link in the Reflector issue","msgtype":"m.text"},"ts":1611858078000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/tc39/Reflector/issues/340","msgtype":"m.text"},"ts":1611858083000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Sorry, the \"Draft Schedule\" link","msgtype":"m.text"},"ts":1611858115000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"well, that doc has haxjs going now","msgtype":"m.text"},"ts":1611858129000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"bterlson: akirose ^","msgtype":"m.text"},"ts":1611858133000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"haxjs: tcq says you're next","msgtype":"m.text"},"ts":1611858167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"There was discussion about the schedule at the beginning of the day, based on what's in TCQ.","msgtype":"m.text"},"ts":1611858181000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ok, so i will be next?","msgtype":"m.text"},"ts":1611858201000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"thank u","msgtype":"m.text"},"ts":1611858204000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"https://github.com/benjamingr/RegExp.tag","msgtype":"m.text"},"ts":1611858230000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"A Regexp.escape that aggressively escapes (i.e., one that replaces characters or escapes with different meanings in and outside of character classes with `\\u` sequences)? Or maybe a `u`-flag specific escape sequence like `/Escape{any content except unescaped curly brace }`.","msgtype":"m.text"},"ts":1611858462000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"brad4d: such a repo already exists: https://github.com/benjamingr/RegExp.escape","msgtype":"m.text"},"ts":1611858575000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"``RegExp.build`${thing}?` `` will mean something different from ``new RegExp(`${RegExp.escape(thing)}?`)``","msgtype":"m.text"},"ts":1611858676000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1611858679000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"RegExp.build`${thing}?`    would mean something different from    new RegExp(`${RegExp.escape(thing)}?`)","msgtype":"m.text"},"ts":1611858705000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"background: the \"even-odd problem\" https://github.com/benjamingr/RegExp.escape/issues/37","msgtype":"m.text"},"ts":1611858711000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"if we're going to be motivated by fear of what vendors might do, I'd like to know which vendors","msgtype":"m.text"},"ts":1611858784000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: https://github.com/benjamingr/RegExp.escape/issues/43#issuecomment-738950494 implies that HTML monkeypatching it onto RegExp is a viable path","msgtype":"m.text"},"ts":1611858830000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jorendorff: and similar comments in that thread are about node's willingness to ship it as a utility module.","msgtype":"m.text"},"ts":1611858857000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Is there a way to turn off the embedly previews?","msgtype":"m.text"},"ts":1611858982000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: what is embedly and where are you seeing this?","msgtype":"m.text"},"ts":1611859001000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"webchat.freenode.net","msgtype":"m.text"},"ts":1611859016000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"irccloud has no previews of github links for me. it seems client-specific","msgtype":"m.text"},"ts":1611859026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wsdferdksl: it doesn't appear that kiwiirc (the webchat client) allows disabling of that feature","msgtype":"m.text"},"ts":1611859107000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I wrote a tag-based solution as an npm package, but in user-land it suffers from the same requirements as `RegExp.escape` would.","msgtype":"m.text"},"ts":1611859120000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I just aggressively escape any character that could have a meaning either in or out of a character class.","msgtype":"m.text"},"ts":1611859170000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I get huge images of ljharb together with a snippet of the title and \"Read the article on github.com\"","msgtype":"m.text"},"ts":1611859172000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"This thing tries really hard to turn github pages into facebook profiles","msgtype":"m.text"},"ts":1611859212000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Which is just silly for github issues","msgtype":"m.text"},"ts":1611859237000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1611859241000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am using a desktop IRC client and I do not get these things","msgtype":"m.text"},"ts":1611859243000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"The funny part is that a tag-template approach needs to be able to differentiate between safe an unsafe values, so you can do","msgtype":"m.text"},"ts":1611859341000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611859341000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"R`unescaped${escaped}${R`unescaped`}`","msgtype":"m.text"},"ts":1611859341000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611859341000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: this is in the context of a node developer explicitly asking what would be appropriate and constructive to the standards process","msgtype":"m.text"},"ts":1611859369000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Why can't RegExp.escape() return a string wrapped with '(?:' ... ')'","msgtype":"m.text"},"ts":1611859394000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"is that right?","msgtype":"m.text"},"ts":1611859396000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"RegExp.escape(\"foo [123]!\") => \"(?:foo \\[123\\]\\!)\"","msgtype":"m.text"},"ts":1611859462000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Seems like that should reduce / eliminate injection concerns.","msgtype":"m.text"},"ts":1611859496000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"it reduces them, but does not eliminate them","msgtype":"m.text"},"ts":1611859529000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Aggresively escape `RegExp.escape = (value) => value.replace(/./, _ => convertToUnicodeEscape(_))` where convertToUnicodeEscape just makes everything into its `\\u{...}` form. No code injection, though slight differences with surrogate pairs in character classes...","msgtype":"m.text"},"ts":1611859562000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"msaboff: then it can't be used in a character class","msgtype":"m.text"},"ts":1611859578000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton Precisely!","msgtype":"m.text"},"ts":1611859594000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"well, it can be, but your character class would include `(:)` as characters","msgtype":"m.text"},"ts":1611859615000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`(?:)` rather","msgtype":"m.text"},"ts":1611859626000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Do you think it is a common use case to escape a string and then put that in a character class?","msgtype":"m.text"},"ts":1611859702000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff no, but its not outside the realm of possibility.","msgtype":"m.text"},"ts":1611859734000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"If not, let's come up with wrapping that would cause a syntax error if the returned string is put directly in a character class.","msgtype":"m.text"},"ts":1611859747000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: ooh, i like that","msgtype":"m.text"},"ts":1611859758000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd rather try to allow returning references from functions than have the ^ syntax","msgtype":"m.text"},"ts":1611859770000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(or, have a setAt method...)","msgtype":"m.text"},"ts":1611859803000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"msaboff: possible for `u`-flag, may be impossible without","msgtype":"m.text"},"ts":1611859804000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I actually brought up `^` in the slice notation syntax repo.","msgtype":"m.text"},"ts":1611859850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"It would also make sense to add {1} at the end of the returned string so that other immediately trailing quantifiers cause a syntax error.","msgtype":"m.text"},"ts":1611859853000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"https://esdiscuss.org/topic/regexp-escape#content-55","msgtype":"m.text"},"ts":1611859856000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"msaboff: Not sure about that. I might want to have a quantifier, in fact many of my use cases *do* use a quantifier.","msgtype":"m.text"},"ts":1611859904000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton So then you'd want the result as a non-captured group.","msgtype":"m.text"},"ts":1611859938000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"Though I suppose the workaround is `` new RegExp(`(?:${Regexp.escape(input)})?`) ``","msgtype":"m.text"},"ts":1611859958000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"well, irclcoud doesn't really understand markdown code sample syntax.","msgtype":"m.text"},"ts":1611859981000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: its solving setting","msgtype":"m.text"},"ts":1611859998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can't do `a.at(-1) = 5`","msgtype":"m.text"},"ts":1611860002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: surround it in ```","msgtype":"m.text"},"ts":1611860003000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yeah","msgtype":"m.text"},"ts":1611860013000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that's normal markdown syntax for that","msgtype":"m.text"},"ts":1611860019000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"``` new RegExp(`(?:${Regexp.escape(input)})?`) ```","msgtype":"m.text"},"ts":1611860042000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: commonmark specifies you can use a balanced set of n-backticks for a code sample","msgtype":"m.text"},"ts":1611860050000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"at this point GFM is \"normal markdown\" :-)","msgtype":"m.text"},"ts":1611860061000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611860064000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`` ` ``","msgtype":"m.text"},"ts":1611860065000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611860065000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: setting elements","msgtype":"m.text"},"ts":1611860067000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"wrt your queue item","msgtype":"m.text"},"ts":1611860073000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"That's GFM too (GFM is commonmark++)","msgtype":"m.text"},"ts":1611860074000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"arr[ˆ1] = x","msgtype":"m.text"},"ts":1611860079000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"leobalter_: ah, thanks. i'll see if that's what's claimed","msgtype":"m.text"},"ts":1611860082000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: ah ok, i've never found that to work reliably - slack, at least, works just like irccloud here, so maybe i've just assumed npm/github works the same","msgtype":"m.text"},"ts":1611860110000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: can you mute","msgtype":"m.text"},"ts":1611860155000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1611860166000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait, how does s[^n] for a string have any different behavior than code units?","msgtype":"m.text"},"ts":1611860213000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"The important bit is you have to have a space between the leading backticks/trailing backticks and if the sample starts or ends with a backtick. Leading/trailing spaces are removed (source: wrote a 100% compliant commonmark/gfm parser)","msgtype":"m.text"},"ts":1611860218000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i would not intuit that `x[^a]` is relative to x's length","msgtype":"m.text"},"ts":1611860269000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I have a very positive support for this proposal but I don't like this take of discussing it in some exclusive way for this proposal vs .at","msgtype":"m.text"},"ts":1611860271000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"devsnek: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges","msgtype":"m.text"},"ts":1611860309000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: i don't consider c# to be the best language either :P","msgtype":"m.text"},"ts":1611860341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"GME level volume on the queue","msgtype":"m.text"},"ts":1611860360000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"WHY DOES TEAMS ALLOW ME TO JOIN WITH AN UNMUTED MIC?!","msgtype":"m.text"},"ts":1611860375000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keeps you on your toes","msgtype":"m.text"},"ts":1611860387000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"This is the longest queue I've seen in a long time","msgtype":"m.text"},"ts":1611860407000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"jridgewell: didn't it ask you if you wanted your mic on or video broadcasting as part of the join process?","msgtype":"m.text"},"ts":1611860435000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think a lot of it is not stage 1 concerns","msgtype":"m.text"},"ts":1611860441000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I hit \"rejoin\" on my app","msgtype":"m.text"},"ts":1611860446000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"due to how scoped this presentation is","msgtype":"m.text"},"ts":1611860449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Didn't change anything","msgtype":"m.text"},"ts":1611860449000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shu: +1 to your point","msgtype":"m.text"},"ts":1611860456000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I was muted on the way out, I expect to be muted on the way in.","msgtype":"m.text"},"ts":1611860458000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"this feels wildly inappropriate, to suddenly propose a Stage 1 proposal that attacks what could have been a Stage 4 proposal in the same meeting","msgtype":"m.text"},"ts":1611860469000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell: Odd. I'll take a note to send to the teams dev team","msgtype":"m.text"},"ts":1611860482000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(This is the 2nd time it's happened, too. Yulia muted me yesterday after rejoining)","msgtype":"m.text"},"ts":1611860535000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: can you /msg me teams version/system specs in case its a version/os specific issue?","msgtype":"m.text"},"ts":1611860563000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i had a demo of some functionality a while back where you could do like `Array.prototype.at = function(n) { return &this[n < 0 ? this.length + n : n] }`","msgtype":"m.text"},"ts":1611860870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then `x.at(-1) = 5`","msgtype":"m.text"},"ts":1611860877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we _could_ introduce pointers to JS","msgtype":"m.text"},"ts":1611860901000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well its narrowly scoped to return/functions","msgtype":"m.text"},"ts":1611860911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but why? (:","msgtype":"m.text"},"ts":1611860924000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"🤷🏻","msgtype":"m.text"},"ts":1611860928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: Pointers bad, memory-managed referenced maybe","msgtype":"m.text"},"ts":1611860929000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i'd be down to reify References","msgtype":"m.text"},"ts":1611860932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as we use * and &","msgtype":"m.text"},"ts":1611860935000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1611860940000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and `->`?","msgtype":"m.text"},"ts":1611860947000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wow what a strong oppose to this proposed negative 0 behavior","msgtype":"m.text"},"ts":1611860947000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1611860950000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*I strongly oppose, that is","msgtype":"m.text"},"ts":1611860955000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: https://github.com/rbuckton/proposal-refs","msgtype":"m.text"},"ts":1611860956000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i strongly oppose treating -0 differently","msgtype":"m.text"},"ts":1611860966000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that is quite out there","msgtype":"m.text"},"ts":1611860969000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"does ^n have the same meaning as at(n)","msgtype":"m.text"},"ts":1611860998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've never once run into a -0 problem in Python, I dont' understand what th eissue is","msgtype":"m.text"},"ts":1611860999000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or is it a different thing","msgtype":"m.text"},"ts":1611861008000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: no, because ^0 means .length - 0","msgtype":"m.text"},"ts":1611861019000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: No, ^n is equal to at(-n-1), as proposed","msgtype":"m.text"},"ts":1611861020000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(i.e. one beyond the end)","msgtype":"m.text"},"ts":1611861022000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1611861029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems worse","msgtype":"m.text"},"ts":1611861031000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh shoot yeah, sorry, not the -1","msgtype":"m.text"},"ts":1611861033000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think the at behavior is much more intuitive and composable","msgtype":"m.text"},"ts":1611861069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can see the scope of this proposal expanding to work with the slice proposal champions","msgtype":"m.text"},"ts":1611861092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"as it stands now it's kinda narrow","msgtype":"m.text"},"ts":1611861103000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"for new syntax, that is","msgtype":"m.text"},"ts":1611861115000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Yeah def, if we're going to add syntax to indexing this should *absolutely* be done in concert with slices, that'd be great","msgtype":"m.text"},"ts":1611861123000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if a[^1] works I would expect that a[(^1)] works","msgtype":"m.text"},"ts":1611861152000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i kind of want to do a poll on how people feel about refs","msgtype":"m.text"},"ts":1611861178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wouldn't necessarily - I'm reading the ^ as part of the [] syntax, so it's like the [^] operator","msgtype":"m.text"},"ts":1611861178000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"^ same","msgtype":"m.text"},"ts":1611861184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"C# uses `^` for negative index values, and `..` for ranges","msgtype":"m.text"},"ts":1611861187000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: same to me or rick?","msgtype":"m.text"},"ts":1611861196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to tab","msgtype":"m.text"},"ts":1611861200000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if `a[(^1)]` works than `^1` has to be a first-class thing, which doesn't make sense","msgtype":"m.text"},"ts":1611861201000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or tab :)","msgtype":"m.text"},"ts":1611861202000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"because then you have a third kind of property key","msgtype":"m.text"},"ts":1611861217000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: how does RegExp.escape escape properly for capture group names?","msgtype":"m.text"},"ts":1611861221000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"^ is never a valid unop, so we *could* make it valid","msgtype":"m.text"},"ts":1611861225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: haven't tried it - it probably doesn't, since that's a newish feature","msgtype":"m.text"},"ts":1611861245000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: right but then what would it make","msgtype":"m.text"},"ts":1611861258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"For now I'd be happy with","msgtype":"m.text"},"ts":1611861262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611861262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"MemberExpression `[^` PrimaryExpression `]`","msgtype":"m.text"},"ts":1611861262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1611861262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: `[^` or `[` `^`","msgtype":"m.text"},"ts":1611861289000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: only valid inside indexing, of course","msgtype":"m.text"},"ts":1611861307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: either.","msgtype":"m.text"},"ts":1611861312000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: right but then it's not a unary operator :-)","msgtype":"m.text"},"ts":1611861319000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"If we ever introduced `^` on its own, the above would give us room to expand","msgtype":"m.text"},"ts":1611861332000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: that context is particularly problematic, as supporting it would force us to \\uXXXX escape everything non-identifiery","msgtype":"m.text"},"ts":1611861337000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: oh \"it\" is `a[(^x)]`, not making `^` a unary operator","msgtype":"m.text"},"ts":1611861368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: can you file an issue? that seems like an important thing to look into","msgtype":"m.text"},"ts":1611861473000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ah ok","msgtype":"m.text"},"ts":1611861481000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: already did","msgtype":"m.text"},"ts":1611861483000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1611861490000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In the slice proposal, I mentioned a possible future of `@@seti`, `@@geti`, and reified `Index` and `Range` types so that `^x` and `x:y` could stand on their own.","msgtype":"m.text"},"ts":1611861501000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: but the parens working there suggest to me that it *is* a unary operator.","msgtype":"m.text"},"ts":1611861502000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yeah i agree it would be confusing","msgtype":"m.text"},"ts":1611861513000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with slicing, I wouldn't think `a[(1:2)]` would work either, honestly","msgtype":"m.text"},"ts":1611861529000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I brought up `^` in the slice proposal here: https://github.com/tc39/proposal-slice-notation/issues/30","msgtype":"m.text"},"ts":1611861557000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I also brought up slice extensibility (including reified values for `^x` and `x:y`) here: https://github.com/tc39/proposal-slice-notation/issues/19","msgtype":"m.text"},"ts":1611861608000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I guess reifying them is useful; being able to store indexes somewhere else and later use them to lookup into an array is good, and being able to do that simply, rather than tracking the syntax out-of-band, would be good","msgtype":"m.text"},"ts":1611861636000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tho reifying doesn't require the syntax to be invokable outside of the [] - it could just be a new object type for keys you can manually construct, but which is automatically done by the [] syntax","msgtype":"m.text"},"ts":1611861780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins \"lastIndexOf\" is the most relevant precedent","msgtype":"m.text"},"ts":1611861781000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not strings","msgtype":"m.text"},"ts":1611861784000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The drawback to reification is that it could slow down implementations. Indexed access wouldn't just be coercion to string or symbol, instead it would have to check if the index expression is an object value with a `@@geti` (or `@@seti`) for indirection first","msgtype":"m.text"},"ts":1611861790000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"reified `x:y` would allow for `for (let x in 1:10) {}` which is fun","msgtype":"m.text"},"ts":1611861799000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Right, but that's talking about the last instance. The *direction* (in findFromX) is called \"end\"","msgtype":"m.text"},"ts":1611861807000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"rickbutton: But we're already trying to handle that in the `range()` proposal too.","msgtype":"m.text"},"ts":1611861865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah yeah forgot about the range proposal","msgtype":"m.text"},"ts":1611861909000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"findLast() is fine. findFromLast() is not.","msgtype":"m.text"},"ts":1611861942000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Strings don't have `find` or `findIndex` anyways","msgtype":"m.text"},"ts":1611861943000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"*yet*","msgtype":"m.text"},"ts":1611861951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yay last","msgtype":"m.text"},"ts":1611861960000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"TabAtkins: no reason we couldn't have `range(x,y)` and `x:y`. We already have `Array(1, 2, 3)` and `[1, 2, 3]` :)","msgtype":"m.text"},"ts":1611861998000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Technically true, but I just wouldn't want to block `arr[1:2]` if a naked `1:2` is problematic. ^_^","msgtype":"m.text"},"ts":1611862049000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"^ agree","msgtype":"m.text"},"ts":1611862060000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Plus `^x` and `x:y` would be unforgeable (at least, in the same way as `[]` and `{}` are)","msgtype":"m.text"},"ts":1611862067000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"TabAtkins: I think its a matter of framing the syntax for slice/negative index so that there's room to expand later (i.e., not `[^ Expression ]`, since changing `^` to infix later would break code)","msgtype":"m.text"},"ts":1611862162000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: What's \"unforgeable\"?","msgtype":"m.text"},"ts":1611862277000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"`Array` can be replaced globally, so `new Array()` could create something different than `[]`, which always creates an array per spec text.","msgtype":"m.text"},"ts":1611862321000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"not that anyone should be using `new Array` in any code ever :-)","msgtype":"m.text"},"ts":1611862341000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"And what would ^x and x:y create?","msgtype":"m.text"},"ts":1611862351000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"New kinds of range objects?","msgtype":"m.text"},"ts":1611862370000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Same for `new RegExp(\"foo\")` vs `/foo/`.","msgtype":"m.text"},"ts":1611862372000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"wsdferdksl: Yes, a reified Offset/Range object","msgtype":"m.text"},"ts":1611862384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1611862391000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: that's that I was just discussing, yes. Reified values for `^x` and `x:y`","msgtype":"m.text"},"ts":1611862394000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that's not part of the proposal, but something I've discussed on the issue tracker for slice notation.","msgtype":"m.text"},"ts":1611862422000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I can imagine lots of mistakes where folks wrote [a:b] when they meant (a:b), and it works but uses gobs of unnecessary memory.","msgtype":"m.text"},"ts":1611862464000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Iterating over [a:b] instead of (a:b)","msgtype":"m.text"},"ts":1611862488000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"I think the motivation of slice notation is ergonomics, so reification of `^i` and `a:b` should be a  separate proposal.","msgtype":"m.text"},"ts":1611862567000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"other than WithStatements, is there ever a case where reading from an in-scope identifier could have effects?","msgtype":"m.text"},"ts":1611862567000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"wsdferdksl: Can you elaborate? I'm not sure what sort of potential mistake you're referring to","msgtype":"m.text"},"ts":1611862612000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Reification of ^i cannot be a separate proposal because a[^b] would preclude it.","msgtype":"m.text"},"ts":1611862616000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"this proposal seems unworkable due to TLA","msgtype":"m.text"},"ts":1611862616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: a global getter?","msgtype":"m.text"},"ts":1611862622000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: otherwise i don't think so","msgtype":"m.text"},"ts":1611862636000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah I don't consider a global getter as in-scope","msgtype":"m.text"},"ts":1611862649000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"If we're doing them at all, we need to do them together","msgtype":"m.text"},"ts":1611862665000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"devsnek: TLA = Three Letter Acronym?","msgtype":"m.text"},"ts":1611862756000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"\"top-level await\"","msgtype":"m.text"},"ts":1611862763000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"wsdferdksl: top level await 😄","msgtype":"m.text"},"ts":1611862766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"@TabAtkins the -0 problem in Python is like, you want  a[1:-n] express drop n elements in the end, but if `n` could be 0, u have to write code like n == 0 ? a[1:] : a[1:-n]","msgtype":"m.text"},"ts":1611862777000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"hm, ok. I've never run into that situation, but i get it","msgtype":"m.text"},"ts":1611862823000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"haxjs: The same problem occurs with all of the array methods that take negative indexes. How do you plan on fixing all of those?","msgtype":"m.text"},"ts":1611862869000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"only slice/splice use neg index.","msgtype":"m.text"},"ts":1611862885000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Are there any other?","msgtype":"m.text"},"ts":1611862914000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: That's incorrect","msgtype":"m.text"},"ts":1611862980000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"If we have ranges *and* you can compose : and ^, then the syntax would fix it - `arr[1:^n]`","msgtype":"m.text"},"ts":1611862981000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"@TabAtkins Yes, that what I want :-)","msgtype":"m.text"},"ts":1611863011000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"imported names are not globals...","msgtype":"m.text"},"ts":1611863040000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"@wsdferdksl Is there any other methods use neg index?","msgtype":"m.text"},"ts":1611863066000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1611863082000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"which one?","msgtype":"m.text"},"ts":1611863096000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: Array.prototype.splice","msgtype":"m.text"},"ts":1611863157000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oops you mentioned splice","msgtype":"m.text"},"ts":1611863166000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"TypedArray copyWithin","msgtype":"m.text"},"ts":1611863184000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"copyWithin is what i was going to mention yeah","msgtype":"m.text"},"ts":1611863206000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"regular arrays have it too","msgtype":"m.text"},"ts":1611863210000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh wow didn't notice","msgtype":"m.text"},"ts":1611863221000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's a really annoying one to shim","msgtype":"m.text"},"ts":1611863233000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also fill on Arrays and TypedArray","msgtype":"m.text"},"ts":1611863238000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"to implement, rather","msgtype":"m.text"},"ts":1611863240000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: There are lots of them. I'm surprised that you're unfamiliar with them when promoting a proposal to replace negative indexes.","msgtype":"m.text"},"ts":1611863249000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"oh thank u , so we have three methods: slice/splice/copyWithin","msgtype":"m.text"},"ts":1611863252000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ahh yes, fill's `start` and `end` arguments","msgtype":"m.text"},"ts":1611863258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also subarray on TypedArray","msgtype":"m.text"},"ts":1611863266000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"haxjs: at least 5","msgtype":"m.text"},"ts":1611863279000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also anything that takes fromIndex, like includes, indexOf, lastIndexOf, etc","msgtype":"m.text"},"ts":1611863305000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok so i think that's it - 7 on array and 8 on typedarray","msgtype":"m.text"},"ts":1611863330000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tl;dr it's pretty common","msgtype":"m.text"},"ts":1611863334000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Anyway, a reified ^ could be passed to all of those, I suppose. ^_^","msgtype":"m.text"},"ts":1611863340000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ljharb: also arraybuffer and sharedarraybuffer","msgtype":"m.text"},"ts":1611863349000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this is some cursed code","msgtype":"m.text"},"ts":1611863352000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which only has slice, yeah","msgtype":"m.text"},"ts":1611863369000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no no no no no","msgtype":"m.text"},"ts":1611863377000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nooooooo","msgtype":"m.text"},"ts":1611863379000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: throwing a promise isn't new. See: React","msgtype":"m.text"},"ts":1611863382000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Ok. so at least we can have a better slice :)","msgtype":"m.text"},"ts":1611863385000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"this is beautiful","msgtype":"m.text"},"ts":1611863389000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"rbuckton: and it's cursed that react does it too","msgtype":"m.text"},"ts":1611863398000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what have we wrought","msgtype":"m.text"},"ts":1611863400000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: oh i know, it just makes me sad","msgtype":"m.text"},"ts":1611863401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: and react's Suspense/Lazy model is still not really \"finished\" or fully fleshed out.","msgtype":"m.text"},"ts":1611863412000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: yup!","msgtype":"m.text"},"ts":1611863423000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"the ability to reject with a promise is absurd and i continue to think it's a mistake","msgtype":"m.text"},"ts":1611863426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(to have a promise rejected with a `reason` that is itself a Promise, i mean)","msgtype":"m.text"},"ts":1611863444000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: having had to use `Suspense` I can't say I disagree, its highly confusing","msgtype":"m.text"},"ts":1611863498000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think i missed the connection between React's cursed code and how lazyInit would replace that use case","msgtype":"m.text"},"ts":1611863509000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: more discussing the code example that showed throwing a Promise","msgtype":"m.text"},"ts":1611863532000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: right, it's doing an iloop to simulate blocking and using thrown promises for control flow, or am i missing something?","msgtype":"m.text"},"ts":1611863554000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: the way you \"suspend\" a component in react is by throwing a promise. i believe that's also possibly how some react hooks work","msgtype":"m.text"},"ts":1611863557000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and how would lazyInit help?","msgtype":"m.text"},"ts":1611863575000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i thought those things were a sub-ESM boundary","msgtype":"m.text"},"ts":1611863645000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it covers the lazy-component loading use case from suspense","msgtype":"m.text"},"ts":1611863665000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"not the full thing","msgtype":"m.text"},"ts":1611863669000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"(as I understand it)","msgtype":"m.text"},"ts":1611863677000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"My brain is still on Test262: https://gist.github.com/leobalter/f9ba9cc3fde91567212150ad2883eb77","msgtype":"m.text"},"ts":1611863684000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"this is the Chrome investigation Shu is talking about https://docs.google.com/document/d/1o3qgHBx5_T0cV6kFU3HzSp8-bBOJFEtlRJKh59-ljgc/edit","msgtype":"m.text"},"ts":1611863884000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"seems like `a` is certain to end early on main.js, but it's a bit odd for \"b\"","msgtype":"m.text"},"ts":1611863910000,"senderName":"leobalter_","senderId":"leobalter_@irc"},
{"content":{"body":"here's my take on what we might do in HTML to make that reality https://github.com/whatwg/html/issues/4400#issuecomment-738737956","msgtype":"m.text"},"ts":1611863942000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"note that this laziness has been prototyped https://github.com/whatwg/html/issues/4400#issuecomment-739049763 and doesn't *yet* help, though maybe it could if other changes are made","msgtype":"m.text"},"ts":1611863986000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(changes inside the browser, not spec changes)","msgtype":"m.text"},"ts":1611863997000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"purity annotations!!!!","msgtype":"m.text"},"ts":1611864033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I mean they're a bad idea but I am still excited they're being brought up, even as a bad idea","msgtype":"m.text"},"ts":1611864053000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i regret bringing it up","msgtype":"m.text"},"ts":1611864055000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's fine I think we all know they're bad","msgtype":"m.text"},"ts":1611864064000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even if I want them in my soul","msgtype":"m.text"},"ts":1611864069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ystartsev: i worked on PJS too!","msgtype":"m.text"},"ts":1611864071000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"big failure","msgtype":"m.text"},"ts":1611864075000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: let me introduce you to getters on the global object 😄","msgtype":"m.text"},"ts":1611864160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I second ljharb's horror","msgtype":"m.text"},"ts":1611864165000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes, i mean we have getters","msgtype":"m.text"},"ts":1611864167000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we have that horror","msgtype":"m.text"},"ts":1611864169000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: i am aware of the existing horrors that i have no wish to repeat","msgtype":"m.text"},"ts":1611864184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"JoelMarcey is trying to enroll as a delegate. Are there any Facebook colleagues who could help?","msgtype":"m.text"},"ts":1611864187000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i remember someone made a thing with exceptions and global getters to have `__LINE__` in js","msgtype":"m.text"},"ts":1611864190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i think the point is that there's nothing to repeat","msgtype":"m.text"},"ts":1611864200000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i keep touching something on my keyboard and it is unmuting me in teams","msgtype":"m.text"},"ts":1611864210000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: we're not adding a new thing that repeats the horror, but variable references now are already a horror","msgtype":"m.text"},"ts":1611864212000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: right, fair","msgtype":"m.text"},"ts":1611864220000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek, I did __LINE","msgtype":"m.text"},"ts":1611864230000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: i don't want to expand the cases where the horror is reified","msgtype":"m.text"},"ts":1611864232000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":":chef's kiss:","msgtype":"m.emote"},"ts":1611864237000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh god why did my client do that","msgtype":"m.text"},"ts":1611864246000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that reminds me, someone from Microsoft should help Wenlu Wang get added to delegates.txt","msgtype":"m.text"},"ts":1611864249000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I love `__LINE__` actually","msgtype":"m.text"},"ts":1611864249000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb: that may be contentious too, you can take the position that i think yulia is taking, which is that it _is_ a getter","msgtype":"m.text"},"ts":1611864266000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(rbuckton bterlson) see above","msgtype":"m.text"},"ts":1611864275000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu: right but it's not a global one","msgtype":"m.text"},"ts":1611864279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: it gets really weird though once you start dealing with code wrappers","msgtype":"m.text"},"ts":1611864284000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: it's a module-level getter, which is not a thing that exists yet.","msgtype":"m.text"},"ts":1611864289000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: what's the global distinction?","msgtype":"m.text"},"ts":1611864291000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1611864292000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmm, need to think on that","msgtype":"m.text"},"ts":1611864308000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: iow, either 100% or 0% of my code has this horror available. adding it at module level means i need to worry about it per-module instead of per-app","msgtype":"m.text"},"ts":1611864319000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so the cognitive load is much, much higher.","msgtype":"m.text"},"ts":1611864331000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: but module toplevels can reference things on the global scope, which may have getters","msgtype":"m.text"},"ts":1611864359000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also global getters are a bad thing and basically nobody does them; the point of this new feature is to encourage people to do it","msgtype":"m.text"},"ts":1611864360000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*technically* all imports are getters rn","msgtype":"m.text"},"ts":1611864370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: and in general, when you look at an isolated variable use, you have no idea what it is","msgtype":"m.text"},"ts":1611864374000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: eval exists but we wouldn't want new features that encourage use of eval","msgtype":"m.text"},"ts":1611864381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: you know when a variable is in scope or not","msgtype":"m.text"},"ts":1611864391000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"do you?","msgtype":"m.text"},"ts":1611864403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as in, would resolve before the global object","msgtype":"m.text"},"ts":1611864404000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"for what its worth, making the import binding a getter is basically how we do this in fx","msgtype":"m.text"},"ts":1611864404000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"devsnek: sure but a guaranteed side-effect-free getter","msgtype":"m.text"},"ts":1611864406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: that is ... mostly true","msgtype":"m.text"},"ts":1611864414000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"michaelficarra: but only false for an arcane terrible reason","msgtype":"m.text"},"ts":1611864424000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which is that the global lexical scope is shared among script tags","msgtype":"m.text"},"ts":1611864434000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"with statement?","msgtype":"m.text"},"ts":1611864435000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"honestly i'd be more interested in a variant of dynamic import which has to take a string literal","msgtype":"m.text"},"ts":1611864440000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, with too","msgtype":"m.text"},"ts":1611864441000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so the engine can eagerly load it","msgtype":"m.text"},"ts":1611864446000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that would be great","msgtype":"m.text"},"ts":1611864449000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it still introduces async though","msgtype":"m.text"},"ts":1611864459000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: but yeah, good point","msgtype":"m.text"},"ts":1611864464000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which is blocking i think","msgtype":"m.text"},"ts":1611864464000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: altho that's an optimization they could already apply with a literal, right?","msgtype":"m.text"},"ts":1611864469000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: i can better relate to the qualitative difference of why this is added horror","msgtype":"m.text"},"ts":1611864488000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, but i think the point is that they don't want to refactor their code to have a dynamic import somewhere in it","msgtype":"m.text"},"ts":1611864488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not only that, but dynamic import has significant implications for a codebase","msgtype":"m.text"},"ts":1611864521000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"as shown by react's use case","msgtype":"m.text"},"ts":1611864526000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"because we have investigated just using a script to rewrite everything that use our lazy getter to use dynamic import","msgtype":"m.text"},"ts":1611864572000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: to make sure i understand the async-should-be-eager point","msgtype":"m.text"},"ts":1611864573000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the problem is just that you can't kick off a sync fetch on variable access","msgtype":"m.text"},"ts":1611864596000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because... the programmer intention was async?","msgtype":"m.text"},"ts":1611864603000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no because it would break run to completion","msgtype":"m.text"},"ts":1611864620000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh right","msgtype":"m.text"},"ts":1611864635000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"of course, thanks","msgtype":"m.text"},"ts":1611864637000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it changes the timing completely","msgtype":"m.text"},"ts":1611864640000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so, one way to deal with side-effectful code, that i looked at, was the same approach as top level await","msgtype":"m.text"},"ts":1611864660000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but it requires analysis and definition of what is side effectful","msgtype":"m.text"},"ts":1611864672000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in practice, it might end up delazifying everything and only allows modules that are basically just lists of functions to be lazy","msgtype":"m.text"},"ts":1611864692000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I didn't bring that up really clearly, but that was my worry there","msgtype":"m.text"},"ts":1611864710000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if there is a way to do this, i would be interested because it would resolve this issue","msgtype":"m.text"},"ts":1611864723000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: that's a good worry","msgtype":"m.text"},"ts":1611866170000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ystartsev: really looking forward to having an incubator call and bringing the chrome module streaming folks to the table","msgtype":"m.text"},"ts":1611866184000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, very excited to talk further about it","msgtype":"m.text"},"ts":1611866200000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"we are restarting in 4 mins","msgtype":"m.text"},"ts":1611867419000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I appreciate the phrasing of \"exploring the space of language negotiation\" sffc","msgtype":"m.text"},"ts":1611868640000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1611868767000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we have logs now!","msgtype":"m.text"},"ts":1611869328000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I still don't know what a bouncer is, concretely lol","msgtype":"m.text"},"ts":1611869347000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we COULD ask ecma to get an irccloud paid team account for delegates","msgtype":"m.text"},"ts":1611869354000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not interested in figuring that out","msgtype":"m.text"},"ts":1611869355000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: true","msgtype":"m.text"},"ts":1611869367000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think we should","msgtype":"m.text"},"ts":1611869373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: sounds like we could just go down the Slack route at that point","msgtype":"m.text"},"ts":1611869377000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"anything but slack","msgtype":"m.text"},"ts":1611869386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"slack has additional complications, no?","msgtype":"m.text"},"ts":1611869393000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"michaelficarra: it'll also be as-needed","msgtype":"m.text"},"ts":1611869411000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it has custom emojis, so… trade-offs","msgtype":"m.text"},"ts":1611869426000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"slack doesn't allow user to user moderation (like blocking, etc)","msgtype":"m.text"},"ts":1611869428000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"#webkit is dead so Sony doesn't actually have a reason to keep paying for my team's accounts (though I can still be an exception, I just have to go out of my way)","msgtype":"m.text"},"ts":1611869430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm unfamiliar with Matrix. While I'd been hoping for a response from Discord, the fact that I can't switch between personal and a \"work\" Discord account makes me interested in trying out Matrix.","msgtype":"m.text"},"ts":1611869779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Anything but Slack, yes.","msgtype":"m.text"},"ts":1611869809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slack's great but i'm in camp \"anything but discord\"","msgtype":"m.text"},"ts":1611869887000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I will round out the group by saying that I like Slack and Discord and am sad to add yet another platform to the mix","msgtype":"m.text"},"ts":1611869924000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Can I be in \"anything but IRC\" camp?","msgtype":"m.text"},"ts":1611870034000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb: count me in that camp as well","msgtype":"m.text"},"ts":1611870061000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"jridgewell: #tc39-inclusion tends to include those folks","msgtype":"m.text"},"ts":1611870065000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Replacing IRCCloud with X is net negative for me, but I'll get to forget IRC exists which is net positive.","msgtype":"m.text"},"ts":1611870080000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"not the former","msgtype":"m.text"},"ts":1611870081000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"net neutral**","msgtype":"m.text"},"ts":1611870098000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Ugh, correction isn't clear.","msgtype":"m.text"},"ts":1611870112000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Replacing IRCCloud with X is net neutral** for me, but I'll get to forget IRC exists which is net positive.","msgtype":"m.text"},"ts":1611870134000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I like IRCCloud but I have no other reason to use it, so at least I'm not actually adding to the number of active chat apps on my computer","msgtype":"m.text"},"ts":1611870214000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"by swapping it out with something else","msgtype":"m.text"},"ts":1611870225000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: pls repost question after i advance q","msgtype":"m.text"},"ts":1611870248000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"jridgewell: do you wish you wrote this on a platform that allows editing? :D","msgtype":"m.text"},"ts":1611870257000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"akirose: ahh not enough time to copy paste, will try to retype","msgtype":"m.text"},"ts":1611870266000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i got u","msgtype":"m.text"},"ts":1611870276000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ooh ty","msgtype":"m.text"},"ts":1611870289000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ryzokuken: that is another big point toward \"anything but IRC\", yeah","msgtype":"m.text"},"ts":1611870311000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I edit _constantly_ when that feature exists","msgtype":"m.text"},"ts":1611870329000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think editing is awesome","msgtype":"m.text"},"ts":1611870354000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ljharb: you think multi-method protocols are inherently bad?","msgtype":"m.text"},"ts":1611870356000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: besides RegExp, do you have an example of one you think isn't bad?","msgtype":"m.text"},"ts":1611870373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Set?","msgtype":"m.text"},"ts":1611870406000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"add/delete","msgtype":"m.text"},"ts":1611870425000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"the collection types more or less","msgtype":"m.text"},"ts":1611870425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"indeed, and we've already as a committee ran into that as a problem","msgtype":"m.text"},"ts":1611870426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if we ever do reify protocols, I sincerely hope that we stop calling them protocols","msgtype":"m.text"},"ts":1611870428000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: traits","msgtype":"m.text"},"ts":1611870433000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because no one has any idea what that word means","msgtype":"m.text"},"ts":1611870437000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that the Set constructor observably calls \"add\" is why Set methods haven't advanced.","msgtype":"m.text"},"ts":1611870439000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that'd be fine","msgtype":"m.text"},"ts":1611870445000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i had happily forgot the pain caused by Set and add()","msgtype":"m.text"},"ts":1611870471000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I couldn't remember what Set methods were blocked by yeah","msgtype":"m.text"},"ts":1611870487000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"akirose: my clarifying question isn't a question so i could just say it as part of my topic","msgtype":"m.text"},"ts":1611870686000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"base class calling subclass is just a rats nest","msgtype":"m.text"},"ts":1611870688000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"akirose: arguably i should have edited my topic to add that, but i can't edit :-)","msgtype":"m.text"},"ts":1611870704000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: yes","msgtype":"m.text"},"ts":1611870712000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb that is not why","msgtype":"m.text"},"ts":1611870966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k, please correct me :-)","msgtype":"m.text"},"ts":1611870994000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"dictionaries are recognized as a special thing in webidl","msgtype":"m.text"},"ts":1611871093000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"aren't they?","msgtype":"m.text"},"ts":1611871098000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: https://heycam.github.io/webidl/#idl-dictionaries","msgtype":"m.text"},"ts":1611871214000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb the main question was about reading internal slots when querying and how that would interact with subclassing","msgtype":"m.text"},"ts":1611871241000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the fact that the set ctor calls \"add\" wasn't super relevant","msgtype":"m.text"},"ts":1611871250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1611871256000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb you don't validate \"is this a calendar\"","msgtype":"m.text"},"ts":1611871294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i do if i want my API to give useful error messages when my users give me the wrong thing","msgtype":"m.text"},"ts":1611871306000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how do you validate \"is this a valid set of options to pass to babel\"","msgtype":"m.text"},"ts":1611871317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you don't","msgtype":"m.text"},"ts":1611871318000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's just a grab bag of options","msgtype":"m.text"},"ts":1611871323000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's how JS works","msgtype":"m.text"},"ts":1611871329000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's no class for \"BabelOptions\"","msgtype":"m.text"},"ts":1611871332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1611871336000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's good","msgtype":"m.text"},"ts":1611871337000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thus yes, it's just a grab bag","msgtype":"m.text"},"ts":1611871337000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the existence of a Calendar and TimeZone class mean it's not that.","msgtype":"m.text"},"ts":1611871346000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its different","msgtype":"m.text"},"ts":1611871355000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"than a typical grab bag of options? yes, i think it is different.","msgtype":"m.text"},"ts":1611871365000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if someone made such a class to let people more conveniently set them up, that would change the situation","msgtype":"m.text"},"ts":1611871366000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*that would _not_ change the situation","msgtype":"m.text"},"ts":1611871373000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there is both a nominal and a structural definition","msgtype":"m.text"},"ts":1611871374000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's the point of the protocol","msgtype":"m.text"},"ts":1611871378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the nominal one is like the default impl in stdlib","msgtype":"m.text"},"ts":1611871397000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a calendar is not just a set of options tho","msgtype":"m.text"},"ts":1611871406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is too","msgtype":"m.text"},"ts":1611871413000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"options are often separable.","msgtype":"m.text"},"ts":1611871414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no part of the calendar is conceptually separable, all of the methods have to work in concert","msgtype":"m.text"},"ts":1611871429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you could say \"a calendar is an object with these methods and these properties\"","msgtype":"m.text"},"ts":1611871438000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"options are not necessarily separable, that's just a thing which sometimes happens to be true","msgtype":"m.text"},"ts":1611871441000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1611871451000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: right, so, how do i validate that an object someone gave me has the right methods and properties","msgtype":"m.text"},"ts":1611871463000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you could do it manually","msgtype":"m.text"},"ts":1611871491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a proposal somewhere for `x implements Y`","msgtype":"m.text"},"ts":1611871499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"could and should, since being an instance of the class does not imply it has those methods","msgtype":"m.text"},"ts":1611871506000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i'm fine assuming that a subclass is well-formed, that's not the same as assuming that any random object is.","msgtype":"m.text"},"ts":1611871546000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for a thenable i can `typeof x.then === 'function'` and assume the rest","msgtype":"m.text"},"ts":1611871559000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's a manual check","msgtype":"m.text"},"ts":1611871568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1611871570000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"of a single method.","msgtype":"m.text"},"ts":1611871572000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because that's what a thenable is","msgtype":"m.text"},"ts":1611871584000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"iterator results objects have both a `value` and a `done`","msgtype":"m.text"},"ts":1611871605000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not difficult to distinguish objects conforming to a single-method protocol.","msgtype":"m.text"},"ts":1611871610000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: those aren't methods. iterator results objects are just data.","msgtype":"m.text"},"ts":1611871618000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not pretending there's a short list of simple rules here.","msgtype":"m.text"},"ts":1611871628000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but these things are not all the same.","msgtype":"m.text"},"ts":1611871633000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"timezone objects are also just data, they're just implemented as code","msgtype":"m.text"},"ts":1611871638000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"self-sends","msgtype":"m.text"},"ts":1611871657000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"okay thanks","msgtype":"m.text"},"ts":1611871681000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb the reason to provide a class is to provide a convenient way to get a set of default behavior, if you want that","msgtype":"m.text"},"ts":1611871683000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sends as in sending messages","msgtype":"m.text"},"ts":1611871684000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: a function serves that purpose","msgtype":"m.text"},"ts":1611871713000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so does a class","msgtype":"m.text"},"ts":1611871721000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sure. but a function doesn't encourage subclassing.","msgtype":"m.text"},"ts":1611871727000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the Set constructor does self-sends: https://tc39.es/ecma262/#sec-set-iterable","msgtype":"m.text"},"ts":1611871737000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's not required","msgtype":"m.text"},"ts":1611871741000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it allows subclassing","msgtype":"m.text"},"ts":1611871752000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the proposal is that a time zone is an object with methods such as \"getNextTransition\"","msgtype":"m.text"},"ts":1611871784000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"jorendorff: so self-sends means where the default implementation of a method calls out to another virtual method that also has a default implementation","msgtype":"m.text"},"ts":1611871899000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"on the same receiver","msgtype":"m.text"},"ts":1611871905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb I just do not agree with the claim that being a class encourages subclassing","msgtype":"m.text"},"ts":1611871926000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That's my understanding, yes.","msgtype":"m.text"},"ts":1611871930000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: cool thanks","msgtype":"m.text"},"ts":1611871944000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: correct","msgtype":"m.text"},"ts":1611871948000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: i have heard many people ask me \"if i'm not supposed to subclass Promise why can i `extends Promise`\"","msgtype":"m.text"},"ts":1611871961000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can `extends Function` too","msgtype":"m.text"},"ts":1611871969000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so what","msgtype":"m.text"},"ts":1611871971000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: obv anecdotal but that's my experience","msgtype":"m.text"},"ts":1611871972000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what's the difference between that and \"if i'm not supposed to never terminate my function why can i write for(;;)\"?","msgtype":"m.text"},"ts":1611871981000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: yes, and someone asked me *12 hours ago* how to make that work without violating CSP","msgtype":"m.text"},"ts":1611871982000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: you can extends any random function (arrows aside)","msgtype":"m.text"},"ts":1611872000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: because their opinion was, Function is a class, i should be able to subclass it","msgtype":"m.text"},"ts":1611872001000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we should not involve Promise in this discussion, every decision made for Promise was the wrong decision","msgtype":"m.text"},"ts":1611872001000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lol, perfect","msgtype":"m.text"},"ts":1611872014000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"because \"being a class\" does, for some, imply it's subclassable.","msgtype":"m.text"},"ts":1611872019000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: the name was pretty good","msgtype":"m.text"},"ts":1611872020000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: i can even subclass your functions","msgtype":"m.text"},"ts":1611872029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i think that is a dangerous position to accept","msgtype":"m.text"},"ts":1611872038000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: sure, if i don't make them arrows or concise methods","msgtype":"m.text"},"ts":1611872041000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I don't think the existence of people with that opinion is a very strong argument, on its own, that we should avoid having class for encapsulating a set of methods","msgtype":"m.text"},"ts":1611872041000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: dangerous how?","msgtype":"m.text"},"ts":1611872043000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: or async functions or generators","msgtype":"m.text"},"ts":1611872057000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: possibility is a far cry from \"supposed to\"","msgtype":"m.text"},"ts":1611872059000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also like","msgtype":"m.text"},"ts":1611872080000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is fine to subclass these things","msgtype":"m.text"},"ts":1611872083000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agree with mark","msgtype":"m.text"},"ts":1611872097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: that is true that it being possible is not the same as saying people should do it.","msgtype":"m.text"},"ts":1611872100000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if these things brand check their arguments, that implies you're supposed to subclass","msgtype":"m.text"},"ts":1611872140000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: but it does mean the *easiest* way to override one method is to subclass it, so that's what people are likely to do","msgtype":"m.text"},"ts":1611872142000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: that i agree with","msgtype":"m.text"},"ts":1611872146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but if they take options bags, there is no such implication","msgtype":"m.text"},"ts":1611872152000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think the current design also means that every time a stored calendar object has a method invoked, it's observably Get-ed off the object - the Proxy handler pattern, basically. is that what we want?","msgtype":"m.text"},"ts":1611872196000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"meaning, should it cache the methods rather than the object?","msgtype":"m.text"},"ts":1611872203000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sure, having temporal cache sgtm","msgtype":"m.text"},"ts":1611872222000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no strong feelings though","msgtype":"m.text"},"ts":1611872228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would say if it extracts functions off of the object and caches them, then *that* would be treating it like an object bag, and the object's identity/characteristics becomes irrelevant","msgtype":"m.text"},"ts":1611872278000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"eh, i think the majority of consumers of options bag consume the arguments as-needed, rather than pulling them off up front","msgtype":"m.text"},"ts":1611872322000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least this was true before destructuring made it easier to pull them off","msgtype":"m.text"},"ts":1611872332000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think that would hinder ergonomics, at least in Temporal","msgtype":"m.text"},"ts":1611872340000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: what sort of ergonomics","msgtype":"m.text"},"ts":1611872378000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Temporal.TimeZone.from(\"America/New_York\").getNextTransition === Temporal.TimeZone.from(\"Europe/Paris\").getNextTransition, but we definitely don't want the same output for the same input","msgtype":"m.text"},"ts":1611872450000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"FYI first-class protocols proposal includes an easy way to check for conformance to a protocol","msgtype":"m.text"},"ts":1611872462000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there's state held in the object","msgtype":"m.text"},"ts":1611872466000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"geez how are we having this discussion","msgtype":"m.text"},"ts":1611872510000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"JS is not that language, let's move on","msgtype":"m.text"},"ts":1611872528000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"michaelficarra: yes that would be a perfect answer to this queue item, to be fair.","msgtype":"m.text"},"ts":1611872539000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: +1 for first-class protocols","msgtype":"m.text"},"ts":1611872547000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"protocols aren't a good fit for this, since this isn't a protocol","msgtype":"m.text"},"ts":1611872558000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: first-class protocols proposal can represent string-based \"duck typing\"/\"protocols\" in the same way it represents symbol-based protocols","msgtype":"m.text"},"ts":1611872627000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we don't want to provide the same convenience for *installing* string-based protocols, since they're not meant to be shared","msgtype":"m.text"},"ts":1611872652000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"but for confirming them, it's fine","msgtype":"m.text"},"ts":1611872658000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"eh, sure, ok","msgtype":"m.text"},"ts":1611872668000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb if you only care about wildly wrong things, just pick some particular method and look for that one","msgtype":"m.text"},"ts":1611872683000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I've thought about this stuff *a lot*","msgtype":"m.text"},"ts":1611872692000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"does it have a `day` method? it's probably a calendar. does it not? throw an error","msgtype":"m.text"},"ts":1611872695000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"littledan: i'm not sure why storing a Record holding all the functions wouldn't work the same","msgtype":"m.text"},"ts":1611872861000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i remain woefully ignorant of temporal","msgtype":"m.text"},"ts":1611872953000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is the current behavior subclassing or not subclassing?","msgtype":"m.text"},"ts":1611872958000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1611872971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu there's a class, but you don't have to use it","msgtype":"m.text"},"ts":1611872976000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can just give a grab bag","msgtype":"m.text"},"ts":1611872982000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: but to hook behavior, is it to subclass?","msgtype":"m.text"},"ts":1611872983000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay, so it is not to subclass","msgtype":"m.text"},"ts":1611872988000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1611872990000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: it would work if it held the functions *and* the object, with observable differences in the two approaches being whether or not code like `Temporal.TimeZone.prototype.getNextTransition = …` has any effect on already-used time zones","msgtype":"m.text"},"ts":1611872993000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ljharb: Since the instances have an internal slot that the methods need to access","msgtype":"m.text"},"ts":1611872998000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"can someone help to move https://github.com/tc39-transfer/proposal-regexp-set-notation to the proper tc39 org? thanks! cc bterlson","msgtype":"m.text"},"ts":1611873005000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"shu subclassing works if you want that, I understand","msgtype":"m.text"},"ts":1611873006000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"o","msgtype":"m.text"},"ts":1611873017000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"littledan: that means it'd need to store the object too, to use as the receiver, sure - but not that it'd need to also do an observable Get every time.","msgtype":"m.text"},"ts":1611873021000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so Temporal does self-sends","msgtype":"m.text"},"ts":1611873027000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1611873031000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1611873039000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gibson042: that is true, but to be that'd be less surprising - it'd mean breaking things only breaks *later* calendar/timezone usage instead of already-constructed, allegedly immutable instances.","msgtype":"m.text"},"ts":1611873052000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Yes, that is a different possible observable semantics","msgtype":"m.text"},"ts":1611873060000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"gibson042: iow \"immutable\" seems like it a claim that would *want* the behavior i'm describibng.","msgtype":"m.text"},"ts":1611873066000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, I can see value in this position","msgtype":"m.text"},"ts":1611873089000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ie, Temporal objects as specified are not immutable at all - they're mutable by mutating a calendar method.","msgtype":"m.text"},"ts":1611873092000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*replacing","msgtype":"m.text"},"ts":1611873098000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it's now a much narrower difference, just \"Get(…) every time\" vs. \"Get(…) on ingest only\"","msgtype":"m.text"},"ts":1611873212000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"fwiw it actually looks like Ecma 402 usually does ingestion relatively eagerly","msgtype":"m.text"},"ts":1611873269000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g. https://tc39.es/ecma402/#sec-initializedatetimeformat","msgtype":"m.text"},"ts":1611873284000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: it'd be \"Get once, plus Call every time\" rather than \"Get + Call every time\"","msgtype":"m.text"},"ts":1611873431000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1611873450000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: which was the same change, with a perf motivation,. to look up `this.resolve` in all the Promise methods","msgtype":"m.text"},"ts":1611873451000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*combinators","msgtype":"m.text"},"ts":1611873460000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also in Map/Set/etc. constructors IIRC","msgtype":"m.text"},"ts":1611873469000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"there was/is an exception in 402 that I'm looking for now","msgtype":"m.text"},"ts":1611873491000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"but it was clearly unintentional, and a mess","msgtype":"m.text"},"ts":1611873502000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042 yes for map/set/etc ctors, though that was internal to a single method rather than caching for laters","msgtype":"m.text"},"ts":1611873514000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wsdferdksl: i noticed people sometimes talk over you but it doesn't seem intentional, is it a delay issue? i don't know if others have noticed it","msgtype":"m.text"},"ts":1611873552000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"also, a bunch of people just left","msgtype":"m.text"},"ts":1611873585000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's only happened in the last hour or two that I noticed, and I think it's a network issue yeah","msgtype":"m.text"},"ts":1611873587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can't see tab's video","msgtype":"m.text"},"ts":1611873610000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(because teams doesn't let me browse through everybody while seeing their video)","msgtype":"m.text"},"ts":1611873628000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It's all right, it's just me in my jammies and housecoat, and pretty scruffily unshaved","msgtype":"m.text"},"ts":1611873776000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/tc39/ecma402/issues/132 is definitely relevant","msgtype":"m.text"},"ts":1611873883000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"https://github.com/tc39/ecma402/pull/493#discussion_r465537106 is what I was thinking of, which is related but distinct","msgtype":"m.text"},"ts":1611874024000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: thanks for finding that","msgtype":"m.text"},"ts":1611874287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We should do JSConf Hawaii again in the aftertimes.","msgtype":"m.text"},"ts":1611874750000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes absolutely","msgtype":"m.text"},"ts":1611874855000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I am most excited to actually have the tokyo meeting","msgtype":"m.text"},"ts":1611874864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"was Hawaii a sufficient compromise timezone-wise for Asian delegate inclusion, or would Tokyo be better?","msgtype":"m.text"},"ts":1611874870000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I keep making plans to go to Japan or HK and having them not work out","msgtype":"m.text"},"ts":1611874875000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(and HK is probably not an option any more...)","msgtype":"m.text"},"ts":1611874884000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sooooo sad about tokyo and looking forward to that meeting","msgtype":"m.text"},"ts":1611874897000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: tough to tell; none attended, but it was also covid time for them","msgtype":"m.text"},"ts":1611874924000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't believe any Asian delegates were in HI","msgtype":"m.text"},"ts":1611874931000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So, probably not good enough?","msgtype":"m.text"},"ts":1611874937000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"also i think that particular week was a holiday in china?","msgtype":"m.text"},"ts":1611874959000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i had an *amazing* alaska/japan cruise planned last year, that obviously had to get canceled. as did my mediterranean cruise that was supposed to happen this summer, too :(","msgtype":"m.text"},"ts":1611874962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I bet you are a fun cruise partner","msgtype":"m.text"},"ts":1611874991000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I do board game cruises (BGG At Sea) and yeah, I hope so","msgtype":"m.text"},"ts":1611875010000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my wife enjoys it at least","msgtype":"m.text"},"ts":1611875013000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also a reminder to please fill out the do-exprs survey if you haven't yet: https://docs.google.com/forms/d/e/1FAIpQLScyNcGNfjoJXMTmfBkLRMREKCP2TihiFGqc26HhjL4710qdiA/viewform?usp=sf_link","msgtype":"m.text"},"ts":1611875324000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I bought a heated floor mat for my feet, and it's the 💣","msgtype":"m.text"},"ts":1611875346000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Now I feel like a cat.","msgtype":"m.text"},"ts":1611875351000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i bought slippers","msgtype":"m.text"},"ts":1611875374000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have slippers, and they weren't doing the job well enough.","msgtype":"m.text"},"ts":1611875389000,"senderName":"jridgewell","senderId":"jridgewell@irc"}
]