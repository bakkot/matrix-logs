[
{"content":{"body":"whaa","msgtype":"m.text"},"ts":1580947202000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh wait it didn't","msgtype":"m.text"},"ts":1580947210000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i lied","msgtype":"m.text"},"ts":1580947211000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ES logical-ish operators work on boolean-ish values like truthy and falsy.","msgtype":"m.text"},"ts":1580947220000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i was accidentally looking at bitwise ops","msgtype":"m.text"},"ts":1580947234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah phew","msgtype":"m.text"},"ts":1580947239000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: some value selection operators pivot on truthiness. `??` is a value selection operator that pivots on nullishness.","msgtype":"m.text"},"ts":1580947271000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: yeah my point is to be really diligent about not mixing \"truthy\" and \"nullish\" terminology willy-nilly","msgtype":"m.text"},"ts":1580947276000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"neither are logical.","msgtype":"m.text"},"ts":1580947277000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: lol","msgtype":"m.text"},"ts":1580947287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"6 years ago https://usercontent.irccloud-cdn.com/file/uZGwDHvC/sc","msgtype":"m.text"},"ts":1580947306000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"ljharb: A few meetings ago there was a (possibly joking) proposal to introduce strict-logical operators `|||` and `&&&`","msgtype":"m.text"},"ts":1580947317000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: :high-five:","msgtype":"m.text"},"ts":1580947317000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: lol yes, and those would be logical","msgtype":"m.text"},"ts":1580947326000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://esdiscuss.org/topic/shorthand-notation-for-attribute-creation","msgtype":"m.text"},"ts":1580947336000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"\"object creation\" good orthogonality","msgtype":"m.text"},"ts":1580947369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/object/attribute/","msgtype":"m.text"},"ts":1580947378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"true that","msgtype":"m.text"},"ts":1580947431000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"rbuckton: omg","msgtype":"m.text"},"ts":1580947601000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if we go with the one where it doesn't call set","msgtype":"m.text"},"ts":1580947794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does it block exceptions","msgtype":"m.text"},"ts":1580947800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like `thisDoesNotExist ||= false`","msgtype":"m.text"},"ts":1580947806000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra by \"in this proposal\" do you mean the short-circuiting variant?","msgtype":"m.text"},"ts":1580947811000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1580947830000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: if `thisDoesNotExist` is not defined, it would throw on the attempt to read the binding.","msgtype":"m.text"},"ts":1580947834000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh true","msgtype":"m.text"},"ts":1580947842000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580947843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haxjs: do you want to do one of your topics after the break (in about 20-30 minutes)?","msgtype":"m.text"},"ts":1580947857000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"2001!","msgtype":"m.text"},"ts":1580947866000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"I have notes in my closet about adding class fields dating back to 1999","msgtype":"m.text"},"ts":1580947908000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sffc: optional chaining doesn't permit assignment.","msgtype":"m.text"},"ts":1580947915000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(as much as I would rather it did).","msgtype":"m.text"},"ts":1580947944000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Bakkot: wow!","msgtype":"m.text"},"ts":1580947968000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"sffc: optional chaining disallows assignment atm","msgtype":"m.text"},"ts":1580947994000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"That `a?.setValue(b)` works but `a?.value = b` doesn't is unfortunate to me.","msgtype":"m.text"},"ts":1580948489000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"seems reasonable to me","msgtype":"m.text"},"ts":1580948518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I am really happy that doesn't work","msgtype":"m.text"},"ts":1580948519000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"breaking until 14:33 (10 mins)","msgtype":"m.text"},"ts":1580948617000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"kiwi IRC keeps dropping my connection - what linux clients are folks using?","msgtype":"m.text"},"ts":1580948867000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"irssi","msgtype":"m.text"},"ts":1580948887000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"irssi running in tmux is what i used to use on linux","msgtype":"m.text"},"ts":1580948918000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"err no it was running in screen","msgtype":"m.text"},"ts":1580948931000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i fell in love with tmux only in the past 5 or 10 years","msgtype":"m.text"},"ts":1580948951000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"hearing \"filter in\" confuses me","msgtype":"m.text"},"ts":1580949545000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1580949553000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Do any existing languages use `filterOut`? Scala and Kotlin use `filterNot`","msgtype":"m.text"},"ts":1580949554000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"if you start with \"filter out\" then \"filter in\" makes sense","msgtype":"m.text"},"ts":1580949557000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the other way around makes my brain not understand","msgtype":"m.text"},"ts":1580949568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't like `filterOut` because \"filter in\" is not an English phrase","msgtype":"m.text"},"ts":1580949569000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but `filterWithout` might be not unthinkable?","msgtype":"m.text"},"ts":1580949583000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"brad4d: I use empathy typically, but it's not working here due to blocked ports","msgtype":"m.text"},"ts":1580949591000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I like `filterNot` because the semantics and name have precedence in other languages.","msgtype":"m.text"},"ts":1580949599000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"so for now I'm using the freenode webchat","msgtype":"m.text"},"ts":1580949602000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"rbuckton: ditto but Justin doesn't like it","msgtype":"m.text"},"ts":1580949623000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I would argue for prior art as it helps developers of multiple languages make sense of the feature.","msgtype":"m.text"},"ts":1580949656000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"removeIfCallbackReturnsTrue","msgtype":"m.text"},"ts":1580949682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually","msgtype":"m.text"},"ts":1580949701000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"remove and keep","msgtype":"m.text"},"ts":1580949703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"👀","msgtype":"m.text"},"ts":1580949706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`.excludeIf` :/","msgtype":"m.text"},"ts":1580949720000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i don't like having \"if\" in the name","msgtype":"m.text"},"ts":1580949734000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"removeIf and keepIf work though","msgtype":"m.text"},"ts":1580949740000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`.omit`, if we're not calling it filter something?","msgtype":"m.text"},"ts":1580949742000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Me either.","msgtype":"m.text"},"ts":1580949742000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"exclude is also a negative which is not ideal","msgtype":"m.text"},"ts":1580949762000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`.omit` is interesting.","msgtype":"m.text"},"ts":1580949765000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"omit and emit","msgtype":"m.text"},"ts":1580949783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: `exclude` is also the opposite of `include`, which is already used for a different meaning on arrays (i.e. ,`.includes(value)`)","msgtype":"m.text"},"ts":1580949792000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: That'll just be another `wake` and `wait` problem.","msgtype":"m.text"},"ts":1580949818000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: yeah i being facetious","msgtype":"m.text"},"ts":1580949830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`Function.prototype.not = function() { let self = this; return function() { return !self.apply(this, arguments); }; };`","msgtype":"m.text"},"ts":1580949838000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1580949845000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh yes","msgtype":"m.text"},"ts":1580949848000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh the overhead","msgtype":"m.text"},"ts":1580949859000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh the humanity","msgtype":"m.text"},"ts":1580949867000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(sorry)","msgtype":"m.text"},"ts":1580949869000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bindInverse","msgtype":"m.text"},"ts":1580949879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think I'd support `.omit`","msgtype":"m.text"},"ts":1580949901000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"omit is good","msgtype":"m.text"},"ts":1580949908000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"assuming its the opposite of what filter does","msgtype":"m.text"},"ts":1580949915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`reject` is fine","msgtype":"m.text"},"ts":1580949916000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i don't know what it does","msgtype":"m.text"},"ts":1580949919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"off the top of my head","msgtype":"m.text"},"ts":1580949924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also I still kinda prefer groupBy/partition, we can kill two birds with one stone","msgtype":"m.text"},"ts":1580949933000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I dislike `reject` because of possible `Promise.reject`confusion. I like `filterNot`, but `omit` isn't terrible.","msgtype":"m.text"},"ts":1580949947000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I'd love `groupBy`","msgtype":"m.text"},"ts":1580949960000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah I think the Promise.reject concern is legitimate too","msgtype":"m.text"},"ts":1580949962000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"as in","msgtype":"m.text"},"ts":1580949995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"partition into two groups","msgtype":"m.text"},"ts":1580949995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keep one?","msgtype":"m.text"},"ts":1580949995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Then again, my iterable-quer package has `groupBy`, so I'm biased.","msgtype":"m.text"},"ts":1580949999000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"*query","msgtype":"m.text"},"ts":1580950005000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: yeah, a special-cased groupBy","msgtype":"m.text"},"ts":1580950019000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"why not just sort and slice","msgtype":"m.text"},"ts":1580950029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1580950032000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"justin has argued against groupBy/partition because of the perceived overhead from returning a container and taking out the bit you care about","msgtype":"m.text"},"ts":1580950061000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i wouldn't use partition to filter","msgtype":"m.text"},"ts":1580950081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if it were a thing","msgtype":"m.text"},"ts":1580950083000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I don't think we should really care about the wrappers that often don't actually have to be realised","msgtype":"m.text"},"ts":1580950086000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'd use it to partition","msgtype":"m.text"},"ts":1580950087000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, if you don't want the `false` values, `partition` would have unnecessary overhead since it would produce both sides of the condition.","msgtype":"m.text"},"ts":1580950125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: not necessarily though","msgtype":"m.text"},"ts":1580950191000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"when you pull the thruthy result out immediately and the falsey result is unobservable, the engine doesn't need to realise it","msgtype":"m.text"},"ts":1580950234000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this kind of optimisation (the same we discussed earlier with Object.iterateKeys) seems fairly straightforward to me","msgtype":"m.text"},"ts":1580950264000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lot of overhead for non-jit impls","msgtype":"m.text"},"ts":1580950279000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"especially in embedded case","msgtype":"m.text"},"ts":1580950285000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where memory is tight","msgtype":"m.text"},"ts":1580950288000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"non-jit impls are dog slow ayway, who cares?","msgtype":"m.text"},"ts":1580950295000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"*anyway","msgtype":"m.text"},"ts":1580950297000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"performance isn't the only concern","msgtype":"m.text"},"ts":1580950308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you only have 64k of ram you can't be wasting it on unused arrays","msgtype":"m.text"},"ts":1580950324000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah. Even in a jit impl, you still need to hold onto all of the memory *just in case* the calling code requests it.","msgtype":"m.text"},"ts":1580950325000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: there's no \"just in case\" when you can prove there's no way to observe it","msgtype":"m.text"},"ts":1580950361000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it may not always be as simple as partition(xyz)[0]","msgtype":"m.text"},"ts":1580950419000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my point was basically just \"jit will make it usable\" is not a great choice imo","msgtype":"m.text"},"ts":1580950453000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"don't want to get too into the weeds of how things jit","msgtype":"m.text"},"ts":1580950474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`filterNot` only works as a name if you understand what `filter` does","msgtype":"m.text"},"ts":1580950480000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Also depends on engine implementers actually implementing the optimization, which could take time depending on their backlog and other work.","msgtype":"m.text"},"ts":1580950485000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"The \"not\" doesn't imply what's happening","msgtype":"m.text"},"ts":1580950501000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"🤷 you don't even need a JIT, keith_miller was saying it could probably be done at the interpreter level","msgtype":"m.text"},"ts":1580950510000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"and I agree","msgtype":"m.text"},"ts":1580950517000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"It's simply inverting `filter`, which is my problem, I can't remember what `filter` does.","msgtype":"m.text"},"ts":1580950521000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: You said your self, every language that uses `filter` has the same semantics as JS, so it seems fairly obvious what `filterNot` would mean to those developers.","msgtype":"m.text"},"ts":1580950533000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"interpreter is one of the stages of jit","msgtype":"m.text"},"ts":1580950540000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: I think that regardless of what comes of this proposal, you're going to start remembering what filter does now","msgtype":"m.text"},"ts":1580950552000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"problem solved","msgtype":"m.text"},"ts":1580950554000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(i assume no implementations are doing AST walks?)","msgtype":"m.text"},"ts":1580950558000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Every language is wrong. 😛","msgtype":"m.text"},"ts":1580950561000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"(aside from engine262)","msgtype":"m.text"},"ts":1580950569000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i actually do know what splice does now","msgtype":"m.text"},"ts":1580950594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: the point is that we shouldn't rely on engines performing optimizations to js code","msgtype":"m.text"},"ts":1580950681000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like something that walks over an ast tree is a valid (but slow) implementation","msgtype":"m.text"},"ts":1580950708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think we can't make performance-based justifications in the absence of information about performance optimisations","msgtype":"m.text"},"ts":1580950734000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think that just means we shouldn't make perf-based justifications for this?","msgtype":"m.text"},"ts":1580950784000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Aside from perf discussions, it's a high bar to expect developers to reason that the opposite of `filter` is `partition(...)[0]` or `partition(...)[1]`, as they'd likely need to review documentation on `partition` to know which array was which.","msgtype":"m.text"},"ts":1580950945000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah I don't really think those conversations should be merged","msgtype":"m.text"},"ts":1580950989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: who said array?","msgtype":"m.text"},"ts":1580951028000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"`partition(...).true`","msgtype":"m.text"},"ts":1580951038000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"`groupBy(...).true`","msgtype":"m.text"},"ts":1580951052000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"same thing","msgtype":"m.text"},"ts":1580951058000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I'd like `filterNot` (whatever it is named) for perf-critical scenarios, as there are a lot of *positive* filter callbacks out there (like `isString`, etc.), but you rarely see an `isNotString`, so you end up with a lot of `.filter(x => !isString(x))`, which produces more overhead than a `.filterNot(isString)`.","msgtype":"m.text"},"ts":1580951061000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: I mean you could reasonably expect that it would *eventually* lead to better perf but it wouldn't be a spec conformance req","msgtype":"m.text"},"ts":1580951112000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"michaelficarra: Definitely wouldn't use `groupBy` like that (i'd expect to be able to group by other keys besides booleans that may not have a reliable `toString` implementation). `partition` maybe, since all the `partition` implementations I've seen only split on boolean.","msgtype":"m.text"},"ts":1580951132000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"we've discussed the rationale for BigInt's JSON semantics at length in TC39; I'd be happy to follow up with anyone offline for background here","msgtype":"m.text"},"ts":1580951174000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"why hasn't there been as much screaming about not being able to round trip undefined values?","msgtype":"m.text"},"ts":1580951806000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ok folks, im out","msgtype":"m.text"},"ts":1580951810000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ECMAScript distinguishes null from undefined pretty consistently, for better or worse","msgtype":"m.text"},"ts":1580951827000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ill be back in the morning","msgtype":"m.text"},"ts":1580951831000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"michaelficarra: i assume because most languages don't have two nil values","msgtype":"m.text"},"ts":1580951835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👋","msgtype":"m.text"},"ts":1580951837000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"but in JSON we just convert to null and call it a day","msgtype":"m.text"},"ts":1580951845000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"👋","msgtype":"m.text"},"ts":1580951845000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: but we are ECMAScript","msgtype":"m.text"},"ts":1580951864000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: I've actually written code that depends on undefined not being round-tripped for security","msgtype":"m.text"},"ts":1580951865000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: the question is why do people care so much about round-tripping of BigInt but not undefined?","msgtype":"m.text"},"ts":1580951894000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"because undefined is one value, and it's not that useful to know it's there, but bigint represents infinite values","msgtype":"m.text"},"ts":1580951922000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: finite but very many","msgtype":"m.text"},"ts":1580951996000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1580952008000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we get questions for NaN all the time","msgtype":"m.text"},"ts":1580952009000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"infinite strings of characters are not valid JSON I believe","msgtype":"m.text"},"ts":1580952018000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"a great many, then, the point stands","msgtype":"m.text"},"ts":1580952034000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"apaprocki: same thing!","msgtype":"m.text"},"ts":1580952035000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"wait, did ecma404 add  a size limit??","msgtype":"m.text"},"ts":1580952082000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: not a finite one, no","msgtype":"m.text"},"ts":1580952136000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580952175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: they have infinite precision but can only represent finite numbers","msgtype":"m.text"},"ts":1580952227000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"philosophical question.. does a string of infinite length have a trailing \"?","msgtype":"m.text"},"ts":1580952274000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"\"arbitrarily many\"","msgtype":"m.text"},"ts":1580952294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"apaprocki mu","msgtype":"m.text"},"ts":1580952299000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"infinity+1","msgtype":"m.text"},"ts":1580952302000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh this is the wrong channel again","msgtype":"m.text"},"ts":1580952310000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as the meeting goes on, #tdz slowly merges with #tc39-delegates","msgtype":"m.text"},"ts":1580952342000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"every time","msgtype":"m.text"},"ts":1580952365000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"truly every time","msgtype":"m.text"},"ts":1580952494000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this doesn't bode well for tomorrow","msgtype":"m.text"},"ts":1580952499000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"from remote I can hear Ron very well","msgtype":"m.text"},"ts":1580952903000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Brian also talked","msgtype":"m.text"},"ts":1580952918000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"he's talking now","msgtype":"m.text"},"ts":1580952923000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"thanks littledan","msgtype":"m.text"},"ts":1580952939000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"our speaker is quiet for some reason","msgtype":"m.text"},"ts":1580952945000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"trying to fix it","msgtype":"m.text"},"ts":1580952946000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fixed!","msgtype":"m.text"},"ts":1580952950000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the comment about methods on each TypedArray prototype seems misplaced: the built-in methods are on the shared superclass","msgtype":"m.text"},"ts":1580953136000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"michaelficarra an infinite string of characters *might* be valid JSON, but it's too soon to tell.","msgtype":"m.text"},"ts":1580953376000,"senderName":"cmorningstar","senderId":"cmorningstar@irc"},
{"content":{"body":"I guess we'll just agree that it both is and isn't for now","msgtype":"m.text"},"ts":1580953430000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we are not using webidl","msgtype":"m.text"},"ts":1580953563000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in node core","msgtype":"m.text"},"ts":1580953565000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MylesBorins:","msgtype":"m.text"},"ts":1580953566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"SDO = standards development body btw","msgtype":"m.text"},"ts":1580953643000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"org\" you mean?","msgtype":"m.text"},"ts":1580953747000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"SDO = Software Documentation Outhouse","msgtype":"m.text"},"ts":1580953823000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"pedant 😝","msgtype":"m.text"},"ts":1580953825000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"wrong channel sorry","msgtype":"m.text"},"ts":1580953829000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"devsnek: Well, you might benefit in terms of spec compliance if you used a generator, and tests based on idlharness.js","msgtype":"m.text"},"ts":1580953833000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"my coworker Joyee has been working on applying this in Node.js Core, for existing APIs","msgtype":"m.text"},"ts":1580953850000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"akirose: oh sorry, I was actually making sure myself >_<","msgtype":"m.text"},"ts":1580953860000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"littledan: yeah not saying we shouldn't","msgtype":"m.text"},"ts":1580953868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just that we currently don't","msgtype":"m.text"},"ts":1580953872000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i love what jsdom does","msgtype":"m.text"},"ts":1580953883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh right of course you know about this already, sorry for being redundant","msgtype":"m.text"},"ts":1580953898000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"my understanding was that WebCrypto in Node Core was pretty early","msgtype":"m.text"},"ts":1580953910000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"currently separate repo https://github.com/nodejs/webcrypto","msgtype":"m.text"},"ts":1580953926000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we LITERALLY define subtraction by normative reference to another spec!","msgtype":"m.text"},"ts":1580954117000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"what is this example?!","msgtype":"m.text"},"ts":1580954122000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"amazing","msgtype":"m.text"},"ts":1580954134000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"same with Intl and the Unicode data sets","msgtype":"m.text"},"ts":1580954142000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"holds self back from clarifying, again, that we don't reference CLDR or ICU","msgtype":"m.emote"},"ts":1580954369000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh, I guess I didn't do that right","msgtype":"m.text"},"ts":1580954378000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(we do reference the Unicode Character Database)","msgtype":"m.text"},"ts":1580954396000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"😜","msgtype":"m.text"},"ts":1580954545000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"that comment in the WebCrypto repo was made by a W3C staffer. It's not clear how this relates to other W3C participants think.","msgtype":"m.text"},"ts":1580954638000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and it's not clear what's meant by referencing the definition: should it observably call it, as we're talking about UUID doing?","msgtype":"m.text"},"ts":1580954678000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://github.com/w3c/webcrypto/issues/227","msgtype":"m.text"},"ts":1580954681000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan oh, ok. he has the commit bit on the repo so I assumed he was the maintainer for these purposes","msgtype":"m.text"},"ts":1580954692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the W3C often performs useful functions in terms of releasing specifications and helping with broad review, so commit bits are not surprisng","msgtype":"m.text"},"ts":1580954825000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: please lmk when you've renamed the proposal/repo, and i'll update the proposals repo","msgtype":"m.text"},"ts":1580954831000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Sure.","msgtype":"m.text"},"ts":1580954857000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"littledan is there way to answer the question of what other W3C participants think?","msgtype":"m.text"},"ts":1580954920000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Yeah, maybe you could reconvene the WebCrypto WG, whose charter expired? :)","msgtype":"m.text"},"ts":1580954944000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1580954950000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would prefer to not do that","msgtype":"m.text"},"ts":1580954955000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Would reconvening be necessary if it's just a matter of shuffling which things are in which spec?","msgtype":"m.text"},"ts":1580954990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe starting with an email to the person who filed that issue (who's been landing things), the person listed as editor, and the other person landing things over the past year?","msgtype":"m.text"},"ts":1580955157000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"there's an interesting question of whether we care about a new standard being released, or whether it'd be enough to get an update into the editor's draft","msgtype":"m.text"},"ts":1580955184000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"long-brewing W3C work would enable just updating the editor's draft and not worrying. Lots of people just update the draft and are happy, even in the absence of this procedure.","msgtype":"m.text"},"ts":1580955247000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Bakkot: Are we talking about an observable change, or just an editorial one?","msgtype":"m.text"},"ts":1580955417000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan it sounds like Shu would not want changes where were observable from the perspective of web developers","msgtype":"m.text"},"ts":1580955459000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Are you suggesting that we have two API entrypoints that reference the same internal algorithm, which is the CSRNG?","msgtype":"m.text"},"ts":1580955684000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that'd be the typical way these things are done; but i assume it's easier to virtualize if there's one, not two entry points that need replacing","msgtype":"m.text"},"ts":1580955718000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan I am suggesting ECMA262 requires hosts to have a global named `crypto` which is required to have a property named `getRandomValues` which is specified to do exactly the thing the W3C crypto.getRandomValues does right now","msgtype":"m.text"},"ts":1580955729000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, I see","msgtype":"m.text"},"ts":1580955742000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"possibly first make the observable change which would allow you to invoke it without `crypto` being the receiver, which is dumb","msgtype":"m.text"},"ts":1580955759000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Wouldn't they be more annoyed that we \"claimed\" their object?","msgtype":"m.text"},"ts":1580955810000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"this would be slightly complicated to do unobservably--crypto.getRandomValues follows WebIDL, not ECMA-262, conventions. But it sounds possible to me. I'm not sure if the committee might have additional requirements (like this weakening you're suggesting)","msgtype":"m.text"},"ts":1580955817000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"`crypto` is a Web object","msgtype":"m.text"},"ts":1580955820000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: does it today? Unless its a WebIDL thing, I don't see anything in the spec text that enforces that.","msgtype":"m.text"},"ts":1580955841000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton it is a webidl thing","msgtype":"m.text"},"ts":1580955847000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jridgewell well, we'd have to ask","msgtype":"m.text"},"ts":1580955870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would hope not","msgtype":"m.text"},"ts":1580955871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it wouldn't be the first time a spec left w3c","msgtype":"m.text"},"ts":1580955886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"My concern is that if ECMAScript ships a global `crypto` object, how would the crypto API make that a `Crypto` object (which also has a `subtle` property for `SubtleCrypto`)? Would we have to specify the prototype is \"host defined\"?","msgtype":"m.text"},"ts":1580955931000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Bakkot: so, I'd lay that option out clearly in the issue, and then ping the people who have been landing patches and who maintain implementations","msgtype":"m.text"},"ts":1580955967000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: it'd probably have to ship a CryptoPrototype, so that there was a place for the web to stick stuff on","msgtype":"m.text"},"ts":1580955982000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Or would the host just augment a theoretical `%cryptoprototype%`?","msgtype":"m.text"},"ts":1580955993000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"^ that","msgtype":"m.text"},"ts":1580955996000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that","msgtype":"m.text"},"ts":1580955999000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"There's a possible web-compat problem though.","msgtype":"m.text"},"ts":1580956013000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Is there?","msgtype":"m.text"},"ts":1580956024000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"WebIDL is specified in terms of stuff that ES exposes","msgtype":"m.text"},"ts":1580956027000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we could do just the same things, and make the change unobservable","msgtype":"m.text"},"ts":1580956034000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Yeah, code that might feature test for `crypto` vs `require(\"crypto\")`.","msgtype":"m.text"},"ts":1580956046000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"or, we could decide that we don't like the looks of it and it must change","msgtype":"m.text"},"ts":1580956048000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan right, I meant, I want to be able to do `(0, crypto.getRandomValues)()` and have that work","msgtype":"m.text"},"ts":1580956056000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this was more of an aside","msgtype":"m.text"},"ts":1580956061000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: true, but that kind of code would break with any new global","msgtype":"m.text"},"ts":1580956066000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/rbuckton/reflect-metadata/blob/master/Reflect.js#L1099","msgtype":"m.text"},"ts":1580956067000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: Sounds like you're talking about a Node-compat problem? But then the WebCrypto-in-Node effort faces that anyway","msgtype":"m.text"},"ts":1580956088000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: that wouldn't break, that'd just start working better once the global appeared","msgtype":"m.text"},"ts":1580956098000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton that isn't web compate, it's node compat, right?","msgtype":"m.text"},"ts":1580956099000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Then again, that wouldn't break because it *does* use `getRandomValues`, but there could be others.","msgtype":"m.text"},"ts":1580956100000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"anyway there could be ecosystem compat problems due partial implementations, yes","msgtype":"m.text"},"ts":1580956104000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if node suddenly added a matching `crypto`, then your code Just Works","msgtype":"m.text"},"ts":1580956114000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: I get a 404 on this link from the proposal: https://rbuckton.github.io/proposal-arraybuffer-fillrandom","msgtype":"m.text"},"ts":1580956141000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"and if the code needs `crypto.foo` and isn't checking for the presence of `crypto.foo` then it's brittle anyways","msgtype":"m.text"},"ts":1580956143000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wsdferdksl: I just transferred it to tc39-transfer","msgtype":"m.text"},"ts":1580956160000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Bakkot: Right, I'm pretty worried that there are several different things that are different about WebIDL from TC39's work, and making the change unobservable would be controversial for us","msgtype":"m.text"},"ts":1580956169000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Ah, there's no spec text generated yet.","msgtype":"m.text"},"ts":1580956178000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I'd really prefer that, if we do port it, that we don't make these changes","msgtype":"m.text"},"ts":1580956179000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan yeah, it would be a two-step thing","msgtype":"m.text"},"ts":1580956191000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ideally get them to change, and then port it","msgtype":"m.text"},"ts":1580956202000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"remember, TC39's changes to TypedArrays still aren't ecosystem reality","msgtype":"m.text"},"ts":1580956203000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but alternatively just don't worry about it","msgtype":"m.text"},"ts":1580956207000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Rather, there's no ecmarkup generated spec text yet.","msgtype":"m.text"},"ts":1580956208000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"some of them are, some of them aren't","msgtype":"m.text"},"ts":1580956209000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and do the thing W3C says","msgtype":"m.text"},"ts":1580956212000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wsdferdksl: https://tc39-transfer.github.io/proposal-csprng/","msgtype":"m.text"},"ts":1580956218000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wsdferdksl: the url will change again tho once a chair (akirose robpalme MylesBorins bterlson) bounces it into the tc39 org","msgtype":"m.text"},"ts":1580956235000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"on it","msgtype":"m.text"},"ts":1580956257000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"oh lol the spec is empty anyways","msgtype":"m.text"},"ts":1580956261000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"akirose: ty","msgtype":"m.text"},"ts":1580956268000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"There's nothing in there right now though. All of the current spec text exists in the explainer.","msgtype":"m.text"},"ts":1580956276000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"littledan: fwiw the change I want to crypto.getRandomValues is just making a non-error into an error, so I am almost certain is web compat","msgtype":"m.text"},"ts":1580956283000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll clean that up once the transfer process has completed.","msgtype":"m.text"},"ts":1580956305000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"The links towards the end point to the rbuckton.github.io version.","msgtype":"m.text"},"ts":1580956330000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Bakkot: you mean the other way around?","msgtype":"m.text"},"ts":1580956362000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I can fix that too. Its surprising GH doesn't auto-forward those like it does for other URLs related to a transfer.","msgtype":"m.text"},"ts":1580956367000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"michaelficarra uh yeah that","msgtype":"m.text"},"ts":1580956372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: There's also a question of how much extra work it will be to go and weaken this. And if you look at everything, I bet you'll come up with more changes you feel like making","msgtype":"m.text"},"ts":1580956419000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"*work in implementations","msgtype":"m.text"},"ts":1580956428000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: unfortunately there's no easy way to forward both","msgtype":"m.text"},"ts":1580956470000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan I have looked at everything and that is the only change I think is worth making","msgtype":"m.text"},"ts":1580956481000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: if you ever make a new repo with the same name as an old name, it breaks the repo redirects","msgtype":"m.text"},"ts":1580956484000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: There wasn't anything substantive in there anyways, so I'll adjust the URL once the transfer finishes.","msgtype":"m.text"},"ts":1580956504000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1580956750000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I also added one more 30-min timebox to the end of the agenda of we have time tomorrow","msgtype":"m.text"},"ts":1580956802000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"sffc: I think we should add agenda items in the appropriate order, regardless of whether they were added late","msgtype":"m.text"},"ts":1580956957000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sffc: we currently have 3hrs 50mins of content to fit into a 5 hour window.  so we will probably have time to add your 30min topic","msgtype":"m.text"},"ts":1580956958000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"leave it to the chairs to prioritise","msgtype":"m.text"},"ts":1580956965000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I've just redirected the spec link to the #todo section for now.","msgtype":"m.text"},"ts":1580957051000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"slides seem pretty slow to advance","msgtype":"m.text"},"ts":1580957080000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Dan is always super laggy on calls.","msgtype":"m.text"},"ts":1580957098000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think littledan just always has some delay","msgtype":"m.text"},"ts":1580957106000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sorry! were you able to understand me anyway?","msgtype":"m.text"},"ts":1580957278000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not sure how to remove the delay?","msgtype":"m.text"},"ts":1580957284000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It was only the slides","msgtype":"m.text"},"ts":1580957338000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So your audio seemed fine","msgtype":"m.text"},"ts":1580957342000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But you were talking about something before we could see the slide you were discussing","msgtype":"m.text"},"ts":1580957354000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller https://tc39.es/proposal-weakrefs/#sec-liveness","msgtype":"m.text"},"ts":1580957382000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"WeakRef.prototype.deref being called on a WeakRef whose referent is obj\"","msgtype":"m.text"},"ts":1580957390000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, well, you know, the slides are linked from the agenda","msgtype":"m.text"},"ts":1580957392000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"shu I am pretty sure the liveness definition doesn't do what you want: if you have `a = {}; b = { a }; a.b = b;` and then WeakRefs to both `a` and `b`, and you lose access to both `a` and `b` but keep access to both WeakRefs, then `a` and `b` are still live, which seems bad","msgtype":"m.text"},"ts":1580957671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: I put up a draft PR to explore the possibility of devising a web-compatible `crypto` global in place of `ArrayBuffer.fillRandom`: https://github.com/tc39-transfer/proposal-csprng/pull/2","msgtype":"m.text"},"ts":1580961588000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1580961609000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"michaelficarra:","msgtype":"m.text"},"ts":1581018003000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"$ eshost -se 'Object.keys({[2**32+3]:true, [2**32+2]:true, [2**32+1]:true, [2**32]:true, [2**32-1]:true, [2**32-2]:true, [2**32-3]:true}).map(n => n-2**32)'","msgtype":"m.text"},"ts":1581018003000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"#### Chakra, JavaScriptCore, SpiderMonkey, V8, XS","msgtype":"m.text"},"ts":1581018003000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"-3,-2,3,2,1,0,-1","msgtype":"m.text"},"ts":1581018003000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"note, it was possible to hear Yulia from remote","msgtype":"m.text"},"ts":1581019307000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"in the room we have to turn on a microphone next to a zoom speaker to hear remote folks :)","msgtype":"m.text"},"ts":1581019350000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"now fixed","msgtype":"m.text"},"ts":1581019362000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"note, I'd be happy to do this for all of my presentations as well, I'm just not sure how to set it up","msgtype":"m.text"},"ts":1581019565000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"recordin?","msgtype":"m.text"},"ts":1581019573000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"g","msgtype":"m.text"},"ts":1581019575000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1581019575000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's a good idea to help share information around","msgtype":"m.text"},"ts":1581019592000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if you happen to be zooming you can use zoom","msgtype":"m.text"},"ts":1581019598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"otherwise obs works well","msgtype":"m.text"},"ts":1581019606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe the committee could help facilitate this recording too, and storing and presenting the uploaded videos","msgtype":"m.text"},"ts":1581019631000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I made this thing using Moddable's stuff: https://twitter.com/bterlson/status/1219461543647039490. This keyboard firmware will allow (safe) extensions too thanks to this SES stuff.","msgtype":"m.text"},"ts":1581019933000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"https://gist.github.com/bterlson/c615924c7ef7bb5d45908cdb6417c3be is a code dump from a few weeks ago","msgtype":"m.text"},"ts":1581019958000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"what non-static scoping is Mark referring to here?","msgtype":"m.text"},"ts":1581019996000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I assumed it was globals","msgtype":"m.text"},"ts":1581020003000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I like the Caridy's vocabulary from https://docs.google.com/presentation/d/1pkxAvJQvL-DeiygPFfs4ecdV39Cfv8cBe-zAfunhp5A/edit#slide=id.g75cbab44da_0_106 : \"Primordials are the subset of Intrinsics that are reachable by ECMAScript source text\"","msgtype":"m.text"},"ts":1581020625000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"littledan: I can make sure that it is recording","msgtype":"m.text"},"ts":1581021041000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"module attributes or do you have another presentation?","msgtype":"m.text"},"ts":1581021049000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins: I'd be happy with this; I probably should've recorded the decimal one","msgtype":"m.text"},"ts":1581021064000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"for those with difficulty with colours, the MR items are all green, the first CMR item is blue and the rest are red, and the first 3 items of the STMR are blue, the last is red","msgtype":"m.text"},"ts":1581021263000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"how does importSync work","msgtype":"m.text"},"ts":1581022841000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that doesn't make sense to me","msgtype":"m.text"},"ts":1581022851000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: different questions","msgtype":"m.text"},"ts":1581023343000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"nobody answered you because you asked how it works","msgtype":"m.text"},"ts":1581023350000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"not whether he described how it works","msgtype":"m.text"},"ts":1581023355000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh fair point","msgtype":"m.text"},"ts":1581023360000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://i.imgflip.com/3oev83.jpg","msgtype":"m.text"},"ts":1581023476000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I guess importSync makes sense if modules are provided by a static map. It seems unfortunate to lose the dynamic case, but I can understand that, for some environments, it doesn't make sense","msgtype":"m.text"},"ts":1581023487000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so I guess importSync would be unavailable if you provide a host hook for modules rather than the module map","msgtype":"m.text"},"ts":1581023508000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(?)","msgtype":"m.text"},"ts":1581023514000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"🤷🏻","msgtype":"m.text"},"ts":1581023524000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I needed this for a time elapsed/remaining display on effectively a video player we were making, just last week","msgtype":"m.text"},"ts":1581023586000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this presentation is great","msgtype":"m.text"},"ts":1581023596000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"concreteness is really good","msgtype":"m.text"},"ts":1581023612000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: agreed, I love seeing a variety of justifications up front","msgtype":"m.text"},"ts":1581023616000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"needs an Oxford comma option though","msgtype":"m.text"},"ts":1581023657000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(or just include it always, fine by me)","msgtype":"m.text"},"ts":1581023665000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1581023683000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"formatting time duration is a pain on every language I had to do it so far","msgtype":"m.text"},"ts":1581023693000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"would love to see it improved on JS","msgtype":"m.text"},"ts":1581023715000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"jridgewell: yes, I think that's a typo","msgtype":"m.text"},"ts":1581023817000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"oh man I'm going to miss the desk mics so much when we don't have them","msgtype":"m.text"},"ts":1581024273000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"There's an unfortunate web-compat issue I need to work out for CSPRNG if we intend to bring in part of WebCrypto: https://github.com/tc39/proposal-csprng/issues/5","msgtype":"m.text"},"ts":1581024926000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Basically, WebCrypto throws `TypeMismatchError` and `QuotaExceededError`, but my current spec text just reuses `TypeError` and `RangeError`. It wasn't a web-compat issue when the API was attached to `ArrayBuffer` (because it wouldn't break existing code), but *is* a web-compat issue if we chose to bring in the global `crypto` object.","msgtype":"m.text"},"ts":1581024926000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"s/chose/choose","msgtype":"m.text"},"ts":1581024980000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"can't find today's notes url...","msgtype":"m.text"},"ts":1581027395000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Could anyone repaste it?","msgtype":"m.text"},"ts":1581027406000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Don’t paste it here","msgtype":"m.text"},"ts":1581027436000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It’s on the reflector","msgtype":"m.text"},"ts":1581027442000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"1 sec","msgtype":"m.text"},"ts":1581027452000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/tc39/Reflector/issues/271","msgtype":"m.text"},"ts":1581027486000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ok! thank you!","msgtype":"m.text"},"ts":1581027492000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"when are we resuming","msgtype":"m.text"},"ts":1581027530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"12:30","msgtype":"m.text"},"ts":1581027541000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Are there slides?","msgtype":"m.text"},"ts":1581028436000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"not that we are seeing","msgtype":"m.text"},"ts":1581028445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"akirose: robpalme: could you double check at the next meeting break that we retained consensus for independent lifetime FinalizationGroups? (retained in the sense this was the original, historical intent of the proposal, if confusing.) this was kind of implied by people saying they're okay with changing the name of the constructor to better reflect independent lifetimes and i'd like it explicitly asked","msgtype":"m.text"},"ts":1581031306000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: that's not a bug, that's by design - everything >= the first default argument is optional","msgtype":"m.text"},"ts":1581031362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: ack","msgtype":"m.text"},"ts":1581031405000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"ljharb: i'm not arguing the intent, but that bugs in libraries have occured due to misunderstanding and usage in the wild has shown issues","msgtype":"m.text"},"ts":1581031562000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1581031695000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"can we get istvan set up on the queue","msgtype":"m.text"},"ts":1581032367000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"can a chair interrupt him please? there's later queue items about time zones and stuff","msgtype":"m.text"},"ts":1581032614000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"akirose: robpalme MylesBorins ^","msgtype":"m.text"},"ts":1581032620000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"akirose: totally fair point about stage 4 :-p","msgtype":"m.text"},"ts":1581032983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it came up in a panel at some point","msgtype":"m.text"},"ts":1581032999000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"\"how fast can you ship a feature\"","msgtype":"m.text"},"ts":1581033010000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1581033013000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i guess theoretically a patch to a browser, timed right before a release hits the train, could get out in a matter of weeks, with the cooperation of the browser?","msgtype":"m.text"},"ts":1581033048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"browsers can ship things before stage 3 if they want","msgtype":"m.text"},"ts":1581033180000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I super agree with Saboff's point","msgtype":"m.text"},"ts":1581033181000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"}
]