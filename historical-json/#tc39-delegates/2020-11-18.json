[
{"content":{"body":"btw the note taking bot has some autocorrects thanks to michaelficarra now","msgtype":"m.text"},"ts":1605690462000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"feel free to suggest more to me and I'll try to sneak them in during pauses in talking","msgtype":"m.text"},"ts":1605690477000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just added a few including \"Jason -> JSON\"","msgtype":"m.text"},"ts":1605690485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nice, I thought it learnt","msgtype":"m.text"},"ts":1605690669000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"there are actually other models which let you give it a list of vocab words, which is really cool","msgtype":"m.text"},"ts":1605690703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unfortunately they don't work as well for this sort of audio","msgtype":"m.text"},"ts":1605690717000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"training it on the entire set of tc39 notes might help","msgtype":"m.text"},"ts":1605690744000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"not a feature they offer, alas","msgtype":"m.text"},"ts":1605690788000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"… and that was the fateful day EcmaNet became self-aware, and began inserting semicolons into code worldwide","msgtype":"m.text"},"ts":1605690809000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"whoever is selecting large blocks of the notes, could you not do that?","msgtype":"m.text"},"ts":1605690864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone did that with the whole text yesterday regularly","msgtype":"m.text"},"ts":1605691204000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"here agaun","msgtype":"m.text"},"ts":1605691242000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"anonymous moose","msgtype":"m.text"},"ts":1605691254000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"now that the bot is getting tuned and we're getting better at live editing the notes, this meeting's notes are FANTASTIC IMO","msgtype":"m.text"},"ts":1605691291000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it is fascinating to me that the bot wants to spell \"JSON\" as \"Json\"","msgtype":"m.text"},"ts":1605691454000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I will maybe add an autocorrect for that","msgtype":"m.text"},"ts":1605691459000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anonymous moose again","msgtype":"m.text"},"ts":1605691531000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"someone is still highlighting large blocks of text…","msgtype":"m.text"},"ts":1605691543000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"should I point of order?","msgtype":"m.text"},"ts":1605691547000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"ystartsev: \"JSON.module\" seems like a strange way to me to add the ability to unfreeze+copy a frozen object, especially the first non-syntactic way to import a module","msgtype":"m.text"},"ts":1605691620000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would JSON.module be sync or async? would it work in Scripts as well as in Modules?","msgtype":"m.text"},"ts":1605691640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i would imagine it being similar to `import` -- we haven't delved deep on what this should look like or strong opinions here","msgtype":"m.text"},"ts":1605691669000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"the idea is that this would allow people who are expecting json.parse like behavior would be able to get it this way","msgtype":"m.text"},"ts":1605691719000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that would mean there's no way to \"synchronously\" import a normal, idiomatic, mutable parsed JSON object?","msgtype":"m.text"},"ts":1605691740000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there are of course, other options, but that would break from what we currently have with `import`","msgtype":"m.text"},"ts":1605691804000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1605691811000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"does that mean that its impossible? no, but thats a trade off we have to decide on","msgtype":"m.text"},"ts":1605691821000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"from my perspective, there is a use case, and an expectation, from users to have this behave something like json.parse","msgtype":"m.text"},"ts":1605691846000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"right, which is \"mutable\"","msgtype":"m.text"},"ts":1605691858000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1605691862000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"also, imo a VERY strong expectation that it works like `require(json)` does in node","msgtype":"m.text"},"ts":1605691870000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which is also mutable","msgtype":"m.text"},"ts":1605691871000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but, this could be error prone, since its also a copy","msgtype":"m.text"},"ts":1605691872000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but that isn't possible with modules","msgtype":"m.text"},"ts":1605691880000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in node, it's not a copy, the require cache is a singleton","msgtype":"m.text"},"ts":1605691889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is why we ended up leaning towards immutibility","msgtype":"m.text"},"ts":1605691896000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in node, for a decade, every required json file has been shared and mutable as a singleton, and in practice it hasn't caused issues","msgtype":"m.text"},"ts":1605691904000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but its \"leaning\" its not \"it must be this way or else\"","msgtype":"m.text"},"ts":1605691906000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"for the sake of note takers repeating questions is useful","msgtype":"m.text"},"ts":1605691932000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"maybe i wasn't clear that we are not enforcing an opinion here","msgtype":"m.text"},"ts":1605691960000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i understood that :-) just exploring the suggestion/leaning","msgtype":"m.text"},"ts":1605691993000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rricard: i agree","msgtype":"m.text"},"ts":1605692024000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ljharb: it may not have caused problems, but I can tell you it's a missed opportunity.  it's costing us a MB of overhead because the emoji json data needs to be loaded once per app.  for our host environment, we will soon switch that to be frozen and shared to save memory.","msgtype":"m.text"},"ts":1605692032000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I like this argument from gibson042 of mutability still being a big win since more people can transition from eval hazards","msgtype":"m.text"},"ts":1605692070000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"robpalme: i'm a bit confused by that; how would it being frozen allow it to be shared per app?","msgtype":"m.text"},"ts":1605692110000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we run multiple users app inside what node would consider to be one app.  today we must duplicate the structures because JSON imports are mutable.","msgtype":"m.text"},"ts":1605692145000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: ok, but you could choose to freeze them and then share them, no?","msgtype":"m.text"},"ts":1605692158000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes!","msgtype":"m.text"},"ts":1605692163000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"so how is \"mutable by default\" getting in the way of that option?","msgtype":"m.text"},"ts":1605692224000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because if apps become dependent on that assumption, we can't give them immutable values","msgtype":"m.text"},"ts":1605692248000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"and 99.9% of usage is not dependent on it being mutable.  people use it as read-only data loading.","msgtype":"m.text"},"ts":1605692287000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"why would they become dependent on that assumption if your initial json modules implementation in your in-house platform chose to freeze them, regardless of what the standard says?","msgtype":"m.text"},"ts":1605692295000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so, i don't really consider json.parse and require(json) to be really similar. one is a copy and the other is not. the hazard for developers is very different","msgtype":"m.text"},"ts":1605692300000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i don't think that because the hazard exists that it means we shouldd replicate that behavior","msgtype":"m.text"},"ts":1605692334000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's very fair that `JSON.parse` makes a copy every time","msgtype":"m.text"},"ts":1605692341000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also, clarification -- exists in node. for those working on web apps they may only have the intuition from json.parse","msgtype":"m.text"},"ts":1605692377000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i wonder if anyone optimizes `JSON.parse(JSON.stringify(x))`","msgtype":"m.text"},"ts":1605692392000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you know, its sad but i have seen that code","msgtype":"m.text"},"ts":1605692405000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"re selecting text, i wonder if someone's trying to paste the content in translation software to translate it to their language?","msgtype":"m.text"},"ts":1605692438000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(cc akirose ^)","msgtype":"m.text"},"ts":1605692443000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"possibly...","msgtype":"m.text"},"ts":1605692455000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that would make sense","msgtype":"m.text"},"ts":1605692463000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"should we have a live translation bot","msgtype":"m.text"},"ts":1605692482000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"also, did we ever figure out how to make the google doc show people's names when they're logged in?","msgtype":"m.text"},"ts":1605692488000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I thought it was axolotl? I don't want to wrongly blame moose","msgtype":"m.text"},"ts":1605692495000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i see it as chipmunk rn","msgtype":"m.text"},"ts":1605692509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think we get diffferent animals","msgtype":"m.text"},"ts":1605692510000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"oohhh lol well then that's not helpful","msgtype":"m.text"},"ts":1605692523000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"thanks yulia!","msgtype":"m.text"},"ts":1605692530000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"that's a great idea, ystartsev","msgtype":"m.text"},"ts":1605692539000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"queue needs advancing","msgtype":"m.text"},"ts":1605692560000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"@ljharb it's true that this efficiency can be gained by deviating from ecmascript, but it's better for the behaviour to be aligned.  otherwise third-party code doesn't work.  so if other users of ES can benefit from  this (e.g. moddable putting JSON data in ROM, or using read-only shared pages) then it could be worth standardising","msgtype":"m.text"},"ts":1605692640000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"WE ALL SEE DIFFERENT ANIMALS?! WHAT'S THE POINT","msgtype":"m.text"},"ts":1605692664000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"V8 makes use of shared memory across processes to increase efficiency","msgtype":"m.text"},"ts":1605692697000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: if third-party code doesn't work tho, wouldn't that be because it needs the mutability?","msgtype":"m.text"},"ts":1605692733000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ryzokuken ptomato: so does this mean that the temporal spec is, barring minor editorial issues and perhaps naming bikesheds, frozen, and thus ready for review?","msgtype":"m.text"},"ts":1605692773000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right - but we set the tone here for the whole ecosystem.  and if users become accustomed to immutability, that increases the amount of code that will be compatible","msgtype":"m.text"},"ts":1605692918000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"info on how to copy is now in the doc, if it happens again you can move the note down to communicate async with people","msgtype":"m.text"},"ts":1605692934000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yep will do thanks a lot again","msgtype":"m.text"},"ts":1605692999000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"robpalme: RO spaces aren't used for general frozen stuff, but distinguished RO VM-internal things like some maps and constants like NaN","msgtype":"m.text"},"ts":1605693142000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"robpalme: so i wouldn't extend the argument that if JSON modules were immutable, that'd enable some kind of cross-isolate sharing","msgtype":"m.text"},"ts":1605693165000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sure - I wasn't trying to imply this is used for user-data today","msgtype":"m.text"},"ts":1605693202000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"shu: just to verify -- v8's position is \"rather mutable\"?","msgtype":"m.text"},"ts":1605693237000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: leaning mutable, yeah","msgtype":"m.text"},"ts":1605693263000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and this is from a user ergonomics perspective or was there also a technical reason?","msgtype":"m.text"},"ts":1605693292000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"no technical reason","msgtype":"m.text"},"ts":1605693304000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok, so we differ on how this might impact users, thanks for verifying","msgtype":"m.text"},"ts":1605693337000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i'm somewhat swayed by the user expectations argument","msgtype":"m.text"},"ts":1605693355000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, agreed, thats why we thought a complementary api might be a good idea","msgtype":"m.text"},"ts":1605693379000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i think the difference of opinion comes down to how deeply baked in to the mental model of ESMs the idea of live bindings is","msgtype":"m.text"},"ts":1605693422000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the hazard seems to generalize to well beyond JSON modules","msgtype":"m.text"},"ts":1605693461000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unclear why we should raw the line here","msgtype":"m.text"},"ts":1605693469000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"draw*","msgtype":"m.text"},"ts":1605693486000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it might also be coding style -- as rob mentioned above, they copy everything. When I was programming js, this was the pattern I used as well -- so it doesn't make sense for me, as a js dev, to have it be mutable. Having it be immutable would prevent mistakes","msgtype":"m.text"},"ts":1605693496000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but this is coding style, and not objective","msgtype":"m.text"},"ts":1605693503000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i will say that if live bindings didn't exist, it'd be a lot more reasonable to claim users would expect an immutable import","msgtype":"m.text"},"ts":1605693514000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what does the \"copy everything\" style mean?","msgtype":"m.text"},"ts":1605693524000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that is a good argument","msgtype":"m.text"},"ts":1605693528000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"note we copy everything in our infra","msgtype":"m.text"},"ts":1605693531000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"not end users","msgtype":"m.text"},"ts":1605693538000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"rpalmer: maybe worth clarifying","msgtype":"m.text"},"ts":1605693576000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"the whole \"soft immutability\" coding style: `newState = {...oldState}` or something to that effect. Depending on the data, we might have a library method called deepCopy","msgtype":"m.text"},"ts":1605693578000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1605693602000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"my problem is after all these years i still don't program JS","msgtype":"m.text"},"ts":1605693616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shallow copies are common; deep copies are something i consider a code smell, and there's a ton of caveats and assumptions baked into libraries that offer it (i maintain two of them)","msgtype":"m.text"},"ts":1605693687000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: but anyway i won't really push back either way, immutable or not","msgtype":"m.text"},"ts":1605693732000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"usually you don't end up doing deep copies (or at least i have no memory from the last few years of doing that). But at some point I did cross a deep copy, though in tests","msgtype":"m.text"},"ts":1605693771000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"@shu: Does that imply Chrome would accept either way?","msgtype":"m.text"},"ts":1605693787000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"ystartsev: good point, i have often used it in test fixtures","msgtype":"m.text"},"ts":1605693801000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean, similar case here: if its mutable or immutable we don't have a strong opinion. leaning to immutable, suggesting that an api exists to copy the object if it does","msgtype":"m.text"},"ts":1605693803000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"we had a discussion of json.copy before we came to the conclusion of something like `import` instead","msgtype":"m.text"},"ts":1605693835000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"we are only 2 note takers we can continue like this but a third one would be appreciated","msgtype":"m.text"},"ts":1605693861000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"hmm - i suppose `JSON.parse(JSON.stringify(obj))` is an idiomatic way to deep copy a JSON object, frozen or not","msgtype":"m.text"},"ts":1605693863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how fast/slow is that in engines? i've never measured","msgtype":"m.text"},"ts":1605693885000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gunna jump on the notes, excuse me","msgtype":"m.text"},"ts":1605693905000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"np thanks","msgtype":"m.text"},"ts":1605693912000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"someone is a pumpkin","msgtype":"m.text"},"ts":1605693927000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"bakkot: add temple => temporal autoconvert","msgtype":"m.text"},"ts":1605694024000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"robpalme: afaik yes","msgtype":"m.text"},"ts":1605694076000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"woooooooo","msgtype":"m.text"},"ts":1605694084000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1605694095000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"(that woo is an individual delegate woo, not a chair group woo)","msgtype":"m.text"},"ts":1605694189000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"rricard done, though maybe too late now","msgtype":"m.text"},"ts":1605694296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"people are going to talk about temples some more","msgtype":"m.text"},"ts":1605694311000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"Richard has clarified that he's not asking for the emoji thing. i think that should be taken down.","msgtype":"m.text"},"ts":1605694501000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Where am I supposed to find the new temperature check emoji?  I don't see them on tcq","msgtype":"m.text"},"ts":1605694503000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"sffc: the chair group puts it up when a champion asks for it","msgtype":"m.text"},"ts":1605694523000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or when someone asks for it, i guess, dunno if it has to be champion","msgtype":"m.text"},"ts":1605694535000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gibson042: is there a specific part of the existing proposal that you're worried about right now? (that i missed)","msgtype":"m.text"},"ts":1605694655000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or is this a general philosophy question","msgtype":"m.text"},"ts":1605694666000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the latter... I'm not concerned with any given approach, but consider it important that TC39 not repeat the de facto squatting that came from Java","msgtype":"m.text"},"ts":1605694765000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1605694772000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and it would be bad if we followed e.g. an IETF draft for \"[c=Japanese]\" that *their* process transforms into \"[cal=japanese]\" before publication","msgtype":"m.text"},"ts":1605694859000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"\"The best laid schemes o' mice and men gang aft a-gley\"","msgtype":"m.text"},"ts":1605694942000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ryzokuken: you are still presenting","msgtype":"m.text"},"ts":1605695244000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: sorry!","msgtype":"m.text"},"ts":1605695267000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"stopped presenting now","msgtype":"m.text"},"ts":1605695272000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"am i the only one with weird screen?","msgtype":"m.text"},"ts":1605695391000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1605695399000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"it looks clipped for me","msgtype":"m.text"},"ts":1605695404000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"(I've seen issues with the emoji reacts not popping up on mobile sometimes)","msgtype":"m.text"},"ts":1605695681000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"OK, Surma confirmed with me that the 1 PM timeslot works for JS module blocks","msgtype":"m.text"},"ts":1605695890000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sad i'll miss it :-(","msgtype":"m.text"},"ts":1605695927000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry had to walk away from the computer for a bit","msgtype":"m.text"},"ts":1605695981000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"do we have enough editors?","msgtype":"m.text"},"ts":1605695981000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"back","msgtype":"m.text"},"ts":1605695984000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"rricard: thank you ♥️","msgtype":"m.text"},"ts":1605695990000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"devin transcription is gooood","msgtype":"m.text"},"ts":1605696029000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"(☞ﾟヮﾟ)☞","msgtype":"m.text"},"ts":1605696035000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"robpalme: akirose: surma says he'll be ready for 1pm slot","msgtype":"m.text"},"ts":1605696051000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1605696060000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"oh i missed what littledan said above already","msgtype":"m.text"},"ts":1605696064000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"drousso: a query API combined with a hardcoded list basically === an enumeration api","msgtype":"m.text"},"ts":1605696067000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: just, less ergonomic for good actors.","msgtype":"m.text"},"ts":1605696075000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah it seems like nobody had told him about the 11:30 scheduling for his topic","msgtype":"m.text"},"ts":1605696107000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's a bit hard to communicate this given how dynamic the schedule (necessarily) is","msgtype":"m.text"},"ts":1605696128000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I can't believe the chairs manage to handle it with all the different things that come up","msgtype":"m.text"},"ts":1605696147000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah but... that was specifically in that time slot to accomodate various scheduling constraints","msgtype":"m.text"},"ts":1605696148000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"including his","msgtype":"m.text"},"ts":1605696154000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"right, we just forgot to tell him the result","msgtype":"m.text"},"ts":1605696159000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think you did a good job","msgtype":"m.text"},"ts":1605696163000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this was more on me","msgtype":"m.text"},"ts":1605696181000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ooooh got it he wasn't looking at the reflector actively","msgtype":"m.text"},"ts":1605696197000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"curtseys","msgtype":"m.emote"},"ts":1605696206000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"right, he's not a frequent TC39 attendee","msgtype":"m.text"},"ts":1605696207000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"gibson042: We all agree that it's important for us to not repeat the de facto squatting. I'd go further and say, it's a Stage 3 prerequisite that we get somewhat far along in the standards discussions. I think an IETF draft is a good checkpoint here; I don't know exactly what the Stage 4 prerequisite should be worded as","msgtype":"m.text"},"ts":1605696499000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"you can always monkey-patch on top of these APIs to add more data","msgtype":"m.text"},"ts":1605696850000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"also browsers and other JS environments often have strong timezone update mechanisms to get the freshest data directly in the host","msgtype":"m.text"},"ts":1605696881000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"bakkot: Intel to Intl","msgtype":"m.text"},"ts":1605696912000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"actually","msgtype":"m.text"},"ts":1605696934000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"yeah our Intel delegates may not appreciate that","msgtype":"m.text"},"ts":1605696951000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yulia did you mean intel, the company this time?","msgtype":"m.text"},"ts":1605696954000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"i believe she said Intl","msgtype":"m.text"},"ts":1605696982000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"will do as soon as there's a gap in the audio","msgtype":"m.text"},"ts":1605696991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where did leo start?","msgtype":"m.text"},"ts":1605697007000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"let me see the notes","msgtype":"m.text"},"ts":1605697025000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"michaelficarra: when was the last time we had an Intel delegate?","msgtype":"m.text"},"ts":1605697109000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: we did for SIMD, and a number of meetings after","msgtype":"m.text"},"ts":1605697139000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it's been awhile","msgtype":"m.text"},"ts":1605697146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah i feel like at least 2 years","msgtype":"m.text"},"ts":1605697151000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, we had Peter for a while","msgtype":"m.text"},"ts":1605697186000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"bakkot can you stop","msgtype":"m.text"},"ts":1605697217000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1605697228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1605697232000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"Bakkot: does the transcription bot always insert at EOF, or can it be made to insert before a marker, so there's a scratch space at the bottom of the doc?","msgtype":"m.text"},"ts":1605697236000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"always EOF","msgtype":"m.text"},"ts":1605697243000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as usual won't be able to be an editor this afternoon","msgtype":"m.text"},"ts":1605697254000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"gdocs API claim to support insertions anywhere but interacts very poorly with people editing the doc live","msgtype":"m.text"},"ts":1605697272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"littledan: agreed. If it looks like IETF will be the body to which TC39 defers, then I would say publication of a Standards Track RFC would be the ideal Stage 4 prerequisite","msgtype":"m.text"},"ts":1605697456000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: That makes sense but I don't know what exactly constitutes a \"standards track RFC\" and how the calsify WG ends up working. I feel like this comes down to details that we'll learn as we work with them more.","msgtype":"m.text"},"ts":1605697556000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"as Ujjwal explained in his presentation, and as we've been discussing with you in the champion group meetings, this whole thing is already the plan","msgtype":"m.text"},"ts":1605697578000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I feel like, even if the committee's temperature were flexible on requiring that we go through standards, we should still do it, to be safe","msgtype":"m.text"},"ts":1605698089000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://tools.ietf.org/html/bcp9#section-4","msgtype":"m.text"},"ts":1605698108000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"(Someone who works in IETF told me the official documentation doesn't really match their practice)","msgtype":"m.text"},"ts":1605698141000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so I think this is just something we have to figure out the details of as we go along with IETF Calsify WG, and judge based on what we learn there, which point would be \"standard enough\" for Stage 4","msgtype":"m.text"},"ts":1605698189000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I agree that it should be pretty standard and stable and agreed-on as a Stage 4 prerequisite","msgtype":"m.text"},"ts":1605698207000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and the idea will be to have a solid draft that is moving along in reviews with IETF as a Stage 3 prerequisite","msgtype":"m.text"},"ts":1605699797000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"perfect","msgtype":"m.text"},"ts":1605700115000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"we will restart in 2 mins!","msgtype":"m.text"},"ts":1605700705000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"Surma is in pole position, ready to go","msgtype":"m.text"},"ts":1605700720000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"metaproperties could be used to avoid the NLTH problem","msgtype":"m.text"},"ts":1605701446000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"something like new.module { … }","msgtype":"m.text"},"ts":1605701453000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i guess you care about typing `module\\n{`?","msgtype":"m.text"},"ts":1605701511000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"who is the \"you\" here?","msgtype":"m.text"},"ts":1605701571000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"only people who omit semis would care about that","msgtype":"m.text"},"ts":1605701619000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"you, michael ficarra","msgtype":"m.text"},"ts":1605701633000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no, not at all","msgtype":"m.text"},"ts":1605701679000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"but it was brought up in the slides that we would need a NLTH for the shown syntax","msgtype":"m.text"},"ts":1605701692000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"and I was saying that there's an alternative: metaproperties","msgtype":"m.text"},"ts":1605701701000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if the line break is important, we could also investigate a \"keyphrase\", like `inline module\\n{`","msgtype":"m.text"},"ts":1605701732000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"where there's an NLT between `inline` and `module`, but not between `module` and `{`, similar to `async function`","msgtype":"m.text"},"ts":1605701764000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"isn't `module` a reserved keyword in strict mode?","msgtype":"m.text"},"ts":1605702016000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"haha what a confluence of conditions...","msgtype":"m.text"},"ts":1605702039000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we have too many Daniel's!","msgtype":"m.text"},"ts":1605702046000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"are we at more-daniels-than-women today","msgtype":"m.text"},"ts":1605702074000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i think we are","msgtype":"m.text"},"ts":1605702076000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"Shu's comment should precede mine","msgtype":"m.text"},"ts":1605702095000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I guess scope = global object?","msgtype":"m.text"},"ts":1605702107000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah, it has to be global object","msgtype":"m.text"},"ts":1605702118000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we hear some typing noise","msgtype":"m.text"},"ts":1605702135000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Realm!","msgtype":"m.text"},"ts":1605702169000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I feel like... if tooling is responsible for configuring different files for different global environments, maybe there can be a solution on a tooling level for this. Magic comments?","msgtype":"m.text"},"ts":1605702176000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":" // @ts-realm:worker","msgtype":"m.text"},"ts":1605702214000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I don't think `module` has ever been reserved? `package` is though.","msgtype":"m.text"},"ts":1605702216000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh hmmm","msgtype":"m.text"},"ts":1605702338000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"note that it's totally kosher in HTML to let something be postMessage'd but not IndexedDB-serialized","msgtype":"m.text"},"ts":1605702654000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this is based on the forStorage argument of the serialization algorithm https://html.spec.whatwg.org/multipage/structured-data.html#serializable","msgtype":"m.text"},"ts":1605702734000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Daniel Rosenwasser - please add yourself with abbreviation to attendees in today's notes","msgtype":"m.text"},"ts":1605702780000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"I've just updated your quotes in the notes doc to DRR (they were attributed to DRO by mistake)","msgtype":"m.text"},"ts":1605702803000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"sffc: i had vision talk yesterday on your exact topic, IIUC","msgtype":"m.text"},"ts":1605702812000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sffc: shu's slides for that were—and this is a bold statement—the best he's ever done","msgtype":"m.text"},"ts":1605702896000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"that's not bold - it's fact","msgtype":"m.text"},"ts":1605702918000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"sffc: https://docs.google.com/presentation/d/1kqtsJfLVC-Nmcm2sveMRdJPjurwKKiiCGilK2_ladpw/edit?usp=sharing","msgtype":"m.text"},"ts":1605702924000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"can't claim credit for the theme, i found that theme","msgtype":"m.text"},"ts":1605702931000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: cool!  Yeah, I took a rain check for that part of the meeting.  Thanks for flagging :)","msgtype":"m.text"},"ts":1605702957000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"no worries, sorry if i implied any judgment about missing the meeting","msgtype":"m.text"},"ts":1605703009000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't know if Surma is in IRC, but this is awesome and i'd love to help out if that's desired :)","msgtype":"m.text"},"ts":1605703031000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I am also interested in this, especially in how shu wants to tie it in to concurrency as well as some of the ongoing discussions about typed objects.","msgtype":"m.text"},"ts":1605703237000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"\"Vision for concurrent JS\" looks really cool; I'm sorry I missed it!  I'll read up on the notes","msgtype":"m.text"},"ts":1605703473000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"+100 for merging; this is a significant improving in clarifying and documenting our process","msgtype":"m.text"},"ts":1605703498000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh boy, I did not know we were going to be agreeing to process doc changes today","msgtype":"m.text"},"ts":1605703499000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the slides have been posted since before the deadline, indicating that they would ask for consensus","msgtype":"m.text"},"ts":1605703547000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this was raised in the previous meeting, michael","msgtype":"m.text"},"ts":1605703549000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"Yulia explained that there aren't substantial changes since last time","msgtype":"m.text"},"ts":1605703626000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I just thought it was another update","msgtype":"m.text"},"ts":1605703628000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":" WeakRefs are a great example of why \"rejected\" is not a useful concept--I thought Waldemar was going to talk about this :)","msgtype":"m.text"},"ts":1605703725000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"can't rejection just be a signal to the chairs to not allow something substantially similar to this be brought forward again?","msgtype":"m.text"},"ts":1605703742000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think \"inactive proposals with documented objections\" is a good way to represent this","msgtype":"m.text"},"ts":1605703757000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't really understand what the role for chairs that you're proposing is","msgtype":"m.text"},"ts":1605703771000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"notes from previous meeting:","msgtype":"m.text"},"ts":1605703799000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-22.md#process-document-clarifications","msgtype":"m.text"},"ts":1605703799000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"littledan: one of the primary responsibilities of the chairs is to decide what the committee does work on during plenary","msgtype":"m.text"},"ts":1605703800000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1 to improving documentation about the status of all the proposals, and doing post-mortem discussions as a committee, if this is what msaboff_ is proposing","msgtype":"m.text"},"ts":1605704380000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think this is a good thing to discuss in a future process discussion; I don't think it needs to be coupled to this one, which is focused on documenting our existing process","msgtype":"m.text"},"ts":1605704418000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1605704713000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"also it would be nice to clarify https://github.com/tc39/process-document/issues/4#issuecomment-729657851","msgtype":"m.text"},"ts":1605704742000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"msaboff_: interesting point, i think that depends on removal is wholesale removal or reworking the feature","msgtype":"m.text"},"ts":1605704810000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"msaboff_: cf my removing subclassing proposal, which i'm taking through the staging process, but i don't really know what that means","msgtype":"m.text"},"ts":1605704854000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"littledan Documentation is part of what i was asking for, but I think we should acknowledge that some proposals will likely never advance.","msgtype":"m.text"},"ts":1605705017000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"shu I do agree with the point you just posted in TCQ","msgtype":"m.text"},"ts":1605705049000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1605705058000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mathiasbynens: do you know what Markus' preferred initials are?","msgtype":"m.text"},"ts":1605705307000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also please send a PR to delegates.txt or ask him to do so","msgtype":"m.text"},"ts":1605705322000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's already there; MWS","msgtype":"m.text"},"ts":1605705498000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://github.com/tc39/notes/pull/86","msgtype":"m.text"},"ts":1605705506000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"oh I hadn't refreshed since the start of the meeting","msgtype":"m.text"},"ts":1605705515000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I see it now","msgtype":"m.text"},"ts":1605705519000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1605705538000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I love this capability, but resolving syntax seems like it's going to be difficult","msgtype":"m.text"},"ts":1605705649000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah, [a—b] already has a meaning","msgtype":"m.text"},"ts":1605705665000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"gibson042: depending on what syntax the committee would prefer, we could introduce a new flag","msgtype":"m.text"},"ts":1605705674000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1605705686000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"isn't this the unicode consortium has a recommendation for?","msgtype":"m.text"},"ts":1605705689000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agreed we definitely don't wanna break back-compat","msgtype":"m.text"},"ts":1605705691000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Yeah, I'm worrying about syntax as well.","msgtype":"m.text"},"ts":1605705692000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"Oniguruma uses `&&` for intersections in character classes","msgtype":"m.text"},"ts":1605705698000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"unicode consortium has so much stuff in their regexes","msgtype":"m.text"},"ts":1605705706000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"And `[]` for nested sets","msgtype":"m.text"},"ts":1605705719000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"https://github.com/kkos/oniguruma/blob/cd8357ff348a61084543afc87f7f685906c03d39/doc/RE#L205-L215","msgtype":"m.text"},"ts":1605705742000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"the syntax in the slides is what UTS18 + most implementations use, but UTS18 allows both `&&` and `&` iirc — I think whatever we choose we'd want to pick just one","msgtype":"m.text"},"ts":1605705743000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I don't know is therre are any fully conforming implementations of the Unicode consortium suggested RegExp in UTS18 - https://unicode.org/reports/tr18/","msgtype":"m.text"},"ts":1605705801000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"we only have ~1 person editing notes btw and they are getting a bit incomprehensible","msgtype":"m.text"},"ts":1605705810000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"`&` is problematic on its own, since `/a&b/` is already a valid RegExp. So is `&&` for that matter. If we used either we might need a flag to opt into the behavior","msgtype":"m.text"},"ts":1605705822000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: note that the problem is slightly smaller in scope, since only the syntax within [] would change","msgtype":"m.text"},"ts":1605705856000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so not /a&b/ but /[a&b]/","msgtype":"m.text"},"ts":1605705871000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"which also is already valid","msgtype":"m.text"},"ts":1605705886000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"rbuckton The syntax could be limited to inside character classes, which may make the syntax problem possibly easier.","msgtype":"m.text"},"ts":1605705887000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"gibson042: i know","msgtype":"m.text"},"ts":1605705908000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Ah, yeah, that's true. And `[a&&b]` is less likely to exist due to the fact two `&` characters in a class is redundant.","msgtype":"m.text"},"ts":1605705926000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I love that we keep working on making RegExps better in TC39","msgtype":"m.text"},"ts":1605705929000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: indeed. (but even the redundant form is valid so your point stands)","msgtype":"m.text"},"ts":1605705951000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"All of these are problematic. /[[0-9]]/ currently means a character class containing '[' or one of the ASCII digits, followed by a ']' character.","msgtype":"m.text"},"ts":1605705957000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Wow, RexExp and readable in the same sentence!","msgtype":"m.text"},"ts":1605705961000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"littledan: I'm also considering bringing some RegExp features to TC39 in a future meeting","msgtype":"m.text"},"ts":1605705997000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Also, /a--b/ means a range starting with 'a' and ending with a '-', or a 'b' character.","msgtype":"m.text"},"ts":1605706005000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"bterlson deserves a lot of the credit for kicking this off with his classic \"RegExp buffet\" presentation. There's still other things there that could be picked up! I wish I could find the slides. https://github.com/tc39/notes/blob/master/meetings/2015-11/nov-17.md#regexp-buffet","msgtype":"m.text"},"ts":1605706020000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Sorry, meant /[a--b]/.","msgtype":"m.text"},"ts":1605706027000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"unfortunately, the only reserved characters in a character class are `\\` and `]` and `-`","msgtype":"m.text"},"ts":1605706045000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"everything else just represents itself","msgtype":"m.text"},"ts":1605706055000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"one big thing that would be great in JS RegExps would be a template tag constructor form, so you could interpolate in literal strings or compose different RegExps","msgtype":"m.text"},"ts":1605706060000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"wsdferdksl: thanks for pointing out those examples. i think these show that we'd either need A) a flag or B) wildly different syntax that somehow doesn't have these problems","msgtype":"m.text"},"ts":1605706063000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"We may end up needing a flag, but I'd definitely use this.","msgtype":"m.text"},"ts":1605706075000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"if anyone is interested in championing that, I'd be happy to connect you to past discussions about it, do reviews, etc","msgtype":"m.text"},"ts":1605706084000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"same, I am interested in a RegExp template tag","msgtype":"m.text"},"ts":1605706117000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Can we invite `surma` here? He's in #tc39","msgtype":"m.text"},"ts":1605706157000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe ECMAScript can introduce a \"U\" flag for UTS18","msgtype":"m.text"},"ts":1605706158000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Markus is looking for the mood of the committee, temperature check is open","msgtype":"m.text"},"ts":1605706172000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"Not another mode flag ;(","msgtype":"m.text"},"ts":1605706177000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"I don't even know if I'm joking","msgtype":"m.text"},"ts":1605706178000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"`/./🇺`","msgtype":"m.text"},"ts":1605706188000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"please no flags for this","msgtype":"m.text"},"ts":1605706200000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: any ideas on how to avoid having to add a flag?","msgtype":"m.text"},"ts":1605706216000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i can't think of syntax that would work off the top. would be great if there was a way","msgtype":"m.text"},"ts":1605706253000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah that's why I don't think this is good for syntax","msgtype":"m.text"},"ts":1605706358000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"see my queue entry","msgtype":"m.text"},"ts":1605706363000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the pattern grammar doesn't have much room for extension without flags, and I really don't want to add a flag for every new (and infrequently used) regexp feature","msgtype":"m.text"},"ts":1605706413000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we could theoretically come up with a \"strict mode\" flag for regexp and reserve a set of characters that give us room to expand the syntax inside of a regexp.","msgtype":"m.text"},"ts":1605706466000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"who is this Mark that is speaking?","msgtype":"m.text"},"ts":1605706468000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"You could introduce new syntax using some existing \\ escape (this makes the most sense for unicode flagged expressions where escapes as reserved).","msgtype":"m.text"},"ts":1605706481000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"Markus Scherer is speaking","msgtype":"m.text"},"ts":1605706496000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"possibly `/[\\U…]/u`","msgtype":"m.text"},"ts":1605706547000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I believe he represents Google in the Unicode Consortium","msgtype":"m.text"},"ts":1605706549000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"Sure or \\U[...]","msgtype":"m.text"},"ts":1605706567000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1605706585000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I think this is possible","msgtype":"m.text"},"ts":1605706601000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I remain impressed with meeting attendance.  We have 36 now.","msgtype":"m.text"},"ts":1605706628000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I could see the `u` giving us this flexibility, with caveats. For example, intersection using `\\I{A,B}`to intersect the character classes of A and B (i.e., `/[\\I{\\p{Letter},\\p{Lowercase}}]/u`)","msgtype":"m.text"},"ts":1605706832000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Not the prettiest, but its viable.","msgtype":"m.text"},"ts":1605706854000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Mark is Mark E. Davis: https://en.wikipedia.org/wiki/Mark_Davis_(Unicode) -- I opened a PR to add his acronym MED: https://github.com/tc39/notes/pull/87","msgtype":"m.text"},"ts":1605706870000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"i hope we didn't try to explain unicode to him","msgtype":"m.text"},"ts":1605706975000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you have to be pretty good in a field to have a wikipedia page with a disambiguation naming that field","msgtype":"m.text"},"ts":1605707100000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Isn't Mark E Davis the Unicode Editor or similar?","msgtype":"m.text"},"ts":1605707156000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"gibson042 Good on you to place syntax in TCQ!!!","msgtype":"m.text"},"ts":1605707182000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"RegExp pattern syntax at that.","msgtype":"m.text"},"ts":1605707250000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"✔","msgtype":"m.text"},"ts":1605707258000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah that's Mark alright","msgtype":"m.text"},"ts":1605707371000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"he's only the President of the Unicode Consortium, nbd","msgtype":"m.text"},"ts":1605707394000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah but can he name every unpaired surrogate","msgtype":"m.text"},"ts":1605707443000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"U+D83D U+DE02","msgtype":"m.text"},"ts":1605707471000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"gibson042: or even `\\U{{[A]--[B]}}` and `\\U{{[A]&&[B]}}` etc.","msgtype":"m.text"},"ts":1605707677000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"heck we could even do `\\UnicodeSet{…}`","msgtype":"m.text"},"ts":1605707753000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1605707773000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"love it","msgtype":"m.text"},"ts":1605707809000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"if Chrome can ship Scroll to Text Fragment as \"#:~:text=prefix-,startText,endText,-suffix\" and sleep at night, we can do this kind of damage","msgtype":"m.text"},"ts":1605708041000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"https://github.com/mathiasbynens/proposal-regexp-set-notation/issues/2","msgtype":"m.text"},"ts":1605708129000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"ok bedtime","msgtype":"m.text"},"ts":1605708144000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Going to bed as well...","msgtype":"m.text"},"ts":1605708158000,"senderName":"msaboff_","senderId":"msaboff_@irc"},
{"content":{"body":"transcription worked noticibly better today than the last two days, I think!","msgtype":"m.text"},"ts":1605708159000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we officially hit 50 poages!","msgtype":"m.text"},"ts":1605708289000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"*pages","msgtype":"m.text"},"ts":1605708292000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"mathiasbynens but \\U has to be the name of a unicode character","msgtype":"m.text"},"ts":1605708315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\\U{HEAVY BLACK CHECK MARK}","msgtype":"m.text"},"ts":1605708334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: this doesn't prevent us from doing that","msgtype":"m.text"},"ts":1605708356000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hmm I guess you're technically not wrong","msgtype":"m.text"},"ts":1605708373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Words\t27759","msgtype":"m.text"},"ts":1605708387000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we can use any unused escape in `u`-mode, so there's some flexibility here.","msgtype":"m.text"},"ts":1605708395000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"my favourite part of the bible","msgtype":"m.text"},"ts":1605708399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we use timestamps to track agenda items, e.g.   mark 10:15-10:30.","msgtype":"m.text"},"ts":1605708532000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"🙏","msgtype":"m.text"},"ts":1605708547000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thou shalt not share wet objects with dry realms","msgtype":"m.text"},"ts":1605708577000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one time i started using them to look up biblical references and freaked myles out by making up a super plausible psalm on consensus","msgtype":"m.text"},"ts":1605708585000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1605708608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: this is assuming you want this feature to only be usable in strict mode code","msgtype":"m.text"},"ts":1605708862000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"what feature? RegExp sets and intersections? I was talking about a strict-mode flag for RegExp, which apparently  `u` satisfies.","msgtype":"m.text"},"ts":1605708926000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"not strict enough","msgtype":"m.text"},"ts":1605713351000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: regarding your question about intl enumeration, i got the following answer: \"large API surface - we are entering the world of an API that will return 50-100 items depending on the \"query\" that are all fingerprintable and the very intention of the API is to let apps adjust their behavior depending on the returned values. Which means that changes to what we return may become web-compat issues.\"","msgtype":"m.text"},"ts":1605719431000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"devsnek: in what sense is /u not strict enough? Tokenization is not affected by introduction of a new backslash sequence.","msgtype":"m.text"},"ts":1605722072000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: it allows annex b","msgtype":"m.text"},"ts":1605724190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which doesn't affect tokenization AFAICT, and the relevant changes to the regular expression grammar are strictly applied to non-/u expressions (which is why `(/\\U[\\p{N}]/u)` is a SyntaxError while `(/\\U[\\p{N}]/)` is not)","msgtype":"m.text"},"ts":1605724986000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah, to quote: \"none of these [Annex B] extensions change the syntax of Unicode patterns recognized when parsing with the [U] parameter present on the goal symbol.\"","msgtype":"m.text"},"ts":1605725046000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ystartsev: thanks, is that... implementation difficulty?","msgtype":"m.text"},"ts":1605733389000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"those sound like valid concerns, but not implementability concerns","msgtype":"m.text"},"ts":1605733397000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"true web compat in the presence of changing locale data is probably an impossible dream anyway","msgtype":"m.text"},"ts":1605733619000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(which isn't to say it would stop users from submitting bugs based on naive assumptions of stability though)","msgtype":"m.text"},"ts":1605733902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: swapping locales generally requires restarting browsers already","msgtype":"m.text"},"ts":1605734544000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh, I didn't even mean default locale","msgtype":"m.text"},"ts":1605734612000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, so many of the intl402 tests in test262 are basically CLDR regression tests, even though ECMA-402 itself doesn't care what locale data you actually have available","msgtype":"m.text"},"ts":1605734675000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]