[
{"content":{"body":"mathiasbynens: is there a reason that we wouldn't want something like https://github.com/orling/grapheme-splitter in the language?","msgtype":"m.text"},"ts":1586279706000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that’s Intl.Segmenter","msgtype":"m.text"},"ts":1586281985000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: right, but i meant directly on strings","msgtype":"m.text"},"ts":1586282374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"What are you asking for?","msgtype":"m.text"},"ts":1586285180000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":" what would you expect from implementations that don't include ECMA-402?","msgtype":"m.text"},"ts":1586285204000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"What would \"directly on strings\" mean?","msgtype":"m.text"},"ts":1586285205000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"like String.prototype.graphemes or something?","msgtype":"m.text"},"ts":1586285220000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1586285226000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think that'd run a huge risk of breaking changes?","msgtype":"m.text"},"ts":1586285325000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Every time we update Unicode, you're `\"foo\".graphemes` could return something different.","msgtype":"m.text"},"ts":1586285355000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"your**","msgtype":"m.text"},"ts":1586285362000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"breaking changes as a result of updating unicode already happen and are already Fine™","msgtype":"m.text"},"ts":1586285413000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the same could occur with code points, and *has* occurred with whitespace","msgtype":"m.text"},"ts":1586285432000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"As a syntax change, early errors are easy to fix.","msgtype":"m.text"},"ts":1586285505000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"This is a change in runtime behavior.","msgtype":"m.text"},"ts":1586285510000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Much more difficult to track donw.","msgtype":"m.text"},"ts":1586285517000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right, those already have happened and will continue to happen when unicode updates","msgtype":"m.text"},"ts":1586285582000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1586285595000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`.trim()` changed, for example, wrt the mongolian vowel separator in ES2017 iirc?","msgtype":"m.text"},"ts":1586285600000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that character got classified as whitespace, and then unclassified as it (or maybe the reverse, i don't recall)","msgtype":"m.text"},"ts":1586285618000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie the meaning of `\\s` in regexes changed","msgtype":"m.text"},"ts":1586285628000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so i don't think that \"unicode changes\" is an argument against adding any string-related features","msgtype":"m.text"},"ts":1586285645000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what is the benefit of having the api on string.prototype","msgtype":"m.text"},"ts":1586285651000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we already have the segmenter api","msgtype":"m.text"},"ts":1586285660000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Intl isn't required, it's optional","msgtype":"m.text"},"ts":1586285667000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: so it's not guaranteed to be available","msgtype":"m.text"},"ts":1586285676000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the prototype method would have to be just as optional","msgtype":"m.text"},"ts":1586285685000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like toLocaleString","msgtype":"m.text"},"ts":1586285703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1586285706000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why would it have to be?","msgtype":"m.text"},"ts":1586285714000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"code points depend on unicode, and Symbol.iterator is required","msgtype":"m.text"},"ts":1586285722000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(toLocaleString is also required, it's just that its behavior is impl-dependent)","msgtype":"m.text"},"ts":1586285734000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and 402 overrides it when present)","msgtype":"m.text"},"ts":1586285748000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah but I don't believe XS uses ICU, say","msgtype":"m.text"},"ts":1586285808000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"segmentation is locale-dependent, at least for words and sentences, so Intl.* makes sense","msgtype":"m.text"},"ts":1586285872000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"having one type of segmentation on String.prototype.* and two others on Intl.* would be weird","msgtype":"m.text"},"ts":1586285892000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"right, i don't think a generic segmenter belongs on strings","msgtype":"m.text"},"ts":1586285944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: wait do you want","msgtype":"m.text"},"ts":1586285948000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but like you can iterate on chars, and on code points, i want to be able to iterate on graphemes","msgtype":"m.text"},"ts":1586285956000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Intl.Segmenter on String.prototype or","msgtype":"m.text"},"ts":1586285964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the code point iterator","msgtype":"m.text"},"ts":1586285988000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ie, `'a🏳️‍🌈c'` is 8 chars, 6 code points, but 3 graphemes","msgtype":"m.text"},"ts":1586286013000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so i want an iterator that gives me 3 things and not 6 or 8","msgtype":"m.text"},"ts":1586286026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i realize this is a subset of what Intl.Segmenter does, but it feels to me like the subset would make sense directly on String.prototype, mandated (unless that, too, is locale-dependent?)","msgtype":"m.text"},"ts":1586286074000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"splitting by graphemes needs locale data right?","msgtype":"m.text"},"ts":1586286090000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like you'd bring in the icu lib","msgtype":"m.text"},"ts":1586286110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe? what locale data does it need","msgtype":"m.text"},"ts":1586286122000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"at which point you'd expose Intl.Segmenter anyway","msgtype":"m.text"},"ts":1586286125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does the data needed for splitting on graphemes equal the data needed for all of Intl?","msgtype":"m.text"},"ts":1586286165000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd assume it's a small subset","msgtype":"m.text"},"ts":1586286173000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean that's true for each individual item we ship in Intl","msgtype":"m.text"},"ts":1586286188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though some are larger than others","msgtype":"m.text"},"ts":1586286226000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mathiasbynens: can you explain how splitting grapheme clusters is locale-dependent?","msgtype":"m.text"},"ts":1586286285000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"CLDR contains data for grapheme clustering","msgtype":"m.text"},"ts":1586286445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right but i mean like, there's graphemes that aren't clustered consistently across locales?","msgtype":"m.text"},"ts":1586286487000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://unicode.org/reports/tr29/#Conformance","msgtype":"m.text"},"ts":1586286586000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"> For example, reliable detection of word boundaries in languages such as Thai, Lao, Chinese, or Japanese requires the use of dictionary lookup, analogous to English hyphenation.","msgtype":"m.text"},"ts":1586286607000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's not as simple as \"does this char join with the previous char\"","msgtype":"m.text"},"ts":1586286631000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"There's not a property on the Unicode char that we could look at.","msgtype":"m.text"},"ts":1586286651000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"word boundaries are tricky for sure, but ljharb is just concerned with graphemes","msgtype":"m.text"},"ts":1586286662000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right, i don't care about words","msgtype":"m.text"},"ts":1586286671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"> These algorithms can be adapted to produce tailored grapheme clusters for specific locales or other customizations, such as the contractions used in collation tailoring tables.","msgtype":"m.text"},"ts":1586286781000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"> The following is a general specification for grapheme cluster boundaries—language-specific rules in [CLDR] should be used where available.","msgtype":"m.text"},"ts":1586286784000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stuff like 👨‍👩‍👧‍👦 is also an issue, dependent on env but not locale","msgtype":"m.text"},"ts":1586287013000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://mathiasbynens.be/notes/javascript-unicode#other-grapheme-clusters","msgtype":"m.text"},"ts":1586287226000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"For a completely accurate solution that works for all Unicode scripts, implement this algorithm in JavaScript, and then count each grapheme cluster as a single symbol\"","msgtype":"m.text"},"ts":1586287474000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sounds like it's doable","msgtype":"m.text"},"ts":1586287478000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh here we go","msgtype":"m.text"},"ts":1586287521000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell's last quote above precedes this table","msgtype":"m.text"},"ts":1586287539000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://unicode.org/reports/tr29/#Table_Sample_Grapheme_Clusters","msgtype":"m.text"},"ts":1586287540000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the last chunk of the table is locale-specific","msgtype":"m.text"},"ts":1586287547000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so we could have it on string, and let 402 fill it in for the last chunk","msgtype":"m.text"},"ts":1586287577000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or you could just use Intl.Segmenter","msgtype":"m.text"},"ts":1586287643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/TfliWeVm/simple-graphemes.js","msgtype":"m.text"},"ts":1586287903000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"default rules for identifying grapheme cluster boundaries: http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules","msgtype":"m.text"},"ts":1586287920000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"PSA: please add incubator call items at https://github.com/tc39/incubator-agendas/blob/master/2020/04-14.md","msgtype":"m.text"},"ts":1586287921000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"empty so far, i plan to add realms by EOD, but would like to give other folks a chance to add their items first","msgtype":"m.text"},"ts":1586287947000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"they depend upon character property data, but are not locale-specific","msgtype":"m.text"},"ts":1586287956000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"jridgewell: that doesn't yield anything","msgtype":"m.text"},"ts":1586287972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Did for me","msgtype":"m.text"},"ts":1586287986000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I mean, it is a fact that https://github.com/orling/grapheme-splitter/blob/master/index.js is intending to implement the standard, and is <1750 lines with no deps","msgtype":"m.text"},"ts":1586287994000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and has no locale arg, I mean","msgtype":"m.text"},"ts":1586288025000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell: [...graphemes('🏳️‍🌈💩')]` gives me just a single white flag","msgtype":"m.text"},"ts":1586288035000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh, because I had a `Mark` char in mine.","msgtype":"m.text"},"ts":1586288036000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"has there been any proposals so far to investigate improving ergonomics of `const` and `try/catch`? `let res; try { res = await fetch(url); } catch (e) { /* ... */ } /* res can be overriden */`","msgtype":"m.text"},"ts":1586288072000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"mmarchini: ergonomics of statements in general","msgtype":"m.text"},"ts":1586288106000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mmarchini: do expressions","msgtype":"m.text"},"ts":1586288120000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1586288129000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mmarchini: https://github.com/tc39/proposal-do-expressions","msgtype":"m.text"},"ts":1586288140000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"http://unicode.org/reports/tr29/#Table_Combining_Char_Sequences_and_Grapheme_Clusters","msgtype":"m.text"},"ts":1586288142000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Wanna code that table into a regex?","msgtype":"m.text"},"ts":1586288150000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: did you just ask me to write a distributed map reduce function in erlang","msgtype":"m.text"},"ts":1586288184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":":-p","msgtype":"m.text"},"ts":1586288193000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do expressions implicitly returns the last expression, right?","msgtype":"m.text"},"ts":1586288210000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"No, we have the ability to encode it with properties.","msgtype":"m.text"},"ts":1586288212000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I just don't wanna do it.","msgtype":"m.text"},"ts":1586288217000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"mmarchini: not exactly","msgtype":"m.text"},"ts":1586288220000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but more or less yes","msgtype":"m.text"},"ts":1586288229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: was referencing https://lh3.googleusercontent.com/proxy/Qx2opykPRGCvHcvcqdfCxygjKoFmE4ZXMKuUB0fWV2KB2NMnAoS_AGBlt4M0k99imlqraTw2k55_y8oSNkD3iSgcFl2Bu9PYnsh9YNjfrpU8OrXZWcgi1emZvQ","msgtype":"m.text"},"ts":1586288234000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mmarchini: they work the same as what eval() returns","msgtype":"m.text"},"ts":1586288238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: what's the process for adding things to \"chartered proposals\"?","msgtype":"m.text"},"ts":1586288261000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's also the explicit resource mgmt proposal","msgtype":"m.text"},"ts":1586288269000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: you want to talk about another proposal?","msgtype":"m.text"},"ts":1586288279000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so the above would look like `const res = do { let res; try { await res(url) } catch (e) { /* ... */ }; res}`","msgtype":"m.text"},"ts":1586288294000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"oh, I don't think I'm familiar with how eval returns","msgtype":"m.text"},"ts":1586288308000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"mmarchini: you can get rid of the res variable","msgtype":"m.text"},"ts":1586288331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: the current process is to wait until the next plenary. people said they didn't want to feel pressured to check on an agenda every 2 weeks, so the proposed process was folks are free to call out proposals they think should be discussed in the incubator meetings in between two plenaries","msgtype":"m.text"},"ts":1586288346000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`do { try { x } catch { y } }`","msgtype":"m.text"},"ts":1586288353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: i don't have anything in mind, just was curious","msgtype":"m.text"},"ts":1586288367000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`const res = do { try { res(url) } catch (e) {  console.error(e); undefined  }}`?","msgtype":"m.text"},"ts":1586288375000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"shu: oh I missed that point, that's good to know","msgtype":"m.text"},"ts":1586288380000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: and so the stakeholders would be able to get a heads up and agree to participating in the call until the next plenary","msgtype":"m.text"},"ts":1586288380000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mmarchini: console.error already returns undefined","msgtype":"m.text"},"ts":1586288386000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: gotcha","msgtype":"m.text"},"ts":1586288389000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1586288392000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"at that point","msgtype":"m.text"},"ts":1586288399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`const res = do { try { res(url) } catch (e) {  undefined  }}`","msgtype":"m.text"},"ts":1586288400000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1586288403000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"`const res = do { try { res(url) } catch (e) {  console.error(e)  }}`","msgtype":"m.text"},"ts":1586288408000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"hum","msgtype":"m.text"},"ts":1586288410000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1586288411000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"i'd do `await fetch().catch((e) => console.error(e))`","msgtype":"m.text"},"ts":1586288418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a little verbose, bot not bad","msgtype":"m.text"},"ts":1586288421000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"but*","msgtype":"m.text"},"ts":1586288429000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1586288440000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"indeed, devsnek's is better :-)","msgtype":"m.text"},"ts":1586288491000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do expressions are super useful but a lot of the examples could be easily reworked to be better, and not need do expressions in the first place","msgtype":"m.text"},"ts":1586288511000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's also https://github.com/tc39/proposal-explicit-resource-management for `try (const ...) {}` though","msgtype":"m.text"},"ts":1586288525000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh wait my bad","msgtype":"m.text"},"ts":1586288550000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that doesn't make the variable available outside the try","msgtype":"m.text"},"ts":1586288552000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1586288556000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"available outside with const, was the goal","msgtype":"m.text"},"ts":1586288563000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1586288567000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i really want do expressions :(","msgtype":"m.text"},"ts":1586288567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1586288571000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ditto","msgtype":"m.text"},"ts":1586288575000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"as long as they allow return and break and stuff that is","msgtype":"m.text"},"ts":1586288590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"without those they're useless to me","msgtype":"m.text"},"ts":1586288594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, i want them to not have those things","msgtype":"m.text"},"ts":1586288643000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it doesn't even make sense for them to not have those","msgtype":"m.text"},"ts":1586288654000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't make sense to me to have an expression able to affect control flow (beyond throwing)","msgtype":"m.text"},"ts":1586288671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's a block","msgtype":"m.text"},"ts":1586288686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that you can get a value out of","msgtype":"m.text"},"ts":1586288694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, the latter imo trumps the former","msgtype":"m.text"},"ts":1586288703000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"things you can get a value out of, can't affect control flow, modulo exceptions","msgtype":"m.text"},"ts":1586288714000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't understand how \"get a value out of\" has anything to do with scope","msgtype":"m.text"},"ts":1586288726000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I find do expressions very confusing without explicitly return","msgtype":"m.text"},"ts":1586288745000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"explicit*","msgtype":"m.text"},"ts":1586288751000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"\"it behaves like eval\" will not be a valid explanation for most JS developers","msgtype":"m.text"},"ts":1586288768000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"i think it's a valuable thing to know that `return`, for example, can't occur in expression position","msgtype":"m.text"},"ts":1586288772000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"s/valid/didactic/","msgtype":"m.text"},"ts":1586288781000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"i'm just imagining how useless block expressions would be in rust if you couldn't break/return out of them","msgtype":"m.text"},"ts":1586288786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: what are your use cases for do expressions that need these?","msgtype":"m.text"},"ts":1586288790000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that i want to return from a function or break a loop","msgtype":"m.text"},"ts":1586288804000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right but what would the code be","msgtype":"m.text"},"ts":1586288812000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it doesn't matter","msgtype":"m.text"},"ts":1586288817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't have to be `return`, but making explicit in the expression what value is getting out would be important IMO","msgtype":"m.text"},"ts":1586288825000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"it definitely matters - i can't conceive of when you'd need to return, or break, but also extract a value out of the code","msgtype":"m.text"},"ts":1586288833000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mmarchini: it couldn't be `return` due to confusion; but syntactically marking the value to get out would probably be tricky","msgtype":"m.text"},"ts":1586288852000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wish github had better code search","msgtype":"m.text"},"ts":1586288853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you should go look at rust code that uses block expressions","msgtype":"m.text"},"ts":1586288863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"different languages have different common use cases; i'd want an example in JS where you'd use this","msgtype":"m.text"},"ts":1586288889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i have some logic","msgtype":"m.text"},"ts":1586288899000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"inside a block","msgtype":"m.text"},"ts":1586288901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that necessitates returning","msgtype":"m.text"},"ts":1586288911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then why do you need to capture the value of the block","msgtype":"m.text"},"ts":1586288921000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I think I get where you coming from: those are expressions and not blocks","msgtype":"m.text"},"ts":1586288929000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"because its conditional or smth idk","msgtype":"m.text"},"ts":1586288939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, it's \"do expressions\" not \"do blocks\"","msgtype":"m.text"},"ts":1586288944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: lol well if you don't know then how is it a use case","msgtype":"m.text"},"ts":1586288950000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so maybe the bracked syntax is what's confusing me (and I expect it would confuse other folks as well)","msgtype":"m.text"},"ts":1586288951000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"ljharb: i have specific code i would like to write","msgtype":"m.text"},"ts":1586288962000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't think that's important","msgtype":"m.text"},"ts":1586288966000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and in this case try/catch and if/else shouldn't be allowed, right? since we're avoiding any kind of control flow","msgtype":"m.text"},"ts":1586288980000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1586288993000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"y'all seem to really be missing the point","msgtype":"m.text"},"ts":1586289004000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(not saying I'm agreeing with it)","msgtype":"m.text"},"ts":1586289007000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"devsnek: without code, how can we avoid missing it","msgtype":"m.text"},"ts":1586289016000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mmarchini: nah, exceptions are fine","msgtype":"m.text"},"ts":1586289026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the real goal of do exprs is the wish that we could have \"everything is an expression\" in JS","msgtype":"m.text"},"ts":1586289027000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mmarchini: expressions can still throw","msgtype":"m.text"},"ts":1586289029000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: but, explicitly instead of implicitly","msgtype":"m.text"},"ts":1586289037000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i actively don't want implicit expressions everywhere, i *like* the statement/expression dichotomy, and wish functions aren't both","msgtype":"m.text"},"ts":1586289054000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: why do you not believe i would want to use return inside a block","msgtype":"m.text"},"ts":1586289062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i","msgtype":"m.text"},"ts":1586289062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm sure you've used return inside blocks before","msgtype":"m.text"},"ts":1586289069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i use return inside blocks all the time, that's not the issue","msgtype":"m.text"},"ts":1586289074000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: i'm not understanding why you'd do that *and* want to capture the value of the block","msgtype":"m.text"},"ts":1586289085000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah okay. I would just as well not have statements in a language myself, but regardless, implicit would be quite a language revamp","msgtype":"m.text"},"ts":1586289089000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"because both are useful","msgtype":"m.text"},"ts":1586289091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"orthagonally","msgtype":"m.text"},"ts":1586289093000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"therefore `do { ... }` is explicit","msgtype":"m.text"},"ts":1586289099000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: i'm not disputing it, i'm asking for a single non-contrived concrete example of it being useful","msgtype":"m.text"},"ts":1586289108000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: expanding my macros in engine262","msgtype":"m.text"},"ts":1586289124000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can you link me to an example?","msgtype":"m.text"},"ts":1586289132000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: because capturing the value of the block is the entire point","msgtype":"m.text"},"ts":1586289150000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/engine262/engine262/blob/master/scripts/transform.js","msgtype":"m.text"},"ts":1586289158000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I would think that that means that `do` just means putting a _scope_ around \"everything is an expression\" and not restricting what (would-be) statements are allowed in there","msgtype":"m.text"},"ts":1586289195000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like `do if () {}`?","msgtype":"m.text"},"ts":1586289222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/2hSLTTCi/do-expression-return.js","msgtype":"m.text"},"ts":1586289224000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"You can't always devolve an the remaining part of a block into an else condition.","msgtype":"m.text"},"ts":1586289262000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"devsnek: tbf `do if` is just somebody complaining about ternaries","msgtype":"m.text"},"ts":1586289264000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: ternaries don't allow variable delcarations","msgtype":"m.text"},"ts":1586289293000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: everything after an if+return is implicitly the else bock","msgtype":"m.text"},"ts":1586289303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do with return gets really weird/new","msgtype":"m.text"},"ts":1586289304000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"block","msgtype":"m.text"},"ts":1586289304000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Blocks are necessary to cleanly express a lot of code","msgtype":"m.text"},"ts":1586289308000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"devsnek: You can't always devolve an the remaining part of a block into an else condition.","msgtype":"m.text"},"ts":1586289331000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i think its a good idea, but doubt we should use the `do` keyword due to how gross the `do...while` interactiom is","msgtype":"m.text"},"ts":1586289341000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why can't i refactor any `let x; <some statement or block>` to `let x = do { <some statement or block> }`","msgtype":"m.text"},"ts":1586289342000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"My code example is contrived, and is just meant to demonstrate early return","msgtype":"m.text"},"ts":1586289362000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: ok so can you give me an example of when you *can't* devolve the rest of the block into an else?","msgtype":"m.text"},"ts":1586289373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: you want to early return to the end of the do block?","msgtype":"m.text"},"ts":1586289384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: i'm not saying \"there are none\", i'm saying \"please give me one because nobody seems to be capable of doing that so far\"","msgtype":"m.text"},"ts":1586289391000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i've never not been able to devolve into an if+else in rust","msgtype":"m.text"},"ts":1586289398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"At the beginning","msgtype":"m.text"},"ts":1586289400000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: to be clear I meant `do if` as opposed to `do { if {} }`","msgtype":"m.text"},"ts":1586289401000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell: i've never encountered something that can't be","msgtype":"m.text"},"ts":1586289419000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"const x = do {","msgtype":"m.text"},"ts":1586289428000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1586289449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"This can't be cleanly develoved into an if-else. https://www.irccloud.com/pastebin/bmg0madZ/do-expressions.js","msgtype":"m.text"},"ts":1586289488000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Again, contrived.","msgtype":"m.text"},"ts":1586289505000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But every set if conditions can't be cleanly devloved into an if-else.","msgtype":"m.text"},"ts":1586289522000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"it can be","msgtype":"m.text"},"ts":1586289528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But not**","msgtype":"m.text"},"ts":1586289532000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"it would take a few minutes of thinking","msgtype":"m.text"},"ts":1586289538000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"**cleanly**","msgtype":"m.text"},"ts":1586289542000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"and i'd argue that's spaghetti with or without do expressions","msgtype":"m.text"},"ts":1586289546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't want to repeat `doSomething()`","msgtype":"m.text"},"ts":1586289552000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's a fallthrough, which is very valuable.","msgtype":"m.text"},"ts":1586289595000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: sure it can `if (first) { if (second) { something; } else { doSomething(); } } else { doSomethingMore(); value; }`","msgtype":"m.text"},"ts":1586289606000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and then you return that entire thing wrapped in `do { }`","msgtype":"m.text"},"ts":1586289630000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Nit picking my example isn't really the point.","msgtype":"m.text"},"ts":1586289687000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'm still seeing some very smart people struggling to come up with a single non-contrived concrete example of where it'd be useful to have return/break/continue inside a do expression, which doesn't bode well for the persuasiveness of the argument","msgtype":"m.text"},"ts":1586289690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think assigning to a var might be part of the issue with this basis, putting them inside awkward expression positions feels more concrete: `foo({x: existing ?? do { try { /*expensive*/ } catch { /* better message here */ } })`","msgtype":"m.text"},"ts":1586289695000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Do this with a for-loop, where you early return.","msgtype":"m.text"},"ts":1586289697000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: i've literally only ever seen logic that contrived in my js lexer","msgtype":"m.text"},"ts":1586289700000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: that example is fine, there's no return/break/continue in it","msgtype":"m.text"},"ts":1586289722000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i mean i can make a return based example in there","msgtype":"m.text"},"ts":1586289745000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"y'all should really try using some languages with this behaviour","msgtype":"m.text"},"ts":1586289747000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"such as things that fail silently","msgtype":"m.text"},"ts":1586289755000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i'd love to see my first non-contrived one","msgtype":"m.text"},"ts":1586289760000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think contrived is a valuable position","msgtype":"m.text"},"ts":1586289777000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have a turing complete language, everything is contrived","msgtype":"m.text"},"ts":1586289785000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: it occurs to me you can have a no-return-in-do-expression eslint rule","msgtype":"m.text"},"ts":1586289836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd lean on allowing usages rather than trying to pin the language down to only having 1 way to accomplish anything","msgtype":"m.text"},"ts":1586289841000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: sure, but why add burden for those that lint if there's not a compelling argument to allow it in the first place","msgtype":"m.text"},"ts":1586289884000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well we shouldn't have 20 ways to accomplish something, but you should be able to compose features into new ways of using them","msgtype":"m.text"},"ts":1586289892000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i would use it","msgtype":"m.text"},"ts":1586289900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i feel like 95% of my arguments turn into people saying my use cases aren't valid","msgtype":"m.text"},"ts":1586289931000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: and all i've been asking for is, to see some JS code where you'd use it :-/","msgtype":"m.text"},"ts":1586289934000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i linked you to an example","msgtype":"m.text"},"ts":1586289942000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not saying your use cases aren't valid, i'm saying \"please give me > 0 use cases\"","msgtype":"m.text"},"ts":1586289946000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`for (...) { results.push(do { try { ... } catch { continue } }) }`","msgtype":"m.text"},"ts":1586289947000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: in JS? or in rust","msgtype":"m.text"},"ts":1586289950000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that transform code isn't even feature complete","msgtype":"m.text"},"ts":1586289952000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i linked you some js","msgtype":"m.text"},"ts":1586289958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, let me take a look","msgtype":"m.text"},"ts":1586289998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: more generally, wherever you'd normally want to express control flow, you might want to do so if that logic happens to occur inside a do expression","msgtype":"m.text"},"ts":1586289999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: any lines in particular?","msgtype":"m.text"},"ts":1586290015000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: the entire thing is a system to restructure random expressions into using control flow","msgtype":"m.text"},"ts":1586290028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i mean thats the complaint with arr.forEach in general vs loops","msgtype":"m.text"},"ts":1586290032000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and like i said its not complete, there are certain ways you can't use macros in engine262 because i haven't figured out how to transform them correctly","msgtype":"m.text"},"ts":1586290068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the only thing with do expressions is they can live in an expression position","msgtype":"m.text"},"ts":1586290072000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, things that want to skip an effect while being in an expression position such as the .push example above are prime examples","msgtype":"m.text"},"ts":1586290149000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the argument i did find interesting was that someone would be confused about return inside a do expression and whether it returned the block or the enclosing function","msgtype":"m.text"},"ts":1586290156000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i think that's more of a general language education problem","msgtype":"m.text"},"ts":1586290179000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could refactor things into a lot of statements, or you could keep the bailout logic in the literal 🤷","msgtype":"m.text"},"ts":1586290183000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"for what it is worth, i think return/continue/break are scary, but have no clear reason to argue against them as you could refactor things to be done w/o do expressions anyway; that just makes it more verbose / may increase loss of locality","msgtype":"m.text"},"ts":1586290256000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"labelled break/continue are super interesting here","msgtype":"m.text"},"ts":1586290278000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"labels are illegal","msgtype":"m.text"},"ts":1586290287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the proposal? we have power to alter such things","msgtype":"m.text"},"ts":1586290303000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no i meant in general, it was a joke","msgtype":"m.text"},"ts":1586290316000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i use labels!","msgtype":"m.text"},"ts":1586290326000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i've only used labels once","msgtype":"m.text"},"ts":1586290332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for lexing whitespace in js","msgtype":"m.text"},"ts":1586290341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nested loop sadness","msgtype":"m.text"},"ts":1586290353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i use em in bad places","msgtype":"m.text"},"ts":1586290353000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like_here: debugger;","msgtype":"m.text"},"ts":1586290358000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why do you label a debugger statement","msgtype":"m.text"},"ts":1586290369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gives me my debugger operands proposal effectively /cackling","msgtype":"m.text"},"ts":1586290380000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait i don't think that syntax is even valid","msgtype":"m.text"},"ts":1586290393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"LabelledStatement and DebuggerStatement are both productions of Statement directly","msgtype":"m.text"},"ts":1586290418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"browsers think it is","msgtype":"m.text"},"ts":1586290438000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait a second","msgtype":"m.text"},"ts":1586290451000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"LabelledItem is any statement","msgtype":"m.text"},"ts":1586290455000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this changes everything","msgtype":"m.text"},"ts":1586290458000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, they can even nest","msgtype":"m.text"},"ts":1586290463000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if i remember","msgtype":"m.text"},"ts":1586290467000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what does it change?","msgtype":"m.text"},"ts":1586290516000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: are you just gonna add a ton of labels?","msgtype":"m.text"},"ts":1586290567000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lol it doesn't actually change much","msgtype":"m.text"},"ts":1586290580000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just never realized you could label things that aren't loops","msgtype":"m.text"},"ts":1586290589000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i thought you were about to do something weird like","msgtype":"m.text"},"ts":1586290609000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"return_if_abrupt: foo();","msgtype":"m.text"},"ts":1586290624000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can break to a label without a loop as well, i think","msgtype":"m.text"},"ts":1586290660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1586290676000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"aw i was hoping this would work `x: { console.log('hi!'); while (true) { continue x; } }`","msgtype":"m.text"},"ts":1586290717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nah, just break","msgtype":"m.text"},"ts":1586290768000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"also TIL break is not constrained to loops","msgtype":"m.text"},"ts":1586290790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what a wild world","msgtype":"m.text"},"ts":1586290797000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why would it be?","msgtype":"m.text"},"ts":1586290815000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what are you breaking if you aren't in a loop","msgtype":"m.text"},"ts":1586290848000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the quality of your code","msgtype":"m.text"},"ts":1586290872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1586290875000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`x: { console.log('hi!'); break x; console.log('bye') }`","msgtype":"m.text"},"ts":1586290878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so this doesn't log bye","msgtype":"m.text"},"ts":1586290882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could use that for early return in do expressions","msgtype":"m.text"},"ts":1586290957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that isn't the same, the completion value would carry over rather than stop outer scope","msgtype":"m.text"},"ts":1586291304000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jridgewell's example https://gc.gy/53996426.png","msgtype":"m.text"},"ts":1586291429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: fwiw i don't mind anything that breaks out of the do expression; but that you could put the label anywhere seems like it'd be bad","msgtype":"m.text"},"ts":1586291479000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1586291491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: so like, i'd be ok with a do-expression-level unlabelled break","msgtype":"m.text"},"ts":1586291494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unlabelled break has to go to the enclosing loop","msgtype":"m.text"},"ts":1586291509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not if it's inside a do expression","msgtype":"m.text"},"ts":1586291517000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(you can make a consistency argument that it must, sure, but i'm saying it could have different semantics there)","msgtype":"m.text"},"ts":1586291539000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why do things have to randomly be different inside the block of a do expression","msgtype":"m.text"},"ts":1586291552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"things are already that way, because of the completion value","msgtype":"m.text"},"ts":1586291614000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's not a problem to use if/else in rust","msgtype":"m.text"},"ts":1586291618000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no other blocks are expresisons","msgtype":"m.text"},"ts":1586291620000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait, was the statement about `break` just in the context of do exprs?","msgtype":"m.text"},"ts":1586291646000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: which statement","msgtype":"m.text"},"ts":1586291658000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the idea that you could use it as goto in general","msgtype":"m.text"},"ts":1586291670000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no, you can already do that","msgtype":"m.text"},"ts":1586291677000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1586291682000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"outside of a loop, you can't use an unlabelled break; but you can use a labelled break anywhere","msgtype":"m.text"},"ts":1586291689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can't use it as goto","msgtype":"m.text"},"ts":1586291704000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's deeply horrifying but also I can't get that to happen in eshost whatsoever","msgtype":"m.text"},"ts":1586291717000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/53996740.png","msgtype":"m.text"},"ts":1586291739000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh hm, maybe it's only out of blocks","msgtype":"m.text"},"ts":1586291759000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can't jump","msgtype":"m.text"},"ts":1586291764000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ahh if it's just \"break out of block\" I'm less horrified","msgtype":"m.text"},"ts":1586291783000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`(function () { x: console.log('a'); break x; }())` says \"undefined label x\"","msgtype":"m.text"},"ts":1586291787000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok yeah same","msgtype":"m.text"},"ts":1586291790000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"phew","msgtype":"m.text"},"ts":1586291804000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1586291821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people who are concerned about early exit from do expressions","msgtype":"m.text"},"ts":1586291827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should try out languages which have blocks as expressions","msgtype":"m.text"},"ts":1586291834000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because its basically not a problem","msgtype":"m.text"},"ts":1586291851000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like every once in a while you have to refit something to be if/else but it's very trivial","msgtype":"m.text"},"ts":1586291866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ECMAScript allows expressions in places like variable initializers","msgtype":"m.text"},"ts":1586291924000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it allows them in lots of places","msgtype":"m.text"},"ts":1586291951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"almost anywhere in fact","msgtype":"m.text"},"ts":1586291955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"more specifically, ECMAScript allows expressions in places where it _doesn't_ allow control statements","msgtype":"m.text"},"ts":1586292686000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it allows them in places where it doesn't allow statements","msgtype":"m.text"},"ts":1586292738000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"control or otherwise","msgtype":"m.text"},"ts":1586292746000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a pathological example from an earlier meeting was something like `function foo(a = do { return }){}`","msgtype":"m.text"},"ts":1586292749000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"^ that is something that imo shouldn't be possible","msgtype":"m.text"},"ts":1586292769000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"🤷🏻 https://gc.gy/53997804.png","msgtype":"m.text"},"ts":1586292806000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems well defined enough","msgtype":"m.text"},"ts":1586292811000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd expect a no-do-in-arg-init eslint rule regardless of whether they can contain control statements","msgtype":"m.text"},"ts":1586292839000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"perhaps, but i wouldn't enable it","msgtype":"m.text"},"ts":1586292878000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why not","msgtype":"m.text"},"ts":1586292888000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why shouldn't it be possible","msgtype":"m.text"},"ts":1586292899000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is what i'm curious about","msgtype":"m.text"},"ts":1586292902000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: i wouldn't enable it because i don't think there's a problem with using a do expression as a default argument - in place of the places that might currently invoke a function instead","msgtype":"m.text"},"ts":1586292931000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well actually i know why it shouldn't be possible","msgtype":"m.text"},"ts":1586292941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: in general, i lean towards all things should be prohibited unless its good usage outweighs its bad usage","msgtype":"m.text"},"ts":1586292957000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"now do `function foo(a = do { continue }){}`","msgtype":"m.text"},"ts":1586292963000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it shouldn't be possible because arg init shouldn't be +Return","msgtype":"m.text"},"ts":1586292968000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i already have some \"do\" via iife in default arge for throwing","msgtype":"m.text"},"ts":1586292971000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"gibson042: arg init can't contain an outer loop","msgtype":"m.text"},"ts":1586293002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's at the function boundary","msgtype":"m.text"},"ts":1586293005000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's always an unsyntactic continue","msgtype":"m.text"},"ts":1586293016000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042: the key here is that function arg init shouldn't be +Return, regardless of whether do expressions exist or not","msgtype":"m.text"},"ts":1586293039000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1586293056000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"breaking non-loops is useful in almost exactly the set of cases when an early return is useful, it's just that usually you would refactor that code to use a function with an early return rather than keeping it inline. but that's not always something you want to do.","msgtype":"m.text"},"ts":1586293293000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah i pointed that out above with jridgewell's example","msgtype":"m.text"},"ts":1586293349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"most of the places i've ended up emitting a non-loop with a label are in generated code","msgtype":"m.text"},"ts":1586293460000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: re: grapheme clusters being locale-dependent, the example which always occurs to me is, there are some flags which correspond to entities whose status as \"a state\" (and therefore which qualify for a flag) is a matter not everyone agrees upon","msgtype":"m.text"},"ts":1586293477000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i've never even seen that in generated code","msgtype":"m.text"},"ts":1586293488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would love to see some examples","msgtype":"m.text"},"ts":1586293500000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which means flag emoji +ZWJ+their country code may, or may not, be a single character","msgtype":"m.text"},"ts":1586293512000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: code I'm generating tends to be proprietary, alas","msgtype":"m.text"},"ts":1586293525000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh this is code *you're** generating","msgtype":"m.text"},"ts":1586293546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, it is code which tools I wrote are generating, at any rate","msgtype":"m.text"},"ts":1586293582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: oh meaning like taiwan, or palestine, to name the most controversial examples i can think of?","msgtype":"m.text"},"ts":1586293597000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm curious what higher-level control flow mapps to that output","msgtype":"m.text"},"ts":1586293599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb I was extremely carefully in not naming examples :P","msgtype":"m.text"},"ts":1586293611000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yes","msgtype":"m.text"},"ts":1586293619000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: that makes sense, but it still seems like something that could be addressed in a generic way (but Intl/locales could decide)","msgtype":"m.text"},"ts":1586293665000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: I thought all the regional flags used regional indicators, which are always grapheme clusters per the default rules","msgtype":"m.text"},"ts":1586293691000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"devsnek the higher level control flow is usually functions which have early returns which I am inling","msgtype":"m.text"},"ts":1586293692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1586293701000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042 the regional indicators may or may not be joined into a single unit depending on whether the code you're running recognizes that falg","msgtype":"m.text"},"ts":1586293740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"default rules include \"Do not break within emoji modifier sequences or emoji zwj sequences\" and \"do not break between regional indicator (RI) symbols if there is an odd number of RI characters before the break point\"","msgtype":"m.text"},"ts":1586293757000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it's not breaking between the RI symbols, is whether you end up with just a colored flag (one grapheme), or a white flag + a regional indicator (two graphemes)","msgtype":"m.text"},"ts":1586293801000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"now i kind of want to write a babel transform that does function inlining using labels","msgtype":"m.text"},"ts":1586293843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that presentation detail is not relevant to grapheme cluster boundaries","msgtype":"m.text"},"ts":1586293866000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I suspect it is relevant to the thing ljharb wants, though","msgtype":"m.text"},"ts":1586293903000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think i'd be content with the default 262 impl being the default rules, and 402 imposing the locale-dependent ones on top of it","msgtype":"m.text"},"ts":1586294189000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(assuming it would do the \"right\" thing in most cases)","msgtype":"m.text"},"ts":1586294214000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would be interested in hearing from engines that have no intention to implement 402 though","msgtype":"m.text"},"ts":1586294483000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if there were commitment to put it in ECMA-262, that would seem to be the best approach (specify default rules and let ECMA-402 override, similar to but better than how ECMA-262 specifies toLocale*)","msgtype":"m.text"},"ts":1586294493000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"as of today, the default rules appear to require no information not already required of regex \\p","msgtype":"m.text"},"ts":1586294523000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"rkirsling: you can compile node to node include intl, and i don't think xs does","msgtype":"m.text"},"ts":1586294542000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*to not include","msgtype":"m.text"},"ts":1586294546000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: node < 12 or 13 didn't include it by default, iirc","msgtype":"m.text"},"ts":1586294558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah XS doesn't, is a key example","msgtype":"m.text"},"ts":1586294562000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"gibson042: thanks, that sounds good","msgtype":"m.text"},"ts":1586294569000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my point is that engines that do implement 402 have ICU to use, even for a feature that might be 262-side","msgtype":"m.text"},"ts":1586294598000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but XS would have to reimplement and maintain this logic themselves","msgtype":"m.text"},"ts":1586294614000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1586294645000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but I don't know if it makes sense or not... grapheme cluster segmentation seems to occupy a gray area between code unit/code point segmentation (trivial, deterministic, time-invariant) and word/sentence segmentation (difficult, locale-dependent, and time-dependent)","msgtype":"m.text"},"ts":1586295094000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah :-/","msgtype":"m.text"},"ts":1586295230000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"regex \\p is a good point though, I wonder whether XS would opt out of that too","msgtype":"m.text"},"ts":1586295261000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I mean, they are currently opting out, but the question is would they ever change that)","msgtype":"m.text"},"ts":1586295485000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in the fullness of time, they'd have to implement anything that wasn't normative optional, no?","msgtype":"m.text"},"ts":1586295577000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in theory, though I feel like that's kind of a new concept in 262 outside of Annex B?","msgtype":"m.text"},"ts":1586295660000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well, function toString returning source is normative optional via the host hook :-p","msgtype":"m.text"},"ts":1586295696000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess I just mean that that phrase occurs in 402 but not in 262 at present","msgtype":"m.text"},"ts":1586295762000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh, sure","msgtype":"m.text"},"ts":1586295826000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i doubt they'd be able to get away with not implementing regex `\\p` and still be 262-compliant","msgtype":"m.text"},"ts":1586295851000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"certainly, but they consciously ship with caveats: https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat","msgtype":"m.text"},"ts":1586295997000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: backing up a step, I feel like grapheme segmentation is a thing I am unlikely to care about on platforms which lack Intl; is there a specific reason you care about having it on non-Intl platforms?","msgtype":"m.text"},"ts":1586297209000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't feel like i can rely on Intl in any of my code, because i want my code to be as portable as possible. i don't have a concrete use case for this right now, it's not a proposal :-) just asking out loud","msgtype":"m.text"},"ts":1586297510000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's a worthy discussion, but I'm not sure a portability argument holds water, if the places where it wouldn't work (in the long-term) are just memory-constrained places like microcontrollers","msgtype":"m.text"},"ts":1586298032000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't think other engines are opting out so much as deprioritizing it?","msgtype":"m.text"},"ts":1586298048000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(btw I'm removing JSC's ENABLE_INTL define as we speak 😉)","msgtype":"m.text"},"ts":1586298096000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"removing it so it's always on?","msgtype":"m.text"},"ts":1586298649000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"removing it so its always off","msgtype":"m.text"},"ts":1586298665000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sad trombone noises","msgtype":"m.text"},"ts":1586298676000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"on!","msgtype":"m.text"},"ts":1586298689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"happy trumpet noises","msgtype":"m.text"},"ts":1586298696000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wherefore this disinformation","msgtype":"m.text"},"ts":1586298698000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1586298702000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"now if we can just convince v8 to always ship intl","msgtype":"m.text"},"ts":1586298716000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gonna assume the Intl object exists and then we can just runtime-guard new classes","msgtype":"m.text"},"ts":1586298724000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(there was only one upstream platform flipping it off, is why this should be okay to simply do as maintenance)","msgtype":"m.text"},"ts":1586298770000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]