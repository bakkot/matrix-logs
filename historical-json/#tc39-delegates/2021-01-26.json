[
{"content":{"body":"Somewhat offtopic, but if there are any NodeJS implementers present that are familiar with Node's support for the W3C Web Performance APIs, can they reach out to me either via IRC or email?","msgtype":"m.text"},"ts":1611626966000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: sup","msgtype":"m.text"},"ts":1611636003000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: On Node.js Web APIs, are you in touch with James Snell or Matteo Collina? They're doing a lot of implementation these days. I can put you in touch by email if you want.","msgtype":"m.text"},"ts":1611682833000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I love everything about this proposal","msgtype":"m.text"},"ts":1611684518000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yep format*ToParts is universally great","msgtype":"m.text"},"ts":1611684655000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"editing is still intense, wow","msgtype":"m.text"},"ts":1611684692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the delay is large enough that it's easy to forget what was said by the time the mistake appears","msgtype":"m.text"},"ts":1611684713000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"resizable arraybuffers are good","msgtype":"m.text"},"ts":1611684733000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling yeah :(","msgtype":"m.text"},"ts":1611684737000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"littledan: that would help. We switched TS to leveraging the WC3 perf API for some performance monitoring in the TypeScript compiler and have run into cases where using perf_hooks is 20x slower than what we were doing before.","msgtype":"m.text"},"ts":1611684756000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"a bit of that is introduced by me for dumb technical reasons","msgtype":"m.text"},"ts":1611684756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling I kind of want to look into putting teams on a one-second lag while I'm taking notes","msgtype":"m.text"},"ts":1611684770000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ahh yeah","msgtype":"m.text"},"ts":1611684780000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: i'm curious how that performs if you use node >=15 with `--turbo-fast-api-calls`","msgtype":"m.text"},"ts":1611684790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: Oh, I see. BTW you can find more information about people and discussions in this area at https://github.com/nodejs/diagnostics","msgtype":"m.text"},"ts":1611685216000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"qard is also working on improving tracing api performance","msgtype":"m.text"},"ts":1611685260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek, littledan thanks!","msgtype":"m.text"},"ts":1611685262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rkirsling are you still taking notes?","msgtype":"m.text"},"ts":1611685639000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I've been doing it but want to tweak the bot","msgtype":"m.text"},"ts":1611685643000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and it'll get behind if I step away","msgtype":"m.text"},"ts":1611685649000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I think my eyes are not strong enough to keep up with something like this","msgtype":"m.text"},"ts":1611685684000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"kk, not to worry","msgtype":"m.text"},"ts":1611685690000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm struggling with them daily as it is but this feels more intense than your average competitive video game","msgtype":"m.text"},"ts":1611685783000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like I feel mildly sick from 20 minutes of it","msgtype":"m.text"},"ts":1611685884000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"general newbie question for this topic: does this make page size observable? maybe it already is from wasm?","msgtype":"m.text"},"ts":1611685927000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"are these slides published anywhere? i see other people looking at it but its not on the agenda or in the notes?","msgtype":"m.text"},"ts":1611685956000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: they're in the agenda?","msgtype":"m.text"},"ts":1611686106000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://docs.google.com/presentation/d/1lkDe1j1LcX8fg4KeLRKEeBG6VF0ffBz4Q_kA130V_aQ/edit?usp=sharing","msgtype":"m.text"},"ts":1611686112000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mark is current winner for person-who-bot-likes-best","msgtype":"m.text"},"ts":1611686115000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, i didn't refresh recently","msgtype":"m.text"},"ts":1611686132000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"can someone fixup peter's acronym in the notes","msgtype":"m.text"},"ts":1611686556000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't have time to look it up","msgtype":"m.text"},"ts":1611686559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: PHE","msgtype":"m.text"},"ts":1611686661000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: on it","msgtype":"m.text"},"ts":1611686662000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nvm","msgtype":"m.text"},"ts":1611686665000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"already got it ljharb ;-)","msgtype":"m.text"},"ts":1611686676000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"delegate shorthands are listed in https://github.com/tc39/notes/blob/master/delegates.txt FYI","msgtype":"m.text"},"ts":1611686750000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's good to keep that handy when on note-taking duty","msgtype":"m.text"},"ts":1611686765000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"queue needs to be advanced","msgtype":"m.text"},"ts":1611687065000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fwiw a ton of my packages have a necessary use of `Function` in their dep graph, so while getting rid of `eval` seems achievable, getting rid of `Function` seems significantly less so.","msgtype":"m.text"},"ts":1611687191000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i see that a lot too","msgtype":"m.text"},"ts":1611687250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, this is also related with his presentation yesterday. the fact that when using anything from someone else, having a global setting is not going to work. make it work usually wins over security issues unfortunately!","msgtype":"m.text"},"ts":1611687307000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"what is the necessary use of Function?","msgtype":"m.text"},"ts":1611687313000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the d3-dsv readme just states that it's `(safe) use of dynamic code generation for fast parsing`","msgtype":"m.text"},"ts":1611687355000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: objects only reachable from syntax - ie, AsyncFunction, GeneratorFunction, AsyncGeneratorFunction, etc.","msgtype":"m.text"},"ts":1611687396000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bot writes \"eval\" as \"evil\" like 80% of the time","msgtype":"m.text"},"ts":1611687401000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling: iow by making them \"not globals\", a significant percentage of the web ends up having use of `Function` ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1611687415000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: where's the error tho","msgtype":"m.text"},"ts":1611687423000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I see...","msgtype":"m.text"},"ts":1611687430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i've had to make some big overhauls to the schedule, please lmk if you see any misses or conflicts","msgtype":"m.text"},"ts":1611687778000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"note takers: the shorthand for the current speaker is KOT, not KKL","msgtype":"m.text"},"ts":1611688099000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oops, I probably did that all day yesterday too","msgtype":"m.text"},"ts":1611688125000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they're adjacent in delegates.txt","msgtype":"m.text"},"ts":1611688129000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nope, it's correct yesterday","msgtype":"m.text"},"ts":1611688186000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"so if d3 can create a trusted types thing","msgtype":"m.text"},"ts":1611688315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what stops some other random evil thing from creating a trusted types thing","msgtype":"m.text"},"ts":1611688332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek if you can create a policy you can already run arbitrary code","msgtype":"m.text"},"ts":1611688347000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is the assumption","msgtype":"m.text"},"ts":1611688350000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh does the policy say \"the d3 url\" can create trusted types?","msgtype":"m.text"},"ts":1611688373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1611688390000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess i'm confused about the scoping of this","msgtype":"m.text"},"ts":1611688393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"am taking notes thoug hsorry","msgtype":"m.text"},"ts":1611688394000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no worries","msgtype":"m.text"},"ts":1611688401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I feel the current concerns should be pre-stage 2, not post-stage 2","msgtype":"m.text"},"ts":1611688953000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1611688963000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I get the same impression","msgtype":"m.text"},"ts":1611688966000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1611688967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am slightly sympathetic to Caridy's argument (which seems valid to hold Stage 2 for), but completely disagree with several of Mark's points.","msgtype":"m.text"},"ts":1611688977000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't think these should be thought about as the same point","msgtype":"m.text"},"ts":1611688986000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"since they deal with \"should this be in the language\", that seems decidedly pre-stage-2 to me","msgtype":"m.text"},"ts":1611688989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm actually fine w/ stage 2 but think it needs a fair amount of modification","msgtype":"m.text"},"ts":1611688998000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the queue kkotowicz https://snaps.akibraun.com/588t7.jpg","msgtype":"m.text"},"ts":1611689047000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"thanks aki","msgtype":"m.text"},"ts":1611689114000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"this item is 30mins (not 60 mins as tcq indicates)","msgtype":"m.text"},"ts":1611689126000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"am I supposed to be seeing slides?","msgtype":"m.text"},"ts":1611689163000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1611689170000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"woah selfhosted screenshots","msgtype":"m.text"},"ts":1611689171000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: Monosnap + AWS S3 + CloudFront","msgtype":"m.text"},"ts":1611689196000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i host my screenshots on s3 as well","msgtype":"m.text"},"ts":1611689203000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1611689208000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"there's some bug where they don't charge me for s3 usage","msgtype":"m.text"},"ts":1611689213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i don't intend to tell them","msgtype":"m.text"},"ts":1611689217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bezos covers your s3 bill with his pocket lint","msgtype":"m.text"},"ts":1611689234000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i got real upset when Evernote bought and ruined Skitch in 2012 so I decided never again and set up the above.","msgtype":"m.text"},"ts":1611689271000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i had to add this big scary sentence to the vm docs https://gc.gy/79394277.png","msgtype":"m.text"},"ts":1611689291000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that ain't stopping people","msgtype":"m.text"},"ts":1611689388000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"XD","msgtype":"m.text"},"ts":1611689391000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it did reduce the number of issues people opened asking if vm is safe","msgtype":"m.text"},"ts":1611689405000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1611689411000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if i don't observe the exploit it doesn't exist :P","msgtype":"m.text"},"ts":1611689432000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: we have some slides that show the cycle problem somewhere around here when we tried to figure out some stuff for Loaders","msgtype":"m.text"},"ts":1611689523000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"syg there is another serious flaw with this approach","msgtype":"m.text"},"ts":1611689560000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"remind me to talk about it","msgtype":"m.text"},"ts":1611689568000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: \"this approach\" = sync message-passing?","msgtype":"m.text"},"ts":1611689701000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1611689706000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"put yourself on the queue?","msgtype":"m.text"},"ts":1611689707000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"am notes","msgtype":"m.text"},"ts":1611689711000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1611689714000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"am now on queue","msgtype":"m.text"},"ts":1611689858000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The font in TCQ needs some more weight IMHO. It's a bit hard to read sometimes","msgtype":"m.text"},"ts":1611690035000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1611690053000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I agree on the queue screen in particular","msgtype":"m.text"},"ts":1611690159000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"light font weight could be used for Agenda Item, Topic, and Speaking","msgtype":"m.text"},"ts":1611690174000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but using it for the values of those makes them harder to read","msgtype":"m.text"},"ts":1611690212000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bterlson is working on a new version","msgtype":"m.text"},"ts":1611690230000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but i guess for now we can update it to be easier to read?","msgtype":"m.text"},"ts":1611690237000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"re Bakkot's point, if \"we can fix some of it\" is ok for trusted types, why isn't it ok for realms?","msgtype":"m.text"},"ts":1611690639000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the line about \"spectre, so who cares\" is pretty frustrating","msgtype":"m.text"},"ts":1611690669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think there is the option of renaming, and that might be a good direction","msgtype":"m.text"},"ts":1611690715000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i think the highlighting of membranes as a pattern rather than an end in it self is pretty important, and I am curious about some of the discussion that has been had here so far... what that middle road is","msgtype":"m.text"},"ts":1611690760000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I would like to see the fleshed out proposal","msgtype":"m.text"},"ts":1611690775000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"honestly i'm still not 100% sure what a membrane is","msgtype":"m.text"},"ts":1611690806000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a bunch of code that isolates two sides of an object graph","msgtype":"m.text"},"ts":1611690831000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1611690851000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i've been thinking about it as telepresence","msgtype":"m.text"},"ts":1611690901000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i believe there is a wet and dry side","msgtype":"m.text"},"ts":1611690902000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"yeah i remember the wet and dry side","msgtype":"m.text"},"ts":1611690919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that was my first tc39 meeting 😅","msgtype":"m.text"},"ts":1611690935000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is the problem that we keep trying to define these \"security\" features piecemeal? Each individual piece doesn't solve a specific security issue and on their own seem to be considered a footgun. Do we need a comprehensive strategy for security boundaries and trust levels in synchronous code?","msgtype":"m.text"},"ts":1611690977000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think mark would say yes we need a comprehensive principled approach","msgtype":"m.text"},"ts":1611691022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think we should ban the word security without a qualifier","msgtype":"m.text"},"ts":1611691030000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"For example, I could see a built-in mechanism combining Proxies/Membranes, Realms, and import assertions to establish trust levels between imports and exports, such that when one module interacts with another module that it doesn't \"trust\", it goes through a membrane and isolates the other module/package.","msgtype":"m.text"},"ts":1611691079000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"bradleymeck: there is a broader strategy they're executing on","msgtype":"m.text"},"ts":1611691090000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"coop/coep","msgtype":"m.text"},"ts":1611691092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"features to nudge people to opt in to the process boundary and disabling those APIs otherwise","msgtype":"m.text"},"ts":1611691110000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm still surprised that major js engines don't support HMR better","msgtype":"m.text"},"ts":1611691211000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"especially google after all that work on dart/flutter hot reload","msgtype":"m.text"},"ts":1611691268000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just to clarify, it seems that some folks are confused, the main issue solved by the counter proposal from google is to avoid the two objects graphs to be interconnected, basically, it avoid identity discontinuity all together","msgtype":"m.text"},"ts":1611691269000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"shu: that isn't the strategy of others XD","msgtype":"m.text"},"ts":1611691305000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"isn't isTemplateObject being driven by google?","msgtype":"m.text"},"ts":1611691320000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems to be part of the identity discontinuity issue","msgtype":"m.text"},"ts":1611691336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1611691337000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it is?","msgtype":"m.text"},"ts":1611691340000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"actually i have to run for an hour, sorry will be unresponsive","msgtype":"m.text"},"ts":1611691376000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no worries","msgtype":"m.text"},"ts":1611691382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: that is only the web contingent and doesn't work for things like Node, also has a large implication of same domain model","msgtype":"m.text"},"ts":1611691555000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek the answer to your earlier question about policies (if I understand it correctly) is that policies have names, you have to put the names in the CSP header, and the names are use-once","msgtype":"m.text"},"ts":1611691764000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least this was my understanding last I checked","msgtype":"m.text"},"ts":1611691778000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so to use the d3 lib you would add \"polices: d3-csv\" to your CSP (or whatever the actual syntax is)","msgtype":"m.text"},"ts":1611691794000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and this would whitelist only d3","msgtype":"m.text"},"ts":1611691798000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1611691801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or, if some other dependency tried to use it, doing so would break d3","msgtype":"m.text"},"ts":1611691819000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am uhhhhhhhhh let me say \"somewhat skeptical\" that companies other that google will actually have the process in place to reliably go from \"added a transtive npm dependency to some component\" to \"updated their CSP\"","msgtype":"m.text"},"ts":1611691867000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but that's the theory","msgtype":"m.text"},"ts":1611691870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"doesn't that mean that it is only applied to an entire source text and doesn't do bundling issues? the slide on reasons people continue to use eval mentioned the usage of eval exactly because of bundling","msgtype":"m.text"},"ts":1611692024000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"everyone bundles at some level, even Google","msgtype":"m.text"},"ts":1611692037000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck the idea is that they would convince all the dependencies to move to a pattern of using trusted types in a way which would allow them to be used both by non-TT and TT consumers, I think","msgtype":"m.text"},"ts":1611692123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but there is also this \"default policy\" escape hatch","msgtype":"m.text"},"ts":1611692146000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which you can read about at https://w3c.github.io/webappsec-trusted-types/dist/spec/#default-policy-hdr","msgtype":"m.text"},"ts":1611692161000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: once rebased, https://github.com/tc39/ecma262/pull/1585 seems like it should be ready","msgtype":"m.text"},"ts":1611692287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: i guess? but that wouldn't have per invocation site tuning since it lacks a referrer of some kind. likely they expect every library to use a unique policy name in its source text???","msgtype":"m.text"},"ts":1611692471000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck I shouldn't speak for them, but that is what I understood","msgtype":"m.text"},"ts":1611693705000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens there's a few editorial tweaks necessary for 1585 to land, in addition to the rebase. since we want to cut 2021, it's probably easiest if the editors just take care of that, unless you / szuend object?","msgtype":"m.text"},"ts":1611694538000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"+1 to Shane's comment. We should not be designing locale data schema in plenary; there are other standards here","msgtype":"m.text"},"ts":1611695542000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the ECMA-402 calls manage to bring in more i18n experts than we get in plenary. I encourage people who want to argue out the details to join that, though more feedback here is always good","msgtype":"m.text"},"ts":1611695599000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I'm not trying to (re)design the API here, I'm trying to validate its usefulness (as presented) for JavaScript devs","msgtype":"m.text"},"ts":1611695860000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"OK, that's legit, sorry for my comment","msgtype":"m.text"},"ts":1611695873000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think that's kind of the purpose of 402 presenting fully worked proposals ot committee","msgtype":"m.text"},"ts":1611695876000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1611695881000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"as I said, I'm not an expert and don't feel qualified to propose an alternative or even really sit at the table with the TG2 people when they do their design","msgtype":"m.text"},"ts":1611695942000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ystartsev I might kill the bot while frank is talking","msgtype":"m.text"},"ts":1611695979000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not sure it's capturing him well enough to be worth it","msgtype":"m.text"},"ts":1611695988000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thoughts?","msgtype":"m.text"},"ts":1611695989000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1611695995000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1611696002000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"its not bad though","msgtype":"m.text"},"ts":1611696032000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"\"Flying on Auntie here Yeah this one.\" brilliant","msgtype":"m.text"},"ts":1611696383000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"aunties always meddling","msgtype":"m.text"},"ts":1611696462000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://github.com/unicode-org/cldr/blob/master/common/bcp47/calendar.xml , for those following along at home","msgtype":"m.text"},"ts":1611696542000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042 thanks, I put it in the notes","msgtype":"m.text"},"ts":1611696569000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"queue needs advancing also","msgtype":"m.text"},"ts":1611696700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"all set","msgtype":"m.text"},"ts":1611696712000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It'd be great to let this presentation finish before we do any more queue items IMO","msgtype":"m.text"},"ts":1611697399000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"hey, i am kinda proud we spent a total of 7 minutes on chair elections this year","msgtype":"m.text"},"ts":1611698495000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"hmm, was the queue cleared on purpose?","msgtype":"m.text"},"ts":1611698558000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I had something on there that now seems like it's gone","msgtype":"m.text"},"ts":1611698568000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"please refresh","msgtype":"m.text"},"ts":1611698609000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i'm confused why \"understand common X\" implies \"we refuse to understand uncommon X\"","msgtype":"m.text"},"ts":1611699080000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TC39 has been following the 10-day rule for a long time, with Ecma management aware of this. We should propose bylaws changes if Ecma wants to start enforcing a 3-week period.","msgtype":"m.text"},"ts":1611700461000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"reflector thread about security TG: https://github.com/tc39/Reflector/issues/313","msgtype":"m.text"},"ts":1611700488000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"littledan: I don't think it's a concern, since we won't be actually forming until the next meeting where the chairs recommend a leadership selection process","msgtype":"m.text"},"ts":1611700517000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also do exprs creates a motivation to fix completion value bugs in engines lol","msgtype":"m.text"},"ts":1611700660000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"'cause JSC doesn't not eval `try` blocks correctly :P","msgtype":"m.text"},"ts":1611700686000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*does not","msgtype":"m.text"},"ts":1611700705000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"This example would be even more evocative if it was `const`, bc that's a *very* annoying case to do this exact thing with.","msgtype":"m.text"},"ts":1611700723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do + try is a convenient way to turn throwing APIs into predicate APIs","msgtype":"m.text"},"ts":1611700742000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"isValidJSON becomes much less awkward, for example","msgtype":"m.text"},"ts":1611700760000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"mhm","msgtype":"m.text"},"ts":1611700775000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Oooh, interesting point","msgtype":"m.text"},"ts":1611700776000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I still maintain that \"sorry, magic doesn't happen\" suffices as an explanation for the loop case","msgtype":"m.text"},"ts":1611700829000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah i'm very happy to handle comprehensions on their own, and much better, than smuggling a basic version in via do-exprs","msgtype":"m.text"},"ts":1611700870000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't understand why break/return would be controversial, i presume there's something subtle in the mechanics","msgtype":"m.text"},"ts":1611700965000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"to my ordinary-webdev eyes, it looks like something that should \"just work\"","msgtype":"m.text"},"ts":1611700980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: to mine, that would be bad code that every styleguide i influenced would aggressively ban","msgtype":"m.text"},"ts":1611701013000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't disagree with that, but that doesn't mean we should disallow them imo","msgtype":"m.text"},"ts":1611701031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: conflating flow control with expression positions is confusing and hard to maintain, it's why the airbnb guide bans assignment in expression position, for example.","msgtype":"m.text"},"ts":1611701037000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll ask on q","msgtype":"m.text"},"ts":1611701041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"someone remind me what the completion value of a loop is?","msgtype":"m.text"},"ts":1611701133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This proposal is awesome! Let's go for it!","msgtype":"m.text"},"ts":1611701144000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"TabAtkins: without checking, i'm not sure you'd get any common answer if you polled people about that","msgtype":"m.text"},"ts":1611701175000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol def","msgtype":"m.text"},"ts":1611701180000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i *think* it's the last completion value of the last iteration tho","msgtype":"m.text"},"ts":1611701187000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll check, was just asking if someone had it at hand","msgtype":"m.text"},"ts":1611701190000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's what i presumed","msgtype":"m.text"},"ts":1611701193000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, `eval('for (var i = 0; i < 3; i++) { i; }')` produces 2","msgtype":"m.text"},"ts":1611701216000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"+1 should be legal in sloppy","msgtype":"m.text"},"ts":1611701262000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I kind of prefer it introducing a strict context actually","msgtype":"m.text"},"ts":1611701321000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's a new feature, who would want to write sloppy code inside a new feature?","msgtype":"m.text"},"ts":1611701332000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yeah i kind of like that too","msgtype":"m.text"},"ts":1611701343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"historically the pushback to that is \"refactoring hazard\", but somehow that was fine for Modules and `class`","msgtype":"m.text"},"ts":1611701362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1611701371000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(ie, `async function`, generators, etc weren't auto-strict for that reason, iirc)","msgtype":"m.text"},"ts":1611701376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that makes sense though since functions don't auto-introduce strict and they're just function variants","msgtype":"m.text"},"ts":1611701418000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this is a new kind of thing, like class","msgtype":"m.text"},"ts":1611701422000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"totally fine for those to introduce strict mode","msgtype":"m.text"},"ts":1611701434000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1611701439000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in a way, given that `async function` is a kind of `function` it makes sense that it would need to use `'use strict''` whereas `do {}`, like `class {}`, wouldn't have a directive _within_ it","msgtype":"m.text"},"ts":1611701457000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ exactly","msgtype":"m.text"},"ts":1611701471000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"so I would agree with strict-only unless we can think of a way in which it is harmful","msgtype":"m.text"},"ts":1611701478000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess I'll open an issue on the repo","msgtype":"m.text"},"ts":1611701495000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the intent seems to be introduction of a new block in expression context; silently adding strictness inside that would be quite surprising","msgtype":"m.text"},"ts":1611701589000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"i'm still sad that control flow isn't allowed","msgtype":"m.text"},"ts":1611701615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"strictness issue: https://github.com/bakkot/do-expressions-v2/issues/7","msgtype":"m.text"},"ts":1611701631000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"gibson042: how do you feel about `x = class {}` though?","msgtype":"m.text"},"ts":1611701636000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: your topic should be a reply, just saying :)","msgtype":"m.text"},"ts":1611701661000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"the scope introduced by a class expression is much more than a simple block","msgtype":"m.text"},"ts":1611701666000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"thanks, couldn't find the button","msgtype":"m.text"},"ts":1611701701000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"obligatory \"stop wanting that\"","msgtype":"m.text"},"ts":1611701756000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ +1","msgtype":"m.text"},"ts":1611701763000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"is bradford on irc","msgtype":"m.text"},"ts":1611701802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: it isn't just about \"want\" it is about expect","msgtype":"m.text"},"ts":1611701815000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah I know","msgtype":"m.text"},"ts":1611701826000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"see people coming from languages from comprehensions","msgtype":"m.text"},"ts":1611701826000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"with comprehensions*","msgtype":"m.text"},"ts":1611701835000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah, requiring an expr limits the usefulness of this a lot","msgtype":"m.text"},"ts":1611701948000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess banning loops makes banning break/continue a corollary","msgtype":"m.text"},"ts":1611702077000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't agree","msgtype":"m.text"},"ts":1611702104000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1611702108000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh god","msgtype":"m.text"},"ts":1611702109000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"noooooo","msgtype":"m.text"},"ts":1611702110000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"kill me nooooo","msgtype":"m.text"},"ts":1611702113000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no that's not true sorry","msgtype":"m.text"},"ts":1611702113000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"tab has ascended","msgtype":"m.text"},"ts":1611702114000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"ugh fuck my cam does this sometimes","msgtype":"m.text"},"ts":1611702124000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"when ur tesla coil goes off","msgtype":"m.text"},"ts":1611702126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"skip me for now","msgtype":"m.text"},"ts":1611702126000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"was that a shaver? or a taser","msgtype":"m.text"},"ts":1611702128000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"thats the sound of someone becoming one with the internet","msgtype":"m.text"},"ts":1611702137000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"teleporter","msgtype":"m.text"},"ts":1611702144000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"the start of some epic noise music","msgtype":"m.text"},"ts":1611702148000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1611702156000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"we had answers for these questions, one of which was that the loop heads don't allow break/continue in them","msgtype":"m.text"},"ts":1611702229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I feel like the question of what `return` does is an even more legitimate source of confusion than the loop thing","msgtype":"m.text"},"ts":1611702276000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the only thing i've seen is that people would expect \"return\" to be the return value of the do expression","msgtype":"m.text"},"ts":1611702326000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which seems surface level enough to not be a blocking concern","msgtype":"m.text"},"ts":1611702333000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a major point of confusion","msgtype":"m.text"},"ts":1611702357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or would be","msgtype":"m.text"},"ts":1611702361000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I thought there were people arguing for returning from the containing function","msgtype":"m.text"},"ts":1611702364000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bterlson: if we still have objections to Stage 2, I'd set this for overflow. I hope we get stage 2 in this meeting","msgtype":"m.text"},"ts":1611702368000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"rkirsling: the problem is that there's not a common intuition about what it does","msgtype":"m.text"},"ts":1611702390000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's what I'm saying","msgtype":"m.text"},"ts":1611702398000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this is an unfortunate situation :-(","msgtype":"m.text"},"ts":1611702403000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Ugh, no.","msgtype":"m.text"},"ts":1611702407000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wsdferdksl: fwiw there's a big difference between a statement that runs 0/1 times, and one that runs 0-N times, and what programmers will expect as the completion value.","msgtype":"m.text"},"ts":1611702417000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes def","msgtype":"m.text"},"ts":1611702423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I *want* to be like \"deal with it\" for the loop thing but `return` is WAY harder to argue","msgtype":"m.text"},"ts":1611702425000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i am surprised that people find return scarier than the loops","msgtype":"m.text"},"ts":1611702442000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"flow control bad","msgtype":"m.text"},"ts":1611702451000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: Yes, `return` should trigger a return from the containing function.","msgtype":"m.text"},"ts":1611702453000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think if you tell someone what a do expression is","msgtype":"m.text"},"ts":1611702476000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah so my problem is that I don't feel like either interpretation is obviously wrong","msgtype":"m.text"},"ts":1611702482000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it would be clear to them that the return wouldn't be part of it","msgtype":"m.text"},"ts":1611702490000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if someone doesn't know what a do expression is this is all moot anyway","msgtype":"m.text"},"ts":1611702501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since they wouldn't know it has anything to do with `return`","msgtype":"m.text"},"ts":1611702518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, having the ability to early-\"return\" from a do-expr makes sense, but finagling that separately from returning from the outer context is a bunch of work and you might as well just IIFE then","msgtype":"m.text"},"ts":1611702535000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since `do` is a new syntactic construct, perhaps we could introduce a keyword for explicitly exiting a `do` block with a value, rather than implicitly relying on completion values","msgtype":"m.text"},"ts":1611702537000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"and when there's multiple intuitive solutions, banning it is both a thing we've done before, and a reasonably approach","msgtype":"m.text"},"ts":1611702538000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"alas :(","msgtype":"m.text"},"ts":1611702544000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton that's been proposed multiple times and fairly resoundingly rejected; I at least am not interested in trying to pick it up again","msgtype":"m.text"},"ts":1611702564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: keep going!","msgtype":"m.text"},"ts":1611702585000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm surprised that people think returning early from a do expression makes sense","msgtype":"m.text"},"ts":1611702585000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: less about returning early, more about making it explicit what the result value is.","msgtype":"m.text"},"ts":1611702617000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"is it a block in an \"everything's an expression language\"? or is it IIFE-like?","msgtype":"m.text"},"ts":1611702640000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"If the result value was explicitly defined, then there'd be no confusion about `for`/`while`/etc.","msgtype":"m.text"},"ts":1611702645000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"both views can hold for most purposes","msgtype":"m.text"},"ts":1611702657000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"therefore both views will exist among the masses","msgtype":"m.text"},"ts":1611702668000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean with rust, which has expression blocks, i've never seen a single person be confused about it","msgtype":"m.text"},"ts":1611702676000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i remain of the opinion that while early returns from the outer function are useful in obvious places, risks run high of understandability of either figuring out what it should do in the positions where it is currently impossible, or how to best ban them","msgtype":"m.text"},"ts":1611702681000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and it's not like a different mental model from js or smth","msgtype":"m.text"},"ts":1611702684000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: i think in ruby, a block's last completion value is what the block is, but `return` returns from the containing function? it's been awhile tho","msgtype":"m.text"},"ts":1611702689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: it's not confusing in Rust","msgtype":"m.text"},"ts":1611702689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it is a fundamental construct","msgtype":"m.text"},"ts":1611702697000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i imagine rust syntax was designed from ground up to have a more meaningful statement vs expression distinction","msgtype":"m.text"},"ts":1611702711000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1611702716000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it would even be the same syntax if we didn't have object literals","msgtype":"m.text"},"ts":1611702718000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we have an... accreted such understanding of the distinction in JS","msgtype":"m.text"},"ts":1611702723000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"The slides didn't describe `yield`, just that `await` is deferred until `async do` is a thing...","msgtype":"m.text"},"ts":1611702735000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: I'm not sure that object literals are relevant though?","msgtype":"m.text"},"ts":1611702738000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but not like JS statement-vs-expr distinction was designed with principles","msgtype":"m.text"},"ts":1611702749000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no i'm just confused why rust is being dismissed as prior art","msgtype":"m.text"},"ts":1611702753000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems identical to this","msgtype":"m.text"},"ts":1611702759000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because it is not actually prior art","msgtype":"m.text"},"ts":1611702762000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the question is about the default behavior of statements in a language","msgtype":"m.text"},"ts":1611702763000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we are prior art","msgtype":"m.text"},"ts":1611702766000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"its prior art on being useful","msgtype":"m.text"},"ts":1611702790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, this is sandboxed \"everything's an expression\"","msgtype":"m.text"},"ts":1611702797000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"nm, confusion about `async do`. `await` was called out as supported in `do {}`, but `yield` wasn't (though I assume it would be as well, if the outer context was `+Yield`).","msgtype":"m.text"},"ts":1611702809000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rkirsling: i don't know what you mean","msgtype":"m.text"},"ts":1611702831000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean I've said it to you personally in every conversation about this","msgtype":"m.text"},"ts":1611702849000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton yeah, see readme: https://github.com/bakkot/do-expressions-v2#awaityield","msgtype":"m.text"},"ts":1611702858000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no i mean i literally don't know what you're saying","msgtype":"m.text"},"ts":1611702862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Rust isn't confusing because there's nothing to be confused by in an everything's-an-expression language","msgtype":"m.text"},"ts":1611702866000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm saying no one has ever been confused by returns inside blocks inside expression positions","msgtype":"m.text"},"ts":1611702898000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot:  some stuff might be testable via a usability study","msgtype":"m.text"},"ts":1611702906000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"but when you're adding that behavior on *top* of a language's norms then people can find justification for different interpretations","msgtype":"m.text"},"ts":1611702917000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if that sounds interesting i can raise it with the research group? it would be a nice topic for us","msgtype":"m.text"},"ts":1611702920000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and i guess you're saying rust is so fundamentally different from js that it doesn't count?","msgtype":"m.text"},"ts":1611702921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't agree with that","msgtype":"m.text"},"ts":1611702928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`yield` not implying `return` makes sense from the code-review standpoint (we expect `yield` to be resumed from; if it doesn't, that's a massive code smell on its own), but at least it assures me that there's nothing technical about `return` being hard (unlike `break`/`continue`)","msgtype":"m.text"},"ts":1611702952000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ystartsev I think in this particular case a usability study wouldn't help with anything","msgtype":"m.text"},"ts":1611702953000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't mean it doesn't count","msgtype":"m.text"},"ts":1611702957000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's just that if we're gonna worry about loop behavior, which I do not consider confusing within the context of JS","msgtype":"m.text"},"ts":1611702986000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well, let me know if we can help -- it would allow testing out some intuitions people might have about how people would approach these things","msgtype":"m.text"},"ts":1611702991000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"If we allow `const x = y ?? do { return; }`, why wouldn't we just allow `const x = y ?? return;` (following the \"everthing's an expression\" concept). We investigated this when we were discussing throw expressions.","msgtype":"m.text"},"ts":1611702994000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"then `return` is obviously a *greater* concern than that","msgtype":"m.text"},"ts":1611702999000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"because there are justifications for both views within the context of JS norms","msgtype":"m.text"},"ts":1611703021000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: I mean, sure, but that's neither here nor there. return-exprs don't seem too wild to me, but neither is there a big request for them","msgtype":"m.text"},"ts":1611703049000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"vs the more complex code flow we implicitly expect in a do-expr, which I *do* think I'll end up wanting to put early-returns into","msgtype":"m.text"},"ts":1611703069000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"rkirsling: i also don't see the connection between the loops and this","msgtype":"m.text"},"ts":1611703072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"There was back when I first introduced `throw` expressions, at least from the committee's side.","msgtype":"m.text"},"ts":1611703100000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"In the context of throw-exprs, return-exprs seem like a natural extension, sure","msgtype":"m.text"},"ts":1611703123000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek: they are the controversial topics","msgtype":"m.text"},"ts":1611703131000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"But this is a different context. ^_^","msgtype":"m.text"},"ts":1611703132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"rkirsling: yeah it just seems to me that the controversy of the control flow is mostly coming from people who won't look at languages with block expressions as evidence that this isn't confusing","msgtype":"m.text"},"ts":1611703191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The biggest issue with `throw` expressions was that `do` was possibly going to be a thing, and that they'd have to be in `Expression`, so things like `const x = throw a, b = c` would be illegal, since `throw a, b = c` has a meaning as a staetment (i.e., you'd need to write `const x = (throw a, b = c)` or `const x = (throw a), b = c`).","msgtype":"m.text"},"ts":1611703280000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Ok thinking about the break/continue case, I can definitely see how something like `while(...) { for(var i = 0; i < do { continue; }; i++) { ... } }` is confusing - I don't know whether I'd expect it to continue the `while` or the `for`","msgtype":"m.text"},"ts":1611703300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i don't think break/continue should be allowed in loop heads","msgtype":"m.text"},"ts":1611703317000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I've used such languages a fair bit and I agree with rkirsling that they are not that strong of evidence","msgtype":"m.text"},"ts":1611703320000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that even lead me to propose `ParenthesizedExpression: ( Statement )` on the `do` proposal issue tracker.","msgtype":"m.text"},"ts":1611703326000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"like i wouldn't even put the restriction on do expressions","msgtype":"m.text"},"ts":1611703329000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd put it on the entirety of the head","msgtype":"m.text"},"ts":1611703334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, just having a restriction against their use in loop heads works for me, it's just another special-case restriction to learn. probably reasonable tho, imo.","msgtype":"m.text"},"ts":1611703347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"on an interesting note, back when v8 had do expressions because they used them internally, if you put break/continue in loop heads it would segfault","msgtype":"m.text"},"ts":1611703398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: yeah but like *why*","msgtype":"m.text"},"ts":1611703447000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean i can see why you might say using haskell or something is not a great comparison to how js people would approach it","msgtype":"m.text"},"ts":1611703477000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but these are not niche fp languages","msgtype":"m.text"},"ts":1611703488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because in languages in which everything is an expression you are not surprised when you can return in expression context, and this is not true for languages where not everything is an expression","msgtype":"m.text"},"ts":1611703492000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like I just don't agree that you can generalize from rust to js","msgtype":"m.text"},"ts":1611703508000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what does \"surprised\" mean","msgtype":"m.text"},"ts":1611703528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or scala to js or whatever","msgtype":"m.text"},"ts":1611703531000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they are different styles of programmnig","msgtype":"m.text"},"ts":1611703532000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek in this context, it mostly means \"likely to miss or misunderstand what the code does when reading it\"","msgtype":"m.text"},"ts":1611703581000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not about niche-ness","msgtype":"m.text"},"ts":1611703594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'd actually be surprised if most people who use rust know that return is an expression","msgtype":"m.text"},"ts":1611703678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway I am not entirely sure what to do here","msgtype":"m.text"},"ts":1611703774000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"same...","msgtype":"m.text"},"ts":1611703783000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've heard from people that they are not willing to advance this if it allows return/break","msgtype":"m.text"},"ts":1611703796000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and wsdferdksl says he is not willing to advance without","msgtype":"m.text"},"ts":1611703808000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so","msgtype":"m.text"},"ts":1611703809000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb is in the former camp right?","msgtype":"m.text"},"ts":1611703824000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so then we have a standstill?","msgtype":"m.text"},"ts":1611703842000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't understand why it would be necessary initially","msgtype":"m.text"},"ts":1611703860000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems like","msgtype":"m.text"},"ts":1611703863000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"really vexing seeing how pattern matching is depending on this","msgtype":"m.text"},"ts":1611703932000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think pattern matching depends on the consensus around how the completions are handled, not the literal do expression?","msgtype":"m.text"},"ts":1611703977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and stuff like if loops/returns/etc are allowed","msgtype":"m.text"},"ts":1611703991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb is opposed to any return?","msgtype":"m.text"},"ts":1611704188000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if i were a more assertive i'd probably block on the lack of return","msgtype":"m.text"},"ts":1611704265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and you would ban do expressions in loop heads?","msgtype":"m.text"},"ts":1611704288000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no i would ban break/continue in loop heads","msgtype":"m.text"},"ts":1611704302000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think allowing `return` is a big problem, yes","msgtype":"m.text"},"ts":1611704306000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ok","msgtype":"m.text"},"ts":1611704325000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's very confusing; people won't universally intuit whether it returns from the containing function or from just the do expression, and allowing flow control to change in more places makes understanding the language harder, especially in the edge cases.","msgtype":"m.text"},"ts":1611704344000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: and you are also opposed to the \"conservative MVP, relax later if demand arises\" plan, like waldemar?","msgtype":"m.text"},"ts":1611704386000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i do agree that it could be added later if it ended up being a sticking point, but the value of do expression for me doesn't include return/break/continue, or loop completion values.","msgtype":"m.text"},"ts":1611704402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: i don't enjoy that type of plan but to be clear i'm not blocking here","msgtype":"m.text"},"ts":1611704417000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1611704426000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(also, for me, \"exactly replaces IIFEs\" is definitely more than enough to warrant its syntactic weight, but i recognize everyone doesn't agree with that)","msgtype":"m.text"},"ts":1611704550000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think at the very least, the limitation makes it more difficult to refactor code because you have to start refactoring control flow in addition to value flow","msgtype":"m.text"},"ts":1611704578000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean","msgtype":"m.text"},"ts":1611704674000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: do you have some examples? my suspicion is that such a refactor would make the code much clearer","msgtype":"m.text"},"ts":1611704676000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"meaning, it'd be an improvement even without do expressions","msgtype":"m.text"},"ts":1611704684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"1s","msgtype":"m.text"},"ts":1611704688000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1611704690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sometimes you explicit *don't* want to let people use a thing as a drop-in replacement","msgtype":"m.text"},"ts":1611704694000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm not saying that's for sure the case here but","msgtype":"m.text"},"ts":1611704704000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that is a valid stance for a proposal to take","msgtype":"m.text"},"ts":1611704712000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*explicitly","msgtype":"m.text"},"ts":1611704719000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"just thinking, y'know, maybe it's a good thing that you don't have a subcommunity arise that's all","msgtype":"m.text"},"ts":1611704763000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"protip: wrap your modules in do {}\"","msgtype":"m.text"},"ts":1611704774000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: https://gist.github.com/devsnek/4ca441da666caa9eff80877a97e858dc","msgtype":"m.text"},"ts":1611704779000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is quix the nestle version of quux","msgtype":"m.text"},"ts":1611704845000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: i mean, i'd model that as `const x = do { /* foo/bar/baz */ }; if (x) { doSomethingWith(x); } else { return quix; }`, but it's tricky to talk about contrived examples","msgtype":"m.text"},"ts":1611704850000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i feel like that code, albeit with more realistic conditions, exists exactly as written in lots of code bases","msgtype":"m.text"},"ts":1611704877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and your refactoring moves the domain of x to include the control flow","msgtype":"m.text"},"ts":1611704899000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the refactoring, it separates \"pick a value, and process it\" from \"return a value\"","msgtype":"m.text"},"ts":1611704932000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's subjective ofc, but that seems cleaner to me","msgtype":"m.text"},"ts":1611704948000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean like, what if `x` could be zero","msgtype":"m.text"},"ts":1611704958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or what if x could be null","msgtype":"m.text"},"ts":1611704964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or what if x could be undefined","msgtype":"m.text"},"ts":1611704967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so let's say `x` can be any value, since the others have obvious answers:","msgtype":"m.text"},"ts":1611704983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the point is that i now have to think about that or just not take advantage of an otherwise useful feature","msgtype":"m.text"},"ts":1611704997000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually yeah for this example where the context isn't present, i'm not sure what i'd do","msgtype":"m.text"},"ts":1611705015000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think \"don't use do expressions\" is a valid answer","msgtype":"m.text"},"ts":1611705029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the do expression refactoring you *want* there isn't really an improvement","msgtype":"m.text"},"ts":1611705032000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it just makes me sad","msgtype":"m.text"},"ts":1611705033000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, me toop","msgtype":"m.text"},"ts":1611705034000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i think you shouldn't use them there anyways","msgtype":"m.text"},"ts":1611705038000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because it isn't adding clarity. it's just making a series of statements *also* have the implications of expression position.","msgtype":"m.text"},"ts":1611705055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think the code would be clearer with and even be idiomatic with do expressions and return","msgtype":"m.text"},"ts":1611705155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least based on how people use this functionality in other languages","msgtype":"m.text"},"ts":1611705164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure one can reliably draw conclusions about idioms in JS from idioms in other languages, but i think i understand your point","msgtype":"m.text"},"ts":1611705201000,"senderName":"ljharb","senderId":"ljharb@irc"}
]