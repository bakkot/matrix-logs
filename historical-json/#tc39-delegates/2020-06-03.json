[
{"content":{"body":"i was writing a logical assignment test in C++ and tripped C++ trigraph warnings for ??","msgtype":"m.text"},"ts":1591146083000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1591146119000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if i had known at the time of proposing nullish, who knows what my opinion would've been","msgtype":"m.text"},"ts":1591146121000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu i actually ran into the same thing 🤣","msgtype":"m.text"},"ts":1591146595000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: beset by legacy features no matter where we work","msgtype":"m.text"},"ts":1591146736000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"😭","msgtype":"m.text"},"ts":1591146743000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"we should add trigraphs to js","msgtype":"m.text"},"ts":1591148530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"by which I mean the c ones","msgtype":"m.text"},"ts":1591148587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu i don't think the test262 tests for `AggregateError.prototype.errors` has been removed","msgtype":"m.text"},"ts":1591148638000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"oh wait i just found the PR","msgtype":"m.text"},"ts":1591148663000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"sorry 😅","msgtype":"m.text"},"ts":1591148667000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"oh what was the conclusion on that","msgtype":"m.text"},"ts":1591148674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it should be an own property instead of a prototype accessor","msgtype":"m.text"},"ts":1591148707000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"im trying to change this in JSC right now <https://webkit.org/b/212677>","msgtype":"m.text"},"ts":1591148718000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1591148726000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"damn, Yusuke reviewed it before I even knew it existed","msgtype":"m.text"},"ts":1591148843000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1591148845000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling i asked him :P","msgtype":"m.text"},"ts":1591148937000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"rkirsling also, i think i have a fix for the `foo ??= function() {}` change :)","msgtype":"m.text"},"ts":1591148954000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"yeah I'm teasin', I know he reviewed the original (and gave lots of comments I wouldn't've been equipped to give)","msgtype":"m.text"},"ts":1591148981000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"was it decided that it should get the name","msgtype":"m.text"},"ts":1591149072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591149105000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"woo","msgtype":"m.text"},"ts":1591149150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think by saying \"woo\" now you just expressed the most energetic sentiment there","msgtype":"m.text"},"ts":1591149176000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"people seemed to be pretty meh on the whole whether agreeing or disagreeing 😅","msgtype":"m.text"},"ts":1591149209000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i genuinely could go either way on this lol","msgtype":"m.text"},"ts":1591149268000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"yikes. guess it's good we switched away? https://twitter.com/NicoAGrant/status/1268020841054269440","msgtype":"m.text"},"ts":1591161780000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"personally i'd prefer name inference not exist, but i'm a -0 on adding it in new places","msgtype":"m.text"},"ts":1591162737000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i mean, that kind of presumes microsoft and google don't cooperate with law enforcement","msgtype":"m.text"},"ts":1591162764000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"perhaps","msgtype":"m.text"},"ts":1591162826000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"just seemed poorly put","msgtype":"m.text"},"ts":1591162829000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well sure, zoom is a garbage company. but their product is miles ahead of everyone else, and there's sadly not many companies that don't cooperate with law enforcement; we just don't hear about most of them.","msgtype":"m.text"},"ts":1591162878000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(also we'd be using a premium zoom account if we used it)","msgtype":"m.text"},"ts":1591162889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fair enough...","msgtype":"m.text"},"ts":1591162965000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm very excited about the extensibility of module attributes","msgtype":"m.text"},"ts":1591197075000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"has Chrome expressed a position on module attributes?","msgtype":"m.text"},"ts":1591197167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I feel like someone from the chrome team was opposed to them","msgtype":"m.text"},"ts":1591197173000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"domenic, maybe","msgtype":"m.text"},"ts":1591197180000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra: the syntactic extensibility, or the host-carte-blanche extensibility?","msgtype":"m.text"},"ts":1591197181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: syntactic","msgtype":"m.text"},"ts":1591197191000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"gotcha, thanks","msgtype":"m.text"},"ts":1591197195000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think littledan is missing the biggest reason why these must be in-band: import-site-specific metadata vs resource-specific metadata","msgtype":"m.text"},"ts":1591197229000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm confused; the queue item says \"for stage 2\" but the slide intro said \"status update\". is this proposal seeking advancement today?","msgtype":"m.text"},"ts":1591197247000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I'm sure littledan will clarify that for us shortly","msgtype":"m.text"},"ts":1591197266000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1591197269000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh I should stop mentioning his name while he's presenting, sorry Daniel!","msgtype":"m.text"},"ts":1591197288000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: i am for the most part for them","msgtype":"m.text"},"ts":1591197296000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu neat, thanks","msgtype":"m.text"},"ts":1591197403000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: this is a bottleneck for non-JS assets for web apps","msgtype":"m.text"},"ts":1591197438000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not for wasm tho?","msgtype":"m.text"},"ts":1591197456000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: and given that i've been convinced that non-syntax alternatives are strictly technically worse, i'd prefer this get through","msgtype":"m.text"},"ts":1591197461000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, also for wasm?","msgtype":"m.text"},"ts":1591197464000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean, it affects wasm","msgtype":"m.text"},"ts":1591197471000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hm, can you help me understand that?","msgtype":"m.text"},"ts":1591197472000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't understand what your question is","msgtype":"m.text"},"ts":1591197477000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right but i mean, the motivating concerns don't apply to importing wasm, as i understand them","msgtype":"m.text"},"ts":1591197482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"only to non-code assets","msgtype":"m.text"},"ts":1591197486000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(json, css, html)","msgtype":"m.text"},"ts":1591197495000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's not how i understand it","msgtype":"m.text"},"ts":1591197526000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what's your understanding? :-)","msgtype":"m.text"},"ts":1591197553000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the original motivating security concern from apple included both \"noexecute\" and \"wrong parser\"","msgtype":"m.text"},"ts":1591197572000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wasm falls in \"wrong parser\"","msgtype":"m.text"},"ts":1591197585000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the function does run differently depending on how you call it","msgtype":"m.text"},"ts":1591197666000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"wrong parser\" can be solved without syntax tho on the web - it can use headers","msgtype":"m.text"},"ts":1591197693000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why did my question disappear from the queue? Was it inappropriate in some way?","msgtype":"m.text"},"ts":1591197919000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"brad4d: hm, i never saw yours on there","msgtype":"m.text"},"ts":1591197934000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"brad4d: reload the page?","msgtype":"m.text"},"ts":1591197942000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"weird, refresh brings it back, thx","msgtype":"m.text"},"ts":1591197961000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"brad4d: sometimes the tcq is buggy","msgtype":"m.text"},"ts":1591197969000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ah lol yes i see it now that i refresh too","msgtype":"m.text"},"ts":1591197995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Or, sometimes 2 people click \"delete\" on the same row at the time time","msgtype":"m.text"},"ts":1591197996000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i have done that before","msgtype":"m.text"},"ts":1591198383000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"do you mean both click delete on their own item at the same time?","msgtype":"m.text"},"ts":1591198432000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"'cause I don't think anybody can delete anybody else's","msgtype":"m.text"},"ts":1591198445000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean as a chair","msgtype":"m.text"},"ts":1591198558000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"or like someone clicks \"i'm done speaking\" at the exact same time as i click \"next speaker\" bc i think they forgot and they did forget _until that exact moment_","msgtype":"m.text"},"ts":1591198604000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i did click \"done speaking\" on myself","msgtype":"m.text"},"ts":1591198631000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"robpalme: i'm still on the queue (i had 2), and if you refresh you may see that i'm \"speaking\" right now :-) but i can go after bradley","msgtype":"m.text"},"ts":1591198719000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"msaboff: you can't try/catch imports","msgtype":"m.text"},"ts":1591199089000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I know","msgtype":"m.text"},"ts":1591199101000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I have the same concerns about ignored vs rejected unknown attributes, but I also think it wouldn't kill this proposal either way; if it ends up being a problem, those attributes just unfortunately won't be added","msgtype":"m.text"},"ts":1591199630000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: to answer your question on here","msgtype":"m.text"},"ts":1591199698000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: i think the pressure to align isn't going to prevent aligning on a strictly worse solution, like a DSL inside module specifier","msgtype":"m.text"},"ts":1591199733000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"How would an envaluator work if you have two imports with different evaluators do you get different modules?","msgtype":"m.text"},"ts":1591199802000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Because that would be wild","msgtype":"m.text"},"ts":1591199825000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I agree with Shu, they will just do something worse for the other attributes","msgtype":"m.text"},"ts":1591199837000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu: out-of-band is also a viable option","msgtype":"m.text"},"ts":1591199851000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i do not have the energy to be the middle man currently for this entire space","msgtype":"m.text"},"ts":1591199876000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1591199880000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"timebox, y'all. i'm about to start snapping like an impatient suburban mom","msgtype":"m.text"},"ts":1591199887000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose: this is an important proposal","msgtype":"m.text"},"ts":1591199893000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i believe extension is worth while","msgtype":"m.text"},"ts":1591199905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes it is. and so are all the other things on the schedule.","msgtype":"m.text"},"ts":1591199915000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"no, i believe this is more important than other things on the schedule","msgtype":"m.text"},"ts":1591199926000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"cool down period and come back to this topic?","msgtype":"m.text"},"ts":1591199938000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: Limit the allowed keys of the `with { }` to just the one we care about for now?","msgtype":"m.text"},"ts":1591199940000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"@bterlson akirose robpalme  MylesBorins ?","msgtype":"m.text"},"ts":1591199950000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"rbuckton: which is just \"type\", yes, i'd be happy with that for now","msgtype":"m.text"},"ts":1591199953000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I agree with Shu, can we take a break and come back to this later or tomorrow?","msgtype":"m.text"},"ts":1591199957000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ditto","msgtype":"m.text"},"ts":1591199968000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that's fine","msgtype":"m.text"},"ts":1591199978000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"littledan please include me in the offline module attributes discussion","msgtype":"m.text"},"ts":1591200003000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I also encourage people to choose less restrictive timeboxes for time sensitive proposals like this","msgtype":"m.text"},"ts":1591200077000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sorry aboutthat","msgtype":"m.text"},"ts":1591200085000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I guess we can start this offline discussion during lunch","msgtype":"m.text"},"ts":1591200120000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Great example of something to do in the hallway track","msgtype":"m.text"},"ts":1591200179000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"littledan: i'll need 10m to make lunch but will hop in after that","msgtype":"m.text"},"ts":1591200207000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"OK good","msgtype":"m.text"},"ts":1591200212000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm in favor of shorter timeboxes to identify conflicts, followed by hallway track to resolve those conflicts out of band","msgtype":"m.text"},"ts":1591200221000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Since we are over-subscribed this meeting and I'm still hoping we can get to Intl.Segmenter, which fell off the end","msgtype":"m.text"},"ts":1591200240000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"sffc: if it's any consolation, overflow from previous meetings precede other proposal agenda items","msgtype":"m.text"},"ts":1591200565000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"though I don't necessarily agree with that ordering","msgtype":"m.text"},"ts":1591200611000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"what is the argument for BuiltInModule being preferable to just having globals","msgtype":"m.text"},"ts":1591200639000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I am about to ask that question","msgtype":"m.text"},"ts":1591200654000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wsdferdksl: you run the shimming Script first, and then later Modules are affected by it","msgtype":"m.text"},"ts":1591200668000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hasModule = name in global, import = global[name], export = global[name] = v, freezeModules = Object.freeze(global)?","msgtype":"m.text"},"ts":1591200694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Or, `import 'shim.js'; import 'main.js'`, and `shim.js` will run before imports","msgtype":"m.text"},"ts":1591200752000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Object.freeze(global) has a lot of other effects","msgtype":"m.text"},"ts":1591200761000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which you really don't want","msgtype":"m.text"},"ts":1591200765000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: some application of removing configurability and writability then","msgtype":"m.text"},"ts":1591200796000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh, maybe linking in `main.js` happens before execution of `shim.js`","msgtype":"m.text"},"ts":1591200830000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"+1 to Thomas Levy's question (not sure IRC handle)","msgtype":"m.text"},"ts":1591200846000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm not 100% sure, since this would be the first time you could muck with it","msgtype":"m.text"},"ts":1591200848000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: yeah you'd need `import 'shim.js'; await import('main.js')` i think","msgtype":"m.text"},"ts":1591200860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would be nice to hear from implementations on that last point","msgtype":"m.text"},"ts":1591200886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: just like now, where applications must always choose to freeze the env if that's what they want, they must choose to freeze builtin modules","msgtype":"m.text"},"ts":1591200889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they already have pretty reasonable accessor apis for lazy object creation","msgtype":"m.text"},"ts":1591200901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: (is how i understand it)","msgtype":"m.text"},"ts":1591200902000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"more specifically I'm wondering if this becomes the new way to begin a JS file","msgtype":"m.text"},"ts":1591200924000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek msaboff is an implementation","msgtype":"m.text"},"ts":1591200928000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er wait not file","msgtype":"m.text"},"ts":1591200937000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"... implementor","msgtype":"m.text"},"ts":1591200938000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"app","msgtype":"m.text"},"ts":1591200939000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: SES.lockdown() isn't the way to begin a JS file now :-)","msgtype":"m.text"},"ts":1591200943000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: ah ok, the way he phrased that made it sound otherwise","msgtype":"m.text"},"ts":1591200957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: I mean I can take your word for that but I'm not familiar with SES envs","msgtype":"m.text"},"ts":1591200971000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"first-hand","msgtype":"m.text"},"ts":1591200998000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it's definitely the way to start any app that wants that kind of lockdown, sure","msgtype":"m.text"},"ts":1591201006000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean I guess once-per-app is reasonable","msgtype":"m.text"},"ts":1591201026000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I dunno why I thought once-per-file","msgtype":"m.text"},"ts":1591201040000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh... this is a new topic that jumped the queue","msgtype":"m.text"},"ts":1591201245000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":":-/","msgtype":"m.text"},"ts":1591201252000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so the only reason this is better than adding new apis to the global is because engines can lazy load?","msgtype":"m.text"},"ts":1591201281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: you don't freeze in prod due to perf","msgtype":"m.text"},"ts":1591201301000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"perf goes down in a non-trivial way for frozen stuff in engines","msgtype":"m.text"},"ts":1591201320000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"v8 does not really have much of a penalty once frozen","msgtype":"m.text"},"ts":1591201343000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"but I think locking down was for security _in prod_","msgtype":"m.text"},"ts":1591201350000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*thought","msgtype":"m.text"},"ts":1591201356000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"robpalme: has that been fixed? last i saw it still devolved into dict mode","msgtype":"m.text"},"ts":1591201365000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"robpalme: it did until about last year","msgtype":"m.text"},"ts":1591201368000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"bradleymeck: Yes, they fixed it very recently","msgtype":"m.text"},"ts":1591201393000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yay","msgtype":"m.text"},"ts":1591201393000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it causes a deoptimization but everything can reoptimize again","msgtype":"m.text"},"ts":1591201403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not locked to dict anymore","msgtype":"m.text"},"ts":1591201414000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so likely it is just a comms issue for that","msgtype":"m.text"},"ts":1591201415000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"@bradleymeck we did a lot of benchmarking and could not find anything worth investing in fixing, so i's \"good enough\"","msgtype":"m.text"},"ts":1591201415000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"ohh I didn't realize we skipped ALL the replies","msgtype":"m.text"},"ts":1591201429000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I too didn't recognize voices 😓","msgtype":"m.text"},"ts":1591201438000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mea culpa","msgtype":"m.text"},"ts":1591201470000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I believe this is the public doc: https://docs.google.com/document/d/1X6zO5F_Zojizn2dmo_ftaOWsY8NltPHUhudBbUzMxnc/edit","msgtype":"m.text"},"ts":1591201477000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"^ \"Fast frozen & sealed elements in V8\"","msgtype":"m.text"},"ts":1591201504000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"is freezeModules shallow?","msgtype":"m.text"},"ts":1591201631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you have to call freezeModules if your app is esm","msgtype":"m.text"},"ts":1591201641000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"freezeModule doesn't freeze the module, just the module map.","msgtype":"m.text"},"ts":1591201672000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"devsnek: i'm not sure how the BuiltinModules object would be made unavailable inside ESM","msgtype":"m.text"},"ts":1591201681000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: so i'd say yes","msgtype":"m.text"},"ts":1591201693000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well i wouldn't want anything to not be made available","msgtype":"m.text"},"ts":1591201722000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so if this is shallow, can't bad code still do bad things","msgtype":"m.text"},"ts":1591201737000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like i can't replace Temporal but i can replace Temporal.prototype.whatever","msgtype":"m.text"},"ts":1591201750000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't understand how shallow/deep applies to freezing the module map","msgtype":"m.text"},"ts":1591201756000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that doesn't do any freezing to things inside the module","msgtype":"m.text"},"ts":1591201765000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right so i'm asking","msgtype":"m.text"},"ts":1591201771000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what's the point of it","msgtype":"m.text"},"ts":1591201773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think that applies to global objects, too","msgtype":"m.text"},"ts":1591201775000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"This shouldn't be any different","msgtype":"m.text"},"ts":1591201780000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"my understanding was freezeModules implies some sort of security","msgtype":"m.text"},"ts":1591201799000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1591201804000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok so what's it for","msgtype":"m.text"},"ts":1591201818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it just means that the module namespace object can't be replaced any further","msgtype":"m.text"},"ts":1591201866000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"replaced/modified","msgtype":"m.text"},"ts":1591201872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right but why does someone want that","msgtype":"m.text"},"ts":1591201878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what would be my motivation to call freezeModules()","msgtype":"m.text"},"ts":1591201896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to have guarantees about the semantics of the rest of your application","msgtype":"m.text"},"ts":1591201909000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"some of them","msgtype":"m.text"},"ts":1591201913000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what guarantees","msgtype":"m.text"},"ts":1591201918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that `import * as ns from 'builtin module'` will always provide the `ns` you expect","msgtype":"m.text"},"ts":1591201934000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you certainly may also want to freeze the contents of that ns","msgtype":"m.text"},"ts":1591201947000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so its just like... a consistency thing","msgtype":"m.text"},"ts":1591201959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you say \"just\" but i prioritize that pretty highly :-)","msgtype":"m.text"},"ts":1591201972000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean if we don't allow mutating the map in the first place","msgtype":"m.text"},"ts":1591201985000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry scratch that, if we don't have the distinction","msgtype":"m.text"},"ts":1591202006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of application before freeze and application after freeze","msgtype":"m.text"},"ts":1591202035000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like with the global, you can apply whatever constraints you want","msgtype":"m.text"},"ts":1591202051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at whatever point","msgtype":"m.text"},"ts":1591202057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"heads up on scheduling:  the next topic (deep-path properties) is 25min (11:45-12:10 CST) so will eat into lunch.  meaning lunch will be 50min instead of 60min.","msgtype":"m.text"},"ts":1591202130000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"this font is not the greatest font in the world, it is just a tribute","msgtype":"m.text"},"ts":1591202696000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: to tdz with ye","msgtype":"m.text"},"ts":1591202771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"@rkisling soory of course","msgtype":"m.text"},"ts":1591202799000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"(oh I'm not chastising so much as inviting lol)","msgtype":"m.text"},"ts":1591202851000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that nestd spread mess is used all over our codebase today, when we attempt to be immutable without a lib","msgtype":"m.text"},"ts":1591202973000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"couldn't you theoretically do something like `newObj = (someFunction(immutableObj).deep.path.property = newValue)`?","msgtype":"m.text"},"ts":1591203012000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: i was thinking the same thing","msgtype":"m.text"},"ts":1591203025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"getters/setters solve the problem","msgtype":"m.text"},"ts":1591203050000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it would be unique for assignment to not return rhs though","msgtype":"m.text"},"ts":1591203051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, that gives you newValue","msgtype":"m.text"},"ts":1591203054000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yah, that's the same as `newObj = … = newVal`","msgtype":"m.text"},"ts":1591203075000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: it could not though","msgtype":"m.text"},"ts":1591203075000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Whic his just `newVal`","msgtype":"m.text"},"ts":1591203079000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"devsnek yeah, I assumed the question was about using existing language features","msgtype":"m.text"},"ts":1591203090000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even when a setter is invoked, assignment returns the RHS?","msgtype":"m.text"},"ts":1591203097000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1591203100000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aww","msgtype":"m.text"},"ts":1591203102000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"like i said, unique","msgtype":"m.text"},"ts":1591203113000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah, just like with `x = (uint8array[0] = 999)`","msgtype":"m.text"},"ts":1591203128000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"You get `999`","msgtype":"m.text"},"ts":1591203132000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Even though `uint8array` will do a setter-like thing","msgtype":"m.text"},"ts":1591203148000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"how about","msgtype":"m.text"},"ts":1591203150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: Do you or V8 have performance concerns with tuples generally?","msgtype":"m.text"},"ts":1591203154000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"walrus operator","msgtype":"m.text"},"ts":1591203157000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Since there's going to be a lot more object allocations","msgtype":"m.text"},"ts":1591203167000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"`newRecord := oldRecord.x.y.z = 5`","msgtype":"m.text"},"ts":1591203174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: i haven't looked too deeply yet. i have vague anxiety, i guess","msgtype":"m.text"},"ts":1591203178000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lol walrus","msgtype":"m.text"},"ts":1591203181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: the default implementation technique means a lot more interning too","msgtype":"m.text"},"ts":1591203205000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and it's hard to do escape analysis in JS, which is pretty important generally for other languages that have tuples.","msgtype":"m.text"},"ts":1591203214000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: i thought i was kidding but now i think i'm serious","msgtype":"m.text"},"ts":1591203217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: well yeah, and v8 at least wants things to be fast in the interpreter nowadays, we can't really lean escape analysis or scalar replacement and the like even if it were easy","msgtype":"m.text"},"ts":1591203250000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so you can't do the normal just use the same cell","msgtype":"m.text"},"ts":1591203251000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I want walrus operator just for the name.","msgtype":"m.text"},"ts":1591203260000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"lean on*","msgtype":"m.text"},"ts":1591203260000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1591203266000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"python has tuples and is hard to escape-analyze","msgtype":"m.text"},"ts":1591203274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Eg, `||=` should forever be known as the mallet operator","msgtype":"m.text"},"ts":1591203277000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: python is famously slow","msgtype":"m.text"},"ts":1591203285000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: true, but python's performance demands is mostly offshored to C","msgtype":"m.text"},"ts":1591203297000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://github.com/tc39/proposal-logical-assignment/blame/master/README.md#L6","msgtype":"m.text"},"ts":1591203299000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: ||= doesn't look like a mallet tho unless it's `||=` :-/","msgtype":"m.text"},"ts":1591203302000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in those FFI modules, is my understanding","msgtype":"m.text"},"ts":1591203305000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the turbofish operator <>:: is literally why i first looked at rust","msgtype":"m.text"},"ts":1591203324000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"what does it mean for this proposal to advance to stage 1 when records/tuples is not stage 4?","msgtype":"m.text"},"ts":1591203355000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: stage 1 just means we're going to talk about it more","msgtype":"m.text"},"ts":1591203381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because we agree there's a problem that needs to be solved","msgtype":"m.text"},"ts":1591203393000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"how can there be a problem if there's no feature?","msgtype":"m.text"},"ts":1591203403000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"stage(deepPathProperties) ≤ stage(recordsAndTuples)","msgtype":"m.text"},"ts":1591203404000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"i feel like this should either be part of the more general object proposal","msgtype":"m.text"},"ts":1591203433000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra I think it's fine to say that we're advancing this to stage 1 with an eye towards a problem which does not yet exist but might in the future","msgtype":"m.text"},"ts":1591203433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or the record/tuple proposal","msgtype":"m.text"},"ts":1591203436000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait isn't stage 1 acknowledging \"there's a problem\" and stage 2 \"that we're interested in solving\"","msgtype":"m.text"},"ts":1591203455000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"michaelficarra: See NilSet's comment","msgtype":"m.text"},"ts":1591203461000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"> that nestd spread mess is used all over our codebase today, when we attempt to be immutable without a lib","msgtype":"m.text"},"ts":1591203464000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think that means we have a larger issue than just record/tuple?","msgtype":"m.text"},"ts":1591203489000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"akirose stage 2 is \"that we are interested in solving _with something like this solution_\"","msgtype":"m.text"},"ts":1591203493000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"stage 2 implies a particular approach to solving the problem","msgtype":"m.text"},"ts":1591203511000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(just with details omitted)","msgtype":"m.text"},"ts":1591203529000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1591203538000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"stage 1: we agree that there's a problem, stage 2: we've agreed on the important bits of our solution, stage 3: we've nailed down all the details of our solution","msgtype":"m.text"},"ts":1591203599000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"All of the mutations could be packed into a single result if the mutations within the same `{}` are tracked?","msgtype":"m.text"},"ts":1591203599000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"nowObj = delete lens(oldObj).deep.property.name","msgtype":"m.text"},"ts":1591203672000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"*newObj","msgtype":"m.text"},"ts":1591203679000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra fwiw we usually treat stage 1 as more like \"we are not willing to declare that there is definitely not a problem\"","msgtype":"m.text"},"ts":1591203730000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agreed, the bar for stage 1 is low","msgtype":"m.text"},"ts":1591203750000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"and I think that's the right way to operate","msgtype":"m.text"},"ts":1591203760000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we should really add descriptions like these to the process document","msgtype":"m.text"},"ts":1591203785000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"request that we refrain from arguing about these details, given the timebox","msgtype":"m.text"},"ts":1591203788000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the ones being discussed on the call, that is","msgtype":"m.text"},"ts":1591203795000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Is \"lenses\" just codewords for proxy?","msgtype":"m.text"},"ts":1591204257000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: all you could ever want to know about lenses: https://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html","msgtype":"m.text"},"ts":1591204309000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's basically recreating property access in a pure FP setting","msgtype":"m.text"},"ts":1591204334000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I wasn't prepared to try to envision this in a JS setting","msgtype":"m.text"},"ts":1591204349000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"OH wow, this was apparently not the morning for me to skip the pre-lunch parts of the meeting, if we're getting into lenses already","msgtype":"m.text"},"ts":1591204383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Can you translate into a normal language?","msgtype":"m.text"},"ts":1591204391000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Lol.","msgtype":"m.text"},"ts":1591204393000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Question: What is a lens?","msgtype":"m.text"},"ts":1591204411000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"Answer: A lens is a first class getter and setter","msgtype":"m.text"},"ts":1591204412000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"TabAtkins: lol. you missed it by a couple of minutes","msgtype":"m.text"},"ts":1591204422000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sounds to me like yes its codeword for proxy","msgtype":"m.text"},"ts":1591204426000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"No, it's quite different from a proxy, but for ~mysterious reasons~","msgtype":"m.text"},"ts":1591204443000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or rather you could implement a lens with a function that returns a proxy","msgtype":"m.text"},"ts":1591204462000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"oh like using a proxy as a view","msgtype":"m.text"},"ts":1591204494000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm busy this morning trying to untangle the HTML spec's use of GOTO in algorithms into nested loops","msgtype":"m.text"},"ts":1591204518000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"for real wtf","msgtype":"m.text"},"ts":1591204521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1591204526000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"TabAtkins: link?","msgtype":"m.text"},"ts":1591204665000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the one i'm working on right now is https://html.spec.whatwg.org/multipage/parsing.html#reconstruct-the-active-formatting-elements","msgtype":"m.text"},"ts":1591204711000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i lost it at \"rewind\"","msgtype":"m.text"},"ts":1591204733000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reverse reverse","msgtype":"m.text"},"ts":1591204812000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: are we talking about module attributes?","msgtype":"m.text"},"ts":1591204922000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"michaelficarra: https://tools.ietf.org/html/rfc3986#section-3","msgtype":"m.text"},"ts":1591205204000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"To answer the builtin modules discussion earlier:","msgtype":"m.text"},"ts":1591205225000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"gibson042: huh?","msgtype":"m.text"},"ts":1591205226000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"https://gist.github.com/jridgewell/8428f797ef85346d3081c99518fa9fce","msgtype":"m.text"},"ts":1591205228000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shu: i'm here in the hallway track just now; littledan?","msgtype":"m.text"},"ts":1591205237000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That will execute `shim.js` (which defines `js:foo`) before `main.js` links `js:foo`","msgtype":"m.text"},"ts":1591205247000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: what if shim.mjs imports main.mjs","msgtype":"m.text"},"ts":1591205257000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: stepped away for a sec, omw","msgtype":"m.text"},"ts":1591205260000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"That would break it","msgtype":"m.text"},"ts":1591205269000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )","msgtype":"m.text"},"ts":1591205281000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"sorry, that was for jridgewell","msgtype":"m.text"},"ts":1591205295000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"jridgewell: in your gist the whole graph is lined prior to entry being ready to evaluate (and thus before shim)","msgtype":"m.text"},"ts":1591206247000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"linked*","msgtype":"m.text"},"ts":1591206252000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so shim wouldn't execute prior to main linking","msgtype":"m.text"},"ts":1591206269000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"This behavior is msaboff's intention","msgtype":"m.text"},"ts":1591206323000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1591206341000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cycles would have to be isolated, that seems... hard","msgtype":"m.text"},"ts":1591206359000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"If the shimming happens in a script loaded before a module that imports the shimed module, We propose that the shimmed module is the one that would be linked.","msgtype":"m.text"},"ts":1591206439000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"<script> or Script (JS parse goal)","msgtype":"m.text"},"ts":1591206497000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1591206499000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1591206518000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"which?","msgtype":"m.text"},"ts":1591206537000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Script","msgtype":"m.text"},"ts":1591206556000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"parse goal","msgtype":"m.text"},"ts":1591206562000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: would the ESM module graph from an import be rewired is the question","msgtype":"m.text"},"ts":1591206565000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to my understanding your Script/<script> would be outside of the ESM module graph it can instrument","msgtype":"m.text"},"ts":1591206586000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not like the linked gist","msgtype":"m.text"},"ts":1591206598000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I'd like to talk with you about how that would work.","msgtype":"m.text"},"ts":1591206603000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"In the linked gist, it is my desire that shim.js would be processed first, before the second import, but we need to talk.","msgtype":"m.text"},"ts":1591206747000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"sorry had to close spatial chat","msgtype":"m.text"},"ts":1591207116000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"was making my gsuite laggy :/","msgtype":"m.text"},"ts":1591207122000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"two minutes warning!","msgtype":"m.text"},"ts":1591207139000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"msaboff: that would be a change for sure to how ESM currently works","msgtype":"m.text"},"ts":1591207149000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we will be starting with Restrict subclassing support for built-inmethods","msgtype":"m.text"},"ts":1591207162000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"linking is in early error domain currently","msgtype":"m.text"},"ts":1591207165000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Let's figure out a time to talk.","msgtype":"m.text"},"ts":1591207167000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"bterlson tomorrow do a 4 minute warning. https://www.youtube.com/watch?v=6eyUrpOl40k","msgtype":"m.text"},"ts":1591207176000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"ooh yes, been waiting for this topic","msgtype":"m.text"},"ts":1591207248000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"littledan: for what I want, it's ok for -0 to be similar as in `0 === -0`, at the same time I want the flexibility of not breaking a deep comparison because of NaN","msgtype":"m.text"},"ts":1591207348000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: that's SameValueZero","msgtype":"m.text"},"ts":1591207383000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1591207394000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1591207403000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"rickbutton: littledan: Thinking about record/tuple more, have you considered just one type? so #[\"a\"] is just sugar for #{ 0:\"a\" }?","msgtype":"m.text"},"ts":1591207404000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: lists and structs should be conceptually distinct imo, that seems odd","msgtype":"m.text"},"ts":1591207430000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Can we just throw if you insert a `NaN` inside a record?","msgtype":"m.text"},"ts":1591207431000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: it would need to sugar to #{ 0: \"a\", length: 1 }","msgtype":"m.text"},"ts":1591207456000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"ljharb: It's weird to me that those wouldn't be the same?","msgtype":"m.text"},"ts":1591207466000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rickbutton: Sure","msgtype":"m.text"},"ts":1591207468000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: a list has N items, a struct has N pairs","msgtype":"m.text"},"ts":1591207482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also there's a ton of methods you want on Tuples that don't really make sense on Records","msgtype":"m.text"},"ts":1591207497000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: Tuples have Array-like methods on their prototype, whereas Records probably shouldn't have those","msgtype":"m.text"},"ts":1591207514000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"also Tuples have a .length, but I guess that could be part of the desugaring","msgtype":"m.text"},"ts":1591207531000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jridgewell markm proposed that but a lot of people didn't like it","msgtype":"m.text"},"ts":1591207550000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I also don't like it","msgtype":"m.text"},"ts":1591207552000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't know how much it matters for the array methods to be on the prototype","msgtype":"m.text"},"ts":1591207554000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"though I don't hate it I guess","msgtype":"m.text"},"ts":1591207556000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since it just wouldn't do anything","msgtype":"m.text"},"ts":1591207561000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller I think it matters a lot, because we want people to be able to use tuples like they already use arrays, which use prototype methods","msgtype":"m.text"},"ts":1591207583000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Array.prototype.slice doesn't mutate the array","msgtype":"m.text"},"ts":1591207591000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"jridgewell https://github.com/tc39/proposal-record-tuple/issues/65#issuecomment-635771624","msgtype":"m.text"},"ts":1591207594000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just find it mildly confusing that a record could have exactly the same members as a tuple but not be ==","msgtype":"m.text"},"ts":1591207596000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: if they're own properties you can't polyfill Tuple methods.","msgtype":"m.text"},"ts":1591207599000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`NaN` causes hairy equality issues, which is bad if records are motivated by equality.","msgtype":"m.text"},"ts":1591207604000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: imo that's a feature. a list and a struct can't be the same","msgtype":"m.text"},"ts":1591207619000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We already have runtime checks for disallowing mutable objects","msgtype":"m.text"},"ts":1591207621000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb: But that's not how objects in JS work","msgtype":"m.text"},"ts":1591207642000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Objects in JS can have both indexed and non-index properties","msgtype":"m.text"},"ts":1591207663000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: depends on what custom comparison logic you choose","msgtype":"m.text"},"ts":1591207663000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so can arrays","msgtype":"m.text"},"ts":1591207667000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: most comparison libraries (including the quite popular ones i maintain) consider arrays and objects to not be equalish","msgtype":"m.text"},"ts":1591207681000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also node's assert","msgtype":"m.text"},"ts":1591207686000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: I think Mark was also proposing `#[-0]` throws","msgtype":"m.text"},"ts":1591207687000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell true","msgtype":"m.text"},"ts":1591207693000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"-0 also causes hairy equality issues, tbf","msgtype":"m.text"},"ts":1591207703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"What do you mean by custom comparison logic?","msgtype":"m.text"},"ts":1591207709000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"thinking of tuples in terms of arrays is surprising to me","msgtype":"m.text"},"ts":1591207711000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: like, what's the implementation of your `isEqual(a, b)` function","msgtype":"m.text"},"ts":1591207721000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I would be against #[-0] throwing, there are legitimate cases where -0 can appear, we don't want those to throw","msgtype":"m.text"},"ts":1591207723000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I think `===` has good equality for `-0`.","msgtype":"m.text"},"ts":1591207728000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: if it includes an Array.isArray check, as all the common ones do, then an array and an object would never be considered equal","msgtype":"m.text"},"ts":1591207742000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It doesn't for `NaN`","msgtype":"m.text"},"ts":1591207757000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But that's not part of the actual type system that's just what people implement when they do deep comparison","msgtype":"m.text"},"ts":1591207771000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"You could also do any amount of prototype chain checking","msgtype":"m.text"},"ts":1591207806000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: after this item you got a min to talk through the deep property path escape analysis comment you had","msgtype":"m.text"},"ts":1591207821000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it is a part of the type system, if you consider that object being an \"array\" exotic object is a part of the type itself","msgtype":"m.text"},"ts":1591207825000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"shu: Sure","msgtype":"m.text"},"ts":1591207836000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: You mean the presentation or IRC?","msgtype":"m.text"},"ts":1591207857000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: the presentation","msgtype":"m.text"},"ts":1591207867000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"👍🏾","msgtype":"m.text"},"ts":1591207873000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i just wanted to queue it up","msgtype":"m.text"},"ts":1591207874000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"👍🏼","msgtype":"m.text"},"ts":1591207908000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: right but i'm saying that virtually the whole ecosystem does check the type when doing deep comparison at this point","msgtype":"m.text"},"ts":1591207991000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: which means that many would find it confusing for JS not to do that","msgtype":"m.text"},"ts":1591208001000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: The only way you'd see a distinction is if you create a record that looks exactly like a tuple","msgtype":"m.text"},"ts":1591208087000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"So, it's not even really a thing that's going to come up","msgtype":"m.text"},"ts":1591208147000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"it comes up with arrays and objects.","msgtype":"m.text"},"ts":1591208222000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"So does equality not look at the prototype chain?","msgtype":"m.text"},"ts":1591208288000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"equality of what?","msgtype":"m.text"},"ts":1591208300000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"keith_miller: normal JS equality does not, no","msgtype":"m.text"},"ts":1591208310000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rickbutton: ljharb's isEqual function","msgtype":"m.text"},"ts":1591208318000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: ecosystem deepEqual methods compare the [[Prototype]]","msgtype":"m.text"},"ts":1591208323000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow `{ __proto__ A }` is not equal to `{ __proto__: B }`","msgtype":"m.text"},"ts":1591208340000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Ok, so yeah, that makes sense because those are different types then.","msgtype":"m.text"},"ts":1591208370000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"and so is `[]` and `{}`","msgtype":"m.text"},"ts":1591208381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yikes","msgtype":"m.text"},"ts":1591208695000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"robot","msgtype":"m.text"},"ts":1591208699000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jridgewell: you're a bit roboty","msgtype":"m.text"},"ts":1591208701000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"droids","msgtype":"m.text"},"ts":1591208703000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"jridgewell: ok you're better now","msgtype":"m.text"},"ts":1591208709000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"daleks","msgtype":"m.text"},"ts":1591208715000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oh man that was jarring, the transition","msgtype":"m.text"},"ts":1591208715000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it was like watching the t-1000 heal","msgtype":"m.text"},"ts":1591208722000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sounded like a vocoder","msgtype":"m.text"},"ts":1591208729000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"`CustomArray.of` and `CustomArray.from` silently changing to not return a CustomArray seems almost mean","msgtype":"m.text"},"ts":1591208736000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"any signals geeks know what happened there?","msgtype":"m.text"},"ts":1591208741000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"jorendorff: only if there's a single person doing that tho, which i'm not sure is established :-p","msgtype":"m.text"},"ts":1591208763000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1591208775000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"bterlson: gremlins in the wires","msgtype":"m.text"},"ts":1591208781000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I want to take the opportunity of new types to fix a long time issue with === and NaN. I'd love for Records and Tuples to have a SameValueZero out of the box if I use ===","msgtype":"m.text"},"ts":1591208867000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"<3 \"stepping up to take out the trash\"","msgtype":"m.text"},"ts":1591208930000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591209093000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton: Wait what were you saying? I zipped out for a second what's the problem with this.constructor?","msgtype":"m.text"},"ts":1591209534000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I'm a very strong supporter of this proposal","msgtype":"m.text"},"ts":1591209566000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(I think I added the species support in feross's buffer library...)","msgtype":"m.text"},"ts":1591209603000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I heard you speaking about the this.constructor thing","msgtype":"m.text"},"ts":1591209619000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"This:","msgtype":"m.text"},"ts":1591209641000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591209641000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"class MyArray extends Array {","msgtype":"m.text"},"ts":1591209641000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  constructor(options, items) {","msgtype":"m.text"},"ts":1591209641000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"    super(...items);","msgtype":"m.text"},"ts":1591209641000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"    this.options = options;","msgtype":"m.text"},"ts":1591209642000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  }","msgtype":"m.text"},"ts":1591209642000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591209643000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591209643000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"If we use `this.constructor` for `map`, calling `map` on a `MyArray` results in garbage.","msgtype":"m.text"},"ts":1591209644000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"https://github.com/feross/buffer/pull/97","msgtype":"m.text"},"ts":1591209651000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"is this what people are referring to as the only correct usage of species?","msgtype":"m.text"},"ts":1591209659000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah, that problem came up in the buffer library, and was actually a sort of web compat issue for ES6","msgtype":"m.text"},"ts":1591209686000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: it is the only one that doesn't do things like accidentally stop subclasses from working","msgtype":"m.text"},"ts":1591209693000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm sure there are *some* examples of using it properly elsewhere","msgtype":"m.text"},"ts":1591209712000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but not on sites i've crawled/code searches","msgtype":"m.text"},"ts":1591209725000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"With species I can do something like:","msgtype":"m.text"},"ts":1591209728000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"class MyArray extends Array {","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  ...","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"MyArray[Symbol.species] = function(...args) { return new MyArray({}, ...args); };","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591209729000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"which makes me question if actually setting it is too complex","msgtype":"m.text"},"ts":1591209744000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait I thought 2-without-3 was on the table","msgtype":"m.text"},"ts":1591209751000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"If we use `this.constructor`, I have to override `map` hack around the use of `this.constructor`.","msgtype":"m.text"},"ts":1591209755000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rwaldron: if you have examples of cross realm apps/libs/sites/etc. I'd appreciate since writing cross context hooks is a bit involved","msgtype":"m.text"},"ts":1591209767000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"(er \"remove 3 without removing 2\")","msgtype":"m.text"},"ts":1591209774000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: `constructor() { super(); this.constructor = custom; }`?","msgtype":"m.text"},"ts":1591209814000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah rkirsling that's not what the slides said","msgtype":"m.text"},"ts":1591209830000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"rkirsling: oh, not via .constructor","msgtype":"m.text"},"ts":1591209861000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe there's a better way but i don't have any ideas","msgtype":"m.text"},"ts":1591209873000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think there was indeed miscommunication here","msgtype":"m.text"},"ts":1591209877000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1591209886000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yay","msgtype":"m.text"},"ts":1591210122000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck It's not really something that's well advertised about apps","msgtype":"m.text"},"ts":1591210127000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"or libraries, or whatever","msgtype":"m.text"},"ts":1591210136000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"mpcsh: on it","msgtype":"m.text"},"ts":1591210138000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yea, so not easy for me to find :-/","msgtype":"m.text"},"ts":1591210141000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Bakkot: RE the branch on pageload, there's so much other stuff that's in builtin functions that normal user code would never do already","msgtype":"m.text"},"ts":1591210151000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i think folks are overfocusing a bit on it being \"an unnecessary branch\"","msgtype":"m.text"},"ts":1591210180000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it propagates to a lot more complexity in V8 and SM than just a single branch, though that's what it is in the spec text","msgtype":"m.text"},"ts":1591210205000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i.e. you'd get better perf by rewriting all the iterator methods anyway","msgtype":"m.text"},"ts":1591210208000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1591210212000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rwaldron: right now the crawler just replaces every method that calls [@@species] with a devtools debugger trap. in theory it should catch cross realm stuff, but idk if any of our listed sites do that","msgtype":"m.text"},"ts":1591210215000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm a big fan of async context","msgtype":"m.text"},"ts":1591210222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"prototype","msgtype":"m.text"},"ts":1591210227000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"What is the current preferred way of adding things to the notes that we didn't get to?","msgtype":"m.text"},"ts":1591210239000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"So is the \"restrict subclassing support\" the first stage 1 or greater proposal to remove normative behavior?","msgtype":"m.text"},"ts":1591210252000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff nope, I think I get that award: renaming Atomics.wake to Atomics.notify","msgtype":"m.text"},"ts":1591210283000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"That was in a published spec","msgtype":"m.text"},"ts":1591210292000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"shu: How do V8/SM do their fast path check?","msgtype":"m.text"},"ts":1591210307000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ᕦ(ò_óˇ)","msgtype":"m.text"},"ts":1591210317000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron: like additional queue items?","msgtype":"m.text"},"ts":1591210346000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Yay, async call contexts. I've wanted this for awhile. Kind of like `Threading.AsyncLocal` in .NET.","msgtype":"m.text"},"ts":1591210347000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(that didn't make it)","msgtype":"m.text"},"ts":1591210363000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"bradleymeck: Are you using `Object.defineProperty` for that?","msgtype":"m.text"},"ts":1591210372000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: there're two ways: 1) manual fast/slow path dispatch in the built-in implementation","msgtype":"m.text"},"ts":1591210382000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"The `@@species` props are all no-set getters","msgtype":"m.text"},"ts":1591210387000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rwaldron =: Okay.  But we knew that wasn't web breaking because the feature was turned off (and still is).","msgtype":"m.text"},"ts":1591210390000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"jridgewell: no, just replacing the primordial method with a diff function","msgtype":"m.text"},"ts":1591210390000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"keith_miller: 2) a monotonic \"protector bit\" that gets flipped if the page does something that results in a bad time, i think as you call it","msgtype":"m.text"},"ts":1591210395000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"do i get an award for having my first championed proposal be to remove normative behavior instead of add?","msgtype":"m.text"},"ts":1591210416000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"jridgewell: basically we are trapping [].map not [][@@species]","msgtype":"m.text"},"ts":1591210423000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"keith_miller: it's much worse for regexp than Array#map","msgtype":"m.text"},"ts":1591210426000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you certainly should ystartsev","msgtype":"m.text"},"ts":1591210427000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"keith_miller: okay, so to dequeue my question earlier","msgtype":"m.text"},"ts":1591210453000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I removed early ref error 🤔","msgtype":"m.text"},"ts":1591210456000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it was a normative PR lol","msgtype":"m.text"},"ts":1591210463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think the Queue is still on a topic from the last agenda item?","msgtype":"m.text"},"ts":1591210469000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"keith_miller: help me understand the escape analysis issue, more in detail?","msgtype":"m.text"},"ts":1591210481000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you should get 10x more tc39 points for deleting lines from the spec vs adding them","msgtype":"m.text"},"ts":1591210490000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"keith_miller: what allocations would it elide if the optimization applies?","msgtype":"m.text"},"ts":1591210491000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jridgewell: slightly old but same idea in https://gist.github.com/bmeck/5f195c4ae08009db4f3eefdc8bb360c9","msgtype":"m.text"},"ts":1591210491000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have a lot more coreJS detection stuff now :-/","msgtype":"m.text"},"ts":1591210500000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rickbutton yeah, I was in the queue","msgtype":"m.text"},"ts":1591210506000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"shu: Yeah, I think we mostly use the our equivalent of bit method.","msgtype":"m.text"},"ts":1591210517000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"There's a pretty important point that I need to add to the notes","msgtype":"m.text"},"ts":1591210520000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"But I haven't looked in a while","msgtype":"m.text"},"ts":1591210523000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rwaldron: we usually just append them to the end of the notes for the section","msgtype":"m.text"},"ts":1591210529000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":":%s/section/proposal section/g","msgtype":"m.text"},"ts":1591210535000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I think it changes our understanding of what would be affected by @@species removal","msgtype":"m.text"},"ts":1591210537000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Because it's not @@species being used directly","msgtype":"m.text"},"ts":1591210549000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"with like a header of \"remaining queue items\" or something","msgtype":"m.text"},"ts":1591210560000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"robpalme: we should add that to how-we-work","msgtype":"m.text"},"ts":1591210564000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rwaldron: what's the point?","msgtype":"m.text"},"ts":1591210565000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron: the proposed semantics is that the built-ins create an instance of the built-in in the current realm","msgtype":"m.text"},"ts":1591210589000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mpcsh: rickbutton tell me where to add my skipped queue item for that one btw","msgtype":"m.text"},"ts":1591210599000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu you shook something loose when you mentioned looking through old code (or something like that)","msgtype":"m.text"},"ts":1591210603000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"what does that mean? :)","msgtype":"m.text"},"ts":1591210625000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm getting to it","msgtype":"m.text"},"ts":1591210630000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"shu: So in most languages that have simple updates to immutable things they are either refcounted (so refCount == 1 means mutate in place) or they heavily rely on an escape analysis to prove that the tuple doesn't leave the function so you don't need to allocate it at all","msgtype":"m.text"},"ts":1591210636000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I need to check something","msgtype":"m.text"},"ts":1591210642000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"No, I can do that later","msgtype":"m.text"},"ts":1591210645000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"ljharb just put it after the conclusion in the \"restrict subclassing support\" section","msgtype":"m.text"},"ts":1591210659000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"If we remove @@species, I believe we will break every site that ever used Zepto","msgtype":"m.text"},"ts":1591210659000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"actually you need the escape for the ref count thing anyway","msgtype":"m.text"},"ts":1591210662000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rwaldron: fascinating, would love to dig in","msgtype":"m.text"},"ts":1591210691000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But you can't really do that optimization in JS without a lot of speculation due to getters","msgtype":"m.text"},"ts":1591210703000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu https://github.com/tc39/notes/blob/master/meetings/2014-11/nov-18.md#46-zepto-broken-by-new-thisconstruct-usage-in-some-arrayprototype-methods","msgtype":"m.text"},"ts":1591210714000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"keith_miller: ah, that's a general concern about records/tuples, not a specific one about the deep path properties?","msgtype":"m.text"},"ts":1591210734000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Yeah, true but deep path properties make it much more ergonomic.","msgtype":"m.text"},"ts":1591210760000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rwaldron: that's if we remove species *and* use constructor?","msgtype":"m.text"},"ts":1591210763000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"And I don't think people realize that it's going to be very expensive","msgtype":"m.text"},"ts":1591210797000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: ah, i see. kinda a moral hazard argument that they might think records and tuples are cheaper than object literals","msgtype":"m.text"},"ts":1591210812000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"when they are in fact worse","msgtype":"m.text"},"ts":1591210815000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: If deep path mutation is in a userland library they 1 need to find it and 2 probably have different expectations on its performance","msgtype":"m.text"},"ts":1591210861000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rwaldron: good find, though my read is of that is how @@species broke ES5-era behavior (the \"old semantics\" we're proposing), and removing @@species and constructor delegation altogether gets us back to ES5-era behavior, and would be compatible","msgtype":"m.text"},"ts":1591210888000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: these are valid arguments, can you list your performance considerations in the issue tracker?","msgtype":"m.text"},"ts":1591210902000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"that's a big part of the intuition that this change IS compatible fwiw, because it was what it was in es5 and we broke it for a bit and worked around with @@species","msgtype":"m.text"},"ts":1591210911000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rickbutton: sure","msgtype":"m.text"},"ts":1591210915000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"thank you :)","msgtype":"m.text"},"ts":1591210918000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"keith_miller: and to make sure i understand some more...","msgtype":"m.text"},"ts":1591210923000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: the worst case here for tuples is _as many allocations_ as mutable objects","msgtype":"m.text"},"ts":1591210934000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not somehow inherently worse than mutable objects?","msgtype":"m.text"},"ts":1591210941000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i guess this is also a question for wsdferdksl","msgtype":"m.text"},"ts":1591210982000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i still don't fully understand his concern","msgtype":"m.text"},"ts":1591210988000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I'm not sure I understand your concern","msgtype":"m.text"},"ts":1591210995000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i have no concern yet","msgtype":"m.text"},"ts":1591211003000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err clarification","msgtype":"m.text"},"ts":1591211004000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: like, suppose we definitely cannot do any smart optimizations","msgtype":"m.text"},"ts":1591211029000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"It's just that when I do `foo.bar.baz = 1` on an object it doesn't do an allocation people don't think about the fact that the immutable thing will do allocations","msgtype":"m.text"},"ts":1591211058000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"what will be the performance characteristic of records be? wouldn't it be the same as using mutable objects as if they were immutable??","msgtype":"m.text"},"ts":1591211066000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah, i see, ok","msgtype":"m.text"},"ts":1591211076000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh, I see what you're saying","msgtype":"m.text"},"ts":1591211078000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yeah, it's the same","msgtype":"m.text"},"ts":1591211081000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"didn't mean 2 question marks","msgtype":"m.text"},"ts":1591211094000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"still working trigraphs out of my system","msgtype":"m.text"},"ts":1591211100000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But it's just much harder to work with so people are unlikely to do it.","msgtype":"m.text"},"ts":1591211121000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"right, i get your concern now","msgtype":"m.text"},"ts":1591211135000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'd just be sad if we add this feature then every linter in the world say \"DON'T DO IT FOR PERF!!!!11!!\"","msgtype":"m.text"},"ts":1591211149000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"it's gonna ruin your page load time","msgtype":"m.text"},"ts":1591211170000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"maybe that won't happen though...","msgtype":"m.text"},"ts":1591211186000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"It's more just something I'd like to consider","msgtype":"m.text"},"ts":1591211195000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"> `foo.bar.baz = 1`","msgtype":"m.text"},"ts":1591211245000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Isn't it clear from `{ ...record, x: 1 }`'s syntax that it will be doing a clone?","msgtype":"m.text"},"ts":1591211245000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I would also be sad if that is the case. I think it would be useful to find some examples of cases where this kind of thing is already happening, during the prez redux got mentioned, where deeply-nested \"many allocations\" with regular objects are common/expected.","msgtype":"m.text"},"ts":1591211247000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"jridgewell: you'd think, but we were just talking yesterday about IIFEs being a suitable replacement for a do-block, despite the extra allocations","msgtype":"m.text"},"ts":1591211302000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu you may indeed be right, but I just want to make sure we don't miss any of the historic context","msgtype":"m.text"},"ts":1591211890000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron: +100","msgtype":"m.text"},"ts":1591212123000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: fwiw people who use products like datadog and sentry tracing and stuff all opt into the perf hit and seem fine with it","msgtype":"m.text"},"ts":1591212125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(i still think these should be disabled by default)","msgtype":"m.text"},"ts":1591212154000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: sure, the point is we want it to be opt in","msgtype":"m.text"},"ts":1591212173000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: but last time the feedback was we don't know how to make the performance characteristic to be opt in","msgtype":"m.text"},"ts":1591212187000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"got it, understand you now","msgtype":"m.text"},"ts":1591212225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mmarchini I think you just gave me a flash back to Domains","msgtype":"m.text"},"ts":1591212235000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1591212247000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1591212251000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"\"flash back\" i wish domains were in my past","msgtype":"m.text"},"ts":1591212257000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That was the Zones issue, IIRC","msgtype":"m.text"},"ts":1591212258000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1591212261000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron: zones were a 21 line wrapper around domains","msgtype":"m.text"},"ts":1591212262000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Yep ^^^","msgtype":"m.text"},"ts":1591212267000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"wiggles eyebrows","msgtype":"m.emote"},"ts":1591212271000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hahahahaha","msgtype":"m.text"},"ts":1591212279000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"LOL","msgtype":"m.text"},"ts":1591212281000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"zones are a small wrapper around async hooks as well","msgtype":"m.text"},"ts":1591212281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"This proposal makes me want to revive my \"async blocks\" syntax proposal","msgtype":"m.text"},"ts":1591212411000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"(I can't tell if I'm serious yet)","msgtype":"m.text"},"ts":1591212420000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Async blocks?","msgtype":"m.text"},"ts":1591212428000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah dog","msgtype":"m.text"},"ts":1591212433000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron I mentioned `async do {}` in my do-exprs proposal","msgtype":"m.text"},"ts":1591212447000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I knooooooowwwww","msgtype":"m.text"},"ts":1591212457000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"i miss when people said dog","msgtype":"m.text"},"ts":1591212459000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1591212460000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Bakkot I was *thrilled*","msgtype":"m.text"},"ts":1591212486000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"tracking the causality of async tasks bro","msgtype":"m.text"},"ts":1591212502000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Gus, don't you mean \"tracking the causality of async tasks dog\"","msgtype":"m.text"},"ts":1591212593000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"not dawg though?","msgtype":"m.text"},"ts":1591212613000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"That works as well","msgtype":"m.text"},"ts":1591212618000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Interchangeable","msgtype":"m.text"},"ts":1591212623000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Bakkot jridgewell my old timey proposal was basically something that I came up with when Luke Hoban first started working on async functions","msgtype":"m.text"},"ts":1591212711000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"akirose: regarding announcments, would tomorrow morning work?","msgtype":"m.text"},"ts":1591212739000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"robpalme I have to pause for another meeting, I won't be able to catch the Intl Enumeration discussion. Please let me know if anything else will be discussed today, if you have time to do it, of course :)","msgtype":"m.text"},"ts":1591213014000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"i'm so confused about the stage 1 block","msgtype":"m.text"},"ts":1591213029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I've been confused by Stage 1 since forever","msgtype":"m.text"},"ts":1591213049000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"isn't people agreeing this is a problem the exact stage 1","msgtype":"m.text"},"ts":1591213051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"requirement","msgtype":"m.text"},"ts":1591213055000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we have nothing else scheduled. this will take us to 6 minutes beyond the scheduled end.","msgtype":"m.text"},"ts":1591213056000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"devsnek: stage 1 also means, we want to talk about it more in committee","msgtype":"m.text"},"ts":1591213070000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1591213076000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: to me it sounds like the blocks mean \"we are currently convinced there's nothing further to discuss\"","msgtype":"m.text"},"ts":1591213084000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, I always thought of a stage 1 block as \"this is a non-starter. we don't even think this warrants attention.\"","msgtype":"m.text"},"ts":1591213148000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i don't think stage 1 requires exhaustively proving no solution will be found","msgtype":"m.text"},"ts":1591213150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is there a reason we're skipping Intl.Segmenter for stage 3?","msgtype":"m.text"},"ts":1591213164000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we're not going to get to it today and it's not on the schedule for tomorrow","msgtype":"m.text"},"ts":1591213179000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: it generally requires convincing everyone that a solution *could* be found","msgtype":"m.text"},"ts":1591213182000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: it was added late, so it'd be done last","msgtype":"m.text"},"ts":1591213198000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"since when?","msgtype":"m.text"},"ts":1591213209000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we do agenda items in order (modulo timing constraints)","msgtype":"m.text"},"ts":1591213230000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1591213236000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not really sure","msgtype":"m.text"},"ts":1591213238000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it came up on monday and the chairs suggested it going later","msgtype":"m.text"},"ts":1591213249000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"being added late only changes whether we think it's justifiable to reject based on timing alone","msgtype":"m.text"},"ts":1591213254000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1591213259000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh it was added after we agreed to the agenda?","msgtype":"m.text"},"ts":1591213268000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: are you looking at the draft schedule or TCQ?","msgtype":"m.text"},"ts":1591213280000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"michaelficarra: no https://github.com/tc39/agendas/commit/ec18f27dce69959586ad5f205bfb00b690201d26#diff-3441294351e2ad1cc9682d5d1eafb082","msgtype":"m.text"},"ts":1591213286000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In the draft schedule Intl.Segmenter is listed as Overflow","msgtype":"m.text"},"ts":1591213303000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh then we should definitely prioritise it ahead of stage 0 things","msgtype":"m.text"},"ts":1591213316000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"but michaelficarra is right; being added late is not supposed to mean they get bumped to the end","msgtype":"m.text"},"ts":1591213328000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"akirose et al? ^","msgtype":"m.text"},"ts":1591213332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's on the draft agenda twice, once under overflow, once under \"items added after deadline\"","msgtype":"m.text"},"ts":1591213353000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I could see an argument for bumping it FWIW, not that I care that much one way or the other","msgtype":"m.text"},"ts":1591213368000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"michaelficarra: i think this was a response to how packed the agenda and there was a question asked to the room if things that missed the deadline should be deprioritized, and the answer was yes","msgtype":"m.text"},"ts":1591213369000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"since it was added late, this is grounds for not allowing it to move forward due to a technicality, and it might not be a good use of time","msgtype":"m.text"},"ts":1591213415000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"we could ask if anyone feels it should be skipped for this reason before starting, but I don't think it's appropriate to assume that it would not be a good use of our time","msgtype":"m.text"},"ts":1591213529000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I would like Intl.Segmenter to be prioritized if possible","msgtype":"m.text"},"ts":1591213559000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Chrome is getting ready to ship it","msgtype":"m.text"},"ts":1591213564000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"But it would be awkward to ship a Stage 2 proposal","msgtype":"m.text"},"ts":1591213573000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"It's been ready for Stage 3 for a few months, but it just never got added to the agenda","msgtype":"m.text"},"ts":1591213591000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"will it truly take 30 minutes? could consider slipping it in as a smaller timeslot","msgtype":"m.text"},"ts":1591213609000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"could it be shorter?","msgtype":"m.text"},"ts":1591213617000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it already got the ok from zibi so we are fine with it","msgtype":"m.text"},"ts":1591213626000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"the problem is it was added to the agenda after the deadline, so the team didn't review it","msgtype":"m.text"},"ts":1591213637000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and i don't want that to become acceptable practice.","msgtype":"m.text"},"ts":1591213643000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"We could timebox it for 10-15 minutes, and attempt for Stage 2","msgtype":"m.text"},"ts":1591213654000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"that deadline for advancement is really important","msgtype":"m.text"},"ts":1591213660000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I agree about the deadline being important","msgtype":"m.text"},"ts":1591213681000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"attempt for *Stage 3*","msgtype":"m.text"},"ts":1591213692000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"chrome is preparing to ship it, that is a little strange for stage 2 no?","msgtype":"m.text"},"ts":1591213726000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I mean, it's implemented, but I think Frank won't flip the bit until it gets to Stage 3 at TC39","msgtype":"m.text"},"ts":1591213759000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"i have to say i am not comfortable with having something shoe horned in. we are lucky that zibi had been working on this so much so we are already invested","msgtype":"m.text"},"ts":1591213806000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that isn't true for all delegates","msgtype":"m.text"},"ts":1591213809000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"just because something is ready for stage 3 for a long time doesn't necessarily mean people have checked it for review","msgtype":"m.text"},"ts":1591213829000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: if that is the case, you are completely justified in rejecting advancement","msgtype":"m.text"},"ts":1591213838000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"that said, overall, we don't have an issue","msgtype":"m.text"},"ts":1591213841000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I don't want you to feel pressured","msgtype":"m.text"},"ts":1591213856000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I agree the principle may be more important here, even if the thing is totally uncontroversial","msgtype":"m.text"},"ts":1591213881000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(i.e. I'd actually like to see it advance now rather than later but I'd prioritize the principle)","msgtype":"m.text"},"ts":1591213910000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's plenty of things we discuss that aren't up for advancement","msgtype":"m.text"},"ts":1591213983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah ... it was added on thursday last week which only gives 1 full day for review","msgtype":"m.text"},"ts":1591213994000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"even if advancement is off the table due to not enough review time, discussing the item could still be valuable","msgtype":"m.text"},"ts":1591213997000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we could discuss it, but would that be a good use of time if it doesn't advance?","msgtype":"m.text"},"ts":1591214027000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"fwiw I am totally on board with the chairs making that kind of call","msgtype":"m.text"},"ts":1591214038000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1591214043000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"that's really up to the champions i'd think? as i said above, tons of things are worth the time even when they don't request advancement.","msgtype":"m.text"},"ts":1591214049000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if advancement is the main criteria, then we shouldn't have any items that aren't advancement requests","msgtype":"m.text"},"ts":1591214064000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think it's appropriate to leave it up to the chairs when it means the difference between completing the agenda or not","msgtype":"m.text"},"ts":1591214087000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the intention when adding that deadline was to not obstruct people's ability to add discussions even at the last minute","msgtype":"m.text"},"ts":1591214106000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'd support changing the agenda rules to say that anything added after the advancement deadline is deprioritized even if it isn't looking to advance, absent some particular reason it is time-sensitive","msgtype":"m.text"},"ts":1591214133000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"iow, it's not to prevent the need for someone to block based on the deadline; it's to make that blocking low-cost","msgtype":"m.text"},"ts":1591214135000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we also review the agenda after the deadline to make sure we know what we think about all of the topics on the agenda","msgtype":"m.text"},"ts":1591214150000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wsdferdksl: https://github.com/bslassey/privacy-budget","msgtype":"m.text"},"ts":1591214153000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: if we got consensus on that (like we did on the original deadline) then that seems fine to me too","msgtype":"m.text"},"ts":1591214155000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and we don't have that for things added after the deadline","msgtype":"m.text"},"ts":1591214156000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we do the same as bakkot","msgtype":"m.text"},"ts":1591214181000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"understood, and while review's always helpful, and for some is critical to permit advancement, that doesn't mean that lack of review should block the discussion","msgtype":"m.text"},"ts":1591214217000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"stage 1-seeking proposals don't even have to provide materials","msgtype":"m.text"},"ts":1591214228000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but they should >_<","msgtype":"m.text"},"ts":1591214240000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb ehhhhhhhhh","msgtype":"m.text"},"ts":1591214245000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did we not finish that discussion?","msgtype":"m.text"},"ts":1591214251000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think it should deprioritize the discussion","msgtype":"m.text"},"ts":1591214252000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sure. and \"should\", but not \"must\", was an explicitly chosen difference.","msgtype":"m.text"},"ts":1591214254000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they do now? they require a proposal","msgtype":"m.text"},"ts":1591214254000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"there was a thread","msgtype":"m.text"},"ts":1591214254000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think browser TC39 representatives have been monitoring browser fingerprinting concerns; at least that's been the case in ECMA-402","msgtype":"m.text"},"ts":1591214269000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah I know we had a full PR...","msgtype":"m.text"},"ts":1591214274000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ystartsev: yes we changed it recently to \"Such proposals must link to a proposal repository and they should link to supporting materials when possible.\"","msgtype":"m.text"},"ts":1591214276000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i don't have to have anything in the repo","msgtype":"m.text"},"ts":1591214279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/tc39/process-document/pull/26","msgtype":"m.text"},"ts":1591214285000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ok but we are getting into a digression","msgtype":"m.text"},"ts":1591214304000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Bakkot: I would prefer we continue to prioritise by stage, regardless of when the item was added or whether it is looking for advancement, so that we continue to make progress on reducing our in-progress work","msgtype":"m.text"},"ts":1591214304000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ah true, that requires the repo \"capture the above requirements\"","msgtype":"m.text"},"ts":1591214304000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry for the digression","msgtype":"m.text"},"ts":1591214329000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra except it is difficult to make progress on things when there isn't time for people to review htem","msgtype":"m.text"},"ts":1591214334000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sometimes difficult. and not impossible.","msgtype":"m.text"},"ts":1591214352000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and that seems like something the champions should be able to judge?","msgtype":"m.text"},"ts":1591214358000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe not as productive as they could have been, but I doubt the champion would bring it forward if they didn't think it could be useful","msgtype":"m.text"},"ts":1591214363000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"hallway track definitely keeps cutting off audio, anyone else seeing that","msgtype":"m.text"},"ts":1591215682000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not happening for me","msgtype":"m.text"},"ts":1591215728000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"oof, so much for 26 C; it's now 33","msgtype":"m.text"},"ts":1591216972000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: i confirmed internally with some folks that the 'type' attribute should suffice for the web use cases currently","msgtype":"m.text"},"ts":1591219921000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: awesome, great to hear!","msgtype":"m.text"},"ts":1591219948000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: (of course, the formulation where it's up to the host to process the value)","msgtype":"m.text"},"ts":1591219967000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the value of the 'type' key","msgtype":"m.text"},"ts":1591219972000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, agreed","msgtype":"m.text"},"ts":1591219975000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"while we disagree on the signals that ecma262 do or should send, i believe we understand each other, and i'm more than happy to move forward with the check-style only restriction","msgtype":"m.text"},"ts":1591220134000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i did realize i have one evaluator i want somewhat badly, `wrapToAvoidThenable=true`","msgtype":"m.text"},"ts":1591220474000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: that seems like it only applies to dynamic import, and would be the same Module object, it just would wrap it in a container. not just a \"check\" to be sure, but i'm not sure that qualifies as an evaluator either","msgtype":"m.text"},"ts":1591220575000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"import.wrapped() would be fine to me","msgtype":"m.text"},"ts":1591220604000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"big oof @ thenables","msgtype":"m.text"},"ts":1591221201000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ystartsev: the spec hasn't changed since team review from last time when the Mozilla objection was withdrawn","msgtype":"m.text"},"ts":1591221255000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"but I realized that Intl.Segmenter stage 3 official review #2 is still pending and so advancement will/would be conditional upon that anyway. But there is an important issue to discuss that stretches beyond this specific proposal and should be discussed if there's time: https://docs.google.com/presentation/d/1Pe9eVhgK93cgB3KCufTQvzqCjIYj3RRxJaOeNIbWN_A/edit#slide=id.g87b4869bad_0_0","msgtype":"m.text"},"ts":1591221312000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I'm willing to defer because I did miss the deadline, but fwiw the requirement is \"must be added (and noted as such) *along with the necessary materials* prior to the deadline\", and every meeting there are always tons of slides and spec text slipping in to an otherwise empty placeholder slot after the deadline","msgtype":"m.text"},"ts":1591221416000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"wow, it could've been called @@copyConstructor, huh","msgtype":"m.text"},"ts":1591228309000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that would've been way less \"I have zero idea what this word will be used to mean\"-inducing than @@species :p","msgtype":"m.text"},"ts":1591228338000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]