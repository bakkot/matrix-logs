[
{"content":{"body":"shu: would my item methods CL be good to continue with the new consensus?","msgtype":"m.text"},"ts":1605760844000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yep, should be a simple rename","msgtype":"m.text"},"ts":1605760875000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"cooleo","msgtype":"m.text"},"ts":1605760881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: rename is `at` right? notes don't say","msgtype":"m.text"},"ts":1605760987000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yep, at","msgtype":"m.text"},"ts":1605761008000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if that is also not web compat, i floated itemAt and didn’t hear any opposition","msgtype":"m.text"},"ts":1605761027000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"fyi https://trac.webkit.org/changeset/270005/webkit","msgtype":"m.text"},"ts":1605761070000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm gonna just call this flag `--harmony-indexing-methods`","msgtype":"m.text"},"ts":1605761116000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"relative-indexing?","msgtype":"m.text"},"ts":1605761196000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`Genesis::InitializeGlobal_harmony_relative_indexing_methods` probably not the longest method name but its up there","msgtype":"m.text"},"ts":1605761241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean \"at method\" is unlikely to clash with another feature proposal tbh","msgtype":"m.text"},"ts":1605761298000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i just don't want to rename the flag again, it causes v8 to fully rebuild 😫","msgtype":"m.text"},"ts":1605761338000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Have we started?","msgtype":"m.text"},"ts":1605776227000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"2 mins until we start","msgtype":"m.text"},"ts":1605776319000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"we have started hax with Extensions for Stage 1","msgtype":"m.text"},"ts":1605776578000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I appreciate how well the history of this proposal was researched","msgtype":"m.text"},"ts":1605777597000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yeah same, ⭐️gold star⭐️ for haxjs the research is fantastic","msgtype":"m.text"},"ts":1605777796000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"Why did the administrator disable video?","msgtype":"m.text"},"ts":1605777804000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1605777813000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"On Teams.","msgtype":"m.text"},"ts":1605777832000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"\"Video sharing is disabled by the administrator.\"","msgtype":"m.text"},"ts":1605777841000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"sounds like a bug or something. recommend restart client i guess?","msgtype":"m.text"},"ts":1605777851000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"Restarting the client fixed it.","msgtype":"m.text"},"ts":1605777938000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1605777952000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"I wonder how feasible overriding `.` dispatch might be in JS if we used syntax similar to some of these other languages, especially if we're considering something like `with operators from M`, would `with extensions from M` allow implementations to optimize property lookup given what's known about the lexical scope and current running environment, or would this be just as bad as legacy `with (x) {}`?","msgtype":"m.text"},"ts":1605778436000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"okay 1::px is a pretty cool use","msgtype":"m.text"},"ts":1605778583000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1 michaelficarra's queue item","msgtype":"m.text"},"ts":1605778645000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"At one point I proposed infix `'` for that kind of notation, which is something C++ considered (i.e., `1'px`)","msgtype":"m.text"},"ts":1605778646000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"sorry i'm late, forgot to set an alarm :-/","msgtype":"m.text"},"ts":1605778797000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think this proposal is much too worked out for this early stage, but I'm pretty excited for how much mileage we can get out of a single feature","msgtype":"m.text"},"ts":1605778918000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i've taken the opposite gut reaction about readability than the intended one","msgtype":"m.text"},"ts":1605778969000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"haxjs: is there a slides iink?","msgtype":"m.text"},"ts":1605778981000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We also could have gotten that from the prior `::` bind proposal, or the various `|>` proposal versions.","msgtype":"m.text"},"ts":1605778982000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it is in the notes","msgtype":"m.text"},"ts":1605778989000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"rricard: thanks","msgtype":"m.text"},"ts":1605778995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"http://johnhax.net/2020/tc39-nov-ext/slide","msgtype":"m.text"},"ts":1605779001000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"i.e., `1|>px` is just as terse.","msgtype":"m.text"},"ts":1605779009000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I mean pipeline is cool too","msgtype":"m.text"},"ts":1605779073000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"rbuckton: i would be uncomfortable for this to coexist with pipeline proposals at stage 2+","msgtype":"m.text"},"ts":1605779093000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is already a different way to do dispatch","msgtype":"m.text"},"ts":1605779102000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: they are different precedence, which makes uage considerably different","msgtype":"m.text"},"ts":1605779116000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"to add to the matrix a different way to do function composition as well only compounds my readability worries","msgtype":"m.text"},"ts":1605779116000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: you should state your concerns about the proposal overlap though, because I agree it should at least be researched and addressed","msgtype":"m.text"},"ts":1605779179000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1605779191000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: `::` and `|>` (F# style) are similar operators except that `::` calls the RHS with the LHS as `this`, and `|>` calls the RHS with the LHS as the first argument. They both serve a need, although I do see `|>` being more flexible (regardless of the version).","msgtype":"m.text"},"ts":1605779239000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"the point is that it's easier to convert `this` to an argument than vice versa, right?","msgtype":"m.text"},"ts":1605779360000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"`o::f()` to bind `this` is much shorter than the partial application approach of `o |> f.call(?)`","msgtype":"m.text"},"ts":1605779391000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"and actually more powerful, since Function.prototype.call is deniable","msgtype":"m.text"},"ts":1605779451000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Very good point, gibson042. I am always very aware of that and saving my own copies of such built-ins for these purposes. Would love to not have to do that.","msgtype":"m.text"},"ts":1605779578000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Though I've had other thoughts on how the `::` token could be used in absence of bind/call. I've been thinking about native events and event subscription in a way that can work with either `EventTarget` and `EventEmitter`. Using `::` for events has some slight precedent due to JScript's old `function window::onload() {}` syntax (though what I'm considering is nothing along those lines).","msgtype":"m.text"},"ts":1605779647000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"gibson042: is this not deniable?","msgtype":"m.text"},"ts":1605779774000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gibson042: i thought there was a hooking point via @@extension proposed but i was sleepy","msgtype":"m.text"},"ts":1605779783000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmm, maybe I misunderstood","msgtype":"m.text"},"ts":1605779815000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"maybe i did as well","msgtype":"m.text"},"ts":1605779822000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think that's for the ternary variant.","msgtype":"m.text"},"ts":1605779843000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"s/./?","msgtype":"m.text"},"ts":1605779859000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"what is the ternary variant again?","msgtype":"m.text"},"ts":1605779866000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`a :: b : c ()`","msgtype":"m.text"},"ts":1605779878000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah that part that introduced a new protocol lost me as well","msgtype":"m.text"},"ts":1605779885000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"okay i completely missed that, what does that do","msgtype":"m.text"},"ts":1605779888000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Looks up `c` via `b` somehow.","msgtype":"m.text"},"ts":1605779893000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"did i also miss an explanation of why `const ::foo =` is needed?","msgtype":"m.text"},"ts":1605779928000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(ie, why a special identifier form)","msgtype":"m.text"},"ts":1605779937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yes","msgtype":"m.text"},"ts":1605779968000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: thanks, can someone tldr, or give me a few words to grep for in the notes?","msgtype":"m.text"},"ts":1605779988000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we may touch on it again with waldemar's topic","msgtype":"m.text"},"ts":1605779995000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1605780002000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1605780003000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I share shu's concern","msgtype":"m.text"},"ts":1605780004000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb I've been trying to grok <http://johnhax.net/2020/tc39-nov-ext/slide#10>","msgtype":"m.text"},"ts":1605780024000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i entered the queue because of it","msgtype":"m.text"},"ts":1605780034000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I believe `|>` is far more flexible than `::`. Hopefully we can eventually sort out the `|>` variants.","msgtype":"m.text"},"ts":1605780050000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"drousso: that slide also confuses me, i'll wait for your queue item","msgtype":"m.text"},"ts":1605780088000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan: to be clear, the committee discussion i recall was that *stage 2* for pipeline would constitute deciding that most of the bind operator did not proceed, it certainly wouldn't block stage 1 for this proposal","msgtype":"m.text"},"ts":1605780119000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"s/block/obstruct","msgtype":"m.text"},"ts":1605780128000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That slide, with pipeline/papp would just be `o |> Ext.method(?, ...args)`","msgtype":"m.text"},"ts":1605780149000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"The difference is precedence.","msgtype":"m.text"},"ts":1605780165000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ah right, I agree with this all, sorry for my misunderstanding","msgtype":"m.text"},"ts":1605780200000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"mostly I wanted to clarify the status of pipeline; sorry for getting off on that tangent","msgtype":"m.text"},"ts":1605780232000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I do think it's a good idea to talk through these scenarios, and don't want to foreclose on that either!","msgtype":"m.text"},"ts":1605780261000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"relevant notes: https://github.com/tc39/notes/blob/7b2de881081abd34b02bc87bcdb662fd97555795/meetings/2017-09/sept-26.md#11iia-pipeline-operator","msgtype":"m.text"},"ts":1605780288000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"conclusion \"Before Stage 2: investigate strawman for method extraction, which may simply be prefix form of ::\"","msgtype":"m.text"},"ts":1605780298000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Clarifying regarding what dan just mentioned in case anyone is unclear on mozilla's position: at the moment -- we don't see enough use cases for pipeline operator at present. After careful review of the syntax benefit, and the examples in the propsals, it became clear that there are existing ways to address the ergonomics concerns that are solved by the pipeline operator. We already have an implementation of","msgtype":"m.text"},"ts":1605780303000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"pipeline -- its not an implementation concern -- we are not convinced that this is worth its weight.","msgtype":"m.text"},"ts":1605780303000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"At some point I'd like to bring pipeline back to plenary.","msgtype":"m.text"},"ts":1605780311000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"iow, only the unary form of the bind operator was expected to proceed after/if pipeline hit stage 2","msgtype":"m.text"},"ts":1605780314000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for me, the big thing that makes this not extension methods is that it can't dispatch on the receiver","msgtype":"m.text"},"ts":1605780377000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"The pipeline form that's easily reproduced using `_` and `,` is less flexible than the one I am hoping for, and is a mess for static type systems since you are constantly having to evolve the type of the `_` topic.","msgtype":"m.text"},"ts":1605780409000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"my go-to example for pipeline is \"construct a map by filtering entries from another map\": `map |> Array.from |> (entries => entries.filter(fn)) |> (filtered => new Map(filtered))`. It suffers a little from cumbersome concise functions, but I think bind is even worse for it: `(map::pipe(Array.from)).filter(fn)::(function(){ return new Map(this) })` (suffering from cumbersome full functions, _and_ also requires keyboard backtr","msgtype":"m.text"},"ts":1605780416000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"+1 to waldemar's concern about rift","msgtype":"m.text"},"ts":1605780440000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1 as well","msgtype":"m.text"},"ts":1605780521000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"this (and pipeline, tbh) strikes as favoring writability over readability for those who are opinionated about they want composed code to look, but perhaps i'm missing something","msgtype":"m.text"},"ts":1605780592000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1 also","msgtype":"m.text"},"ts":1605780599000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"about how they*","msgtype":"m.text"},"ts":1605780600000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1605780603000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"let _;","msgtype":"m.text"},"ts":1605780604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"let a = (","msgtype":"m.text"},"ts":1605780604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  _= map,","msgtype":"m.text"},"ts":1605780604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  _= Array.from(_),","msgtype":"m.text"},"ts":1605780604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  _= _.filter(fn),","msgtype":"m.text"},"ts":1605780604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  _= new Map(_),","msgtype":"m.text"},"ts":1605780605000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  _);","msgtype":"m.text"},"ts":1605780605000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1605780606000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Works but hard to correctly type `_`. The two other variants of pipeline have more power and flexibility.","msgtype":"m.text"},"ts":1605780606000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"+1 to what shu said","msgtype":"m.text"},"ts":1605780618000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"also, honestly this just feels like a fancy way of saying `Function.prototype.call` :/","msgtype":"m.text"},"ts":1605780636000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: that's actually a thing that we need","msgtype":"m.text"},"ts":1605780697000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tcq feature request: close the queue (except for points of order)","msgtype":"m.text"},"ts":1605780698000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"drousso: since `.call` can be deleted/forged","msgtype":"m.text"},"ts":1605780706000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: that's the \"method extraction\" part of the old bind operator","msgtype":"m.text"},"ts":1605780715000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"IMO that's not something that should be solved by the language","msgtype":"m.text"},"ts":1605780727000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i also think that having something be unforgeable is a possibly bad thing","msgtype":"m.text"},"ts":1605780747000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: the unary form actually provides an unforgeable `.bind`, which means you can use normal call approaches, to be more accurate","msgtype":"m.text"},"ts":1605780761000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd suggest a temp check for the separate namespace, but that's a stage 1 concern so we shouldn't discuss it now","msgtype":"m.text"},"ts":1605780823000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I would also but agreee with ljharb","msgtype":"m.text"},"ts":1605780836000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: I think it just needs more research at this point","msgtype":"m.text"},"ts":1605780844000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i also have similar concerns about the rift raised by wsdferdksl","msgtype":"m.text"},"ts":1605780845000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"michaelficarra: agreed","msgtype":"m.text"},"ts":1605780848000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"+1 to clarifying the relationship","msgtype":"m.text"},"ts":1605780877000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think it's legitimate to see this as \"taking over\" that other proposal","msgtype":"m.text"},"ts":1605780888000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: that is not even close to a stage 1 concern","msgtype":"m.text"},"ts":1605780894000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's not a Stage 1 concern, we just have to clarify this as a committee","msgtype":"m.text"},"ts":1605780907000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think we should decide, as a committee, that this subsumes that other proposal","msgtype":"m.text"},"ts":1605780921000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this follows the process in our process doc to take over a dropped proposal","msgtype":"m.text"},"ts":1605780933000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"That's fine. I just wanted to make sure. We didn't fork `|>` into 3 proposals, and we've had other proposals that we've said need to be combined in the past.","msgtype":"m.text"},"ts":1605780940000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"haxjs in the future, could you please make sure to include a link to your slides in the agenda before the first day of meeting begins?","msgtype":"m.text"},"ts":1605781251000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: oh. sorry i forgot to add link!","msgtype":"m.text"},"ts":1605781291000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"other than js module blocks, and extensions, has anything advanced a stage this meeting that i overlooked?","msgtype":"m.text"},"ts":1605781316000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: other than links, do you have any examples of when the proposals repo has not been up to date or correct by the end of a given plenary?","msgtype":"m.text"},"ts":1605781357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1605781396000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"JSCIG HEROES","msgtype":"m.text"},"ts":1605781405000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"I think it's really important that subgroups of TC39 be formed openly, by informing the committee in the Reflector, so that everyone who wants to can participate. I was unaware of the JSCIG","msgtype":"m.text"},"ts":1605781448000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"JSCIG formed independently","msgtype":"m.text"},"ts":1605781517000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"sure, I'm suggesting that when things form, the committee is kept in the loop","msgtype":"m.text"},"ts":1605781543000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"is data being out of date a problem?","msgtype":"m.text"},"ts":1605781614000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yes","msgtype":"m.text"},"ts":1605781638000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"not just out of date, but different data sources disagreeing with each other","msgtype":"m.text"},"ts":1605781650000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"different data sources within tc39/ ?","msgtype":"m.text"},"ts":1605781677000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"doesn't designating a single source of truth (which we've done) ensure eventual consistency?","msgtype":"m.text"},"ts":1605781680000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: chinese interest group, you can remove your queue item","msgtype":"m.text"},"ts":1605781690000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"iow, the source of truth is plenary, which the notes document, and the proposals repo includes","msgtype":"m.text"},"ts":1605781694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: was it in the notes?","msgtype":"m.text"},"ts":1605781700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: i missed the explanation if so","msgtype":"m.text"},"ts":1605781711000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh, not sure","msgtype":"m.text"},"ts":1605781721000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"not sure if there was an explanation other than that's what it stands for","msgtype":"m.text"},"ts":1605781723000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we can add a parenthetical after its first use in the notes","msgtype":"m.text"},"ts":1605781732000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I don't think this is trying to change how we make decisions/what the \"source of truth\" is, but more ensure that the decisions are propagated to documentation sources properly, so we can avoid confusing people","msgtype":"m.text"},"ts":1605781793000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1605781801000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's what i'm confused about, who is confused by what","msgtype":"m.text"},"ts":1605781828000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: can i give you a teams ipad app complaint to take to the right people? :-)","msgtype":"m.text"},"ts":1605781829000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like a README for a particular proposal being out of date?","msgtype":"m.text"},"ts":1605781842000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the proposals repo, notes, proposal repos, and website, all owned by TC39, sometimes disagree with each other","msgtype":"m.text"},"ts":1605781853000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this is a current problem","msgtype":"m.text"},"ts":1605781861000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: specifically, a VC call isn't a phone call, and tapping my airpods (which happens by accident) shouldn't hang up my meeting and cause me to leave it.","msgtype":"m.text"},"ts":1605781864000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"people get confused in practice, frequently","msgtype":"m.text"},"ts":1605781868000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"proposal repos sometimes lag, this is true","msgtype":"m.text"},"ts":1605781878000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, that i agree with for individual proposal repos lagging","msgtype":"m.text"},"ts":1605781888000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"notes and the proposals repo, modulo links which change of their own accord, have remained in sync as far as i'm aware","msgtype":"m.text"},"ts":1605781894000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and modulo minor human errors which occasionally occur, ofc)","msgtype":"m.text"},"ts":1605781917000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"as Yulia is explaining, there's lots of important information. I've definitely seen human errors. The goal here is to address the errors.","msgtype":"m.text"},"ts":1605781932000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm a big fan of this proposal","msgtype":"m.text"},"ts":1605781958000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"me toooooooo","msgtype":"m.text"},"ts":1605781973000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"it's certainly true that we have disagreements between the proposals repo and test262 in terms of documenting status","msgtype":"m.text"},"ts":1605782196000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"where the proposals repo makes it soundl ike there isn't test coverage","msgtype":"m.text"},"ts":1605782214000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: ah, fair, \"has tests\" is something that also lags","msgtype":"m.text"},"ts":1605782317000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's something that's been left to proposal champions (or the test PR author) and does get missed not infrequently","msgtype":"m.text"},"ts":1605782350000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I have a list I've been maintaining. I'll add that to it.","msgtype":"m.text"},"ts":1605782370000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: thanks","msgtype":"m.text"},"ts":1605782389000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, I think that's an accurate explanation of what's happening, and I like Yulia's efforts to improve it","msgtype":"m.text"},"ts":1605782520000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the note takers aren't just rushed currently, they often just skip the conclusion entirely","msgtype":"m.text"},"ts":1605782677000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"robpalme: akirose: could i get the usual 10-15 mins for incubator call chartering?","msgtype":"m.text"},"ts":1605782681000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"didn't see it on the TCQ agenda","msgtype":"m.text"},"ts":1605782692000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it seems reasonable, after each item, to explicitly checklist that the notes have a conclusion","msgtype":"m.text"},"ts":1605782698000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my b. yes shu.","msgtype":"m.text"},"ts":1605782711000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"notetakers already often ask to verify that sometimes","msgtype":"m.text"},"ts":1605782712000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1605782719000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah and writing down the conclusion helps us solidify our own understanding as well, it's a win-win","msgtype":"m.text"},"ts":1605782770000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1605782778000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think the idea is just to formally ask the note takers \"are you ready\" before proceeding to the next topic.","msgtype":"m.text"},"ts":1605782781000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"seems like a good idea anyway","msgtype":"m.text"},"ts":1605782806000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"ljharb: i agree with your point about individual repos lagging and shouldn't be source of truth, my take on that is why even include stage info in the individual repos then","msgtype":"m.text"},"ts":1605782816000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Have we considered YAML frontmatter in markdown? I don't think github supports it currently, but we could ask. A lot of doc tools use YAML frontmatter with markdown, so its not a stretch to consider.","msgtype":"m.text"},"ts":1605782825000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"make a little pill or something that just displays the proposals repo info","msgtype":"m.text"},"ts":1605782828000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: that sounds like an amazing countersuggestion, let's do that","msgtype":"m.text"},"ts":1605782842000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: altho it is useful for the individual proposal's ecmarkup build to contain the stage number","msgtype":"m.text"},"ts":1605782864000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that could be done via ecmarkup as well","msgtype":"m.text"},"ts":1605782874000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sold","msgtype":"m.text"},"ts":1605782879000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"even easier, really, with ecmarkup","msgtype":"m.text"},"ts":1605782880000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"than telling champions to copy/paste something into README.md","msgtype":"m.text"},"ts":1605782889000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But the README itself wouldn't contain it?","msgtype":"m.text"},"ts":1605782894000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: it would, but it'd require copy/pasting some pill code like CI status pills, instead of actually saying \"stage: N\"","msgtype":"m.text"},"ts":1605782913000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: unless frontmatter could be used to autogenerate the relevant prose, it'd be annoying to enter it twice. also since i'm usually the one updating the list, i hate yaml :-p","msgtype":"m.text"},"ts":1605782917000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That has the downside of having to look somewhere else to understand proposal status when looking at the proposal itself.","msgtype":"m.text"},"ts":1605782921000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: Ah, that's not a bad idea.","msgtype":"m.text"},"ts":1605782926000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: anyway please suggest that in my stead during your item, i don't wanna extend the queue","msgtype":"m.text"},"ts":1605782948000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: done","msgtype":"m.text"},"ts":1605782955000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"There's one issue though. If stage consensus is reached pending changes (which has happened numerous times), it could be misleading if the README update for the changes lags behind the stage status in the main proposals repo. That could cause confusion.","msgtype":"m.text"},"ts":1605782994000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1605783038000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"There should be a single source of truth, but it might be better for that to be the proposal itself.","msgtype":"m.text"},"ts":1605783039000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"proposal champions are in no way consistent enough about updating the proposal repo for that to be a good idea, unfortunately","msgtype":"m.text"},"ts":1605783064000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: that's a good point, yes","msgtype":"m.text"},"ts":1605783065000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Otherwise you have to stage two changes, one for the repo AND one for the /proposals repo, which we have to do anyways.","msgtype":"m.text"},"ts":1605783065000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: but no worse than status quo, i guess?","msgtype":"m.text"},"ts":1605783082000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: guilty, unfortunately.","msgtype":"m.text"},"ts":1605783089000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ystartsev: my queue item ran out of time, but for reference: \"individual proposal repos are much slower to update than the main list; they should not become the source of truth\"","msgtype":"m.text"},"ts":1605783094000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: The same idea about CI status pills applies, if the source of truth is the repo and the pill appears on `/proposals` instead.","msgtype":"m.text"},"ts":1605783119000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"akirose: Were you going to drop a link in the chat here?","msgtype":"m.text"},"ts":1605783245000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ljharb: noted -- as mentioned in the slides, the \"proposal\" repo will read from \"proposals\" -- a given individual proposal repo would be the detailed information, and gather it's meta data from the \"proposals\" repository","msgtype":"m.text"},"ts":1605783246000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"littledan: in the call","msgtype":"m.text"},"ts":1605783255000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"but here https://snaps.akibraun.com/dbzqq.png","msgtype":"m.text"},"ts":1605783257000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ystartsev: ah ok, i thought the arrow on that case pointed in the opposite direction","msgtype":"m.text"},"ts":1605783282000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah thats the one case where the arrow points in the other direction, i should have done the diagram differently","msgtype":"m.text"},"ts":1605783308000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Two TCQ suggestions: 1. Let chairs scroll through the agenda history and reintroduce previous topics (i.e., drag/drop or cut/copy/paste). 2. When the mouse is over the button chairs use to advance the queue, \"lock\" the UI so that clicking a button doesn't accidentally advance the queue if the speaker clicks the \"i'm done speaking\" button causing the race condition we saw earlier.","msgtype":"m.text"},"ts":1605783383000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: https://github.com/bterlson/tcq","msgtype":"m.text"},"ts":1605783428000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"Yeah, I'll file them.","msgtype":"m.text"},"ts":1605783449000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: file them? send PRs :-P","msgtype":"m.text"},"ts":1605783476000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh snap it's on github 🤯","msgtype":"m.text"},"ts":1605783527000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"dandclark: did your queue item get skipped?","msgtype":"m.text"},"ts":1605783738000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that's not even a microsoft-funded project. if i understand correctly it's an off-hours bterlson special","msgtype":"m.text"},"ts":1605783766000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"I mean, they employ bterlson and they own GitHub, so…","msgtype":"m.text"},"ts":1605783927000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: Last time I talked to bterlson about it (about a month ago) he said TCQ needed some updates before features could be added. I was fairly surprised to see the room temp functionality, tbh.","msgtype":"m.text"},"ts":1605784012000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think yulia contributed it","msgtype":"m.text"},"ts":1605784028000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"And that was just to fix the issue with the login redirect losing the current meeting ID (which seems to have been fixed since)","msgtype":"m.text"},"ts":1605784064000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"was rpamely pro-mutable or pro-immutable?","msgtype":"m.text"},"ts":1605784081000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: pro-immutable","msgtype":"m.text"},"ts":1605784087000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah i think they fixed that after robpalme broke the database","msgtype":"m.text"},"ts":1605784087000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"er, or whoever just talked","msgtype":"m.text"},"ts":1605784088000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1605784089000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"immuble","msgtype":"m.text"},"ts":1605784092000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"bakkot: stop transcribe","msgtype":"m.text"},"ts":1605784384000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"as always won't be able to work on notes during the second part","msgtype":"m.text"},"ts":1605784418000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"isn't the immutable form achievable with an intermediate `import data from ...; export default Object.freeze(data)`?","msgtype":"m.text"},"ts":1605784580000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I snuck in a `Json` -> `JSON` auto-correct just before that section, if anyone was wondering why it suddenly stopped doing that","msgtype":"m.text"},"ts":1605784597000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think we'll end up with a pretty extensive collection of such corrections over time, which hopefully will improve the experience","msgtype":"m.text"},"ts":1605784622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042 yeah, people mentioned that a few times. (though the deep freeze is a little more painful than just that)","msgtype":"m.text"},"ts":1605784655000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, right. Yep.","msgtype":"m.text"},"ts":1605784689000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"the same is true of mutable, of course, just with `import data from ...; export default JSON.parse(JSON.stringify(data))`","msgtype":"m.text"},"ts":1605784712000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(which sounds ugly but is probably faster than a deep freeze)","msgtype":"m.text"},"ts":1605784720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Let's continue the discussion about mutability in https://github.com/tc39/proposal-json-modules/issues/1#issuecomment-730305544","msgtype":"m.text"},"ts":1605784887000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"my position on mutability continues to be that there are very good arguments for both sides and hence I am ok with either outcome","msgtype":"m.text"},"ts":1605784944000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah I guess I feel that way too","msgtype":"m.text"},"ts":1605784960000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"are we sure that `JSON.parse(JSON.stringify(data))` is guaranteed to return exactly the same data in this case? I'm wondering in particular about numerical precision","msgtype":"m.text"},"ts":1605785074000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I hope so!!!","msgtype":"m.text"},"ts":1605785091000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"numerical precision is not an issue, I guarantee","msgtype":"m.text"},"ts":1605785092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and, yeah, even if you have a `toJSON` property in your data it can't be a function","msgtype":"m.text"},"ts":1605785212000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so yes, I am confident it is guaranteed to return exactly the same data","msgtype":"m.text"},"ts":1605785223000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even property enumeration order is guaranteed to be the same now :D","msgtype":"m.text"},"ts":1605785238000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"phew!","msgtype":"m.text"},"ts":1605785382000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we are starting now!","msgtype":"m.text"},"ts":1605787317000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"PDF beautification seems like a most legit budget ask from ecma, they remain the main stakeholder for caring about PDFs anyhow","msgtype":"m.text"},"ts":1605787931000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"FYI: Since there won't be time to address this during this meeting, if anyone would like to discuss mitigations for performance in RegExp Match Indices, I've filed https://github.com/tc39/proposal-regexp-match-indices/issues/47 as a place to discuss the possible alternatives.","msgtype":"m.text"},"ts":1605788612000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: i was gonna propose an incubator call for it for personal reasons","msgtype":"m.text"},"ts":1605788663000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i want the engines and champions to just hash it out","msgtype":"m.text"},"ts":1605788681000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since it's been stage 3 for a while and now that we have 2 engines' experience i want us to zero in on a solution quickly","msgtype":"m.text"},"ts":1605788697000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"That's fine with me as well. And I completely agree.","msgtype":"m.text"},"ts":1605788706000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"though that's somewhat an abuse of the incubator call mechanism","msgtype":"m.text"},"ts":1605788779000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe i'll just schedule a one-off call","msgtype":"m.text"},"ts":1605788788000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"let's do that instead","msgtype":"m.text"},"ts":1605788790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"That works for me as well.","msgtype":"m.text"},"ts":1605788825000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"drousso or whoever's taking notes, please try to attribute using the assigned abbreviations, not just the initials of the speaker","msgtype":"m.text"},"ts":1605789642000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yeah im trying but i dont know them all 😅","msgtype":"m.text"},"ts":1605789655000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i was gonna go back and fix it later","msgtype":"m.text"},"ts":1605789660000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"michaelficarra is there a list somewhere of the mappings?","msgtype":"m.text"},"ts":1605790164000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: https://github.com/tc39/notes/blob/master/delegates.txt","msgtype":"m.text"},"ts":1605790296000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's linked at the top of the notes","msgtype":"m.text"},"ts":1605790301000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"awesome ty\\","msgtype":"m.text"},"ts":1605790304000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1605790305000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"PRs welcome but it's faster to just tell me them and I can try to hotswap it during a pause in audio","msgtype":"m.text"},"ts":1605790362000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i feel like hte thing to do would be to give error cause ten minutes and start batch preloading five minutes late","msgtype":"m.text"},"ts":1605790485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I was thinking the same thing","msgtype":"m.text"},"ts":1605790524000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i strongly suspect error cause could get stage 2 in ten minutes","msgtype":"m.text"},"ts":1605790543000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not a large design space","msgtype":"m.text"},"ts":1605790546000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just because you've requested 60 minutes max doesn't mean you're entitled to 60 minutes min","msgtype":"m.text"},"ts":1605790547000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's a reasonable expectation","msgtype":"m.text"},"ts":1605790759000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I've been wondering if we need something like ECMA-402 for RegExp. There are a lot of things that I and others have expressed interest in adding to RegExp and it might be worth having a regular discussion about all of these ideas, if not an actual separate group.","msgtype":"m.text"},"ts":1605790787000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i'd like to see more subgroups in general","msgtype":"m.text"},"ts":1605790819000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hard to see us scaling otherwise as many folks have pointed out in the past","msgtype":"m.text"},"ts":1605790841000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, cause is a string, not an optional error?","msgtype":"m.text"},"ts":1605790884000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"wonder why","msgtype":"m.text"},"ts":1605790905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu https://github.com/tc39/proposal-error-cause#differences-with-aggregateerror","msgtype":"m.text"},"ts":1605790971000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no, cause is an optional error","msgtype":"m.text"},"ts":1605790975000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the default property does not make sense","msgtype":"m.text"},"ts":1605790980000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I commented on the issue","msgtype":"m.text"},"ts":1605790983000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not a string","msgtype":"m.text"},"ts":1605790990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: k","msgtype":"m.text"},"ts":1605791062000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I am a big fan of the idea of signed exchanges (no experience using/implementing them), and I'd love to know why Dan doesn't like them","msgtype":"m.text"},"ts":1605792125000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I don't understand the tracking concerns that Dan is talking about","msgtype":"m.text"},"ts":1605792355000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if a request for a module is authenticated (or otherwise identified), can't the actions of that script be similarly identified?","msgtype":"m.text"},"ts":1605792382000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh okay, I think he means like HTTP-level tracking, accomplished by just associating the request with the identifier","msgtype":"m.text"},"ts":1605792766000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: To see examples of Dan's concerns about SXG: https://brave.com/webbundles-harmful-to-content-blocking-security-tools-and-the-open-web/","msgtype":"m.text"},"ts":1605793319000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"ystartsev: can you get Ted Campbell added to delegates.txt?","msgtype":"m.text"},"ts":1605793504000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1605793508000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"michaelficarra: can we use TCL for now and i will adjust if its already in use?","msgtype":"m.text"},"ts":1605793537000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"nice, TCL","msgtype":"m.text"},"ts":1605793545000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"who's speaking? for the notes","msgtype":"m.text"},"ts":1605793655000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yoav Weiss","msgtype":"m.text"},"ts":1605793670000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"YWS i think is what i added to delegates, let me check","msgtype":"m.text"},"ts":1605793677000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yep, YWS","msgtype":"m.text"},"ts":1605793696000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(from Google)","msgtype":"m.text"},"ts":1605793710000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"can someone copy the mentioned link to the notes?","msgtype":"m.text"},"ts":1605793914000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Copied from Yoav here: https://docs.google.com/document/d/11t4Ix2bvF1_ZCV9HKfafGfWu82zbOD7aUhZ_FyDAgmA/edit#","msgtype":"m.text"},"ts":1605793917000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Bakkot: ^","msgtype":"m.text"},"ts":1605793921000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"(sorry don't ahve notes open)","msgtype":"m.text"},"ts":1605793932000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"later all","msgtype":"m.text"},"ts":1605794538000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hope that wasn't too little ceremony","msgtype":"m.text"},"ts":1605794551000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"less ceremony more sleep wfm","msgtype":"m.text"},"ts":1605794564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that was a lot of notes","msgtype":"m.text"},"ts":1605794622000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Brave's blog post is about WebBundles, not really about signed exchange","msgtype":"m.text"},"ts":1605795517000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"This post is more aligned with my concerns https://trib.tv/2019/05/28/cake-or-death-amp-and-the-worrying-power-dynamics-of-the-web/","msgtype":"m.text"},"ts":1605795569000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but really, I just wanted to underscore that this proposal does not enable signed exchange; it's just unrelated","msgtype":"m.text"},"ts":1605795582000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I still don't understand the extension proposal syntax","msgtype":"m.text"},"ts":1605795583000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: \"amp is for the carousel\" is a good summary","msgtype":"m.text"},"ts":1605795636000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michelficarra: You can find Apple's tracking concern at https://github.com/WICG/webpackage/issues/422","msgtype":"m.text"},"ts":1605795776000,"senderName":"littledan","senderId":"littledan@irc"}
]