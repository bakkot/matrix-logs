[
{"content":{"body":"how do people feel about something like bufferlist for Uint8Arrays?","msgtype":"m.text"},"ts":1597256246000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"would this make sense for TC39? maytbe a whatwg thing?","msgtype":"m.text"},"ts":1597256257000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"https://www.npmjs.com/package/bl","msgtype":"m.text"},"ts":1597256278000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins I can't entirely tell what that does?","msgtype":"m.text"},"ts":1597256379000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this was something that was created to work with Node.js buffers","msgtype":"m.text"},"ts":1597256390000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"if you are receiving a stream of buffers you can use the bl interface to compile them into a list of buffers and operate on them","msgtype":"m.text"},"ts":1597256408000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"Deno is starting to implement their own approach to buffers / solving groups of buffers","msgtype":"m.text"},"ts":1597256420000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I'm on the fence if this should be a language feature (and as such WHATWG might be more appropriate)","msgtype":"m.text"},"ts":1597256445000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"so like","msgtype":"m.text"},"ts":1597256501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"optimized TypedArray concat?","msgtype":"m.text"},"ts":1597256501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've had a need for this when automating and concatenating output from child processes","msgtype":"m.text"},"ts":1597256528000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"if you simply turn the buffer to string you can end up converting a buffer that has partial data","msgtype":"m.text"},"ts":1597256558000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"so the buffer list allows you to collect all the buffers that make up the message before converting to string","msgtype":"m.text"},"ts":1597256571000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"i've had use cases of being able to combine Maps/Sets without iterating over all of them, or WeakMaps/WeakSets, which can't be iterated over; which seems like the same kind of \"lazy combination wrapper\" as bufferlist?","msgtype":"m.text"},"ts":1597257073000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do you want a StringBuffer, but for Buffers? like a BufferBuffer?","msgtype":"m.text"},"ts":1597257111000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also unclear on why this needs to be a language feature","msgtype":"m.text"},"ts":1597257195000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm assuming performance","msgtype":"m.text"},"ts":1597257231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"typedarray.p.set is not ideal","msgtype":"m.text"},"ts":1597257239000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's really annoying to implement a WeakSet that also wraps existing WeakSets","msgtype":"m.text"},"ts":1597257258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"totally doable, but not trivial","msgtype":"m.text"},"ts":1597257263000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"are we talking about weaksets or buffers","msgtype":"m.text"},"ts":1597257271000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm talking about buffers","msgtype":"m.text"},"ts":1597257283000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also unclear you get performance benefits with a generic lazy combination buffer","msgtype":"m.text"},"ts":1597257287000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lol sorry, i guess i bogarted the topic a bit, let's go back to buffers","msgtype":"m.text"},"ts":1597257289000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: isn't there already a set union proposal","msgtype":"m.text"},"ts":1597257295000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: set, not weakset","msgtype":"m.text"},"ts":1597257303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"open an issue i gus","msgtype":"m.text"},"ts":1597257311000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"guess","msgtype":"m.text"},"ts":1597257312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: we have Buffer.concat in node for a reason :P","msgtype":"m.text"},"ts":1597257339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MylesBorins there might be something here but I'm not entirely sure what problems you have that this solves, which makes it hard to tell","msgtype":"m.text"},"ts":1597257359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: and that reason is?","msgtype":"m.text"},"ts":1597257373000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if the motivation is _just_ converting to strings, it sounds like a thing for TextEncoder (it could take a list of buffers instead of just a buffer), which is (somewhat unfortunately) a WHATWG thing","msgtype":"m.text"},"ts":1597257379000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"its faster to make c++ do it","msgtype":"m.text"},"ts":1597257409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i take this all back Buffer.concat was ported to js","msgtype":"m.text"},"ts":1597257443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MylesBorins I am definitely on board with adding more stuff for working with buffers in general though","msgtype":"m.text"},"ts":1597257488000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so at a very very high level thing here","msgtype":"m.text"},"ts":1597257550000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"node has Buffer.concat","msgtype":"m.text"},"ts":1597257564000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"the ecosystem has stuff like bl","msgtype":"m.text"},"ts":1597257570000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"deno is starting to solve this problem too","msgtype":"m.text"},"ts":1597257575000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"(I'm not as familliar with front end problems that might need this type of solution)","msgtype":"m.text"},"ts":1597257594000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"but avoiding environments from continuing to diverge is a huge goal to me","msgtype":"m.text"},"ts":1597257605000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"if the problem is quickly making a new buffer from some existing buffers, sounds like it would be a good proposal, yeah","msgtype":"m.text"},"ts":1597257614000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Buffer itself has already diverged","msgtype":"m.text"},"ts":1597257616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think \"is this a language feature\" is a super fair question","msgtype":"m.text"},"ts":1597257619000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"and why I'm not 100% convinced 262 is the right venue","msgtype":"m.text"},"ts":1597257634000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"would the ability to concat ArrayBuffers ease transition from node buffers to ArrayBuffers? (which are pretty different ergonomically)","msgtype":"m.text"},"ts":1597257646000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu TBH I'm not as deep into this part of the code base, so solid maybe","msgtype":"m.text"},"ts":1597257667000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"so i see two divergence problems: deno and node, and server and front-end","msgtype":"m.text"},"ts":1597257680000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i *think* my feeling about the Buffer polyfill is that it's a scourage?","msgtype":"m.text"},"ts":1597257693000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"scourge","msgtype":"m.text"},"ts":1597257694000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I got pinged by Mikeal Rogers about this, specifically because he is seeing all the work we are having to do in node to tease us off buffer","msgtype":"m.text"},"ts":1597257724000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"and seeing deno head in the same direction","msgtype":"m.text"},"ts":1597257725000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"\"tease us off buffer\" -> where does node wanna go?","msgtype":"m.text"},"ts":1597257737000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in terms of buffer we'd rather just use normal Uint8Arrays","msgtype":"m.text"},"ts":1597257760000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, I defer to the devsnek here ::P","msgtype":"m.text"},"ts":1597257844000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"the thing is","msgtype":"m.text"},"ts":1597257854000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when we hit some sort of usability problem along that pathway","msgtype":"m.text"},"ts":1597257861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the question is whether its a problem with uint8array or a problem with node","msgtype":"m.text"},"ts":1597257880000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think that's sort of what myles meant above?","msgtype":"m.text"},"ts":1597257890000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the specific concat and BL cases, it does smell like a pre-generalized solution that mainly cares about strings. is that accurate?","msgtype":"m.text"},"ts":1597257974000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu not neccessarily","msgtype":"m.text"},"ts":1597257988000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"strings were just the example I have personal experience with","msgtype":"m.text"},"ts":1597257996000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"my understanding is that folks who work with streaming interfaces use bl extensively as an intermediary format for the incoming data","msgtype":"m.text"},"ts":1597258017000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"that gets into a separate domain of streams","msgtype":"m.text"},"ts":1597258067000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"streams utilize this, even emitters utilize this as well","msgtype":"m.text"},"ts":1597258094000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"if you have an emitter or a async iterable that is returning buffers you may want to deal with them as an opitmized list","msgtype":"m.text"},"ts":1597258120000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"as opposed to shove them all in an array and concat later","msgtype":"m.text"},"ts":1597258127000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"i guess i'm also missing what is the optimization opportunity","msgtype":"m.text"},"ts":1597258141000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the individual buffers are still all there and observable?","msgtype":"m.text"},"ts":1597258155000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I've asked mikeal to give me more examples","msgtype":"m.text"},"ts":1597258204000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"tbh I'm serving much more as a middle person here","msgtype":"m.text"},"ts":1597258205000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"the individual buffers are still there","msgtype":"m.text"},"ts":1597258392000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ideally this would be more like preallocating a buffer and passing it to the api","msgtype":"m.text"},"ts":1597258406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but js doesn't have resizable buffer types yet","msgtype":"m.text"},"ts":1597258415000,"senderName":"devsnek","senderId":"devsnek@irc"}
]