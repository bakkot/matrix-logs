[
{"content":{"body":"sick","msgtype":"m.text"},"ts":1621901794000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gotcha, it wasn't a impl or static analysis concern but a this syntax is gross concern","msgtype":"m.text"},"ts":1621902355000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"the funny thing is that while I'm glad `for (x of 0, [1,2,3])` is not valid, it actually seems less confusing since `of` isn't just usable in any old expression","msgtype":"m.text"},"ts":1621903183000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ooh, official jitsi app","msgtype":"m.text"},"ts":1621961722000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jitsi iphone app works great","msgtype":"m.text"},"ts":1621962695000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I can't attend the meeting  because I have some health issue recent days and doctors warn me not burn the midnight oil (it's my 1:20AM now). I raised an issue about top-level await (https://github.com/tc39/proposal-top-level-await/issues/182 ), and hope the committee could at least aware that. Thank you.","msgtype":"m.text"},"ts":1621963410000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: i'll make sure it's brought up","msgtype":"m.text"},"ts":1621963440000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TC39 beta \"space\" (more slack-/discord-like) link: https://matrix.to/#/!hmsRHUEXriRovkvcin:matrix.org?via=matrix.org&via=igalia.com&via=mozilla.org","msgtype":"m.text"},"ts":1621965546000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"question about strict mode and Function.prototype.arguments. `arguments` getter is `ThrowTypeError` for strict mode functions, does `Function.prototype` exotic-function-object count as a strict mode function?","msgtype":"m.text"},"ts":1621976574000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"ah, if I am correct, the answer lies in https://tc39.es/ecma262/#sec-createintrinsics, step 4 implies that Function.prototype has throwing versions of those properties defined on them explicitly, so it doesn't matter whether or not a \"built-in\" exotic-function-object `Function.prototype` is strict or not","msgtype":"m.text"},"ts":1621976829000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: i mean, `Function.prototype.arguments` throws","msgtype":"m.text"},"ts":1621976833000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1621976843000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"awesome thanks for the gut check","msgtype":"m.text"},"ts":1621976863000,"senderName":"rickbutton","senderId":"rickbutton@irc"}
]