[
{"content":{"body":"wait for real? https://github.com/tc39/test262/blob/main/test/built-ins/Error/cause_property.js#L37","msgtype":"m.text"},"ts":1620349968000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why would there be a difference between explicit `undefined` and non-existence in a options bag?","msgtype":"m.text"},"ts":1620350051000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: differentiates between an error with no cause and one with a cause of `undefined`?","msgtype":"m.text"},"ts":1620350150000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"perhaps, a “undefined is not a function” error :-p","msgtype":"m.text"},"ts":1620350170000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1620350175000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it's not null","msgtype":"m.text"},"ts":1620350178000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, is there any precedent for that anywhere in the language?","msgtype":"m.text"},"ts":1620350190000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"for presence and undefined being different? tons. it’s the first options bag tho","msgtype":"m.text"},"ts":1620350257000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's the thing","msgtype":"m.text"},"ts":1620350290000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(non-intl, at least)","msgtype":"m.text"},"ts":1620350298000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"cause, and temporal, and growable array buffer, and import assertions, might be the first options bags, whichever lands first?","msgtype":"m.text"},"ts":1620350322000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the way userland treats options bags does often pívot on presence and not undefined, i think","msgtype":"m.text"},"ts":1620350369000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that would be shocking to me as a user","msgtype":"m.text"},"ts":1620350394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...assuming it resulted in anything noticeable","msgtype":"m.text"},"ts":1620350413000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean, in this case if you don’t differentiate between absent and undefined, error.cause will be undefined either way, so I’m not sure why it makes a difference :-)","msgtype":"m.text"},"ts":1620350433000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because an implementation has to create a property descriptor for no reason whatsoever","msgtype":"m.text"},"ts":1620350464000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh, you’re not talking about “it’s absent when absent” you’re surprised it’s present when undefined?","msgtype":"m.text"},"ts":1620350511000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the Get is observable","msgtype":"m.text"},"ts":1620350529000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah like that's a userland object that may have been reused","msgtype":"m.text"},"ts":1620350549000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it seems strange to me to do the Get and not make the property","msgtype":"m.text"},"ts":1620350562000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why would setting to undefined not be equivalent to deletion","msgtype":"m.text"},"ts":1620350563000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"from the API's standpoint","msgtype":"m.text"},"ts":1620350573000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"because it’s not, for many things?","msgtype":"m.text"},"ts":1620350576000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"anything using Object.keys/entries/values, or object spread/rest, will see the key if it’s present and undefined, but won’t if it’s absent","msgtype":"m.text"},"ts":1620350606000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean yeah cases of enumeration are supposed to be the time where it makes a difference","msgtype":"m.text"},"ts":1620350645000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"typically you don’t mutate objects either; you make a new one that lacks the property you don’t want","msgtype":"m.text"},"ts":1620350649000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I’m not sure why someone would mutate but not delete","msgtype":"m.text"},"ts":1620350660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this isn't enumerating anything, it's reaching in and taking action on undefined","msgtype":"m.text"},"ts":1620350671000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I mean that was the old norm","msgtype":"m.text"},"ts":1620350679000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don’t think it was","msgtype":"m.text"},"ts":1620350689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it absolutely was","msgtype":"m.text"},"ts":1620350695000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the old norm was delete. Then it shifted to “copy”","msgtype":"m.text"},"ts":1620350697000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we have a whole webkit blog post about \"hey it's no longer unperformant to use delete\"","msgtype":"m.text"},"ts":1620350713000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the period of time where deletion was thought of as bad and mutation was also not thought of as bad is either very short or nonexistent","msgtype":"m.text"},"ts":1620350720000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well sure. But long before that came out, mutation fell out of vogue","msgtype":"m.text"},"ts":1620350733000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that there’s old code that’s now faster is great, but doesn’t affect user expectations imo","msgtype":"m.text"},"ts":1620350753000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"okay fine but it doesn't have to be a matter of reuse","msgtype":"m.text"},"ts":1620350784000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"iow, that optimization was years too late to actually cause users to like using `delete`","msgtype":"m.text"},"ts":1620350786000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(here I’m arguing against “setting to undefined as deletion” as a justification; unrelated to whether we care about presence vs undefined or not)","msgtype":"m.text"},"ts":1620350876000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if you were simply filtering existing options then you're not expecting setting undefined to do anything","msgtype":"m.text"},"ts":1620350899000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`{ foo: originalOptions.foo }` or something","msgtype":"m.text"},"ts":1620350945000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"true. but I’d expect you to spread the original object, and overwrite what you wanted, rather than doing it one at a time","msgtype":"m.text"},"ts":1620350972000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"either way tho, having an own undefined cause property, versus lacking one - when do you expect that to cause a problem for users doing this?","msgtype":"m.text"},"ts":1620350998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't, I just see no benefit to having a property descriptor get created","msgtype":"m.text"},"ts":1620351036000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if there's not a precedent for it then it seems like taking conscious action where none was desired","msgtype":"m.text"},"ts":1620351064000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right, so for these users, no difference - but for users who do care, the presence or absence of a property descriptor actually communicates something useful.","msgtype":"m.text"},"ts":1620351114000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unfortunately since we decided not to do an internal slot and a prototype accessor, this kind of choice comes up, but i think matching own-ness between the options bag and the error instance is actually a useful property.","msgtype":"m.text"},"ts":1620351182000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it shouldn't?","msgtype":"m.text"},"ts":1620351191000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, I would call it harmful if it's viewed as not extraneous but usable","msgtype":"m.text"},"ts":1620351214000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's undefined not null","msgtype":"m.text"},"ts":1620351219000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why is that different","msgtype":"m.text"},"ts":1620351248000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Both are explicit values","msgtype":"m.text"},"ts":1620351251000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the belief that one means “explicitly empty” and one means “never set” is decidedly not a universal one (optional chaining and nullish coalescing operate on both, because of this)","msgtype":"m.text"},"ts":1620351279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how are you seeing optional chaining and nullish coalescing as supporting your point","msgtype":"m.text"},"ts":1620351331000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it is not expected for mere existence to affect anything but enumeration","msgtype":"m.text"},"ts":1620351435000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"a user has no other way to opt out using an object literal","msgtype":"m.text"},"ts":1620351464000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"anyway I am completely exhausted and I didn't come here to debate minutiae; it genuinely seems like a bug, if there's no precedent to say otherwise","msgtype":"m.text"},"ts":1620351582000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"people code in different ways","msgtype":"m.text"},"ts":1620351589000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this is not expected behavior","msgtype":"m.text"},"ts":1620351594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i hear that you don't expect it","msgtype":"m.text"},"ts":1620351717000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i very much do","msgtype":"m.text"},"ts":1620351719000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i write code all the time that checks hasOwnProperty","msgtype":"m.text"},"ts":1620351736000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"was this ever pointed out in committee?","msgtype":"m.text"},"ts":1620352095000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, if this is going to be the thing to set the precedent then having such a conversation seems like a stage 4 blocker","msgtype":"m.text"},"ts":1620352137000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm, not sure. If we didn’t explicitly decide it tho then i don’t think it could be a binding precedent really. I’ll try and find something in the notes and repo tho","msgtype":"m.text"},"ts":1620352246000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/tc39/proposal-error-cause/pull/26#discussion_r583989100","msgtype":"m.text"},"ts":1620352922000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling ljharb ^","msgtype":"m.text"},"ts":1620352929000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and also https://github.com/tc39/proposal-error-cause/issues/2#issuecomment-789375512","msgtype":"m.text"},"ts":1620353011000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1620353232000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that is fascinatingly weird","msgtype":"m.text"},"ts":1620353236000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but that rationale combined with the knowledge that shu also brought this up makes me somewhat less queasy","msgtype":"m.text"},"ts":1620353360000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: are you concerned with this setting a precedent for options bag options in general though, even though the motivation here has nothing to do with that?","msgtype":"m.text"},"ts":1620353402000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no, not especially","msgtype":"m.text"},"ts":1620353413000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1620353418000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like temporal has a bunch of options-bag-like cases and they all just do `get`","msgtype":"m.text"},"ts":1620353561000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g.","msgtype":"m.text"},"ts":1620353567000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is fine, because they are not in the situation that \"undefined\" is a sensible value for the option to take plus also having different behavior for presence and absence of the option","msgtype":"m.text"},"ts":1620353602000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's a fairly unique scenario","msgtype":"m.text"},"ts":1620353607000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do want it to serve as precedent for options bags which meet both of those criteria, because I think it's the right behavior there","msgtype":"m.text"},"ts":1620353635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1620353955000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"can you envision another (hypothetical) example?","msgtype":"m.text"},"ts":1620353968000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not off the top of my head","msgtype":"m.text"},"ts":1620354166000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"most places are at least a little bit typed","msgtype":"m.text"},"ts":1620354175000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the only reason this one isn't is because it's intended for use with existing untyped syntax","msgtype":"m.text"},"ts":1620354211000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(namely throw/catch)","msgtype":"m.text"},"ts":1620354220000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1620354726000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: thanks for finding that","msgtype":"m.text"},"ts":1620354768000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i do agree that when `undefined` isn't a reasonable real value for an option - which will be almost every other case - then it should just do a Get","msgtype":"m.text"},"ts":1620354848000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"perhaps we should introduce a 3rd nullish type to mean absent","msgtype":"m.text"},"ts":1620400658000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we can even name it *empty* so it's easily confused with ~empty~ in the spec","msgtype":"m.text"},"ts":1620400669000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`nil`","msgtype":"m.text"},"ts":1620400704000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"will there be a separate concept of \"nilish\" vs \"nullish\"?","msgtype":"m.text"},"ts":1620400762000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then we can extend the JS trinity diagram","msgtype":"m.text"},"ts":1620400791000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i am reminded of https://github.com/BrendanEich/nil (which brendan resurrected but didn't create)","msgtype":"m.text"},"ts":1620400863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh my goodness, that toString semantics","msgtype":"m.text"},"ts":1620400971000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"could I get a blessing here plz https://github.com/tc39/notes/pull/123","msgtype":"m.text"},"ts":1620407820000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: i have edits. should I open a PR on your fork's branch?","msgtype":"m.text"},"ts":1620410006000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ljharb: don't merge yet! i mean, you can, but 👆","msgtype":"m.text"},"ts":1620410035000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"nah was just stamping per request","msgtype":"m.text"},"ts":1620410113000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll let yall handle it","msgtype":"m.text"},"ts":1620410133000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I won't merge. Please use suggestions on the PR.","msgtype":"m.text"},"ts":1620416381000,"senderName":"robpalme","senderId":"robpalme@irc"}
]