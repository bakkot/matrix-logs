[
{"content":{"body":"(whining aside though, it'll probably be beneficial to have a more structured schedule for a bit, lol)","msgtype":"m.text"},"ts":1590971077000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: congrats! Don’t stress out to much, it will probably be better to focus on the onboarding and take some rest if necessary instead of much of TC39 stuff. Don’t let the FOMO take out your energy.","msgtype":"m.text"},"ts":1590977366000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"morning all","msgtype":"m.text"},"ts":1591022830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mornin'","msgtype":"m.text"},"ts":1591023105000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"TCQ: https://tcq.app/meeting/KfmX","msgtype":"m.text"},"ts":1591023301000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"meeting info link in the topic is outdated. should be https://github.com/tc39/Reflector/issues/279","msgtype":"m.text"},"ts":1591023401000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"thank you Rob :)","msgtype":"m.text"},"ts":1591023508000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"did anyone create notes docs already? happy to update the short URLs again","msgtype":"m.text"},"ts":1591023573000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens they're in the reflector, yeah","msgtype":"m.text"},"ts":1591023696000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also reminder to all not to link the notes here, in this publicly logged channel","msgtype":"m.text"},"ts":1591023709000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't see them in https://github.com/tc39/Reflector/issues/279","msgtype":"m.text"},"ts":1591023731000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i see, #294","msgtype":"m.text"},"ts":1591023754000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"good morning everyone :-)","msgtype":"m.text"},"ts":1591024008000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Good morning! :)","msgtype":"m.text"},"ts":1591024111000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"if you call on me next, I can give my standard IPR disclaimer","msgtype":"m.text"},"ts":1591024125000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I imagine Istvan's thing is not what was being asked about","msgtype":"m.text"},"ts":1591024135000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"akirose: ^","msgtype":"m.text"},"ts":1591024149000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"akirose: your headphones 😂","msgtype":"m.text"},"ts":1591024155000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"so fetch","msgtype":"m.text"},"ts":1591024162000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591024178000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"littledan: you kind of look like you're interrogating us with that light :p","msgtype":"m.text"},"ts":1591024200000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"heh I don't have my awesome coworking space setup","msgtype":"m.text"},"ts":1591024216000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"my partner is planning on building a nice planter behind me and hanging up some of his art so it can show up in my video calls, but I guess we didn't plan for the light","msgtype":"m.text"},"ts":1591024249000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that sounds nice though :)","msgtype":"m.text"},"ts":1591024311000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"did you just say mancy","msgtype":"m.text"},"ts":1591024410000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mancy","msgtype":"m.text"},"ts":1591024423000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i'm confused about this slides sharing","msgtype":"m.text"},"ts":1591025785000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"*i* can control the slide?","msgtype":"m.text"},"ts":1591025791000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1591025815000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"deep powerpoint integration probably","msgtype":"m.text"},"ts":1591025820000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"that is too much power","msgtype":"m.text"},"ts":1591025822000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait when i'm jumping around","msgtype":"m.text"},"ts":1591025826000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"am i making it jump around for other viewers, or just myself","msgtype":"m.text"},"ts":1591025833000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's not jumping for us","msgtype":"m.text"},"ts":1591025834000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1591025835000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"whew","msgtype":"m.text"},"ts":1591025837000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you can peek ahead","msgtype":"m.text"},"ts":1591025843000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"I assume that doesn't work for Google Slides","msgtype":"m.text"},"ts":1591025895000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I would assume that yes","msgtype":"m.text"},"ts":1591025930000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"you can always export your slides in ppt","msgtype":"m.text"},"ts":1591025945000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"presumably one would need to actually have ppt lying around for that to do you any good","msgtype":"m.text"},"ts":1591026020000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think I have used a machine with ppt since high school","msgtype":"m.text"},"ts":1591026029000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, teams is a ppt viewer apparently, neat","msgtype":"m.text"},"ts":1591026071000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fwiw i literally just uploaded Istvan's ppt that he had emailed to the chair straight to the teams client","msgtype":"m.text"},"ts":1591026316000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"no ppt.app launched","msgtype":"m.text"},"ts":1591026326000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"phew, irc is working again","msgtype":"m.text"},"ts":1591026403000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(for me)","msgtype":"m.text"},"ts":1591026407000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"draft schedule link added to reflector#279","msgtype":"m.text"},"ts":1591026513000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"these editorial improvements are awesome!","msgtype":"m.text"},"ts":1591026876000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591026941000,"senderName":"marja_","senderId":"marja_@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591026982000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"thanks littledan :-)","msgtype":"m.text"},"ts":1591027313000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"akirose: *green heart emoji* been feeling similarly","msgtype":"m.text"},"ts":1591028615000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"100000%","msgtype":"m.text"},"ts":1591028635000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"is tcq showing everything or just stuff for today","msgtype":"m.text"},"ts":1591028792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"everything","msgtype":"m.text"},"ts":1591028803000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"we chew through as much of it as we can","msgtype":"m.text"},"ts":1591028811000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"it may not yet be fully populated but that is the intent","msgtype":"m.text"},"ts":1591028823000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1591028856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do we have that hackmd schedule this time around","msgtype":"m.text"},"ts":1591028873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this channel is public and should not have the notes doc linked in it","msgtype":"m.text"},"ts":1591028883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: we do","msgtype":"m.text"},"ts":1591028897000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"robpalme ^","msgtype":"m.text"},"ts":1591028902000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: the hackmd is on the reflector issue for the meeting, its at the top, \"Draft Schedule\"","msgtype":"m.text"},"ts":1591028903000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"robpalme: Bakkot should we move today's notes to another URL?","msgtype":"m.text"},"ts":1591028966000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ehhhh it's probably not worth worrying about","msgtype":"m.text"},"ts":1591028979000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can move it","msgtype":"m.text"},"ts":1591028988000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"either at lunch or eod","msgtype":"m.text"},"ts":1591028991000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1591029007000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"any preference?","msgtype":"m.text"},"ts":1591029013000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yeah, I agree that late agenda items should be deprioritized","msgtype":"m.text"},"ts":1591029247000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Isn't today a holiday in parts of Europe?","msgtype":"m.text"},"ts":1591029302000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: it is","msgtype":"m.text"},"ts":1591029342000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"that's likely the issue, I guess 😅","msgtype":"m.text"},"ts":1591029363000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"jridgewell I am glad/impressed you know those NamedEvaluation details off the top of your head","msgtype":"m.text"},"ts":1591029895000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just reviewed this change and I still don't","msgtype":"m.text"},"ts":1591029900000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"note that ease for polyfill doesn't correspond to ease for impl","msgtype":"m.text"},"ts":1591029907000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: to clarify, chrome is shipping it with or without the inferred name?","msgtype":"m.text"},"ts":1591029924000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: without currently, because it's not in the spec","msgtype":"m.text"},"ts":1591029944000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1591029949000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: if it is added, there is plenty of time to add it in before it hits stable","msgtype":"m.text"},"ts":1591029954000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1591029988000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: you had thoughts on the issue thread btw","msgtype":"m.text"},"ts":1591029998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ya","msgtype":"m.text"},"ts":1591030007000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i don't feel strongly","msgtype":"m.text"},"ts":1591030013000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i am slightly towards \"no\" because of the short circuiting behavior","msgtype":"m.text"},"ts":1591030035000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"short circuiting behavior actually leans towards yes, I think","msgtype":"m.text"},"ts":1591030066000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because with short circuiting it desugars to `a && a = function(){}`, which gets named","msgtype":"m.text"},"ts":1591030090000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the tricky part is that while that is the desugaring, it's not the current code you would write","msgtype":"m.text"},"ts":1591030123000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or `if (a) { a = function () {} }` which also gets named","msgtype":"m.text"},"ts":1591030127000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"+1 to what rkirsling","msgtype":"m.text"},"ts":1591030270000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"said","msgtype":"m.text"},"ts":1591030271000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"personally, I don't see the size of the Babel output, or the desugaring, as a very strong argument one way or another","msgtype":"m.text"},"ts":1591030279000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's more about the general pattern that, in these sort of direct syntax assignment cases ending in = or :, you do name assignment","msgtype":"m.text"},"ts":1591030299000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(sorry for caucusing before...)","msgtype":"m.text"},"ts":1591030316000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah, agreed with littledan","msgtype":"m.text"},"ts":1591030351000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, the conclusion was yes, go ahead with named evaluation?","msgtype":"m.text"},"ts":1591030435000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sounds like yes, infer the name, as long as implementors can commit to implementing that","msgtype":"m.text"},"ts":1591030469000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"petition to consider shorter lunch breaks the next three days","msgtype":"m.text"},"ts":1591031325000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"esp considering we're not all eating lunch at the same times when remote","msgtype":"m.text"},"ts":1591031346000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I just had breakfast, so I'm not going to eat lunch, so I'm just sitting around","msgtype":"m.text"},"ts":1591031347000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is iterator helpers happening now","msgtype":"m.text"},"ts":1591031776000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's a tech check","msgtype":"m.text"},"ts":1591031793000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"We're on break till the new hour","msgtype":"m.text"},"ts":1591031812000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1591031826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"***Note-takers and Note-readers*** Today's notes have been migrated.  Please find the new link here: https://github.com/tc39/Reflector/issues/279","msgtype":"m.text"},"ts":1591031895000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i'm gonna mention this when we reconvene, but… we have way, way more time on the agenda than we have meeting time. use that information as you will.","msgtype":"m.text"},"ts":1591032593000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"folks in the breakout room feel like a one-hour lunch break doesn't really make sense under all-remote conditions","msgtype":"m.text"},"ts":1591032830000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: as in, it's too long?","msgtype":"m.text"},"ts":1591033017000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591033036000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"as in, like, even if you're in the appropriate time zone you might not need that long of a block of time when you're connected remotely anyway","msgtype":"m.text"},"ts":1591033088000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I dunno, I just finished cooking lunch, don't have that much time to eat :-P","msgtype":"m.text"},"ts":1591033104000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"The difference being it's ok to mute yourself and eat as presentations are going on","msgtype":"m.text"},"ts":1591033235000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's a little different than when we're in person","msgtype":"m.text"},"ts":1591033244000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shorter break time sgtm","msgtype":"m.text"},"ts":1591033257000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Also the side discussions are much louder in-person, so having a long lunch break was nice","msgtype":"m.text"},"ts":1591033287000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"michaelficarra: are you around?","msgtype":"m.text"},"ts":1591033839000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Is anyone here well-connected enough to get us an invitation to Clubhouse for the hallway track? https://www.wired.com/story/what-is-clubhouse-why-does-silicon-valley-care/","msgtype":"m.text"},"ts":1591034184000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"\"a new social network more exclusive than Berghain\" AHAHAHAHAHAHAHAH","msgtype":"m.text"},"ts":1591034309000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"we are restarting in 1 minute!","msgtype":"m.text"},"ts":1591034320000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"starting now!","msgtype":"m.text"},"ts":1591034523000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"if there are questions about iterator helpers stuff i can address i'm watching the channel here but not actively listening to the call","msgtype":"m.text"},"ts":1591034696000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ppt integration seems much worse than the share-screen integration","msgtype":"m.text"},"ts":1591034831000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"akirose: `Intl.DurationFormat` is today according to https://hackmd.io/@tc39-chairs/rylG45f2L#1300-CDT, but it's not on the agenda.","msgtype":"m.text"},"ts":1591035095000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"yep..","msgtype":"m.text"},"ts":1591035096000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"these slides are really good","msgtype":"m.text"},"ts":1591035122000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Upstream iterator was never started either though","msgtype":"m.text"},"ts":1591035211000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"enclosing finally blocks around the current yield pause point are called by generator return  FWIW","msgtype":"m.text"},"ts":1591035222000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"eesh, i didn't realize the slides were advanced, i was stuck on slide 5. guess i'll open the link myself","msgtype":"m.text"},"ts":1591035253000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iterators don't get started","msgtype":"m.text"},"ts":1591035254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"generators get started","msgtype":"m.text"},"ts":1591035258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"... I think","msgtype":"m.text"},"ts":1591035263000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"iterator is just a protocol","msgtype":"m.text"},"ts":1591035275000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's no behaviour","msgtype":"m.text"},"ts":1591035281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the protocol doesn't involve a \"start\" phase, I think","msgtype":"m.text"},"ts":1591035289000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1591035299000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sure, but depending on .return to close upstream iterators isn't guaranteed either","msgtype":"m.text"},"ts":1591035367000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"s/close/\"return\"","msgtype":"m.text"},"ts":1591035378000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"not guaranteed, but it seems very strange to have a builtin which unconditionally prevents you from doing that","msgtype":"m.text"},"ts":1591035439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rather than deferring to the upstream","msgtype":"m.text"},"ts":1591035448000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Well, you might think of the first .next() call is more or less a \"start\" phase","msgtype":"m.text"},"ts":1591035531000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ryzokuken: working on it. bterlson & robpalme are debugging something","msgtype":"m.text"},"ts":1591035603000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"littledan: sure, but I wouldn't really expect that","msgtype":"m.text"},"ts":1591035621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can call .return before .next","msgtype":"m.text"},"ts":1591035625000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so it is reasonable to implement an iterator which is opened when it is obtained","msgtype":"m.text"},"ts":1591035642000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not when it is first queried","msgtype":"m.text"},"ts":1591035646000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, this case is weird","msgtype":"m.text"},"ts":1591035648000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and the builtins should work with that","msgtype":"m.text"},"ts":1591035652000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"akirose: thanks.","msgtype":"m.text"},"ts":1591035654000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"(I wouldn't expect to have .return/.throw at all, and have previously proposed that we remove all that from the iterator protocol, but maybe it's too late now)","msgtype":"m.text"},"ts":1591035676000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"there are many more slides","msgtype":"m.text"},"ts":1591035693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"To me its inconsistent to have a built-in that differs in behavior from what a user could normally accomplish with a generator.","msgtype":"m.text"},"ts":1591035703000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"whatwg streams make use of them, I think","msgtype":"m.text"},"ts":1591035704000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton why? generators are a convenient way of creating iterators, but not the only way","msgtype":"m.text"},"ts":1591035731000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Of course, generators are essentially \"lazy\" since no code runs until the first call to `.next()`.","msgtype":"m.text"},"ts":1591035753000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"jridgewell: it's iterator helpers, not iterable helpers","msgtype":"m.text"},"ts":1591035763000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"There's a constructor, no?","msgtype":"m.text"},"ts":1591035790000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`new IterableHelpers(set)`","msgtype":"m.text"},"ts":1591035803000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: I thought that was pretty new/not universally shipped. But iterator .return/.throw has been shipped everywhere for years","msgtype":"m.text"},"ts":1591035804000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"michaelficarra: I still think targeting *iterator* and not *iterable* is the wrong abstraction.","msgtype":"m.text"},"ts":1591035812000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"jridgewell: no","msgtype":"m.text"},"ts":1591035813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: every iterator-producing method in the spec already differs in that behavior.","msgtype":"m.text"},"ts":1591035814000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"littledan yeah, it's new. seems useful though!","msgtype":"m.text"},"ts":1591035816000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jridgewell: set.values().map()","msgtype":"m.text"},"ts":1591035823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ES6 itself wasn't consistent between iterator-producing methods, and \"what generators do\"","msgtype":"m.text"},"ts":1591035830000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"re: \"spec will be long\", fwiw we could cut down the duplicate spec text the way we do for typed arrays and errors","msgtype":"m.text"},"ts":1591035837000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jridgewell: no, though there is Iterator.from","msgtype":"m.text"},"ts":1591035853000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: i tried that, its still very long","msgtype":"m.text"},"ts":1591035862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because each one has very different logic","msgtype":"m.text"},"ts":1591035868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I would have almost preferred `new Iterable(set.values()).map()`.","msgtype":"m.text"},"ts":1591035868000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Does `Iterator.from` call `@@iterator`?","msgtype":"m.text"},"ts":1591035895000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1591035899000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1591035901000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1591035904000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Removed myself from the queue","msgtype":"m.text"},"ts":1591035928000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"devsnek: hm, that's surprising to me","msgtype":"m.text"},"ts":1591035951000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yield macro just calls GeneratorYield or AsyncGeneratorYield","msgtype":"m.text"},"ts":1591035955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no new machinery there","msgtype":"m.text"},"ts":1591035959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek were you using abstract closures?","msgtype":"m.text"},"ts":1591035962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i considered abstract closures","msgtype":"m.text"},"ts":1591035972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i didn't come up with anything fantastic there","msgtype":"m.text"},"ts":1591035979000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because with abstract closures you would just specify a State record and an abstract closure and .next would just invoke the abstract closure","msgtype":"m.text"},"ts":1591035995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's only flatmap which would be more than that, I think","msgtype":"m.text"},"ts":1591036007000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't want to make something that needs special cases","msgtype":"m.text"},"ts":1591036028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1591036033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't hate option 1: is there really a need to forward return/throw?","msgtype":"m.text"},"ts":1591036034000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"just from a principled perspective","msgtype":"m.text"},"ts":1591036035000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wrote package that essentially has these helpers over iterables:","msgtype":"m.text"},"ts":1591036037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```js","msgtype":"m.text"},"ts":1591036037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const { from } = require(\"iter-query\");","msgtype":"m.text"},"ts":1591036037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"from(set.values()).map(...)","msgtype":"m.text"},"ts":1591036037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591036037000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"It makes a lot more sense to me at that level, though I understand the want to attach these to `%IteratorPrototype%` for convenience.","msgtype":"m.text"},"ts":1591036038000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it's editorial","msgtype":"m.text"},"ts":1591036038000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think we need good ways to add stdlib behaviour","msgtype":"m.text"},"ts":1591036041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"without special casing everything","msgtype":"m.text"},"ts":1591036046000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't really think we should be optimizing for the spec being short","msgtype":"m.text"},"ts":1591036062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/don't really think we should/strongly believe we should not/","msgtype":"m.text"},"ts":1591036076000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1591036078000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm personally a fan of something like Option 1 (or at least, that uses `[@@iterator]`)","msgtype":"m.text"},"ts":1591036088000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it's not about being short as much as its about being consistent","msgtype":"m.text"},"ts":1591036088000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as the user-observable behavior is consistent, I don't know why we would care that much","msgtype":"m.text"},"ts":1591036104000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"option 3 is polyfillable btw","msgtype":"m.text"},"ts":1591036112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra it seems important that `.throw` and `.return` forward to the underlying iterators, personally","msgtype":"m.text"},"ts":1591036165000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like `iter().map(x => x)` should be as close as possible to `iter()`","msgtype":"m.text"},"ts":1591036185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"option 3 doesn't directly forward but it keeps the state consistent","msgtype":"m.text"},"ts":1591036198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it will call the methods, i mean","msgtype":"m.text"},"ts":1591036210000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is the difference between 2 and 3 other than editorial?","msgtype":"m.text"},"ts":1591036227000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in 2 they are plain objects that are iterators","msgtype":"m.text"},"ts":1591036252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in 3 they are actual generators","msgtype":"m.text"},"ts":1591036257000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, but specced using spec machinery instead of JS code?","msgtype":"m.text"},"ts":1591036270000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591036274000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"personally I like option 3 the best, and agree with this goal of avoiding special-casing.","msgtype":"m.text"},"ts":1591036359000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(just because we used one-off solutions each time in the past does'nt mean we need to keep doing that forever in the future...)","msgtype":"m.text"},"ts":1591036391000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I really don't think the presence of the methods should be conditional","msgtype":"m.text"},"ts":1591036397000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb ^","msgtype":"m.text"},"ts":1591036401000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1591036404000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"is bradford on IRC?","msgtype":"m.text"},"ts":1591036466000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"michaelficarra: i can understand that position for sure. but also APIs that consume iterators might be checking for the presence of those methods now, and taking simpler code paths when they're absent, so it might have an impact","msgtype":"m.text"},"ts":1591036468000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"agreed it might have an effect but I agree with michaelficarra anyway","msgtype":"m.text"},"ts":1591036495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: what do you think about async abstract operations","msgtype":"m.text"},"ts":1591036608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"abstract closures*","msgtype":"m.text"},"ts":1591036612000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek hmmm","msgtype":"m.text"},"ts":1591036628000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no inherent problem with them I guess","msgtype":"m.text"},"ts":1591036632000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would need to be defined","msgtype":"m.text"},"ts":1591036640000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"from outside, it'd just be a regular one that returned a promise","msgtype":"m.text"},"ts":1591036648000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems fine to me also","msgtype":"m.text"},"ts":1591036650000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no, more than that","msgtype":"m.text"},"ts":1591036666000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but that part of the spec could use our going over anyhow","msgtype":"m.text"},"ts":1591036678000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the part that actualy does the continuation wrapping in a promise","msgtype":"m.text"},"ts":1591036687000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it would definitely require spec work","msgtype":"m.text"},"ts":1591036705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I still wish the helpers went through `[@@iterator]` so they could be copied to other objects that are iterable. For all built-in iterators as well as generators, `[@@iterator]()` just returns `this`. Just depending on the presence of a `next` method makes me think of all of the issues with `then` we've had in the past.","msgtype":"m.text"},"ts":1591036768000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: i know it'd need lots more for \"inside\" the async abstract closure - i meant like from the callsites","msgtype":"m.text"},"ts":1591036808000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unfortunately I don't think we're going to come to a clear decision before this timebox is over :-(","msgtype":"m.text"},"ts":1591036824000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"rbuckton: the main concern is preventing people from getting into patterns that rely on @@iterator being reusable when it isn't","msgtype":"m.text"},"ts":1591036852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: Wait so would something like Symbol.generatorInitialize solve option 1?","msgtype":"m.text"},"ts":1591036858000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"what is Symbol.generatorInitialize","msgtype":"m.text"},"ts":1591036873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that is called when the generator function is first called","msgtype":"m.text"},"ts":1591036875000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"robpalme sorry got dropped","msgtype":"m.text"},"ts":1591036886000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"to validate args and stuff?","msgtype":"m.text"},"ts":1591036887000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what were you asking me?","msgtype":"m.text"},"ts":1591036891000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"keith_miller: how would i do that syntactically tho with regular generators","msgtype":"m.text"},"ts":1591036892000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1591036893000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ping jorendorff for that","msgtype":"m.text"},"ts":1591036893000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"pinging*","msgtype":"m.text"},"ts":1591036897000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"You'd have to have something like (function* myGenerator() { ... })[Symbol.initializeGenerator] = function init() { validate(arguments[0]); }","msgtype":"m.text"},"ts":1591036963000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"not saying it's pretty","msgtype":"m.text"},"ts":1591036970000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: but it would let you do stuff","msgtype":"m.text"},"ts":1591036980000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh no that wouldn't solve it actually","msgtype":"m.text"},"ts":1591037010000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"at the risk of making all calling of generators slower?","msgtype":"m.text"},"ts":1591037014000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Ah, ok","msgtype":"m.text"},"ts":1591037016000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"because you wont be able to forward properly","msgtype":"m.text"},"ts":1591037020000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I think you just write a function which invokes and generator and returns it","msgtype":"m.text"},"ts":1591037026000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ystartsev: the initialize could set up the forwarding","msgtype":"m.text"},"ts":1591037038000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"function f(){ validate(); return function*(){}(); } or whatever","msgtype":"m.text"},"ts":1591037044000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: I mean initializing generators is already crazy slow","msgtype":"m.text"},"ts":1591037053000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1591037053000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"that's what option 3 does","msgtype":"m.text"},"ts":1591037053000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1591037059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I think userland code would do the same thing if they want this","msgtype":"m.text"},"ts":1591037065000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1591037069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would do this?","msgtype":"m.text"},"ts":1591037075000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Or would make their equivalent of the polyfill?","msgtype":"m.text"},"ts":1591037093000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"well actually what i want is a way to create a generator that has no initial yield","msgtype":"m.text"},"ts":1591037097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean sure, this is just a hacky way to get that","msgtype":"m.text"},"ts":1591037124000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I don't think complicating generator functions even more is a good solution to this","msgtype":"m.text"},"ts":1591037128000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh no i don't think we should do that as part of this","msgtype":"m.text"},"ts":1591037140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"none of these options ask for that","msgtype":"m.text"},"ts":1591037150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean option 3 is effectively asking VMs to do it","msgtype":"m.text"},"ts":1591037198000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Options 2 and 3 seem to be regular functions that could return generator instances, which seems a better solution","msgtype":"m.text"},"ts":1591037205000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"so... for me there's no difference but I'm an implementor","msgtype":"m.text"},"ts":1591037211000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Giving more magic to generator functions makes the transform muchhh more complicated","msgtype":"m.text"},"ts":1591037237000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"did we get consensus to use option 3 there?","msgtype":"m.text"},"ts":1591037256000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I already don't want to maintain the regenerator transform","msgtype":"m.text"},"ts":1591037257000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"we didn't really get a conclusion here right?","msgtype":"m.text"},"ts":1591037283000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yeah that was weird","msgtype":"m.text"},"ts":1591037290000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wow how did we get this far down on the agenda?","msgtype":"m.text"},"ts":1591037298000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"time constraints?","msgtype":"m.text"},"ts":1591037310000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"afaik the point of that presentation was to get consensus on how we should proceed","msgtype":"m.text"},"ts":1591037333000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not sure how option 3 forward  the arg of first next call (which function.sent need)?","msgtype":"m.text"},"ts":1591037335000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: StartIteratorHelper calls .next() once","msgtype":"m.text"},"ts":1591037349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is why %SyncMap% starts with a Yield()","msgtype":"m.text"},"ts":1591037360000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Can't find it in https://gist.github.com/jorendorff/35504c2553170be98fc2810ccf60c608 🤔","msgtype":"m.text"},"ts":1591037462000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: the value is lost there","msgtype":"m.text"},"ts":1591037475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's not option 3","msgtype":"m.text"},"ts":1591037482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's Option 1, I think","msgtype":"m.text"},"ts":1591037488000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Iterator.prototype = {","msgtype":"m.text"},"ts":1591037529000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"  map(mapper) {","msgtype":"m.text"},"ts":1591037529000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"    let it = SyncMap(this, mapper);","msgtype":"m.text"},"ts":1591037529000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"    it.next();","msgtype":"m.text"},"ts":1591037529000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"    return it;","msgtype":"m.text"},"ts":1591037529000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"  }","msgtype":"m.text"},"ts":1591037530000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1591037530000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: more or less, yeah","msgtype":"m.text"},"ts":1591037549000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"re: iterators","msgtype":"m.text"},"ts":1591037794000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i have opened this issue: https://github.com/tc39/proposal-iterator-helpers/issues/97","msgtype":"m.text"},"ts":1591037799000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"keith_miller: re your queue item; they already can't, because they're inside an expression position","msgtype":"m.text"},"ts":1591037805000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ??","msgtype":"m.text"},"ts":1591037816000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I'm saying it's the same result as an eval","msgtype":"m.text"},"ts":1591037835000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"do you all think we could revisit this for 5 min on thursday?","msgtype":"m.text"},"ts":1591037835000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"keith_miller: ah, k","msgtype":"m.text"},"ts":1591037854000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"brad4d: an IIFE wouldn't necessarily preserve `super`, `arguments`, `this`; nor `await`, and it would make control flow questions complicated","msgtype":"m.text"},"ts":1591037998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"an arrow iife preserves `super`, `this`, `arguments`","msgtype":"m.text"},"ts":1591038073000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"is it really desirable to return / break from a do {} expresssion?","msgtype":"m.text"},"ts":1591038090000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1591038095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"imo no, but some folks think yes","msgtype":"m.text"},"ts":1591038103000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Arrow won't preserve `yield`","msgtype":"m.text"},"ts":1591038111000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"or `await`","msgtype":"m.text"},"ts":1591038115000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i really want control flow from do expressions","msgtype":"m.text"},"ts":1591038131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You can use `await async () => { await x }`","msgtype":"m.text"},"ts":1591038145000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"bradleymeck: control flow non-local to the do block is contentious","msgtype":"m.text"},"ts":1591038147000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But not for `yield`, because we still don't have arrow generators","msgtype":"m.text"},"ts":1591038174000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shu: did you mean to ping me on that?","msgtype":"m.text"},"ts":1591038291000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: nope, sorry :)","msgtype":"m.text"},"ts":1591038305000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"brad4d: ^","msgtype":"m.text"},"ts":1591038307000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu ack","msgtype":"m.text"},"ts":1591038335000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"i think control flow has utility in various positions that are annoying to deal with otherwise but not fatal to be missing","msgtype":"m.text"},"ts":1591038454000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there are some really odd things you can do though, like `do {continue}` on a destructuring default assignment to skip a loop","msgtype":"m.text"},"ts":1591038604000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"does return/break/continue inside eval already work in an expression position?","msgtype":"m.text"},"ts":1591038725000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1591038734000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you mean `let {x = do {continue}} = obj;` would continue a loop if `obj` doesn't have an `x`?","msgtype":"m.text"},"ts":1591038739000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"I think that is harmful to readability.","msgtype":"m.text"},"ts":1591038763000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"to me that's a linting concern","msgtype":"m.text"},"ts":1591038783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are places (outside of destructuring declarations) where continue can be useful","msgtype":"m.text"},"ts":1591038800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's how zkat initially wrote those proposals iirc—pattern matching + do expressions intended to move through committee side-by-side","msgtype":"m.text"},"ts":1591038854000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"devsnek could you point me at a use-case where flow-control inside a `do{}` would be beneficial? I can't seem to come up with one on my own?","msgtype":"m.text"},"ts":1591038861000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"ljharb: the coupling with pattern matching would be a nice thing to discuss in incubator(ish?) calls","msgtype":"m.text"},"ts":1591038887000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"idk Mark's irc handler if any","msgtype":"m.text"},"ts":1591038903000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: agreed; we're still pretty far from being ready for that tho (mpcsh)","msgtype":"m.text"},"ts":1591038910000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's been discussed in the pattern matching calls","msgtype":"m.text"},"ts":1591038911000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"brad4d: there was one in the slides","msgtype":"m.text"},"ts":1591038928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Lol","msgtype":"m.text"},"ts":1591038937000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"sees myself to TDZ","msgtype":"m.emote"},"ts":1591038964000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb leobalter Bakkot: should we try to get both of these proposals on an incubator call?","msgtype":"m.text"},"ts":1591038973000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"leobalter: happy to invite you to the next pattern matching call if you're interested","msgtype":"m.text"},"ts":1591038983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, please","msgtype":"m.text"},"ts":1591038999000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"mpcsh: yes, but i think after i've got the PR ready to update the proposal :-)","msgtype":"m.text"},"ts":1591039014000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1591039044000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"I've seen a fair amount of Kotlin code that does continue/break/return in expression positions:","msgtype":"m.text"},"ts":1591039102000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```kotlin","msgtype":"m.text"},"ts":1591039102000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (x in list) {","msgtype":"m.text"},"ts":1591039102000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  val y = x?.y ?: continue;","msgtype":"m.text"},"ts":1591039102000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  ...","msgtype":"m.text"},"ts":1591039102000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591039103000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591039103000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"There's a goog internal server language that has `or exit` all over the place.","msgtype":"m.text"},"ts":1591039148000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I share Bakkot 's intuition about blocking return, continue and break from expressions breaking some kind of invariant that we have","msgtype":"m.text"},"ts":1591039148000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: I don't think it'd be contentious without the visible boundary of `do {}`","msgtype":"m.text"},"ts":1591039154000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so, I guess this is what exceptions are for?","msgtype":"m.text"},"ts":1591039168000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"same; flow control doesn't belong in expression position","msgtype":"m.text"},"ts":1591039193000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: which wouldn't be contentious? `x?.y ?? continue` or `x?.y ?? do { continue; }`?","msgtype":"m.text"},"ts":1591039221000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"there is no such invariant in how we have specified the language","msgtype":"m.text"},"ts":1591039227000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in fact completion values help allow it","msgtype":"m.text"},"ts":1591039237000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: sure, i didn't say they can't be. i said they shouldn't be.","msgtype":"m.text"},"ts":1591039242000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"dan said there was an invariant","msgtype":"m.text"},"ts":1591039261000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which i strongly disagree on","msgtype":"m.text"},"ts":1591039264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1591039267000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, the invariant is that you currently can't do any non-throw flow control in expression position","msgtype":"m.text"},"ts":1591039278000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: the former wouldn't be, is my argument. \"everything is an expression\" doesn't induce confusion where \"crossing the border between worlds\" does","msgtype":"m.text"},"ts":1591039283000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it may or may not be intentional, but it remains an invariant","msgtype":"m.text"},"ts":1591039286000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm totally +1 to do expressions. Although, a spec draft would make it easier for an overview","msgtype":"m.text"},"ts":1591039290000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"hmm, I'm not sure why you'd have to care so much about the microtask ticks... I'd hope not many developers have to think in those terms","msgtype":"m.text"},"ts":1591039327000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"people often think about overhead","msgtype":"m.text"},"ts":1591039338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: Well, it's currently an invariant; we can disagree about the priority of preserving it","msgtype":"m.text"},"ts":1591039350000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"like, it's currently a fact about JS that that doesn't happen","msgtype":"m.text"},"ts":1591039361000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that's not an invariant its just a hole","msgtype":"m.text"},"ts":1591039384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: I have an issue on the do-expressions repo that suggests dropping `do {}` and updating ParenthesizedExpression to allow most statements. Then you would have `x ?? (continue)`. The parens are necessary to preserve precedence of `,`, which was one of Bakkot's concerns about throw expressions.","msgtype":"m.text"},"ts":1591039385000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"the JS spec notation allows all kinds of stuff that we have decided we won't do","msgtype":"m.text"},"ts":1591039396000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that's like saying %Iterator%.prototype.map not existing is an invariant of the language","msgtype":"m.text"},"ts":1591039397000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and indeed, it is right now","msgtype":"m.text"},"ts":1591039419000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so, in general, I think that assertions of things being \"invariants\" are value judgements, and I'm comfortable calling my claim a value judgement","msgtype":"m.text"},"ts":1591039426000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: but i think there's a categorical difference there that you surely are aware of","msgtype":"m.text"},"ts":1591039430000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's a statement about what we want in the future","msgtype":"m.text"},"ts":1591039435000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"drousso: what about the dev tools/repl?","msgtype":"m.text"},"ts":1591039462000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"value judgement seems like a better term","msgtype":"m.text"},"ts":1591039469000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb i don't think those people think of that as \"completion\"","msgtype":"m.text"},"ts":1591039479000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I'm confused by the non-specific confusion","msgtype":"m.text"},"ts":1591039484000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"drousso: and yet that's what it is","msgtype":"m.text"},"ts":1591039484000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: so would it be more palatable if do expressions were explained as \"like in the dev tools\"?","msgtype":"m.text"},"ts":1591039497000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the goal is to continue preserving \"ignorance is bliss\" around completion values, was my understanding","msgtype":"m.text"},"ts":1591039509000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"drousso: since that's something virtually every dev already understands?","msgtype":"m.text"},"ts":1591039512000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb im not convinced that developers even know what's going on in the console","msgtype":"m.text"},"ts":1591039515000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: they figure it out very quickly. they type `3` and the result is `3`","msgtype":"m.text"},"ts":1591039527000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or `if (true) { 3 }` and the result is `3`","msgtype":"m.text"},"ts":1591039544000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it doesn't work exactly like the devtools tho","msgtype":"m.text"},"ts":1591039553000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i just don't get like","msgtype":"m.text"},"ts":1591039554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"drousso: aside from \"devtools exposes internals\" and whatnot, how does it differ?","msgtype":"m.text"},"ts":1591039571000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why can't we just say some people don't like control flow there, and leave it to linters","msgtype":"m.text"},"ts":1591039580000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh wait i was thinking of something different","msgtype":"m.text"},"ts":1591039597000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"yes it does work the same as devtools","msgtype":"m.text"},"ts":1591039604000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i don't think that that's a good way of explaining it though","msgtype":"m.text"},"ts":1591039616000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"as that doesn't clarify anything about what's happening","msgtype":"m.text"},"ts":1591039623000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"it just provides a \"if you want to see it in action, use devtools\"","msgtype":"m.text"},"ts":1591039631000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"it doesn't explain what's actually happening","msgtype":"m.text"},"ts":1591039641000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"s/it/devtools","msgtype":"m.text"},"ts":1591039646000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: the explanation isn't needed tho, if everyone already intuits how it's supposed to work","msgtype":"m.text"},"ts":1591039654000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Younies is unavailable for his presentation so Record & Tuple is next.","msgtype":"m.text"},"ts":1591039661000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i disagree with that","msgtype":"m.text"},"ts":1591039661000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"vehemently","msgtype":"m.text"},"ts":1591039664000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"can you give specific examples of what the people you spoke to thought the basic cases should do instead?","msgtype":"m.text"},"ts":1591039704000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the function declaration","msgtype":"m.text"},"ts":1591039729000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"+1 for banning too :)","msgtype":"m.text"},"ts":1591039734000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"many i spoke to thought that that would result in the function declaration being used","msgtype":"m.text"},"ts":1591039743000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I disagree with the notion that a proposal like this would need to add new capabilities (like return/break/continue from an expression) to carry their own weight; I'm not sure if waldemar was alluding to that","msgtype":"m.text"},"ts":1591039748000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"waldemar said this proposal isn't worth it without control flow","msgtype":"m.text"},"ts":1591039764000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"drousso you get a syntax error; I think \"what does this code do? oh it's a syntax error\" is not that big of a deal","msgtype":"m.text"},"ts":1591039773000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think many devs only want some sugar for IIFE.","msgtype":"m.text"},"ts":1591039784000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i certainly won't use it as much as i was planning to without control flow","msgtype":"m.text"},"ts":1591039794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haxjs: why does that mean they shouldn't get it?","msgtype":"m.text"},"ts":1591039801000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think syntax errors are a good way of teaching a developer how to use something","msgtype":"m.text"},"ts":1591039803000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"in fact i've spoken with many developers who find JS errors often unhelpful","msgtype":"m.text"},"ts":1591039840000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"that's more on engines","msgtype":"m.text"},"ts":1591039848000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unfortunately we don't specify error messages, that's on the browsers","msgtype":"m.text"},"ts":1591039854000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"* browsers/engines","msgtype":"m.text"},"ts":1591039858000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"engines don't even bother to implement parsers which support reporting multiple errors","msgtype":"m.text"},"ts":1591039864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"drousso: we had pretty strong support internally for this, its interesting that your front end developers have such a strong issue with this. Are there certain patterns that they are using that makes it more difficult?","msgtype":"m.text"},"ts":1591039868000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb so any other capabilities just add confusion even they are powerful :)","msgtype":"m.text"},"ts":1591039885000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"and also, yes -- engines cannot really improve their error messages due to web compat","msgtype":"m.text"},"ts":1591039898000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"haxjs: i agree that return/continue/break in do expressions are powerful and also add confusion, yes","msgtype":"m.text"},"ts":1591039903000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is true","msgtype":"m.text"},"ts":1591039904000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"we tried and had to back it out","msgtype":"m.text"},"ts":1591039904000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"im not saying that's the fault of this situation","msgtype":"m.text"},"ts":1591039910000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"or that it's up to this proposal to fix it","msgtype":"m.text"},"ts":1591039918000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"just that i believe errors are not a good way to teach things","msgtype":"m.text"},"ts":1591039927000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"brad4d +1000","msgtype":"m.text"},"ts":1591039946000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: i think it's very unlikely devs will even try to do these things in the first place tho","msgtype":"m.text"},"ts":1591039948000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"brad4d completely agree","msgtype":"m.text"},"ts":1591039952000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: iow, i think that most devs won't ever run into it.","msgtype":"m.text"},"ts":1591039956000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb if that's the case, why add it in the first place?","msgtype":"m.text"},"ts":1591039971000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"I will say that I too originally expected that `return` would serve as an early out _for the do expr_","msgtype":"m.text"},"ts":1591039982000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or wait do you mean these \"edge cases\" or `do` in general?","msgtype":"m.text"},"ts":1591039982000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: because they *will* try to use all the non-error cases in a block in expression position","msgtype":"m.text"},"ts":1591039986000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: i mean the edge cases","msgtype":"m.text"},"ts":1591039989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: tons of people will immediately try to use the non-edge-cases in a ton of code","msgtype":"m.text"},"ts":1591039998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(but obviously it's moot if it's banned)","msgtype":"m.text"},"ts":1591039999000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"drousso: especially in the react community inside jsx, not that i think that needs to be a motivation","msgtype":"m.text"},"ts":1591040020000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: well, i'm saying i don't think they'll even run into the bans","msgtype":"m.text"},"ts":1591040032000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i think most users won't ever discover those are missing because they'll never think to try it","msgtype":"m.text"},"ts":1591040043000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"But, I also think banning everything controversial  not really solve the problems, for example how can we break a loop and return a value (it seems it will be banned as slide)","msgtype":"m.text"},"ts":1591040055000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: same way you do now: return a sentinel value, and then check it in the main loop body","msgtype":"m.text"},"ts":1591040084000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Back when I presented throw expressions I was asked by many in the committee to investigate converting other statements to expressions, especially `return`, `continue`, `break`. I'm actually surprised at the number of people in favor of banning those statements in a `do {}` expression.","msgtype":"m.text"},"ts":1591040108000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"re: iterator helpers issue: https://github.com/tc39/proposal-iterator-helpers/issues/97","msgtype":"m.text"},"ts":1591040110000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"please comment so we can get to a solution!","msgtype":"m.text"},"ts":1591040118000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: no right now you just `return`","msgtype":"m.text"},"ts":1591040126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: so i guess dev would expect iife which can return a value directly :-P","msgtype":"m.text"},"ts":1591040128000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"if anything not allowing control flow is a refactoring hazard","msgtype":"m.text"},"ts":1591040136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: not if the value comes from an IIFE, or another function","msgtype":"m.text"},"ts":1591040138000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: they'll expect their do expression body to be able to produce a value; i'm saying they won't expect it to be able to force the containing function to return","msgtype":"m.text"},"ts":1591040161000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"@devs","msgtype":"m.text"},"ts":1591040241000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"devsnek allowing flow of control is a refactoring hazard if you're inlining a function","msgtype":"m.text"},"ts":1591040264000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"`do{}` expressions would make function inlining much easier if they really act like inline functions","msgtype":"m.text"},"ts":1591040379000,"senderName":"brad4d","senderId":"brad4d@irc"},
{"content":{"body":"ljharb: what I'm talking is code like `do { while(...) { if (...) { 1 ; break } } }`","msgtype":"m.text"},"ts":1591040381000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: that would work fine, because the loop you're breaking is fully inside the `do`","msgtype":"m.text"},"ts":1591040406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: i think","msgtype":"m.text"},"ts":1591040411000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: ohh right but it wouldn't because of ending in a loop","msgtype":"m.text"},"ts":1591040421000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: so then `do { let v; while (…) { if (…) { v = 1; break; } } v; }`","msgtype":"m.text"},"ts":1591040443000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, this is why i say devs may like iife sugar...","msgtype":"m.text"},"ts":1591040465000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"gotcha, agreed","msgtype":"m.text"},"ts":1591040558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, i see what you mean anyways. i don't think they actually want a function invocation","msgtype":"m.text"},"ts":1591040582000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"As i understand, basically current minimal proposal just have very similar power or even less power of iife.","msgtype":"m.text"},"ts":1591040605000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"and less overhead","msgtype":"m.text"},"ts":1591040619000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, so maybe iife sugar is what we need?","msgtype":"m.text"},"ts":1591040656000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"current proposal lets you do something you can't with IIFE, which is await/yield","msgtype":"m.text"},"ts":1591040687000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"await you can do with a microtask tick, yield... you just can't do, I think, at least without a bunch of wrappers","msgtype":"m.text"},"ts":1591040704000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^ that","msgtype":"m.text"},"ts":1591040721000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah! so it's iife + await async iife sugar :-P","msgtype":"m.text"},"ts":1591040731000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"bterlson/other chairs: voice jorendorff ?","msgtype":"m.text"},"ts":1591040790000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll figure out my mic","msgtype":"m.text"},"ts":1591040847000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"go to the next speaker","msgtype":"m.text"},"ts":1591040849000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I'll follow up on GitHub and/or in the hallway track","msgtype":"m.text"},"ts":1591040979000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Bakkot: on it","msgtype":"m.text"},"ts":1591041001000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1591041158000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"complex numbers don't have -0, bah","msgtype":"m.text"},"ts":1591041323000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1591041396000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"during the editor update I misspoke: it's actually caiolima doing the work to fix the number types in the spec. mea culpa.","msgtype":"m.text"},"ts":1591041460000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"time is over for today, but we have someone logged in as Guest in the call, I believe we should avoid that tomorrow.","msgtype":"m.text"},"ts":1591041507000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1591041528000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"SameValue makes sense if we want to follow pattern with `includes`, right?","msgtype":"m.text"},"ts":1591041821000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"well ... it seems more directly applicable to look at what `===` does, than `includes`","msgtype":"m.text"},"ts":1591041856000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"leobalter SameValueZero, technically","msgtype":"m.text"},"ts":1591041864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`[-0].includes(0)` and `[NaN].includes(NaN)` are both true","msgtype":"m.text"},"ts":1591041900000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am opposed to shortening lunch, for the record. the hallway-track social time is nice","msgtype":"m.text"},"ts":1591041960000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"mpcsh: I don't think we necessarily need to decrease break time, perhaps just rearrange it","msgtype":"m.text"},"ts":1591042120000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Ujjwal and I are in the hallway track; would be nice to have more","msgtype":"m.text"},"ts":1591042137000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I  feel we should keep consistency with normal `===`. The weirdness of `===` is coming from IEEE float, developers are inevitable to learn it,  add an exception rule for tuple/record just make things worse and never really solve anything.","msgtype":"m.text"},"ts":1591042163000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I have some thoughts about Record/Tuple that I'd like to discuss with the champions","msgtype":"m.text"},"ts":1591042177000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"did we fall back to hubs?","msgtype":"m.text"},"ts":1591042211000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"lets use online town for today","msgtype":"m.text"},"ts":1591042219000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1591042224000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"and tomorrow switch to hubs","msgtype":"m.text"},"ts":1591042224000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"online town has some issues with distance that hubs didnt","msgtype":"m.text"},"ts":1591042238000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i think having any value fail to ever be === if a sub component is NaN is... highly surprising","msgtype":"m.text"},"ts":1591042247000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sffc: do you want to chat now? I'm free, or via email?","msgtype":"m.text"},"ts":1591042356000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I'm in the town, plus 5 others now","msgtype":"m.text"},"ts":1591042403000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"oh right","msgtype":"m.text"},"ts":1591042411000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"will be there shortly","msgtype":"m.text"},"ts":1591042415000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Chairs discussed shorter lunch break and we will stick with 1 hour for now. Delegates with free time should consider joining us in the hallway track! /cc Bakkot","msgtype":"m.text"},"ts":1591042456000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"akirose bterlson how hard would it be to change my initials in the notes? I'd rather go with LFB (to reflect my actual initials), but I don't wanna cause too much work","msgtype":"m.text"},"ts":1591042474000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: I switched mine from MCN to MPC a little while ago, it's not bad","msgtype":"m.text"},"ts":1591042497000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"just do a find & replace for today's notes, and submit a PR for old notes","msgtype":"m.text"},"ts":1591042537000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"Bakkot: How are complex numbers avoiding -0?","msgtype":"m.text"},"ts":1591042750000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins the traditional definition of complex numbers does not include two distinct 0s","msgtype":"m.text"},"ts":1591043157000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(or four, I guess)","msgtype":"m.text"},"ts":1591043164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well sure, but the traditional definition of the reals doesn't either.","msgtype":"m.text"},"ts":1591043173000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Complex-in-JS would probably have some -0s in it","msgtype":"m.text"},"ts":1591043189000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Probably... 3? If they're just a pair of Numbers.)","msgtype":"m.text"},"ts":1591043259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"0,0, -0,0, 0,-0, -0,-0 is four","msgtype":"m.text"},"ts":1591043288000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess just three -0s though","msgtype":"m.text"},"ts":1591043297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"0,0 is a positive zero, yeah ^_^","msgtype":"m.text"},"ts":1591043300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jorendorff: hopping into the hallway track if you wanted to chat now","msgtype":"m.text"},"ts":1591043551000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"@Bakkot believe it or not I think Brendan Eich exposed -0 to JS based on advice from Guy Steele that had to do with complex numbers","msgtype":"m.text"},"ts":1591043618000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"does css have a -0 which is observably different from 0?","msgtype":"m.text"},"ts":1591043619000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jorendorff fascinating","msgtype":"m.text"},"ts":1591043626000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in my hearing he only ever explained it far too fast for me to follow","msgtype":"m.text"},"ts":1591043638000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"looks for the hallway-track link","msgtype":"m.emote"},"ts":1591043650000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's in the reflector I think","msgtype":"m.text"},"ts":1591043657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"far too fast\": checks out for brendan!","msgtype":"m.text"},"ts":1591043659000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1591043873000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: CSS grew a -0 that is *slightly* observable, to preserve IEEE semantics and JS compatibility. It gets censored into a plain zero the moment is would escape a math function.","msgtype":"m.text"},"ts":1591043956000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, `margin-left: calc(1/0);` is different from `calc(1/-0)`.","msgtype":"m.text"},"ts":1591043986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1591044204000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"-0 was a terrible idea","msgtype":"m.text"},"ts":1591044216000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I will die mad about that","msgtype":"m.text"},"ts":1591044221000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can't wait for some brave new language to just say no","msgtype":"m.text"},"ts":1591044262000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what... do i do for the rest of my day","msgtype":"m.text"},"ts":1591044391000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: but how else can i express the limit of an integral approaching zero from the negative direction","msgtype":"m.text"},"ts":1591044406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh jeez I forgot it was 3pm Central, I was waiting for the meetig to start again","msgtype":"m.text"},"ts":1591044411000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ljharb: OH easy, don't","msgtype":"m.text"},"ts":1591044418000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"my calculus teacher would be horrified","msgtype":"m.text"},"ts":1591044431000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: 0","msgtype":"m.text"},"ts":1591044432000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: sleep","msgtype":"m.text"},"ts":1591044435000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"how do you express the limit of an integral approaching 1 from the negative direction? :P","msgtype":"m.text"},"ts":1591044460000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"touché","msgtype":"m.text"},"ts":1591044497000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: suppose we go with option 2, to me the most obvious way to do that would be different iterator types for map, filter, take, drop, etc.","msgtype":"m.text"},"ts":1591044566000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ljharb: so, different internal slots for each","msgtype":"m.text"},"ts":1591044582000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and every method has a brand check","msgtype":"m.text"},"ts":1591044589000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: +1 re -0","msgtype":"m.text"},"ts":1591044652000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so many NaNs and yet two zeroes is too many","msgtype":"m.text"},"ts":1591044685000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*two 0s","msgtype":"m.text"},"ts":1591044701000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jorendorff: sure, seems right to me","msgtype":"m.text"},"ts":1591044743000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jorendorff: altho it also seems doable as a single object type","msgtype":"m.text"},"ts":1591044762000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ok, right, I'm thinking about that now","msgtype":"m.text"},"ts":1591044770000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it might get weird with some of the types tho","msgtype":"m.text"},"ts":1591044793000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they do all have something in common, which is that they all have a single source iterator... except there's `Iterator.prototype.flatMap()`, the sole exception","msgtype":"m.text"},"ts":1591044795000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"that doesn't have a source iterator? or it has multiple","msgtype":"m.text"},"ts":1591044804000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(those were questions, not statements)","msgtype":"m.text"},"ts":1591044821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think you'd have an abstract op which returned a list of values to yield, and everything except flatmap would return a list of length exactly 1","msgtype":"m.text"},"ts":1591044850000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"boom, no more special case","msgtype":"m.text"},"ts":1591044854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, so if we do this, we can have a common implementation of throw and return shared by all the iterator helpers","msgtype":"m.text"},"ts":1591044907000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the common thing needs a name","msgtype":"m.text"},"ts":1591044914000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and the common thing would just be \"innerIterator?.return()` etc?","msgtype":"m.text"},"ts":1591044935000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if they're different objects, the common thing would be spec-internal, right?","msgtype":"m.text"},"ts":1591044936000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: wait, actually I didn't follow that","msgtype":"m.text"},"ts":1591044941000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so the name doesn't matter so much","msgtype":"m.text"},"ts":1591044943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or sorry `innerIterator.return?.()`","msgtype":"m.text"},"ts":1591044945000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"IteratorHelperReturn or whatever","msgtype":"m.text"},"ts":1591044951000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: \"abstract op which returned a list of values to yield\" I don't understand when this abstract op is used","msgtype":"m.text"},"ts":1591044986000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I... don't think I understand this scheme at all actually","msgtype":"m.text"},"ts":1591045001000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff the idea is that each helper would define such an abstract op, and the `next` would know how to invoke the abstract op","msgtype":"m.text"},"ts":1591045023000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we can talk about it more tomorrow","msgtype":"m.text"},"ts":1591045026000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hard to talk about it without code","msgtype":"m.text"},"ts":1591045030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, and the helper would have abstract ops for `throw` and `return` too?","msgtype":"m.text"},"ts":1591045064000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the helper would specifically be the implementation of `.next`","msgtype":"m.text"},"ts":1591045098000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yeah maybe?","msgtype":"m.text"},"ts":1591045111000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not sure","msgtype":"m.text"},"ts":1591045118000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"have to write it out","msgtype":"m.text"},"ts":1591045121000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, let's meet up tomorrow and talk about it more, maybe sketch some things out?","msgtype":"m.text"},"ts":1591045152000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"y","msgtype":"m.text"},"ts":1591045157000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: are you free tomorrow afternoon at 2PM Pacific time to chat?","msgtype":"m.text"},"ts":1591045174000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"return/throw may also have to touch logic in the helper itself","msgtype":"m.text"},"ts":1591045181000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is why i mentioned that it isn't ideal to have them just be methods that call the inner iterator","msgtype":"m.text"},"ts":1591045197000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff: yep, works for me","msgtype":"m.text"},"ts":1591045206000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek what logic in the helper do they need to touch?","msgtype":"m.text"},"ts":1591045228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1591045232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"other than \"mark as stale\", I guess","msgtype":"m.text"},"ts":1591045235000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"flatMap is one","msgtype":"m.text"},"ts":1591045248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: thanks very much, let's all meet here 2PM Pacific tomorrow, then we'll set up a video chat","msgtype":"m.text"},"ts":1591045252000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"there could be more in the future","msgtype":"m.text"},"ts":1591045265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think flatMap is the only one; the others all do the same thing for throw (forward it) and return (forward it0","msgtype":"m.text"},"ts":1591045270000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"right, the only one at present","msgtype":"m.text"},"ts":1591045276000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what does flatmap need to do specially?","msgtype":"m.text"},"ts":1591045279000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"close two iterators","msgtype":"m.text"},"ts":1591045283000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, yeah, sure","msgtype":"m.text"},"ts":1591045298000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we could have more in the future","msgtype":"m.text"},"ts":1591045305000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"flatmap is `for (let iterable in this) for (let value in iterable) yield value;`","msgtype":"m.text"},"ts":1591045309000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'd rather do the work now to have a proper way to specify generators in our stdlib","msgtype":"m.text"},"ts":1591045321000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"than keep having to make weird iterator things forever","msgtype":"m.text"},"ts":1591045327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I kind of prefer making weird iterator things forever, even if we had a proper way to specify generators","msgtype":"m.text"},"ts":1591045342000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"If the goal is to produce a common type of iterator that shares some implementation details with other iterators, with common throw/return methods,","msgtype":"m.text"},"ts":1591045343000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ease of spec isn't really a priority","msgtype":"m.text"},"ts":1591045361000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i want consistency","msgtype":"m.text"},"ts":1591045386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of how our systems behave","msgtype":"m.text"},"ts":1591045396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that doesn't expose implementation details,","msgtype":"m.text"},"ts":1591045397000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"weird iterator things forever is the consistent thing","msgtype":"m.text"},"ts":1591045400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"...then the exact thing we are talking about as an ideal end state is... a generator","msgtype":"m.text"},"ts":1591045400000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1591045410000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, if that's the goal","msgtype":"m.text"},"ts":1591045425000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I agree weird iterator things forever is consistent with existing practice","msgtype":"m.text"},"ts":1591045429000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I don't really share that goal","msgtype":"m.text"},"ts":1591045429000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't object to it, but don't see why it's valuable","msgtype":"m.text"},"ts":1591045436000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ease of spec is not what I'm concerned with","msgtype":"m.text"},"ts":1591045455000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i don't want generators for the sake of generators, i want them because they handle all the reentrancy and cleanup and whatnot properly","msgtype":"m.text"},"ts":1591045457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ease of using and understanding the spec matters to me","msgtype":"m.text"},"ts":1591045465000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm more concerned with ease of understanding but i also have to write all these methods so...","msgtype":"m.text"},"ts":1591045514000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway -- we should talk more tomorrow. thanks again for your time","msgtype":"m.text"},"ts":1591045555000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: oh, btw - you mentioned today that you don't think programmers will try to use break/return from within do-expressions","msgtype":"m.text"},"ts":1591045601000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i feel like half of all js code is early returns","msgtype":"m.text"},"ts":1591045635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: i think they will :( because there are lots of expression languages, most notably Ruby and Rust but I think it's not even uncommon these days","msgtype":"m.text"},"ts":1591045653000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff did not mean to imply that","msgtype":"m.text"},"ts":1591045680000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"expression languages that have weird control flow stuff like `return`","msgtype":"m.text"},"ts":1591045682000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(Smalltalk too)","msgtype":"m.text"},"ts":1591045692000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I think people won't try to end their do-exprs with declarations","msgtype":"m.text"},"ts":1591045694000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and yeah I've used the feature in ruby","msgtype":"m.text"},"ts":1591045703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and rust","msgtype":"m.text"},"ts":1591045704000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, that I agree we can just call it a SyntaxError","msgtype":"m.text"},"ts":1591045710000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"my comment is limited to break/continue/return","msgtype":"m.text"},"ts":1591045740000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, like I say I didn't mean to imply people won't try that","msgtype":"m.text"},"ts":1591045753000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if I did say that i misspoke","msgtype":"m.text"},"ts":1591045757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i probably misheared, i don't mean to put words in your mouth!","msgtype":"m.text"},"ts":1591045776000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"The TypeScript source heavily utilizes function declarations that trail the source code that uses them. I could see function declarations at the end of a `do {}` tripping people up if they're refactoring.","msgtype":"m.text"},"ts":1591045800000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"sounds like a good reason for that to be a syntax error!","msgtype":"m.text"},"ts":1591045826000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if some people are actually going to expect to get the before-declaration value","msgtype":"m.text"},"ts":1591045842000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"No, that still would trip them up.","msgtype":"m.text"},"ts":1591045843000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"instead of the function itself","msgtype":"m.text"},"ts":1591045845000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it would be better if function declarations don't contribute to the resulting value","msgtype":"m.text"},"ts":1591045865000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"People getting tripped up on things being a syntax error is the least bad kind of people getting tripped up.","msgtype":"m.text"},"ts":1591045869000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Strong disagree.","msgtype":"m.text"},"ts":1591045871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agree with \"least bad\"","msgtype":"m.text"},"ts":1591045878000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if `do { 1; function f(){} }` results in `1` and not a function, that's... not... correct","msgtype":"m.text"},"ts":1591045900000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why do you disagree?","msgtype":"m.text"},"ts":1591045904000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah that'd be more bad","msgtype":"m.text"},"ts":1591045906000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"@chairs - can you inform the delegates of the decision of lunch break duration before tomorrow, so that I can adjust my schedule accordingly?  I'm trying to fit in non-TC39 meeting during the lunch break.","msgtype":"m.text"},"ts":1591045917000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"definitely more bad","msgtype":"m.text"},"ts":1591045927000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"To me that argues for explicit syntax for the return value.","msgtype":"m.text"},"ts":1591045929000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"sffc bterlson said above they will stick with 1 hour","msgtype":"m.text"},"ts":1591045943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have a slight preference for 60-minute break because of that reason (ability to schedule a meeting during prime time)","msgtype":"m.text"},"ts":1591045947000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"rbuckton how so?","msgtype":"m.text"},"ts":1591045966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"You can get the return value you want by putting an expression as the last statement.","msgtype":"m.text"},"ts":1591045975000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sffc: confirm, 1 hr lunch will continue","msgtype":"m.text"},"ts":1591045977000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"and putting a declaration as the last statement gives a syntax error","msgtype":"m.text"},"ts":1591045988000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Sounds good, thanks","msgtype":"m.text"},"ts":1591045999000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"so you can do the things you want, and the surprising cases you can't run into","msgtype":"m.text"},"ts":1591046005000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: separate weird comment: `yield` expressions can already return ... you just ... don't have any control over it","msgtype":"m.text"},"ts":1591046034000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Having to move the function is a mess WRT refactoring tooling","msgtype":"m.text"},"ts":1591046036000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"or at least, you'll run into them immediately at dev time","msgtype":"m.text"},"ts":1591046039000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jorendorff yeah I was avoiding bringing that up","msgtype":"m.text"},"ts":1591046045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm not sure what to conclude from that","msgtype":"m.text"},"ts":1591046045000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it is true but obscure and also very strange","msgtype":"m.text"},"ts":1591046055000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably for the best","msgtype":"m.text"},"ts":1591046056000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i would conclude that making rules about what can occur in do expressions is dangerous","msgtype":"m.text"},"ts":1591046069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean, it means that the spec-internal wiring","msgtype":"m.text"},"ts":1591046070000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton but at least you get an error instead of the wrong thing!","msgtype":"m.text"},"ts":1591046072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so you know your refactor needs to change","msgtype":"m.text"},"ts":1591046081000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Consider this code:","msgtype":"m.text"},"ts":1591046082000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```js","msgtype":"m.text"},"ts":1591046082000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const fn = (x) => {","msgtype":"m.text"},"ts":1591046082000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  // 1","msgtype":"m.text"},"ts":1591046082000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  return x.map(visit);","msgtype":"m.text"},"ts":1591046082000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  // 2","msgtype":"m.text"},"ts":1591046083000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  function visit(y) { ... }","msgtype":"m.text"},"ts":1591046083000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1591046084000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const a = fn(b);","msgtype":"m.text"},"ts":1591046084000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"seems fine to me","msgtype":"m.text"},"ts":1591046084000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046085000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"If I use tooling to inline `fn` as a `do` expression, the tooling would have to move `visit`, but does it also move `// 2` with it?","msgtype":"m.text"},"ts":1591046085000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for returning from an expression, already exists and works","msgtype":"m.text"},"ts":1591046086000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton probably yes; most tooling considers comments to attach to the following statement, which is decent heuristic","msgtype":"m.text"},"ts":1591046125000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton but also I don't think \"tooling which is automatically rewriting code will need to make a call about how to handle comments\" is an argument which should have much weight","msgtype":"m.text"},"ts":1591046155000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046182000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const fn = (x) => {","msgtype":"m.text"},"ts":1591046182000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  // 1","msgtype":"m.text"},"ts":1591046182000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  return x.map(visit);","msgtype":"m.text"},"ts":1591046182000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  // long explanation of what visit does","msgtype":"m.text"},"ts":1591046183000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  // even more text...","msgtype":"m.text"},"ts":1591046184000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  function visit(y) { ... };","msgtype":"m.text"},"ts":1591046184000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"};","msgtype":"m.text"},"ts":1591046185000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046185000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"comment attachment is definitely already an intractable problem imo","msgtype":"m.text"},"ts":1591046189000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tooling usually considers all of the comments between statement A and statement B to be attached to B, unless they occur at the end of line A, in my experience","msgtype":"m.text"},"ts":1591046208000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: if `visit` requires that much explanation, then why isn't it extracted into a separate tested module?","msgtype":"m.text"},"ts":1591046214000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so the long explanation would get moved","msgtype":"m.text"},"ts":1591046214000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I disagree, tooling is an important consideration, which is why there's a monthly tooling call","msgtype":"m.text"},"ts":1591046218000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I agree that tooling is important.","msgtype":"m.text"},"ts":1591046224000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how about if do expressions allows control flow i'll write the eslint rule to disallow it for you","msgtype":"m.text"},"ts":1591046249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I disagree with the specific claim that \"tooling which is automatically rewriting code will need to make a call about how to handle comments\" is an argument which should have much weight","msgtype":"m.text"},"ts":1591046257000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is more specific than \"tooling\".","msgtype":"m.text"},"ts":1591046263000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: first you'd have to convince eslint core to add the rule, under their new rules policy","msgtype":"m.text"},"ts":1591046332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what's that policy","msgtype":"m.text"},"ts":1591046353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I will continue having to read other code bases","msgtype":"m.text"},"ts":1591046361000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"more to the point, so will everyone else","msgtype":"m.text"},"ts":1591046367000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and they will read my beautiful code that uses control flow","msgtype":"m.text"},"ts":1591046380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and say \"wow bakkot's code is lacking in this amazing pattern\"","msgtype":"m.text"},"ts":1591046387000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1591046388000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they will read your code that uses control flow","msgtype":"m.text"},"ts":1591046389000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that part I agree with","msgtype":"m.text"},"ts":1591046393000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek the policy is that they do not accept rules which just ban syntax, if you could write it with the forbidden syntax rule","msgtype":"m.text"},"ts":1591046440000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Comparison:","msgtype":"m.text"},"ts":1591046441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// no cf","msgtype":"m.text"},"ts":1591046441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (const x of ar) {","msgtype":"m.text"},"ts":1591046441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  const y = x.y;","msgtype":"m.text"},"ts":1591046441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  if (y === null || y === undefined) continue;","msgtype":"m.text"},"ts":1591046442000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  ...","msgtype":"m.text"},"ts":1591046442000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591046443000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// with cf","msgtype":"m.text"},"ts":1591046444000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (const x of ar) {","msgtype":"m.text"},"ts":1591046444000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591046445000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046463000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// with cf","msgtype":"m.text"},"ts":1591046464000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (const x of ar) {","msgtype":"m.text"},"ts":1591046464000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  const y = x.y ?? do { continue; }","msgtype":"m.text"},"ts":1591046464000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591046464000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046464000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton that example does not make me want to allow control flow","msgtype":"m.text"},"ts":1591046481000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oi (code fragments in irccloud can be a pain)","msgtype":"m.text"},"ts":1591046483000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"why is that better?","msgtype":"m.text"},"ts":1591046484000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: yeah i may be having the opposite reaction you want","msgtype":"m.text"},"ts":1591046492000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: which is that with cf is less readable","msgtype":"m.text"},"ts":1591046497000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i agree that it's terser","msgtype":"m.text"},"ts":1591046503000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i agree with that ^","msgtype":"m.text"},"ts":1591046511000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and the === null || === undefined is contrived","msgtype":"m.text"},"ts":1591046533000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if the intention is to test for nullish, == undefined is fine","msgtype":"m.text"},"ts":1591046539000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Its concise, same reason we have `??` now instead of `x !== null || x !== undefined ? x : y`","msgtype":"m.text"},"ts":1591046551000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`== undefined` is not fine because of `document.all`","msgtype":"m.text"},"ts":1591046569000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: that concision did not cross statement/expression boundaries","msgtype":"m.text"},"ts":1591046572000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: fair enough for document.all","msgtype":"m.text"},"ts":1591046578000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the point about ?? is that it is consise _and clearly expresses intent_","msgtype":"m.text"},"ts":1591046583000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"having a `const y =` which is also sometimes a `continue` does not, to me, clearly express intent","msgtype":"m.text"},"ts":1591046602000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no but motivating examples should not be this ... extremely specific","msgtype":"m.text"},"ts":1591046608000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"It seems strange to be able to do `x ?? do { throw ... }` but not `x ?? do { continue; }`","msgtype":"m.text"},"ts":1591046614000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1591046620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"expressions can throw, that's normal","msgtype":"m.text"},"ts":1591046624000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"expression can't continue","msgtype":"m.text"},"ts":1591046628000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"exceptions are exceptional","msgtype":"m.text"},"ts":1591046634000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"a statement is a statement.","msgtype":"m.text"},"ts":1591046635000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I don't think that's a distinction users really think about.","msgtype":"m.text"},"ts":1591046657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`if` is a statement, but does something exprsesions can do","msgtype":"m.text"},"ts":1591046664000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's fine","msgtype":"m.text"},"ts":1591046665000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can sympathize with the desire to check all the boxes for all the statements, even though i disagree","msgtype":"m.text"},"ts":1591046715000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i also have an additional reason to ban, which is i don't really think it's worth either spec authors' time nor implementers' time to work through the corner cases like loop headers","msgtype":"m.text"},"ts":1591046744000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's a lot of edge cases, yeah","msgtype":"m.text"},"ts":1591046832000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bad alternative:","msgtype":"m.text"},"ts":1591046850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const sContinue = Symbol();","msgtype":"m.text"},"ts":1591046850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (const x of ar) {","msgtype":"m.text"},"ts":1591046850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  try {","msgtype":"m.text"},"ts":1591046850000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"    const y = x.y ?? do { throw sContinue; }","msgtype":"m.text"},"ts":1591046851000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  }","msgtype":"m.text"},"ts":1591046851000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  catch (e) {","msgtype":"m.text"},"ts":1591046852000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"    if (e === sContinue) continue;","msgtype":"m.text"},"ts":1591046852000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"    throw e;","msgtype":"m.text"},"ts":1591046853000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  }","msgtype":"m.text"},"ts":1591046853000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1591046854000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1591046854000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah, people can write bad code if they want","msgtype":"m.text"},"ts":1591046863000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the desire to have universal availability of statements at least has a caveats that the corner cases need some explanation. we can of course define _something_, but i reckon in the end it'll be more surprising that not. we can selectively ban, but that's an equally careful task to carry out, one that i am not happy to allocate staff to","msgtype":"m.text"},"ts":1591046882000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't find \"people can use this bad alternative\" a good reason to allow a thing","msgtype":"m.text"},"ts":1591046892000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do not expect people to actually write that in practice","msgtype":"m.text"},"ts":1591046899000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"instead of your first non-cf example","msgtype":"m.text"},"ts":1591046910000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can do arbitrary non-structured control flow if you reloop your code today, is that a reason to add goto?","msgtype":"m.text"},"ts":1591046937000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean i would personally love goto","msgtype":"m.text"},"ts":1591046941000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"At least with banning we can relax that later if there is enough interest in community. I'm not going to die on the hill of `break/continue/return` in `do{}` as I don't have a strong opinion.","msgtype":"m.text"},"ts":1591046955000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: as far as `return` is concerned, I don't think there are necessarily any new corner cases to work through; since `yield` already exists, anything to do with expressions returning has already been sorted","msgtype":"m.text"},"ts":1591046960000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: i don't follow","msgtype":"m.text"},"ts":1591046996000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: i think that you wouldn't be alone in jumping on board an immediate follow-on proposal to relax the ban","msgtype":"m.text"},"ts":1591047001000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: The only `goto` I want would be to jump to a specific falling switch case (as in C#).","msgtype":"m.text"},"ts":1591047013000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"s/falling/following","msgtype":"m.text"},"ts":1591047020000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"jorendorff: mechanically being like return doesn't mean programmers think about them similarly, and my impression is that they're not thought of similarly","msgtype":"m.text"},"ts":1591047044000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: was in response to the specific point that it wasn't worth spec authors' or implementors' time to work through special cases","msgtype":"m.text"},"ts":1591047071000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"But in C#'s case it's `goto case ...`","msgtype":"m.text"},"ts":1591047079000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"jorendorff: ah, okay, and for return you're saying that's not true","msgtype":"m.text"},"ts":1591047083000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jorendorff theere is one new edge case, which is `return` in parameter expressions","msgtype":"m.text"},"ts":1591047087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yeah it's not nearly as bad as `break`","msgtype":"m.text"},"ts":1591047095000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: fantastic","msgtype":"m.text"},"ts":1591047102000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: yield is simply banned there, suggesting the same for return","msgtype":"m.text"},"ts":1591047122000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, it's not too bad","msgtype":"m.text"},"ts":1591047139000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Banning `break`/`continue`/`return` is purely banning syntax. If they weren't banned the existing spec machinery would already cover how their handled. The downside of banning them is that it makes the spec more complex rather than less.","msgtype":"m.text"},"ts":1591047195000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: i don't think it would? because it could happen from a bunch of new places","msgtype":"m.text"},"ts":1591047230000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"You also have to ban break/continue/return in eval in a `do`","msgtype":"m.text"},"ts":1591047233000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i'm not sure the spec says clearly what `for (do {break};;)` ought to do","msgtype":"m.text"},"ts":1591047238000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton: yeah, part of the reason I'm advocating for just banning `break/continue/return`, instead of e.g. having `return` mean \"provide this value from the `do`\", as some have suggested, is so that the restriction can be relaxed later if there is enough community and implementor interest and someone works through all the edge cases","msgtype":"m.text"},"ts":1591047242000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rather, i'm not sure it does what we would want","msgtype":"m.text"},"ts":1591047264000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton they are already banned","msgtype":"m.text"},"ts":1591047268000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you cannot `break` out of an `eval`, even a sloppy direct eval","msgtype":"m.text"},"ts":1591047279000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or return, sads","msgtype":"m.text"},"ts":1591047291000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1591047300000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(presumably for the same reason as I am proposing not to let you `break` out of a `do` :P)","msgtype":"m.text"},"ts":1591047329000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"registers doubt","msgtype":"m.emote"},"ts":1591047362000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: by that you mean this? `for (...) do { break; }`?","msgtype":"m.text"},"ts":1591047388000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"or this: `do { break; /*early exit from the do itself*/ }`?","msgtype":"m.text"},"ts":1591047419000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"first one","msgtype":"m.text"},"ts":1591047423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k.","msgtype":"m.text"},"ts":1591047427000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"heh: `do { it: break it; }`","msgtype":"m.text"},"ts":1591047437000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that was one of my examples!","msgtype":"m.text"},"ts":1591047445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually slightly more complicated","msgtype":"m.text"},"ts":1591047450000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"...can you `yield` within a parameter expression","msgtype":"m.text"},"ts":1591047504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"banning break/continue is would just be changing how labeled evaluation works, correct? Or are you going to try to make `break`/`continue` syntactically invalid in the grammar?","msgtype":"m.text"},"ts":1591047515000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Ah, jorendorff seems to be saying they're banned there, ok","msgtype":"m.text"},"ts":1591047516000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"rbuckton: i was imagining early error static semantics","msgtype":"m.text"},"ts":1591047563000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i was also imagining EESS","msgtype":"m.text"},"ts":1591047576000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"banning the control flow in loop headers and function parameters is fine","msgtype":"m.text"},"ts":1591047615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's fine, just concerned about grammar complexity.","msgtype":"m.text"},"ts":1591047617000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton the grammar is already set up not to allow an unlabeled `break` outside of a loop, or a `break l` out side of an `l`","msgtype":"m.text"},"ts":1591047657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"making it so that there are no labels or loops visible to the `do` is actually easier than propagating that information through all expressions","msgtype":"m.text"},"ts":1591047691000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(by a lot)","msgtype":"m.text"},"ts":1591047693000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not really","msgtype":"m.text"},"ts":1591047705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have to explicitly ban it using early errors","msgtype":"m.text"},"ts":1591047711000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The grammar for `do {}`? Because there's no grammar restrictions in the spec: https://tc39.es/ecma262/#prod-BreakStatement","msgtype":"m.text"},"ts":1591047718000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"or a parameter","msgtype":"m.text"},"ts":1591047730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek you'd have to explicitly allow it, too","msgtype":"m.text"},"ts":1591047733000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no you wouldn't?","msgtype":"m.text"},"ts":1591047738000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there is an early error for `break` outside of loops","msgtype":"m.text"},"ts":1591047747000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but not one for break inside blocks","msgtype":"m.text"},"ts":1591047757000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to allow `for (;;) { (do { break;} ) }` you need to make the error not trip","msgtype":"m.text"},"ts":1591047763000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nothing explicitly allows `x: { break x; }`","msgtype":"m.text"},"ts":1591047772000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1591047776000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`x: { { break x; } }`","msgtype":"m.text"},"ts":1591047789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't need to add anything for `x: { do { break x; } }` to work there","msgtype":"m.text"},"ts":1591047809000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, you do","msgtype":"m.text"},"ts":1591047829000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you need to modify `ContainsUndefinedBreakTarget` to not error in that case","msgtype":"m.text"},"ts":1591047841000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently it would","msgtype":"m.text"},"ts":1591047843000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(ok it might not, but it certainly would for e.g. `x: if(do{break x;}) ;`","msgtype":"m.text"},"ts":1591047870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1591047871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"LabelledEvaluation doesn't apply to expressions, so the labelSet wouldn't be populated.","msgtype":"m.text"},"ts":1591047871000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1591047876000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so","msgtype":"m.text"},"ts":1591047877000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it would error","msgtype":"m.text"},"ts":1591047878000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok true labelled evaluation would need to be updated","msgtype":"m.text"},"ts":1591047892000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"labelled evaluation is runtime semantics","msgtype":"m.text"},"ts":1591047919000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you'd also need to update the static semantics","msgtype":"m.text"},"ts":1591047924000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1591047925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you sure about the if statement?","msgtype":"m.text"},"ts":1591047951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: a different example might be this: `switch (x) { case 0: do {break; } }` since it would have passed the `ContainsUndefinedBreakTarget` check","msgtype":"m.text"},"ts":1591047957000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Or `do { do { break; } } while (true);` ;)","msgtype":"m.text"},"ts":1591047978000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1591047987000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1591047989000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I am not sure if it would error. But either it would error, or `x: if(do{break y}); ` would not. so it would need to be updated one way or the eother.","msgtype":"m.text"},"ts":1591048015000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you'd definitely to propagate the about labels/breaks through expressions, where currently and with my proposed semantics you do not need to do that.","msgtype":"m.text"},"ts":1591048045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'll write up the changes for that if you want","msgtype":"m.text"},"ts":1591048064000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, yeah, like I said; it's actually strictly simpler to spec my propose semantics. not that this should have much weight","msgtype":"m.text"},"ts":1591048066000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nah","msgtype":"m.text"},"ts":1591048068000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think spec difficulty should matter, like I say","msgtype":"m.text"},"ts":1591048075000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this was just a response to rbuckton's concern about the spec difficulty of my proposed semantics","msgtype":"m.text"},"ts":1591048089000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: Other iterator prototypes have a toStringTag, like <https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-@@tostringtag>.","msgtype":"m.text"},"ts":1591048324000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"devsnek: is it intentional that %WrapForValidIteratorPrototype% does not?","msgtype":"m.text"},"ts":1591048327000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1591048371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, i'll ask adam if he can file a PR to add it","msgtype":"m.text"},"ts":1591048386000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"rbuckton: so i think i can be convinced that selective banning may be the desirable solution as a follow-on, especially if a version without control flow is shipped first","msgtype":"m.text"},"ts":1591048520000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and we get to see what the uptake is like","msgtype":"m.text"},"ts":1591048531000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmm. are do-expressions already in any of the compile-to-js languages?","msgtype":"m.text"},"ts":1591051630000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"curious to know what the uptake is like already","msgtype":"m.text"},"ts":1591051647000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Babel?","msgtype":"m.text"},"ts":1591051706000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jorendorff: lots of us do a lot of strong advocacy for people to never use pre-stage-3 proposals, so it may not be that clear a picture","msgtype":"m.text"},"ts":1591051732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"@jorendorff jridgewell https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions","msgtype":"m.text"},"ts":1591051737000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"babel's is broken-ish though","msgtype":"m.text"},"ts":1591051786000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but still popular with jsx, I think","msgtype":"m.text"},"ts":1591051801000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yah, I think JSX expressions is the biggest usecase","msgtype":"m.text"},"ts":1591051842000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"[Repl](https://babeljs.io/repl#?browsers=ie%2011&build=&builtIns=false&spec=false&loose=true&code_lz=MYewdgzgLgBCMF4YBN4G8BQMYEsBmMAFFAE4CuApgJQybbamVYwC-MFANhBbc9ngEMuFZiwwsgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=stage-1&prettier=false&targets=&version=7.10.2&externalPlugins=)","msgtype":"m.text"},"ts":1591051901000,"senderName":"jridgewell","senderId":"jridgewell@irc"}
]