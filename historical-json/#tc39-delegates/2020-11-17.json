[
{"content":{"body":"rickbutton: is the records and Tuple monthly call still happening in 15.5 hours?","msgtype":"m.text"},"ts":1605583815000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rough if true","msgtype":"m.text"},"ts":1605584053000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can anyone contact Frank Tang - we want to see if Intl.Enum can  be brought forwards to today","msgtype":"m.text"},"ts":1605603297000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"It's a good day when the notes document starts with \"Yes, sir. Take it off.\"","msgtype":"m.text"},"ts":1605603705000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"(brought to you by autotranscribe)","msgtype":"m.text"},"ts":1605603718000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"robpalme: the best person to contact Frank would be sffc, IMO","msgtype":"m.text"},"ts":1605603894000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"typically, I would avoid normative changes with strictly editorial motivation, but I think this ends up with a nicer semantics","msgtype":"m.text"},"ts":1605603994000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh I guess it was originally motivated by non-editorial reasons, which makes sense","msgtype":"m.text"},"ts":1605604095000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ystartsev: I also don't understand how iterator helpers are impacted","msgtype":"m.text"},"ts":1605604187000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"littledan: it kind of sounds like your active mic is on your phone in your pocket","msgtype":"m.text"},"ts":1605604232000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: the comment I got from the people involved was \"this simplification looks good, we had to jump through similar hoops when implementing iterator helpers\"","msgtype":"m.text"},"ts":1605604263000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"This is a very positive simplification","msgtype":"m.text"},"ts":1605604264000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I want to note that we did discuss this path in the past","msgtype":"m.text"},"ts":1605604275000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It created extra load for implentations and no one had a particular use for it","msgtype":"m.text"},"ts":1605604295000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"michaelficarra: i wasn't directly involve in the implementation but i can get further details","msgtype":"m.text"},"ts":1605604300000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"We decided to leave it in because engines thought it might be more intuitive for developers","msgtype":"m.text"},"ts":1605604317000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ystartsev: it's not a big deal, but I am curious","msgtype":"m.text"},"ts":1605604322000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I don't think this is a very strong intuition though. I like the change.","msgtype":"m.text"},"ts":1605604335000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"is this supposed to say who voted for what","msgtype":"m.text"},"ts":1605604926000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: ^","msgtype":"m.text"},"ts":1605604952000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: as in, the list of names?","msgtype":"m.text"},"ts":1605604965000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1605604969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, that was requested in the reflector","msgtype":"m.text"},"ts":1605604971000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1605604975000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is daniel R on irc?","msgtype":"m.text"},"ts":1605604989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this appears to be contentious though, it would be good to have a direct conversation about it. i have no strong opinion","msgtype":"m.text"},"ts":1605604992000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i don't mind that much either","msgtype":"m.text"},"ts":1605605022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just surprised me","msgtype":"m.text"},"ts":1605605028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd be interested to hear an argument for anonymity on a non-binding temperature check; i like the names being shown tho","msgtype":"m.text"},"ts":1605605049000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the argument is that people may not feel safe voting as they really feel, due to social pressure and their name being present","msgtype":"m.text"},"ts":1605605091000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"\"voting\" used here in a loose sense, \"expressing their emotions through hieroglyphs\"","msgtype":"m.text"},"ts":1605605118000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1605605142000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Again, I strongly feel we should roll back the stage ,because the plan of early stage said that if there is web comp issue, it will be withdrawn.","msgtype":"m.text"},"ts":1605605157000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ljharb: he says \"idk how to use IRC\"","msgtype":"m.text"},"ts":1605605267000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose: happy to walk him through it during our local tuesday if he's interested :-p","msgtype":"m.text"},"ts":1605605365000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: I agree, that's a fair point","msgtype":"m.text"},"ts":1605605466000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"why is it important that that was the original plan, if it's not the plan now?","msgtype":"m.text"},"ts":1605605520000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: do you mean you think this isn't useful at all if it can't help ObservableArray compat?","msgtype":"m.text"},"ts":1605605547000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if we don't rollback the stage, it means the communtiy do not have the chance to invole about the name or other things.","msgtype":"m.text"},"ts":1605605552000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"what other things?","msgtype":"m.text"},"ts":1605605592000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"damn, that would have been such an improvement","msgtype":"m.text"},"ts":1605605628000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"for example, new syntax or new method.","msgtype":"m.text"},"ts":1605605631000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"shu: isn't \"indifferent\" the same as \"abstain\"?","msgtype":"m.text"},"ts":1605605651000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I feel new syntax could be a better choice in current situation.","msgtype":"m.text"},"ts":1605605668000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: as shu already commented, new syntax for this isn't something a number of us feel are warranted","msgtype":"m.text"},"ts":1605605675000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: the benefit here would have been the unification of the html datastructures","msgtype":"m.text"},"ts":1605605685000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ljharb: lack of support is similar to opposition in this committee","msgtype":"m.text"},"ts":1605605686000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"its a huge pain point for devs","msgtype":"m.text"},"ts":1605605690000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"michaelficarra: fair enough","msgtype":"m.text"},"ts":1605605694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"itemAt makes me wince","msgtype":"m.text"},"ts":1605605709000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"adding new syntax to html won't help, because historical code still exists","msgtype":"m.text"},"ts":1605605711000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"so it doesn't achieve the goal of unification","msgtype":"m.text"},"ts":1605605722000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"real shame","msgtype":"m.text"},"ts":1605605724000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if we want to solve dev pain point, pls roll back the stage so devs can say their ideas.","msgtype":"m.text"},"ts":1605605732000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: the outcome here is that this specific goal is impossible","msgtype":"m.text"},"ts":1605605763000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"we can certainly roll back the stage, but its irrelevant with regards to unification","msgtype":"m.text"},"ts":1605605793000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"We at least should give a chance that community could revisit the proposal in current situation. Becuase normally naming issue is solved in stage 2 not stage 3.","msgtype":"m.text"},"ts":1605605835000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: sure, but that is a different topic","msgtype":"m.text"},"ts":1605605866000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"What's different? Are we discussing naming issue now?","msgtype":"m.text"},"ts":1605605913000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"no...","msgtype":"m.text"},"ts":1605605923000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: not sure if you already got the feature req but it'd be really cool if presenters could self-request a temp check and provide a question, so that chairs both can \"approve\" it, and then also the question is displayed near the emojis","msgtype":"m.text"},"ts":1605606261000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ill add it -- looks like we need labels for temp checks and multiple temp checks","msgtype":"m.text"},"ts":1605606290000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1605606297000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm strongly positive about .at in Arrays and TypedArrays, but really indifferent about it in Strings","msgtype":"m.text"},"ts":1605606298000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"we're running dangerously close to turning this temperature check into a voting system","msgtype":"m.text"},"ts":1605606369000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu for the records, my indifference means I'm totally neutral about this feature in Strings","msgtype":"m.text"},"ts":1605606370000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"+1 michaelficarra","msgtype":"m.text"},"ts":1605606437000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we should probably make heart and thumbs up be mutually exclusive, at least","msgtype":"m.text"},"ts":1605606528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"idk i mean rn shu is soliciting how the room feels about a thing, not whether or not we are permitting forward momentum","msgtype":"m.text"},"ts":1605606548000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"my internet is bad","msgtype":"m.text"},"ts":1605606555000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"it's like exit polling, totally unproblematic","msgtype":"m.text"},"ts":1605606604000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"erm","msgtype":"m.text"},"ts":1605606606000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"TC39 now has \"no confidence\" votes :D","msgtype":"m.text"},"ts":1605606652000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"for the records: I'm opposed to explore syntax before the proposed built-in API for this feature","msgtype":"m.text"},"ts":1605606709000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I explicitly endorse staying at Stage 3 with these changes we discussed","msgtype":"m.text"},"ts":1605606798000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1605606828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"was the syntax proposal actually serious?","msgtype":"m.text"},"ts":1605606860000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sounds like yes","msgtype":"m.text"},"ts":1605606881000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am floored","msgtype":"m.text"},"ts":1605606887000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1605606905000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am not really sure if this syntax suggestion is in good faith. It seems like solving for \"what will block this proposal from affirming Stage 3\" rather than a serious proposal.","msgtype":"m.text"},"ts":1605607002000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's clear, given everyone's comments, that it will not get consensus in committee","msgtype":"m.text"},"ts":1605607034000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I feel like we're getting off-topic from the proposal topic and instead considering changing what Stage 3 means. I do not agree to this change.","msgtype":"m.text"},"ts":1605607083000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"The situation is significantly changed and the break the original motivation and the requirements in stage 1. So I don't understand how the proposal have the quality of stage 3 should have.","msgtype":"m.text"},"ts":1605607313000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"brad4d: please mute","msgtype":"m.text"},"ts":1605607363000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think we could use an extra hand with the notes","msgtype":"m.text"},"ts":1605607377000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sorry had to take a quick break","msgtype":"m.text"},"ts":1605607395000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"haxjs: the motivation from the committee when it achieved stage 1 included its ergonomics/usefulness separate from ObservableArray: https://github.com/tc39/notes/blob/840c700dc7fa7b9f6d0a3c208bd66b333e304717/meetings/2020-06/june-4.md#item-for-stage-1","msgtype":"m.text"},"ts":1605607493000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: so despite the only motivation prior to being presented being ObservableArray compat, since stage 1 it's had more motivations than that","msgtype":"m.text"},"ts":1605607512000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"What i mean is, if the motivation is only ergonomics, it's possible to not advance to stage 1 in that time, or may have other solution in stage 2.","msgtype":"m.text"},"ts":1605607555000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I don't really understand the motivation for the `debugger.` proposal. It feels like overkill.","msgtype":"m.text"},"ts":1605607584000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ljharb: this is why i think it should be at least rollback to stage 2.","msgtype":"m.text"},"ts":1605607619000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: i'm not sure i'd ever put ergonomics after \"only\"","msgtype":"m.text"},"ts":1605607641000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: what other solution tho? as has been discussed, syntax for this is a nonstarter for some on the committee","msgtype":"m.text"},"ts":1605607659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: (at least until after a method exists)","msgtype":"m.text"},"ts":1605607669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in our process, we require consensus to change stages, not to maintain them","msgtype":"m.text"},"ts":1605607743000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't others, but if it did not have the benefit of unifying dom .item(), i will not agree it's worth to add new method for that.  And yes, if there is a method ,then syntax may be not have enough benefit.","msgtype":"m.text"},"ts":1605607744000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"littledan: this is the process issue we need to figure out","msgtype":"m.text"},"ts":1605607788000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: can you elaborate on why you don't think it's worth adding a new method without the unification goal?","msgtype":"m.text"},"ts":1605607833000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: Sure, if you have a process change you want to propose, feel free to ask the committee for consensus. I'm describing how we work today.","msgtype":"m.text"},"ts":1605607854000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"+1 to Waldemar's comment about how it's good to specify intent","msgtype":"m.text"},"ts":1605607899000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: sorry i can't because my english level can't discuss such complex thing.","msgtype":"m.text"},"ts":1605607900000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ljharb: just feel not worth enough. especially the possible syntax solution could have better ergonomics . So if the only motivation is ergonomics, we should first consider syntax solution.","msgtype":"m.text"},"ts":1605608029000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: why would you find syntax more ergonomic than a method? is that just in this case, or in general?","msgtype":"m.text"},"ts":1605608058000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in this case i think it's better because it match `a[idx]`, and the syntax could also apply to slice notation proposal.","msgtype":"m.text"},"ts":1605608143000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"slice notation is viable because a slice method exists","msgtype":"m.text"},"ts":1605608205000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu i had similar \"concerns\"/unease","msgtype":"m.text"},"ts":1605608238000,"senderName":"drousso_","senderId":"drousso_@irc"},
{"content":{"body":"haxjs: I sympathize with the fact ESL makes it harder. The same happens to me. Although, it's hard for me to understand your objection about adding the method as not worth being added.  When you say \"just feel not worth enough\" it seems to me also as not convincing to reject it, as the room is generally positive about the feature.","msgtype":"m.text"},"ts":1605608304000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"haxjs: as ljharb has mentioned, the syntax version is a nonstarter. It is too much of a cost compared to a built in api","msgtype":"m.text"},"ts":1605608373000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"syntax has the cost, but also have some benefit which method can't have:","msgtype":"m.text"},"ts":1605608566000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"1. never have compatibility issue (we don't know whether `at` really web compatible)","msgtype":"m.text"},"ts":1605608566000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"2. better ergonomic  than method , especially in this case , it's not a \"brand new syntax\" but a new syntax which based on the well-known `a[idx]`","msgtype":"m.text"},"ts":1605608566000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"3. apply to other proposals like slice notation","msgtype":"m.text"},"ts":1605608566000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"it would only make sense on indexables tho, not on map/set/etc, so to me syntax is much worse ergonomics for this","msgtype":"m.text"},"ts":1605608640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm also skeptical that any syntax solution would be helpful for slice notation","msgtype":"m.text"},"ts":1605608660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: for the notes, console. what?","msgtype":"m.text"},"ts":1605608663000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: `a[idx]` also not apply to map/set","msgtype":"m.text"},"ts":1605608665000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"tab?","msgtype":"m.text"},"ts":1605608665000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"tap","msgtype":"m.text"},"ts":1605608669000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually, just please edit the notes","msgtype":"m.text"},"ts":1605608681000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"haxjs: right, that's normal object semantics. index `-1` isn't.","msgtype":"m.text"},"ts":1605608682000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"note, console is a standard! You can contribute to it! https://github.com/whatwg/console","msgtype":"m.text"},"ts":1605608683000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that section was hard to follow","msgtype":"m.text"},"ts":1605608687000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"console.tap = v => (console.log(v), v)","msgtype":"m.text"},"ts":1605608687000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"haxjs: iow, \"at\" semantics are *not* the same at all as bracket semantics, it's a subset of them","msgtype":"m.text"},"ts":1605608707000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my proposed syntax like C# 8:  `a[^1]` means `a[a.length - 1]`. And it also solve the slice notation issue, `a[0:^i]` means `a.slice(0, a.length - i)` , this solve the problem of `i` be `0`.","msgtype":"m.text"},"ts":1605608724000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ystartsev: you have background noise i think?","msgtype":"m.text"},"ts":1605608852000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shoot","msgtype":"m.text"},"ts":1605608862000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"hard to tell in teams tho, could have been someone else","msgtype":"m.text"},"ts":1605608867000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i just looked and the noise levels look low","msgtype":"m.text"},"ts":1605608907000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I generally share ystartsev and shu 's concerns","msgtype":"m.text"},"ts":1605608939000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"its very hard to sell things that aren't revolutionary to the committee","msgtype":"m.text"},"ts":1605609137000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when they're syntax, that's probably true, yeah","msgtype":"m.text"},"ts":1605609178000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"high bar for syntax","msgtype":"m.text"},"ts":1605609185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"high bar for new global","msgtype":"m.text"},"ts":1605609201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that too, yeah","msgtype":"m.text"},"ts":1605609280000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: please review your notes there","msgtype":"m.text"},"ts":1605609627000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"am i the transcription loser","msgtype":"m.text"},"ts":1605609639000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lotta transcription losers","msgtype":"m.text"},"ts":1605609662000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wish this API worked just a little better...","msgtype":"m.text"},"ts":1605609676000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I might ask next time if I can record the audio privately just so that I can fix up the notes","msgtype":"m.text"},"ts":1605609701000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(also I've been doing the live note fixes up till now but I'm starting to fade, so I stepped back at the start of thiis presentation; sorry other note takers)","msgtype":"m.text"},"ts":1605609766000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's fne","msgtype":"m.text"},"ts":1605609783000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"do we have enough note takers?","msgtype":"m.text"},"ts":1605609902000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i think so","msgtype":"m.text"},"ts":1605609920000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"Bakkot: it's actually really good for some people","msgtype":"m.text"},"ts":1605610260000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"did the note taker die?","msgtype":"m.text"},"ts":1605610260000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: yes","msgtype":"m.text"},"ts":1605610271000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"restarting","msgtype":"m.text"},"ts":1605610285000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1605610328000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"apologies, that was me breaking it rather than a bug","msgtype":"m.text"},"ts":1605610357000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it held quite good until now so kudos","msgtype":"m.text"},"ts":1605610379000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"i should tweak it so it doesn't put up partial words, I think","msgtype":"m.text"},"ts":1605610452000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"might try to do that over lunchbreak","msgtype":"m.text"},"ts":1605610465000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"do you know if it could generate newlines for every voice change?","msgtype":"m.text"},"ts":1605610534000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"asking for a lot probably","msgtype":"m.text"},"ts":1605610549000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"if the api exposes any kind of indicator on that","msgtype":"m.text"},"ts":1605610574000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"the auto transcription really doesn't like shu","msgtype":"m.text"},"ts":1605610816000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"is it because i talk in halting bursts","msgtype":"m.text"},"ts":1605610840000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: double words are better than missing words for editing IMO","msgtype":"m.text"},"ts":1605610868000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu: I don't think so","msgtype":"m.text"},"ts":1605610875000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it knows you are from google and it is scared","msgtype":"m.text"},"ts":1605610877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ummm super weird, google docs just suggested that i \"assign\" one of the comments in the notes to my brother-in-law","msgtype":"m.text"},"ts":1605610880000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"clippy by any other name would be as useless","msgtype":"m.text"},"ts":1605610929000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra yeah, that's my thinking too","msgtype":"m.text"},"ts":1605611096000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: please kill transcription","msgtype":"m.text"},"ts":1605611110000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"dne","msgtype":"m.text"},"ts":1605611115000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should someone be checking off items on the github agenda","msgtype":"m.text"},"ts":1605611146000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm here, just wasn't looking at irc","msgtype":"m.text"},"ts":1605611160000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I do want to note that we already have established consensus on the weaker invariant where the assertion is not part of the cache key","msgtype":"m.text"},"ts":1605611180000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i kind of want an early error for `import 'x'; import 'x' assert { y }`","msgtype":"m.text"},"ts":1605611202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ooof, really wish the realms proposal could be moved up 30 minutes; I want to go to that one but I would also love to go to bed half an hour earlier","msgtype":"m.text"},"ts":1605611218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: `Promise.all([import('x'), import('x', { assert: 'y' })])` might work as a feature test :-p","msgtype":"m.text"},"ts":1605611271000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"did you mean to ping mark","msgtype":"m.text"},"ts":1605611303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"import('x', {}) is syntax error?","msgtype":"m.text"},"ts":1605611328000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"with the proposal it is not","msgtype":"m.text"},"ts":1605611344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, i mean if it's syntax error, it can't be used for feature test for old engines","msgtype":"m.text"},"ts":1605611366000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i think ljharb meant feature testing a specific assertion, not that assertions exist","msgtype":"m.text"},"ts":1605611389000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i c.","msgtype":"m.text"},"ts":1605611400000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Bakkot: presumably it'd be really nice to retrain the transcription model on the set of our voices","msgtype":"m.text"},"ts":1605611410000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the set of speakers is relatively stable from meeting to meeting","msgtype":"m.text"},"ts":1605611421000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, don't think they offer that though","msgtype":"m.text"},"ts":1605611452000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I don't think you get to download the model to train yourself","msgtype":"m.text"},"ts":1605611463000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I recommend against using dynamic import as a feature test; you're writing stuff into the module map that stays alive as long as the surrounding realm does","msgtype":"m.text"},"ts":1605611465000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: mark's not on irc so i settled for pinging you","msgtype":"m.text"},"ts":1605611482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1605611508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: if it's a module i want anyways tho, or if it's a super teeny blob URL?","msgtype":"m.text"},"ts":1605611509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, so that keeps the blob in the module map","msgtype":"m.text"},"ts":1605611524000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1605611537000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can do what you want, but I won't be really happy about these idioms getting popular","msgtype":"m.text"},"ts":1605611539000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"`import(module {}, {})`","msgtype":"m.text"},"ts":1605611547000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's pretty unlikely that will be any app's biggest memory leak :-p","msgtype":"m.text"},"ts":1605611554000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wouldn't be surprised if json modules are a top leak","msgtype":"m.text"},"ts":1605611571000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"after they are supported","msgtype":"m.text"},"ts":1605611575000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"*** The next item will be Grouped Accessors by Ron Buckton *** (rescheduled to avoid a big gap in the session)","msgtype":"m.text"},"ts":1605611634000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"We are starting in one minute!","msgtype":"m.text"},"ts":1605614374000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"won't be able to take notes for much long","msgtype":"m.text"},"ts":1605614534000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"if someone could take it from me","msgtype":"m.text"},"ts":1605614548000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"will pick it back up","msgtype":"m.text"},"ts":1605614723000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I tweaked it some","msgtype":"m.text"},"ts":1605614728000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not sure if it's better","msgtype":"m.text"},"ts":1605614733000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep seeing it","msgtype":"m.text"},"ts":1605614735000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"ty ty","msgtype":"m.text"},"ts":1605614737000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"is it an error if you have multiple getters with the same name? that's news to me, and I can't reproduce it","msgtype":"m.text"},"ts":1605614741000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it is different","msgtype":"m.text"},"ts":1605614747000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"I thought they just acted like subsequent Object.defineProperty calls","msgtype":"m.text"},"ts":1605614750000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: same","msgtype":"m.text"},"ts":1605614771000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think this proposal is pretty orthogonal with how error-happy we want to be. It would make sense with the sloppy semantics just as much.","msgtype":"m.text"},"ts":1605614797000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"our major in-house class system has a grouped accessor definition that atomically defines getter/setters via a single top-level named property.  Ron's proposal does it in a more elegant way by making it first-class.","msgtype":"m.text"},"ts":1605614845000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"Bakkot: transcription died","msgtype":"m.text"},"ts":1605615128000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it's back","msgtype":"m.text"},"ts":1605615140000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'm concerned that using accessors in a decorator has to be leaked to the consumer of the decorator","msgtype":"m.text"},"ts":1605615571000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"IMO, Ron has identified a developer problem, albeit minor. I don't think the particular solution presented is viable for stage 2. But I do weakly support stage 1, assuming Ron would be okay with a different solution (which I doubt).","msgtype":"m.text"},"ts":1605615860000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1605615940000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I like the group accessors, I don't like the idea of `x { #get, #set }`, field seems to be public but it's all private","msgtype":"m.text"},"ts":1605616342000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I may be wrong about multiple accessors of the same name, but my goal was to error on mixed syntax. That's something I can revisit prior to stage 2, assuming we consider this feature.","msgtype":"m.text"},"ts":1605616345000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that assumes we could have  `x { get, #get, set, #set }`","msgtype":"m.text"},"ts":1605616418000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"littledan: maybe i'm misunderstanding, i thought you were saying that some decorators will want to change a property into an accessor, and that doing that has performance implications, and so the user of the decorator should have to explicitly allow that","msgtype":"m.text"},"ts":1605616508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: We have to make a global decision about how all decorators desugar, to meet TS's goal that we don't use cross-file knowledge in transpiling decorators","msgtype":"m.text"},"ts":1605616542000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I mean, that goal combined with V8's goal that decorators desugar in a statically analyzable way, so they are fast to interpret, etc","msgtype":"m.text"},"ts":1605616578000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: `class X { @y z }` -> `class X {} accessorLogic(X, y, 'z');`","msgtype":"m.text"},"ts":1605616606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we have to decide at parse-time whether we're making a [[Define]] field or an accessor","msgtype":"m.text"},"ts":1605616637000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"why","msgtype":"m.text"},"ts":1605616648000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(to meet V8's architecture goals)","msgtype":"m.text"},"ts":1605616648000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1605616651000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why v8 arch goals beat developer expectation?","msgtype":"m.text"},"ts":1605616671000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i don't understand v8's requirement there, it seems like this would be equiv to modifying X.prototype","msgtype":"m.text"},"ts":1605616686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"before using X","msgtype":"m.text"},"ts":1605616689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we're combining all the goals together in the proposal, not choosing one over the other","msgtype":"m.text"},"ts":1605616694000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"which is a common pattern that engines already support","msgtype":"m.text"},"ts":1605616697000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Note most recent programming languages all move to auto property and hiding field semantic.","msgtype":"m.text"},"ts":1605616763000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"one reason we didn't select always-autoaccessor semantics for fields was the performance cost Shu described. Another reason is that it wouldn't work with Object spread {...obj}","msgtype":"m.text"},"ts":1605616812000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if we didn't have class fields we wouldn't have to worry about decorating them 😅","msgtype":"m.text"},"ts":1605616857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess technically we don't have class fields yet","msgtype":"m.text"},"ts":1605616879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes class fields have too many issues.","msgtype":"m.text"},"ts":1605616946000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I really against class fields because it invent too many issues than solving real problems.","msgtype":"m.text"},"ts":1605617002000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"`{...object}` issue is a separate issue, anytime u refactor code to accessors, it will break. So no  news in engineering view at all.","msgtype":"m.text"},"ts":1605617097000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"there is no emoji for how i'm feeling","msgtype":"m.text"},"ts":1605617216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i had technical difficulties at the beginning of this presentation","msgtype":"m.text"},"ts":1605617280000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry for the z-index fail yall","msgtype":"m.text"},"ts":1605617283000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"what was the professed motivation for this proposal? was it mainly for decorator interaction or mainly for syntax ergonomics?","msgtype":"m.text"},"ts":1605617317000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"both","msgtype":"m.text"},"ts":1605617329000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1605617339000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I bring it up now because of decorators, but I've been thinking about it for awhile in general.","msgtype":"m.text"},"ts":1605617353000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I like this proposal generally","msgtype":"m.text"},"ts":1605617386000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I also hope we can have willset / didset like Swift.","msgtype":"m.text"},"ts":1605617414000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"The proposal have some small issues but IMO, most issues are coming from other proposals (like fields), not the issue of itself.","msgtype":"m.text"},"ts":1605617500000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"And I totally agree that decorator magically make field become accessor is a bad idea.","msgtype":"m.text"},"ts":1605617649000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"^ +1","msgtype":"m.text"},"ts":1605617782000,"senderName":"drousso_","senderId":"drousso_@irc"},
{"content":{"body":"grouping for objects looks a bit syntactically noisy to me `const foo = { bar { get() {...}, set(...) {...}: { internalField: { ... } } } }` where `{ internalField: { ... } } }` is an initial value of `foo.bar`","msgtype":"m.text"},"ts":1605618416000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"for classes looks fine","msgtype":"m.text"},"ts":1605618444000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"object normally do not use getter/setter frequently","msgtype":"m.text"},"ts":1605618449000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I believe it's most for classes.","msgtype":"m.text"},"ts":1605618462000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"syntax for objects was presented on slides","msgtype":"m.text"},"ts":1605618482000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"yes ,for complement, it should support object","msgtype":"m.text"},"ts":1605618500000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"but I'm ok if it not","msgtype":"m.text"},"ts":1605618518000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I'd like the question that we ask for consensus on to include a statement about the relationship with decorators, not just Stage 1, since that's ambiguous","msgtype":"m.text"},"ts":1605618599000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I presented with object for comparison. I also feel that it makes more sense in classes than in object literals, but did not feel that was a reason to not consider it.","msgtype":"m.text"},"ts":1605618612000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I'm confused with the discussion. This proposal is for the developer to have the controls while writing the code, while decorators are just giving up that control to another program. I see them as orthogonal.","msgtype":"m.text"},"ts":1605618620000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"I don't necessarily object to Stage 1 for this prposal","msgtype":"m.text"},"ts":1605618622000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't believe this being stage 1 should block decorators, but I do think this being stage 1 gives decorators an option to consider as an alternative to auto-converting fields.","msgtype":"m.text"},"ts":1605618653000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I agree decorator and this proposal could be orthogonal. That means decorator should not have auto accessor semantic.","msgtype":"m.text"},"ts":1605618673000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I remain concerned about the upgrade path issue","msgtype":"m.text"},"ts":1605618690000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that I think people will be unhappy to have to write extra tokens in their existing decorator usage (but, the more tokens, the worse)","msgtype":"m.text"},"ts":1605618717000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"decorator magically auto accessor change the semantic dramatically and will cause  problem in many cases.","msgtype":"m.text"},"ts":1605618752000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I proposed `trap` as an orthogonal feature for this months ago, and got pushback from decorator users about this issue","msgtype":"m.text"},"ts":1605618756000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and I want to respect that, even as I see it as a possible alternative","msgtype":"m.text"},"ts":1605618779000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Current stage-1 field decorators don't *automatically* work with the updated decorators proposal, because they would work differently. Stage-1 field decorators that convert something to an accessor do it using `Object.defineProperty`. They would have to explicitly write code to handle both Stage-1 style invocations as well as the updated proposal's decorator invocations.","msgtype":"m.text"},"ts":1605618816000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"right, the upgrade path I mean is around decorator users, not decorator authors","msgtype":"m.text"},"ts":1605618886000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and there are minor grammar changes as well","msgtype":"m.text"},"ts":1605618892000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Those decorators, as part of their upgrade path, could instead throw with a clear explanation as to what needs to be changed. Static type systems like TypeScript could use the type information of the decorator to provide a design-time error as to whether the decorated target is valid (which we already do for Stage-1 decorators).","msgtype":"m.text"},"ts":1605618901000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"but the need to write `trap` or `{get; set;}` would be a significant additional barrier","msgtype":"m.text"},"ts":1605618903000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"some decorators authors are a bit nervous about type interactions with decorators, given how TS doesn't model much right now. It'd be good to discuss what more we can do with standard decorators","msgtype":"m.text"},"ts":1605618947000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"This is good because developer now understand it will become accessors and know that there will be different semantic.","msgtype":"m.text"},"ts":1605618948000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i see a popup in the Teams UI that says \"transcription has started\"","msgtype":"m.text"},"ts":1605618967000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, \"including  a decorator\" is also an explicit signal","msgtype":"m.text"},"ts":1605618972000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we're also testing Teams's transcription?","msgtype":"m.text"},"ts":1605618973000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(and how do i see that?)","msgtype":"m.text"},"ts":1605618982000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Without a syntactic opt-in of some kind, decorators change a field in ways a user may not expect. This can impact performance and runtime evaluation due to subclassing. I am still concerned about these issues.","msgtype":"m.text"},"ts":1605619022000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"No, \"including decorator\" is just means I want decorate something, not changing semantic dramatically. Decorate something normally not breaking change.","msgtype":"m.text"},"ts":1605619040000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I feel like, if Stage 1 means, \"the committee agrees with this concern\", that's something we should say explicitly","msgtype":"m.text"},"ts":1605619105000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and record as a conclusion, so we can build on it in the decorators champion group","msgtype":"m.text"},"ts":1605619117000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"To me, this is similar to the discussion around decorating function declarations from several years back. If function decorators  forced `let`-like semantics for a function declaration and prevented hoisting, decorating a function could break code and require refactoring.","msgtype":"m.text"},"ts":1605619125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Our solution was to just defer function decorators until after class decorators","msgtype":"m.text"},"ts":1605619211000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Agree! Maybe we should introduce non-hoisting function declaration like `const f() {}` so we can have function decorators.","msgtype":"m.text"},"ts":1605619218000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"shu: https://usercontent.irccloud-cdn.com/file/lts3X43J/image.png","msgtype":"m.text"},"ts":1605619443000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: i don't see that","msgtype":"m.text"},"ts":1605619491000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i only have Device settings, Meeting details, and Enter full screen","msgtype":"m.text"},"ts":1605619501000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"It may not be available for guests :(","msgtype":"m.text"},"ts":1605619516000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(I guess for function decorators, I just think we should go ahead with let-style semantics, since there's really no other way to do it. I don't feel like const function declarations would be worth it.)","msgtype":"m.text"},"ts":1605619768000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1605619884000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"so overall I don't really agree with the claim that, it's absolutely necessary that the \"identity decorator\" do nothing. I think it would be a *nice* property, but makes sense to weigh against other things","msgtype":"m.text"},"ts":1605619931000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Of coz everything are tradeoff. But I really feel decorator should not change semantic like that. Especailly in some cases u only want to deocator to add some metadata, and never expect any semantic change.","msgtype":"m.text"},"ts":1605620169000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"yeah, shu +1, no one is going to expect `atob` to be missing in the new realm","msgtype":"m.text"},"ts":1605621199000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So let's add `atob` to JS ?? :P","msgtype":"m.text"},"ts":1605621230000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"people in TC39 have made security claims about all sorts of features, such as Promises, private fields, etc. Maybe a rebrand would be a way to discard \"baggage\" but I don't think it makes sense to hold off on a feature because of confusing claims","msgtype":"m.text"},"ts":1605621853000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm ok with a rebrand to Context","msgtype":"m.text"},"ts":1605621905000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"if that will help to clear up the confusion","msgtype":"m.text"},"ts":1605621930000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"What rebrand mean?","msgtype":"m.text"},"ts":1605622033000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: rename","msgtype":"m.text"},"ts":1605622041000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"instead of Realm we would call it Context","msgtype":"m.text"},"ts":1605622057000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"and I'm +1 for this renaming if it's useful","msgtype":"m.text"},"ts":1605622079000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"forgot to mention: as shu said, this is super lightweight on the js engine side, we already can do this -- most of the real work would be gecko","msgtype":"m.text"},"ts":1605622112000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I think Context is the lowest value word in all of computer science.  perhaps second only to Data","msgtype":"m.text"},"ts":1605622138000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"Not sure why `Context` is better than `Realm` ...","msgtype":"m.text"},"ts":1605622147000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"can we plz rename compartments?","msgtype":"m.text"},"ts":1605622149000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I like \"realm\" because it sounds like we are in a fantasy novel and i think thats hilarious","msgtype":"m.text"},"ts":1605622170000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1605622174000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Yeah, it's hard for me to remember the spelling of  `compartment`   :)","msgtype":"m.text"},"ts":1605622192000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"joking aside, the name is hard for new comers","msgtype":"m.text"},"ts":1605622192000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"if someone says \"let's talk about Realms\" in a computer conversation I immediately know they are talking about JS stuff","msgtype":"m.text"},"ts":1605622204000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I have thoughts about Compartments but I'd love to address them after we go through the Realms API (or Context API)","msgtype":"m.text"},"ts":1605622220000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"i love the fact that we can talk about \"the primordials of a realm\" and it _not_ be scifi/fantasy","msgtype":"m.text"},"ts":1605622234000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Compartments is good too because no one else uses that work","msgtype":"m.text"},"ts":1605622237000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"except for US","msgtype":"m.text"},"ts":1605622243000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"firefox uses compartments 😭","msgtype":"m.text"},"ts":1605622257000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1605622262000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"The only thing I love about the name Realms is the fact we can have Frozen Realms and this sounds like Warcraft","msgtype":"m.text"},"ts":1605622271000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/source/js/src/NamespaceImports.h#142","msgtype":"m.text"},"ts":1605622279000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"also, Realms reminds me of the cartoon Dungeons & Dragons, which is possibly the greatest cartoon of all time","msgtype":"m.text"},"ts":1605622302000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: well I watched it on pt-br so I missed any references, it took me a long time to know the time is originally Dungeons & Dragons.","msgtype":"m.text"},"ts":1605622359000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"The RPG goes without translation in Brazil, at least","msgtype":"m.text"},"ts":1605622377000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"\"zone\" in spidermonkey is also good -- reminds of the book roadside picnic","msgtype":"m.text"},"ts":1605622391000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"switching to tdz","msgtype":"m.text"},"ts":1605622408000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"please we cannot call this contexts node already has this and it's called contexts and the overlap will be painful","msgtype":"m.text"},"ts":1605631334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Nations, Borders, Worlds, Universes, so many options","msgtype":"m.text"},"ts":1605631708000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Globals","msgtype":"m.text"},"ts":1605631984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Globe","msgtype":"m.text"},"ts":1605632963000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that contains globals at least in English implications?","msgtype":"m.text"},"ts":1605632978000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's no conclusion listed on \"realms\" for day 2's notes - what was the result?","msgtype":"m.text"},"ts":1605639732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it was just a status update, proposal champions are still talking to HTML / browser vendors (beyond just the JS engine people)","msgtype":"m.text"},"ts":1605640445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"people were positive about it in the temperature check though","msgtype":"m.text"},"ts":1605640471000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah ok, thanks","msgtype":"m.text"},"ts":1605641105000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the title is \"for stage 3\"","msgtype":"m.text"},"ts":1605641109000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(is why i asked, i mean)","msgtype":"m.text"},"ts":1605641118000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so wait, `at` is back for Strings now too?","msgtype":"m.text"},"ts":1605641573000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"always has been","msgtype":"m.text"},"ts":1605641674000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"🔫 👨‍🚀","msgtype":"m.text"},"ts":1605641729000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol.","msgtype":"m.text"},"ts":1605641876000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"guess I'll revert my revert then","msgtype":"m.text"},"ts":1605641884000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we need to be careful tho, core-js apparently shipped the old stage 1 code-point-based String.prototype.at polyfill","msgtype":"m.text"},"ts":1605641987000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so depending on how it installs it, there might be web compat issues","msgtype":"m.text"},"ts":1605641998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, I just noticed that thread","msgtype":"m.text"},"ts":1605642060000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Why are they shipping `at`? It was renamed to `codePointAt`, right?","msgtype":"m.text"},"ts":1605642075000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: no, that's different","msgtype":"m.text"},"ts":1605642105000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: there's a stage 1 proposal by mathias for String.prototype.at that returns code points","msgtype":"m.text"},"ts":1605642116000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: it's basically dead at this point, and nobody should have ever shipped a polyfill for it at that early a stage, but since core-js did, we have to pay attention to it","msgtype":"m.text"},"ts":1605642144000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: codePointAt returns a number, not a string code point","msgtype":"m.text"},"ts":1605642178000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: like `'💩'.at(0)` would return `'💩'`","msgtype":"m.text"},"ts":1605642193000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Ugh","msgtype":"m.text"},"ts":1605642223000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the existence of the old proposal is fine, but i'm ugh on enabling stage < 3 polyfills by default, yes :-(","msgtype":"m.text"},"ts":1605642402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"< 3 polyfills\" - horse_js","msgtype":"m.text"},"ts":1605651276000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(not actually)","msgtype":"m.text"},"ts":1605651281000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1605651323000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wait so the main thing I want to know is","msgtype":"m.text"},"ts":1605651347000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"was commitment expressed by V8 or SM to ship String.prototype.at and see what breaks?","msgtype":"m.text"},"ts":1605651366000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"historically, no","msgtype":"m.text"},"ts":1605651762000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"String.prototype.at was a ES2015 proposal","msgtype":"m.text"},"ts":1605651778000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"wait what","msgtype":"m.text"},"ts":1605651789000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: the \"item\" proposal's string method tho, i think yes","msgtype":"m.text"},"ts":1605651791000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah I mean the new one","msgtype":"m.text"},"ts":1605651811000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah gotcha","msgtype":"m.text"},"ts":1605651818000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I didn't realize the name had come up before","msgtype":"m.text"},"ts":1605651818000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: mathias' old proposal is stage 0","msgtype":"m.text"},"ts":1605651829000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that seems...complicated, but not necessarily in a way that affects web compat?","msgtype":"m.text"},"ts":1605651833000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ahh cool","msgtype":"m.text"},"ts":1605651836000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it should probably be moved to \"inactive\" actually","msgtype":"m.text"},"ts":1605651836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: the issue is that core-js has a polyfill for the old String `at` proposal. depending on the way it's installed, it may, or may not, cause web compat issues","msgtype":"m.text"},"ts":1605651857000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1605651860000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"let's start with this instead :) https://github.com/tc39/test262/pull/2905","msgtype":"m.text"},"ts":1605657358000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]