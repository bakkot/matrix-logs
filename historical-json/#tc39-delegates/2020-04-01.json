[
{"content":{"body":"https://github.com/tc39/proposal-pattern-matching/issues/155","msgtype":"m.text"},"ts":1585700847000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean I could be interested in co-championing","msgtype":"m.text"},"ts":1585701019000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've never done it and I do feel excited about the feature","msgtype":"m.text"},"ts":1585701034000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm worried about needing to bikeshed about it with the entirety of the internet","msgtype":"m.text"},"ts":1585701057000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but that's really my only worry","msgtype":"m.text"},"ts":1585701063000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there are some really interesting items on the queue for decimal. It'd be great to have a short extension to talk through the queue if we have time.","msgtype":"m.text"},"ts":1585701068000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rkirsling: that is very much likely to be the job","msgtype":"m.text"},"ts":1585701150000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: including, managing opinions on github","msgtype":"m.text"},"ts":1585701160000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: happy to move you to the top list tho if you like :-)","msgtype":"m.text"},"ts":1585701175000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"😭","msgtype":"m.text"},"ts":1585701185000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lmk","msgtype":"m.text"},"ts":1585701189000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'll sleep on it and get back to you","msgtype":"m.text"},"ts":1585701202000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"kk, no rush","msgtype":"m.text"},"ts":1585701205000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: I volunteered as well, because I'm pretty good at sifting thru and rejecting bad opinions. ^_^ But if you want the experience, absolutely go for it.","msgtype":"m.text"},"ts":1585702030000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"doesn't have to be mutually exclusive, right? 😅","msgtype":"m.text"},"ts":1585702069000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I could probably learn from you folks on that","msgtype":"m.text"},"ts":1585702078000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(basically the notion of a \"champion group\" is what's heartening me into wanting to do this :p)","msgtype":"m.text"},"ts":1585702369000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also is the whole group being replaced?","msgtype":"m.text"},"ts":1585703902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"including Brian and Sebastian?","msgtype":"m.text"},"ts":1585703910000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"neither has been involved in the proposal for a long while; if either is interested in resuming they’ll be welcome","msgtype":"m.text"},"ts":1585707255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1585708106000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fwiw, I was also coming in picturing this as a \"champion group\". I definitely don't have the requisite experience to champion alone, but I'm very passionate about the feature and would like to contribute.","msgtype":"m.text"},"ts":1585713545000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1585713623000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sffc mathiasbynens gibson042: I have slides for tomorrow: https://docs.google.com/presentation/d/1COuuP_0fxK_s8-H8AScDMjMzKSEiAlAnOi4snP-OiHY/edit?usp=sharing","msgtype":"m.text"},"ts":1585720475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the summary of which is, I would like both kinds of escape to work in both kinds of regex","msgtype":"m.text"},"ts":1585720495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I realize there are consistency arguments against each of the possible kinds (except `\\u{}` in `u`), but to my mind weighing those against the advantages of a.) making tooling simpler and b.) not spending more time on this topic, and in light of the expectation that this will affect very few users except tool authors, it comes down in favor of just making them all legal","msgtype":"m.text"},"ts":1585720611000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is not to say that I disagree with the consistency arguments, just that there are other goals which I think should outweigh them in this particular case","msgtype":"m.text"},"ts":1585720641000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you have thoughts on this I'd be happy to discuss more before it comes up again in plenary","msgtype":"m.text"},"ts":1585720670000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(or, of course, once it has come up again in plenary, just, it would be ideal to resolve this in advance)","msgtype":"m.text"},"ts":1585720712000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I love the subtitle, hehe)","msgtype":"m.text"},"ts":1585721002000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: I appreciate the heads-up, will take a look today","msgtype":"m.text"},"ts":1585721315000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens also we agreed to revisit for half an hour tomorrow","msgtype":"m.text"},"ts":1585721382000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hoping we can get things to a point where we don't need the full time","msgtype":"m.text"},"ts":1585721400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"_really_ hoping we get to a point where we don't need more than that, because that will force an absolutely excruciating process discussion","msgtype":"m.text"},"ts":1585721423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I said (in plenary) yesterday I don't intend to block and that still stands. I do disagree with what you propose but I can live with it. I'd like to say on the record that imho it's a mistake to expose the concept of surrogates in more places but then that's that. there's other (imho better) ways to support ASCIIfiers, and I don't buy the argument that tools should be able to do things without the","msgtype":"m.text"},"ts":1585721952000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"need to tokenize/parse","msgtype":"m.text"},"ts":1585721952000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens ok, thanks for feedback","msgtype":"m.text"},"ts":1585721995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fwiw the \"expose the concept of surrogates in more places\" feels pretty weak to me if we are in agreement that almost no actual humans will ever be exposed to this case","msgtype":"m.text"},"ts":1585722024000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(though, the point in my slides is that the question of surrogates in `u`-mode regexes should not have been considered open, so either way that's a mistake we're already mostly committed to)","msgtype":"m.text"},"ts":1585722092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think \"it should not have been considered open\" is entirely fair. I'm one of the NCG champions and clearly I thought the goal was to match identifiers and disallow individually-escaped surrogate halves (IESH). (in the original comment thread you can see me and Jakob even push back against allowing identifiers in the first place -- why would I then be okay with identifiers-but-also-IESH?)","msgtype":"m.text"},"ts":1585722344000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it is hard to read the spec text which got consensus as intending to treating `\\uLEAD\\uTRAIL` as different from `\\u{}` in `u`-mode regexes; also, there are shipping implementations which make the assumption that they are legal.","msgtype":"m.text"},"ts":1585722489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I feel like these are pretty good reasons to regard it as not being open","msgtype":"m.text"},"ts":1585722511000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: littledan explicitly said he didn't think the IESH case through here: https://github.com/tc39/ecma262/issues/1861#issuecomment-604120402","msgtype":"m.text"},"ts":1585722512000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah, but we often get consensus on things which not everyone has thought through, and that doesn't automatically mean they're open","msgtype":"m.text"},"ts":1585722569000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even if it turns out there's a genuine point of unclarity nearby","msgtype":"m.text"},"ts":1585722584000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my intent with raising this issue was only to settle the point where the current spec text does not have one natural interpretation (even if it is technically not completely specified), which I hold is the case only for non-u regexes","msgtype":"m.text"},"ts":1585722670000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: this is a case where no one thought it through. the author said as much and the co-champions and reviewers were weary even of the current behavior, so definitely weary of IESH. the spec is incoherent, as you said","msgtype":"m.text"},"ts":1585722685000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"here the incoherency is only because it is not obvious how to interpret SV of `\\uHex4Digits \\uHex4Digits` when those happen to be lead and trail","msgtype":"m.text"},"ts":1585722748000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it _is_ obvious how to interpret SV of `\\uLead \\uTrail`, and engines implemented that behavior","msgtype":"m.text"},"ts":1585722774000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I see how your current patch is the smallest possible change to fix the spec, I'm not debating that","msgtype":"m.text"},"ts":1585722829000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I'm explaining the history and the author's intentions. no one _wanted_ \\uLead\\uTrail to work in NCG names, and some people (myself included) back then pushed back even on trying to match identifiers","msgtype":"m.text"},"ts":1585722941000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Yeah, I get the history and the original intent","msgtype":"m.text"},"ts":1585722962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but we have shipping implementations which match the intent one would read in the spec text","msgtype":"m.text"},"ts":1585722981000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and at least one committee member who has expressed that he _does_ want \\uLead\\uTrail to work in NCG names, so it's not obvious that we would not have ended up here anyway if the issue was raised at the time","msgtype":"m.text"},"ts":1585723049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for this reason I think it makes sense to consider the question not to be open _for the purposes of this bugfix PR_","msgtype":"m.text"},"ts":1585723067000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and if we want to revisit the consensus spec text to make it match what you intended to mean rather than what it is currently being read to me, by shipping implementations, we could do that, but it is not what I would consider to be in scope _for this PR_","msgtype":"m.text"},"ts":1585723114000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*\"rather than what it is currently being read to mean\", not \"to me\"","msgtype":"m.text"},"ts":1585723157000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i'm confused, don't shipping impls have to change anyway if your proposal goes through?","msgtype":"m.text"},"ts":1585723161000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"shipping impls have to make some new things legal, not make any currently legal things illegal","msgtype":"m.text"},"ts":1585723179000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't think that's much of an argument in this case","msgtype":"m.text"},"ts":1585723206000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"the cases where they would be changing are specifically the ones where there is no single natural interpretation of the current spec text","msgtype":"m.text"},"ts":1585723278000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i disagree that “making tooling as simple as possible” is a goal","msgtype":"m.text"},"ts":1585724670000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"you disagree that it is _a_ goal?","msgtype":"m.text"},"ts":1585724688000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you think it ought to get literally no weight?","msgtype":"m.text"},"ts":1585724696000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it can get some weight, but we’re overvaluing it here imho","msgtype":"m.text"},"ts":1585724731000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"if an asciifier gets the program `foo.𐊧` what does it produce?","msgtype":"m.text"},"ts":1585724735000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"foo['\\uwhatever'], presumably","msgtype":"m.text"},"ts":1585724754000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"something like `foo['\\uD800\\uDEA7']` right","msgtype":"m.text"},"ts":1585724758000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but anyway if we are overvaluing it what are we overvaluing it relative to?","msgtype":"m.text"},"ts":1585724767000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah so the simple asciifier that doesn't need to parse anything doesn't exist","msgtype":"m.text"},"ts":1585724779000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes, asciifiers have to at least tokenize","msgtype":"m.text"},"ts":1585724796000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but, like, they do","msgtype":"m.text"},"ts":1585724802000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have seen them","msgtype":"m.text"},"ts":1585724804000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in production","msgtype":"m.text"},"ts":1585724806000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think it's fair for tooling that operating on source code to be able to tokenize that source code","msgtype":"m.text"},"ts":1585724807000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"bespoke asciifiers","msgtype":"m.text"},"ts":1585724809000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"_at banks_","msgtype":"m.text"},"ts":1585724813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes but they don't also have to parse regexes","msgtype":"m.text"},"ts":1585724818000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they also, emperically, don't parse regexes","msgtype":"m.text"},"ts":1585724828000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"very few parsers parsed regexes until quite recently","msgtype":"m.text"},"ts":1585724843000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can you point to a few of these asciifiers btw? just curious","msgtype":"m.text"},"ts":1585724861000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"no, they are customers","msgtype":"m.text"},"ts":1585724869000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"do you know of any opensource ones?","msgtype":"m.text"},"ts":1585724877000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I end up seeing a lot of enterprise JS toolchains","msgtype":"m.text"},"ts":1585724881000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that take JS source text as input","msgtype":"m.text"},"ts":1585724888000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"not off the top of my head; you could probably find some if you google","msgtype":"m.text"},"ts":1585724892000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"google? what's that","msgtype":"m.text"},"ts":1585724901000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"uglifyjs2 takes an `ascii_only` option","msgtype":"m.text"},"ts":1585725001000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to me, symmetry between the `𝒜𝒜𝒜` in `/(?<𝒜𝒜𝒜>.)/u` & `match.groups.𝒜𝒜𝒜` weighs much more heavily than the notion how simple asciifiers could be, precisely because that symmetry is visible by humans","msgtype":"m.text"},"ts":1585725021000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://github.com/mishoo/UglifyJS2/blob/0d820e4c0a7a1b1eeee25fb632b9496a9780b28a/lib/output.js#L109-L119","msgtype":"m.text"},"ts":1585725065000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens but... that will work in all cases, no one says that shouldn't work","msgtype":"m.text"},"ts":1585725079000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so I am confused why it is relevant","msgtype":"m.text"},"ts":1585725085000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that symmetry will always be present","msgtype":"m.text"},"ts":1585725097000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: by symmetry I mean that whatever I put there instead of `𝒜𝒜𝒜`, it should work","msgtype":"m.text"},"ts":1585725120000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: your proposal breaks that","msgtype":"m.text"},"ts":1585725131000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"no human will put surrogate pairs there, so no human will be exposed to that asymmetry, so why does that matter?","msgtype":"m.text"},"ts":1585725144000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: heh, uglifyjs2’s ascii_only apparently breaks the simple `foo.𐊧` case (it outputs `foo.\\ud800\\udea7`)","msgtype":"m.text"},"ts":1585725167000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so it sounds they have bigger problems than this","msgtype":"m.text"},"ts":1585725174000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah but we don't need to make their tools more broken","msgtype":"m.text"},"ts":1585725200000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"does no human debug the bundle that is deployed to production ever?","msgtype":"m.text"},"ts":1585725215000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"occasionally, but not by editting the source","msgtype":"m.text"},"ts":1585725296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the group name allows multiple representations anyway and no one says it shouldn't","msgtype":"m.text"},"ts":1585725308000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so there is no possible new confusion here","msgtype":"m.text"},"ts":1585725313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"by allowing \\uLead\\uTrail we’re introducing yet another representation though","msgtype":"m.text"},"ts":1585725370000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"one that breaks the symmetry","msgtype":"m.text"},"ts":1585725383000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"we could choose not to do that","msgtype":"m.text"},"ts":1585725394000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"how will the user be exposed to the fact that it breaks the symmetry?","msgtype":"m.text"},"ts":1585725426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they would have to write `match.groups.\\uLead\\uTrail` and find that it fails. but they are not going to write that.","msgtype":"m.text"},"ts":1585725449000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so they will not be exposed to the fact that it breaks the symmetry.","msgtype":"m.text"},"ts":1585725465000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, why doe that matter?","msgtype":"m.text"},"ts":1585725474000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they would if they happen upon source code of the form `/(?<\\uLead\\uTrail>.)/u` which you want to make valid","msgtype":"m.text"},"ts":1585725614000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sure that code probably wasn't written by a human","msgtype":"m.text"},"ts":1585725623000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it's not unreasonable to want to copy-paste the group name and place it `match.groups.<HERE>`","msgtype":"m.text"},"ts":1585725657000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"that’s how people use NCG","msgtype":"m.text"},"ts":1585725688000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"if it has a backslash in it, i think it is","msgtype":"m.text"},"ts":1585725690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that identifiers can have escapes is arcane nonsense that no normal human ever thinks of","msgtype":"m.text"},"ts":1585725706000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah if it has a backslash they're going to put it in a computed property in a string and it will work just fine","msgtype":"m.text"},"ts":1585725733000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because both forms of `\\u` are legal and do the right thing in string literals","msgtype":"m.text"},"ts":1585725745000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that’s what i’m saying. currently this confusion doesn't exist in this case. copy-pasting just works","msgtype":"m.text"},"ts":1585725752000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it works but no one would try it","msgtype":"m.text"},"ts":1585725759000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, nobody would try it","msgtype":"m.text"},"ts":1585725765000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because no one thinks you can have backslashes in identifiers","msgtype":"m.text"},"ts":1585725775000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it has a backslash, they'd assume it would be a syntax error as a dot, because it's *utter insanity* that it's not","msgtype":"m.text"},"ts":1585725781000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok so let’s look at the current situation","msgtype":"m.text"},"ts":1585725823000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I would give at least even odds that not more than a dozen humans will ever do that copy-paste individually escaped surrogate pairs for the rest of human existence. and the experience of those people will be, they get a syntax error, and put it in a computed property and go about their day.","msgtype":"m.text"},"ts":1585725840000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the only way there'd be a backslash in the name currently would be if it used \\u{…}, right?","msgtype":"m.text"},"ts":1585725851000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"`var π` is reasonable, `var \\u03c0` should never have been permitted","msgtype":"m.text"},"ts":1585725855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mathiasbynens depending on what you  mean by \"currently\"","msgtype":"m.text"},"ts":1585725867000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: but asciifiers!!1","msgtype":"m.text"},"ts":1585725885000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"in shipping implementations, no, that's false, they can have the individually escaped surrogate pairs","msgtype":"m.text"},"ts":1585725891000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in non-u regexes","msgtype":"m.text"},"ts":1585725904000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we’re discussing the spec change","msgtype":"m.text"},"ts":1585725945000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"you are asking about \"the current situation\"; I'm asking which definition of current are you using","msgtype":"m.text"},"ts":1585725965000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the current spec","msgtype":"m.text"},"ts":1585726005000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"ljharb `var \\u03c0` needed to be permitted because asciifiers are an extremely widely used and critical part of the internet infrastructure, despite mathiasbynens's sarcasm","msgtype":"m.text"},"ts":1585726030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: and that scenario should never imo have come to pass :-) obv the ship has long since sailed","msgtype":"m.text"},"ts":1585726049000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb yeah, like, in the shift-JIS days","msgtype":"m.text"},"ts":1585726059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"_long_ sailed","msgtype":"m.text"},"ts":1585726062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the current spec doesn't even allow \\u{…}, then the symmetry holds","msgtype":"m.text"},"ts":1585726064000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"if the spec were to allow \\u{…}, the symmetry would still hold","msgtype":"m.text"},"ts":1585726079000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens the current spec is incoherent for non-u regexes, so it can't be said to allow or disallow either","msgtype":"m.text"},"ts":1585726087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok I guess it actually can be said to disallow `\\u{}`","msgtype":"m.text"},"ts":1585726093000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for non-u","msgtype":"m.text"},"ts":1585726098000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I am willing to go along with this for the sake of argument","msgtype":"m.text"},"ts":1585726135000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: but that would make asciification impossible for that case, right? so a no-go","msgtype":"m.text"},"ts":1585726140000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"only if the spec allows \\uLead\\uTrail, the symmetry is broken","msgtype":"m.text"},"ts":1585726171000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes, I agree with this","msgtype":"m.text"},"ts":1585726220000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just don't get why we should prioritize this particular edge case of symmetry that not more than maybe a dozen people will ever run into, over, for example, not causing further breakage in uglifyJS's actual, existing implementation","msgtype":"m.text"},"ts":1585726237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: you’re saying escape sequences in identifiers are weird. also i think surrogates are weird. this is the combination of those two","msgtype":"m.text"},"ts":1585726258000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I understand that the symmetry is nice","msgtype":"m.text"},"ts":1585726267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I was a mathematician, once upon a time","msgtype":"m.text"},"ts":1585726272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I miss those days sometimes)","msgtype":"m.text"},"ts":1585726277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: surrogates are very weird, but people run into 💩 problems a LOT more often than they'd ever run into escapes in identifiers","msgtype":"m.text"},"ts":1585726280000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, \"not infrequently\" compared to \"basically never\"","msgtype":"m.text"},"ts":1585726300000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"emojis are super on trend","msgtype":"m.text"},"ts":1585726311000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mathiasbynens: anyways obv both are weird, but so are regexes in general because of the same allowing-escapes bs","msgtype":"m.text"},"ts":1585726473000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"imo the non-weird thing would have been, no escapes at all, but it's also far too late for that","msgtype":"m.text"},"ts":1585726489000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: we agree that this particular case is an edge case. but the symmetry itself is super common: I posit that people think of the `FOO` in `/(?<FOO>.)/u` & `match.groups.FOO` as “the same thing”","msgtype":"m.text"},"ts":1585726539000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"when there's no escape sequences involved, granted.","msgtype":"m.text"},"ts":1585726559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I dispute that anyone's mental model extends to cases where there are escape sequences.","msgtype":"m.text"},"ts":1585726575000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: no, in general","msgtype":"m.text"},"ts":1585726578000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i'm talking generally","msgtype":"m.text"},"ts":1585726582000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"and here you’re adding a gotcha to that","msgtype":"m.text"},"ts":1585726584000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"then no, disputed.","msgtype":"m.text"},"ts":1585726587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but, like, ok, if we grant that for the sake of argument, then what?","msgtype":"m.text"},"ts":1585726619000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they will never, ever be exposed to the fact that this absurd edge case breaks that symmetry very slightly","msgtype":"m.text"},"ts":1585726632000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how is this disputable? it’s true in today’s spec, and you’re wanting to add an exception to this","msgtype":"m.text"},"ts":1585726633000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so _why does it matter_","msgtype":"m.text"},"ts":1585726635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens your claim was about what how people think","msgtype":"m.text"},"ts":1585726657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the spec is not especially relevant to that question","msgtype":"m.text"},"ts":1585726663000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how people think is definitely not related to what the spec says","msgtype":"m.text"},"ts":1585726666000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not tightly coupled, anyways","msgtype":"m.text"},"ts":1585726671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd claim that no muggle has escape sequences in their mental model","msgtype":"m.text"},"ts":1585726690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you brought up escape sequences, which is arguably a spec thing","msgtype":"m.text"},"ts":1585726705000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes, and you brought up people's mental models, and the intersection of those two things is approximately empty","msgtype":"m.text"},"ts":1585726735000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this entire discussion is about something that simply doesn't exist in normal people's mental model","msgtype":"m.text"},"ts":1585726738000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I agree! which is why I don't get the “when there’s no escape sequences involved” counterargument","msgtype":"m.text"},"ts":1585726788000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"most people wouldn’t think of that","msgtype":"m.text"},"ts":1585726801000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"most people would not realize that is a possible thing","msgtype":"m.text"},"ts":1585726816000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so their mental model would not cover that case","msgtype":"m.text"},"ts":1585726822000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well it isn’t currently","msgtype":"m.text"},"ts":1585726824000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"that’s my point","msgtype":"m.text"},"ts":1585726843000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sorry, I don't see it","msgtype":"m.text"},"ts":1585726864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let’s keep the mental model simple","msgtype":"m.text"},"ts":1585726865000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"the mental model remains simple","msgtype":"m.text"},"ts":1585726873000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because zero people will run into this edge case","msgtype":"m.text"},"ts":1585726881000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"zero","msgtype":"m.text"},"ts":1585726883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even by accident. nobody looks at code that's output by tooling.","msgtype":"m.text"},"ts":1585726898000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(some people look at code that's output by tooling but running in to this requires not just looking at it but editting it in a very particular way)","msgtype":"m.text"},"ts":1585726925000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as someone who works on DevTools I cannot disagree more strongly","msgtype":"m.text"},"ts":1585726935000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I do not agree with jordan's claim","msgtype":"m.text"},"ts":1585727032000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but reading code output by tooling is not sufficient to run into this edge case","msgtype":"m.text"},"ts":1585727048000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is, to notice the asymmetry","msgtype":"m.text"},"ts":1585727059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you have to actually then go and try to write an escape sequence in identifier position","msgtype":"m.text"},"ts":1585727081000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would uglify users typically end up with `match.groups.\\u...` in prod code?","msgtype":"m.text"},"ts":1585727099000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which is not going to be a thing very many people try","msgtype":"m.text"},"ts":1585727099000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I feel confident in this claim","msgtype":"m.text"},"ts":1585727107000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling: after setting ascii_only to true on https://skalman.github.io/UglifyJS-online/, enter `foo.𐊧`","msgtype":"m.text"},"ts":1585727148000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"rkirsling: it produces `foo.\\ud800\\udea7;` which is invalid","msgtype":"m.text"},"ts":1585727160000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"should be `foo['…']`","msgtype":"m.text"},"ts":1585727185000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1585727211000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm, that's for v3","msgtype":"m.text"},"ts":1585727235000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"v2 has the same problem?","msgtype":"m.text"},"ts":1585727238000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah I mean the fact that `foo.\\u...` is so surprising would lead me to want this discussion to be centered about _bracket_ access working correctly","msgtype":"m.text"},"ts":1585727247000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens while we're on this subject, the fix to uglify is to make it aware that it needs special treatment for non-BMP code points in identifiers","msgtype":"m.text"},"ts":1585727254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/mishoo/UglifyJS2 is the one everyone seems to be using in my experience","msgtype":"m.text"},"ts":1585727255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"except if we disallow `\\u\\u` in regexes","msgtype":"m.text"},"ts":1585727272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in which case the fix is also then \"parse regexes\"","msgtype":"m.text"},"ts":1585727277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which, like","msgtype":"m.text"},"ts":1585727290000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is a hell of a lot more work","msgtype":"m.text"},"ts":1585727294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(parsing to the point where you can identify a capture group name is substantially less work, but not totally trivial)","msgtype":"m.text"},"ts":1585727326000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I feel like this, alone, out to outweight the <12 people who will ever notice the asymmetry you are concerned about","msgtype":"m.text"},"ts":1585727379000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I’d prefer [a few tools having to do a little bit of extra work to produce correct output] over [exposing surrogates in more places in the language, breaking symmetry between group names in patterns and the way their groups property is accessed]","msgtype":"m.text"},"ts":1585727381000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I just do not understand why you care about this symmetry so much","msgtype":"m.text"},"ts":1585727406000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can you give me an estimated number of people who you think would ever, ever run into the asymmetry? and what the negative consequences you think they would then suffer is?","msgtype":"m.text"},"ts":1585727433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"seems like i care more about the language and people reading code","msgtype":"m.text"},"ts":1585727437000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"whereas you prioritize making things easy for tooling","msgtype":"m.text"},"ts":1585727437000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I care about _users_, first and foremost","msgtype":"m.text"},"ts":1585727449000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm a little confused about why you're focusing on dot access specifically","msgtype":"m.text"},"ts":1585727450000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which means _not breaking tooling_, yes","msgtype":"m.text"},"ts":1585727453000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because then websites break and people cannot get into their pharmacy","msgtype":"m.text"},"ts":1585727468000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens but also, I reject your dichotomy","msgtype":"m.text"},"ts":1585727489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I care about the language and people reading code a great deal","msgtype":"m.text"},"ts":1585727499000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"however","msgtype":"m.text"},"ts":1585727499000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think this will affect basically any readers of code, and very very few writers of it","msgtype":"m.text"},"ts":1585727522000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i didn't say that you don't care about these things (i know you do!)","msgtype":"m.text"},"ts":1585727528000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I care more about readers than I do about tooling, as a rule. however, it is possible for an effect on readers to be so small that it is outweighed by the effect on tooling. as here.","msgtype":"m.text"},"ts":1585727576000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tbf the fact that we do bring these very different perspectives to the discussion is really important","msgtype":"m.text"},"ts":1585727629000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the pressure to rush the decision in today's session was very strange to me","msgtype":"m.text"},"ts":1585727668000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(like, at the end of the day in particular)","msgtype":"m.text"},"ts":1585727677000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling it comes from ecma basically","msgtype":"m.text"},"ts":1585727678000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling we want to cut the spec, because ecma wants that and no one wants to fight them","msgtype":"m.text"},"ts":1585727689000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ack. I understand your point, we just disagree about this. I think we’re overindexing on “tooling simplicity” here.","msgtype":"m.text"},"ts":1585727691000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"rkirsling and waldemar doesn't want to cut without resolving this.","msgtype":"m.text"},"ts":1585727705000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens ok, so, concretely, can you give me an estimated number of people who you think would ever, ever run into the asymmetry? and what the negative consequences you think they would then suffer is?","msgtype":"m.text"},"ts":1585727720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yeah it's the last bit there that seemed more subjective","msgtype":"m.text"},"ts":1585727727000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens and, like, the reason I care about simplicity is that tools like uglifyjs have fewer bugs if there are fewer dumb edge cases, which means that _fewer websites break_, and that is a thing which I think ought to be given at least nontrivial weight.","msgtype":"m.text"},"ts":1585727769000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, I understand that, and I agree we don’t want to break websites","msgtype":"m.text"},"ts":1585727841000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(don't forget to rest up for another full day, folks 😁)","msgtype":"m.text"},"ts":1585728049000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(g'night)","msgtype":"m.text"},"ts":1585728056000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens ok, so...","msgtype":"m.text"},"ts":1585728105000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you agree that reducing risk of tooling bugs ought to get nonzero weight, then the point we disagree on is, does this outweigh the damages of some number of users being exposed to a very slight asymmetry between `/(?<FOO>.)/u` and `match.groups.FOO`","msgtype":"m.text"},"ts":1585728274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my position is, the latter number of users is very, very small","msgtype":"m.text"},"ts":1585728282000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and so it is hard for me to understand how it could possibly end up with more weight than the to my mind fairly substantial risk of broken websites","msgtype":"m.text"},"ts":1585728310000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(and also the harm to the users exposed to that asymmetry is very slight, much less bad than e.g. not being able to load their pharmacy's website)","msgtype":"m.text"},"ts":1585728341000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway yeah I've got to sleep; I'll read any overnight messages in this channel in the morning","msgtype":"m.text"},"ts":1585728410000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The current proposal is being presented as the only solution that supports ASCIIfiers. The slide deck and Waldemar's plenary comments from yesterday strongly imply so. But that's not the case: we could instead a) allow \\u{...} in non-`u` group names b) ban astral group names in non-`u` RegExp (whether they're escaped or not; engines already do this)","msgtype":"m.text"},"ts":1585729145000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I'm starting to like option `b` more and more. I think it resolves your concerns as well, and it nicely fits with the rest of the `u` flag which unlocks various types of Unicode support including `\\u{...}`","msgtype":"m.text"},"ts":1585729214000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: for when you wake up, I wrote this down in a bit more detail: https://gist.github.com/mathiasbynens/1c320ad5cc2361bf2bfc32c5b903b2dc I *think* proposal 2 resolves all our concerns","msgtype":"m.text"},"ts":1585735945000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"proposal 3*","msgtype":"m.text"},"ts":1585735956000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"moved it here: https://github.com/tc39/ecma262/pull/1869#issuecomment-607207764","msgtype":"m.text"},"ts":1585743094000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: the last slide claims that a code point interpretation for `/(?<\\u{1d49c}>.)/` benefits tooling... how do you figure that?","msgtype":"m.text"},"ts":1585747797000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"why can't we allow surrogate pairs to be moved to Identifier grammar outside RegExp as a 4th approach","msgtype":"m.text"},"ts":1585748013000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it would increase symmetry it seems to the same level as other ideas *and* allow surrogate pairs in named capture group ids","msgtype":"m.text"},"ts":1585748053000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: agreed, that's an option too. personally i don't think exposing surrogates in more places is desirable","msgtype":"m.text"},"ts":1585751895000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: undesirable or unacceptable?","msgtype":"m.text"},"ts":1585752056000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I think compromise is fine and doubt the impact of allowing surrogates as binding identifiers to be serious in real world, but it would make things very consistent across contexts","msgtype":"m.text"},"ts":1585752105000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"another way to put it: if it is possible in *some* situations, but not in *all* situations. is there good reason to keep inconsistency","msgtype":"m.text"},"ts":1585752179000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: several ES2015 features worked to remove the need for surrogates","msgtype":"m.text"},"ts":1585752244000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: the need, not the capability to use","msgtype":"m.text"},"ts":1585752261000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: sure, because of back-compat. we would if we could","msgtype":"m.text"},"ts":1585752277000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: I mean... thats kind of the ASI argument of some people, but we still go out of our way to support it when possible","msgtype":"m.text"},"ts":1585752364000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: this is like proposing to make some newer ES2020 APIs return `NaN` instead of throwing exceptions","msgtype":"m.text"},"ts":1585752368000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: no, it is not. NaN has actively harmful / bug introducing effects historically","msgtype":"m.text"},"ts":1585752396000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: and surrogates do not?","msgtype":"m.text"},"ts":1585752407000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"how is allowing surrogates introducing bugs","msgtype":"m.text"},"ts":1585752410000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"aesthetics are bad, I'd agree","msgtype":"m.text"},"ts":1585752423000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"surrogates are a common source of security issues","msgtype":"m.text"},"ts":1585752447000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i'm talking about surrogates in general, not specifically this allow-escaped-surrogates-in-identifiers thing","msgtype":"m.text"},"ts":1585752473000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"then give that angle as a reason for wanting inconsistency","msgtype":"m.text"},"ts":1585752498000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right now it hasn't been brought up as a reason to want inconsistency","msgtype":"m.text"},"ts":1585752511000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that seems a good reason","msgtype":"m.text"},"ts":1585752524000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"just as ascii source text is a good reason to allow things","msgtype":"m.text"},"ts":1585752541000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to be fair, I wasn't expecting this to be controversial and was assuming it to be widely known","msgtype":"m.text"},"ts":1585752564000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"surrogates are an objectively bad thing","msgtype":"m.text"},"ts":1585752581000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i get that we're stuck with them in JS","msgtype":"m.text"},"ts":1585752585000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: I've personally not had this issue come across my work","msgtype":"m.text"},"ts":1585752586000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, thats probably similar for others","msgtype":"m.text"},"ts":1585752598000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we don't manually write the pairs though generally at work","msgtype":"m.text"},"ts":1585752629000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: for example, you used to be able to crash-and-reboot-loop any socket.io server simply by sending it a JSON payload containing a lone surrogate","msgtype":"m.text"},"ts":1585752652000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sure, but thats a different vector i'd think","msgtype":"m.text"},"ts":1585752689000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lone surrogates are invalid characters, and cannot be represented in UTF-8 (that's why WTF-8 is a thing)","msgtype":"m.text"},"ts":1585752703000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"to my knowledge, the id in the capture group could not be a lone surrogate","msgtype":"m.text"},"ts":1585752712000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and even with \\u{ you could send a lone surrogate on a truncated packet to socket.io","msgtype":"m.text"},"ts":1585752733000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it cannot. i'm explaining why surrogates are a Bad Thing we should avoid whenever we can in general","msgtype":"m.text"},"ts":1585752739000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(if you do something like send the JSON of a groups obj)","msgtype":"m.text"},"ts":1585752742000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh, i'm just talking about surrogates in general","msgtype":"m.text"},"ts":1585752774000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: if the grammar does not allow the problem you describe of lone surrogates, is it applicable here","msgtype":"m.text"},"ts":1585752775000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: there's nothing about \\uXXXX\\uXXXX that is somehow worse than what's already there in the language","msgtype":"m.text"},"ts":1585752791000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i'm just saying... this is a known bad thing. ES2015 worked hard to hide it as much as possible from users.","msgtype":"m.text"},"ts":1585752817000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"any split character would be problematic from my understanding of the socket.io problem (which I have encoutered!)","msgtype":"m.text"},"ts":1585752818000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: yes, split/truncation is a common way to hit this indeed","msgtype":"m.text"},"ts":1585752840000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"we still prevent split characters in the grammar","msgtype":"m.text"},"ts":1585752846000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yes, i get that","msgtype":"m.text"},"ts":1585752859000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so, I'm unclear on how any ban actually removes a problem","msgtype":"m.text"},"ts":1585752864000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"again i'm not talking about this particular change","msgtype":"m.text"},"ts":1585752869000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"the problem doesn't exist","msgtype":"m.text"},"ts":1585752871000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm not claiming it removes a problem, i'm claiming it's a better solution than the alternatives","msgtype":"m.text"},"ts":1585752890000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"because we can get there without exposing surrogates (a Bad Thing!) in more places","msgtype":"m.text"},"ts":1585752905000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"we are still introducing the split character problem in that location in your solution","msgtype":"m.text"},"ts":1585752925000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't see how your solution is any better at a glance given your concern of security","msgtype":"m.text"},"ts":1585752938000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1585752940000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\\u{ can still produce characters that split when serialized and are sent over the wire","msgtype":"m.text"},"ts":1585752959000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that is the concern of socket.io above","msgtype":"m.text"},"ts":1585752967000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no, nothing about this change involves security. surrogates in general are tricky security-wise. there's nothing special about this one new change","msgtype":"m.text"},"ts":1585752968000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so, if you allow \\u{ you have the same issue as \\u\\u","msgtype":"m.text"},"ts":1585752990000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, if they have the same issue, why are you against \\u\\u in this context","msgtype":"m.text"},"ts":1585753034000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have a choice here. one option exposes the idea of surrogates to the user in syntax, the other doesn't.","msgtype":"m.text"},"ts":1585753076000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes, but people are claiming that inconsistency with existing features is problematic","msgtype":"m.text"},"ts":1585753104000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how is my proposal 3 inconsistent with any existing feature?","msgtype":"m.text"},"ts":1585753120000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it's consistent with the ES2015 `u` flag, and the \\u{...} it enables","msgtype":"m.text"},"ts":1585753171000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: per waldemar's view the (?<id>.) id is a string->identifier, this leads to thinking that (?<id>.)id should function the same for some `id`","msgtype":"m.text"},"ts":1585753184000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"having id do things in 2 different parts is the crux of the complaint of inconsistency","msgtype":"m.text"},"ts":1585753206000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"while it is arguable we do want inconsitency","msgtype":"m.text"},"ts":1585753223000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i have not seen why in this context","msgtype":"m.text"},"ts":1585753230000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not sure i understood that correctly, but let me try","msgtype":"m.text"},"ts":1585753279000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"in ES2015, the `u` flag by design enables `\\u{...}` syntax. in non-`u`, `\\u` just means `u`, and so `\\u{` means `u{` etc.","msgtype":"m.text"},"ts":1585753303000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"following that logic, it seems reasonable to restrict the use of \\u{...} within a capture group names to `u` regexps as well","msgtype":"m.text"},"ts":1585753353000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"the mental model then remains what is has been since ES2015: the `u` flag enables `\\u{...}` syntax throughout the pattern","msgtype":"m.text"},"ts":1585753399000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"however, the counterpoint is that for non-`u` regular expressions you could make any given source text of a regexp into ASCII previously","msgtype":"m.text"},"ts":1585753449000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"waldemar's view that \"regexps should be like strings\" can never be reached, because \\u{...} works in all strings but not in regexps unless they have the `u` flag","msgtype":"m.text"},"ts":1585753497000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"bradleymeck: you can still do that with proposal 3","msgtype":"m.text"},"ts":1585753510000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"even if `u` enables `\\u{`, that has been broken and the question is how to alleviate that. a set of constraints has been asserted that it must function the same inside capture groups as outside, and that it must allow ascii representation of astral characters","msgtype":"m.text"},"ts":1585753514000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"mathiasbynens: you can, but not under the constraints that keep being requested","msgtype":"m.text"},"ts":1585753541000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we need to identify which constraints we want to keep; we do not need to assert that there is one obvious solution","msgtype":"m.text"},"ts":1585753572000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i don't see why not?","msgtype":"m.text"},"ts":1585753573000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"astral identifier symbols do not work in group names within non-`u` regexps, whether used directly or through escape sequences","msgtype":"m.text"},"ts":1585753618000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"if setting the `u` flag enables their use, that again fits nicely with the ES2015 `u` flag","msgtype":"m.text"},"ts":1585753650000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"because it enables astral support in various regexp pattern contexts","msgtype":"m.text"},"ts":1585753671000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: /(?<astral>astral)/ currently does not behave similar to /(?<\\u{}>\\u{})/ or /(?<\\u\\u>\\u\\u)/, the constraint is that the name should behave the same in both places and allow astral group names","msgtype":"m.text"},"ts":1585753687000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"mathiasbynens: this is not about stating that `u` enables things","msgtype":"m.text"},"ts":1585753704000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that doesn't relate to the goals","msgtype":"m.text"},"ts":1585753721000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: where does this constraint come from?","msgtype":"m.text"},"ts":1585753725000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"why would you expect astral symbols within a non-u regexp to work? they don't work in any other context?","msgtype":"m.text"},"ts":1585753749000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: waldemar's desire to have an asciifier that is context free within a regexp source text","msgtype":"m.text"},"ts":1585753752000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i included asciified output for proposal 3","msgtype":"m.text"},"ts":1585753785000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: they work if they aren't escaped","msgtype":"m.text"},"ts":1585753791000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"mathiasbynens: but it breaks the same behavior desire","msgtype":"m.text"},"ts":1585753807000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there isn't a desire for all things to behave the same, but for there to be some way that does behave the same","msgtype":"m.text"},"ts":1585753837000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: what makes you say \"they work if they aren't escaped\"? the current spec? implementation reality?","msgtype":"m.text"},"ts":1585753865000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"as i said in the proposal, engines don't support `/(?<𐊧>.)/` (although adding `u` makes it work, as you'd expect)","msgtype":"m.text"},"ts":1585753965000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so asciifiers don't even have to worry about this case. the transform I described takes care of it and preserves the early syntaxerror","msgtype":"m.text"},"ts":1585754015000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: the concern is /\\ud835\\udc9c/.test('𝒜') does produce an astral character","msgtype":"m.text"},"ts":1585754128000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so inside the capture group id it doesn't behave the same","msgtype":"m.text"},"ts":1585754145000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm having to re-read various slides and things so sorry if my responses get more spaced out (probably good though as this seems somewhat heated)","msgtype":"m.text"},"ts":1585754173000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, enabling pairs means pairs are always reliable","msgtype":"m.text"},"ts":1585754207000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we cannot make \\u{ always reliable due to history","msgtype":"m.text"},"ts":1585754215000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"given all of these requests, I don't see a clear argument against allowing these. we can regret the situation, but i don't see a firm reason it makes things worse than status quo","msgtype":"m.text"},"ts":1585754277000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"stating that we don't want to allow astral character in non-`u` seems an odd stance","msgtype":"m.text"},"ts":1585754376000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so if we do want to allow them, the desire for what we support is the question","msgtype":"m.text"},"ts":1585754409000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: why? that's literally how non-`u` regexps behave w.r.t. astral symbols","msgtype":"m.text"},"ts":1585754432000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"we can support only \\u{ which means an inconsistency, we could only support \\u\\u which is legacy, or we could support both","msgtype":"m.text"},"ts":1585754438000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there is no expectation that astral symbols, anywhere in a pattern, behave intuitively in non-`u` regexps","msgtype":"m.text"},"ts":1585754503000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"that's part of the reason the `u` flag was added, so we could fix those things","msgtype":"m.text"},"ts":1585754518000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: that is not the opinion of all people involved","msgtype":"m.text"},"ts":1585754519000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so it isn't something we can assert","msgtype":"m.text"},"ts":1585754528000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this is fact :/","msgtype":"m.text"},"ts":1585754541000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"this is ECMAScript history","msgtype":"m.text"},"ts":1585754542000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"this is ES2015","msgtype":"m.text"},"ts":1585754545000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it is not the opinion of all people involved, change their minds or document that expectation so that forward moving PRs like this can reference it","msgtype":"m.text"},"ts":1585754572000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we can actively debate the history here which is an issue in itself","msgtype":"m.text"},"ts":1585754594000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm less interested in the history debate","msgtype":"m.text"},"ts":1585754610000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i didn't expect it to be a debate tbh","msgtype":"m.text"},"ts":1585754639000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"bradleymeck: thanks for helping me understand this!","msgtype":"m.text"},"ts":1585754670000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: either way, add a spec note about your intent in a separate PR and it might help us in the future","msgtype":"m.text"},"ts":1585754690000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"here's a list of places where astral symbols don't work as expected in non-`u` regexps: https://mathiasbynens.be/notes/es6-unicode-regex the ES2015 `u` flag fixed astral support in `.`, quantifiers, character classes, character class escapes","msgtype":"m.text"},"ts":1585754806000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"astral symbol support is known to be missing in non-`u`","msgtype":"m.text"},"ts":1585754847000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"expecting them to work within non-`u` named groups does not match this","msgtype":"m.text"},"ts":1585754917000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"bradleymeck: tried to clarify by posting https://github.com/tc39/ecma262/pull/1869#issuecomment-607332117","msgtype":"m.text"},"ts":1585756365000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Bakkot: what do you mean by \"another\"? I don't understand which other requirements are not met","msgtype":"m.text"},"ts":1585757074000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1869#issuecomment-607335146","msgtype":"m.text"},"ts":1585757077000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens \"another\" meaning \"I think we should not make life harder for chinese-language users\"","msgtype":"m.text"},"ts":1585757172000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this, I admit, was not a previously raised requirement","msgtype":"m.text"},"ts":1585757181000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just think it ought to be important","msgtype":"m.text"},"ts":1585757188000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: you're right that allowing `\\u{}` in group names in non-u regexes does not make tooling all that much easier. but it has the advantage of allowing people who do, for some reason, need to escape their non-ascii characters in the group name to do so without having to think about surrogate pairs","msgtype":"m.text"},"ts":1585757279000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"things are already broken in non-`u` though, that's why `u` was introduced. we cannot fix non-`u` behavior","msgtype":"m.text"},"ts":1585757280000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"and I see very little cost to allowing it","msgtype":"m.text"},"ts":1585757285000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: yes, but we don't need to make it _more_ broken. the regex behavior itself we cannot fix, but we can avoid breaking how names in regexes work.","msgtype":"m.text"},"ts":1585757321000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which are more about what the language allows you to write than about how it works.","msgtype":"m.text"},"ts":1585757348000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's already this broken in reality","msgtype":"m.text"},"ts":1585757402000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"a user who knows that non-u regexes match one code unit at a time could still easily be surprised that named capture group names, which have nothing to do with how the regex behaves, also have this sharp edge","msgtype":"m.text"},"ts":1585757407000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, I agree it is already this broken in reality, I just think we ought to regard that as unacceptable","msgtype":"m.text"},"ts":1585757423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"non-`u` is unacceptable tbqh","msgtype":"m.text"},"ts":1585757525000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1585757530000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"people will continue using it forever","msgtype":"m.text"},"ts":1585757535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even me","msgtype":"m.text"},"ts":1585757538000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I use regexes to process non-textual data stored as a sequence of 16-bit values","msgtype":"m.text"},"ts":1585757556000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I realize this makes me a bad person but you can't stop me, nyah nyah","msgtype":"m.text"},"ts":1585757564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what's up with \"regexen\" btw? been meaning to ask since i saw the slides","msgtype":"m.text"},"ts":1585757582000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"old habit","msgtype":"m.text"},"ts":1585757588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one ox, two oxen; one regex, two regexen","msgtype":"m.text"},"ts":1585757601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ooh TIL","msgtype":"m.text"},"ts":1585757610000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(ox -> oxen is one of english's many atypical pluralizations and does not actually generalize to this case, I just think it's funny)","msgtype":"m.text"},"ts":1585757640000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gibson042: actually, allowing `\\u{}` in group names in non-u regexes does make tooling easier in that a more sophisticated tool, which parses and serializes the regex, can serialize group names using an off the shelf identifier name serializer. yes, it could also serialize them in a different way, but why require that of them?","msgtype":"m.text"},"ts":1585758820000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens: If the committee's position is that `\\uLEAD\\uTRAIL` in u-mode regexes has already achieved consensus and is therefore not up for revisiting here, are you then OK with my \"just allow all the escapes\" proposal as the next best thing? or would you have another preference?","msgtype":"m.text"},"ts":1585759853000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that doesn't save anything because the tool would _already_ need that \"different way\" for astral characters in the rest of the regex","msgtype":"m.text"},"ts":1585759884000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it's not that they'd have to implement the other behavior as well, it's that they'd have to realize they needed to use it","msgtype":"m.text"},"ts":1585759985000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what's gained by asciifying `/(?<𝒜>𝒜)/` to `/(?<\\u{1d49c}>\\ud835\\udc9c)/` rather than `/(?<\\ud835\\udc9c>\\ud835\\udc9c)/`?","msgtype":"m.text"},"ts":1585760162000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"what's gained is that the tool does not have to realize it needs to use different behavior for this identifier as it does for other identifiers, and is therefore less likely to have a bug which could cause websites to break.","msgtype":"m.text"},"ts":1585760331000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: wait when did this achieve consensus?","msgtype":"m.text"},"ts":1585760333000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens when we accepted the current spec text.","msgtype":"m.text"},"ts":1585760344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens I realize you don't regard that as having achieved consensus, but other people do.","msgtype":"m.text"},"ts":1585760356000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is that regex valid or not defined","msgtype":"m.text"},"ts":1585760362000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the one without the escapes","msgtype":"m.text"},"ts":1585760372000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek WHO KNOWS","msgtype":"m.text"},"ts":1585760379000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would say valid","msgtype":"m.text"},"ts":1585760381000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the spec","msgtype":"m.text"},"ts":1585760387000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mathiasbynens would say not, and that it should not be","msgtype":"m.text"},"ts":1585760387000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"depends who you ask","msgtype":"m.text"},"ts":1585760394000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I don't mind \\uLEAD\\uTRAIL within named groups as much tbh, I do think we should not add this in more places","msgtype":"m.text"},"ts":1585760396000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"like in generic identifiers","msgtype":"m.text"},"ts":1585760403000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I would say definitely valid despite a slight underspecification","msgtype":"m.text"},"ts":1585760413000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: and as you know, i'd prefer if we didn't have it, for symmetry","msgtype":"m.text"},"ts":1585760448000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"what's happens if I run the spec through a magic program that generates a js implementation","msgtype":"m.text"},"ts":1585760460000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: engine262","msgtype":"m.text"},"ts":1585760471000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585760482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"pretty sure _you_'re the compiler","msgtype":"m.text"},"ts":1585760486000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"devsnek: that program fails because the spec makes reference to an operation which is not defined","msgtype":"m.text"},"ts":1585760489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fun","msgtype":"m.text"},"ts":1585760499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so the question is what would it do if it were defined","msgtype":"m.text"},"ts":1585760551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585760564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in that case i'd ask","msgtype":"m.text"},"ts":1585760566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why we would want /(?<𝒜>𝒜)/ to be valid","msgtype":"m.text"},"ts":1585760576000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`let 𝒜` is valid","msgtype":"m.text"},"ts":1585760586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: also generally i'm more interested in what implementation reality says than what a buggy spec says. ideally we'd align the spec with reality","msgtype":"m.text"},"ts":1585760599000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but the main reason is that we actually want `let 𨭎` to be valid","msgtype":"m.text"},"ts":1585760616000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens that would mean allowing \\uLEAD\\uTRAIL in u-mode regexes","msgtype":"m.text"},"ts":1585760624000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: or rather, I want `/(?<𨭎>.)/ to be valid, though mathiasbynens does not","msgtype":"m.text"},"ts":1585760658000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if we can't agree that it should just be identifier everywhere i'd say we should do whatever makes the most sense for +U regex","msgtype":"m.text"},"ts":1585760690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: \"that would mean allowing \\uLEAD\\uTRAIL in u-mode regexes\" yeah, see my answer above","msgtype":"m.text"},"ts":1585760707000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\"the tool does not have to realize it needs to use different behavior for this identifier as it does for other identifiers\" but it must process the regex to even _know_ that it's looking at an identifier","msgtype":"m.text"},"ts":1585760708000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"devsnek you're coming into this after, like, twelve hours of argument","msgtype":"m.text"},"ts":1585760713000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is not required in the other case","msgtype":"m.text"},"ts":1585760716000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah i know","msgtype":"m.text"},"ts":1585760716000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042 right, but maybe it does; some tools do","msgtype":"m.text"},"ts":1585760726000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tools which don't can continue not doing so","msgtype":"m.text"},"ts":1585760742000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because \\uLEAD\\uTRAIL is legal","msgtype":"m.text"},"ts":1585760750000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in my proposal","msgtype":"m.text"},"ts":1585760751000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in what sense is it a benefit to not use functionality that must necessarily be present?","msgtype":"m.text"},"ts":1585760771000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it is a benefit to websites when webpages work. webpages are more likely to work when tooling has fewer bugs. tools are less likely to have bugs if they don't have to realize that they are required to use one particular plausible strategy rather than another plausible strategy.","msgtype":"m.text"},"ts":1585760859000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even though those tools might already have both strategies _implemented_, they still have to realize they need to use one or the other.","msgtype":"m.text"},"ts":1585760888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my preference, given that the cost to users of allowing both is very, very small, is to make it so they do not have to realize this, so that tools are less likely to have bugs.","msgtype":"m.text"},"ts":1585760923000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's dangerous to use \\u{ because that won't work throughout the regex","msgtype":"m.text"},"ts":1585760924000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"any tool that uses that for group names seems more likely to use it for match characters, where it will cause bugs","msgtype":"m.text"},"ts":1585760954000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yes but if they have parsed the regex and are now serializing it, they might plausibly reach for their already-on-hand identifier serializer for the group name in particular.","msgtype":"m.text"},"ts":1585760955000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I think I get you now, thank you","msgtype":"m.text"},"ts":1585760978000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: \\uLEAD\\uTRAIL does not need to be legal to get the tooling property you desire, right?","msgtype":"m.text"},"ts":1585761130000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"well with \"proposal 3\" at least","msgtype":"m.text"},"ts":1585761174000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens there is another tooling property I desire, which is that tools which do _not_ parse regexes are _also_ less likely to have bugs","msgtype":"m.text"},"ts":1585761176000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with proposal 3, yes","msgtype":"m.text"},"ts":1585761184000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yes, without parsing/tokenizing","msgtype":"m.text"},"ts":1585761188000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Within any regular expression literal with the u flag, escape any astral symbol as \\u{…} regardless of the context.","msgtype":"m.text"},"ts":1585761204000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Within any regular expression literal without the u flag, escape any astral symbol as \\uXXXX regardless of the context.","msgtype":"m.text"},"ts":1585761204000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it sounds like proposal 3 is _really_ close to what you want","msgtype":"m.text"},"ts":1585761250000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes; my objection to proposal 3 is that extending weird limitations to on chinese users who are not even using escapes is bad","msgtype":"m.text"},"ts":1585761250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I hold that preference more strongly than any other I have expressed","msgtype":"m.text"},"ts":1585761262000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh right the new goalpost","msgtype":"m.text"},"ts":1585761268000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yup, sorry","msgtype":"m.text"},"ts":1585761271000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"weird that it didn't come up before then","msgtype":"m.text"},"ts":1585761272000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"didn't realize this was a point there was any disagreement on","msgtype":"m.text"},"ts":1585761280000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no one had previously proposed something which would violate it","msgtype":"m.text"},"ts":1585761287000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Can we move this to #tc39?","msgtype":"m.text"},"ts":1585761287000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I did not imagine anyone else would fail to hold this preference","msgtype":"m.text"},"ts":1585761309000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I imagibe there will be talk of Records and Tuples","msgtype":"m.text"},"ts":1585761313000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1585761317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1585761323000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I wish Norbert Lindenberg was here","msgtype":"m.text"},"ts":1585761327000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"does one RefCollection suffice across the board?","msgtype":"m.text"},"ts":1585761363000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I mean I guess it would have to, never mind","msgtype":"m.text"},"ts":1585761413000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ooohhh lenses/prisms? :-)","msgtype":"m.text"},"ts":1585761461000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"seems like epicycles to me...","msgtype":"m.text"},"ts":1585761524000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"oh, this is not what I was expecting","msgtype":"m.text"},"ts":1585761554000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"let's take questions on the queue","msgtype":"m.text"},"ts":1585761611000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"`{ …record, fieldToDelete: undefined`?","msgtype":"m.text"},"ts":1585761642000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`{ …record, fieldToDelete: undefined }`?","msgtype":"m.text"},"ts":1585761647000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'm confused, is this \"update\" also introducing 2 new stage 0 proposals?","msgtype":"m.text"},"ts":1585761674000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: There's no process for introducing/promoting proposals to Stage 0; they're sort of already at Stage 0 by virtue of having  interested champions, right?","msgtype":"m.text"},"ts":1585761701000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: by convention, stage 0 proposals get presented to the committee","msgtype":"m.text"},"ts":1585761725000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"🙃","msgtype":"m.text"},"ts":1585761738000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"these weren't linked from the agenda, and the title implied nothing but an \"update\", which doesn't require review in advance","msgtype":"m.text"},"ts":1585761741000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we could consider them pre-Stage 0 then; I was unaware of that convention","msgtype":"m.text"},"ts":1585761743000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ljharb: i have a list of reasons that refcollection shouldn't exist here so it might not be a problem","msgtype":"m.text"},"ts":1585761760000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: i'm saying that dropping a bomb of 2 new proposals, without adequate notice, means that people have not had any time to review them before we're expected to discuss themn","msgtype":"m.text"},"ts":1585761774000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"totally unrelated to stage entry requirements","msgtype":"m.text"},"ts":1585761785000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and both of these seem large enough to warrant their own discussion and timebox","msgtype":"m.text"},"ts":1585761802000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I dont' think they're really introducing them now","msgtype":"m.text"},"ts":1585761812000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"alluding to them is doing that","msgtype":"m.text"},"ts":1585761819000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"They're just pairing down the initial proposal","msgtype":"m.text"},"ts":1585761820000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"is it OK to call for feedback on something asynchronously and present it at another meeting for further discussion?","msgtype":"m.text"},"ts":1585761829000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"\"We removed this part to simplify\"","msgtype":"m.text"},"ts":1585761836000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"… maybe i'm also confused, are either of these two capabilities something that was actually part of \"records and tuples\" in the first place?","msgtype":"m.text"},"ts":1585761843000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they seem like new things since the last time it was presented","msgtype":"m.text"},"ts":1585761849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"these haven't been part of any version of the proposal that was presented to the committee","msgtype":"m.text"},"ts":1585761861000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"obv if it's just factoring things out, then my concern doesn't apply","msgtype":"m.text"},"ts":1585761861000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1585761863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so they're new things","msgtype":"m.text"},"ts":1585761865000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not paring down records and tuples","msgtype":"m.text"},"ts":1585761868000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Spread was in the Oct meeting","msgtype":"m.text"},"ts":1585761893000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`RefCollection` is new","msgtype":"m.text"},"ts":1585761902000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"do you mean `with`?","msgtype":"m.text"},"ts":1585761903000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"basic spread sure, but not that lens things","msgtype":"m.text"},"ts":1585761907000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Ahh, that's what it was.","msgtype":"m.text"},"ts":1585761910000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"in this case, I was mistaken","msgtype":"m.text"},"ts":1585761912000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"The \"how do I mutate a record\" was part of the Oct meeting","msgtype":"m.text"},"ts":1585761931000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right, sorry","msgtype":"m.text"},"ts":1585761936000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"btw you can put a new topic if you're not replying to a thing we're currently discussing due to a TCQ item","msgtype":"m.text"},"ts":1585761982000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"how to mutate a record. Maybe `record = #{ ...record, foo: record.foo + 1 }`?","msgtype":"m.text"},"ts":1585761988000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: Yes, that's possible with this proposal","msgtype":"m.text"},"ts":1585762004000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(without any of the follow-ons","msgtype":"m.text"},"ts":1585762008000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(imo it wouldn't make any sense if that wasn't possible in this proposal directly)","msgtype":"m.text"},"ts":1585762057000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably Mark is referring to destructuring","msgtype":"m.text"},"ts":1585762063000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1585762064000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"mark is talking about destructuring, i believe","msgtype":"m.text"},"ts":1585762085000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"should clarify","msgtype":"m.text"},"ts":1585762102000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ie `const { a, …rest } = #{ a: 1, b: 2 }` produces a `rest` non-record object","msgtype":"m.text"},"ts":1585762105000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"With pattern matching, something like `when (#{ a, …rest}) -> rest` might be able to return a record.","msgtype":"m.text"},"ts":1585762145000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think that's Mark's point.","msgtype":"m.text"},"ts":1585762149000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"imo that would only be possible if `const #{ a, …rest } = #{ a: 1, b: 2 }` worked","msgtype":"m.text"},"ts":1585762184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe add it in that another stage 0 proposal `#{...rec, delete x.y.z}`","msgtype":"m.text"},"ts":1585762189000,"senderName":"jackworks25","senderId":"jackworks25@irc"},
{"content":{"body":"s/would/should","msgtype":"m.text"},"ts":1585762190000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: RefCollection does seem to be polyfillable, yes","msgtype":"m.text"},"ts":1585762249000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"to your userland question","msgtype":"m.text"},"ts":1585762257000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"no, RefCollection is not polyfillable","msgtype":"m.text"},"ts":1585762274000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: is it not essentially a WeakMap<object, Symbol>?","msgtype":"m.text"},"ts":1585762290000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"a core part of it is that it's possible to \"garbage collect\" unreachable symbols","msgtype":"m.text"},"ts":1585762291000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"with some additional methods?","msgtype":"m.text"},"ts":1585762294000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"it cannot be expressed by a WeakMap, since WeakMaps cannot have symbol keys","msgtype":"m.text"},"ts":1585762302000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"benjamn: WeakMap strongly holds its values","msgtype":"m.text"},"ts":1585762311000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks25: I have a proposal for `{ a, x.y.z }`(meaning `{ a, z: x.y.z }`) that I need to get back to at some point.","msgtype":"m.text"},"ts":1585762312000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"but, the keys need to be symbols, not objects, so that they can be contained in a Record or Tuple","msgtype":"m.text"},"ts":1585762313000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but it would only need _object_ keys","msgtype":"m.text"},"ts":1585762319000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"ljharb: That's not relevant, since what we're looking for here is symbol keys","msgtype":"m.text"},"ts":1585762322000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"symbols would be the value","msgtype":"m.text"},"ts":1585762325000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"symbols don't have well defined gc semantics","msgtype":"m.text"},"ts":1585762335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this issue came up with symbols as weakmap keys","msgtype":"m.text"},"ts":1585762340000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't see how to do that. I think we need a mapping from symbols.","msgtype":"m.text"},"ts":1585762351000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we need a bidirectional weak mapping, really","msgtype":"m.text"},"ts":1585762362000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: that's only true because of the deref method, right?","msgtype":"m.text"},"ts":1585762374000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"if the mapping was not reversible, we wouldn't need symbol keys?","msgtype":"m.text"},"ts":1585762393000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"I have another drafting proposal might also need the help from RefCollection, actually it (my drafting proposal) also use Symbol to refer to internal objects","msgtype":"m.text"},"ts":1585762403000,"senderName":"jackworks25","senderId":"jackworks25@irc"},
{"content":{"body":"sure, you could say in general, \"if we didn't need to query a datastructure, just add to it, then we could simplify its representation\"","msgtype":"m.text"},"ts":1585762422000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: is there a draft, I was working on a proposal on similar lines :)","msgtype":"m.text"},"ts":1585762427000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"littledan: i'm confused","msgtype":"m.text"},"ts":1585762429000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"littledan: the example i saw was mapping function to a symbol","msgtype":"m.text"},"ts":1585762448000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if you want to associate a unique unforgeable symbol with any object reference, you can use a WeakMap","msgtype":"m.text"},"ts":1585762449000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"Michał Wadas or Sathya Gunasekaran in here?","msgtype":"m.text"},"ts":1585762450000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"shu: You need to be able to dereference the symbol and get the function again","msgtype":"m.text"},"ts":1585762464000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"> You need to be able to dereference the symbol and get the function again","msgtype":"m.text"},"ts":1585762477000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"that's something we could debate","msgtype":"m.text"},"ts":1585762489000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"howdoi: I presented it a few years back: https://github.com/rbuckton/proposal-shorthand-improvements, but it wasn't taken for stage 1.","msgtype":"m.text"},"ts":1585762503000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"arguably, if you can turn the symbol back into the original object, then the record/tuple isn't really immutable, because it still logically contains the objects","msgtype":"m.text"},"ts":1585762519000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"benjamn: If you have another idea for how to meet this use case, it'd be great to discuss in an issue in the RefCollections repo","msgtype":"m.text"},"ts":1585762521000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"let's listen to devsnek on this (talking now0","msgtype":"m.text"},"ts":1585762534000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"I don't understand that argument... the mutable stuff is all contained in the RefCollection","msgtype":"m.text"},"ts":1585762540000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: oh yeah! I recall seeing this.","msgtype":"m.text"},"ts":1585762541000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"What was the reason it wasn't taken for stage-1?","msgtype":"m.text"},"ts":1585762568000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"RefCollection will not work very well when passing throughout a membrane it seems!","msgtype":"m.text"},"ts":1585762601000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"howdoi: IIRC, some concerns about the value of the feature and some issues with runtime semantics.","msgtype":"m.text"},"ts":1585762606000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I believe that should be implemented in user-land","msgtype":"m.text"},"ts":1585762619000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"caridy: I think it should work well with membranes--the membrane can wrap the RefCollection itself, mediating any dereferencing of symbols","msgtype":"m.text"},"ts":1585762620000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh, okies...","msgtype":"m.text"},"ts":1585762629000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: I based it off of C#'s similar feature `new { a, x.y.z }`.","msgtype":"m.text"},"ts":1585762631000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"we cannot implement RefCollection in userland, unfortunately","msgtype":"m.text"},"ts":1585762631000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: hoping that we will get more consensus sooner.","msgtype":"m.text"},"ts":1585762707000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"@littledan, can you provide more details on how the membrane will handle a r/t with a refCollection on it?","msgtype":"m.text"},"ts":1585762727000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"Wasn't there a proposal for a `Symbol` static method that could create a symbol for a set of objects which would be similar to `RefCollection`?","msgtype":"m.text"},"ts":1585762739000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"how would the membrane get the RefCollection?","msgtype":"m.text"},"ts":1585762759000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"seems like it would only see output from it in most cases","msgtype":"m.text"},"ts":1585762773000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"well, how would the other side of the membrane get the RefCollection?","msgtype":"m.text"},"ts":1585762783000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"presumably that access would be mediated by the membrane","msgtype":"m.text"},"ts":1585762790000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton: compositeKey","msgtype":"m.text"},"ts":1585762807000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That's the one.","msgtype":"m.text"},"ts":1585762812000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"the foremost problem is that the idea of collecting symbols is not something that all implementations inherently have","msgtype":"m.text"},"ts":1585762813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Do any?","msgtype":"m.text"},"ts":1585762830000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"most do","msgtype":"m.text"},"ts":1585762835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because they're just heap objects","msgtype":"m.text"},"ts":1585762843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you can also implement them as immediate values","msgtype":"m.text"},"ts":1585762852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can go look at the symbols as weakmap keys issue for more info","msgtype":"m.text"},"ts":1585762862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"under this limitation, refcollections are a permanent leak","msgtype":"m.text"},"ts":1585762900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, implementations are allowed to leak everything, sure","msgtype":"m.text"},"ts":1585762902000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that's not a very good language design though","msgtype":"m.text"},"ts":1585762916000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the unique thing about symbols is that they give identity while being a primitive","msgtype":"m.text"},"ts":1585762920000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"\"sucks if your implementation isn't how v8 does it\"","msgtype":"m.text"},"ts":1585762925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does someone have the link to refcollection?","msgtype":"m.text"},"ts":1585762929000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`record.with({ x: { y: { z: 1 } } })`?","msgtype":"m.text"},"ts":1585762938000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: https://github.com/rricard/proposal-refcollection","msgtype":"m.text"},"ts":1585762938000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"RefCollection is just a `Map`, though","msgtype":"m.text"},"ts":1585762947000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/rricard/proposal-refcollection","msgtype":"m.text"},"ts":1585762948000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Why couldn't the entire thing be reclaimed at once?","msgtype":"m.text"},"ts":1585762955000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"note, this readme is relatively early, still iterating on elaborating the explanations","msgtype":"m.text"},"ts":1585762963000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it seems like RefCollection is a WeakMap that allows Symbol keys","msgtype":"m.text"},"ts":1585763004000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"and maybe also other primitives","msgtype":"m.text"},"ts":1585763038000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"It's just a `Map<symbol, *>`","msgtype":"m.text"},"ts":1585763065000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"and a not removable Map","msgtype":"m.text"},"ts":1585763142000,"senderName":"jackworks25","senderId":"jackworks25@irc"},
{"content":{"body":"ReadonlyWeakMap<*, >?","msgtype":"m.text"},"ts":1585763169000,"senderName":"jackworks25","senderId":"jackworks25@irc"},
{"content":{"body":"What do you mean by removable map?","msgtype":"m.text"},"ts":1585763171000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Ohh","msgtype":"m.text"},"ts":1585763173000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"A ReadOnly Map, yes.","msgtype":"m.text"},"ts":1585763188000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Also not changeable","msgtype":"m.text"},"ts":1585763194000,"senderName":"jackworks25","senderId":"jackworks25@irc"},
{"content":{"body":"drousso: That was answered earlier in the presentation","msgtype":"m.text"},"ts":1585763241000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh?","msgtype":"m.text"},"ts":1585763249000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i came in late 😅","msgtype":"m.text"},"ts":1585763261000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"Since ReadOnly Collections don't propose a array or object, they don't overlap","msgtype":"m.text"},"ts":1585763262000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It seems like RefCollection could build on a ReadOnlyMap, per above","msgtype":"m.text"},"ts":1585763291000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the readonly collections proposal states \"all EcmaScript enumerable collections\"","msgtype":"m.text"},"ts":1585763292000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"which I read as including tuples for sure, and possibly records","msgtype":"m.text"},"ts":1585763322000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"Neither is a collection","msgtype":"m.text"},"ts":1585763362000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Though I understand the confusion","msgtype":"m.text"},"ts":1585763376000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"benjamn makes a good point","msgtype":"m.text"},"ts":1585763386000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Don't we already have significant runtime experience already?","msgtype":"m.text"},"ts":1585763413000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Immer and Immutable.js, etc","msgtype":"m.text"},"ts":1585763420000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the idea of both of those proposals existing separately doesn't seem good to me either","msgtype":"m.text"},"ts":1585763599000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(readonly collections, I mean)","msgtype":"m.text"},"ts":1585763612000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but separate development and syncing later might be good?","msgtype":"m.text"},"ts":1585763625000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"unless I'm confused about goals somehow. it was sort of stated as if obvious","msgtype":"m.text"},"ts":1585763646000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's odd to me that a `Map` can create a readonly snapshot, but that an `Object` can't","msgtype":"m.text"},"ts":1585763727000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"err, well it could if the proposal is approved 😅","msgtype":"m.text"},"ts":1585763751000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"isn't that Object.freeze?","msgtype":"m.text"},"ts":1585763769000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585763772000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"doesn't that modify the object itself though?","msgtype":"m.text"},"ts":1585763795000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"not create a readonly view?","msgtype":"m.text"},"ts":1585763800000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"err, not \"modify\" but \"freeze\"","msgtype":"m.text"},"ts":1585763808000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: wait, how can you make a read only map?","msgtype":"m.text"},"ts":1585763838000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"all Maps and Sets are unstoppably mutable","msgtype":"m.text"},"ts":1585763846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(oh never mind, this readonly collections proposal is way different than the title suggested)","msgtype":"m.text"},"ts":1585763846000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/proposal-readonly-collections","msgtype":"m.text"},"ts":1585763849000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"ah in the proposal","msgtype":"m.text"},"ts":1585763851000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585763852000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1585763860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"drousso: `Object.freeze(Object.create(Object.getOwnPropertyDescriptors(obj), Object.getPrototypeOf(obj)))`","msgtype":"m.text"},"ts":1585763907000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's just as much a read only snapshot of an object as FixedMap eg would give","msgtype":"m.text"},"ts":1585763932000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rickbutton: you should change your abbreviation from RBU to BTN ;)","msgtype":"m.text"},"ts":1585764007000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"that is such a good idea","msgtype":"m.text"},"ts":1585764018000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"totally gonna do that","msgtype":"m.text"},"ts":1585764020000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"thats a readonly snapshot not but doesn't readonly proposal do a view?","msgtype":"m.text"},"ts":1585764169000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"In the slice syntax proposal I proposed adding an `Interval` type (similar to C#'s `Range` type) that could encapsulate a range and would be iterable.","msgtype":"m.text"},"ts":1585764318000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"bradleymeck: ah maybe it also has a view, sure","msgtype":"m.text"},"ts":1585764338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"someone is echoing and should mute","msgtype":"m.text"},"ts":1585764344000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"jack is echoing","msgtype":"m.text"},"ts":1585764357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the meeting host should be able to mute if needed","msgtype":"m.text"},"ts":1585764395000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://github.com/Jack-Works/proposal-Number.range/issues/17","msgtype":"m.text"},"ts":1585764501000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"mpcsh: does it not already mean [0, 10) ?","msgtype":"m.text"},"ts":1585764538000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: last entry on the slide","msgtype":"m.text"},"ts":1585764550000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"mpcsh: ah ty","msgtype":"m.text"},"ts":1585764555000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for reuse, you can also prepend `() =>`","msgtype":"m.text"},"ts":1585764678000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585764685000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ie `() => Number.range(x, y)` is infinitely reusable","msgtype":"m.text"},"ts":1585764688000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: would you like to update your acronym / registered name for the notes? if so, here's where to change: https://github.com/tc39/notes/blob/master/delegates.txt#L145","msgtype":"m.text"},"ts":1585765359000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":" haxjs can you add a link for these slides to the agenda please?","msgtype":"m.text"},"ts":1585765614000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: this proposal does have a repo, it just wasn't linked","msgtype":"m.text"},"ts":1585766042000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: fair","msgtype":"m.text"},"ts":1585766056000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i looked for it but didn't find it","msgtype":"m.text"},"ts":1585766063000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"in general, objecting based on a lack of materials is a stage 2+ thing","msgtype":"m.text"},"ts":1585766093000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because stage 1 is about exploring a problem, and historically we haven't felt advance materials were required to illustrate a problem","msgtype":"m.text"},"ts":1585766113000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so i don't have a strong opinion on that, but i think this conversation could be a lot better had those materials been present","msgtype":"m.text"},"ts":1585766148000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"also if i remember correctly there were issues with this last time and it didn't reach stage 1?","msgtype":"m.text"},"ts":1585766171000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i agree with that for sure","msgtype":"m.text"},"ts":1585766176000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: correct","msgtype":"m.text"},"ts":1585766201000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"was this the proposal that got rejected?","msgtype":"m.text"},"ts":1585766222000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: i think it'd be like, `Promise.resolve` would expect a `this` argument, so it could throw a better error message if none was provided","msgtype":"m.text"},"ts":1585766226000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there were two very similar ones IIRC","msgtype":"m.text"},"ts":1585766229000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Yah, the requirement to patch every platform feature to add the check makes this difficult to accept for me.","msgtype":"m.text"},"ts":1585766231000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rkirsling: not rejected, but no consensus for stage 1","msgtype":"m.text"},"ts":1585766236000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm not sure if this should be #tc39-delegates or #temporaldeadzone, as I'm on the fence as to how serious I am about this, but: `\"use strict this\"`?","msgtype":"m.text"},"ts":1585766241000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I thought the \"explicit `this` param\" got rejected","msgtype":"m.text"},"ts":1585766241000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: that's a different one","msgtype":"m.text"},"ts":1585766248000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"err yeah sorry, rejected is the wrong word","msgtype":"m.text"},"ts":1585766252000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah I know","msgtype":"m.text"},"ts":1585766257000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i guess we could set a flag for every function?","msgtype":"m.text"},"ts":1585766308000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"notes say for \"this reflection\", https://github.com/tc39/notes/blob/master/meetings/2020-02/february-6.md#conclusion-3 \"waiting for additional clarification of intent of proposal and renaming explainer.\"","msgtype":"m.text"},"ts":1585766327000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ystartsev: the proposal last meeting was an own data property, initially populated by the presence of `this` in a non-arrow function body","msgtype":"m.text"},"ts":1585766351000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: thanks","msgtype":"m.text"},"ts":1585766356000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it isn't clear to me -- will this throw if a function called from a function has a this requirement?","msgtype":"m.text"},"ts":1585766495000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"can think an explicit `this` to be a syntax sugar to `if (this === undefined) throw TypeError()` 🤔","msgtype":"m.text"},"ts":1585766498000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"shu: consider `function foo() { return () => this; }`","msgtype":"m.text"},"ts":1585766514000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"for example `function foo() { bar()}` `function bar() { this + 1)`","msgtype":"m.text"},"ts":1585766529000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"ystartsev: i believe it'd be, code could decide to throw if given the wrong \"this-accepting\" kind of function","msgtype":"m.text"},"ts":1585766532000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and we are only checking foo?","msgtype":"m.text"},"ts":1585766537000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"`foo` has a `ThisRequired`, but the arrow it returns does not.","msgtype":"m.text"},"ts":1585766538000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think it's like, if I'm a library, and I'm getting a callback, I can query the callback to see if it expects a this, and if I don't intend to give it one I can throw a nice error?","msgtype":"m.text"},"ts":1585766542000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"very important to note is that nothing about foo implies it is supposed to be given a this value","msgtype":"m.text"},"ts":1585766542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it could be called `getFunctionThatReturnsUndefined`","msgtype":"m.text"},"ts":1585766549000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"exactly what bterlson said, i think","msgtype":"m.text"},"ts":1585766564000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"remaining questions https://snaps.akibraun.com/6qaoe.jpg","msgtype":"m.text"},"ts":1585766572000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"js is a dynamic language, validation of arguments is dynamic","msgtype":"m.text"},"ts":1585766587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you expect a this value you should validate it, not make someone else do it","msgtype":"m.text"},"ts":1585766598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bterlson: that is a question about programmer intent, not syntactic presence of something that gives you the receiver","msgtype":"m.text"},"ts":1585766601000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"for example if you do Map.prototype.set.call(5)","msgtype":"m.text"},"ts":1585766616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if your code has an if (rareCondition) { doSomething(this) }, now it's an error?","msgtype":"m.text"},"ts":1585766623000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585766631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the proposla isn't that we do any error throwing","msgtype":"m.text"},"ts":1585766653000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"in the language","msgtype":"m.text"},"ts":1585766656000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"as far as I understand it","msgtype":"m.text"},"ts":1585766661000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"the proposal exposes something that you can't make any decision from","msgtype":"m.text"},"ts":1585766667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the user has to throw themselves","msgtype":"m.text"},"ts":1585766670000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"functions can optionally use `this` tho","msgtype":"m.text"},"ts":1585766672000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"right, but the only motivating use i saw was to check it and throw","msgtype":"m.text"},"ts":1585766674000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"given the information \"this function syntactically contains this\"","msgtype":"m.text"},"ts":1585766678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can make no decision","msgtype":"m.text"},"ts":1585766680000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"about whether the function should be given this","msgtype":"m.text"},"ts":1585766685000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i don't think that is a useful reflection to make a decision on, right","msgtype":"m.text"},"ts":1585766689000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"^ +1","msgtype":"m.text"},"ts":1585766695000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"the function could be using `this` to throw if this is not undefined","msgtype":"m.text"},"ts":1585766707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which brings me back to \"the function itself should validate its this value\"","msgtype":"m.text"},"ts":1585766718000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, if I decided to throw as a library author if a user gives me a callback that references `this`, I would be making the choice to throw on functions with work with or without this","msgtype":"m.text"},"ts":1585766728000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"yeah i would also agree with that... it seems like something that should be done by the author","msgtype":"m.text"},"ts":1585766740000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"The issue is that by the time the function is invoked, we've lost the location of where the function was passed.","msgtype":"m.text"},"ts":1585766741000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"FWIW I am not arguing in favor of this proposal, merely explaining my understanding","msgtype":"m.text"},"ts":1585766743000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"`addEventLister` being the prime example","msgtype":"m.text"},"ts":1585766750000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/tc39/proposal-hashbang/issues/18","msgtype":"m.text"},"ts":1585766779000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"I can pass a cb that requires a `this`, and by the time the event listener fires, I now have to track down where I forgot to bind the cb.","msgtype":"m.text"},"ts":1585766780000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rwaldron: to be fair, i have one on the agenda for today :-p","msgtype":"m.text"},"ts":1585766790000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if the contract your framework's higher order functions should or should not expect to be called with a receiver, then that's up to the framework imo","msgtype":"m.text"},"ts":1585766799000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron: also, private methods was on top of private fields","msgtype":"m.text"},"ts":1585766836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: if it's about forgetting to bind for native methods, how would you adopt this? monkeypatch all the native methods?","msgtype":"m.text"},"ts":1585766836000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i feel like a better solution would be to add a property that states whether a `this` was bound","msgtype":"m.text"},"ts":1585766852000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"Yes, which I think is the biggest downside to this proposal.","msgtype":"m.text"},"ts":1585766855000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"bradleymeck: hashbang is shipping everywhere, I think (whether that actually matters or not)","msgtype":"m.text"},"ts":1585766860000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: it is up to the framework? Frameworks query function arguments whether they create `this` references","msgtype":"m.text"},"ts":1585766863000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"and decide what to do with that info","msgtype":"m.text"},"ts":1585766869000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"that way, when the function is passed in, it can be checked","msgtype":"m.text"},"ts":1585766871000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"rkirsling: not safari stable","msgtype":"m.text"},"ts":1585766874000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Hax's idea is, they throw","msgtype":"m.text"},"ts":1585766875000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"Having to monkeypatch `addEventListener` (and every plaform API) is a huge burden","msgtype":"m.text"},"ts":1585766879000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: i think that's just a dealbreaker","msgtype":"m.text"},"ts":1585766881000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry, they CAN throw","msgtype":"m.text"},"ts":1585766882000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"I agree","msgtype":"m.text"},"ts":1585766896000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell why does `addEventListener` _have_ to have a `this` though?","msgtype":"m.text"},"ts":1585766901000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i add event listeners all the time where I don't want a `this`","msgtype":"m.text"},"ts":1585766914000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"s/want/care about","msgtype":"m.text"},"ts":1585766920000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"`class Foo { method() { this.doSomething(); } };   addEventLisener('click', foo.method)`","msgtype":"m.text"},"ts":1585766936000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb the class private split was a strategic and intentional move because it was otherwise very large surface... this isn't that.","msgtype":"m.text"},"ts":1585766939000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"But I see what you're saying.","msgtype":"m.text"},"ts":1585766948000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"bradleymeck: even in 13.1 from last week?","msgtype":"m.text"},"ts":1585766967000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell yes, that's a valid case, but I would argue that that's the programmers error","msgtype":"m.text"},"ts":1585766973000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"> i add event listeners all the time where I don't want a `this`","msgtype":"m.text"},"ts":1585766979000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"If you have a `this` in your function's code, I think it's reasonable to assume that you want a `this`.","msgtype":"m.text"},"ts":1585766979000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rwaldron: agreed, as somewhat was the \"in\" feature being removed from the main class fields proposal","msgtype":"m.text"},"ts":1585766989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: at least in REPL it isn't","msgtype":"m.text"},"ts":1585766994000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i could just as validly have `addEventListener(\"click\", function refresh() { /* do static things */ })`","msgtype":"m.text"},"ts":1585767006000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"If you don't have a `this`, then the proposal wouldn't have returned `true` and the API wouldn't have thrown","msgtype":"m.text"},"ts":1585767006000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Yes, and your case is handled.","msgtype":"m.text"},"ts":1585767018000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ah i see what you mean","msgtype":"m.text"},"ts":1585767026000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"`if (thisIsNeeded(cb)) { throw error }`","msgtype":"m.text"},"ts":1585767031000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"bradleymeck: yeah I wouldn't expect that to work unless web inspector wants it to; lemme make a test page and check","msgtype":"m.text"},"ts":1585767039000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"You `cb` doesn't need a `this`, so it doesn't throw.","msgtype":"m.text"},"ts":1585767041000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rkirsling: does it not execute as a Script?","msgtype":"m.text"},"ts":1585767068000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb I just went to write almost the same topic question","msgtype":"m.text"},"ts":1585767075000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"oh right I can eval","msgtype":"m.text"},"ts":1585767080000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"To be clear, I don't support the proposal (due to the burden of monkey patching everyting), I just understand the desire.","msgtype":"m.text"},"ts":1585767092000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell how do you know for a fact that my callback _needs_ `this`?","msgtype":"m.text"},"ts":1585767094000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"what if, make # a valid comment starter if it appears at the line start?","msgtype":"m.text"},"ts":1585767096000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"jackworks92: that's what the second half of this proposal is","msgtype":"m.text"},"ts":1585767108000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh no, please not that","msgtype":"m.text"},"ts":1585767117000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"bradleymeck: eval works","msgtype":"m.text"},"ts":1585767119000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hashbang should only be allowed at byte 0 of a source text","msgtype":"m.text"},"ts":1585767135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585767139000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`#` being a comment start creates a huge ASI for private fields","msgtype":"m.text"},"ts":1585767152000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: queue that?","msgtype":"m.text"},"ts":1585767164000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what about UTF BOM devsnek","msgtype":"m.text"},"ts":1585767166000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I'm actually startled that devtools allows it","msgtype":"m.text"},"ts":1585767167000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jk","msgtype":"m.text"},"ts":1585767168000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"The <script> case is not a TC-39 issue in my opinion","msgtype":"m.text"},"ts":1585767170000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"rickbutton: that's not a hashbang","msgtype":"m.text"},"ts":1585767172000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"msaboff: my first queue item addresses that, fwiw","msgtype":"m.text"},"ts":1585767186000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rickbutton: utf8 bom should be stripped before processing it as a source text","msgtype":"m.text"},"ts":1585767188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"erlang and java are interesting, they are languages without # based comments and hashbangs","msgtype":"m.text"},"ts":1585767188000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jridgewell understood, sorry for arguing with you 😅","msgtype":"m.text"},"ts":1585767196000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"rickbutton: ut8 bom is transport level","msgtype":"m.text"},"ts":1585767198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Did hax propose making `#` a comment start?","msgtype":"m.text"},"ts":1585767206000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1585767208000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"bradleymeck: and do they allow preceding whitespace?","msgtype":"m.text"},"ts":1585767213000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"jridgewell: wait a slide or two","msgtype":"m.text"},"ts":1585767213000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelficarra: no, but there are not clear discussion archives on their design either","msgtype":"m.text"},"ts":1585767231000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the JEP is incredibly terse","msgtype":"m.text"},"ts":1585767237000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or maybe just drop the whole hashbang syntax 🤔","msgtype":"m.text"},"ts":1585767251000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"we already went through all this in node (including how it behaves with BOM)","msgtype":"m.text"},"ts":1585767272000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sad times","msgtype":"m.text"},"ts":1585767276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think in some old node versions #!...{BOM} was allowed at some point due to how we stripped them out","msgtype":"m.text"},"ts":1585767327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"@devsnek The iterator helpers proposal that was mentioned earlier, are you the champion?","msgtype":"m.text"},"ts":1585767374000,"senderName":"rpamely","senderId":"rpamely@irc"},
{"content":{"body":"shu: keith_miller lol my second queue item covers this one","msgtype":"m.text"},"ts":1585767376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rpamely: no, i'm the author (i wasn't a delegate at the time)","msgtype":"m.text"},"ts":1585767389000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rickbutton we actually did explicitly discuss BOM in the hashbang proposal and explicitly decide that BOM in your source text precludes hashbang","msgtype":"m.text"},"ts":1585767393000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Ah ok. Is there an active champion?","msgtype":"m.text"},"ts":1585767404000,"senderName":"rpamely","senderId":"rpamely@irc"},
{"content":{"body":"gotcha, makes sense","msgtype":"m.text"},"ts":1585767407000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rpamely: i can answer questions and make decisions, just on an official level i'm not the champion","msgtype":"m.text"},"ts":1585767426000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"akirose: please save the queue","msgtype":"m.text"},"ts":1585767447000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Ah, I was just trying to understand how they work today","msgtype":"m.text"},"ts":1585767488000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: what does your queue item mean? that code opts into being inlined or appended or whatever?","msgtype":"m.text"},"ts":1585767499000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: tldr they don't","msgtype":"m.text"},"ts":1585767501000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because it seems like they don't","msgtype":"m.text"},"ts":1585767502000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1585767503000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585767505000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"and it's up to it to know its whole world? i see","msgtype":"m.text"},"ts":1585767508000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: like you can't write \"test.js\" to be included somewhere without knowing exactly where that's going to be","msgtype":"m.text"},"ts":1585767520000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: in terms of parse goal as well as scoping","msgtype":"m.text"},"ts":1585767530000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"akirose: we can move it to the overflow at the end of the meeting, right?","msgtype":"m.text"},"ts":1585767534000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"right, so the answer is \"they don't\"","msgtype":"m.text"},"ts":1585767534000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh is this lunch now","msgtype":"m.text"},"ts":1585767535000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have concrete examples from history","msgtype":"m.text"},"ts":1585767539000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: yes","msgtype":"m.text"},"ts":1585767545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that further reinforces my opinion this should not happen","msgtype":"m.text"},"ts":1585767577000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and also other folks' i guess","msgtype":"m.text"},"ts":1585767582000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"weakrefs are very fun","msgtype":"m.text"},"ts":1585767584000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people already have to watch out for </script> when they convert from external to inlined scripts","msgtype":"m.text"},"ts":1585767690000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"fun fact: it's not even possible to inline arbitrary JS into HTML without changing its semantics","msgtype":"m.text"},"ts":1585767715000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"because tagged templates and </script>","msgtype":"m.text"},"ts":1585767729000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also Function#toString","msgtype":"m.text"},"ts":1585767760000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sure but let's please pretend that doesn't exist","msgtype":"m.text"},"ts":1585767779000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: tentatively yes, if haxjs is interested. bear in mind that's like 5am his time.","msgtype":"m.text"},"ts":1585767791000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"'delete Function.prototype.toString'","msgtype":"m.text"},"ts":1585767797000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It seem very hard for me to explain the problem in english :(","msgtype":"m.text"},"ts":1585767819000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"(actually it's 3am)","msgtype":"m.text"},"ts":1585767843000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"confession: I have used /\\bthis\\b/.test(Function.prototype.toString(func)) before","msgtype":"m.text"},"ts":1585767874000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"jackworks92: how many hours before morning is it? because isn't all of china on the same timezone, which means some parts wake up at different times than others?","msgtype":"m.text"},"ts":1585767908000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry, Function.prototype.toString.call(func)","msgtype":"m.text"},"ts":1585767933000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"obviously has false positives, and doesn't work for native functions","msgtype":"m.text"},"ts":1585767958000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"i believe hax is in the same timezone as me, sunrise at around 6am so it's 3hrs to morning","msgtype":"m.text"},"ts":1585767966000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1585767994000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"🙈+1 hard to understand the english questions by hearing but I checkout the meeting notes, fortunately most of the questions are already discussed on github","msgtype":"m.text"},"ts":1585768101000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"I recently started working on an early draft of a proposal for `struct` (as a mechanism for implementing value types). If you are interested in contributing, please send me a message.","msgtype":"m.text"},"ts":1585768441000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`struct` as value types? what different with the record proposal?","msgtype":"m.text"},"ts":1585768601000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"i really want enums","msgtype":"m.text"},"ts":1585768631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i guess i could propose that now","msgtype":"m.text"},"ts":1585768637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I'm working on that too...","msgtype":"m.text"},"ts":1585768638000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"or you could","msgtype":"m.text"},"ts":1585768646000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i want like.... rust enums though","msgtype":"m.text"},"ts":1585768658000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I have one already, planned to present it a year ago but held off due to some discussions with others on the committee.","msgtype":"m.text"},"ts":1585768662000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: there be dragons on `enum` TS already took that space and it would be hard to convince people to reuse it","msgtype":"m.text"},"ts":1585768666000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't care what TS did","msgtype":"m.text"},"ts":1585768676000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"others do","msgtype":"m.text"},"ts":1585768680000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"+1 I like the rust style enum","msgtype":"m.text"},"ts":1585768682000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"🤷🏻 it's a separate language","msgtype":"m.text"},"ts":1585768686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: i'm interested in something like `struct`s for shared memory and layout guarantees, was thinking of resurrecting typed objects","msgtype":"m.text"},"ts":1585768690000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"they can keep using their enum until the end of time","msgtype":"m.text"},"ts":1585768693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: not really a separate language","msgtype":"m.text"},"ts":1585768699000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: have you seen how Scala handles object-oriented pattern matching?","msgtype":"m.text"},"ts":1585768701000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"devsnek: doesn't matter, if it influences people it influences people.","msgtype":"m.text"},"ts":1585768706000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rbuckton: what did you have in mind?","msgtype":"m.text"},"ts":1585768707000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: I'd claim it is increasingly divergent","msgtype":"m.text"},"ts":1585768716000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i've never used scala","msgtype":"m.text"},"ts":1585768717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if ts wants to keep adding things that aren't types","msgtype":"m.text"},"ts":1585768723000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think we should feel constrained by it","msgtype":"m.text"},"ts":1585768730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks92: The record proposal only allows for key-value pairs. The `struct` proposal is for full-featured values with methods similar to `Number` and `BigInteger`, as a possible route for `Decimal`.","msgtype":"m.text"},"ts":1585768736000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"typescript style enum is some kind of too weak, they doesn't have rust style tagged union that can contain data in it","msgtype":"m.text"},"ts":1585768741000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"devsnek: that isn't the consensus though, some people do feel like accommodating TS is important.","msgtype":"m.text"},"ts":1585768757000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah if we just do c style enums","msgtype":"m.text"},"ts":1585768762000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that would be a loss","msgtype":"m.text"},"ts":1585768766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, you're not talking about Rust enums and pattern matching","msgtype":"m.text"},"ts":1585768775000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"or are you?","msgtype":"m.text"},"ts":1585768780000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"jackworks92: I think what you are descirbing is the pattern matching proposal?","msgtype":"m.text"},"ts":1585768784000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"the algebraic data type style enum?","msgtype":"m.text"},"ts":1585768799000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"pattern matching is a good thing to use with that kind of enum","msgtype":"m.text"},"ts":1585768801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: yes","msgtype":"m.text"},"ts":1585768806000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"but you don't need pattern matching to enjoy that kind of enum","msgtype":"m.text"},"ts":1585768811000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though its slightly harder","msgtype":"m.text"},"ts":1585768816000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: yes","msgtype":"m.text"},"ts":1585768820000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"bradleymeck: isn't that basically making ts normative without the tc39 process","msgtype":"m.text"},"ts":1585768838000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: nope, just saying the design space is occupied","msgtype":"m.text"},"ts":1585768855000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"for anyone who cares, Scala lets any object implement an `unapply` method to define how it interacts with pattern matching: https://docs.scala-lang.org/tour/extractor-objects.html","msgtype":"m.text"},"ts":1585768862000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"by what, i don't use ts","msgtype":"m.text"},"ts":1585768862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unapply is neat","msgtype":"m.text"},"ts":1585768871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jackworks92: https://github.com/tc39/proposal-pattern-matching","msgtype":"m.text"},"ts":1585768872000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: `struct` as a way to define user-defined value types like `Decimal`, with support for both mutable and immutable structs, copy-by-value semantics, contiguous chunks of memory, backed by ArrayBuffer or SharedArrayBuffer","msgtype":"m.text"},"ts":1585768874000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: others do, so it remains occupied","msgtype":"m.text"},"ts":1585768875000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but scala makes for very poor precedent","msgtype":"m.text"},"ts":1585768887000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for anything","msgtype":"m.text"},"ts":1585768888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ever","msgtype":"m.text"},"ts":1585768889000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like if i said we shouldn't do something because clojurescript has it","msgtype":"m.text"},"ts":1585768895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people would probably kill me","msgtype":"m.text"},"ts":1585768901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"now now, we'd just ignore you","msgtype":"m.text"},"ts":1585768920000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: you could do that, we can just find a new design","msgtype":"m.text"},"ts":1585768921000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: I can't tell; do you sincerely not understand where the people who place nonzero weight on TS precedent are coming from, or do you just disagree with them?","msgtype":"m.text"},"ts":1585768939000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: let's talk. for sharing them we probably need something more performant than wrappers around SABs","msgtype":"m.text"},"ts":1585768963000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: There's nothing saying that TypeScript's enum design can't evolve. Currently its limited to a fixed set of values in its domain, meaning that there's still some room to improve/change the design.","msgtype":"m.text"},"ts":1585768969000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I mean I disagree that TS should not stop us from taking a different design","msgtype":"m.text"},"ts":1585768971000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"err I disagree => I think","msgtype":"m.text"},"ts":1585768983000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ts have tagged union now but the syntax is too long, have to write normal object with a tag `{kind: 'a', data_a: number}|{kind: 'b', data: number}`. I'd like to have a simpler way of defining and writing it (like in Rust), e.g. `enum MyData { a{data_a: number}; b{data_b: number} }; const x: MyData = MyData.a({data_a: 1})` but ts won't do that","msgtype":"m.text"},"ts":1585769015000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"violates ts design principle","msgtype":"m.text"},"ts":1585769016000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"Bakkot: i think saying \"x language that compiles to js has x so we can't occupy that space in js itself\" is not acting in good faith","msgtype":"m.text"},"ts":1585769018000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: recreating the struct wrappers on all your threads is going to going to eat a big chunk of performance you'd hope to gain from shared memory","msgtype":"m.text"},"ts":1585769023000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: \"not in good faith\" is an extremely serious accusation","msgtype":"m.text"},"ts":1585769033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"But the reason I haven't yet proposed `enum` is exactly this discussion. There are design decisions and questions to resolve before I feel the proposal will meet the needs of the community and the committee.","msgtype":"m.text"},"ts":1585769035000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: you can make a different enum, just not overlap the design","msgtype":"m.text"},"ts":1585769048000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rbuckton: did you see that ljharb is taking over championing pattern matching?","msgtype":"m.text"},"ts":1585769078000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"shu: True. I haven't delved into that corner of the design yet. However, this is roughly analogous to every realm getting its own `Number.prototype`.","msgtype":"m.text"},"ts":1585769086000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"benjamn: yes.","msgtype":"m.text"},"ts":1585769091000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Bakkot: i can't see how the argument creates productive discourse so...","msgtype":"m.text"},"ts":1585769094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: language evolution for JS is fundamentally different from language evolution for basically any other language, because it has a level of unprecedented interop as one of its most core value props","msgtype":"m.text"},"ts":1585769110000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"interop sure, but if you go through a compiler","msgtype":"m.text"},"ts":1585769132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"think about the constituencies","msgtype":"m.text"},"ts":1585769148000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like if you can just block tc39 movement because you can create something similar somewhere else","msgtype":"m.text"},"ts":1585769162000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how people were doing Array.prototype.smoosh to stop tc39 from using it","msgtype":"m.text"},"ts":1585769173000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: Another part of the current `struct` draft is support for syntactic operator overloading. I'm talking with littledan about it as well.","msgtype":"m.text"},"ts":1585769180000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it's not something existing that blocks it, it's ecosystem pervasiveness","msgtype":"m.text"},"ts":1585769187000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if a delegate blocks because of it","msgtype":"m.text"},"ts":1585769199000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a pecularity of TC39","msgtype":"m.text"},"ts":1585769207000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which is what was brought up above","msgtype":"m.text"},"ts":1585769212000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is extremely not a good precedent if \"TS did it therefore JS can't\" becomes a thing","msgtype":"m.text"},"ts":1585769231000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i don't think it's ever that black and white","msgtype":"m.text"},"ts":1585769240000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton made a really great point above about TS enums being able to evolve to something more like Rust enums","msgtype":"m.text"},"ts":1585769255000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"i was responding to the above point that js couldn't deviate from ts enum semantics","msgtype":"m.text"},"ts":1585769256000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the first time that came up, we explicitly noted it as a one-off","msgtype":"m.text"},"ts":1585769258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"typescript is an important part of javascript ecosystem, we should avoid to break them if there is better way to do it if it is possible (like, change another keyword for the proposal)","msgtype":"m.text"},"ts":1585769262000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"and then it came up a second time","msgtype":"m.text"},"ts":1585769264000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks92: it doesn't break them","msgtype":"m.text"},"ts":1585769271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with the current TS syntax continuing to work","msgtype":"m.text"},"ts":1585769275000,"senderName":"benjamn","senderId":"benjamn@irc"},
{"content":{"body":"you have to run ts code through a compiler to get js","msgtype":"m.text"},"ts":1585769277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its not breaking","msgtype":"m.text"},"ts":1585769293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's definitely not ideal for them","msgtype":"m.text"},"ts":1585769312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"🙈","msgtype":"m.text"},"ts":1585769317000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"TS users are sometimes part of the JS ecosystem, and TS build output is. but TS itself is a different language.","msgtype":"m.text"},"ts":1585769321000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm willing to say they're part of the js ecosystem in more than their compiler output","msgtype":"m.text"},"ts":1585769338000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(not a superset of JS, but if anyone wants to debate that let's go to another channel)","msgtype":"m.text"},"ts":1585769343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but if they add things that aren't types","msgtype":"m.text"},"ts":1585769346000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they should be prepared to clash with js","msgtype":"m.text"},"ts":1585769352000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't see how this discussion is any more productive","msgtype":"m.text"},"ts":1585769359000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i was concerned about someone saying that people would likely not accept semantics that deviate from ts","msgtype":"m.text"},"ts":1585769390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which seemed problematic in a larger sense to tc39","msgtype":"m.text"},"ts":1585769402000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: will you start a rust style enum proposal? I'm happy to see that","msgtype":"m.text"},"ts":1585769403000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"certainly nobody thinks TS compat should have no weight","msgtype":"m.text"},"ts":1585769406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks92: there's already 2 enum proposals, i'd love to see \"not a third\" :-p","msgtype":"m.text"},"ts":1585769419000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i would consider their design as valid in the design space but i would be very uncomfortable with the idea that we have to do enums the same as ts or not at all","msgtype":"m.text"},"ts":1585769443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: people plainly stating their sincerely held opinions about which factors are important in JS's evolution is not bad faith even if you don't agree with them","msgtype":"m.text"},"ts":1585769445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh i didnt see them in the proposals list","msgtype":"m.text"},"ts":1585769446000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"devsnek: If you'd like, take a look at https://github.com/rbuckton/proposal-enum and contibute to the issue tracker your thoughts about rust-style enums and perhaps we can find a way to incorporate that capability?","msgtype":"m.text"},"ts":1585769475000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Bakkot: you don't think \"the same as ts or not at all\" isn't a regressive pattern?","msgtype":"m.text"},"ts":1585769486000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't know what \"a regressive pattern\" means","msgtype":"m.text"},"ts":1585769502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like","msgtype":"m.text"},"ts":1585769507000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"harmful to tc39 process","msgtype":"m.text"},"ts":1585769511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks92: rbuckton's, and https://github.com/rwaldron/proposal-enum-definitions","msgtype":"m.text"},"ts":1585769514000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't think it's harmful to the _process_; I think it would lead to worse outcomes than a more flexible position, but that is true of any position I disagree with. one can hold that position in good faith.","msgtype":"m.text"},"ts":1585769549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb, jackworks92: rwaldron and I discussed our proposals and my current proposal is designed to mostly incorporate his (with a few exceptions).","msgtype":"m.text"},"ts":1585769566000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"also no one stated that as a fully general ultimatum.","msgtype":"m.text"},"ts":1585769566000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: i feel like you're mostly arguing against a strawman","msgtype":"m.text"},"ts":1585769582000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: that's great, i'd love to see rick's archived with a note to that effect then :-)","msgtype":"m.text"},"ts":1585769583000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: i suggested something about enums and was warned that people would be unlikely to choose it because ts does something else","msgtype":"m.text"},"ts":1585769615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even web compat issues, given compelling reason we want to do something, warrant investigation into how bad the breakage is","msgtype":"m.text"},"ts":1585769616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i've heard TS concerns brought up but never in the context of the TS way or not at all","msgtype":"m.text"},"ts":1585769630000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: Mine hasn't officially subsumed his, though I believe we were moving in that direction.","msgtype":"m.text"},"ts":1585769634000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: that's what i'm responding to","msgtype":"m.text"},"ts":1585769644000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also as i keep saying, it's not breakage because ts is a different language, it has a compiler","msgtype":"m.text"},"ts":1585769668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fundamentally, if we can do a feature in a way that doesn't cause misery for millions of devs, that seems good to argue for?","msgtype":"m.text"},"ts":1585769674000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"rbuckton jackworks92 confirm.","msgtype":"m.text"},"ts":1585769676000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"devsnek: yes, because in this particular case people think that the breakage is not worth it, not because of a fully general \"TS or not at all\" ultimatum","msgtype":"m.text"},"ts":1585769683000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: gotcha","msgtype":"m.text"},"ts":1585769689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"s/people/some people/","msgtype":"m.text"},"ts":1585769693000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: but there isn't breakage","msgtype":"m.text"},"ts":1585769702000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek call it whatever you like","msgtype":"m.text"},"ts":1585769708000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the choice of noun here is not important","msgtype":"m.text"},"ts":1585769713000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ts can keep using its enums","msgtype":"m.text"},"ts":1585769713000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh afterall, ts can make a breaking change or add a compiler options to switch to ES semantics","msgtype":"m.text"},"ts":1585769719000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"and its not like they don't already have a bunch of flags for switching things to es semantics","msgtype":"m.text"},"ts":1585769735000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek yes, but with other costs","msgtype":"m.text"},"ts":1585769739000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as a pragmatist, i'm not sure what airing an ontological disagreement on what constitutes \"breakage\" will help. surely not TS's product direction or their delegates' concern for their own users","msgtype":"m.text"},"ts":1585769748000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"mostly to users, who know have to know about two kinds of enum","msgtype":"m.text"},"ts":1585769760000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is a real cost.","msgtype":"m.text"},"ts":1585769763000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bringing up this cost is not bad faith.","msgtype":"m.text"},"ts":1585769767000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, that is the primary charge for a standards body","msgtype":"m.text"},"ts":1585769780000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe ts should not have added enums then lol","msgtype":"m.text"},"ts":1585769781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but they did, that is the world we live in now","msgtype":"m.text"},"ts":1585769791000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why do we have to back ourselves into this corner is my point","msgtype":"m.text"},"ts":1585769794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Ideally we can come up with a solution that works for everyone. In general we'll make requests if a proposal introduces a feature that could be conflicting, or introduce compiler flags to opt into the ES-specific behaviors when that's not possible (such as the Set vs Define argument re: class fields).","msgtype":"m.text"},"ts":1585769797000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"there is `namespace`, `import x = expr` in ts already so it's already \"3 kinds of module\" need to know for ts users","msgtype":"m.text"},"ts":1585769816000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"devsnek: why do we have to care about TS? we don't _have_ to. we can do whatever we want. some people do care, mostly because they foresee actual people being worse off. they are allowed to care about this.","msgtype":"m.text"},"ts":1585769843000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"browsers should not have done stupid function-in-block semantics, let's break people depending on that behavior because browsers did a bad thing","msgtype":"m.text"},"ts":1585769850000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"so 2 kinds of enum is okay to me","msgtype":"m.text"},"ts":1585769857000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"bterlson: browsers are very different from everyone else tho","msgtype":"m.text"},"ts":1585769870000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: i think we actually do have to :P","msgtype":"m.text"},"ts":1585769893000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: i don't think we should care about ts more than ts cares about js","msgtype":"m.text"},"ts":1585769903000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu it's not a requirement of our process document, is mostly what we mean to say","msgtype":"m.text"},"ts":1585769908000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: indeed that i agree with","msgtype":"m.text"},"ts":1585769914000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek sure, you are allowed to hold that position. but other people can disagree with that position in good faith. (or, also, disagree about how much TS cares about JS).","msgtype":"m.text"},"ts":1585769938000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jackworks92: I'd like to avoid two kinds of enum if we can find a way to support both in a single design.","msgtype":"m.text"},"ts":1585769943000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ts will follow the es semantics so there isn't too much things to worry about","msgtype":"m.text"},"ts":1585769952000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"I guess I'm mostly just making a snarky point that it's not the typescript team that pays the price for decisions we make, mostly it's developers who do","msgtype":"m.text"},"ts":1585769954000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: that is fair","msgtype":"m.text"},"ts":1585769989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bterlson: well, as a capitalist, i should hope the TS team will also pays the price eventually in losing users and getting defunded","msgtype":"m.text"},"ts":1585769993000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and us apparently","msgtype":"m.text"},"ts":1585769994000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bterlson: Doesn't that cut both ways though?","msgtype":"m.text"},"ts":1585769994000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"rbuckton: yeah, maybe a ts (syntax level) compatible and enhanced enum is great","msgtype":"m.text"},"ts":1585770007000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"bterlson: but JS users also thus pay the price for decisions the TS team makes","msgtype":"m.text"},"ts":1585770008000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585770014000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why do you think the venn diagram of JS users and TS users is not mostly a circle","msgtype":"m.text"},"ts":1585770034000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bterlson: and while that's a power/risk/responsibility tc39 members and browser makers are widely agreed to have, i don't think the wider community would imbue the TS team with that power","msgtype":"m.text"},"ts":1585770042000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: it very much is not, in my experience","msgtype":"m.text"},"ts":1585770048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu most people continue not using TS, I can tell you from experience talking to a lot of developers at, like, banks","msgtype":"m.text"},"ts":1585770054000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep, it's how ecosystems work. We also pay the price for decisions library authors make, or browsers, or frameowrks, etc. etc. It's a giant pile of complex tradeoffs.","msgtype":"m.text"},"ts":1585770055000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1585770061000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but proposals aren't often blocked because lodash did it differently","msgtype":"m.text"},"ts":1585770069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: oh really? what's the overlap in your experience?","msgtype":"m.text"},"ts":1585770071000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm just not happy with the idea that i would have to use worse enums because of a language i don't even use","msgtype":"m.text"},"ts":1585770089000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(the runtime semantics of TS enum (two-way binding for int enum) is not good for me)","msgtype":"m.text"},"ts":1585770095000,"senderName":"jackworks92","senderId":"jackworks92@irc"},
{"content":{"body":"Anyways, if you're interested in contributing to my draft `struct` proposal, it can be found here: https://github.com/rbuckton/proposal-struct. Its in its infancy and no where near ready to be presented (there's a lot of holes to fill in and bikeshedding to do), so nothing in the design is currently set in stone.","msgtype":"m.text"},"ts":1585770096000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i'm not angry at typescript itself","msgtype":"m.text"},"ts":1585770097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: outside of large companies, i think it's much closer to \"minimal overlap\" than a circle.","msgtype":"m.text"},"ts":1585770100000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu maybe 20% of JS developers at non-software enterprises are using typescript, among those I have talked to as part of my job","msgtype":"m.text"},"ts":1585770101000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, i see","msgtype":"m.text"},"ts":1585770123000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"75% confidence interval is like 5%-40%","msgtype":"m.text"},"ts":1585770125000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"big range","msgtype":"m.text"},"ts":1585770132000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"confidence intervals should be large, people are bad at guessing","msgtype":"m.text"},"ts":1585770142000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"make a virus that infects js software and detects if the code is similar to ts output","msgtype":"m.text"},"ts":1585770170000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops wrong channel","msgtype":"m.text"},"ts":1585770186000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are people able to load drive.google.com","msgtype":"m.text"},"ts":1585771224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reminder that Zoom resets your display name if you left and came back","msgtype":"m.text"},"ts":1585771226000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: yes","msgtype":"m.text"},"ts":1585771233000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1585771266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also implemented in engine262!","msgtype":"m.text"},"ts":1585771333000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is there a way to keep freenode from kicking me out every couple hours or so? It randomly disconnects and \"reconnect\" just hangs it.","msgtype":"m.text"},"ts":1585771874000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: are you using the web client?","msgtype":"m.text"},"ts":1585771909000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1585771914000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"yeah I had the same issue when I was using it last meeting, it's just broken","msgtype":"m.text"},"ts":1585771928000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there's a bunch of free IRC clients","msgtype":"m.text"},"ts":1585771941000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I recommend using one of them","msgtype":"m.text"},"ts":1585771947000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think Mark is saying:","msgtype":"m.text"},"ts":1585772143000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1585772187000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"promise.then(() => console.log(1));","msgtype":"m.text"},"ts":1585772187000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"/ a cleanup cannot be scheduled here","msgtype":"m.text"},"ts":1585772187000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"promise.then(() => console.log(2));","msgtype":"m.text"},"ts":1585772187000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1585772187000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yep, that's true today","msgtype":"m.text"},"ts":1585772198000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and will remain true","msgtype":"m.text"},"ts":1585772210000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But is he also saying that the first and second console logs must be scheduled first and second, and cleanup after both?","msgtype":"m.text"},"ts":1585772231000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't think he was saying that","msgtype":"m.text"},"ts":1585772288000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i only understood interleaving as synchronous interruption","msgtype":"m.text"},"ts":1585772296000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1585772310000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Then, yah, that would be very surprising semantics","msgtype":"m.text"},"ts":1585772318000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But I don't think the spec does that.","msgtype":"m.text"},"ts":1585772331000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So we should be good.","msgtype":"m.text"},"ts":1585772343000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"there is nothing in the ecma262 side that guarantees both console logs be both scheduled before cleanup","msgtype":"m.text"},"ts":1585772344000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that's up to the host","msgtype":"m.text"},"ts":1585772348000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"html happens to do this because cleanup is a task, not a microtask (what dan was saying about priorities)","msgtype":"m.text"},"ts":1585772364000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1585772378000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: node also has workers","msgtype":"m.text"},"ts":1585772748000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: sure","msgtype":"m.text"},"ts":1585772758000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: were you going to suggest that cleanupSome checks [[CanBlock]]","msgtype":"m.text"},"ts":1585772820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1585772915000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"What are the usecases for `cleanupSome`?","msgtype":"m.text"},"ts":1585773111000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: something that doesn't yield to host safepoints","msgtype":"m.text"},"ts":1585773150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like a tight loop in a worker","msgtype":"m.text"},"ts":1585773158000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is there an example?","msgtype":"m.text"},"ts":1585773183000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Like, why is it critical to clean it up _now_?","msgtype":"m.text"},"ts":1585773202000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"because it can never happen otherwise","msgtype":"m.text"},"ts":1585773208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if your worker is while (true) { ... }","msgtype":"m.text"},"ts":1585773219000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as you're in that loop the host can never perform cleanup callbacks","msgtype":"m.text"},"ts":1585773233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Why is that an issue?","msgtype":"m.text"},"ts":1585773243000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"If you're in a `while (true) {}`, you can never use Promises, etc.","msgtype":"m.text"},"ts":1585773263000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"shu https://github.com/tc39/test262/pull/2531 review this now?","msgtype":"m.text"},"ts":1585773264000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Like, the whole JS ecosystem is broken with that.","msgtype":"m.text"},"ts":1585773275000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: because if you're using weak stuff you expect your things to be cleaned","msgtype":"m.text"},"ts":1585773276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron: yep, yes please","msgtype":"m.text"},"ts":1585773288000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and interactions with wasm, etc have this problem","msgtype":"m.text"},"ts":1585773290000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"therefore we try to support it","msgtype":"m.text"},"ts":1585773298000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we could theoretically not have it","msgtype":"m.text"},"ts":1585773325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it would be kind of unfortunate","msgtype":"m.text"},"ts":1585773329000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wow this is giving me fomo","msgtype":"m.text"},"ts":1585773372000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oughtta dive into that Temporal repo more properly","msgtype":"m.text"},"ts":1585773394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"temporal is awesome","msgtype":"m.text"},"ts":1585773496000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't see why wasm has any less constraint to return to the run loop","msgtype":"m.text"},"ts":1585773549000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"If your wasm source language doesn't return to the event loop you'll still be screwed","msgtype":"m.text"},"ts":1585773571000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"someone needs to enable redirect to https on tc39's gh-pages","msgtype":"m.text"},"ts":1585773578000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because you can't get any events","msgtype":"m.text"},"ts":1585773581000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"you don't need events","msgtype":"m.text"},"ts":1585773588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could be working with atomic shared buffers","msgtype":"m.text"},"ts":1585773593000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is something that people actually do","msgtype":"m.text"},"ts":1585773600000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure if we explicitly wrote this in the slides, but Igalia has been working on this \"in partnership with\" Bloomberg :) just to make disclosure explicit","msgtype":"m.text"},"ts":1585773604000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but you know we love this and would probably be doing it in our free time anyway...","msgtype":"m.text"},"ts":1585773633000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(e.g., Ujjwal concretely did start on this in his free time before starting at Igalia)","msgtype":"m.text"},"ts":1585773646000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"breaking: igalia and bloomberg conspiring to add usable datetime to js","msgtype":"m.text"},"ts":1585773650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: I think it was in the slides","msgtype":"m.text"},"ts":1585773653000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"could be wrong","msgtype":"m.text"},"ts":1585773656000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh good","msgtype":"m.text"},"ts":1585773661000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: the box is checked","msgtype":"m.text"},"ts":1585773662000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i was able to visit tc39.es/proposal-temporal/docs with no https","msgtype":"m.text"},"ts":1585773678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: and http redirects to https to me","msgtype":"m.text"},"ts":1585773680000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ah, that's just for that one repo","msgtype":"m.text"},"ts":1585773684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: every repo has to check it separately","msgtype":"m.text"},"ts":1585773688000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1585773690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's not great","msgtype":"m.text"},"ts":1585773692000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we should ask github to do something about that","msgtype":"m.text"},"ts":1585773727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait I thought we didn't want a new way to probe system time","msgtype":"m.text"},"ts":1585773741000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"keith_miller: (to recap for channel:) how is interop risk due to depending on cleanupSome different than interop risk due to e.g. chrome always scheduling a cleanup task and running it and safari never scheduling?","msgtype":"m.text"},"ts":1585773769000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"michaelficarra: i believe that if it's all under `Temporal.now`, and that's normative optional, `delete Temporal.now` would be sufficient for that concern","msgtype":"m.text"},"ts":1585773787000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: I think the difference is between doing it at a different time or not at all","msgtype":"m.text"},"ts":1585773789000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"both are allowed by the spec but one is clearly not the intended behavior","msgtype":"m.text"},"ts":1585773803000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"In other words, If WebKit is going to do something to stop cleanupSome on the main thread then that just won't work unless it's also implemented in V8","msgtype":"m.text"},"ts":1585773874000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Since we can't throw we can only silently ignore it","msgtype":"m.text"},"ts":1585773899000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i'm not convinced the interop risk is different","msgtype":"m.text"},"ts":1585773922000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this sounds eerily similar to WebAssembly synchronous module compilation not working on the main thread in Chrome...","msgtype":"m.text"},"ts":1585773934000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: But that throws right?","msgtype":"m.text"},"ts":1585773947000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585773954000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but there's no part of the spec that specifically allows for throwing, there","msgtype":"m.text"},"ts":1585773967000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"anyway, the interop situation there is not great. I'd prefer to avoid if it possible!","msgtype":"m.text"},"ts":1585773979000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm still angry that chrome doesn't allow sync compilation","msgtype":"m.text"},"ts":1585774005000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this interop risk is also a risk for a single browser","msgtype":"m.text"},"ts":1585774009000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I thought it was a size thing?","msgtype":"m.text"},"ts":1585774035000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"maybe I'm wrong though","msgtype":"m.text"},"ts":1585774041000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"its a size but only enforced for the sync api","msgtype":"m.text"},"ts":1585774049000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the size is also small enough that only toy demos will be under the limit","msgtype":"m.text"},"ts":1585774056000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think it's mostly for snippets not for whole apps","msgtype":"m.text"},"ts":1585774076000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"or at least that was my understanding of why it's there","msgtype":"m.text"},"ts":1585774088000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i thought we (browsers) all signed up for educating devs in such a way that cleanupSome can be a nop at any time","msgtype":"m.text"},"ts":1585774093000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not arguing for or against it","msgtype":"m.text"},"ts":1585774096000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585774097000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"the logic for sorucemapping is too big for sync loading in chrome","msgtype":"m.text"},"ts":1585774106000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sourcemapping*","msgtype":"m.text"},"ts":1585774111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and that's not a lot of logic","msgtype":"m.text"},"ts":1585774118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: I mean \"yes\" but practically I doubt any dev expects only event loop to work if cleanupSome is available... In the end education only gets you so far","msgtype":"m.text"},"ts":1585774183000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"like we could educate devs that they nest constructurs in functions but that doesn't mean everyone doesn't do that","msgtype":"m.text"},"ts":1585774225000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"that they shouldn't nest constructors in functions","msgtype":"m.text"},"ts":1585774237000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: that's qualitatively different than an inherently nondeterministic function","msgtype":"m.text"},"ts":1585774243000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err, feature","msgtype":"m.text"},"ts":1585774246000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: let me separate the questions","msgtype":"m.text"},"ts":1585774256000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: do you *also* object to the worker use case","msgtype":"m.text"},"ts":1585774270000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't particularly like it but personally I'll swallow it.","msgtype":"m.text"},"ts":1585774317000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I can't speak to the managers of WebKit though","msgtype":"m.text"},"ts":1585774328000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I'm surprised the era name is returned as \"reiwa\" instead of \"㋿\"","msgtype":"m.text"},"ts":1585774329000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"hmm yeah I didn't think `reiwa` was a thing from Unicode's perspective","msgtype":"m.text"},"ts":1585774438000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"when in doubt blame icu4c","msgtype":"m.text"},"ts":1585774457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: you mean the square era names in general?","msgtype":"m.text"},"ts":1585774587000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"keith_miller: i would be very unhappy to hold this up on reopening the design question on cleanupSome, given i think the worker thing is a valid use case","msgtype":"m.text"},"ts":1585774619000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i know some people who would be very very sad if cleanupSome isn't available","msgtype":"m.text"},"ts":1585774707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean I know people that will be very very sad if cleanupSome is available :P","msgtype":"m.text"},"ts":1585774779000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"what's the argument against it","msgtype":"m.text"},"ts":1585774794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that it can be used on the main thread?","msgtype":"m.text"},"ts":1585774813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Where do we signup for temporal weekly meetings?","msgtype":"m.text"},"ts":1585774875000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"michaelficarra: I mean specifically the romanized string like you said","msgtype":"m.text"},"ts":1585774880000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh it shouldn't be","msgtype":"m.text"},"ts":1585774922000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I don't know where that came from","msgtype":"m.text"},"ts":1585774926000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"keith_miller: okay, here's my proposal","msgtype":"m.text"},"ts":1585774933000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"as devnsek says, probably blame ICU","msgtype":"m.text"},"ts":1585774934000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: That all the use cases for it on the Web are effectively just trying to not work well with the event model on the web. And by making that easier we also encourage other bad practices.","msgtype":"m.text"},"ts":1585774943000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i mean that's partially the motivation of web workers","msgtype":"m.text"},"ts":1585774959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's in addition to increasing the compatibility surface area of the proposal","msgtype":"m.text"},"ts":1585774961000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: cleanupSome has valid use cases for both web workers and node workers, less so for main thread","msgtype":"m.text"},"ts":1585774964000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and no one was against web workers","msgtype":"m.text"},"ts":1585774966000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least that i know of","msgtype":"m.text"},"ts":1585774973000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: the spec currently already has allowance for cleanupSome to always be a no-op","msgtype":"m.text"},"ts":1585774977000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: chrome and v8 will ship with cleanupSome being nop on the main thread","msgtype":"m.text"},"ts":1585774994000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: we add this requirement in the HTML spec","msgtype":"m.text"},"ts":1585775002000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: chrome will or v8 will","msgtype":"m.text"},"ts":1585775007000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"both?","msgtype":"m.text"},"ts":1585775015000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why not allow throwing if the host doesn't allow it?","msgtype":"m.text"},"ts":1585775023000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: we would not want to disallow it in node","msgtype":"m.text"},"ts":1585775033000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think","msgtype":"m.text"},"ts":1585775038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I second what devsnek said","msgtype":"m.text"},"ts":1585775041000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"by main thread i mean align with [[CanBlock]]","msgtype":"m.text"},"ts":1585775060000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1585775067000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"otherwise we would need to spawn up a worker every time we want weakrefs with computational-heavy scripts","msgtype":"m.text"},"ts":1585775069000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"does node have any agents where [[CanBlock]] is false?","msgtype":"m.text"},"ts":1585775072000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i thought you meant by default 😅","msgtype":"m.text"},"ts":1585775075000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, i mean on main thread","msgtype":"m.text"},"ts":1585775079000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"uh i don't think we expose that","msgtype":"m.text"},"ts":1585775086000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Atomics.wait exposes it","msgtype":"m.text"},"ts":1585775093000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Atomics.wait throws where [[CanBlock]] is false","msgtype":"m.text"},"ts":1585775098000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no i mean the ability to disable it","msgtype":"m.text"},"ts":1585775098000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1585775101000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: no, it is allowed","msgtype":"m.text"},"ts":1585775102000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we should absolutely not disable it in node","msgtype":"m.text"},"ts":1585775114000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"an embedder could create an agent and do whatever it wants with it","msgtype":"m.text"},"ts":1585775115000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: i can live with throwing when [[CanBlock]] is false in cleanupSome","msgtype":"m.text"},"ts":1585775131000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Ok, let me get back to you tomorrow","msgtype":"m.text"},"ts":1585775145000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: if apple agrees to that and we can settle this before the end of the meeting","msgtype":"m.text"},"ts":1585775147000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: great, thanks","msgtype":"m.text"},"ts":1585775156000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or w/e people get back to me","msgtype":"m.text"},"ts":1585775157000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"well...","msgtype":"m.text"},"ts":1585775161000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't have plans to wait another 2 months for resolution on this","msgtype":"m.text"},"ts":1585775189000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"where do i send the cake asking apple to please not block cleanupSome","msgtype":"m.text"},"ts":1585775224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm still highly confused as to the root concern. My understanding is that `cleanupSome` means \"if there is any finalizer to run, can you please run them now\". There is no guarantee there actually is any finalizers to run. Realistically in the main thread on the web, its really hard for a program to not yield to the event loop","msgtype":"m.text"},"ts":1585775227000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"if it doesn't yield the user can't click anything","msgtype":"m.text"},"ts":1585775282000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhofman: the concern is that apple wants cleanupSome to not do anything on the main thread because of the general philosophy you shouldn't do work synchronously on the web","msgtype":"m.text"},"ts":1585775285000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"regardless of click handlers","msgtype":"m.text"},"ts":1585775286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the page just freezes","msgtype":"m.text"},"ts":1585775290000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhofman: and while the spec *does* allow cleanupSome to always nop, in practice this will have a large interop risk with Chrome, if Chrome *does* make cleanupSome run the finalizers","msgtype":"m.text"},"ts":1585775315000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like the reschedule problem with iterators","msgtype":"m.text"},"ts":1585775346000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my initial response is basically \"that's what you bought into by using finalizers to begin with\"","msgtype":"m.text"},"ts":1585775355000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i agree with shu there","msgtype":"m.text"},"ts":1585775379000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i appreciate the practical difference between \"never/always\" and different likelihood","msgtype":"m.text"},"ts":1585775381000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"do engines really interrupt javascript execution to perform collection on the main thread. I know it's possible, but is it reasonable for a program to expect?","msgtype":"m.text"},"ts":1585775431000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"it does do that yes","msgtype":"m.text"},"ts":1585775441000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"minor GCs especially","msgtype":"m.text"},"ts":1585775447000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Sorry I meant that as if people get back to me before tomorrow","msgtype":"m.text"},"ts":1585775449000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ah +1","msgtype":"m.text"},"ts":1585775456000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'll reply then","msgtype":"m.text"},"ts":1585775457000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585775458000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"MylesBorins condolences","msgtype":"m.text"},"ts":1585775475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"paths forward here are 1) throwing when [[CanBlock]] is false, 2) removing cleanupSome, or 3) the browsers come to a gentleman's agreement since the allowance exists in the spec","msgtype":"m.text"},"ts":1585775478000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can live with 1), i think 2) is a non-starter for workers, and am also fine with 3) but apple might not be","msgtype":"m.text"},"ts":1585775511000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"HTML could also spec it","msgtype":"m.text"},"ts":1585775535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's what i suggested above","msgtype":"m.text"},"ts":1585775540000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we leave cleanupSome as is, maybe add a host hook","msgtype":"m.text"},"ts":1585775546000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and HTML can decide to nop or throw on main thread","msgtype":"m.text"},"ts":1585775556000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"either option will make testing interesting. Require to spun a worker to test `cleanupSome`","msgtype":"m.text"},"ts":1585775621000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"testing this is pretty impossible","msgtype":"m.text"},"ts":1585775635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shrug, we bought into that world already on the web","msgtype":"m.text"},"ts":1585775637000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"where main thread and worker threads have distinctly different capabilities along sync/async boundaries","msgtype":"m.text"},"ts":1585775651000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"speaking of which engine262 is reporting really low coverage levels for weakref stuff","msgtype":"m.text"},"ts":1585775658000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i'm not sure why","msgtype":"m.text"},"ts":1585775672000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should investigate at some point","msgtype":"m.text"},"ts":1585775678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"half of the spec is impossible to test, especially after some of the more recent changes","msgtype":"m.text"},"ts":1585775741000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"could make special cases for engine262 since it has deterministic collection","msgtype":"m.text"},"ts":1585775763000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm i guess that's what the implementation contributed tests are","msgtype":"m.text"},"ts":1585775794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we tried to come up with hooks that basically said \"resolve when you collected this object\". But since a collected object doesn't mean the registry cell / weakref has been emptied, you still can't test that","msgtype":"m.text"},"ts":1585775839000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"you can have a test of the form \"here's a hook which asks the host to do as much GC as it can and run all finalizers and so on, which the host is free to implement however it likes. after this hook, assert that _if_ the finalizer for X ran then the WeakRef for X is empty\"","msgtype":"m.text"},"ts":1585775953000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's sort of what we have isn't it","msgtype":"m.text"},"ts":1585776070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"$262.gc","msgtype":"m.text"},"ts":1585776072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhofman: Huh? If your finalize hook is called all weakRefs connected to that object should be cleared. Does the spec actually allow that not to be the case?","msgtype":"m.text"},"ts":1585776248000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: as currently written that is required","msgtype":"m.text"},"ts":1585776283000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok wew","msgtype":"m.text"},"ts":1585776293000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"right, we'd need the following hooks:","msgtype":"m.text"},"ts":1585776294000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"- obj has been collected","msgtype":"m.text"},"ts":1585776294000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"- all cells have been emptied","msgtype":"m.text"},"ts":1585776294000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"- all finalizers have been called (aka no more empty cells in registries)","msgtype":"m.text"},"ts":1585776294000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"- a kept objects list has been emptied","msgtype":"m.text"},"ts":1585776294000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"https://tc39.es/proposal-weakrefs/#sec-weakref-execution","msgtype":"m.text"},"ts":1585776308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for a given set of objects S","msgtype":"m.text"},"ts":1585776318000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"clear everything related to those objects","msgtype":"m.text"},"ts":1585776324000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: yes, if finalizer is called, it means weak refs have been emptied, but it doesn't say that other finilizers for the same object has (or will ever) been run","msgtype":"m.text"},"ts":1585776362000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"Don't you just need clear kept objects promise?","msgtype":"m.text"},"ts":1585776364000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"why do you need to know whether an object is collected or not?","msgtype":"m.text"},"ts":1585776384000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"how is the agenda item spelled wrong on TCQ? I thought it was pulled in automatically","msgtype":"m.text"},"ts":1585776425000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I guess I don't see why that's useful for testing (at least in the spec tests)","msgtype":"m.text"},"ts":1585776428000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"michaelficarra: not sure but we also had Surrogate Paris yesterday","msgtype":"m.text"},"ts":1585776451000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you may not, but you need to know when the weakrefs have been emptied, and you need to know when all the finalizers related to an object have been called","msgtype":"m.text"},"ts":1585776460000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"for an engine specifically I could see why you'd want to know if it so you don't have practical bugs","msgtype":"m.text"},"ts":1585776471000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"if it has been collected*","msgtype":"m.text"},"ts":1585776496000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"that's my sadness regarding the tests","msgtype":"m.text"},"ts":1585776509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're so loose they might miss bugs in the implementations","msgtype":"m.text"},"ts":1585776521000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585776532000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"That's fair","msgtype":"m.text"},"ts":1585776536000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"You could have non-normative tests that are much stronger but I don't think those can be part of test262","msgtype":"m.text"},"ts":1585776559000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"they can be in implementation-contributed","msgtype":"m.text"},"ts":1585776567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean I just copied v8's tests and refactored them to work with JSC","msgtype":"m.text"},"ts":1585776596000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh so","msgtype":"m.text"},"ts":1585776605000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well except for the ones that required precise GC","msgtype":"m.text"},"ts":1585776610000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"if i made a cleanupSome test that always collects something...","msgtype":"m.text"},"ts":1585776611000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I really dislike the `#foo` = `this.#foo` shorthand.","msgtype":"m.text"},"ts":1585776616000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So, happy with this.","msgtype":"m.text"},"ts":1585776632000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"keith_miller: bro what if cleanupSome in fact always triggered a major gc","msgtype":"m.text"},"ts":1585776636000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Lol","msgtype":"m.text"},"ts":1585776649000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: Only if it's Sync","msgtype":"m.text"},"ts":1585776659000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"🎉","msgtype":"m.text"},"ts":1585776676000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes the only implementation allowed is naive stop-the-world mark and sweep","msgtype":"m.text"},"ts":1585776681000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"none of fil's snooty stuff here","msgtype":"m.text"},"ts":1585776689000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the only allowed implementation is engine262's where you sweep after every job","msgtype":"m.text"},"ts":1585776705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"better be precise too","msgtype":"m.text"},"ts":1585776706000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"honestly y'all might enjoy this https://github.com/engine262/engine262/blob/1493ad798f84b74d5c2cb0a249d7222320fa67f4/src/api.mjs#L47-L144","msgtype":"m.text"},"ts":1585776772000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: is it on purpose that the host hook is called for each cell in the registry instead of each registry","msgtype":"m.text"},"ts":1585776799000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what host hook?","msgtype":"m.text"},"ts":1585776819000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"HostCleanupFinalizationRegistry","msgtype":"m.text"},"ts":1585776828000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if seven cells are empty in a registry that hook is called seven times","msgtype":"m.text"},"ts":1585776840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of once","msgtype":"m.text"},"ts":1585776842000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where does it say that?","msgtype":"m.text"},"ts":1585776846000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, in Execution","msgtype":"m.text"},"ts":1585776854000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585776864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not really, other than easier to spec","msgtype":"m.text"},"ts":1585776870000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is non-observable","msgtype":"m.text"},"ts":1585776874000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1585776878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am so excited for Compartments!","msgtype":"m.text"},"ts":1585777542000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"bradleymeck can you link your slide deck when you are finished","msgtype":"m.text"},"ts":1585777554000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"compartments ftw","msgtype":"m.text"},"ts":1585777558000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm no slides","msgtype":"m.text"},"ts":1585777570000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I only see two cursors in the Note Takers area.  Do we need more help?","msgtype":"m.text"},"ts":1585777670000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"i think we are ok","msgtype":"m.text"},"ts":1585777718000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"the fact that people are already doing this in so many ad hoc ways is HUGELY comepelling","msgtype":"m.text"},"ts":1585777724000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1585777725000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"michaelficarra: +1","msgtype":"m.text"},"ts":1585777732000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: keith_miller: https://github.com/tc39/proposal-weakrefs/issues/197","msgtype":"m.text"},"ts":1585778239000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"dan had the good suggestion on making the method normative optional delegated to the host, like what we just did with the SAB constructor","msgtype":"m.text"},"ts":1585778265000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: What would be the process for requiring it? HTML would spec it?","msgtype":"m.text"},"ts":1585778424000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: requiring what?","msgtype":"m.text"},"ts":1585778444000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"requiring cleanupSome.","msgtype":"m.text"},"ts":1585778473000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Or are you saying that Safari could just not implement it?","msgtype":"m.text"},"ts":1585778484000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"on worker threads?","msgtype":"m.text"},"ts":1585778488000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"HTML would spec it","msgtype":"m.text"},"ts":1585778491000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"HTML would say, main thread doesn't have cleanupSome, web workers do","msgtype":"m.text"},"ts":1585778506000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://twitter.com/ljharb/status/1245472022697627649 asking for feedback on `#field in obj`","msgtype":"m.text"},"ts":1585778679000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is a 3rd proposal, i guess, of cleanupSome being completely normative optional, but i am against that","msgtype":"m.text"},"ts":1585778695000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this proposal is really worked, and we're talking about way-beyond-stage-1 concerns right now","msgtype":"m.text"},"ts":1585778794000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"are we planning on revisiting WeakRefs this meeting or should I check it off on the agenda?","msgtype":"m.text"},"ts":1585779474000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"shu?","msgtype":"m.text"},"ts":1585779550000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i have asked MylesBorins to revisit, i consider it very high priority to get consensus from other browsers on what we will ship","msgtype":"m.text"},"ts":1585779594000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok I think I missed that ask","msgtype":"m.text"},"ts":1585779616000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"let me look at schedule","msgtype":"m.text"},"ts":1585779619000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"akirose: bterlson: ^ just in case i'd like 15-20 mins to revisit weakrefs before end of meeting","msgtype":"m.text"},"ts":1585779627000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"today's meeting?","msgtype":"m.text"},"ts":1585779652000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"or the plenary","msgtype":"m.text"},"ts":1585779657000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"no, today or tomorrow","msgtype":"m.text"},"ts":1585779657000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"plenary","msgtype":"m.text"},"ts":1585779659000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err, not today, tomorrow","msgtype":"m.text"},"ts":1585779666000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"copy that","msgtype":"m.text"},"ts":1585779705000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"does littledan need to be present?","msgtype":"m.text"},"ts":1585779708000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"shu and I have sync'd about this and I'm good to defer to him","msgtype":"m.text"},"ts":1585779751000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(if needed)","msgtype":"m.text"},"ts":1585779754000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ok cool","msgtype":"m.text"},"ts":1585779756000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I've added it to tomorrow","msgtype":"m.text"},"ts":1585779760000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I'm signing off in 20 minutes","msgtype":"m.text"},"ts":1585779762000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"tyty","msgtype":"m.text"},"ts":1585779763000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"after the vote before stomics","msgtype":"m.text"},"ts":1585779763000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"(tomorrow I'll be here)","msgtype":"m.text"},"ts":1585779768000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah the atomics thing is bumpable","msgtype":"m.text"},"ts":1585779776000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1585779835000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"it is on the agenda","msgtype":"m.text"},"ts":1585779838000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"update in tcq + hackmd","msgtype":"m.text"},"ts":1585779841000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"well glad I asked","msgtype":"m.text"},"ts":1585779898000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"sffc's presentations are always SO easy to follow, I love it","msgtype":"m.text"},"ts":1585780080000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585780255000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Thanks :)","msgtype":"m.text"},"ts":1585780424000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"import.meta queue from yesterday:","msgtype":"m.text"},"ts":1585780902000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"New Topic: Do we need to worry about this prior to Compartments actually exposing hooks? Jordan Harband","msgtype":"m.text"},"ts":1585780902000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"New Topic: I would prefer a stronger argument to preclude hosts from doing things because we can happen to enumerate use cases today","msgtype":"m.text"},"ts":1585780902000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"that was me","msgtype":"m.text"},"ts":1585781020000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Merge now","msgtype":"m.text"},"ts":1585781343000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"mathiasbynens sffc gibson042 wsdferdksl : ready to talk some more about escape sequences?","msgtype":"m.text"},"ts":1585781498000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Gotta do it, next on the agenda seems like a good time","msgtype":"m.text"},"ts":1585781527000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"Let's go for it","msgtype":"m.text"},"ts":1585781545000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"shu: BTW, have we discussed/considered for the STDLib subgroup to allow for specs that are written in JS with the ability to call into operations?","msgtype":"m.text"},"ts":1585781672000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I guess so","msgtype":"m.text"},"ts":1585781676000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"keith_miller: i have proposed no restrictions on what proposals should be in the incubator calls","msgtype":"m.text"},"ts":1585781706000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: except that they be \"amenable to being iterated on in smaller groups\"","msgtype":"m.text"},"ts":1585781718000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Uhh, fair enough. I guess in a way this is independent of the calls","msgtype":"m.text"},"ts":1585781737000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: the scope was widened to anything that's amenable to being discussed in smaller groups, not just stdlib","msgtype":"m.text"},"ts":1585781773000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since stdlib was hard to nail down and that seemed counterproductive to the point of the calls","msgtype":"m.text"},"ts":1585781781000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I was thinking about this in the context of making API design easier to spec because you can skip most of the annoyingness of current specciness","msgtype":"m.text"},"ts":1585781800000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: fair enough","msgtype":"m.text"},"ts":1585781810000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: yeah i think that's an independent question, and can be done by example: after the first such proposal comes, it'll be a good blueprint","msgtype":"m.text"},"ts":1585781854000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"If anyone has strong feelings (or any feelings) re: including import.meta in 2020, or just general process around that pleasel mk","msgtype":"m.text"},"ts":1585781865000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"lmk","msgtype":"m.text"},"ts":1585781866000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"is daniel rosenwasser on here?","msgtype":"m.text"},"ts":1585781924000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"404","msgtype":"m.text"},"ts":1585781935000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: Yeah, true.","msgtype":"m.text"},"ts":1585781941000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":" IMO, having touched both the spec and the way JSC does self-hosted code. self-hosted is way easier to write and much clearer semantically.","msgtype":"m.text"},"ts":1585781942000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"shu: I don't think he ever has been :( I don't know why","msgtype":"m.text"},"ts":1585781958000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Not that it has to be the same way JSC does it but just as an example","msgtype":"m.text"},"ts":1585781972000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: there are counterpoints to that in V8, which has moved away from self-hosting","msgtype":"m.text"},"ts":1585781975000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I thought that was for perf?","msgtype":"m.text"},"ts":1585781986000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"nooo this was good until this slide","msgtype":"m.text"},"ts":1585781998000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"this slide must've changed just recently","msgtype":"m.text"},"ts":1585782019000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"keith_miller: it's the same argument, right? part of the perf argument is the semantics that actual JS allows you to observe","msgtype":"m.text"},"ts":1585782046000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in case you hear anything, NYC is screaming again for the health workers","msgtype":"m.text"},"ts":1585782052000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"keith_miller: though i don't know how JSC does it, if by that you mean a restricted subset...","msgtype":"m.text"},"ts":1585782064000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh, I thought it was perf because you had to parse it at runtime?","msgtype":"m.text"},"ts":1585782077000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i wasn't there for the entire discussion obviously, but i think it's just for finer control","msgtype":"m.text"},"ts":1585782102000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we do use a restricted subset, but we don't have a linter so it's tribal knowledge lol","msgtype":"m.text"},"ts":1585782112000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if i had to choose between torque and js self hosting i'd choose torque","msgtype":"m.text"},"ts":1585782116000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean it's somewhat restricted but only in that you can't use global variables","msgtype":"m.text"},"ts":1585782119000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: yeah but we avoid let/const, e.g.","msgtype":"m.text"},"ts":1585782139000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"v8 had so many perf cliffs from self hosting too","msgtype":"m.text"},"ts":1585782141000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"remember when people avoided promises because they had to allocate those js arrays","msgtype":"m.text"},"ts":1585782152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: anyway i don't think we need to get into it now, but there are plenty of historical data points against self-hosting, and speccing things via JS","msgtype":"m.text"},"ts":1585782159000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: That's just because our parser is slower at parsing let/const","msgtype":"m.text"},"ts":1585782162000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"see: LAPIs","msgtype":"m.text"},"ts":1585782162000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and the deeply problematic getOriginals","msgtype":"m.text"},"ts":1585782174000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"es4 was based on a reference implementation","msgtype":"m.text"},"ts":1585782196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"written in ocaml","msgtype":"m.text"},"ts":1585782201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: yeah true. do we have an idea for how to improve that? I know there was that one \"huge file takes forever\" ticket","msgtype":"m.text"},"ts":1585782201000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or something","msgtype":"m.text"},"ts":1585782207000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one of the MLs","msgtype":"m.text"},"ts":1585782212000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there could be a more expressive, less verbose JS-for-specs, but i wouldn't want it to be actual JS","msgtype":"m.text"},"ts":1585782214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, we just haven't done it","msgtype":"m.text"},"ts":1585782217000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1585782219000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i had an idea","msgtype":"m.text"},"ts":1585782232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of having a meta language that spec steps are written in","msgtype":"m.text"},"ts":1585782238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which renders to proseish","msgtype":"m.text"},"ts":1585782244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I also think it would be much easier for a webdev to read and understand","msgtype":"m.text"},"ts":1585782256000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"if it were JS-like","msgtype":"m.text"},"ts":1585782263000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"could point to engine262 sources","msgtype":"m.text"},"ts":1585782275000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I don't think it has to be 100% JS tbf","msgtype":"m.text"},"ts":1585782290000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: JS-like, sure, but not JS","msgtype":"m.text"},"ts":1585782295000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"tc1337: specifying the language used to specify ecmascript","msgtype":"m.text"},"ts":1585782318000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like it seems reasonable to be able to get %Object% and access internal slots, create spec-internal records that aren't actual JS objects, reify control flow, etc","msgtype":"m.text"},"ts":1585782321000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we could reify internal slots as private symbols if we had private symbols :P","msgtype":"m.text"},"ts":1585782344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't want a 3rd thing","msgtype":"m.text"},"ts":1585782354000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we have a thing right now with records","msgtype":"m.text"},"ts":1585782357000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: using https://npmjs.com/es-abstract, you can already do that :-p","msgtype":"m.text"},"ts":1585782377000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and theoretically, trivially transform that code into spec text)","msgtype":"m.text"},"ts":1585782390000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, but the point is somewhat that's not what's actually in the spec","msgtype":"m.text"},"ts":1585782419000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"which leads to things like my promise issue","msgtype":"m.text"},"ts":1585782448000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"what is your promise issue?","msgtype":"m.text"},"ts":1585782500000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://github.com/tc39/ecma262/pull/1912 (I forgot to add it to the agenda...)","msgtype":"m.text"},"ts":1585782531000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: es-abstract's abstract op names are what's actually in the spec","msgtype":"m.text"},"ts":1585782536000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: altho for IfAbruptRejectPromise and whatnot yeah, that's not easily done","msgtype":"m.text"},"ts":1585782558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the JS code that produces the spec code isn't and isn't used for updates","msgtype":"m.text"},"ts":1585782578000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"like ecmarkup?","msgtype":"m.text"},"ts":1585782605000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mpcsh I would like to ask people to not argue about symmetry at all","msgtype":"m.text"},"ts":1585782610000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless it's really important","msgtype":"m.text"},"ts":1585782621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: looks ","msgtype":"m.emote"},"ts":1585782627000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Bakkot: yep, I was too busy notetaking to remove it from the queue. gone now","msgtype":"m.text"},"ts":1585782634000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1585782638000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: yeah","msgtype":"m.text"},"ts":1585782682000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: Maybe I'm misunderstanding how es-abstract works though...","msgtype":"m.text"},"ts":1585782712000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: it's just JS implementations of abstract operations","msgtype":"m.text"},"ts":1585782731000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: but if you write a spec polyfill with it, the spec text is remarkably 1:1 to the polyfill code","msgtype":"m.text"},"ts":1585782746000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: except for a few caveat cases, which include any macros like IfAbruptRejectPromise :-/","msgtype":"m.text"},"ts":1585782761000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"engine262 only has a build step because of macros :(","msgtype":"m.text"},"ts":1585782780000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: I might not put this in the queue, but that was a fantastic short-notice presentation. THANK YOU for your thoroughness and overall demeanor.","msgtype":"m.text"},"ts":1585782784000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ljharb: Right, I'd like to see the polyfill be closer to the source JS","msgtype":"m.text"},"ts":1585782796000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1585782801000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"gibson042: +1","msgtype":"m.text"},"ts":1585782809000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"spec be closer to the polyfill","msgtype":"m.text"},"ts":1585782811000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: eg https://github.com/es-shims/Promise.prototype.finally/blob/master/implementation.js","msgtype":"m.text"},"ts":1585782828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: with this approach, i've found spec bugs in proposals","msgtype":"m.text"},"ts":1585782838000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: In which direction?","msgtype":"m.text"},"ts":1585782864000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"like you've found bugs in the current spec text when translating to JS?","msgtype":"m.text"},"ts":1585782879000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"or the other way around?","msgtype":"m.text"},"ts":1585782886000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: yes, the former","msgtype":"m.text"},"ts":1585782892000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I've found the same thing","msgtype":"m.text"},"ts":1585782915000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"there are a lot of bugs in the spec","msgtype":"m.text"},"ts":1585782924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek's approach is much more extreme, writing an entire engine in JS :-p","msgtype":"m.text"},"ts":1585782954000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585782957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh 100% I just think its easier to think about the JS source over the spec text itself","msgtype":"m.text"},"ts":1585782969000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"with our current spec language","msgtype":"m.text"},"ts":1585782980000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"so I wouldn't be opposed to allowing something a bit nicer for us and (hopefully) readers","msgtype":"m.text"},"ts":1585783012000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i'm supportive of a higher-level spec language but the observability questions need to be very clearly answered","msgtype":"m.text"},"ts":1585783141000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Yeah, I think it'd totally need to be a restricted set of JS","msgtype":"m.text"},"ts":1585783172000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"how about c","msgtype":"m.text"},"ts":1585783231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: but that's in some ways much easier to verify since we don't have to be complete in our analysis.","msgtype":"m.text"},"ts":1585783236000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"YAY everything is legal!","msgtype":"m.text"},"ts":1585783249000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"^ tc39 out of context","msgtype":"m.text"},"ts":1585783258000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the tradeoff today is, it's easy to get something like a loop condition completely wrong, but hard to get something like get Object.prototype via the global scope instead of the actual Object.prototype wrong","msgtype":"m.text"},"ts":1585783261000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't want us to shift the tradeoff to be that it's now easy to get the second kind of thing wrong","msgtype":"m.text"},"ts":1585783280000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://www.imdb.com/title/tt6110648/","msgtype":"m.text"},"ts":1585783302000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"shu: In JSC we have parsing assertions for things like that.","msgtype":"m.text"},"ts":1585783305000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"If you don't have a variable named \"Object\" in the function you'll crash in the parser","msgtype":"m.text"},"ts":1585783346000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"although we don't have something to stop you from doing %Object%.prototype","msgtype":"m.text"},"ts":1585783363000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: i'm not convinced you can do all of this with parsing linting","msgtype":"m.text"},"ts":1585783374000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But you could probably assert for that too","msgtype":"m.text"},"ts":1585783375000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"anyways, easier to comment on a concrete thing","msgtype":"m.text"},"ts":1585783385000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1585783392000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Bakkot: for clarity in the notes, was the consensus that all four cases are legal implicitly assuming that this will be included in the 2020 spec cut?","msgtype":"m.text"},"ts":1585783422000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"there's also metajs: http://int3.github.io/metajs/","msgtype":"m.text"},"ts":1585783423000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"mpcsh yes","msgtype":"m.text"},"ts":1585783434000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nice use of logical assignment 😎","msgtype":"m.text"},"ts":1585783774000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"🧙🏼‍♂️","msgtype":"m.text"},"ts":1585784025000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I kinda wish this part was recorded so I could watch again if I wanted to implement one of my proposals in engine262","msgtype":"m.text"},"ts":1585784366000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: ditto","msgtype":"m.text"},"ts":1585784411000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"jridgewell: I'm trying to fix up a stepper","msgtype":"m.text"},"ts":1585784421000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the readme also has a naive stepper impl for the debugger hook","msgtype":"m.text"},"ts":1585784445000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"new requirement: stage 4 presentations must include live-coding the second implementation","msgtype":"m.text"},"ts":1585784446000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"jridgewell: onDebugger() { debugger; } is enough","msgtype":"m.text"},"ts":1585784506000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but it isn't good at stepping (which is important)","msgtype":"m.text"},"ts":1585784517000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Where do I put onDebugger?","msgtype":"m.text"},"ts":1585784523000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: https://github.com/engine262/engine262/blob/c5285227f26ef661fc6f3723df3b44489a12a42d/test/supplemental.js#L23-L26","msgtype":"m.text"},"ts":1585784554000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but make your own agent XD","msgtype":"m.text"},"ts":1585784560000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"If I add regexp match indices to engine262, would that meet the requirement for the proposal to advance to Stage 4?","msgtype":"m.text"},"ts":1585784604000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Can we add it to the website?","msgtype":"m.text"},"ts":1585784614000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rbuckton: the actual answer is \"maybe\"","msgtype":"m.text"},"ts":1585784622000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(since I have one impl right now, waiting on a 2nd...)","msgtype":"m.text"},"ts":1585784631000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"a real stepper deals with the onNode hook, but i found i needed to also implement an exit hook not enter","msgtype":"m.text"},"ts":1585784633000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not just*","msgtype":"m.text"},"ts":1585784643000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rbuckton: what impl do you have?","msgtype":"m.text"},"ts":1585784658000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"It's implemented in V8 behind a flag and has been for several months.","msgtype":"m.text"},"ts":1585784680000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"V8 does not have an implementation we're satisfied with shipping","msgtype":"m.text"},"ts":1585784726000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i would not want that used to fulfill stage 4 advancement until we think it's in a shippable state","msgtype":"m.text"},"ts":1585784749000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jridgewell: noice","msgtype":"m.text"},"ts":1585784763000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Self hosted spec language","msgtype":"m.text"},"ts":1585784815000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"That's real bootstrapping","msgtype":"m.text"},"ts":1585784835000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rbuckton: that said please express more pressure for another engine to implement it, to see if V8's performance regressions to which we have no good answers for are also a problem in other engines","msgtype":"m.text"},"ts":1585784866000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(i know you've already called for more engines to implement)","msgtype":"m.text"},"ts":1585784885000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe its the TypeScripter in me, but it feels like Engine262 at least needs JSDoc-style comments to indicate types.","msgtype":"m.text"},"ts":1585784892000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it probably is","msgtype":"m.text"},"ts":1585784901000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well done devsnek 👏","msgtype":"m.text"},"ts":1585785520000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1585785541000,"senderName":"devsnek","senderId":"devsnek@irc"}
]