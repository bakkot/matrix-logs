[
{"content":{"body":"The Jitsi room is open. Let me know if you have trouble joining or any other technical issues","msgtype":"m.text"},"ts":1615397995000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"were we not continuing the Temporal topic today?","msgtype":"m.text"},"ts":1615399214000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"looks like it's on the draft schedule for after lunch","msgtype":"m.text"},"ts":1615399293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(due to schedule constraints requiring some of these things being in the morning)","msgtype":"m.text"},"ts":1615399305000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1615399342000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"+1 on being explicit, precedence is the devil when working in new spaces like this","msgtype":"m.text"},"ts":1615400034000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didn't realise this proposal would integrate with sequence properties like this","msgtype":"m.text"},"ts":1615400318000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"it seems really hazardous","msgtype":"m.text"},"ts":1615400322000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Oooh I was hoping that someone would propose \"Just add a gd parser proposal\", nice","msgtype":"m.text"},"ts":1615400375000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm behind a built-in parser-combinator library, even if it's just regex equivalent right now","msgtype":"m.text"},"ts":1615400400000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it's not like parser combinator libraries are big, you can just ship one","msgtype":"m.text"},"ts":1615400583000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Of course, but regexes are built in. If we want to ensure people have the same power, without forever extending regexes to ever more intricate syntax, we need to match the built-in-ness.","msgtype":"m.text"},"ts":1615400640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, right on this topic - union/intersection/etc is very easy to apply in a parser combinator, but we're adding it to regex bc that's what we have in the language.","msgtype":"m.text"},"ts":1615400701000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I have a lot more regexp syntax features I plan to propose in the future, all based on prior art in other languages and have been putting together a comprehensive comparison between all major regexp engines.","msgtype":"m.text"},"ts":1615400907000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"someone fill out the header in the notes please?","msgtype":"m.text"},"ts":1615401129000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb Bakkot thanks! Somehow I thought we should be assigning reviewers as well.","msgtype":"m.text"},"ts":1615401586000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"Error causes is speedrunning proposal advancement :D","msgtype":"m.text"},"ts":1615401589000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"mmarchini:","msgtype":"m.text"},"ts":1615401596000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1615401598000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: at this point the only reviewers are test262 maintainers and 262 editors :-)","msgtype":"m.text"},"ts":1615401606000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"mmarchini: I saw things going so much faster this seems a okay pacing","msgtype":"m.text"},"ts":1615401625000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"Yeah that's the first proposal I saw reach stage 3 on the third meeting","msgtype":"m.text"},"ts":1615401674000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"But wouldn't be surprised by faster ones","msgtype":"m.text"},"ts":1615401692000,"senderName":"mmarchini","senderId":"mmarchini@irc"},
{"content":{"body":"omigod this is such a better name","msgtype":"m.text"},"ts":1615401702000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jridgewell: oof, how does amp depend on that?","msgtype":"m.text"},"ts":1615401783000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Part of amp-script exports blessed functions on a global","msgtype":"m.text"},"ts":1615401804000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Doing something like `exports[fn.name] = fn`","msgtype":"m.text"},"ts":1615401814000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"and amp-script is deployed on user-controlled sites?","msgtype":"m.text"},"ts":1615401860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1615401894000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"bummer, ok","msgtype":"m.text"},"ts":1615401907000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We could update, but it's just the web compat risk is real","msgtype":"m.text"},"ts":1615401909000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1615401924000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems ideal for amp-scripts to update to not rely on function names in general, but doesn't remove the compat risk.","msgtype":"m.text"},"ts":1615401941000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I definitely read \"race\" to be \"scary\"","msgtype":"m.text"},"ts":1615402408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I know not everyone does","msgtype":"m.text"},"ts":1615402411000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I sure do","msgtype":"m.text"},"ts":1615402413000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agree","msgtype":"m.text"},"ts":1615402419000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or if not \"scary\" it's at least an \"eff it, who cares what happens\" vibe","msgtype":"m.text"},"ts":1615402472000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"to me \"any\" gives that vibe","msgtype":"m.text"},"ts":1615402535000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do we have an acronym for this presenter?","msgtype":"m.text"},"ts":1615402542000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone has written \"WWG\" so I assume that's right","msgtype":"m.text"},"ts":1615402590000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: we don't, so we should ask them to add an entry to delegates.txt at the end of the topic","msgtype":"m.text"},"ts":1615402673000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I have done so","msgtype":"m.text"},"ts":1615402680000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"WWG is someone else I think, fwiw :(","msgtype":"m.text"},"ts":1615402687000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"should be WWL as his name","msgtype":"m.text"},"ts":1615402706000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"https://github.com/tc39/notes/pull/97","msgtype":"m.text"},"ts":1615402725000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"remember to assign reviewers!","msgtype":"m.text"},"ts":1615402794000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: it's KWL in case you missed this :-D","msgtype":"m.text"},"ts":1615402817000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"is Wenlu or Daniel R. in this channel? I tried many times to volunteer as a reviewer, but I was double muted","msgtype":"m.text"},"ts":1615402953000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: i don't think either is, but i think maybe robpalme could interject briefly to add you as a reviewer after this presentation?","msgtype":"m.text"},"ts":1615402991000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1615403018000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"robpalme: leobalter: I've let wenlu know you cna review","msgtype":"m.text"},"ts":1615403054000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"(i think it still needs to be in plenary notes tho)","msgtype":"m.text"},"ts":1615403078000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I'll reach them through the proposal repo","msgtype":"m.text"},"ts":1615403143000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"bterlson: thanks!","msgtype":"m.text"},"ts":1615403147000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ljharb: I can do it informally, unless we need 3 reviewers","msgtype":"m.text"},"ts":1615403176000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: we prefer to have 2 non-editor reviewers, so it is welcome","msgtype":"m.text"},"ts":1615403603000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Jordan and Yulia are already assigned, I'd be the 3rd one.","msgtype":"m.text"},"ts":1615403659000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oof, reading the length as a way to explicitly synchronise?","msgtype":"m.text"},"ts":1615403876000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"there must be a better way to communicate that intent","msgtype":"m.text"},"ts":1615403981000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yay pipeline!","msgtype":"m.text"},"ts":1615406379000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"gotta run an errand. I expect to be back in time but if not I've set the bot to start itself up again in 30 minutes","msgtype":"m.text"},"ts":1615407518000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok back we're good","msgtype":"m.text"},"ts":1615409648000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"These slides are great","msgtype":"m.text"},"ts":1615411040000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"well I wish the colours for the different execution orders weren't basically identical","msgtype":"m.text"},"ts":1615411249000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"It's a breadth-first upwards traversal","msgtype":"m.text"},"ts":1615411441000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"what was shu saying? \"a serial\"?","msgtype":"m.text"},"ts":1615411541000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"/shrug","msgtype":"m.emote"},"ts":1615411558000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"a serial, yes","msgtype":"m.text"},"ts":1615411594000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like a monotonic increasing number","msgtype":"m.text"},"ts":1615411601000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Is this any more difficult than changing a depth-first to a breadth-first?","msgtype":"m.text"},"ts":1615411690000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: yes","msgtype":"m.text"},"ts":1615411983000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"How so?","msgtype":"m.text"},"ts":1615412084000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: i might've misread your question, now i no longer know","msgtype":"m.text"},"ts":1615412125000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"maybe after this preso","msgtype":"m.text"},"ts":1615412132000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1615412141000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://usercontent.irccloud-cdn.com/file/iqZfwHob/queue.png","msgtype":"m.text"},"ts":1615412435000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"^^ saved temporal queue","msgtype":"m.text"},"ts":1615412444000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"btw the slides were prepared based on the old queue already","msgtype":"m.text"},"ts":1615412646000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: objection to going through the replies to make sure the questions are answered?","msgtype":"m.text"},"ts":1615412726000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"no, no objection","msgtype":"m.text"},"ts":1615412744000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so noted :-D","msgtype":"m.text"},"ts":1615412877000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"I just realized there's two temporal champions speaking","msgtype":"m.text"},"ts":1615412964000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't know which they are","msgtype":"m.text"},"ts":1615412966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I've been attributring everything to PFC in the notes","msgtype":"m.text"},"ts":1615412972000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if someone knows who the speakers are please help fix up the notes","msgtype":"m.text"},"ts":1615412987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"phillip dunkel and phillip chimento","msgtype":"m.text"},"ts":1615413100000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the one who just talked to mark is dunkel","msgtype":"m.text"},"ts":1615413109000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh jeeze there's two phillips","msgtype":"m.text"},"ts":1615413123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which one is now?","msgtype":"m.text"},"ts":1615413130000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"philip chimento is the main speaker","msgtype":"m.text"},"ts":1615413146000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"within the champion group, they can be differentiated by ptomato vs pdunkel, or alternatively, Philip vs Philipp","msgtype":"m.text"},"ts":1615413177000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"definitely agree with haxjs that the original naming issue should've been bumped","msgtype":"m.text"},"ts":1615414510000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not the end of the world, it's hard to keep track of these things, just something for people to try to be aware of in the future","msgtype":"m.text"},"ts":1615414528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's what i heard as well; not really about twitter, but about notification of changes","msgtype":"m.text"},"ts":1615414534000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, it make me too late to back to the discussion.","msgtype":"m.text"},"ts":1615414562000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"and tbh it's tough to follow the entire repo when the majority of the activity isn't directly related to the spec","msgtype":"m.text"},"ts":1615414568000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Another point is the poll sample is too small, if we want to do poll to get some data, we need a guide to make sure we do the poll in right way. not like that.","msgtype":"m.text"},"ts":1615414659000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"FYI: \"Hack\" style refers to the Hack programming language: https://docs.hhvm.com/hack/expressions-and-operators/pipe","msgtype":"m.text"},"ts":1615415115000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"\"Tab's Essay\" is https://gist.github.com/tabatkins/1261b108b9e6cdab5ad5df4b8021bcb5","msgtype":"m.text"},"ts":1615415119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wish \"hack style\" were called \"topic variable\" instead","msgtype":"m.text"},"ts":1615415202000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"too late now ofc","msgtype":"m.text"},"ts":1615415225000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"topic style\"","msgtype":"m.text"},"ts":1615415228000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Most fp guys  (i mean who use lodash/fp or ramda or similar libs) i know prefer F# style much than topic style...","msgtype":"m.text"},"ts":1615415265000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: Well obviously ^_^","msgtype":"m.text"},"ts":1615415325000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But guys who not heavy fp guys sightly prefer topic style --- this is what i found.","msgtype":"m.text"},"ts":1615415332000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Bakkot: I pushed for the \"Lang-style\" naming to avoid the value judgement of \"minimal proposal\"","msgtype":"m.text"},"ts":1615415347000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i believe most JS users are not \"heavy FP users\"","msgtype":"m.text"},"ts":1615415353000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"version that explicitly privileges higher-order programming over all other syntax\" is popular with people who like using higher-order programming heavily, news at 11. ^_^","msgtype":"m.text"},"ts":1615415392000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I am still very bullish on partial application and its value with or without pipeline.","msgtype":"m.text"},"ts":1615415401000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"moreover \"heavy FP users\" is not the same thing as \"heavy users of FP within JS\"","msgtype":"m.text"},"ts":1615415433000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Would you need to await all the rest of the operands of |>?","msgtype":"m.text"},"ts":1615415453000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"nope, no more than you'd need to await all following statements in normal code flow","msgtype":"m.text"},"ts":1615415471000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We have another choice, let avg user use extensions like `x :: extMethod()` and let heavy fp users use F# style pipeline op. Both will happy.","msgtype":"m.text"},"ts":1615415471000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"The :: as this-piping operator is even worse :(","msgtype":"m.text"},"ts":1615415499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"haxjs: average user use is more likely to be in between those - not heavy FP, but also not this-using","msgtype":"m.text"},"ts":1615415501000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"What does x |> await do?","msgtype":"m.text"},"ts":1615415510000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"for what its worth, `(await (x |> f)) |> g` is no less complex than `(await x.f()).g()`","msgtype":"m.text"},"ts":1615415517000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"wsdferdksl: it's a special form that awaits the input and passes it to the output","msgtype":"m.text"},"ts":1615415537000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"wsdferdksl: same as `await x`?","msgtype":"m.text"},"ts":1615415547000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ljharb: extensions is designed to make avg user not worry about `this` anymore.","msgtype":"m.text"},"ts":1615415552000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"`x |> f |> await |> g` is equivalent to `(await (x |> f)) |> g`","msgtype":"m.text"},"ts":1615415575000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"With `x |> await |> y` being `y(await x)`","msgtype":"m.text"},"ts":1615415575000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"haxjs: right; there's an open issue where we're discussing that, and it is very much not clear that there's consensus on the motivation for that","msgtype":"m.text"},"ts":1615415606000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: iow, the original bind operator was about being able to easily use this-sensitive functions in a chain without installing properties, which doesn't obviate the need to know how `this` works","msgtype":"m.text"},"ts":1615415640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I've always argued F# pipes are fairly simple `x |> F` is essentially `F(x)`, and that partial application dovetails into that well.","msgtype":"m.text"},"ts":1615415677000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it's not possible to \"omit placeholders initially\" though...?","msgtype":"m.text"},"ts":1615415677000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: in the F# one i think it is","msgtype":"m.text"},"ts":1615415694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: but not in hack, obv","msgtype":"m.text"},"ts":1615415699000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"placeholders are the more basic proposal though I mean","msgtype":"m.text"},"ts":1615415700000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: yeah, the original bind op still need user know too much about `this`. So I try to find some way to solve that in extensions proposal.","msgtype":"m.text"},"ts":1615415711000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"F# without placeholders would block hack-style.","msgtype":"m.text"},"ts":1615415717000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"s/F#/F#-style","msgtype":"m.text"},"ts":1615415731000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"haxjs: right, but that's not something i consider a problem (and thus not something to be solved), but i have a strong need to be able to chain methods on a receiver without having them present on the object :-)","msgtype":"m.text"},"ts":1615415749000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton how so?","msgtype":"m.text"},"ts":1615415765000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton assuming hack-style has a requirement that `?` appears on the RHS","msgtype":"m.text"},"ts":1615415774000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"To avoid easily mistakes, Hack-style requires a placeholder, yeah.","msgtype":"m.text"},"ts":1615415785000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh no robot","msgtype":"m.text"},"ts":1615415813000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: IIRC, hack-style doesn't support point-free? That's where \"smart mix\" came from","msgtype":"m.text"},"ts":1615415816000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton right","msgtype":"m.text"},"ts":1615415832000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so it doesn't overlap with F# without placeholders, right?","msgtype":"m.text"},"ts":1615415856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"If this feature will ever move forward, we need to pick one direction.","msgtype":"m.text"},"ts":1615415867000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh, sure","msgtype":"m.text"},"ts":1615415874000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I thought you meant that it was technically impossible, not that it was a bad idea","msgtype":"m.text"},"ts":1615415886000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I'm not sure what you mean about it doesn't overlap.","msgtype":"m.text"},"ts":1615415889000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: yes, extensions also can achieve that. The only point here is extensions is optimized more for oo-style (like lodash) and pipeline op is (i hope) optimized more for fp-style (like lodash/fp).","msgtype":"m.text"},"ts":1615415900000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"rbuckton: like, technically, you can disambiguate them, yes?","msgtype":"m.text"},"ts":1615415909000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not \"is it a good idea to have both\", just, technically I don't see a problem disambiguating","msgtype":"m.text"},"ts":1615415926000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"haxjs: most of the use cases i have or have seen in codebases for pipeline aren't point-free (ie, the FP unary function style)","msgtype":"m.text"},"ts":1615415937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"can you use the placeholder more than once in the RHS?","msgtype":"m.text"},"ts":1615415953000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"F# actually allows multiple arguments in pipes, but we didn't propose that yet.","msgtype":"m.text"},"ts":1615415956000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(if ever)","msgtype":"m.text"},"ts":1615415965000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"michaelficarra: in Hack or in partial application?","msgtype":"m.text"},"ts":1615415982000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"michaelficarra: sure, 'cause you're never subbing two different things","msgtype":"m.text"},"ts":1615415984000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in Hack","msgtype":"m.text"},"ts":1615416029000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: point-free style guys bascily use a very special libs like ramda so  how common u see such code depend on whether u are a ramda or lodash/fp fans :)","msgtype":"m.text"},"ts":1615416048000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: right - i'm saying i don't find \"usage of ramda or lodash/fp\" very common","msgtype":"m.text"},"ts":1615416066000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: obv that's just my personal experience","msgtype":"m.text"},"ts":1615416074000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I echo the confusion that Tab is expressing","msgtype":"m.text"},"ts":1615416078000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: But I feel many strong supporters of pipeline op  are coming from that world.","msgtype":"m.text"},"ts":1615416134000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I don't see how it can possibly be argued that F# is simpler","msgtype":"m.text"},"ts":1615416191000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"regardless of which you prefer","msgtype":"m.text"},"ts":1615416196000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"To me, \"Hack-style\" doesn't add any new capability to the language we don't already have, which decreases its motivation to me.","msgtype":"m.text"},"ts":1615416200000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: neither does partial application","msgtype":"m.text"},"ts":1615416220000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: F#-style doesn't either. They're both identical in terms of expressiveness.","msgtype":"m.text"},"ts":1615416223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"literally 100% identical (so long as `await` is handled by F#)","msgtype":"m.text"},"ts":1615416234000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and yield)","msgtype":"m.text"},"ts":1615416242000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I've already shown you can do \"Hack-style\" in JS today with `,`. I like F# because it adds something new.","msgtype":"m.text"},"ts":1615416252000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(again, I meant F#-style)","msgtype":"m.text"},"ts":1615416265000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: only with intermediate variables","msgtype":"m.text"},"ts":1615416267000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: or am i missing something","msgtype":"m.text"},"ts":1615416276000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It's not about expressiveness, it's about developer experiences...","msgtype":"m.text"},"ts":1615416279000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"these are all just sugar","msgtype":"m.text"},"ts":1615416288000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: also because of the declaration, it can't be done in one line","msgtype":"m.text"},"ts":1615416288000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I disagree that partial application doesn't add anything new. We have `.bind` and arrow functions, but `.bind` only supports leading arguments, and arrow functions defer evaluation.","msgtype":"m.text"},"ts":1615416375000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`add(?, x())` returns a function where the result of `x()` has already been evaluated and bound to an argument. Doing that today requires a lot more boilerplate.","msgtype":"m.text"},"ts":1615416416000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: yet it's capable today, thus, it's not a new ability, it's just sugar.","msgtype":"m.text"},"ts":1615416429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: i'm not arguing against partial application, i'm arguing against \"not a new capability\" as making a syntactic proposal less useful or important.","msgtype":"m.text"},"ts":1615416450000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(inherently)","msgtype":"m.text"},"ts":1615416453000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Seen many LINQ in JS approaches. It's more than just threading fwiw, you often want to assemble some kind of query plan that can be send wholesale to the database to execute.","msgtype":"m.text"},"ts":1615416678000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"bterlson: yeah, i find it compelling, especially the \"it's only a burden to have to think about what to name the subparts of the query\"","msgtype":"m.text"},"ts":1615416750000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the query is somehow this indivisible thing mentally","msgtype":"m.text"},"ts":1615416761000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"a big part of this story fwiw is how to send simple predicates to the server","msgtype":"m.text"},"ts":1615416777000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"that is maybe a key capability we should investigate","msgtype":"m.text"},"ts":1615416784000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"what's meant by \"send simple predicates to the server?\"","msgtype":"m.text"},"ts":1615416796000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so I see linq-like syntaxes like","msgtype":"m.text"},"ts":1615416819000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"query.select(\"x, y\").where(\"x > 10\")","msgtype":"m.text"},"ts":1615416838000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"the problem they are trying to solve here is to let the server handle any projection and filtering so you don't send way more data to clients than you need","msgtype":"m.text"},"ts":1615416894000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"that was mark's whole project with the deferred send thing, or whatever it was called","msgtype":"m.text"},"ts":1615416894000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"C#'s LINQ relies on type information, where if you pass an arrow function to an argument expecting a specific type, the compiler returns an \"Expression Tree\" which is a simplified AST representation of the arrow function that can be converted into, say, a SQL WHERE clause.","msgtype":"m.text"},"ts":1615416904000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah LINQ is something totally else","msgtype":"m.text"},"ts":1615416906000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the implementation certainly is a different beast, but isn't that usage pattern generally what you want to enable?","msgtype":"m.text"},"ts":1615416963000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bterlson: i see, thanks","msgtype":"m.text"},"ts":1615416967000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't even know what LINQ's usage pattern really is.","msgtype":"m.text"},"ts":1615416991000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm always concerned that introducing topic variables introduces scoping complexity.","msgtype":"m.text"},"ts":1615416995000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"TabAtkins: essentially generator comprehensions","msgtype":"m.text"},"ts":1615417005000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I just want linear code flow, like what method chaining gives me.","msgtype":"m.text"},"ts":1615417021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: my very surface understanding is that it's the database query equivalent of parser combinators, kinda","msgtype":"m.text"},"ts":1615417021000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"a topic variable does mean that one pipeline nested into another is tricky","msgtype":"m.text"},"ts":1615417023000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"using `FLWOR`-like syntax.","msgtype":"m.text"},"ts":1615417028000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Yeah, nesting pipelines is a \"don't do that\" sort of thing honestly","msgtype":"m.text"},"ts":1615417040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"doctor it hurts when I do this\"","msgtype":"m.text"},"ts":1615417049000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the answer used to be \"don't do this\"","msgtype":"m.text"},"ts":1615417059000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the answer now sometimes is \"you have gotten older\" :((","msgtype":"m.text"},"ts":1615417066000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: too real","msgtype":"m.text"},"ts":1615417090000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"let result =","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  from x in ar","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  where x.foo > 1","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  orderby x.bar ascending","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  select x.baz;","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615417092000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"\"as a language gets older, it starts getting painpoints in places that used to be fine\"","msgtype":"m.text"},"ts":1615417096000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1615417103000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ohno","msgtype":"m.text"},"ts":1615417105000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean I want to say it's as simple as \"if your expression requires parens, you should be breaking it up\" but","msgtype":"m.text"},"ts":1615417142000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I know that it's easy to find counterexamples","msgtype":"m.text"},"ts":1615417151000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"So many Justins now.","msgtype":"m.text"},"ts":1615417178000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"rbuckton: Don't forget the `limit 100`.","msgtype":"m.text"},"ts":1615417181000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: i once forgot to limit 10000 or on https://httparchive.org/ query, ran up a several hundred dollar gcp bill :(","msgtype":"m.text"},"ts":1615417236000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"luckily it was free as a googler, but still","msgtype":"m.text"},"ts":1615417243000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bterlson: Do you know if the 2021 opt out period has started?","msgtype":"m.text"},"ts":1615417270000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"msaboff: it has","msgtype":"m.text"},"ts":1615417281000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"msaboff: theoretically it began yesterday","msgtype":"m.text"},"ts":1615417282000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"For how long?","msgtype":"m.text"},"ts":1615417297000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"istvan said today or yesterday right","msgtype":"m.text"},"ts":1615417298000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"We need published ECMA documents for the opt-out period","msgtype":"m.text"},"ts":1615417303000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"right, pending that","msgtype":"m.text"},"ts":1615417310000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"msaboff: 2 months i believe","msgtype":"m.text"},"ts":1615417315000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"msaboff: ends May 10","msgtype":"m.text"},"ts":1615417321000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"When do we think the ECMA documents will be published?","msgtype":"m.text"},"ts":1615417335000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"June 22 is the GA date","msgtype":"m.text"},"ts":1615417346000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"they said they were published today","msgtype":"m.text"},"ts":1615417349000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the opt-out ones, anyway","msgtype":"m.text"},"ts":1615417355000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1615417362000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"I am still always *so curious* what people mean when they say Hack-style looks more implicit. What magic are y'all thinking is happening?","msgtype":"m.text"},"ts":1615417366000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm fully over in the \"too knowledgeable to understand first-learners\" camp now unfortunately.","msgtype":"m.text"},"ts":1615417393000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, \"explicit\" is the definition of what Hack-style is","msgtype":"m.text"},"ts":1615417395000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"littledan: FYI, I disagree with the con regarding \"garden path\" to partial application. While it was brought up by Waldemar when I initially proposed the feature, I've presented on how that concern isn't new to the language given destructuring.","msgtype":"m.text"},"ts":1615417497000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"msaboff: just making sure, did istvan answer your questions re: opt-out? If it helps the ECMA document number is Ecma/TC39/2021/012.","msgtype":"m.text"},"ts":1615417660000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"Yep.  Thanks","msgtype":"m.text"},"ts":1615417685000,"senderName":"msaboff","senderId":"msaboff@irc"},
{"content":{"body":"rbuckton: Hm, how is destructuring an example of it already existing?","msgtype":"m.text"},"ts":1615417840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The \"garden path\" concern was that, without some kind of leading syntax a user wouldn't know whether a call expression was an invocation or a partial application until they see the `?`, which could be arbitrarily far down the argument list. The same is true for existing language features such as array destructuring:","msgtype":"m.text"},"ts":1615418125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615418125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"[a, b, c, d, e, ...f] = g","msgtype":"m.text"},"ts":1615418125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615418125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"The above looks like an array until you reach the `=`.","msgtype":"m.text"},"ts":1615418125000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"As well as arrow functions: `(a, b, c = d) => e` could just be a comma list until you get to the `=>`.","msgtype":"m.text"},"ts":1615418169000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"good example, but there is a little difference. destructuring normally start with `const` / `let`.","msgtype":"m.text"},"ts":1615418182000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Its not a new issue, and wasn't blocking for arrow functions or destructuring.","msgtype":"m.text"},"ts":1615418185000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: I mean, *technically* yes, but in practice starting a line with an array or object literal is a *very* strange thing to do.","msgtype":"m.text"},"ts":1615418228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So in practice it's not a garden path at all, you just always assume that a line-starting `[` or `{` means destructuring is happening","msgtype":"m.text"},"ts":1615418252000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tab, true, but `a = [b, c, d] = e` is also legal javascript.","msgtype":"m.text"},"ts":1615418262000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"And arrow function normally in the position of expression, so people can recognize it in the first place.","msgtype":"m.text"},"ts":1615418263000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"rbuckton: It's not quite the same thing.","msgtype":"m.text"},"ts":1615418264000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Again, legal, but *weird*","msgtype":"m.text"},"ts":1615418270000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like, nobody writes that ^^_","msgtype":"m.text"},"ts":1615418284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So they do not have garden path issue in practice, at least in most cases.","msgtype":"m.text"},"ts":1615418298000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"If you could write [a + b, f(x)*g(y) + 17, \"foo\", d+e] = g and have it change the meaning of subexpressions, it would be worse","msgtype":"m.text"},"ts":1615418309000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: My point is that `?` doesn't change the fact that `f(?)` still returns a value like a call expression would, while `[a, b, c] = d` completely changes the meaning. Also, `f(?, g())` still eagerly calls `g()`.","msgtype":"m.text"},"ts":1615418354000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"And that's my beef with the garden path variants of the proposal.","msgtype":"m.text"},"ts":1615418368000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"Note I don't think garden path issue is very serious, just want to clarify.","msgtype":"m.text"},"ts":1615418371000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"rbuckton: There would be pressure from folks to write things like f(g(), ? + 3).","msgtype":"m.text"},"ts":1615418463000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"What gets evaluated when gets messy really fast","msgtype":"m.text"},"ts":1615418490000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"wsdferdksl: I'm aware, which is why some prefer the \"Hack-style\" for pipelines","msgtype":"m.text"},"ts":1615418501000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Isn't that a syntax error?","msgtype":"m.text"},"ts":1615418503000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: Everything we're discussing is currently a syntax error","msgtype":"m.text"},"ts":1615418532000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"I mean it 's a syntax in partial app proposal","msgtype":"m.text"},"ts":1615418548000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"But I'm extrapolating to what folks would demand","msgtype":"m.text"},"ts":1615418549000,"senderName":"wsdferdksl","senderId":"wsdferdksl@irc"},
{"content":{"body":"For partial application, I've kept the proposal's scope intentionally limited.","msgtype":"m.text"},"ts":1615418549000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I don't want `?` to just mean an arbitrary function is created. Its always an argument placeholder.","msgtype":"m.text"},"ts":1615418583000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"My only misuse worry about partial application is someone may write code `f(?, a, b(?))` which expect the semantic like in hack-style. I worry about that much than garden path issue.","msgtype":"m.text"},"ts":1615418707000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I know there are some that have argued that they would want `f({ x: ? })` because object literals/destructuring is essentially the JS version of \"named arguments\", but I'm still opposed to that. I'd much rather see us invent an *actual* named arguments capability instead, but I'm not going to push hard for it.","msgtype":"m.text"},"ts":1615418721000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Yeah either of those are why I'm against partial-application. :( `foo(?+1)` is invalid, `foo(1, bar(?))` isn't what you expected, `foo({x:?})` is invalid... it's so so limited and/or confusing in practice","msgtype":"m.text"},"ts":1615418929000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My proposal for partial application was to *just* support partial application. the `?` isn't a value, its an unsatisfied argument position. The \"partial application\" is actually everything *except* `?` bit.","msgtype":"m.text"},"ts":1615418932000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Yeah, I just don't think that pulls its weight given the mines it leaves around itself. I understand that the early-vs-late evaluation differences in `x=>foo(x, expensive())` vs `foo(?, expensive())`, but I feel like that's a footgun all its own honestly.","msgtype":"m.text"},"ts":1615419457000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Plus, partial application has other capabilities in its problem-space. If you want `f({ x: ?})` you can still do that with an arrow. Partial application covers other use cases:","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// getting only the arguments you expect","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"[1].forEach(console.log); // oops, logs: 1, 0, 1 (or [1] depending on your runtime...)","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"[1].forEach(console.log(?)); // logs: 1","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// swap argument order","msgtype":"m.text"},"ts":1615419490000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const f_swapped = f(?1, ?0);","msgtype":"m.text"},"ts":1615419491000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// simplified references","msgtype":"m.text"},"ts":1615419492000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"element.addEventListener(\"click\", this.onClick(?));","msgtype":"m.text"},"ts":1615419492000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// More powerful than .bind","msgtype":"m.text"},"ts":1615419493000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const g = foo(?, 1, 2, ?); // bind only binds leading arguments, but here you can bind middle arguments","msgtype":"m.text"},"ts":1615419494000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615419494000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(honestly not sure if that code sample went through, freenode just spat a bunch of errors at me)","msgtype":"m.text"},"ts":1615419530000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i see it","msgtype":"m.text"},"ts":1615419543000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: its the same mental model as `foo.bind(void 0, expensive())` except you have more control over unbound arguments.","msgtype":"m.text"},"ts":1615419564000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Yeah I get that, but I don't think \"it's just like `.bind()`\" is a very compelling argument for understandability ^_^","msgtype":"m.text"},"ts":1615420093000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What I know is that I want pipeline in some form. We would *heavily* use it in the TypeScript codebase at the very least. I also want partial application in some form, because there are so many cases of callback passing that could be simplified using it. I like the F#-style pipeline because (while in some ways limited compared to the Hack-style), it reduces the burden of knowledge for what operator to use where","msgtype":"m.text"},"ts":1615420098000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Ah ok, let me pick your brain about that last statement - what's the burden of knowledge you see wrt that in Hack.","msgtype":"m.text"},"ts":1615420331000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If I know that ` x |> F` is just `F(x)`, and that `F(?)` is basically `_ => F(_)`, using the two together is fairly simple and extremely powerful. I don't have to think about \"partial application uses ?\" while pipeline uses `#`\", or \"I can't use partial application in a pipeline because the meaning of `?` changes\". If the arrow restriction goes the way littledan proposed, a lot of the Hack-style pipes can be","msgtype":"m.text"},"ts":1615420349000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"done with arrows:","msgtype":"m.text"},"ts":1615420349000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420349000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"x |> say(?)","msgtype":"m.text"},"ts":1615420349000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  |> _ => _ + _","msgtype":"m.text"},"ts":1615420350000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  |> _ => ({ x: _ })","msgtype":"m.text"},"ts":1615420350000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  |> _ => [_]","msgtype":"m.text"},"ts":1615420351000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"  |> nameMyTopicWhatIWant => (y |> f(?, nameMyTopicWhatIWant))","msgtype":"m.text"},"ts":1615420351000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420352000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"TabAtkins: I'm talking about a scenario where we might have Hack-style pipelines *and* partial application. You either use different symbols for each (the topic or the placeholder), or you have confusing restrictions on where you can use the same symbol.","msgtype":"m.text"},"ts":1615420454000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Ohhh okay.","msgtype":"m.text"},"ts":1615420471000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Plus Hack-style pipes have issues with multiple topics.","msgtype":"m.text"},"ts":1615420481000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Are you referring to nested pipelines?","msgtype":"m.text"},"ts":1615420515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think that could be argued as a feature, if it makes something we don't advise doing less easy","msgtype":"m.text"},"ts":1615420553000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420557000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"# using hack-style","msgtype":"m.text"},"ts":1615420557000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"x |> f(?, y |> g(?, ?)) // but I want the outer `?` in one of these...","msgtype":"m.text"},"ts":1615420557000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```\\","msgtype":"m.text"},"ts":1615420558000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh in param position, hmm","msgtype":"m.text"},"ts":1615420578000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think it's probably better if pipeline and partial had different placeholders anyways","msgtype":"m.text"},"ts":1615420609000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"So yeah, nested pipelines.","msgtype":"m.text"},"ts":1615420616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"for the above, you would need to have a way to declare the name of your topic, so you end up with:","msgtype":"m.text"},"ts":1615420624000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420624000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"x |> (_ => f(_, y |> g(?, _))(?)","msgtype":"m.text"},"ts":1615420624000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420624000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"At that point you should be breaking the expression apart and using variables.","msgtype":"m.text"},"ts":1615420625000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or use an iife, yeah, but I think that's not worth the syntax cost.","msgtype":"m.text"},"ts":1615420645000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Whenever I see `|> ? + 1` in a Hack-style pipe I think the same thing.","msgtype":"m.text"},"ts":1615420659000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"You think \"add 1 to this value\" is worth breaking the xpression apart? Or just not worth the syntax?","msgtype":"m.text"},"ts":1615420686000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, its true that F#+papp doesn't solve this either, but it makes the arrow-function part easier:","msgtype":"m.text"},"ts":1615420737000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420737000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"// F#+papp","msgtype":"m.text"},"ts":1615420737000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"x |> _ => f(_, y |> g(?, _))","msgtype":"m.text"},"ts":1615420737000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1615420737000,"senderName":"rbuckton","senderId":"rbuckton@irc"}
]