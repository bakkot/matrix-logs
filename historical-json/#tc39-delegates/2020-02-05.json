[
{"content":{"body":"channel logging requested by akirose: https://freenode.logbot.info/tc39-delegates","msgtype":"m.text"},"ts":1580865703000,"senderName":"globbot","senderId":"globbot@irc"},
{"content":{"body":"globbot is back?","msgtype":"m.text"},"ts":1580866632000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"PogChamp it's working! https://freenode.logbot.info/tc39-delegates","msgtype":"m.text"},"ts":1580866652000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"haxjs: prior art is important like that üòÖ","msgtype":"m.text"},"ts":1580866656000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test","msgtype":"m.text"},"ts":1580866669000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its fast","msgtype":"m.text"},"ts":1580866673000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"üôãüèª‚Äç‚ôÄÔ∏è hi friends okay i sketched out the schedule in pencil https://hackmd.io/@aki/rJFTzg8MI","msgtype":"m.text"},"ts":1580866700000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"haxjs: i tried to put you in your morning but should move you to end of day wednesday?","msgtype":"m.text"},"ts":1580866753000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"rkirsling yeah,many people tell, all good part in js is copied from other langs, and all things js itself invented are bad part. ü§£","msgtype":"m.text"},"ts":1580866758000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"psh","msgtype":"m.text"},"ts":1580866777000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"most of the bad parts are also copied from other languages, to be fair","msgtype":"m.text"},"ts":1580866808000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*cough Date cough*","msgtype":"m.text"},"ts":1580866813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"akirose: yayyyy for draft schedule :)","msgtype":"m.text"},"ts":1580866827000,"senderName":"decompiled","senderId":"decompiled@irc"},
{"content":{"body":"*cough RegExp cough*","msgtype":"m.text"},"ts":1580866829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"most of the worst parts come from Java imo","msgtype":"m.text"},"ts":1580866830000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"switch cough null cough Number cough","msgtype":"m.text"},"ts":1580866832000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*cough statements*","msgtype":"m.text"},"ts":1580866852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah! like \"var\", it seems many old scripts all use function scope vars, no block scope var.","msgtype":"m.text"},"ts":1580866853000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"old scripts only had var as an option","msgtype":"m.text"},"ts":1580866862000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean other script languages.","msgtype":"m.text"},"ts":1580866896000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"languages where block scope was an option?","msgtype":"m.text"},"ts":1580866924000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean many old script languages also only have function scope vars, no block scope. So js just copied them :-P","msgtype":"m.text"},"ts":1580866963000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1580866990000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wow this is a great first conversation for our logs; delegates shitting all over the language lol","msgtype":"m.text"},"ts":1580867041000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I feel java didn't bring many bad part, the most bad from java is Date! But java depracated it in 1.1, while JS used it 20 years... So it seems we can't blame java...","msgtype":"m.text"},"ts":1580867043000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"akirose  pls put me to the last day if possible, it could help me to adapt to jet lag...","msgtype":"m.text"},"ts":1580867307000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1580867317000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose Thank you!","msgtype":"m.text"},"ts":1580867337000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"that trichotomy is not true for NaN","msgtype":"m.text"},"ts":1580867385000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the precision is defined by the number format","msgtype":"m.text"},"ts":1580867415000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haxjs: I thought you weren't traveling","msgtype":"m.text"},"ts":1580867423000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra no I weren't traveling but i still need to adjust my timezone ... starting from my 4AM is really pain... my brain acutally stop work now","msgtype":"m.text"},"ts":1580867497000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"michaelficarra what trichotomy not work for NaN? I missed it","msgtype":"m.text"},"ts":1580867636000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"a < b or a > b or a === b","msgtype":"m.text"},"ts":1580867655000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"nan comparisons are always falsy","msgtype":"m.text"},"ts":1580867742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh :-P  NaN is notanumber but typeof NaN === 'number',  I won't be surprised on everything about NaN :-)","msgtype":"m.text"},"ts":1580867760000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"Is it just me or is littledan using U+006F LATIN SMALL LETTER O instead of U+0030 DIGIT ZERO?","msgtype":"m.text"},"ts":1580867768000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"I WAS WONDERING THAT TOO","msgtype":"m.text"},"ts":1580867786000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"bterlson: google \"lowercase numbers\"","msgtype":"m.text"},"ts":1580867791000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's that font","msgtype":"m.text"},"ts":1580867793000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"its the font","msgtype":"m.text"},"ts":1580867795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"name that font","msgtype":"m.text"},"ts":1580867806000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"it has oldstyle figures by default, which is only a good idea for actual prose usually","msgtype":"m.text"},"ts":1580867816000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's inconsola right","msgtype":"m.text"},"ts":1580867818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"who's gonna tell him we can't distinguish between white & grey bgs","msgtype":"m.text"},"ts":1580867822000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"it's latin small lettter?   maybe „Äá ?","msgtype":"m.text"},"ts":1580867828000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"i always use that font in my proposal slides","msgtype":"m.text"},"ts":1580867855000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we're not going to have a global settings on bigdecimals right? global settings are bad","msgtype":"m.text"},"ts":1580867862000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1580867877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"robpalme: playfair display is the name of the font","msgtype":"m.text"},"ts":1580867927000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: what does global setting mean?","msgtype":"m.text"},"ts":1580867932000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"like python's decimal.getcontext()","msgtype":"m.text"},"ts":1580867945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: the laughter in the room when that came up is a sign that global settings would be highly unlikely to be introduced","msgtype":"m.text"},"ts":1580867946000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"toJSON is really a problem","msgtype":"m.text"},"ts":1580868034000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"robpalme: LOL I missed that part","msgtype":"m.text"},"ts":1580868042000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Shouldn't thinks like IEEE-754-2008 use upper case numerals or tabular figures? I'd like to see some iteration on the font this deck uses and maybe we can circle back next meeting","msgtype":"m.text"},"ts":1580868047000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"fonts are normally a stage 2 concern","msgtype":"m.text"},"ts":1580868100000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"wrote a idea about toJSON issue: https://gist.github.com/hax/5691ca8acdf9179e63043857cdc3616b","msgtype":"m.text"},"ts":1580868154000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"@haxjs: @michaelficarra had a proposal for serializing bigints","msgtype":"m.text"},"ts":1580868301000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"did I? I don't remember","msgtype":"m.text"},"ts":1580868321000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I thought?","msgtype":"m.text"},"ts":1580868331000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Maybe not.","msgtype":"m.text"},"ts":1580868333000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"that's gibson042","msgtype":"m.text"},"ts":1580868338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"You did, it was amazing and solved all problems","msgtype":"m.text"},"ts":1580868339000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"first proposal to reach stage 5","msgtype":"m.text"},"ts":1580868360000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"unfortunately hte work was lost in the fire at TC39 HQ","msgtype":"m.text"},"ts":1580868361000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"aww that's too bad","msgtype":"m.text"},"ts":1580868471000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i wanted the structured clone algo to move to tc39","msgtype":"m.text"},"ts":1580868479000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I can't tell if I'm in #tdz or not...","msgtype":"m.text"},"ts":1580868481000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I'm like 90% sure it was michaelficarra","msgtype":"m.text"},"ts":1580868486000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"The BigInt to variable length array proposal","msgtype":"m.text"},"ts":1580868508000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: https://github.com/tc39/proposal-json-parse-with-source","msgtype":"m.text"},"ts":1580868517000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That's the opposite","msgtype":"m.text"},"ts":1580868537000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think it was the 10%","msgtype":"m.text"},"ts":1580868540000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"v8 and gmp both use the same format for bigint serialization","msgtype":"m.text"},"ts":1580868543000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have a gist somewhere to convert between them","msgtype":"m.text"},"ts":1580868551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1580868554000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"JSON-compatible BigInt serialization is easy and already available with toString; my proposal is to make deserialization possible","msgtype":"m.text"},"ts":1580868570000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"https://es.discourse.group/t/bigint-enhancements/100/2","msgtype":"m.text"},"ts":1580868595000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"gibson042 wait, how? you can't output arbitrary-precision decimals with `JSON.stringify`","msgtype":"m.text"},"ts":1580868613000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://gist.github.com/devsnek/49b6c63d8a9f9bf3c299a34bb51ed7eb","msgtype":"m.text"},"ts":1580868631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, that's the caveat","msgtype":"m.text"},"ts":1580868647000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"devsnek, what's that in a language I can understand?","msgtype":"m.text"},"ts":1580868685000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"converts between gmplib (gnu bigint library) and v8's bigints","msgtype":"m.text"},"ts":1580868703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"using a standard format of <length, <array of u64>>","msgtype":"m.text"},"ts":1580868714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in js the length is part of the array","msgtype":"m.text"},"ts":1580868733000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"re: adding the parameter: https://github.com/bloomberg/bde/blob/master/groups/bdl/bdldfp/bdldfp_decimalconvertutil.h#L175","msgtype":"m.text"},"ts":1580869123000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"notes from our api for converting from binary->decimal","msgtype":"m.text"},"ts":1580869135000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"devsnek: +1 I also want to have structured clone algo move into JS and I have a heavily daily usage of custom serializable classes so I also want to have a \"developer defined\" structured clonable feature","msgtype":"m.text"},"ts":1580869142000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: Have you seen the previous efforts towards this move?","msgtype":"m.text"},"ts":1580869261000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"for reference, schemes and lisps have literal syntax for decimals","msgtype":"m.text"},"ts":1580869356000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"C# has `decimal` which is *essentially* a primitive.","msgtype":"m.text"},"ts":1580869357000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"littledan it seems there is an old structured clone proposal, but inactive?","msgtype":"m.text"},"ts":1580869359000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"(and rationals/complex/etc)","msgtype":"m.text"},"ts":1580869363000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"C# also has `0.999m`","msgtype":"m.text"},"ts":1580869383000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Anyone remember my preso on decimals from like 2015?","msgtype":"m.text"},"ts":1580869448000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"those were the days","msgtype":"m.text"},"ts":1580869454000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"littledan: yes there was a proposal but inactive now and it just a clone of structured clone proposal. I'd like to see an enhanced one","msgtype":"m.text"},"ts":1580869471000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I recall saying something like \"we've almost solved the value types framework so this work should advance quickly\"","msgtype":"m.text"},"ts":1580869477000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580869491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, that was always brendan's feedback :)","msgtype":"m.text"},"ts":1580869515000,"senderName":"apaprocki","senderId":"apaprocki@irc"},
{"content":{"body":"i have mixed feelings about getting involved after the spicy days","msgtype":"m.text"},"ts":1580869532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The question is, will value types have a unique `typeof` (i.e., one for *all* value types not per-value type)","msgtype":"m.text"},"ts":1580869562000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"`typeof x === 'valuetype'`","msgtype":"m.text"},"ts":1580869576000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ez","msgtype":"m.text"},"ts":1580869576000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I like that I got a taste of it and I also *really* like that those days are no more","msgtype":"m.text"},"ts":1580869592000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"seems anything except \"function\" \"object\" are all value types.","msgtype":"m.text"},"ts":1580869592000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"though there is a hole of null.","msgtype":"m.text"},"ts":1580869611000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"I'm tinkering with a strawman for value types via the `struct` keyword (similar to how `struct` represents a \"value type\" in C#), which would have a `typeof` of `\"struct\"`.","msgtype":"m.text"},"ts":1580869625000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think of everything in js as a heap allocation","msgtype":"m.text"},"ts":1580869630000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haxjs: typeof null is \"object\"","msgtype":"m.text"},"ts":1580869633000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"primitives are arguably \"value types\"","msgtype":"m.text"},"ts":1580869797000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek> immutable object behave same as value type so yes they can all heap allocation","msgtype":"m.text"},"ts":1580869799000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"anything where `Object(x) !== x`","msgtype":"m.text"},"ts":1580869804000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb yeah, this is only robust test I ever know.","msgtype":"m.text"},"ts":1580869858000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"jackworks: Did you follow how that worked out on the HTML side, how there was an effort to work together on this in the past?","msgtype":"m.text"},"ts":1580869899000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"rbuckton do you have any resource you can share regarding \"struct\"?","msgtype":"m.text"},"ts":1580869908000,"senderName":"ghermeto","senderId":"ghermeto@irc"},
{"content":{"body":"ljharb some very old engine would return some alien values for `typeof` for example \"unknown\" :)","msgtype":"m.text"},"ts":1580869923000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1580869942000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ghermeto: So far I just have a gist where I've been tinkering with syntax.","msgtype":"m.text"},"ts":1580869984000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"now when engine internal values leak out of v8 they have typeof be\"undefined\"","msgtype":"m.text"},"ts":1580869993000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which just makes everything more confusing","msgtype":"m.text"},"ts":1580869998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can people remote hear Mark?","msgtype":"m.text"},"ts":1580870021000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1580870024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1580870027000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"hey all. There is a large twitter dm group to coordinate activities for folks in town (both for conference and tc39)","msgtype":"m.text"},"ts":1580870337000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I added folks whose handles I know, but if you were not included and want to be please lmk","msgtype":"m.text"},"ts":1580870350000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins: my twitter is rickbutton , plz add me","msgtype":"m.text"},"ts":1580870365000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"BTW it was a 0 in a weird font","msgtype":"m.text"},"ts":1580870393000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh no \"rickbutton\" cannot be messaged","msgtype":"m.text"},"ts":1580870470000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I added you, maybe if you add me it will work","msgtype":"m.text"},"ts":1580870486000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"open up those dms","msgtype":"m.text"},"ts":1580870491000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(unless you have groupdms turned off)","msgtype":"m.text"},"ts":1580870494000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"i wasn't following you try again","msgtype":"m.text"},"ts":1580870508000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"shame on me","msgtype":"m.text"},"ts":1580870509000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I'm @JackWorks_fvs on twitter","msgtype":"m.text"},"ts":1580870521000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: are you here in person?","msgtype":"m.text"},"ts":1580870558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rickbutton: I think you have dms disabled","msgtype":"m.text"},"ts":1580870578000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins moving to private IRC to note pollute channel","msgtype":"m.text"},"ts":1580870602000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"should coordinate with cf folks","msgtype":"m.text"},"ts":1580870840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're all about this because of cf workers","msgtype":"m.text"},"ts":1580870846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: mark's not on IRC","msgtype":"m.text"},"ts":1580870900000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1580870907000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'll have to send a pigeon or something","msgtype":"m.text"},"ts":1580870918000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we could also consider this an overflow item at the end of the meeting, if the timebox has run out","msgtype":"m.text"},"ts":1580871763000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(although I would like to discuss this further)","msgtype":"m.text"},"ts":1580871771000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's a 30m timebox, so it seems appropriate to go to overflow","msgtype":"m.text"},"ts":1580871793000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"has it gone 30m yet tho?","msgtype":"m.text"},"ts":1580871813000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1580871843000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1580871857000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ended with 1% battery","msgtype":"m.text"},"ts":1580871883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"zoom uses all the battery","msgtype":"m.text"},"ts":1580871887000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hello, where can I find the meeting's note?","msgtype":"m.text"},"ts":1580873728000,"senderName":"zuojian","senderId":"zuojian@irc"},
{"content":{"body":"zuojian: you can find it via the \"meeting info\" link in the channel topic","msgtype":"m.text"},"ts":1580873931000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Thanks.","msgtype":"m.text"},"ts":1580873955000,"senderName":"zuojian","senderId":"zuojian@irc"},
{"content":{"body":"Any plans for dinner tonight?","msgtype":"m.text"},"ts":1580874068000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"I think the plan is 7:30pm at Gyu-Kaku","msgtype":"m.text"},"ts":1580875908000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"oh man, gyu-kaku is is the best","msgtype":"m.text"},"ts":1580876374000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"s/is is/is/","msgtype":"m.text"},"ts":1580876387000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Text Myles if you want in; I think we have a reservation and seats are limited","msgtype":"m.text"},"ts":1580879536000,"senderName":"sffc","senderId":"sffc@irc"},
{"content":{"body":"can I just write my comments in the notes rather than taking up more time?","msgtype":"m.text"},"ts":1580933469000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"or, I could post it in an issue on the repo?","msgtype":"m.text"},"ts":1580933475000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"akirose: ystartsev ^","msgtype":"m.text"},"ts":1580933487000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if you're happy to and it's not a stage 1 blocker, pleas eod","msgtype":"m.text"},"ts":1580933492000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1580933496000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Filing an issue would be good","msgtype":"m.text"},"ts":1580933524000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"realms have a map with reified intrinsic names?","msgtype":"m.text"},"ts":1580934002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does anyone have use cases for differentiating the this value and global object in Realms? I coudln't find anything in the repo, and filed this issue about it https://github.com/tc39/proposal-realms/issues/217","msgtype":"m.text"},"ts":1580934106000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: isn't that how the window proxy works?","msgtype":"m.text"},"ts":1580934130000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: On the web, there's only one thing you can get at","msgtype":"m.text"},"ts":1580934146000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1580934150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a proxy, yeah, but there aren't two separate values","msgtype":"m.text"},"ts":1580934152000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I mean, there aren't two values available to JS","msgtype":"m.text"},"ts":1580934159000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1580934175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in node i exposed it as \"global\" on the new context api i'm trying to get merged in","msgtype":"m.text"},"ts":1580934202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: There are two values (the window proxy and the target global), but the current evaluation context can only see one of them (the window proxy).","msgtype":"m.text"},"ts":1580934297000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: Right. So both the global and the this value would be the window proxy.","msgtype":"m.text"},"ts":1580934315000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"emulating the web isn't the use case here. I'm not sure what the use case is.","msgtype":"m.text"},"ts":1580934337000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"As far as the code under `evaluate` is concerned, yes. as far as the owner of the `Realm`, no. If you wanted to emulate a \"window proxy\" in your realm, you'd need to be able to access the *actual* global.","msgtype":"m.text"},"ts":1580934375000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"couldn't you do this by hooking two realms together, where you create a global object with the first one, and then you wrap it with a window proxy, and then you set that as the global object for the second one?","msgtype":"m.text"},"ts":1580934444000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"That sounds unnecessarily expensive. You'd end up with two sets of primordials.","msgtype":"m.text"},"ts":1580934476000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"If I were to make a change, it would be replacing `thisValue` in the realm init with a proxy handler (in which you access the actual global through proxy hooks).","msgtype":"m.text"},"ts":1580934533000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"the first slide said one of the goals was supporting modules right","msgtype":"m.text"},"ts":1580934603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"numberformat is üëçüèª","msgtype":"m.text"},"ts":1580935460000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mmarchini here","msgtype":"m.text"},"ts":1580935488000,"senderName":"ghermeto","senderId":"ghermeto@irc"},
{"content":{"body":"I am sooooooo hyped for Intl.DurationFormatter","msgtype":"m.text"},"ts":1580935531000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"everything on intl is pretty awesome","msgtype":"m.text"},"ts":1580935554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except for Intl.v8BreakIterator","msgtype":"m.text"},"ts":1580935568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1580935574000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"+1 for DurationFormatter, although I'd also like to see some kind of \"time ago\" or \"time until\"-style format as well.","msgtype":"m.text"},"ts":1580935574000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"my interns were asking me for exactly DurationFormatter last week and I had nothing for them","msgtype":"m.text"},"ts":1580935659000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I love the format of this update, holy crap it's good","msgtype":"m.text"},"ts":1580935727000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1580935753000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"kudos to sffc for making this super easy to follow","msgtype":"m.text"},"ts":1580935756000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"always","msgtype":"m.text"},"ts":1580935815000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"sffc's slides & presentations are always clear and easy to follow <3","msgtype":"m.text"},"ts":1580935837000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"üéâ üéâ","msgtype":"m.text"},"ts":1580935911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol speaking of Intl.v8BreakIterator","msgtype":"m.text"},"ts":1580935966000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"caridy: did you catch that point of order?","msgtype":"m.text"},"ts":1580935998000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"we need your slides, carridy","msgtype":"m.text"},"ts":1580936056000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"oh, sorry, it was linked from the readme of the proposal","msgtype":"m.text"},"ts":1580936375000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"https://github.com/tc39/proposal-realms/#presentations","msgtype":"m.text"},"ts":1580936403000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1580936450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the future could you link it in the agenda?","msgtype":"m.text"},"ts":1580936455000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, sure! I can do that too.","msgtype":"m.text"},"ts":1580936566000,"senderName":"caridy","senderId":"caridy@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1580936592000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"caridy: added them to the agenda","msgtype":"m.text"},"ts":1580936616000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I already did it for you caridy","msgtype":"m.text"},"ts":1580936617000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"btw the note takers are doing an excellent job this meeting!","msgtype":"m.text"},"ts":1580936631000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i just saw an Intl.Locale slide","msgtype":"m.text"},"ts":1580936691000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i see it again","msgtype":"m.text"},"ts":1580936730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: if we're ready for you, would you be able to go for lunch?","msgtype":"m.text"},"ts":1580936784000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ü§î I wonder who's going to be the first non-delegate to join...","msgtype":"m.text"},"ts":1580937077000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"does globbot count?","msgtype":"m.text"},"ts":1580937104000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1580937109000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"we already know who","msgtype":"m.text"},"ts":1580937118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"<--","msgtype":"m.text"},"ts":1580937126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you have +v, you don't count either","msgtype":"m.text"},"ts":1580937144000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"also don't tell aki","msgtype":"m.text"},"ts":1580937149000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"üëÄ","msgtype":"m.text"},"ts":1580937189000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also you're in the openjs foundation","msgtype":"m.text"},"ts":1580937239000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not a delegate of the openjs foundation though","msgtype":"m.text"},"ts":1580937251000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shh yes you are","msgtype":"m.text"},"ts":1580937260000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"aren't you an \"invited expert\"","msgtype":"m.text"},"ts":1580937262000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"that's my understanding","msgtype":"m.text"},"ts":1580937280000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: are you good to go straight after lunch with resource mgmt?  that will be 12:30 hawaii time.","msgtype":"m.text"},"ts":1580937287000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"That's fine with me.","msgtype":"m.text"},"ts":1580937299000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"thank yo!","msgtype":"m.text"},"ts":1580937432000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"uhoh https://gc.gy/48642746.png","msgtype":"m.text"},"ts":1580937756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek that's allowed","msgtype":"m.text"},"ts":1580937845000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1580937861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you mean engine262, that's the current spec","msgtype":"m.text"},"ts":1580937871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was looking more at the undefined/null split","msgtype":"m.text"},"ts":1580937885000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the undefined/null split is also allowed I think","msgtype":"m.text"},"ts":1580937900000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"by virtue of \"any crazy extension is allowed\"?","msgtype":"m.text"},"ts":1580937911000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1580937914000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"caller\" is one of the canonical crazy extensions","msgtype":"m.text"},"ts":1580937926000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is a weird area","msgtype":"m.text"},"ts":1580937941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"one of the canonical crazy extensions\" üëåüèª","msgtype":"m.text"},"ts":1580937996000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"i just like that the spec uses the same \"ThrowTypeError\" function for so many different things","msgtype":"m.text"},"ts":1580938021000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"The caller, callee, and arguments properties may not be accessed on functions or the arguments objects for calls to them\"","msgtype":"m.text"},"ts":1580938038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"point of order","msgtype":"m.text"},"ts":1580938201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes?","msgtype":"m.text"},"ts":1580938391000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"michaelficarra: shane had a point of order","msgtype":"m.text"},"ts":1580938403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"about who was talking","msgtype":"m.text"},"ts":1580938406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the queue was updated","msgtype":"m.text"},"ts":1580938418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we good devsnek","msgtype":"m.text"},"ts":1580938427000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose: will SES be done today?","msgtype":"m.text"},"ts":1580938429000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"akirose: oops I'm in Shanghai can't go for lunch for you, it's 5am now in my place ü§£","msgtype":"m.text"},"ts":1580938467000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"haha i know jackworks lol i meant presenting before/after we took a break","msgtype":"m.text"},"ts":1580938490000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"but also i'd love to get lunch üòÇ","msgtype":"m.text"},"ts":1580938499000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"jackworks: damn, i can't make it past 3 am","msgtype":"m.text"},"ts":1580938518000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i hope its the morning end of 5 am, not the night","msgtype":"m.text"},"ts":1580938532000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I'm eating my breakfast now, never east breakfast in 5am :)","msgtype":"m.text"},"ts":1580938540000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"im sitting in darkness o_o the evening drags on. there is no food","msgtype":"m.text"},"ts":1580938579000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"okok this should probably be in temporal dead zone","msgtype":"m.text"},"ts":1580938590000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"I need to grab myself some lunch. I should be back before the break is up","msgtype":"m.text"},"ts":1580938636000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"oh shit ystartsev i missed your earlier question","msgtype":"m.text"},"ts":1580942186000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"yeah i'm moving SES to tomorrow","msgtype":"m.text"},"ts":1580942190000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ok, thanks akirose","msgtype":"m.text"},"ts":1580942205000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"hmm, I wonder if `using` could be spelled `try`...","msgtype":"m.text"},"ts":1580942228000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"uh oh","msgtype":"m.text"},"ts":1580942235000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"O_O","msgtype":"m.text"},"ts":1580942237000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"try try?","msgtype":"m.text"},"ts":1580942245000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"(sorry, will follow up in issues)","msgtype":"m.text"},"ts":1580942249000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ducks","msgtype":"m.emote"},"ts":1580942250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"akirose does Mark know you're moving the SES presentation?  I don't think he's following IRC","msgtype":"m.text"},"ts":1580943296000,"senderName":"cmorningstar","senderId":"cmorningstar@irc"},
{"content":{"body":"yeah and also the schedule is linked in the reflector","msgtype":"m.text"},"ts":1580943327000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"(y)","msgtype":"m.text"},"ts":1580943341000,"senderName":"cmorningstar","senderId":"cmorningstar@irc"},
{"content":{"body":"`try expr` is free (if we require parens around an object literal), and we could permit it before declarations","msgtype":"m.text"},"ts":1580943809000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"`try const foo = bar;`, `try fooBar;`, `fn(try foo);`","msgtype":"m.text"},"ts":1580943840000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(I also like Ron's answer)","msgtype":"m.text"},"ts":1580943859000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I am a lot happier with the try-block form than the using-declaration form, personally","msgtype":"m.text"},"ts":1580943968000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm curious how others feel","msgtype":"m.text"},"ts":1580943976000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i kinda want to explore the expression form more","msgtype":"m.text"},"ts":1580943991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i like the using form, that can appear anywhere in a block","msgtype":"m.text"},"ts":1580944004000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ms person === \"dean tribble\"","msgtype":"m.text"},"ts":1580944287000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"ms like microsoft? dean doesn't work for microsoft","msgtype":"m.text"},"ts":1580944332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"he did many years ago","msgtype":"m.text"},"ts":1580944351000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1580944369000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: is the awkwardness of having to name intermediates the only motivation for `using value` over only having `using const`?","msgtype":"m.text"},"ts":1580944565000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`using const _unused = ...`","msgtype":"m.text"},"ts":1580944635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's not awkwardness. For cases like locking, you would be introducing an unused binding. IF you have multiple of these, you end up with a lot of unused bindings that clutter the scope. Also, you often have to contend with linters that error on unused bindings, meaning that many developers would have to add a fair amount of `// eslint-ignore`-like comments to their code for what would essentially have been:","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"try using(mutex.lock()) {","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":" ...","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580944779000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: i don't think linting is a real argument, since it'll still be syntactically distinguished with `using`","msgtype":"m.text"},"ts":1580944838000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: as for \"many unused bindings\", this is not borne out by practice in large C++ code bases i've worked in","msgtype":"m.text"},"ts":1580944852000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"If we had resolved the destructuring issue to the stage1 semantics, we could have considered `using const {} = expr`, though that still feels odd.","msgtype":"m.text"},"ts":1580944856000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: There was a reason we allowed `catch {}` without a binding. I'd very much like this feature to have a form that doesn't introduce a binding.","msgtype":"m.text"},"ts":1580944955000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think the difference is the syntax cost for removing the binding for catch is much lower","msgtype":"m.text"},"ts":1580944989000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can confirm i would use the bindingless version","msgtype":"m.text"},"ts":1580944992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: I've written a fair bit of JS code using async coordination primitives for synchronizing access to resources using async functions and make heavy use of the bindingless form for locking.","msgtype":"m.text"},"ts":1580945007000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"and i don't know the state of the web locks api","msgtype":"m.text"},"ts":1580945029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i bet people using that would want to use it too","msgtype":"m.text"},"ts":1580945033000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I would heavily use it with https://www.npmjs.com/package/@esfx/async","msgtype":"m.text"},"ts":1580945075000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"is there some concern that iterator helpers is not going to happen?'","msgtype":"m.text"},"ts":1580945089000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(which is a version of my old `prex` async coordination package).","msgtype":"m.text"},"ts":1580945097000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek no I just want them to happen in the right order","msgtype":"m.text"},"ts":1580945135000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1580945140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: is there a stronger argument than \"i would use it\"? i mean i would use it with just the `using const` form for sure, since in my experience naming your RAII bindings is not really a big deal","msgtype":"m.text"},"ts":1580945174000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think dan or someone earlier suggested just `using const (expr)` and not also `using value` and that is more preferable to me","msgtype":"m.text"},"ts":1580945216000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can also confirm that its awkward in rust to need to name scoped allocations","msgtype":"m.text"},"ts":1580945242000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`let _ = ...`","msgtype":"m.text"},"ts":1580945246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: There's a *significant* amount of C# code written using C#'s version `using (expr) { ... }`","msgtype":"m.text"},"ts":1580945247000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"that's not apples to apples?","msgtype":"m.text"},"ts":1580945263000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`using const (expr)` is kind of interesting.","msgtype":"m.text"},"ts":1580945267000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"shu: The prior art in C# is where I pulled a lot of these concepts from, so I think it's applicable.","msgtype":"m.text"},"ts":1580945308000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"rbuckton: using (expr) is a scope introduction form as well","msgtype":"m.text"},"ts":1580945327000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Yes. that was my question earlier. I see two paths forward:","msgtype":"m.text"},"ts":1580945428000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"1. Only `using const` and `using value` forms (no `try using` form).","msgtype":"m.text"},"ts":1580945428000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"1. `try using (const ...)`, `try using (expr)` and `using const` forms (no `using value`) (essentially the same as C# 8).","msgtype":"m.text"},"ts":1580945428000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"(why do I expect markdown numbered lists to work in IRCCloud)...","msgtype":"m.text"},"ts":1580945456000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580945539000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: i like a subset of the first 1. with only a binding form. if a bindingless form is overwhelmingly preferred by committee, that we only introduce a single syntax form","msgtype":"m.text"},"ts":1580945602000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Object.keys is already a thing. Do we have any data on how slow are idioms using Object.keys?","msgtype":"m.text"},"ts":1580945642000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"object.keys ain't that slow","msgtype":"m.text"},"ts":1580945660000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: my objections are pretty weak","msgtype":"m.text"},"ts":1580945697000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rbuckton: i love RAII","msgtype":"m.text"},"ts":1580945703000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: A bindingless form is important to several of the use cases that motivated my proposing this feature. I very much want some bindingless form to survive.","msgtype":"m.text"},"ts":1580945711000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I can understand the argument that this propsal expresses intent better (modulo that I don't understand whether that's true or not) but I'm surprised that performance is used so much as a justification","msgtype":"m.text"},"ts":1580945737000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it seems slower than the previous version?","msgtype":"m.text"},"ts":1580945766000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"iterator helpers could be used with Object.keys and friends with Iterator.from()","msgtype":"m.text"},"ts":1580945969000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think the iterator helpers proposal is sort of predicated on the idea that this is a reasonable idiom","msgtype":"m.text"},"ts":1580945990000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(which I think it is)","msgtype":"m.text"},"ts":1580946004000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i also do think it is a reasonable idiom. reality is that people do use objects for small-ish collections and will continue to","msgtype":"m.text"},"ts":1580946058000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"JSON `reviver` is *very* hard to use on any non-trivial JSON object graph. (without the proposed changes to JSON.parse).","msgtype":"m.text"},"ts":1580946072000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I expect code bases which are using iterator helper to have a lot of `Thing.from(Iterator.from(obj).foo().bar())`","msgtype":"m.text"},"ts":1580946110000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for node lists of whatever","msgtype":"m.text"},"ts":1580946115000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*or whatever","msgtype":"m.text"},"ts":1580946120000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: do you think the reviver proposal in json parse helps this at all?","msgtype":"m.text"},"ts":1580946121000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"and having `Object.fromEntries(Iterator.from(Object.entries(obj)).foo().bar())` seems pretty much fine","msgtype":"m.text"},"ts":1580946146000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it matches that pattern","msgtype":"m.text"},"ts":1580946153000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ystartsev: For the most part, yes. It's definitely a step in the right direction.","msgtype":"m.text"},"ts":1580946157000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"where Object.iterateEntries() does not match that pattern","msgtype":"m.text"},"ts":1580946163000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rbuckton: i would rather support that then, if that is the case that is really being solved","msgtype":"m.text"},"ts":1580946169000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"Bakkot: `Object.fromEntries(Object.iterateEntries(obj).foo().bar())`?","msgtype":"m.text"},"ts":1580946184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Iterator.from","msgtype":"m.text"},"ts":1580946196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: you wouldn't necessarily use Iterator.from if you're getting an iterator from a builtin","msgtype":"m.text"},"ts":1580946200000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"foo and bar are iterator prototype methods","msgtype":"m.text"},"ts":1580946202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: iterator.from wont work in this case i think","msgtype":"m.text"},"ts":1580946209000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"oh i see what you did nvm","msgtype":"m.text"},"ts":1580946209000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right but all the builtins are going to spit out Iterators already","msgtype":"m.text"},"ts":1580946215000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Iterator.from is for coercing user types","msgtype":"m.text"},"ts":1580946222000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i thought ljharb did Object.entries()","msgtype":"m.text"},"ts":1580946228000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb you would use a prototype method or Iterator.from, I expect","msgtype":"m.text"},"ts":1580946229000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just like you wouldn't use Array.from or Promise.resolve if you already know it's an array or a promise for sure","msgtype":"m.text"},"ts":1580946232000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wouldn't do Iterator.from([].values())","msgtype":"m.text"},"ts":1580946252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't know that (e.g.) node lists expose a prototype method exposing an iterator","msgtype":"m.text"},"ts":1580946253000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"except for [Symbol.iterator]","msgtype":"m.text"},"ts":1580946261000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah you'd use Iterator.from on a node list","msgtype":"m.text"},"ts":1580946269000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and I will absolutely use Iterator.from() over an explicit [Symbol.iterator]","msgtype":"m.text"},"ts":1580946272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's why its there","msgtype":"m.text"},"ts":1580946280000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"üëçüèª","msgtype":"m.text"},"ts":1580946282000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1580946286000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Bakkot: agreed on that part","msgtype":"m.text"},"ts":1580946292000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well also to cover iterators that don't inherit from Iterator.prototype","msgtype":"m.text"},"ts":1580946293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: but if you're using anything that spits out an iterator, you wouldn't want or need Iterator.from","msgtype":"m.text"},"ts":1580946310000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably only user iterators will fail to inherit from Iterator.prototype","msgtype":"m.text"},"ts":1580946312000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"* a real iterator","msgtype":"m.text"},"ts":1580946315000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: right","msgtype":"m.text"},"ts":1580946316000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you might use it like `[].concat(x)` or `Promise.resolve(x)` to not have to think about it, sure","msgtype":"m.text"},"ts":1580946332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right but most things don't spit out iterators","msgtype":"m.text"},"ts":1580946334000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they spit out nodelists","msgtype":"m.text"},"ts":1580946342000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1580946344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"matchAll, values/keys/entries on things","msgtype":"m.text"},"ts":1580946345000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but yes that's true","msgtype":"m.text"},"ts":1580946350000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"obv if you have an iterable you'd use Iterator.from","msgtype":"m.text"},"ts":1580946356000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm still a little unsure of iterator helpers. It still feels like its the wrong abstraction (i.e. operate over an \"iterator\" rather than an \"iterable\").","msgtype":"m.text"},"ts":1580946444000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"there's no inheritance chain for \"iterable\"s","msgtype":"m.text"},"ts":1580946475000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, I know that.","msgtype":"m.text"},"ts":1580946483000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i definitely think that things that take iterators should always take iterables; but i don't see any other way for the helpers proposal to work","msgtype":"m.text"},"ts":1580946494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you'd need a chain builder","msgtype":"m.text"},"ts":1580946494000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Iterator.from is that builder","msgtype":"m.text"},"ts":1580946502000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no like IterableBuilder(iterator).filter().map()[Symbol.iterator]()","msgtype":"m.text"},"ts":1580946531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for ron's pattern","msgtype":"m.text"},"ts":1580946541000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1580946545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: That's what my `iterable-query` package does:","msgtype":"m.text"},"ts":1580946549000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580946550000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"const { from } = require(\"iterable-query\");","msgtype":"m.text"},"ts":1580946550000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"from(x).filter(...).map(...).toArray();","msgtype":"m.text"},"ts":1580946550000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580946550000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"But it operates over iterables, not iterators.","msgtype":"m.text"},"ts":1580946558000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"iterators are iterables","msgtype":"m.text"},"ts":1580946569000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`from` takes an iterable; but filter and map are surely operating on iterators?","msgtype":"m.text"},"ts":1580946576000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i get your point","msgtype":"m.text"},"ts":1580946576000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for things where you are coercing back at the end, it seems like you should absolutely be operating on iterators, not iterables","msgtype":"m.text"},"ts":1580946581000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: not precisely.","msgtype":"m.text"},"ts":1580946582000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"you shouldn't need to build up the whole collection every time","msgtype":"m.text"},"ts":1580946595000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"built-in iterators are iterables.","msgtype":"m.text"},"ts":1580946599000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"iterators are iterable by the definition of iterable in this language","msgtype":"m.text"},"ts":1580946601000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1580946612000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh i see what you mean","msgtype":"m.text"},"ts":1580946612000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1580946616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"User-defined iterators aren't iterables (which was mentioned above).","msgtype":"m.text"},"ts":1580946617000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"all built-in iterators happen to be iterables","msgtype":"m.text"},"ts":1580946619000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iterators have \"next\", iterables have Symbol.iterator","msgtype":"m.text"},"ts":1580946627000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TypeScript calls them \"IterableIterator\"s","msgtype":"m.text"},"ts":1580946638000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I have very rarely seen someone define an iterator without using a generator","msgtype":"m.text"},"ts":1580946642000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you won't get very far if your iterator isn't iterable though","msgtype":"m.text"},"ts":1580946658000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since for loops won't accept it","msgtype":"m.text"},"ts":1580946664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the reviver thing seems like a red herring; there are other reasons you might iterate over an object (e.g., they have really nice literals to use in JS). But that's why we have Object.keys/values/entries","msgtype":"m.text"},"ts":1580946703000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"If you look at C#/.NET's `Enumerable` class or RX, iterating over (or subscribing to) those chained operations by default result in re-executing each step in the chain against the original collection source.","msgtype":"m.text"},"ts":1580946747000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: for..of takes non-iterable iterators","msgtype":"m.text"},"ts":1580946750000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb wait does it?","msgtype":"m.text"},"ts":1580946759000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how does that work?","msgtype":"m.text"},"ts":1580946763000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1580946764000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait maybe not, one sec","msgtype":"m.text"},"ts":1580946766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://engine262.js.org/#gist=66a1fede0f3a2fa776e3c99dacd87b81","msgtype":"m.text"},"ts":1580946783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok no, it doesn't, i was fooled by an inherited Symbol.iterator method","msgtype":"m.text"},"ts":1580946784000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580946789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`for..of`takes iterables. The iterators those iterables produce don't themselves need to be iterable.","msgtype":"m.text"},"ts":1580946795000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"even when you try to get a non-iterable iterator you can't :P","msgtype":"m.text"},"ts":1580946804000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`for..of` never directly calls `next`.","msgtype":"m.text"},"ts":1580946817000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1580946832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it calls it in the head of the loop","msgtype":"m.text"},"ts":1580946846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: wait what?","msgtype":"m.text"},"ts":1580946846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"It indirectly calls `next`.","msgtype":"m.text"},"ts":1580946856000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"it does IteratorNext/IteratorStep","msgtype":"m.text"},"ts":1580946867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because we have a helper","msgtype":"m.text"},"ts":1580946871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that still seems pretty direct to me","msgtype":"m.text"},"ts":1580946877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: ah ok","msgtype":"m.text"},"ts":1580946878000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`for (const x of y)` doesn't call` next` on `y`, it calls `next` on the result of `y[Symbol.iterator]()`.","msgtype":"m.text"},"ts":1580946879000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"yeah i'd call that directly calling it","msgtype":"m.text"},"ts":1580946885000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1580946889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ugh I can't believe it's taken us this long to add these","msgtype":"m.text"},"ts":1580946906000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580946964000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"for (const x of { [Symbol.iterator]() { return { next() { return { done: true }; } }; } }) { }","msgtype":"m.text"},"ts":1580946964000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580946964000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"Works fine, the iterator returned from `[Symbol.iterator]` doesn't need to itself have a `[Symbol.iterator]`.","msgtype":"m.text"},"ts":1580946964000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"I wish we could replace the \"Logical\" in this proposal name but I don't have a better idea offhand and I guess it doesn't really matter wrt the ultimate spec/impl change s","msgtype":"m.text"},"ts":1580946966000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: what's wrong with logical?","msgtype":"m.text"},"ts":1580946997000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"they're the logical operators","msgtype":"m.text"},"ts":1580947005000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i'd call it \"getting the rest of the binary operators\"","msgtype":"m.text"},"ts":1580947007000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but ?? isn't truth-oriented","msgtype":"m.text"},"ts":1580947016000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which is what \"logical\" really means","msgtype":"m.text"},"ts":1580947036000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sorry, it *used to be* the logical operators","msgtype":"m.text"},"ts":1580947040000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"yes, that part is very true :D","msgtype":"m.text"},"ts":1580947049000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it sort of is, but the \"truth\" is the truth of \"is the operand null or undefined\".","msgtype":"m.text"},"ts":1580947059000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"they're not really logical operators tho, they're value selection operators","msgtype":"m.text"},"ts":1580947073000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"imo logical operators produce booleans","msgtype":"m.text"},"ts":1580947079000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1580947080000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"short circuiting binary operators take it or leave it","msgtype":"m.text"},"ts":1580947091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Fair enough.","msgtype":"m.text"},"ts":1580947096000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"devsnek: Wordy, but I like it.","msgtype":"m.text"},"ts":1580947105000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"ljharb: `\"\" || 1` does not produce a boolean.","msgtype":"m.text"},"ts":1580947119000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"i think that's ljharb's point","msgtype":"m.text"},"ts":1580947133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I had brought this up here: https://github.com/tc39/proposal-nullish-coalescing/pull/50","msgtype":"m.text"},"ts":1580947134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rbuckton: that's because it's not a logical operator","msgtype":"m.text"},"ts":1580947135000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rbuckton: in a language where || is a logical operator, it produces true or false","msgtype":"m.text"},"ts":1580947149000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"logical-ish operators\"","msgtype":"m.text"},"ts":1580947150000,"senderName":"rbuckton","senderId":"rbuckton@irc"},
{"content":{"body":"but I don't think in this case it'll have an impact on spec names anyway","msgtype":"m.text"},"ts":1580947153000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's a value selection operator.","msgtype":"m.text"},"ts":1580947157000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(I should verify)","msgtype":"m.text"},"ts":1580947159000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it got removed","msgtype":"m.text"},"ts":1580947171000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because of the parens thing","msgtype":"m.text"},"ts":1580947176000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the semantics in this proposal appear obviously correct","msgtype":"m.text"},"ts":1580947176000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: what did?","msgtype":"m.text"},"ts":1580947183000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the name \"ShortCircuitExpression\"","msgtype":"m.text"},"ts":1580947191000,"senderName":"devsnek","senderId":"devsnek@irc"}
]