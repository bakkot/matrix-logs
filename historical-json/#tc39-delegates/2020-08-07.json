[
{"content":{"body":"did we ever talk about Math.fround on bigints? alon (who works on emscripten) reached out to me that as it is currently specced (float64->float32), trying to round BigInts to float32s requires accumulating rounding errors by first going to a float64","msgtype":"m.text"},"ts":1596824037000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm assuming this rounding behavior actually broke the compilation of some c/c++ code in emscripten","msgtype":"m.text"},"ts":1596824056000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we need to generally get bigint supported in math methods","msgtype":"m.text"},"ts":1596824205000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1596824210000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its on my list of proposals","msgtype":"m.text"},"ts":1596824211000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i haven't had time to get that together but will be happy to cochampion with whoever does","msgtype":"m.text"},"ts":1596824219000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://snek.dev/proposal-list","msgtype":"m.text"},"ts":1596824233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i am not sure all math methods make sense","msgtype":"m.text"},"ts":1596824287000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well not literally all of them","msgtype":"m.text"},"ts":1596824304000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wouldn't make much sense with Math.sin","msgtype":"m.text"},"ts":1596824313000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a fairly small subset actually","msgtype":"m.text"},"ts":1596824391000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the bitwise stuff, min/max, uh... sign, abs","msgtype":"m.text"},"ts":1596824435000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"abs, cbrt, clz32, fround, imul, the logs, max, min, pow, sign","msgtype":"m.text"},"ts":1596824481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1596824711000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the logs are kinda weird because you often want a number out","msgtype":"m.text"},"ts":1596825901000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"most bigints in my code are such that log2(bigint) would be less than 2**53","msgtype":"m.text"},"ts":1596825928000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i assumed the logs would continue to output numbers","msgtype":"m.text"},"ts":1596825941000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it would be unusual to want integral logs, right?","msgtype":"m.text"},"ts":1596825961000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"except for change of base?","msgtype":"m.text"},"ts":1596826150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"dunno about that. integral log2 (rounded up) tells you how many bits are are in a thing.","msgtype":"m.text"},"ts":1596826162000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah but you can just... round up, if you want that. I'd want the actual fp log of my bigint by default.","msgtype":"m.text"},"ts":1596826223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sure, just saying that integral logs are not unusual","msgtype":"m.text"},"ts":1596826318000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: it'd definitely be a case by case audit","msgtype":"m.text"},"ts":1596826913000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but anything where it makes sense, it should work","msgtype":"m.text"},"ts":1596826920000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just print the number and hold your ruler up to the screen if you want integral log, imo","msgtype":"m.text"},"ts":1596829772000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"> Private data that isnâ€™t bad","msgtype":"m.text"},"ts":1596836345000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: I would be interested in your thoughts on this","msgtype":"m.text"},"ts":1596836345000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i feel like i've vocalized my thoughts on private fields already :P","msgtype":"m.text"},"ts":1596836373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh sorry I guess I forgot what they were, if there was something additive. Do you have a reference?","msgtype":"m.text"},"ts":1596836428000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(if not that's fine)","msgtype":"m.text"},"ts":1596836450000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i mean the tl;dr is i think they are a bad thing that doesn't fit the rest of the language","msgtype":"m.text"},"ts":1596836467000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Right so I wasn't sure which part you might want to fix with a proposal","msgtype":"m.text"},"ts":1596836530000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"something without new syntax and forced throwing","msgtype":"m.text"},"ts":1596836584000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"throwing?","msgtype":"m.text"},"ts":1596837065000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"shu: Curious why this comes up from JS and not just Wasm. I thought Math.fround was sort of an asm.js albatross at this point.","msgtype":"m.text"},"ts":1596837158000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: they throw instead of returning undefined","msgtype":"m.text"},"ts":1596837346000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also the emscripten stdlib on the js side has to do various operations, i'd guess that's where the problem is","msgtype":"m.text"},"ts":1596837388000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"In which case (re private)?","msgtype":"m.text"},"ts":1596837594000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I mean, it already does throw in a bunch of cases; that was a design goal. Do you mean how they're default-initialized to undefined as fields?","msgtype":"m.text"},"ts":1596837884000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: no I mean I don't think they should throw if they don't exist on the receiver","msgtype":"m.text"},"ts":1596838204000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, you meant *without* throwing, OK","msgtype":"m.text"},"ts":1596838225000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"now that they are implementation reality one can only hope we can add all the features needed to make them usable","msgtype":"m.text"},"ts":1596838266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, which features would those be?","msgtype":"m.text"},"ts":1596838756000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"probably the simplest would be reifying them","msgtype":"m.text"},"ts":1596838782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cuz then you could just use the value with `in` and as a computed lookup and add it to existing objects and delete it from things and etc","msgtype":"m.text"},"ts":1596838816000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could do each one of those as its own bespoke feature but that gets into my point about composing with the language","msgtype":"m.text"},"ts":1596838984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: it came up in emscripten generated js fallback code","msgtype":"m.text"},"ts":1596839863000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so that aligns with your understanding","msgtype":"m.text"},"ts":1596839874000,"senderName":"shu","senderId":"shu@irc"}
]