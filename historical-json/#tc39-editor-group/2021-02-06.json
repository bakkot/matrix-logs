[
{"content":{"body":"gonna label a few things as es2021, just so we don't forget","msgtype":"m.text"},"ts":1612645159000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1612645558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm verifying 2189 against my es-abstract impls/tests rn","msgtype":"m.text"},"ts":1612645570000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: btw - not part of 2189 atm, but what do you think about Number::sameValueZero doing the zero checks and then just returning `Number::sameValue(x, y)`?","msgtype":"m.text"},"ts":1612645630000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1612645856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"very mild preference for the current state I guess, but only very mild","msgtype":"m.text"},"ts":1612645870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"were the algorithms any more complicated than they were I'd be in favor of changing","msgtype":"m.text"},"ts":1612645878000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually I retract the very mild preference; I am entirely neutral","msgtype":"m.text"},"ts":1612645909000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"another option is to just add a NOTE describing the differences","msgtype":"m.text"},"ts":1612645973000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i ask because 2189 changes https://ci.tc39.es/preview/tc39/ecma262/sha/e4b6ca86d0318c06c7976e558a8066a6782b2931/#sec-numeric-types-number-subtract (subtract) to be in terms of add/unaryMinus, and i really like it","msgtype":"m.text"},"ts":1612646630000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i totally agree that for sameValue/sameValueZero for Numbers - it doesn't really matter - but i also really like that the overarching SameValue{,Zero} algorithms call into the same shared AO","msgtype":"m.text"},"ts":1612646683000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, I can see the merits","msgtype":"m.text"},"ts":1612647149000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the other side is that it adds another layer of indirection","msgtype":"m.text"},"ts":1612647158000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for me those balance out pretty precisely, given the simplicity of the algorithms","msgtype":"m.text"},"ts":1612647176000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hence my /shrug","msgtype":"m.text"},"ts":1612647178000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1612647230000,"senderName":"ljharb","senderId":"ljharb@irc"}
]