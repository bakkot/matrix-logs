[
{"content":{"body":"ljharb: not exactly, because there’s more than one type (shared data block vs data block","msgtype":"m.text"},"ts":1592615971000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and moreover, a “null”","msgtype":"m.text"},"ts":1592615989000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it’s a judgment to be sure, but asserting exhaustiveness is redundant verbosity if there’s one possible type of value","msgtype":"m.text"},"ts":1592616142000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"imo","msgtype":"m.text"},"ts":1592616148000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in the capability case it can sometimes be undefined or a PromiseCapability","msgtype":"m.text"},"ts":1592617107000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fair enough—that’s a slightly bigger state space","msgtype":"m.text"},"ts":1592625811000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i doubt we can make a hard and fast rule, but >= 2 types with nullability seems like a good rule of thumb","msgtype":"m.text"},"ts":1592625946000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I’m totally fine with that.","msgtype":"m.text"},"ts":1592626100000,"senderName":"ljharb","senderId":"ljharb@irc"}
]