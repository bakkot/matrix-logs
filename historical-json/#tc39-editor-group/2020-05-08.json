[
{"content":{"body":"philosophical question","msgtype":"m.text"},"ts":1588900357000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if you have a set of steps that become entirely unobservable based on some input","msgtype":"m.text"},"ts":1588900381000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"would you consider that asserts inside those steps to have to hold?","msgtype":"m.text"},"ts":1588900410000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that is, if you have some steps that can be removed by an optimizer because their result aren't observable, does the spec still require you to satisfy their preconditions as captured by assertions?","msgtype":"m.text"},"ts":1588900460000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"with my compiler engineer hat on, the answer is no","msgtype":"m.text"},"ts":1588900466000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but i can anticipate disagreement here","msgtype":"m.text"},"ts":1588900486000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"assertions are just comments, so I guess no, but I don't really understand the question","msgtype":"m.text"},"ts":1588900588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'll be concrete","msgtype":"m.text"},"ts":1588900598000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"consider https://tc39.es/ecma262/#sec-newpromiseresolvethenablejob","msgtype":"m.text"},"ts":1588900615000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is the observable behavior the same as if the engine had just executed the steps naively? yes? then it is all ok. no? then it is not ok.","msgtype":"m.text"},"ts":1588900631000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"consider the case when _then_ is a revoked proxy","msgtype":"m.text"},"ts":1588900664000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(keep in mind: a revoked proxy throws in step 2 here: https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist)","msgtype":"m.text"},"ts":1588900684000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"notably, step 2 happens before the argumentsList is ever observed","msgtype":"m.text"},"ts":1588900701000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"going back to NewPromiseResolveThenableJob,","msgtype":"m.text"},"ts":1588900712000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the concrete question is: suppose, at the point of evaluation step 1.a, the execution context stack is empty and _then_ is a revoked Proxy","msgtype":"m.text"},"ts":1588900755000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since _then_ is a revoked Proxy, step 1.b will unconditionally throw without user code observing the resolving functions","msgtype":"m.text"},"ts":1588900800000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"however, CreateResolvingFunctions calls CreateBuiltinFunction: https://tc39.es/ecma262/#sec-createbuiltinfunction","msgtype":"m.text"},"ts":1588900829000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"step 2 of CreateBuiltinFunction looks at the execution context stack, and assumes it's non-empty","msgtype":"m.text"},"ts":1588900853000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in my hypothetical scenario, would you consider that Assert to require the exec ctx stack to be non-empty, even though the invocation itself can be eliminated because it's not observable","msgtype":"m.text"},"ts":1588900908000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"two answers:","msgtype":"m.text"},"ts":1588900958000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1. I don't think it is observable to users whether the exec context stack is _in fact_ empty, so engines can choose to implement it such a way that it is empty (whatever that means, since \"exec context stack\" is not a real thing)","msgtype":"m.text"},"ts":1588901022000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's a real thing in determining the current Realm, and in turn the Function.prototype to use for the created (but never observed) builtin function","msgtype":"m.text"},"ts":1588901063000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"step 4 here: https://tc39.es/ecma262/#sec-createbuiltinfunction","msgtype":"m.text"},"ts":1588901095000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(though my opinion is, as you might expect, that that doesn't make it any more real, since none of these steps have \"force\" until user code actually observes anything\"","msgtype":"m.text"},"ts":1588901131000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"2. assertions are comments for the benefits of readers of the specification. they have no normative implications. we should arrange that they be true by virtue of the way the spec is written. if they don't follow as logical consequences of the rest of the spec, we should either modify/eliminate them or add new constraints to other parts of the spec so that they do follow as logical consequences of the rest of the spec","msgtype":"m.text"},"ts":1588901133000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agreed on 2","msgtype":"m.text"},"ts":1588901166000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"it's a real thing in determining the current Realm, and in turn the Function.prototype to use for the created (but never observed) builtin function\" - I would not regard this as being observable to users","msgtype":"m.text"},"ts":1588901206000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the builtin function escapes to user code, then it is, but in this case, it doesn't escape to user code","msgtype":"m.text"},"ts":1588901232000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1588901237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since it does not escape to user code, it is not observable","msgtype":"m.text"},"ts":1588901245000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which means that the engine could have implemented the spec exactly as written, for all the user knows","msgtype":"m.text"},"ts":1588901265000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not observable to the user that the engine does not just blindly implement the spec exactly as written = it is OK","msgtype":"m.text"},"ts":1588901286000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(sidebar: the previous sentence leads to one of my favorite facts about the spec, which is that, since the spec does not actually specify any IO at all, a program which takes UTF16 in and then immediately hangs forever is a valid implementation of the spec)","msgtype":"m.text"},"ts":1588901454000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1588901790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1588901792000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay, good, we are in agreement","msgtype":"m.text"},"ts":1588901814000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'd appreciate https://github.com/tc39/ecma262/pull/1984 a read in context of this convo whenever you have time","msgtype":"m.text"},"ts":1588902216000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i find debating devsnek on it exasperating, so in case he's making valid points i'd like a reframing from other folks who are less exasperating","msgtype":"m.text"},"ts":1588902240000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hm - given the foregoing, I don't understand your point about \"the corner case that's made easier by giving hosts this latitude about Realms for scheduled jobs: revoked proxies\"","msgtype":"m.text"},"ts":1588903548000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since it sounds to me like we have just established that hosts are free to omit the realm from the context stack in the actual implementation, because it is not observable whether or not they do so","msgtype":"m.text"},"ts":1588903588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is to say, I don't understand why hosts need latitude for that case","msgtype":"m.text"},"ts":1588903637000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"further latitude than they already get from the \"as-if\" nature of the specification, that is","msgtype":"m.text"},"ts":1588903685000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's a good point, latitude here doesn't help the revoked proxy here given the \"as-if\" understanding","msgtype":"m.text"},"ts":1588903993000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the revoked proxy case*","msgtype":"m.text"},"ts":1588904020000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"at least not strictly","msgtype":"m.text"},"ts":1588904081000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"editorially, lack of latitude here would mean upstream specs need to understand the \"as-if\" cases","msgtype":"m.text"},"ts":1588904126000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and if not, they'd need to write extra spec text that might be nonsensical","msgtype":"m.text"},"ts":1588904139000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not sure how to balance","msgtype":"m.text"},"ts":1588904147000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think that's probably solvable with a NOTE","msgtype":"m.text"},"ts":1588904171000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1588904209000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I am more worried about the non-null case here: for cases where it is not null, do we want a normative requirement on which realm it is?","msgtype":"m.text"},"ts":1588904212000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no, i don't","msgtype":"m.text"},"ts":1588904226000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i guess it wasn't very clear before because it did say it required the same realm as at the time of queuing","msgtype":"m.text"},"ts":1588904268000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but it was also a part of the spec that was willfully violated and people didn't implement","msgtype":"m.text"},"ts":1588904281000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so... shrug","msgtype":"m.text"},"ts":1588904283000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also there's two realms in question here, yes?","msgtype":"m.text"},"ts":1588904523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1588904529000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's the current Realm at the time of queuing, and there's the realm of the relevant handler callbacks","msgtype":"m.text"},"ts":1588904543000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the _realm_ passed to the host hook is the latter","msgtype":"m.text"},"ts":1588904551000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the two I meant were \"The Realm component of the topmost execution context on the execution context stack is a Realm Record.\" and the _realm_ passed to the host hook","msgtype":"m.text"},"ts":1588904603000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there are currently no normative requirements on either, that I can see","msgtype":"m.text"},"ts":1588904613000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the first is the realm at the time _the callback runs_, not the one at the time of queuing, I believee","msgtype":"m.text"},"ts":1588904631000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in our current draft there are no normative requirements","msgtype":"m.text"},"ts":1588904653000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there were (dubious) normative requirements before the promise layering PR landed","msgtype":"m.text"},"ts":1588904664000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"with the whole jobs machinery that wasn't used","msgtype":"m.text"},"ts":1588904674000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right, ok","msgtype":"m.text"},"ts":1588904677000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and your position is, you don't want there to be any requirements on either of them?","msgtype":"m.text"},"ts":1588904690000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pretty much","msgtype":"m.text"},"ts":1588904704000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if so, I would propose that we add a non-normative note to the HostEnqueuePromiseJob requirements  which says\" bit which says \"Note: typically this results in the execution context stack having as its topmost item an execution context whose Realm component was the Realm component of the topmost item on the execution stack when HostEnqueuePromiseJob was invoked, although this is not a normative requirement\", and devsnek","msgtype":"m.text"},"ts":1588904959000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":" can argue a normative requirement through committee if he wants","msgtype":"m.text"},"ts":1588904959000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1588904977000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"though I am not super clear on why we would not want that to be a normative requirement, if the only benefit of leaving it unspecified is the revoked proxy thing","msgtype":"m.text"},"ts":1588904995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"he might be right about the error that gets created in resolvethenable jobs","msgtype":"m.text"},"ts":1588905009000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and would therefore mildly prefer we make it normative and instead have a NOTE which says that it may not be observable what the realm is, e.g. if the _then_ is a revoked proxy, and reminds the reader of the as-if requirement","msgtype":"m.text"},"ts":1588905064000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we could make it a normative requirement, though it's slightly annoying on the upstream side","msgtype":"m.text"},"ts":1588905098000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we could also just be explicit and say that the Realm requirement only applies if it is observable","msgtype":"m.text"},"ts":1588905168000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is always true but if that makes upstream integration I have no problem repeating it","msgtype":"m.text"},"ts":1588905183000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i am not sure if it should be the normative requirement because the host has always been allowed to push other execution contexts on top, and this incumbents nonsense maybe figures into it","msgtype":"m.text"},"ts":1588905213000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1588905232000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, I will say the thing about the non-normative note then","msgtype":"m.text"},"ts":1588905250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though i am not yet confident whether it does or does not","msgtype":"m.text"},"ts":1588905253000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like, should HTML enqueue a new promise job using the same hook from its own machinery, when there is no active script (you can imagine web apis doing this)","msgtype":"m.text"},"ts":1588905300000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what do our requirements here even mean then?","msgtype":"m.text"},"ts":1588905311000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"they explicitly do not apply in that case, no?","msgtype":"m.text"},"ts":1588905344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, no, I misread","msgtype":"m.text"},"ts":1588905357000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well i don't actually know if they apply or not","msgtype":"m.text"},"ts":1588905367000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if upstream specs implement our host hooks, it seems fair game to let it call those themselves","msgtype":"m.text"},"ts":1588905381000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and some kind of invariants should still hold","msgtype":"m.text"},"ts":1588905387000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, that is an unrelated issue which should be fixed - if GetActiveScriptOrModule returns `null`, the \"prepared to execute code\" bit should not apply I think","msgtype":"m.text"},"ts":1588905408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"spec layering is a mess","msgtype":"m.text"},"ts":1588905420000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i need to think this through more carefully","msgtype":"m.text"},"ts":1588905424000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"trufax","msgtype":"m.text"},"ts":1588905426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> if upstream specs implement our host hooks, it seems fair game to let it call those themselves","msgtype":"m.text"},"ts":1588905883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"having thought a little more about this, my position is, we are not required to arrange that these are written in a way which make sense for hosts to call at all times","msgtype":"m.text"},"ts":1588905919000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hosts can in principle determine for themselves if they make sense as written","msgtype":"m.text"},"ts":1588905945000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and if there's a particular reason to do the work to make them callable in the situation the host wants, we can do the work at that point, with the concrete use case in mind","msgtype":"m.text"},"ts":1588905976000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I left my comment about the NOTE on the PR","msgtype":"m.text"},"ts":1588906046000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that position also seems fine to me","msgtype":"m.text"},"ts":1588909003000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and that concern probably doesn't generalize beyond promises","msgtype":"m.text"},"ts":1588909016000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"promises is the only thing that might be widely used enough that rando web apis might want to call hooks to enqueue stuff","msgtype":"m.text"},"ts":1588909031000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i see your update, will review when I get a chance","msgtype":"m.text"},"ts":1588980050000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gonna need to be at a point I can set aside a solid block of time for paging stuff in, I see","msgtype":"m.text"},"ts":1588980064000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not urgent","msgtype":"m.text"},"ts":1588980138000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hard deadline is like, before we merge weak refs","msgtype":"m.text"},"ts":1588980154000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no soft deadline really","msgtype":"m.text"},"ts":1588980157000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"though the faster we review as a group the better chance i still remember my intentions :)","msgtype":"m.text"},"ts":1588980167000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, for big stuff like this it is nice to deal with it relatively synchronously","msgtype":"m.text"},"ts":1588980248000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we are definitely going to have to talk about this in the editor call, i'm so confused","msgtype":"m.text"},"ts":1588980993000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haha sure","msgtype":"m.text"},"ts":1588981573000,"senderName":"shu","senderId":"shu@irc"}
]