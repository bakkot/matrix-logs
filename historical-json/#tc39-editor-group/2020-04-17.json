[
{"content":{"body":"shu I see you have failed at \"avoid reading comments\"","msgtype":"m.text"},"ts":1587083995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i did :(","msgtype":"m.text"},"ts":1587084049000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unrelated: you know how we said that we wanted to include grammar parameters for early errors?","msgtype":"m.text"},"ts":1587084349000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did we also want to do that for SDOs?","msgtype":"m.text"},"ts":1587084354000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because there's 1051 places in the spec that an early error or SDO is defined without the relevant grammar parameters","msgtype":"m.text"},"ts":1587084372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is... a lot","msgtype":"m.text"},"ts":1587084387000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(only 80 of them are in early errors)","msgtype":"m.text"},"ts":1587084697000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1051 is a lot","msgtype":"m.text"},"ts":1587085155000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what in the world does https://github.com/tc39/ecma262/pull/1951#issuecomment-614969552 mean","msgtype":"m.text"},"ts":1587085202000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you know what i realized","msgtype":"m.text"},"ts":1587085777000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"these discussions are just the JS spec nerd version of https://forum.bodybuilding.com/showthread.php?t=107926751&page=1","msgtype":"m.text"},"ts":1587085806000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: https://github.com/tc39/ecma262/pull/1697 is also waiting on michael's review; i don't feel comfortable approving it myself","msgtype":"m.text"},"ts":1587098270000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: lol did you have that thread saved for reference","msgtype":"m.text"},"ts":1587098323000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this is just such a waste of time","msgtype":"m.text"},"ts":1587146546000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i regret taking this on","msgtype":"m.text"},"ts":1587146550000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so you regret hosting this discussion","msgtype":"m.text"},"ts":1587146744000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"New rule: if someone wants us to change a thing they have to make the PR themselves and also deal with the random people who will comment on it with opinions","msgtype":"m.text"},"ts":1587151081000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's really rule 1 of any OSS project i think","msgtype":"m.text"},"ts":1587151204000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"pay your dues\"","msgtype":"m.text"},"ts":1587151207000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but people forget","msgtype":"m.text"},"ts":1587151214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i need to be better about disengaging","msgtype":"m.text"},"ts":1587151218000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: also to drag you into this but you might have an opinion on https://github.com/tc39/proposal-promise-any/pull/59","msgtype":"m.text"},"ts":1587151252000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"given you designed it originally","msgtype":"m.text"},"ts":1587151261000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"@shu I +1'd your latest comment, that is my opinion on it","msgtype":"m.text"},"ts":1587151272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, didn't see, good enough for me","msgtype":"m.text"},"ts":1587151308000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't feel all that strongly; this is one of those things that I expect to affect approximately zero real people ever","msgtype":"m.text"},"ts":1587151310000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but my intuition matches yours","msgtype":"m.text"},"ts":1587151316000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it affects maintainability of impls fwiw","msgtype":"m.text"},"ts":1587151340000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but definitely true for not affecting users","msgtype":"m.text"},"ts":1587151345000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"are there any examples of builtin methods in 262 where the args aren't evaluated in order, at least within ES6+?","msgtype":"m.text"},"ts":1587154221000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and am i wrong that WebIDL mandates that argument normalization/coercion/validation be done in order? i thought we talked about that for like 5 minutes in dan's IDL presentation","msgtype":"m.text"},"ts":1587154257000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ecma-262 has approximately zero builtin subclasses, so it would not be a particularly useful data source either way.","msgtype":"m.text"},"ts":1587154337000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Also other languages exist. I don't think it makes sense to assume that a very weak precedent in ecma-262 should necessarily override a very stong precedent in other languages.","msgtype":"m.text"},"ts":1587154376000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it has 6 error subclasses but they have the same signature as the superclass","msgtype":"m.text"},"ts":1587154431000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but anyway also yes, for example https://tc39.es/ecma262/#sec-%typedarray%.from checks that its second argument, mapfn, is callable before checking that its first argument, source, is object-coercible","msgtype":"m.text"},"ts":1587154446000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1587154472000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my understanding is also that it's a very strong precedent in html tho, based on dan's IDL presentation","msgtype":"m.text"},"ts":1587154482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i see that Array.from matches typed array's .from as well","msgtype":"m.text"},"ts":1587154522000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm still very confused why it affects maintainability from an impl perspective","msgtype":"m.text"},"ts":1587154558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems like a question one ought to trust the implementers about, unless you feel like digging into some C++ today","msgtype":"m.text"},"ts":1587154583000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I sure as hell don't","msgtype":"m.text"},"ts":1587154585000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"surely i don't either, but i have to understand how important it is from an impl perspective to compare to my perspective","msgtype":"m.text"},"ts":1587154669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: the implementation maintainability argument is the same argument as the argument that super() is expected to be the first thing that a subclass constructor does in OO languages","msgtype":"m.text"},"ts":1587154831000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: when implementing these spec subclasses as actual subclasses, it is natural to, well, reflect the class hierarchy down into the implementation language","msgtype":"m.text"},"ts":1587154858000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like C++","msgtype":"m.text"},"ts":1587154868000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, not actual C++ classes but still organized in an OO way in the implementation","msgtype":"m.text"},"ts":1587154912000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in implementation languages, it's very natural to call a superclass constructor first","msgtype":"m.text"},"ts":1587154960000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the superclass constructor is a natural unit of code","msgtype":"m.text"},"ts":1587154984000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"to split logic *across* it makes things harder to reason about","msgtype":"m.text"},"ts":1587155000000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in general you want to be sure the superclass portion of yourself is nice and initialized before you start doing other things","msgtype":"m.text"},"ts":1587155011000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then why are private fields not introspectable, since that's how all other languages do it","msgtype":"m.text"},"ts":1587155022000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1587155031000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1587155031000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how does that follow","msgtype":"m.text"},"ts":1587155034000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"iow it sounds like you're saying that idioms from other languages should dictate how JS idioms work","msgtype":"m.text"},"ts":1587155036000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no, that's how you're interpreting what i'm saying","msgtype":"m.text"},"ts":1587155046000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"he is explaining why this question affects maintainability from an impl perspective","msgtype":"m.text"},"ts":1587155061000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is what you asked","msgtype":"m.text"},"ts":1587155063000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"frankly i don't care what other languages do, except as to provide agnostic justifications to help us make a choice","msgtype":"m.text"},"ts":1587155070000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1587155071000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think you SHOULD care what languages do as data points that may or may not be influential absent other factors","msgtype":"m.text"},"ts":1587155093000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so you're saying that because JS classes are often in impls written as C++ classes, we should make C++ expectations impose a pattern on the JS spec?","msgtype":"m.text"},"ts":1587155098000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1587155103000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok, clearly i'm missing your point :-/","msgtype":"m.text"},"ts":1587155118000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"first, we all agree that the specific ordering of arguments being processed doesn't affect users, right?","msgtype":"m.text"},"ts":1587155136000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it affects developers","msgtype":"m.text"},"ts":1587155149000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unless you're passing in proxies, it's not observable","msgtype":"m.text"},"ts":1587155155000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ToString is trivially observable if you pass a symbol by mistake","msgtype":"m.text"},"ts":1587155183000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but how does that affect developers","msgtype":"m.text"},"ts":1587155194000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if i pass a, b, and c, and i see that b is wrong, i assume a is right","msgtype":"m.text"},"ts":1587155201000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(\"see\" via an exception, i mean)","msgtype":"m.text"},"ts":1587155208000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i read LTR and i expect validation to be done the same way","msgtype":"m.text"},"ts":1587155225000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think that's you personally","msgtype":"m.text"},"ts":1587155226000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i really don't think that's how things work","msgtype":"m.text"},"ts":1587155229000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"functions in general do not consume in order","msgtype":"m.text"},"ts":1587155241000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if i see an error related to b, that doesn't tell me jack about a","msgtype":"m.text"},"ts":1587155250000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"do not consume arguments in order","msgtype":"m.text"},"ts":1587155256000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i remain convinced that the majority of functions in 262 do","msgtype":"m.text"},"ts":1587155272000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"even if that were true, there... exist... other functions?","msgtype":"m.text"},"ts":1587155291000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-string.prototype.slice is the first one i thought of, and it checks receiver, and then each arg in order","msgtype":"m.text"},"ts":1587155292000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i remain unconvinced you have extrapolated a coincidental pattern to be a pattern that should be adhered to","msgtype":"m.text"},"ts":1587155300000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and i am very, very strongly of the opinion that you drew an incorrect conclusion","msgtype":"m.text"},"ts":1587155312000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm pretty sure allen's said it was an intentional ES6 design decision","msgtype":"m.text"},"ts":1587155316000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll try to dig it up","msgtype":"m.text"},"ts":1587155319000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am going to disengage now because i don't know what's going on","msgtype":"m.text"},"ts":1587155331000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we don't design the language on adhering to truisms like this","msgtype":"m.text"},"ts":1587155338000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we do design it based on consistency, often","msgtype":"m.text"},"ts":1587155372000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"whether we'd have followed the truism if we started now doesn't usually matter when we can't change the old ones","msgtype":"m.text"},"ts":1587155398000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is a deeper consistency which you are asserting to not matter under the banner of e.g. \"i don't care what other languages do\"","msgtype":"m.text"},"ts":1587155412000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also we've been trying to point out that there is no consistency anyway","msgtype":"m.text"},"ts":1587155421000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"JS consistency is what's important","msgtype":"m.text"},"ts":1587155422000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jordan, there's no agreement that this is a JS consistency","msgtype":"m.text"},"ts":1587155515000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you have asserted it as such","msgtype":"m.text"},"ts":1587155520000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1587155553000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seeing how i've failed to convince you or get on the same page, we can talk about it on a video chat next week to a strict timebox, and failing that, happy to bring to plenary, though i don't think it's a good use of plenary time","msgtype":"m.text"},"ts":1587155680000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sounds good","msgtype":"m.text"},"ts":1587155693000,"senderName":"ljharb","senderId":"ljharb@irc"}
]