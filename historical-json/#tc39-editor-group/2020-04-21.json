[
{"content":{"body":"ljharb: are you free tomorrow for us to talk about the AggregateError issue on VC?","msgtype":"m.text"},"ts":1587428345000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"strictly timeboxed to 30 mins preferably","msgtype":"m.text"},"ts":1587428361000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i could do 1 with a hard stop at 1:30?","msgtype":"m.text"},"ts":1587428758000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1587429363000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'll make a calendar item","msgtype":"m.text"},"ts":1587429368000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: so i think what you were referring to in webidl is the \"To convert a Web IDL argument list [...]\" section of https://heycam.github.io/webidl/#es-user-objects","msgtype":"m.text"},"ts":1587501674000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and that mental model makes sense for an IDL, in that there's an \"argument adapter\" step; the interface's types first need to be adapted to the implementation language","msgtype":"m.text"},"ts":1587502097000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the difference in the AggregateError case is that it's all within JS. there's no expectation of an argument adapter wrapping your functions","msgtype":"m.text"},"ts":1587502172000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'd also argue the IterableToList is not really about argument type adaption in the IDL sense; you're massaging input to store it","msgtype":"m.text"},"ts":1587502375000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the \"to list\" part, you're right; the \"GetIterator\" tho imo is adapting","msgtype":"m.text"},"ts":1587503063000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i can see an argument for that, though it'd be even weirder for JS to split that operation apart","msgtype":"m.text"},"ts":1587505829000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"anyway we didn't have time to discuss next steps","msgtype":"m.text"},"ts":1587505908000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"agree, i'm just saying that the higher order bit in that spec line is \"get iterator\" not \"to list\"","msgtype":"m.text"},"ts":1587505909000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the point is there is no \"argument adapter\" expectation in things that are already in JS","msgtype":"m.text"},"ts":1587506223000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unlike things that go through an IDL layer","msgtype":"m.text"},"ts":1587506231000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the reason i bring up web IDL is 1) mental model \"evidence\", which i know is a fuzzy concept overall, but mainly 2) how much do we want to leave open the future possibility of using web IDL in 262","msgtype":"m.text"},"ts":1587506872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"web idl is for sure not suitable for 262, which is why dan had originally proposed something like JS IDL","msgtype":"m.text"},"ts":1587507009000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i highly doubt AggregateError makes a difference for futureproofing for some kind of IDL","msgtype":"m.text"},"ts":1587507075000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"vs existing APIs, if by future possibility you mean some kind of mass conversion to use an IDL","msgtype":"m.text"},"ts":1587507091000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, that's what i meant","msgtype":"m.text"},"ts":1587507303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok, that's good to know then","msgtype":"m.text"},"ts":1587507310000,"senderName":"ljharb","senderId":"ljharb@irc"}
]