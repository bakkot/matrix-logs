[
{"content":{"body":"shu: can you help me understand why https://ecma-international.org/ecma-262/8.0/#sec-issharedarraybuffer and https://ecma-international.org/ecma-262/8.0/#sec-isdetachedbuffer don't return false if the object lacks the internal slot (they assert instead)? also if the slot being null always means it's detached, why doesn't IsSharedArrayBuffer call into IsDetachedArrayBuffer?","msgtype":"m.text"},"ts":1592546695000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they're only ever passed things with the slot; why would you have logic for what to do when the slot isn't there?","msgtype":"m.text"},"ts":1592546809000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"dead code is bad","msgtype":"m.text"},"ts":1592546813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"typically the predicate abstract operations are written to match their names ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1592547080000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't think being named `Is` implies the function's domain is all possible values, rather than some subset of them","msgtype":"m.text"},"ts":1592547166000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`IsStringPrefix` only deals with strings, `IsExtensible` only deals with objects","msgtype":"m.text"},"ts":1592547181000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"IsStrictReference only deals with references","msgtype":"m.text"},"ts":1592547207000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(also the other Is*Reference methods)","msgtype":"m.text"},"ts":1592547218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, ok, i'm convinced","msgtype":"m.text"},"ts":1592547221000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"SABs cannot be detached","msgtype":"m.text"},"ts":1592549143000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i guess there’s no reason to not call IsDetachedArrayBuffer","msgtype":"m.text"},"ts":1592549438000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"as it is written now it’s kind of roundabout","msgtype":"m.text"},"ts":1592549455000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it’d be clearer to check if the data is a Shared Data Block and assert otherwise it is null or a Data Block, instead of the other way around","msgtype":"m.text"},"ts":1592549488000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"seems like it could be even simpler - \"if it's a shared data block, return true. else return false\"","msgtype":"m.text"},"ts":1592549496000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1592578805000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that is what it is with extra asserts","msgtype":"m.text"},"ts":1592578832000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gotcha. what's the benefit of ensuring, in the predicate, that the slot doesn't contain the wrong type of value?","msgtype":"m.text"},"ts":1592583590000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the same value as asserts anywhere else","msgtype":"m.text"},"ts":1592587398000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"clarity of intent, mainly","msgtype":"m.text"},"ts":1592587442000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"concretely in this case, the asserts are exhaustive of all possible values in that slot","msgtype":"m.text"},"ts":1592587466000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so when any of the type changes, the hope would be that it shows up in a grep, i guess","msgtype":"m.text"},"ts":1592587495000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is maybe more important practically for AB and SAB code in that a bug of omission here would be security critical if naively translated to an implementation","msgtype":"m.text"},"ts":1592587552000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but that's reaching a bit","msgtype":"m.text"},"ts":1592587556000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the exhaustiveness is good for ABs because binary data is an area where we wanna be sure, at a glance, that semantics are _really_ bounded","msgtype":"m.text"},"ts":1592587655000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: soooo isn't this the same as my assertions that [[Capability]] holds a PromiseCapability?","msgtype":"m.text"},"ts":1592592895000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for clarity of intent?","msgtype":"m.text"},"ts":1592592910000,"senderName":"ljharb","senderId":"ljharb@irc"}
]