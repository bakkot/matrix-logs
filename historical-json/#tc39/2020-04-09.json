[
{"content":{"body":"rkirsling: (1.875).toString(2) is a thing though","msgtype":"m.text"},"ts":1586393675000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"yeah, totally","msgtype":"m.text"},"ts":1586393717000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"these seem like nice little things that could be proposed","msgtype":"m.text"},"ts":1586393733000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"reading https://tc39.es/ecma262/#sec-promise.race , it doesn't seem like things should be holding onto all arguments if it resolves , I think this should be explicit that an engine is expected to not tie the lifetimes of the arguments together given potential things like weakrefs observing this","msgtype":"m.text"},"ts":1586447487000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not sure how to phrase things","msgtype":"m.text"},"ts":1586447585000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: nothing is holding onto the arguments even if nothing resolves","msgtype":"m.text"},"ts":1586447585000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the spec, sure","msgtype":"m.text"},"ts":1586447604000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and therefore implementations aren't required to do so either","msgtype":"m.text"},"ts":1586447615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this spec text is about as close as you can get to `return new Promise((resolve, reject) => { for (const promise of iterable) { promise.then(resolve, reject); } })``","msgtype":"m.text"},"ts":1586447696000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but they do","msgtype":"m.text"},"ts":1586447775000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck there's a _lot_ of places where the spec holds onto things but engines don't need to","msgtype":"m.text"},"ts":1586447822000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sounds like engines need to be updated","msgtype":"m.text"},"ts":1586447832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(WeakMaps are my favorite example; the spec for WeakMaps does not actually delete things from the internal data list when they get GC'd, but since it does not expose the internal list it doesn't matter)","msgtype":"m.text"},"ts":1586447893000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bradleymeck: was promise.race in V8 having this problem? I can take a look at it later today if so","msgtype":"m.text"},"ts":1586447897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: yep","msgtype":"m.text"},"ts":1586447947000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Bakkot: the spec for weakrefs adds explicit cleanup steps","msgtype":"m.text"},"ts":1586447990000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to weak collections","msgtype":"m.text"},"ts":1586448001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aww","msgtype":"m.text"},"ts":1586448006000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1586448012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: even the current spec says that","msgtype":"m.text"},"ts":1586449041000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: it just does it in prose","msgtype":"m.text"},"ts":1586449049000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.\"","msgtype":"m.text"},"ts":1586449071000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"whatever \"remove such key/value pairs and any associated resources\" means","msgtype":"m.text"},"ts":1586449081000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, fun","msgtype":"m.text"},"ts":1586449100000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it doesn't... actually remove it","msgtype":"m.text"},"ts":1586449119000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"is automatically removed from the WeakMap\" is a statement, not a normative requirement, and it appears to be false","msgtype":"m.text"},"ts":1586449140000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what does actually remove it mean, like call delete?","msgtype":"m.text"},"ts":1586449148000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the reachability part is also wrong given optimizations but ehh","msgtype":"m.text"},"ts":1586449166000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"remove or replace its entry in map.[[WeakMapData]]","msgtype":"m.text"},"ts":1586449175000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah there're no operational steps to actually remove it","msgtype":"m.text"},"ts":1586449196000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"however you interpret \"must detect and remove\", i guess","msgtype":"m.text"},"ts":1586449207000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"weakrefs adds the actual step of setting the entry to ~empty~","msgtype":"m.text"},"ts":1586449212000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1586449234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i can't minimally repro asking @jasnell who was pointing this out since he works with diagnostic tooling he should be better prepared to show an example","msgtype":"m.text"},"ts":1586449311000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"repro. *","msgtype":"m.text"},"ts":1586449328000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: looks like it shouldn't have a problem, reading the source","msgtype":"m.text"},"ts":1586450593000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe the rewrite to torque fixed it but node doesn't have that yet?","msgtype":"m.text"},"ts":1586450604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: re https://github.com/engine262/engine262/blob/e4c6798e1f3f89505f4c23eecc9e5d647af6b00e/src/parse.mjs#L84-L192, it looks like you've made the chaining left-associative, which is weird","msgtype":"m.text"},"ts":1586464533000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"specifically, the third example","msgtype":"m.text"},"ts":1586464537000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would expect the outermost node to correspond to the first `?.`, not the second","msgtype":"m.text"},"ts":1586464549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i tried to make it match the spec","msgtype":"m.text"},"ts":1586464559000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it not doing that?","msgtype":"m.text"},"ts":1586464571000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, let me look","msgtype":"m.text"},"ts":1586464581000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would guess no though","msgtype":"m.text"},"ts":1586464586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(actually I guess my expectation is not as strong as I thought; either representation works. but let me see what the spec's parse tree is.)","msgtype":"m.text"},"ts":1586464747000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek ah, you're right, you do match the spec","msgtype":"m.text"},"ts":1586464901000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"glad to hear it ðŸ˜…","msgtype":"m.text"},"ts":1586464914000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is not how I'd've spec'd it, intuitively, but maybe there is a reason the way I'd intuitively do it doesn't work","msgtype":"m.text"},"ts":1586464978000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it shouldn't make a difference semantically I think","msgtype":"m.text"},"ts":1586464996000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"works nicely for ast evaluation","msgtype":"m.text"},"ts":1586465025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is basically what the spec does","msgtype":"m.text"},"ts":1586465031000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the way I'd've done it would basically have made `?.` have the other associativity, which also works just the same for AST evaluation","msgtype":"m.text"},"ts":1586465066000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and also matches my mental model of how to evaluate","msgtype":"m.text"},"ts":1586465072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"basically, the way `a?.b?.c` evaluates is, you evaluate `a?.b` and then if that was non-null you evaluate `.c`","msgtype":"m.text"},"ts":1586465108000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the way I'd've done it, because it matches the way that I think about it, is that you evaluate `a` and then if that was non-null you evaluate `.b?.c`","msgtype":"m.text"},"ts":1586465138000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait, is that not how it evaluates today?","msgtype":"m.text"},"ts":1586465141000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu which of the two things that I wrote?","msgtype":"m.text"},"ts":1586465155000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the first thing I wrote is the way evaluation happens today","msgtype":"m.text"},"ts":1586465162000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the second one","msgtype":"m.text"},"ts":1586465163000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nope, it's the first one","msgtype":"m.text"},"ts":1586465171000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they are semantically equivalent though","msgtype":"m.text"},"ts":1586465176000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but... they commnute","msgtype":"m.text"},"ts":1586465180000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"commute","msgtype":"m.text"},"ts":1586465182000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1586465182000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"feel free to change it","msgtype":"m.text"},"ts":1586465195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, unless there's an expression stepper, i guess","msgtype":"m.text"},"ts":1586465201000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what is an expression stepper","msgtype":"m.text"},"ts":1586465217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"something that single-steps through expression evaluation","msgtype":"m.text"},"ts":1586465230000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1586465234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my guess is that the grammar for my preferred parse is harder to write","msgtype":"m.text"},"ts":1586465249000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe I will think about it a little","msgtype":"m.text"},"ts":1586465253000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i have a stepper for engine262","msgtype":"m.text"},"ts":1586465259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just introduce another cover grammar, ez","msgtype":"m.text"},"ts":1586465262000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1586465312000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"MyEquivalentButEasierToReadOptionalChainCover","msgtype":"m.text"},"ts":1586465344000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah the spec there is NOT a impl recommendation","msgtype":"m.text"},"ts":1586465350000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1586465352000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm my stepper died","msgtype":"m.text"},"ts":1586465385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/54170393.png","msgtype":"m.text"},"ts":1586465396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sounds like it's time for a new test!","msgtype":"m.text"},"ts":1586465416000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"implying i have tests for this thing","msgtype":"m.text"},"ts":1586465434000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it can be time for a new test even if you have zero tests","msgtype":"m.text"},"ts":1586465460000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in fact that is the most frequent reason for it to be time for a new test","msgtype":"m.text"},"ts":1586465470000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, if there's no precedent for tests, why start one now","msgtype":"m.text"},"ts":1586465502000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why rock the boat","msgtype":"m.text"},"ts":1586465508000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i wonder if i could capture the result of evaluation calls and print them with the stepper","msgtype":"m.text"},"ts":1586465561000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: does v8 not want js apis to have c++ apis anymore or is it just an area that needs work","msgtype":"m.text"},"ts":1586465667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: what's the context?","msgtype":"m.text"},"ts":1586465684000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like how there's no v8::WeakMap","msgtype":"m.text"},"ts":1586465690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's no central guidance like that afaik, but there's also no effort to expose new JS features to V8 API without a need, such as for integration with the embedder","msgtype":"m.text"},"ts":1586465762000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in general, the smaller the API surface the better","msgtype":"m.text"},"ts":1586465776000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we do have one place in node where i would like to use v8::WeakMap::New but its not a huge deal","msgtype":"m.text"},"ts":1586465786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1586465791000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"namely, you don't want to look up the WeakMap property, you want to make a weakmap directly","msgtype":"m.text"},"ts":1586465819000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah there's just one area where we have to create the weakmap by traversing through the global instead of calling something directly","msgtype":"m.text"},"ts":1586465860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think exposing WeakMap is probably reasonable","msgtype":"m.text"},"ts":1586466092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there isn't too much \"product direction\" for the API right now. may be useful to sit down with the team to decide what JS objects are reasonable to reflect in API","msgtype":"m.text"},"ts":1586466163000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"v8::Context::GetIntrinsic XD, reduce all the APIs to that! (pls no)","msgtype":"m.text"},"ts":1586466300000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: if it was a const fn that might actually be okay","msgtype":"m.text"},"ts":1586466459000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hey jridgewell I think this test is wrong","msgtype":"m.text"},"ts":1586468756000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/test262/blob/master/test/language/expressions/logical-assignment/lgcl-and-assignment-operator-non-simple-lhs.js","msgtype":"m.text"},"ts":1586468757000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's not an early error for +=","msgtype":"m.text"},"ts":1586468770000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"call expressions are not valid assignment targets","msgtype":"m.text"},"ts":1586468802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"idk why the test explicitly defines a function it isn't needed","msgtype":"m.text"},"ts":1586468819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling it was actually rwaldron who wrote it :)","msgtype":"m.text"},"ts":1586468843000,"senderName":"drousso_","senderId":"drousso_@irc"},
{"content":{"body":"wait are call expressions valid assignment targets","msgtype":"m.text"},"ts":1586468847000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is this that ie backwards compat thing","msgtype":"m.text"},"ts":1586468859000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're valid at parse time, yes","msgtype":"m.text"},"ts":1586468867000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling it's an early error","msgtype":"m.text"},"ts":1586468890000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but browsers all agree it should not be, for back-compat reasons","msgtype":"m.text"},"ts":1586468900000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ohh","msgtype":"m.text"},"ts":1586468906000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it is on my todo list to fix this discrepency","msgtype":"m.text"},"ts":1586468910000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"funky","msgtype":"m.text"},"ts":1586468913000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/54173912.png","msgtype":"m.text"},"ts":1586468921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fix as in \"make the spec match reality\", I assume?","msgtype":"m.text"},"ts":1586468926000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling yup","msgtype":"m.text"},"ts":1586468931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1586468934000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek try `false && (a() = b)`","msgtype":"m.text"},"ts":1586468943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess the test is valid then, we'll just intentionally fail it for now lol","msgtype":"m.text"},"ts":1586468950000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1586468957000,"senderName":"drousso_","senderId":"drousso_@irc"},
{"content":{"body":"Bakkot: its the ones that throw reference errors","msgtype":"m.text"},"ts":1586468967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, that's something which changed kind of recently","msgtype":"m.text"},"ts":1586468987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"was changed by rkirsling actually, IIRC","msgtype":"m.text"},"ts":1586468994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also yeah now that we're having this discussion I do remember the IE compatibility thing","msgtype":"m.text"},"ts":1586468997000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: yup!","msgtype":"m.text"},"ts":1586469028000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1527","msgtype":"m.text"},"ts":1586469043000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there an issue open for the web reality concern?","msgtype":"m.text"},"ts":1586469104000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"looking...","msgtype":"m.text"},"ts":1586469121000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"are there any counters for assigning to a call expression","msgtype":"m.text"},"ts":1586469126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek yes I added some to V8 ages ago","msgtype":"m.text"},"ts":1586469158000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably they are still there","msgtype":"m.text"},"ts":1586469165000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah I'm actually surprised at myself for forgetting this whole discussion","msgtype":"m.text"},"ts":1586469187000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: hm i don't see it","msgtype":"m.text"},"ts":1586469199000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`lhsiscallinsloppy` or something","msgtype":"m.text"},"ts":1586469207000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless it doesn't show up on https://www.chromestatus.com/metrics/feature/popularity","msgtype":"m.text"},"ts":1586469207000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm","msgtype":"m.text"},"ts":1586469214000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it just doesn't contain the word \"assign\"","msgtype":"m.text"},"ts":1586469220000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"0.06336%","msgtype":"m.text"},"ts":1586469227000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.chromestatus.com/metrics/feature/timeline/popularity/1764","msgtype":"m.text"},"ts":1586469249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems high","msgtype":"m.text"},"ts":1586469285000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but 904 sites listed seems evangelizable, if someone wants to do the work :-)","msgtype":"m.text"},"ts":1586469307000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"apparently people really like assigning to call expressions","msgtype":"m.text"},"ts":1586469328000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my guess is that 99% of the occurrences are a single library","msgtype":"m.text"},"ts":1586469363000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"possibly 100%","msgtype":"m.text"},"ts":1586469366000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ugh, I could swear there was an issue for this, but I can't find it","msgtype":"m.text"},"ts":1586469380000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for example, altho i can't craft a counter to prove it, i'm convinced 100% of the \"non-regex objects with Symbol.match\" occurrences are a core-js feature detection","msgtype":"m.text"},"ts":1586469415000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh here","msgtype":"m.text"},"ts":1586469440000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/257","msgtype":"m.text"},"ts":1586469441000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the title is wrong","msgtype":"m.text"},"ts":1586469458000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but scroll to the bottom","msgtype":"m.text"},"ts":1586469462000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah fascinating","msgtype":"m.text"},"ts":1586469540000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I wish I had permissions to read https://bugs.chromium.org/p/chromium/issues/detail?id=358346","msgtype":"m.text"},"ts":1586469702000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I can't see why it would not be public","msgtype":"m.text"},"ts":1586469719000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyone on chrome able to fix that ^? shu?","msgtype":"m.text"},"ts":1586469732000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(this is the bug for https://codereview.chromium.org/217823003 )","msgtype":"m.text"},"ts":1586469746000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: that CL must be linking to the wrong bug","msgtype":"m.text"},"ts":1586470602000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: that issue has nothing to do with JS","msgtype":"m.text"},"ts":1586470650000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu dang :(","msgtype":"m.text"},"ts":1586470667000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i tried some one-off combinations of the id and didn't land on anything useful either","msgtype":"m.text"},"ts":1586470714000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: ah i had to read fairly down the comments to see, but that is the right bug","msgtype":"m.text"},"ts":1586470783000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't think i can open it however...","msgtype":"m.text"},"ts":1586470786000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"aw that's even worse","msgtype":"m.text"},"ts":1586470802000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I need to make a note for myself that if I ever go work for google again I gotta go read that issue","msgtype":"m.text"},"ts":1586470830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm pretty sure i can tell you the interesting bit though","msgtype":"m.text"},"ts":1586470873000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"at the time, there was a site that broke because it had this snippet:","msgtype":"m.text"},"ts":1586470886000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"  x.f() += y","msgtype":"m.text"},"ts":1586470887000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1586470934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"any tips on who we have to email to fix that snippet?","msgtype":"m.text"},"ts":1586470939000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sundarâŠ™gc","msgtype":"m.text"},"ts":1586470969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that i'm unsure so i'd need to check up my chain about this kind of disclosure","msgtype":"m.text"},"ts":1586470979000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also it is from 2014","msgtype":"m.text"},"ts":1586470983000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i didn't read backlog, what's the context?","msgtype":"m.text"},"ts":1586470997000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"context is that `f() = y` continues to be a runtime error per browsers and a parsetime error per spec, which is bad","msgtype":"m.text"},"ts":1586471042000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, okay, welp","msgtype":"m.text"},"ts":1586471059000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"was doing archeology to see if I could find a concrete instance of why browsers need this","msgtype":"m.text"},"ts":1586471062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's unfortunate but i'd need to be better convinced to try this change again","msgtype":"m.text"},"ts":1586471104000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think at this point we are unlikely to get browsers to change; my intent is to make the spec match browsers","msgtype":"m.text"},"ts":1586471162000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1586471176000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or rather, specifically, to make `f() = y` a runtime error in sloppy mode and an early error in strict mode, which matches firefox and JSC","msgtype":"m.text"},"ts":1586471185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sgtm?","msgtype":"m.text"},"ts":1586471186000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, in this instance it was compound assignment","msgtype":"m.text"},"ts":1586471196000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, compound or simple I guess","msgtype":"m.text"},"ts":1586471205000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is = standin there for all assignment operators?","msgtype":"m.text"},"ts":1586471208000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1586471208000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's use counters: https://github.com/tc39/ecma262/issues/257#issuecomment-502878708","msgtype":"m.text"},"ts":1586471218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm those are pretty low","msgtype":"m.text"},"ts":1586471585000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"strict mode seems fairly not risky","msgtype":"m.text"},"ts":1586471757000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: i opened the issue","msgtype":"m.text"},"ts":1586472402000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: sweet, thanks!","msgtype":"m.text"},"ts":1586472485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(it's also a good showcase for the amount of work backward incompats cause, and why browsers often don't have any appetite for trying anything)","msgtype":"m.text"},"ts":1586472645000,"senderName":"shu","senderId":"shu@irc"}
]