[
{"content":{"body":"uncurrying `this` is... painful for perf ^_^;","msgtype":"m.text"},"ts":1567780234000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how many proposals have ways of tackling this ? bind / pipeline seem to","msgtype":"m.text"},"ts":1567780271000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"is it even... uncurryable?","msgtype":"m.text"},"ts":1567780278000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"`this` is","msgtype":"m.text"},"ts":1567780301000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or do you mean erasing the receiver from the calls (e.g. the `(0, a.b)(...)` trick that babel uses","msgtype":"m.text"},"ts":1567780302000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"e.g. charCodeAt => Function.call.bind(charCodeAt)","msgtype":"m.text"},"ts":1567780323000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"nah, receiver is fine","msgtype":"m.text"},"ts":1567780350000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"uncurrying `this` by currying `Function#call` instead ðŸ¤¯","msgtype":"m.text"},"ts":1567780396000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"i can't think of a way of tricking the receiver without mutation","msgtype":"m.text"},"ts":1567780463000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which also would have perf issues","msgtype":"m.text"},"ts":1567780470000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`const call = Function.prototype.call.bind(Function.prototype.call)`; `call(func, receiver, ...args)` ðŸ¤”","msgtype":"m.text"},"ts":1567780656000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"Jessidhia: https://jsperf.com/uncurry-this-robustness/1 , though those benchmarks don't show the nightmare of when it is used in other functions that are being optimized","msgtype":"m.text"},"ts":1567781207000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"basically, the VMs can't seem to figure out any of the calls being an uncurried this","msgtype":"m.text"},"ts":1567781249000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so they can't do optimizations that they normally would, and even worse won't do the optimizations for builtins","msgtype":"m.text"},"ts":1567781286000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so the engines need to be taught?","msgtype":"m.text"},"ts":1567781933000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"its a difficult thing to analyze and probably not cheap to do so","msgtype":"m.text"},"ts":1567781962000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"some alternative would probably be much easier in the form or a proposal","msgtype":"m.text"},"ts":1567781980000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"even a `Function.prototype.uncurryThis` would be easier to deal with","msgtype":"m.text"},"ts":1567782001000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but if there are already proposals that handle this use case :shr","msgtype":"m.text"},"ts":1567782024000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ðŸ¤·","msgtype":"m.text"},"ts":1567782029000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]