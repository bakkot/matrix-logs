[
{"content":{"body":"I don't think the spec says that not-present *operation* args are undefined","msgtype":"m.text"},"ts":1573182268000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so you have to distinguish between operations and built-in functios","msgtype":"m.text"},"ts":1573182327000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i guess that’s true, it doesn’t say anything about it either way - but since they’re conceptually the same as normal function calls, and use the same notation, that seems like more a gap in https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations than anything else","msgtype":"m.text"},"ts":1573187925000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don'","msgtype":"m.text"},"ts":1573188098000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I don't know -- it might be intentional.","msgtype":"m.text"},"ts":1573188111000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i.e., there's no need to define a \"default\" value for missing op args because op algorithms will/should always check for the presence of optional args.","msgtype":"m.text"},"ts":1573188187000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that’s true","msgtype":"m.text"},"ts":1573188281000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it’s certainly cleaner for an abstract op to pivot on presence","msgtype":"m.text"},"ts":1573188303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/tc39/proposal-iterator-helpers/issues/63","msgtype":"m.text"},"ts":1573188477000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It looks like there are a few cases where an alg should be checking for presence but isn't.","msgtype":"m.text"},"ts":1573188538000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"are you talking about 63 or something else","msgtype":"m.text"},"ts":1573188600000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not talking about 63.","msgtype":"m.text"},"ts":1573188766000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"bakkot: the next value propagation is kind of weird tbh, it doesn't work at all for stuff like filtering and flat mapping","msgtype":"m.text"},"ts":1573188773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/doesn't work/doesn't map cleanly/","msgtype":"m.text"},"ts":1573188797000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah agreed","msgtype":"m.text"},"ts":1573188812000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"ljharb: correction: not \"a few cases\", just one case (that I know of): OrdinaryCreateFromConstructor","msgtype":"m.text"},"ts":1573188831000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"actually i think filter might need changes in that case","msgtype":"m.text"},"ts":1573188835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"next(v) will call next(v) on the inner iterator multiple times i think","msgtype":"m.text"},"ts":1573188852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OrdinaryCreateFromConstructor has a sentence in the protocol that gives a 'default value' for the optional param, but the alg itself doesn't accomplish that.","msgtype":"m.text"},"ts":1573188923000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: that’s done with steps tho all over the place, that one’s just in prose","msgtype":"m.text"},"ts":1573189709000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"using default arg syntax would probably clean up a lot of abstract ops :-)","msgtype":"m.text"},"ts":1573189725000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what if built-in generators enqueue NormalCompletion(~empty~) instead of NormalCompletion(undefined) when next is called with no args","msgtype":"m.text"},"ts":1573189870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: that's what i'm saying: it's just in the prose, not in the alg.","msgtype":"m.text"},"ts":1573190229000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: we use default arg syntax in engine262","msgtype":"m.text"},"ts":1573190253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe horrifying https://github.com/engine262/engine262/blob/master/src/intrinsics/DataView.mjs#L17","msgtype":"m.text"},"ts":1573190290000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: would `.next()` and `.next(undefined)` be observably different?","msgtype":"m.text"},"ts":1573191879000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"next() calls the wrapped iterator next()","msgtype":"m.text"},"ts":1573191907000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"next(undefined) calls the wrapped iterator next(undefined)","msgtype":"m.text"},"ts":1573191915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i meant for builtin generators","msgtype":"m.text"},"ts":1573191918000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that's how they'd be different","msgtype":"m.text"},"ts":1573191928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/proposal-iterator-helpers/issues/63","msgtype":"m.text"},"ts":1573191951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess i’m confused about the overarching issue","msgtype":"m.text"},"ts":1573192047000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"basically you call next() on a built-in generator","msgtype":"m.text"},"ts":1573192067000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which results in `Yield()` returning `undefined`","msgtype":"m.text"},"ts":1573192074000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then it does `IteratorNext(iterated, undefined)`","msgtype":"m.text"},"ts":1573192081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of `IteratorNext(iterated)`","msgtype":"m.text"},"ts":1573192089000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so absent your proposal, how would this come up","msgtype":"m.text"},"ts":1573192094000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1573192125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if we miss the \"is present\" check at any point","msgtype":"m.text"},"ts":1573192152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we might accidentally call with [undefined]","msgtype":"m.text"},"ts":1573192165000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"regardless of my proposal","msgtype":"m.text"},"ts":1573192169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean, with the current spec, where would i be observing “the thing that issue 33 would change\"","msgtype":"m.text"},"ts":1573192642000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think you would","msgtype":"m.text"},"ts":1573192668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"none of our iterators forward next args at the moment","msgtype":"m.text"},"ts":1573192679000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where would `arguments.length === 0` be observable","msgtype":"m.text"},"ts":1573192898000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like `x.map().next()`","msgtype":"m.text"},"ts":1573192978000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would call `x.next(undefined)`","msgtype":"m.text"},"ts":1573192983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"vs `x.next()`","msgtype":"m.text"},"ts":1573192988000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems better to avoid that, if possible","msgtype":"m.text"},"ts":1573193084000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie i think language things shouldn’t be passing `undefined` if it can omit the arg instead","msgtype":"m.text"},"ts":1573193104000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah thats why i brought this up lol","msgtype":"m.text"},"ts":1573193128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wanted some opinions from folks on it (https://github.com/tc39/proposal-iterator-helpers/issues/63)","msgtype":"m.text"},"ts":1573193147000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in your diff, i don’t like \"is a built-in generator\"","msgtype":"m.text"},"ts":1573193312000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why is that part needed?","msgtype":"m.text"},"ts":1573193324000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because we can't pass ~empty~ to jsland","msgtype":"m.text"},"ts":1573193356000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, but you can omit an argument","msgtype":"m.text"},"ts":1573193374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1573193380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it goes to Yield","msgtype":"m.text"},"ts":1573193384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yield just returns something","msgtype":"m.text"},"ts":1573193391000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ftr i don’t have a complete understanding here of how generators work in the spec","msgtype":"m.text"},"ts":1573193401000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a completion","msgtype":"m.text"},"ts":1573193401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1573193408000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"basically yield suspends the context","msgtype":"m.text"},"ts":1573193423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so `Yield()` returns something; it could be undefined","msgtype":"m.text"},"ts":1573193424000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"later, the context is resumed with a completion","msgtype":"m.text"},"ts":1573193438000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so can’t Yield return `NormalCompletion(~empty~)` for *any* next call with zero args?","msgtype":"m.text"},"ts":1573193443000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and the Yield that suspended the context returns that completion","msgtype":"m.text"},"ts":1573193450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1573193473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because then in js code, `yield` would return ~empty`","msgtype":"m.text"},"ts":1573193489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"~empty~*","msgtype":"m.text"},"ts":1573193492000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure but the syntactic yield could convert empty to undefined","msgtype":"m.text"},"ts":1573193622000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the abstract op doesn’t have to do that","msgtype":"m.text"},"ts":1573193628000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1573193643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"perhaps","msgtype":"m.text"},"ts":1573193668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why does the spec have lists of errors for parsing","msgtype":"m.text"},"ts":1573253778000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does anything actually have that ability","msgtype":"m.text"},"ts":1573253783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lists?","msgtype":"m.text"},"ts":1573254265000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"Otherwise, let body be a List of one or more SyntaxError objects representing the parsing errors and/or early errors.\"","msgtype":"m.text"},"ts":1573254299000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you hit an error, how can you even continue on to find more errors","msgtype":"m.text"},"ts":1573254327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1573254343000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'd imagine there's a reason this is here","msgtype":"m.text"},"ts":1573254383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just","msgtype":"m.text"},"ts":1573254386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm really not sure what it is","msgtype":"m.text"},"ts":1573254392000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean I think it makes sense from a spec perspective","msgtype":"m.text"},"ts":1573254394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/iKorTR7Z/","msgtype":"m.text"},"ts":1573254427000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"dammit","msgtype":"m.text"},"ts":1573254430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"did not mean to make a snippet","msgtype":"m.text"},"ts":1573254438000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if there are a bunch that apply the spec can concat as many as it likes but ultimately","msgtype":"m.text"},"ts":1573254444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"> If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.","msgtype":"m.text"},"ts":1573254444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I wish \"send as messages\" were the default option...)","msgtype":"m.text"},"ts":1573254457000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i guess you could find multiple early errors","msgtype":"m.text"},"ts":1573254469000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think multiple syntax errors is possible with the grammar though","msgtype":"m.text"},"ts":1573254482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: is this right?","msgtype":"m.text"},"ts":1573254507000,"senderName":"devsnek","senderId":"devsnek@irc"}
]