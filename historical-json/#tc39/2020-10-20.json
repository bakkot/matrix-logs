[
{"content":{"body":"rkirsling: hi, do you have ~10 mins now to talk about next steps for the detach stuff?","msgtype":"m.text"},"ts":1603153804000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sure!","msgtype":"m.text"},"ts":1603153813000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: what are the open questions right now?","msgtype":"m.text"},"ts":1603153909000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"1) strict assignment throwing is neither SM nor V8 reality, but is JSC reality?","msgtype":"m.text"},"ts":1603153933000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"um, so I believe this stuff is uncontroversial:","msgtype":"m.text"},"ts":1603153958000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2207","msgtype":"m.text"},"ts":1603153959000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"then yeah, strict assignment -- remember that JSC was throwing on Get/Set in general so we can technically do whatever","msgtype":"m.text"},"ts":1603153996000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think it's reasonable for V8 to try to make the strict case throw and see if any bugs arise","msgtype":"m.text"},"ts":1603154135000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and the last thing is about callback-taking methods on %TypedArray%: V8/SM already don't throw so I think that part's uncontroversial, but V8 stops iterating which was a unique sort of double-spec-violation","msgtype":"m.text"},"ts":1603154143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1603154146000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'll come back to #2207 last, though from a quick reading that also looks like it encodes the \"do not stop iterating\" behavior, is that right?","msgtype":"m.text"},"ts":1603154182000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh 2207 is actually separate; it's sort of \"pseudo-editorial\" because the spec has a silly situation where it doesn't always guard checks of [[ArrayLength]] even though this is untouched upon buffer detachment","msgtype":"m.text"},"ts":1603154274000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"saying what we mean\" there would allow a better editorial refactor to follow","msgtype":"m.text"},"ts":1603154306000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay, then let's return to that last","msgtype":"m.text"},"ts":1603154308000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but the \"don't stop iterating\" is already merged","msgtype":"m.text"},"ts":1603154319000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the whether we should continue iterate question seems related to this comment: https://github.com/tc39/ecma262/pull/1908#issuecomment-648277813","msgtype":"m.text"},"ts":1603154319000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh hmm","msgtype":"m.text"},"ts":1603154370000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well so the thing is that https://tc39.es/ecma262/#sec-%typedarray%.prototype.map has explicit steps","msgtype":"m.text"},"ts":1603154418000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and it was implicitly throwing on Get/Set but now it won't throw at all","msgtype":"m.text"},"ts":1603154432000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it only grabs the length once","msgtype":"m.text"},"ts":1603154440000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so if the callback causes detachment, then we'll keep iterating for the original length","msgtype":"m.text"},"ts":1603154455000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is what I mean","msgtype":"m.text"},"ts":1603154458000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay, that sounds fine then","msgtype":"m.text"},"ts":1603154463000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and that is the existing behavior in SM","msgtype":"m.text"},"ts":1603154465000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1603154481000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and doesn't violate the invariant anba is talking about there, since it's cached","msgtype":"m.text"},"ts":1603154484000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1603154487000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think the incompat risk for both the strict assignment and the iteration changes for v8 should be low, but the strict assignment throwing is higher","msgtype":"m.text"},"ts":1603154518000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1603154530000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the worry with the existing behavior boils down to","msgtype":"m.text"},"ts":1603154544000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's really weird to say that [[Set]] \"succeeded\" in the early out case","msgtype":"m.text"},"ts":1603154568000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and the overarching semantics for assignment are \"throw if not succeeded in strict mode\"","msgtype":"m.text"},"ts":1603154593000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"agreed, it would be needlessly more exotic than it needs to be, so i'm for changing it if we can get away with it","msgtype":"m.text"},"ts":1603154620000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wonderful","msgtype":"m.text"},"ts":1603154661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay, let me read #2207 now...","msgtype":"m.text"},"ts":1603154712000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: the [[DefineOwnProperty]] addition looks a bug, calling it editorial lgtm","msgtype":"m.text"},"ts":1603154863000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1603154877000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: for [[OwnPropertyKeys]], do you happen to know if that's the implementation behavior as well?","msgtype":"m.text"},"ts":1603154880000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah if you see Bakkot's comment (https://github.com/tc39/ecma262/pull/2164#issuecomment-711092235) it is in fact web reality","msgtype":"m.text"},"ts":1603154912000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and in the spirit of what we got consensus on","msgtype":"m.text"},"ts":1603154922000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah cool, missed it cause it was in the other PR","msgtype":"m.text"},"ts":1603154974000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then #2207 looks great to me, ship it","msgtype":"m.text"},"ts":1603154981000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so to recap:","msgtype":"m.text"},"ts":1603155022000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"- JSC is changing its behavior to match what's merged, including #2207","msgtype":"m.text"},"ts":1603155040000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"- V8 needs to throw on strict assignment and continue iteration in TA built-ins","msgtype":"m.text"},"ts":1603155056000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"- SM doesn't need to do anything","msgtype":"m.text"},"ts":1603155064000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think that's correct? it's possible that there's *some* tweak for SM that I'm forgetting but at least within the context of all we've discussed here, yes","msgtype":"m.text"},"ts":1603155104000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"while we're here we should add a note somewhere that [[ArrayLength]] mustn't be accessed on detached stuff","msgtype":"m.text"},"ts":1603155138000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"even though it's \"fine\"","msgtype":"m.text"},"ts":1603155142000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"thanks for doing all this work rkirsling, appreciate it","msgtype":"m.text"},"ts":1603155157000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"my pleasure, I appreciate you backing me up","msgtype":"m.text"},"ts":1603155177000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and yeah I think there should be a subsequent editorial for [[ArrayLength]] (doesn't have to be subsequent but in the interest of separating \"fixing the imminent problems\" from \"making it readable and maintainable\")","msgtype":"m.text"},"ts":1603155229000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: oh shoot there's one little potential compat concern","msgtype":"m.text"},"ts":1603155314000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which I overlooked","msgtype":"m.text"},"ts":1603155320000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I was thinking that JSC always threw on [[Get]]/[[Set]], which is true for the detached buffer state but *not* true for OOB","msgtype":"m.text"},"ts":1603155363000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's still worth a shot if we can get away with it but...hmm","msgtype":"m.text"},"ts":1603155397000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what's worth the shot, that we throw for OOB?","msgtype":"m.text"},"ts":1603155499000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wait, have we thrown for OOB?","msgtype":"m.text"},"ts":1603155503000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err, have we specced throwing for OOB?","msgtype":"m.text"},"ts":1603155510000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so what I mean is https://tc39.es/ecma262/#sec-integerindexedelementset step 6","msgtype":"m.text"},"ts":1603155566000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that was not changed in my PR","msgtype":"m.text"},"ts":1603155630000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah, you mean also in strict mode","msgtype":"m.text"},"ts":1603155692000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, sorry","msgtype":"m.text"},"ts":1603155708000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Alexey's gonna make an issue just to track the concern formally","msgtype":"m.text"},"ts":1603155738000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm yeah nobody throws","msgtype":"m.text"},"ts":1603155741000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that makes me more worried, oob can happen accidentally much more easily than detachment","msgtype":"m.text"},"ts":1603155756000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1603155761000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and it feels bad to have detachment not do the same thing as OOB","msgtype":"m.text"},"ts":1603155776000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1603155809000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm 50-50 on that","msgtype":"m.text"},"ts":1603155842000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"even after your heroic efforts here we are still straddling the line between the \"detachment is like reducing the length to 0\" mental model and \"detachment is a fundamental state change\" mental model","msgtype":"m.text"},"ts":1603155886000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can squint and see maybe it's fine to have detachment throw for strict assignment but not OOB","msgtype":"m.text"},"ts":1603155898000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but it does make me less enthusiastic about trying throwing behavior for strict assignment on detached","msgtype":"m.text"},"ts":1603155925000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think it makes me lean towards _not_ changing existing behavior to throwing","msgtype":"m.text"},"ts":1603155989000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1603155997000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"at which point I think we also would need a note or something to explain why we're setting a flag called `succeeded` to true?","msgtype":"m.text"},"ts":1603156034000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also, changing it throwing might have more compat risk than i initially thought due to those weird TAs-on-the-prototype use cases","msgtype":"m.text"},"ts":1603156095000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm going to punt on changing the v8 strict assignment behavior for now, we need to think more carefully about this i think","msgtype":"m.text"},"ts":1603156151000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since we already _cannot_ have our cake of having detachment be signaled via an exception in all cases, how much do we really wanna fight here?","msgtype":"m.text"},"ts":1603156190000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":":nod:","msgtype":"m.text"},"ts":1603156206000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and I mean, on that note, anba seemed to be hoping for us to go further toward consistency, but we just punted since it's web-compatible to remove more errors later","msgtype":"m.text"},"ts":1603156364000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I kind of assumed we would eventually","msgtype":"m.text"},"ts":1603156372000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that said, I was only thinking about method calls and not about strict assignment","msgtype":"m.text"},"ts":1603156401000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"kind of embarrassed by all the things I failed to consider here lol","msgtype":"m.text"},"ts":1603156420000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh hm","msgtype":"m.text"},"ts":1603156425000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there is also a surprisingly huge number of sites that detach ABs: https://chromestatus.com/metrics/feature/timeline/popularity/3257","msgtype":"m.text"},"ts":1603156435000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there're some URLs there to safari at and see if anything seems amiss","msgtype":"m.text"},"ts":1603156531000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: wow.","msgtype":"m.text"},"ts":1603156764000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that first one is a Wix site so it might be framework-level","msgtype":"m.text"},"ts":1603156836000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think the sixth one is too","msgtype":"m.text"},"ts":1603156939000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah, i reckon it's a library","msgtype":"m.text"},"ts":1603156962000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i wonder what it's doing, no time left today to dig in","msgtype":"m.text"},"ts":1603156969000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and the fourth","msgtype":"m.text"},"ts":1603156989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but given Safar is the odd one out i'd be interested to hear if there's anything odd happening right now","msgtype":"m.text"},"ts":1603156991000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Safari*","msgtype":"m.text"},"ts":1603156996000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm not seeing any uncaught errors for detached buffers in the console, is the thing","msgtype":"m.text"},"ts":1603157022000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i wonder if there's a way to get a more exact URL for what triggered the use counter","msgtype":"m.text"},"ts":1603157074000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there might be in HTTP Archive","msgtype":"m.text"},"ts":1603157086000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this tawk.to live chat service might be a second culprit","msgtype":"m.text"},"ts":1603157104000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think all of these pretty much involve one of those two","msgtype":"m.text"},"ts":1603157188000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1603157217000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay not the 10th one but maybe that one requires a more specific path to hit","msgtype":"m.text"},"ts":1603157274000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lmk if you find anything more, gotta run for now","msgtype":"m.text"},"ts":1603157284000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1603157288000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or if you come up with a HTTP Archive query","msgtype":"m.text"},"ts":1603157299000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(remember don't run it!! let me run it)","msgtype":"m.text"},"ts":1603157303000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hahaha indeed","msgtype":"m.text"},"ts":1603157384000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is there some way to access a partially initialized object literal? { get y() {return 1;},/* access .y ,*/z:0 }","msgtype":"m.text"},"ts":1603206972000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"threw up an invariant https://github.com/codehag/documenting-invariants/issues","msgtype":"m.text"},"ts":1603209425000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this came up slightly t beginning of decorators calls","msgtype":"m.text"},"ts":1603209442000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck there is not","msgtype":"m.text"},"ts":1603210799000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I hoped so","msgtype":"m.text"},"ts":1603210810000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"for classes you can","msgtype":"m.text"},"ts":1603210814000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"class fields*","msgtype":"m.text"},"ts":1603210826000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: how so?","msgtype":"m.text"},"ts":1603211138000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fields don’t run until the instance is initialized","msgtype":"m.text"},"ts":1603211161000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://twitter.com/bradleymeck/status/1318580963711029252 shows partial init of an object","msgtype":"m.text"},"ts":1603211165000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"The fields aren’t part of the initialization, in my mind","msgtype":"m.text"},"ts":1603211224000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just like constructor assignment after super wouldn’t be","msgtype":"m.text"},"ts":1603211232000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"w/e you want to call it, the object doesn't have its full expected shape as described by the class' code","msgtype":"m.text"},"ts":1603211301000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sure, that’s observable with any stored code. the class body defines the class constructor, not the instances","msgtype":"m.text"},"ts":1603211363000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"can you use static fields to get a partial view of the constructor?","msgtype":"m.text"},"ts":1603211380000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what does that mean, you mean before all the static fields are defined? yes","msgtype":"m.text"},"ts":1603211437000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"both allow referencing the target prior to all of them being applied","msgtype":"m.text"},"ts":1603211556000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rkirsling I've found something in  %TypedArray%.prototype.find that makes it behave differently than how I think you expected all of the methods in the list you gave me to work from","msgtype":"m.text"},"ts":1603212830000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rkirsling https://github.com/tc39/test262/pull/2833#issuecomment-709635850","msgtype":"m.text"},"ts":1603212847000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Actually, just kidding, false alarm. Nothing to see here.","msgtype":"m.text"},"ts":1603212913000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1603212917000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"These will be updated shortly","msgtype":"m.text"},"ts":1603212924000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"(There was a typo in the test lol)","msgtype":"m.text"},"ts":1603212944000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"hurray for false alarms","msgtype":"m.text"},"ts":1603218778000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rickbutton: lmk if you need any followup or links to things","msgtype":"m.text"},"ts":1603220801000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: will do ty","msgtype":"m.text"},"ts":1603220888000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"shu: aaaaugh this [[Set]] thing is somewhat mind-bending","msgtype":"m.text"},"ts":1603236661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what we have to do seems adequately clear but how to justify it is breaking my brain","msgtype":"m.text"},"ts":1603236686000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: i'm happy to talk through it","msgtype":"m.text"},"ts":1603236747000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wanna do a call?","msgtype":"m.text"},"ts":1603236751000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh sure, that works","msgtype":"m.text"},"ts":1603236760000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: what platform?","msgtype":"m.text"},"ts":1603236889000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: i'll send a link, sec","msgtype":"m.text"},"ts":1603236989000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"obrigado","msgtype":"m.text"},"ts":1603237010000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]