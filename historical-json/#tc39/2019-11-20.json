[
{"content":{"body":"what if there was some sort of syntax like `{ frozen x() {} } `","msgtype":"m.text"},"ts":1574271641000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: littledan: this might interest y'all","msgtype":"m.text"},"ts":1574271732000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this has been suggested a while ago at least on the object  itself rather than per prop","msgtype":"m.text"},"ts":1574271762000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"decorators seem fine to me here honestly","msgtype":"m.text"},"ts":1574271776000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have get/set, and I think (hope?) decorators are kind if unlikely to happen with the current design","msgtype":"m.text"},"ts":1574271819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1574271863000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why do I not like the current decorator proposal?","msgtype":"m.text"},"ts":1574271877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not liking != unlikely to happen","msgtype":"m.text"},"ts":1574271888000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"way too much of a dsl","msgtype":"m.text"},"ts":1574271895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess others might not care about it but I'm hoping they do","msgtype":"m.text"},"ts":1574271919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but in any case, too much weird scoping and syntax imo","msgtype":"m.text"},"ts":1574271953000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: in any case,I wasn't proposing that in replacement of decorators","msgtype":"m.text"},"ts":1574272843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"both could exist","msgtype":"m.text"},"ts":1574272846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: unless they can figure out how to be a first-class value, i can't see them advancing","msgtype":"m.text"},"ts":1574273455000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I finally looked up what a sticky regex is","msgtype":"m.text"},"ts":1574274607000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sigh.","msgtype":"m.text"},"ts":1574274689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`y` is for yikes, I guess.","msgtype":"m.text"},"ts":1574274765000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: i *think*/suspect it only exists so that the behavior of String.prototype.search could be self-hosted","msgtype":"m.text"},"ts":1574274979000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"huh.","msgtype":"m.text"},"ts":1574275293000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, at least it would feel internally consistent if it simply ignored the substring prior to `lastIndex`","msgtype":"m.text"},"ts":1574275495000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but the fact that it only matches exactly *at* `lastIndex` is making me unable to even right now","msgtype":"m.text"},"ts":1574275578000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/proposal-string-replaceall/issues/17#issuecomment-537455698","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> So the final effect is that while non-sticky global expressions replace every matching substring, sticky global expressions only replace every consecutive match *from the beginning*â€”and if the beginning doesn't match, then they don't replace anything at all.","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> Concretely, we get this potentially surprising behavior:","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> ```js","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> \"No Uppercase!\".replaceAll(/[A-Z]/g, \"\");\t// \"o ppercase!\"","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> \"No Uppercase?\".replaceAll(/[A-Z]/gy, \"\");\t// \"o Uppercase?\"","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> \"NO UPPERCASE!\".replaceAll(/[A-Z]/gy, \"\");\t// \" UPPERCASE!\"","msgtype":"m.text"},"ts":1574280259000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"> ```","msgtype":"m.text"},"ts":1574280260000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1574284168000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I mean I guess that's how it has to be","msgtype":"m.text"},"ts":1574284536000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but yuck.","msgtype":"m.text"},"ts":1574284564000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"gibson042 rkirsling the examples with replaceAll are a bit annoying for me","msgtype":"m.text"},"ts":1574287783000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"the problem is: this is not a behavior specific for replaceAll, but RegExp.prototype[Symbol.replace]","msgtype":"m.text"},"ts":1574287806000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"that's already a thing","msgtype":"m.text"},"ts":1574287819000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"so it's not a surprising behavior for replaceAll","msgtype":"m.text"},"ts":1574287838000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"unless we want to disconnect replaceAll from the RegExp method, it's not any surprise","msgtype":"m.text"},"ts":1574287861000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oh yeah I'm not concerned with replaceAll here","msgtype":"m.text"},"ts":1574287989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I just literally didn't know what `y` did until today and am experiencing five stages of grief about it","msgtype":"m.text"},"ts":1574288015000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ahahh I've been much exposed to RegExp, I'm beyond grief for flags at this point","msgtype":"m.text"},"ts":1574288055000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":":p","msgtype":"m.text"},"ts":1574288092000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the examples from gibson042 are good as: \"replaceAll returns the same values as RegExp#@@replace, when searchValue is a RegExp\", and replaceAll do it as String#replace does. So I believe this is a huge +1 for consistency","msgtype":"m.text"},"ts":1574288222000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"agree.","msgtype":"m.text"},"ts":1574288356000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the best alternative would always cast toString on the searchValue, but that would smell hard","msgtype":"m.text"},"ts":1574288371000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"like: `'foo/bar/baz'.replaceAll(/bar/, '='); // 'foo=baz'","msgtype":"m.text"},"ts":1574288418000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"mostly because it would cast any object to string","msgtype":"m.text"},"ts":1574288443000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"and tbh, it's alright having the behavior closer to .replace","msgtype":"m.text"},"ts":1574288468000,"senderName":"leobalter","senderId":"leobalter@irc"}
]