[
{"content":{"body":"yay","msgtype":"m.text"},"ts":1579305675000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right now Iterator.from does OrdinaryHasInstance(%Iterator%, iterator)","msgtype":"m.text"},"ts":1579305921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would it be reasonable to do OrdinaryHasInstance(this value, iterator)","msgtype":"m.text"},"ts":1579305936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for subclassing","msgtype":"m.text"},"ts":1579305939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nvm scratch that","msgtype":"m.text"},"ts":1579306630000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"y'all ever seen this https://github.com/pgbovine/OnlinePythonTutor","msgtype":"m.text"},"ts":1579307601000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ignore python in the name","msgtype":"m.text"},"ts":1579307620000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it runs js too","msgtype":"m.text"},"ts":1579307621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hello.","msgtype":"m.text"},"ts":1579378385000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"I have submitted an idea on discourse, namely \"Optional named parameters\".","msgtype":"m.text"},"ts":1579378411000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"Could you please have a look, and share your views?","msgtype":"m.text"},"ts":1579378428000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"The link to the idea is: https://es.discourse.group/t/optional-named-parameters/198","msgtype":"m.text"},"ts":1579378442000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"acagastya: seems like it should just create a split","msgtype":"m.text"},"ts":1579379930000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the ecosystem i mean","msgtype":"m.text"},"ts":1579379933000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"between people who use objects for optional params and people who use named args","msgtype":"m.text"},"ts":1579379945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also the syntax you proposed is already valid syntax","msgtype":"m.text"},"ts":1579380038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"While it is \"valid\", it does not work the way one would expect it to.","msgtype":"m.text"},"ts":1579382162000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"Maybe, instead of '=', ':' or ':=' would be another option.","msgtype":"m.text"},"ts":1579382191000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"`:=` to me suggests Define semantics","msgtype":"m.text"},"ts":1579382771000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"acagastya: also, function arg names are really an implementation detail that's not visible outside the function. how would you know what names to pass?","msgtype":"m.text"},"ts":1579382798000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"As the proposal mentions, since it is optional, those who want to make use of the order of parameters can still use it.","msgtype":"m.text"},"ts":1579383799000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"And for those who have access to the function and know the parameter values, say someone's own module/library, instead of keeping in mind the order, they can go with the parameter names.","msgtype":"m.text"},"ts":1579383886000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"then you get into swift problems","msgtype":"m.text"},"ts":1579383905000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"swift has the ability to create argument name aliases","msgtype":"m.text"},"ts":1579383914000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because otherwise renaming an argument is a breaking change","msgtype":"m.text"},"ts":1579383924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am not proposing renaming the arguments.","msgtype":"m.text"},"ts":1579383952000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"i mean","msgtype":"m.text"},"ts":1579383973000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you would then have the problem","msgtype":"m.text"},"ts":1579383979000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of renaming arguments being a breaking change","msgtype":"m.text"},"ts":1579383987000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even if people didn't want others to call their functions that way","msgtype":"m.text"},"ts":1579383996000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you'd have to do something like swift","msgtype":"m.text"},"ts":1579384008000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its a lot of complexity","msgtype":"m.text"},"ts":1579384013000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i suspect it'd have to be optional in that it's up to the function itself if it can be called that way, and there'd also have to be a reflection method from outside to dynamically know when it's safe to call it that way","msgtype":"m.text"},"ts":1579384059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also `f(a = 2)` creates a global variable called `a`, or is an error in strict mode, so we'd want to avoid anything that looked like assignment","msgtype":"m.text"},"ts":1579384083000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yes, that is why I dropped assignment operator.","msgtype":"m.text"},"ts":1579384324000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"`:=` looks like assignment too","msgtype":"m.text"},"ts":1579384373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because it has an equals sign in it","msgtype":"m.text"},"ts":1579384376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am not sure I follow the last sentence.  `:=` is intended to be one operator.  Like how ... is not same as the dot operator.","msgtype":"m.text"},"ts":1579384487000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"* an operator.  Or well, a way to use the value for a given named parameter.","msgtype":"m.text"},"ts":1579384518000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"`:=` was previously proposed to mean \"assign with Define\"","msgtype":"m.text"},"ts":1579384850000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We could go with =: if that is already taken.","msgtype":"m.text"},"ts":1579385321000,"senderName":"acagastya","senderId":"acagastya@irc"}
]