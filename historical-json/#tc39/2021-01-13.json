[
{"content":{"body":"Bakkot: Pursuant to our discussion yesterday, https://github.com/tc39/ecma262/pull/2274","msgtype":"m.text"},"ts":1610513277000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Interesting results of missing JS features from State of JS 2020: https://2020.stateofjs.com/en-US/opinions/#missing_from_js","msgtype":"m.text"},"ts":1610535539000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"hmmm what does \"Functions\" mean in that context?","msgtype":"m.text"},"ts":1610535637000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"yeah, it was interesting to see the strong interest in pipeline. Does anyone want to join the champion group for pipeline to help push it forward?","msgtype":"m.text"},"ts":1610536421000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I have limited time to work on pipeline in 2021","msgtype":"m.text"},"ts":1610536430000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think the name const/let was a reasonable option considering that var is already used. However, is there a link to a meeting note etc. where I can see how they were decided?","msgtype":"m.text"},"ts":1610547327000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"I'd be interested in championing \"functions\" üòÑ","msgtype":"m.text"},"ts":1610550360000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"smorimoto[m]: you could search in tc39/notes on GitHub","msgtype":"m.text"},"ts":1610551347000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb Yeah, certainly lol I was so lazy so I wondered if anyone had a link to that","msgtype":"m.text"},"ts":1610552698000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"smorimoto: also firefox had shipped a const/let, but i don't know when - they may have shipped early ES6 semantics, or they may have shipped something first and ES6 was inspired by that","msgtype":"m.text"},"ts":1610552744000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I see. Then it might be worth checking out something related to Firefox rather than only checking out the meeting notes...","msgtype":"m.text"},"ts":1610552878000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"smorimoto: i wasn't around way back then so i don't know for sure :-)","msgtype":"m.text"},"ts":1610553282000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb Got it! I will dig through the meeting notes and check with a friend who might know about Firefox.","msgtype":"m.text"},"ts":1610553414000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"Thanks anyway!","msgtype":"m.text"},"ts":1610553420000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"Perhaps jorendorff knows about that time...","msgtype":"m.text"},"ts":1610553684000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"I remember some stuff about that, but give me a few minutes :)","msgtype":"m.text"},"ts":1610553745000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Wow, Shumpei was right! (He said a little while ago that you might know that.)","msgtype":"m.text"},"ts":1610553910000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"OK! I started working on JS in 2007. At  that time, there were kind of a lot of features in Firefox's JS engine that weren't in Safari or IE (the other major implementations, before Chrome)","msgtype":"m.text"},"ts":1610554090000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(Node was still a few years in the future)","msgtype":"m.text"},"ts":1610554102000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"`const` already existed, at least for globals","msgtype":"m.text"},"ts":1610554107000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"And maybe `let` was already there, but *not* with the exact behavior that was standardized in ES6 (2015).","msgtype":"m.text"},"ts":1610554176000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(was const the same behavior either?)","msgtype":"m.text"},"ts":1610554196000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nope!","msgtype":"m.text"},"ts":1610554202000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I believe a global `const` actually defined a property on the global, like `var` but readonly","msgtype":"m.text"},"ts":1610554221000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"There were originally `let`-expressions!   `let (x=1, y=2) x + y` evaluated to 3","msgtype":"m.text"},"ts":1610554245000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Far old times","msgtype":"m.text"},"ts":1610554262000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Do you remember why the team chose the names `let` and `const`?","msgtype":"m.text"},"ts":1610554278000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"and  `let`-statements! `let (x=1, y=2) { ...more statements... }`","msgtype":"m.text"},"ts":1610554281000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I believe Brendan Eich chose the names.","msgtype":"m.text"},"ts":1610554296000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"`let` probably follows the tradition of languages like ML.","msgtype":"m.text"},"ts":1610554321000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I saw list comprehension for JS on mdn but I  never used that","msgtype":"m.text"},"ts":1610554334000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Common Lisp also uses `let` for this.","msgtype":"m.text"},"ts":1610554367000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"At the time, `let` and `const` variables were initially `undefined`, just like `var`. The standard committee changed it so they would actually throw if you tried to use them before the declaration, like in `f(x); let x = 3;`.","msgtype":"m.text"},"ts":1610554454000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"In ML, let is not reassignable, so the ML programmer said it was really confusing, so I wrote here today to find out why, but it's interesting that it may have been inspired by ML.","msgtype":"m.text"},"ts":1610554472000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"oh, i see","msgtype":"m.text"},"ts":1610554503000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I think that has never occurred to me.","msgtype":"m.text"},"ts":1610554521000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I own a T-shirt that says \"let is the new var\" on it","msgtype":"m.text"},"ts":1610554561000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I also never confused about it.","msgtype":"m.text"},"ts":1610554594000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"The way I'm used to thinking of it is: `let` is just the most basic way of introducing variables, just like in ML, Haskell, Scheme, Lisp","msgtype":"m.text"},"ts":1610554626000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and then it's up to the language whether variables are assignable by default","msgtype":"m.text"},"ts":1610554637000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in JS obviously yes","msgtype":"m.text"},"ts":1610554641000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in Haskell obviously no","msgtype":"m.text"},"ts":1610554646000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in rust, no, but there's `let mut` for mutable variables; and so on","msgtype":"m.text"},"ts":1610554726000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"tfw js has mutable data","msgtype":"m.text"},"ts":1610554727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"‚òùÔ∏è","msgtype":"m.text"},"ts":1610554735000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"should mark the heap read only","msgtype":"m.text"},"ts":1610554765000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Makes sense","msgtype":"m.text"},"ts":1610554830000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"I learned quite a lot today. Thank you jorendorff ljharb","msgtype":"m.text"},"ts":1610555031000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"you're welcome :)","msgtype":"m.text"},"ts":1610555047000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: lol i'd say const is the new var :-p but opinions (inside this arena, primarily) vary on the value of const","msgtype":"m.text"},"ts":1610555098000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"smorimoto: Interestingly, \"JavaScript: The First 20 Years\" mentions a \"let statement\", but it means something totally different","msgtype":"m.text"},"ts":1610555228000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's referring to the pseudocode language in which the spec is written","msgtype":"m.text"},"ts":1610555241000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"https://dl.acm.org/doi/abs/10.1145/3386327 page 77:166","msgtype":"m.text"},"ts":1610555265000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Yeah, I've read it before, so I know its contents, and it's certainly interesting","msgtype":"m.text"},"ts":1610555319000,"senderName":"smorimoto","senderId":"smorimoto@irc"},
{"content":{"body":"Bakkot: re 2271: 10.2.1.3 has `_argumentsList_ (a List)`, but other SDOs have `List _argumentList_`.","msgtype":"m.text"},"ts":1610559743000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"chicoxyzzy, Was that just a discord survey?","msgtype":"m.text"},"ts":1610560208000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: the state of JS? not discord at all, it's an annual thing that's mentioned in many mediums","msgtype":"m.text"},"ts":1610562984000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I see. I need to find a champion sometime.","msgtype":"m.text"},"ts":1610563078000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"ljharb, Wanna champion another proposal? It'll be fun. https://i.imgflip.com/4tp2oh.jpg","msgtype":"m.text"},"ts":1610563410000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"lol, i think you're barking up the wrong tree with that one :-p","msgtype":"m.text"},"ts":1610563617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(by tree, i mean me)","msgtype":"m.text"},"ts":1610563629000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hmm, test262 report has no new results for almost a month","msgtype":"m.text"},"ts":1610563702000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Sirisian|Work reaaaaaally don't think the committee is going to go for that","msgtype":"m.text"},"ts":1610563920000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"engines don't want to have to do validation client-side, especially if it's not sound (and it is almost certainly not going to be sound), and if it's just specifying syntax without semantics, well, the TypeScript team wants the freedom to iterate on their own syntax without needing to go through TC39","msgtype":"m.text"},"ts":1610564002000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I know. :P Is there a champion that has the spec knowledge to even work on that? I mentioned before that writing the algorithm part of the spec seems to not be well known.","msgtype":"m.text"},"ts":1610564007000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"I would happily help someone write the spec text if it got to that point, but it would need to get to that point first","msgtype":"m.text"},"ts":1610564036000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which, as I say, is extremely unlikely","msgtype":"m.text"},"ts":1610564043000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you look at the process document: https://tc39.es/process-document/","msgtype":"m.text"},"ts":1610564054000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Are you a champion?","msgtype":"m.text"},"ts":1610564061000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"initial spec text isn't required until going for stage 2","msgtype":"m.text"},"ts":1610564069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am a member of tc39 and an editor of the specification, and have championed some proposals, yes","msgtype":"m.text"},"ts":1610564087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm familiar with the process. I've never found a champion to take over my proposal.","msgtype":"m.text"},"ts":1610564091000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"right, the process of finding a champion involves convincing at least one person on the committee that it's a good idea and has a reasonable chance of being added to the language","msgtype":"m.text"},"ts":1610564147000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am not convinced it's a good idea, or that it has a reasonable chance of being added to the language, so I don't want to champion it","msgtype":"m.text"},"ts":1610564189000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i am in the same bucket","msgtype":"m.text"},"ts":1610564196000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that said, if you did find a champion who met those criteria, and it got to stage 1, I would be happy to help with drafting the initial spec text. I don't want \"people don't know how to write spec text\" to be a reason things don't advance","msgtype":"m.text"},"ts":1610564286000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That's good to know. It'll require a lot of eyes in general if it ever gets one.","msgtype":"m.text"},"ts":1610564439000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Do you know of anyone that would be open to championing such a proposal? All the people I can think of are busy with their own proposals.","msgtype":"m.text"},"ts":1610564735000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"yeah, I'm not convinced this is a good idea either--I'm not sure it's worth the complexity of adding another binding construct. I'd rather we focus on do expressions instead.","msgtype":"m.text"},"ts":1610565263000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(well, I'm not sure I understand what's being proposed)","msgtype":"m.text"},"ts":1610565294000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It would be this. https://github.com/sirisian/ecmascript-types Also I think you said that before. I've spoken with a few people here in the past. Most of the regulars at least.","msgtype":"m.text"},"ts":1610565408000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work I suspect most of the committee will also think this is not a good idea, so I think you are unlikely to be able to find a champion for it.","msgtype":"m.text"},"ts":1610565654000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, sorry for getting confused. Yeah, I don't think this is a good direction for static types in JavaScript.","msgtype":"m.text"},"ts":1610565693000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"From my review of other proposals it's the only direction available. There's a few changes that can be changed to more closely match TS though.","msgtype":"m.text"},"ts":1610565918000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"I think there might be a disagreement about what TC39 members want and what developers want also. It's something that should be discussed sometime in terms of priorities.","msgtype":"m.text"},"ts":1610566126000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Have you guys met any of the Salesforce members?","msgtype":"m.text"},"ts":1610566410000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"yeah, salesforce is on the committee and regularly has delegates attend meetings. we've had a meeting in their building if I recall correctly","msgtype":"m.text"},"ts":1610566491000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Maybe it is leobalter or someone else. I was told a while ago to ask one of them if they weren't busy as they have someone that works full-time and their company is huge into using TS.","msgtype":"m.text"},"ts":1610566541000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"a lot of tc39 member companies are really into TS. the TS team actively participates in meetings themselves, for that matter","msgtype":"m.text"},"ts":1610566669000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what does Array.isTemplateObject actually guarantee?","msgtype":"m.text"},"ts":1610566681000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"these strings were not created via concatenation\"?","msgtype":"m.text"},"ts":1610566693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"something like that, yeah","msgtype":"m.text"},"ts":1610566758000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hard to audit all usages of string concatenation; much easier to audit usages of tagged templates","msgtype":"m.text"},"ts":1610566771000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is odd to me that this made it to the point of asking for stage 3","msgtype":"m.text"},"ts":1610566774000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but oh well","msgtype":"m.text"},"ts":1610566783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it has a specific CSP-related use case in mind","msgtype":"m.text"},"ts":1610566812000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, more of the weird thing i hate where some strings of html are \"trusted\"","msgtype":"m.text"},"ts":1610566831000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1610566840000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think we had an argument about that last year :P","msgtype":"m.text"},"ts":1610566841000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"web security is hard","msgtype":"m.text"},"ts":1610566844000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot, Always surprised given the wide acceptance of TS that there's a pushback to making it obsolete by taking all of its features.","msgtype":"m.text"},"ts":1610566918000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"people don't agree that TS is the right solution","msgtype":"m.text"},"ts":1610566974000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so standardizing it would be very difficult","msgtype":"m.text"},"ts":1610566982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That there isn't a higher used alternative I think is very telling.","msgtype":"m.text"},"ts":1610567056000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: something that might gain more traction is working on standardized \"compile time\" extensions to js, i think this was a topic at some point","msgtype":"m.text"},"ts":1610567385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek++","msgtype":"m.text"},"ts":1610567853000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"Sirisian|Work: we use TS at Salesforce and we are happy with it, but I don't feel like a quick solution to just add static typing to ECMAScript","msgtype":"m.text"},"ts":1610567897000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I'm not really interested in server-side tools with this proposal. The goal would be that one could write something like TS and have it work. The engine can compile or do whatever it wants to optimize.","msgtype":"m.text"},"ts":1610567913000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"I'd work on what devsnek has mentioned, or even an extension in a separate spec doc","msgtype":"m.text"},"ts":1610567922000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ecmascript 2.0","msgtype":"m.text"},"ts":1610567936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sirisian|Work: as TS, a higher-used alternative could still appear in the future. once in JS, it never could.","msgtype":"m.text"},"ts":1610568282000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Just so we're on the same page. What would \"compile time\" extensions to JS entail?","msgtype":"m.text"},"ts":1610568772000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"i'd imagine something the spec dictates how to parse, but that has no runtime semantics? not really sure","msgtype":"m.text"},"ts":1610568880000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"most likely, yeah","msgtype":"m.text"},"ts":1610569368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've been suggested that a few times. My goal is to allow engines to actually utilize the type system to optimize functions. Ideally inline functions and map closely to native hardware in a more logical way than asm.js. Then languages built on top of JS can benefit from that.","msgtype":"m.text"},"ts":1610569738000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"When running JS on the web if we consider two situations: in production, or in development. When in production type checking would make websites slower, and if there was an error the user can't do much about that. They would still want the website to run. In development I wonder if a browser extensions could add TypeScript transpilation support","msgtype":"m.text"},"ts":1610569827000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"Sirisian|Work: TS fulfills different goals than JS. Adoption of eslint and prettier is similarly very large, but there's no push to add those to the language either.","msgtype":"m.text"},"ts":1610569888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also, a type system for the purposes of helping developers ensure correctness is very different from a type system for the purposes of helping engines produce optimizations. TS is aimed squarely at the former niche. I don't think you can reasonably infer from its wide adoption that there would similarly be wide interest in a proposal aimed at the latter.","msgtype":"m.text"},"ts":1610570127000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in particular, since JS is and will remain backwards-compatible, we'd be trying to bolt a sound type system on top of the existing langauge. and that's going to be a huge amount of complexity and effort from engines, for unclear benefits. for people interested in the \"type system for run-time speed\" goal, that's one of the main benefits of wasm.","msgtype":"m.text"},"ts":1610570205000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I was pleased to see pipeline get a good shot of support in state-of-js","msgtype":"m.text"},"ts":1610570235000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"yeah i don't think types that engines have to deal with would ever pass","msgtype":"m.text"},"ts":1610570254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"My thinking is that there would in general be no errors in a production environment similar to not typoing a variable. The browser should be able to parse at more or less the same speed. The compilation part and optimization might need to be changed to be progressive. Not sure if engines do anything like that already.","msgtype":"m.text"},"ts":1610570273000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: types don't necessarily help you with data coming from a user, or a network request tho","msgtype":"m.text"},"ts":1610570301000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"They'd be optional for use cases where they offer no benefit. Also wasm lacks a wide range of types and it's been explained before that it's not a replacement for JS. Using it with JS is also a bit convoluted.","msgtype":"m.text"},"ts":1610570966000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"How would there be no errors in a production environment? a type system would be capable of catching such an error, but if it's built into the browser that is pretty much by definition happening in a production environment.","msgtype":"m.text"},"ts":1610571298000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to avoid having errors in prod you'd have to run the type checker in advance of shipping, during development, which is exactly what TS already offers","msgtype":"m.text"},"ts":1610571325000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well the exact same scenario except it's done in both places. That it runs on the client-side is just a side-effect of parsing and compiling every time.","msgtype":"m.text"},"ts":1610573834000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Bakkot: it seems very odd to me to have an SDO defined on `AsyncFunctionExpression : ... BindingIdentifier_opt ...` when there isn't a production of that form (but rather two distinct productions, one with and one without `BindingIdentifier`. One solution would be to change the SDO defn, but I don't think there's a good reason for AFE to be defined with two distinct productions that way. Corresponding function-expression","msgtype":"m.text"},"ts":1610581390000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indingIdentifier_opt.","msgtype":"m.text"},"ts":1610581390000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yeah, I have a note to myself to fix the actual definition, but I didn't pull it into this PR","msgtype":"m.text"},"ts":1610581417000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I should probably leave the SDO matching the definition for now; I did that for this production in other SDOs, I think","msgtype":"m.text"},"ts":1610581445000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]