[
{"content":{"body":"devsnek: wowsers, apparently I still wasn't doing `a?.b?.()` (combined optional access and optional call) correctly","msgtype":"m.text"},"ts":1564976406000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what was it doing","msgtype":"m.text"},"ts":1564976426000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I had it parsing as FunctionCallValueNode > OptionalChainNode > DotAccessorNode, but that runs into the same \"loss of this\" problem that I originally faced for `a.b?.()`","msgtype":"m.text"},"ts":1564976533000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i.e. for `a = { b() { return this.c; }, c: 42 }`, `a?.b?.()` would be undefined","msgtype":"m.text"},"ts":1564976560000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure how JSC-specific this problem is","msgtype":"m.text"},"ts":1564976605000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's not hard to fix but I have to basically introduce an `OptionalChainType::CombinedAccessAndCall` case where I reach for the *second* label on the stack :(","msgtype":"m.text"},"ts":1564976664000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling are you implementing `?.` in JSC? =D","msgtype":"m.text"},"ts":1564976706000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"drousso: https://bugs.webkit.org/show_bug.cgi?id=200199 :D","msgtype":"m.text"},"ts":1564976742000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the two places Darin requested extra coverage both had edge-case bugs lol","msgtype":"m.text"},"ts":1564976784000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"best kind of review :chefkiss:","msgtype":"m.text"},"ts":1564976795000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"aaaawwwwweeeeessssooooommmmmeeeee","msgtype":"m.text"},"ts":1564976804000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"i cant wait to use that in Web Inspector =D","msgtype":"m.text"},"ts":1564976813000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":":D :D :D","msgtype":"m.text"},"ts":1564976846000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: every time you talk about jsc internals it scares me more and more","msgtype":"m.text"},"ts":1564977085000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol it's really just the function node menagerie","msgtype":"m.text"},"ts":1564977140000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what is `a.b()` in V8?","msgtype":"m.text"},"ts":1564977179000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Call { expression = Property { base = ..., name = \"b\" } }","msgtype":"m.text"},"ts":1564977304000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ahh yeah it would sure be nice to have \"function call\" be a singular concept from the perspective of the bytecode generator","msgtype":"m.text"},"ts":1564977573000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hehehe","msgtype":"m.text"},"ts":1564977575000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in the bytecode generator it just branches based on what `expression` is","msgtype":"m.text"},"ts":1564977596000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then you end up with a `callee` register and a `receiver` register","msgtype":"m.text"},"ts":1564977618000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can't even find the parser in spidermonkey","msgtype":"m.text"},"ts":1564977650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol it's https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp and vicinity","msgtype":"m.text"},"ts":1564978061000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh i thought the frontend folder would have like","msgtype":"m.text"},"ts":1564978476000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devtools or smth","msgtype":"m.text"},"ts":1564978480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haha yeah it's  quitehard to find the first time","msgtype":"m.text"},"ts":1564978528000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh hey. qq. Has there are been a proposal or suggestion for something along the lines of array.protoype.difference?","msgtype":"m.text"},"ts":1565016885000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins: comes up on esdiscuss everyone once in a while","msgtype":"m.text"},"ts":1565017551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek do you have a link?","msgtype":"m.text"},"ts":1565017861000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"someone from the node project was pinging me about wanting to push forward a proposal for it... but wasn't able to find prior discussion","msgtype":"m.text"},"ts":1565017917000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"I could find them in a bit","msgtype":"m.text"},"ts":1565018048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"iirc esdiscuss.org is searchable","msgtype":"m.text"},"ts":1565018056000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wish we could translate old threads into discourse","msgtype":"m.text"},"ts":1565018087000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MylesBorins: What's the semantics of an array difference? Diffing has a lot of possible impls...","msgtype":"m.text"},"ts":1565019681000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins what was pitched to me is a function that would return items that don't exist in both arrays","msgtype":"m.text"},"ts":1565019871000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"e.g. [1, 'a', 3.14].difference([2, 'a', 3.145]) // returns [1, 3.14]","msgtype":"m.text"},"ts":1565019877000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"[1, null].difference([2, null]) // returns [1]","msgtype":"m.text"},"ts":1565019884000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"So that's a Set difference","msgtype":"m.text"},"ts":1565019885000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slightly different","msgtype":"m.text"},"ts":1565019907000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"as per example 2","msgtype":"m.text"},"ts":1565019910000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"Ah, that's a Set minus.","msgtype":"m.text"},"ts":1565019921000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if those set methods happen, engines can probably optimize new Set(x).difference and new Set(x).minus","msgtype":"m.text"},"ts":1565020058000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MylesBorins: it seems like you'd almost always just want to be using sets in that case, and converting to a set and back would probably be clearer","msgtype":"m.text"},"ts":1565028963000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot so would it then be a good idea to explore making those set methods?","msgtype":"m.text"},"ts":1565029004000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"MylesBorins: https://github.com/tc39/proposal-set-methods","msgtype":"m.text"},"ts":1565029018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling (or anyone else who works on JSC): are you in a position to tell me if the rdar link at the botton of https://bugs.webkit.org/show_bug.cgi?id=38970 has had any progress?","msgtype":"m.text"},"ts":1565041741000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just for my own curiousity mostly","msgtype":"m.text"},"ts":1565041749000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unfortunately as a non-Appler, I have no idea what's on the other side of that protocol :(","msgtype":"m.text"},"ts":1565041782000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's where they keep the apples","msgtype":"m.text"},"ts":1565041823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"alas","msgtype":"m.text"},"ts":1565041848000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: üëè","msgtype":"m.text"},"ts":1565041861000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I always assume that any discussion of consequence would appear publicly but I could be wrong","msgtype":"m.text"},"ts":1565041933000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"maybe drousso could confirm :p","msgtype":"m.text"},"ts":1565042024000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: gonna bring globalThis for stage 4 sometime?","msgtype":"m.text"},"ts":1565042474000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also: is there anyone around who remembers why `super` works the way it does? https://github.com/tc39/ecma262/issues/1654","msgtype":"m.text"},"ts":1565044731000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ouch.","msgtype":"m.text"},"ts":1565044989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: when I‚Äôm ready for everyone to yell at me on twitter and github again","msgtype":"m.text"},"ts":1565048242000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hah, fair enough","msgtype":"m.text"},"ts":1565048250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i've still got that that pr to fix extending null :(","msgtype":"m.text"},"ts":1565048262000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: is that ready for review again? if it's good to go, and I think it looks right, I can bring it before the committee in October","msgtype":"m.text"},"ts":1565048407000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't remember anymore","msgtype":"m.text"},"ts":1565048421000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(https://github.com/tc39/ecma262/pull/1321, for everyone else)","msgtype":"m.text"},"ts":1565048424000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh right the argument about how super is allowed","msgtype":"m.text"},"ts":1565048448000,"senderName":"devsnek","senderId":"devsnek@irc"}
]