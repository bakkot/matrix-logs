[
{"content":{"body":"Bakkot: the deadline's only for proposal advancement, not needs consensus PRs, but indeed someone might need more time to review it","msgtype":"m.text"},"ts":1600650615000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: `A conversion from a mathematical value or extended mathematical value _x_ to a Number is denoted as \"the Number value for _x_\" or ùîΩ(_x_)`, but \"the Number value for _x_\" is only defined where _x_ is \"an exact real mathematical quantity\", and it's a bit dubious that that includes infinities.","msgtype":"m.text"},"ts":1600655107000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck I tried to ensure that \"the Number value for\" was never used for an infinity","msgtype":"m.text"},"ts":1600655154000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that seems obvious","msgtype":"m.text"},"ts":1600656844000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Object.setPrototypeOf is an intentional method call","msgtype":"m.text"},"ts":1600656857000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"but obj[key] when key is proto might be unintentional","msgtype":"m.text"},"ts":1600656869000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Bakkot: does that go for ùîΩ() too?","msgtype":"m.text"},"ts":1600658626000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ToIndex has \"the Number value for ? ToIntegerOrInfinity(_value_)\", which might apply \"the Number value for\" to an infinity.","msgtype":"m.text"},"ts":1600658788000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck hmmm","msgtype":"m.text"},"ts":1600658809000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me look","msgtype":"m.text"},"ts":1600658817000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, you're right","msgtype":"m.text"},"ts":1600658885000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I will just generalize \"the Number value for\" to extend to infinities, I think","msgtype":"m.text"},"ts":1600658896000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(and `ùîΩ()`)","msgtype":"m.text"},"ts":1600658912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"F = double and R = real?","msgtype":"m.text"},"ts":1600658923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh F for float","msgtype":"m.text"},"ts":1600658932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm caught up","msgtype":"m.text"},"ts":1600658937000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I believe blackboard-bold F (\"ùîΩ\") is the traditional name for collection of floats, for those CS papers which talk about it","msgtype":"m.text"},"ts":1600659062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I might have made that up though","msgtype":"m.text"},"ts":1600659066000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway yeah","msgtype":"m.text"},"ts":1600659069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least for the ones that aren't worried about referring to bits as a finite field","msgtype":"m.text"},"ts":1600659145000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"big F for big floats","msgtype":"m.text"},"ts":1600659186000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, i guess the meeting is in progress now","msgtype":"m.text"},"ts":1600659242000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"japan time :D","msgtype":"m.text"},"ts":1600659253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ndeed","msgtype":"m.text"},"ts":1600659296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we're on lunch break at the moment","msgtype":"m.text"},"ts":1600659306000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck the Notational Conventions section says \"A conversion from a mathematical value or extended mathematical value x to a Number is denoted as \"the Number value for x\" or ùîΩ(x)\", so it's technically already legal","msgtype":"m.text"},"ts":1600659343000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it says the definition is in defined in 6.1.6.1, which doesn't cover infinities, so I'll fix that part","msgtype":"m.text"},"ts":1600659364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, that's what i said.","msgtype":"m.text"},"ts":1600659385000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup, sorry, I misread you","msgtype":"m.text"},"ts":1600659514000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600659531000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathematical infinities would also fit into the general definition, as long as you allowed them at the top. Maybe the separate para is better though.","msgtype":"m.text"},"ts":1600659822000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1600659827000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'm happier keeping them explicitly split out, so you don't have to think about the interaction with the infinities in the given algorithm","msgtype":"m.text"},"ts":1600659914000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600659931000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hm, Math.round(NaN) ?","msgtype":"m.text"},"ts":1600660240000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"looks like a bug introduced in 2122, I'll file a separate PR","msgtype":"m.text"},"ts":1600660313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I tried to check for all of those carefully as part of 2122; guess I missed one","msgtype":"m.text"},"ts":1600660327000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"test/built-ins/Math/round/S15.8.2.15_A1.js says it's NaN","msgtype":"m.text"},"ts":1600660328000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, also the previous spec text","msgtype":"m.text"},"ts":1600660415000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(my analysis is complaining at `_n_ &lt; *0.5*<sub>ùîΩ</sub>` because it sees that `_n_` might be NaN, which shouldn't be involved in a comparison)","msgtype":"m.text"},"ts":1600660459000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600660571000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, it should also be explicit about infinities","msgtype":"m.text"},"ts":1600660638000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600660792000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(Not 2007's problem, but:) https://tc39.es/ecma262/#sec-overview-of-date-objects-and-definitions-of-abstract-operations says \"Note that, in every case, if any argument to one of these functions is NaN, the result will be NaN.\" Except the algorithms don't actually accomplish that.","msgtype":"m.text"},"ts":1600662487000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think 2007 should just ensure that none of them are ever passed NaN, though I don't know if it accomplishes that","msgtype":"m.text"},"ts":1600662619000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so rather than \"Note that\", the intention seems more like \"Imagine that\".","msgtype":"m.text"},"ts":1600662637000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"It would be nice if\"","msgtype":"m.text"},"ts":1600662692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1600662698000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'll reword it, though not tonight","msgtype":"m.text"},"ts":1600662701000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for 2007, might be nice to have an assertion or a parameter-description that says _t_ isn't NaN. E.g. \"takes argument _t_ (a finite time value)\"","msgtype":"m.text"},"ts":1600662791000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well, maybe that isn't 2007's problem either.","msgtype":"m.text"},"ts":1600662853000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but it would be nice.","msgtype":"m.text"},"ts":1600662857000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb suggested that as well","msgtype":"m.text"},"ts":1600663177000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I will address","msgtype":"m.text"},"ts":1600663179000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually, LocalTime and UTC are the only AOs here that don't have parameter types. But for the others, presumably \"(a Number)\" is not as precise as it could be.","msgtype":"m.text"},"ts":1600663333000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Then there are the <emu-eqn>s, which don't have a place for parameter types or assertions.","msgtype":"m.text"},"ts":1600663377000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I _think_ all the Date AOs (including the shorthand ones) take and return finite time values","msgtype":"m.text"},"ts":1600663442000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait, no","msgtype":"m.text"},"ts":1600663455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1600663457000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nonnegative integral numbers","msgtype":"m.text"},"ts":1600663464000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they can exceed the time value bound, in at least some cases","msgtype":"m.text"},"ts":1600663477000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"non-neg?","msgtype":"m.text"},"ts":1600663488000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, no, not that either","msgtype":"m.text"},"ts":1600663497000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"integral numbers, not -0","msgtype":"m.text"},"ts":1600663502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm done for the day.","msgtype":"m.text"},"ts":1600664070000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"outreach++","msgtype":"m.text"},"ts":1600668126000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"devsnek: what's the main difference between esvu and jsvu? which one should i use?","msgtype":"m.text"},"ts":1600698776000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: jsvu has stricter requirements about which engines they distribute","msgtype":"m.text"},"ts":1600698827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example they won't include engine262","msgtype":"m.text"},"ts":1600698834000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh! is there a technical limit in jsvu? or just some strange policy?","msgtype":"m.text"},"ts":1600698881000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"the latter","msgtype":"m.text"},"ts":1600698891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh! so i should use esvu :) thank u","msgtype":"m.text"},"ts":1600698910000,"senderName":"haxjs","senderId":"haxjs@irc"}
]