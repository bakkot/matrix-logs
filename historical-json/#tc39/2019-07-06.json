[
{"content":{"body":"leobalter: do you think there's any meaningful overlap between your reverse proposal and my iterator methods proposal?","msgtype":"m.text"},"ts":1562371422000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think in theory array iterator prototype and map iterator prototype and whatnot could all have a reverse method","msgtype":"m.text"},"ts":1562371447000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i think individual iterators would have to opt in to being reversable tho","msgtype":"m.text"},"ts":1562389844000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"otherwise it'd be pretty silly to not know if your iterator will be infinite or not (and thus irreversible)","msgtype":"m.text"},"ts":1562389868000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or even just, non deterministically finite","msgtype":"m.text"},"ts":1562389883000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I'm more talking about how that integrates with other methods and such","msgtype":"m.text"},"ts":1562421199000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example in rust you do x.iter().rev(), not x.iter_rev()","msgtype":"m.text"},"ts":1562421503000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah i think it makes more sense to have a single reverse method than to suffix everything","msgtype":"m.text"},"ts":1562422745000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"array.values().reverse() vs array[reverseIterator]()","msgtype":"m.text"},"ts":1562422818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"typically symbol methods are a protocol that nicer-named methods access, no?","msgtype":"m.text"},"ts":1562422853000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"perhaps","msgtype":"m.text"},"ts":1562422897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb, littledan: Hmm, ùîΩ doesn't show up in the default fonts on a Chromebook. :(","msgtype":"m.text"},"ts":1562429339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(‚Ñù does, presumably because it's more commonly used as a math symbol)","msgtype":"m.text"},"ts":1562429370000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I don't have an immediate good suggestion for alternate glyphs, except perhaps ‚Ñï. Misleading in nature, but mnemonic in usage.)","msgtype":"m.text"},"ts":1562429530000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or as an amusing alternative, ‚Ñö, because all Numbers are rationals. ^_^)","msgtype":"m.text"},"ts":1562429580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: isn't ùîΩ usually used for fields anyway?","msgtype":"m.text"},"ts":1562432389000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yes, so the current usage isn't technically accurate anyway","msgtype":"m.text"},"ts":1562432424000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There was a previous reverse iterator proposal","msgtype":"m.text"},"ts":1562439137000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/leebyron/ecmascript-reverse-iterable","msgtype":"m.text"},"ts":1562439149000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh that does what i said above","msgtype":"m.text"},"ts":1562439311000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"People should find the meeting notes where we discussed that","msgtype":"m.text"},"ts":1562439345000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The leebyron proposal looks good to me but maybe there were reasons it didn't advance. (I suspect the biggest reason was lack of champion time.)","msgtype":"m.text"},"ts":1562439365000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh no https://github.com/tc39/tc39-notes/blob/master/meetings/2015-03/mar-24.md#63-reverseiterable-interface","msgtype":"m.text"},"ts":1562439391000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lollll","msgtype":"m.text"},"ts":1562439608000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: hmm, so it seems like all the double-struck glyphs in Letterlike Symbols block are present in the more \"default\" fonts like Tinos, Arimo, and Noto Serif, so ‚ÑÇ‚Ñç‚Ñï‚Ñô‚Ñö‚Ñù‚Ñ§ work fine.","msgtype":"m.text"},"ts":1562440222000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"however, the rest of them are in the newer Mathematical Alphanumeric Symbols block, and are only present in Noto Sans Math, which should also be installed by default on CrOS‚Ä¶","msgtype":"m.text"},"ts":1562440240000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"nope, apparently not","msgtype":"m.text"},"ts":1562440369000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"rbuckton: what does __promisifiy__ do in ts?","msgtype":"m.text"},"ts":1562450031000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah nevermind someone else figured out how it's used","msgtype":"m.text"},"ts":1562450763000,"senderName":"devsnek","senderId":"devsnek@irc"}
]