[
{"content":{"body":"rkirsling has everything been resolved w/r to shu's comments in 2221?","msgtype":"m.text"},"ts":1606228096000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rkirsling I need to do a review of tests for https://github.com/tc39/ecma262/pull/2210","msgtype":"m.text"},"ts":1606228156000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"https://lea.verou.me/2020/11/the-case-for-weak-dependencies-in-js/","msgtype":"m.text"},"ts":1606229032000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: I'm still not convinced we need any such thing, just use a global. We spent a lot of time on the same problem with polyfills and builtin modules and came to that conclusion","msgtype":"m.text"},"ts":1606230713000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Fine","msgtype":"m.text"},"ts":1606230793000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"We did see `importNow` in the Realms API but that has since been removed","msgtype":"m.text"},"ts":1606230974000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a question about well-formedness of UTF16 and lone surrogates: strictly speaking, AFAICT, valid UTF16 can't include lone surrogates","msgtype":"m.text"},"ts":1606240116000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1606240135000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"however, JS strings can certainly include unpaired surrogates despite our saying they are UTF16","msgtype":"m.text"},"ts":1606240137000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also yes","msgtype":"m.text"},"ts":1606240141000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(also AFAICT, this dispensation is pretty widespread)","msgtype":"m.text"},"ts":1606240157000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we don't actually say that, I thnk","msgtype":"m.text"},"ts":1606240161000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we say they are vectors of 16-bit scalar values","msgtype":"m.text"},"ts":1606240174000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"String value: primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer values","msgtype":"m.text"},"ts":1606240190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably not, though our StringToCodePoints AO explicitly deals with unpaired surrogates instead of erroring out","msgtype":"m.text"},"ts":1606240193000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.","msgtype":"m.text"},"ts":1606240199000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, i see","msgtype":"m.text"},"ts":1606240209000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so my actual question is: what's the interaction with ecma404 (JSON)? JSON says its input is a sequence of code*points*","msgtype":"m.text"},"ts":1606240235000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if we pass it a JS string that has an unpaired surrogate, is that supposed to error on a strict reading?","msgtype":"m.text"},"ts":1606240267000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"See JSON.parse step 2: https://tc39.es/ecma262/#sec-json.parse","msgtype":"m.text"},"ts":1606240290000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, but that happily encodes an unpaired surrogate as an invalid codepoint in https://tc39.es/ecma262/#sec-codepointat","msgtype":"m.text"},"ts":1606240326000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we don't error out on the JS side","msgtype":"m.text"},"ts":1606240334000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\\u{d800} is a code point; if all that 404 says is \"a sequence of code points\", there's no problem","msgtype":"m.text"},"ts":1606240369000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, it is a code point?","msgtype":"m.text"},"ts":1606240377000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"just one that's not assigned to a character?","msgtype":"m.text"},"ts":1606240381000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"> Code Point. (1) Any value in the Unicode codespace; that is, the range of integers from 0 to 10FFFF_16. (See definition D10 in Section 3.4, Characters and Encoding.) Not all code points are assigned to encoded characters.","msgtype":"m.text"},"ts":1606240420000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"a ha, great, thanks","msgtype":"m.text"},"ts":1606240427000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"from https://unicode.org/glossary/","msgtype":"m.text"},"ts":1606240429000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the spec, neither 262 nor 404, actually rejects input sequences with lone UTF16 surrogate","msgtype":"m.text"},"ts":1606240475000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"presumably neither does https://tools.ietf.org/html/rfc4627 but i'm not sure","msgtype":"m.text"},"ts":1606240494000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the fact that that RFC talks about \"Unicode characters\" doesn't give me a lot of hope that it will be unambiguous on this question","msgtype":"m.text"},"ts":1606240699000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(apparently the word for \"code point other than surrogate pairs\" is \"Unicode scalar value\" - https://unicode.org/glossary/#unicode_scalar_value)","msgtype":"m.text"},"ts":1606241386000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(these are... not great definitions; naively I would definitely have assumed \"scalar value\" was the full range and \"code point\" was the non-surrogate ones. but whatever, at least they're precise.)","msgtype":"m.text"},"ts":1606241423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes they definitely sound backwards","msgtype":"m.text"},"ts":1606242423000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"\"scalar, but not the full scale!\"","msgtype":"m.text"},"ts":1606242428000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"vs \"points, but actually every point inclusive on the scale\"","msgtype":"m.text"},"ts":1606242449000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron-: yup! both PRs should be all set","msgtype":"m.text"},"ts":1606244593000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling thanks :)","msgtype":"m.text"},"ts":1606244623000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"}
]