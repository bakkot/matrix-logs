[
{"content":{"body":"rkirsling, ljharb: i'm working on a written version","msgtype":"m.text"},"ts":1551088111000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"rkirsling, ljharb: afaict JSC doesn't suffer from this as much since unlike V8, it uses a uniform value representation for all numbers","msgtype":"m.text"},"ts":1551088180000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"annevk: lol i hardly think 18 days is “awhile” :-p","msgtype":"m.text"},"ts":1551115275000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"everything is relative","msgtype":"m.text"},"ts":1551115315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's definitely... slower than we're used to.","msgtype":"m.text"},"ts":1551118715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-abstract-module-records is it important that every module have an [[Environment]]? I'm guessing yes, that the concept of bindings and thus lexical environments are pretty intimately tied into the machinery? But for example for built-in modules it seems really awkward to create a synthetic \"lexical environment\" which doesn't have any code, and just has a bunch of bindings which it looks up from","msgtype":"m.text"},"ts":1551118773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"elsewhere.","msgtype":"m.text"},"ts":1551118773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yea, the wording is pretty tied to bindings. is the concern that you don't want to make bindings themselves but something else?","msgtype":"m.text"},"ts":1551122302000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"No, it's more \"editorial\". It seems like it'd be a ton of ceremony to make a built-in module record from an ordered map of strings -> JS values, involving creating a whole new lexical environment with a customized ResolveBinding() that looks things up in the map.","msgtype":"m.text"},"ts":1551122356000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I was hoping we could instead just override ResolveExport()","msgtype":"m.text"},"ts":1551122377000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But I guess ResolveExport() only gives you back a binding name, which you then look up on the [[Environment]].","msgtype":"m.text"},"ts":1551122399000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yea, i think actually making an env is the best approach for now, though you could work around and use an object environment or something?","msgtype":"m.text"},"ts":1551122580000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Hmm that might save a bit of work","msgtype":"m.text"},"ts":1551122603000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i took an approach where i eagerly bind all the exports from builtin modules as immutable declarations","msgtype":"m.text"},"ts":1551125223000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What does that look like spec wise","msgtype":"m.text"},"ts":1551132644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i'm not 100% sure where the operations go (i think the end of ParseModule?) but it basically just grabs all the standard imports and directly creates immutable declarations to the values from the builtin","msgtype":"m.text"},"ts":1551132741000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hrm hrm","msgtype":"m.text"},"ts":1551132753000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this assumes there is a syntax for builtins","msgtype":"m.text"},"ts":1551132755000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Well maybe I'll have you review my spec and see what you think, when I write it","msgtype":"m.text"},"ts":1551132766000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"alright","msgtype":"m.text"},"ts":1551132777000,"senderName":"devsnek","senderId":"devsnek@irc"}
]