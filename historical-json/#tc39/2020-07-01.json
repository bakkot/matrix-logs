[
{"content":{"body":"in PR 2045, the built-in generator functions are inaccessible to userland, right?","msgtype":"m.text"},"ts":1593564644000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck I haven't read that PR's spec text yet, but that was the plan discussed in https://github.com/tc39/proposal-iterator-helpers/issues/97#issuecomment-637833039, yes","msgtype":"m.text"},"ts":1593564833000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"okay, well, I'm going to have to read some stuff then, but is there a quick reason for why the built-in generator functions are functions and not abstract operations?","msgtype":"m.text"},"ts":1593565104000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"seems like it complicates the spec for no benefit","msgtype":"m.text"},"ts":1593565166000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that I couldn't tell you; the conclusion fo the last discussion I was involved in was \"Each iterator helper object will have an internal slot that contains a generator-like algorithm (an abstract closure) with \"Yield\" steps, something like the %SyncMap% sketch @devsnek posted in #86.\"","msgtype":"m.text"},"ts":1593565651000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"jmdyck: the iterator proposal will make use of built in generators","msgtype":"m.text"},"ts":1593565697000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're not very useful for the existing iterators imo but people want everything to be the same","msgtype":"m.text"},"ts":1593565721000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"will the iterator proposal define new built-in generator functions?","msgtype":"m.text"},"ts":1593565829000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek that doesn't answer the question of why they're being spec'd as actual functions though","msgtype":"m.text"},"ts":1593565836000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i mean i think they should be actual functions","msgtype":"m.text"},"ts":1593565861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... why?","msgtype":"m.text"},"ts":1593565890000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"because if i was writing them in js i would use functions","msgtype":"m.text"},"ts":1593565919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... so?","msgtype":"m.text"},"ts":1593565954000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"if you were writing *anything*  in js you'd use functions.","msgtype":"m.text"},"ts":1593565960000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I sincerely do not understand the relevance ofo that","msgtype":"m.text"},"ts":1593565961000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i mean if you want to write out 22 iterator prototypes","msgtype":"m.text"},"ts":1593566034000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or spec the existence of suspendable abstract ops","msgtype":"m.text"},"ts":1593566041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"more power to you","msgtype":"m.text"},"ts":1593566045000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec already has suspendable abstract ops, doesn't it?","msgtype":"m.text"},"ts":1593566078000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1593566081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the correlation to actual functions is simple because we already have them","msgtype":"m.text"},"ts":1593566085000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think you need to spec the existence of suspend-able abstract ops explicitly","msgtype":"m.text"},"ts":1593566086000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"the mechanism that `yield` uses should work just the same in AOs","msgtype":"m.text"},"ts":1593566114000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"yield in an AO suspends the function","msgtype":"m.text"},"ts":1593566127000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the AO","msgtype":"m.text"},"ts":1593566128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like the boundary is the function","msgtype":"m.text"},"ts":1593566160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'd have to set up code execution state for AOs","msgtype":"m.text"},"ts":1593566166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyhow, shifting from built-in generator functions to AOs doesn't require suspenable AOs","msgtype":"m.text"},"ts":1593566177000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'm open to new ideas","msgtype":"m.text"},"ts":1593566213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the BIGF doesn't do any suspending, it basically just creates the generator object, and calls GeneratorStart on it.","msgtype":"m.text"},"ts":1593566443000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what's BIGF","msgtype":"m.text"},"ts":1593566457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh built in generator function","msgtype":"m.text"},"ts":1593566466000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1593566472000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah i mean its a generator","msgtype":"m.text"},"ts":1593566485000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then returns the generator object","msgtype":"m.text"},"ts":1593566493000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"except the body is spec steps instead of js code","msgtype":"m.text"},"ts":1593566496000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a BIGF isn't a generator, it's a function that returns a generator.","msgtype":"m.text"},"ts":1593566556000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the BIGFs that i'm talking about are actual reified functions","msgtype":"m.text"},"ts":1593566601000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the BIGFs I'm talking about are the ones in PR 2045","msgtype":"m.text"},"ts":1593566641000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"2045 doesn't make sense to me","msgtype":"m.text"},"ts":1593566722000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like adding slots to the return value implicitly and stuff","msgtype":"m.text"},"ts":1593566729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, well.","msgtype":"m.text"},"ts":1593566735000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"now we agree.","msgtype":"m.text"},"ts":1593566747000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what we came up with for iterator helpers is currently (i think)","msgtype":"m.text"},"ts":1593566782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"- BIGF is real actual function","msgtype":"m.text"},"ts":1593566794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"- it's not exposed directly to js (cc ljharb?)","msgtype":"m.text"},"ts":1593566822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"- it has next() invoked immediately to get proper access to the first yield from userland","msgtype":"m.text"},"ts":1593566849000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/58205433.png","msgtype":"m.text"},"ts":1593566891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"StartIteratorMethod(F, ...) is basically `it = F(...); it.next(); return it`","msgtype":"m.text"},"ts":1593566918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as I understand it, if it has a `next()`, then it's a generator, not a generator function","msgtype":"m.text"},"ts":1593566963000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"whatever you call `function* x() {}`","msgtype":"m.text"},"ts":1593567005000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's the builtin version of that","msgtype":"m.text"},"ts":1593567012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's a generator function, and x() is a generator, I think.","msgtype":"m.text"},"ts":1593567054000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"might help to say \"generator function\" and \"generator instance\"","msgtype":"m.text"},"ts":1593567092000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a lot of people use \"generator\" to mean the function","msgtype":"m.text"},"ts":1593567101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that could lead to confusion all right","msgtype":"m.text"},"ts":1593567127000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"star-syntax generator function\" and \"generator-backed iterator instance\"","msgtype":"m.text"},"ts":1593567202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Looks like the spec uses \"generator object\", \"generator instance\", and \"generator\" more-or-less interchangeably.","msgtype":"m.text"},"ts":1593567424000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"vs \"generator function\" or \"generator function object\"","msgtype":"m.text"},"ts":1593567438000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"That could stand some clean-up.","msgtype":"m.text"},"ts":1593567455000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: without that IteratorKind slot, built-in generators cannot be used in String@@iterator or Map@@iterator. For iterator helper proposal, you can omit that slot and everything works fine","msgtype":"m.text"},"ts":1593569183000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I use \"generator\" to refer \"function*\" and \"iterator\" to its return value 🤔","msgtype":"m.text"},"ts":1593569327000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"is \"Contains await\" in the tla spec defined anywhere","msgtype":"m.text"},"ts":1593577095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://tc39.es/ecma262/#sec-static-semantic-rules","msgtype":"m.text"},"ts":1593577299000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"\"Unless otherwise specified every grammar production alternative in this specification implicitly has a definition for a static semantic rule named Contains which takes an argument named symbol whose value is a terminal or nonterminal of the grammar that includes the associated production.\"","msgtype":"m.text"},"ts":1593577309000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"does that break through function boundaries","msgtype":"m.text"},"ts":1593577358000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it looks like it does","msgtype":"m.text"},"ts":1593577368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, the functions all have an override which stops it from going through them","msgtype":"m.text"},"ts":1593577389000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"e.g. https://tc39.es/ecma262/#sec-function-definitions-static-semantics-contains","msgtype":"m.text"},"ts":1593577409000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"oh interesting, ok","msgtype":"m.text"},"ts":1593577420000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"someday I will make that Contains link","msgtype":"m.text"},"ts":1593577650000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"we need an AI to just automatically link everything that makes sense to be linked","msgtype":"m.text"},"ts":1593577675000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: why do compartments have a module map","msgtype":"m.text"},"ts":1593611788000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a much stronger requirement on caching than the spec has","msgtype":"m.text"},"ts":1593611819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: essentially because they are where people wanted to put all the host hooks, so moving the map so that compartments can resolve on their own scope rather than the realm","msgtype":"m.text"},"ts":1593611853000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the host hook can still be scoped to the compartment","msgtype":"m.text"},"ts":1593611878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the spec is very loose in its requirements yea, but for things like cyclic linkage you need some way to coordinate","msgtype":"m.text"},"ts":1593611887000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: maybe i don't understand the question","msgtype":"m.text"},"ts":1593611902000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: what is the concern with compartments having a map","msgtype":"m.text"},"ts":1593611924000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well not just maps","msgtype":"m.text"},"ts":1593611934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the import/importNow/module apis are weird to me","msgtype":"m.text"},"ts":1593611953000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we all agree on that","msgtype":"m.text"},"ts":1593611965000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if you desire to store your modules by something more than (referrer, specifier) i would say you should bring your own map","msgtype":"m.text"},"ts":1593611982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how we bring our own module map in nodejs's loader","msgtype":"m.text"},"ts":1593611990000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"moduleMap is a way to initialize things, not a true store","msgtype":"m.text"},"ts":1593612016000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"initialize what","msgtype":"m.text"},"ts":1593612042000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"some default hostresolveimportedmodule hook that uses moduleMap?","msgtype":"m.text"},"ts":1593612061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"referrer / callsite is how the spec mandates stuff idk what you mean. you must have some referrer/callsite storage","msgtype":"m.text"},"ts":1593612066000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like literally the api that v8 has","msgtype":"m.text"},"ts":1593612095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"modulo the complexity of ScriptOrModule classes","msgtype":"m.text"},"ts":1593612109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is it not that","msgtype":"m.text"},"ts":1593612112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't understand your question, this about making sure we have hooks enforce spec not the v8 API","msgtype":"m.text"},"ts":1593612134000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right the v8 api doesn't put additional behaviour in","msgtype":"m.text"},"ts":1593612148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its just the spec","msgtype":"m.text"},"ts":1593612150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but \"moduleMap\" is new","msgtype":"m.text"},"ts":1593612155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"moduleMap is helpful to initialize without creating new module instances","msgtype":"m.text"},"ts":1593612157000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't understand what it initializes","msgtype":"m.text"},"ts":1593612166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you *could* wire it up yourself","msgtype":"m.text"},"ts":1593612176000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it is just initializing what the default resolve will preempt","msgtype":"m.text"},"ts":1593612191000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if it is empty, it always calls the hook","msgtype":"m.text"},"ts":1593612196000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that seems weird","msgtype":"m.text"},"ts":1593612203000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if it isn't empty it preempts to those values","msgtype":"m.text"},"ts":1593612208000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"library territory i guess","msgtype":"m.text"},"ts":1593612210000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"see moddable's impl that has a similar API","msgtype":"m.text"},"ts":1593612225000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the use case isn't weird but it being in js is weird","msgtype":"m.text"},"ts":1593612232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if that makes sense","msgtype":"m.text"},"ts":1593612237000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at this point JS is just JS to me and I have few questions","msgtype":"m.text"},"ts":1593612250000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well i can open a more in depth issue i guess","msgtype":"m.text"},"ts":1593612294000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1593612298000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i haven't found enough time for compartments with all the other meetings i've been drowning in","msgtype":"m.text"},"ts":1593612314000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"is there a better person to ping on questions like this","msgtype":"m.text"},"ts":1593612327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: kris kowal likely, though hes been touching that repo more than I","msgtype":"m.text"},"ts":1593613684000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"realms stuff about push back there is a bit more front and center currently for me","msgtype":"m.text"},"ts":1593613702000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]