[
{"content":{"body":" ","msgtype":"m.text"},"ts":1604279333000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":" ","msgtype":"m.text"},"ts":1604279334000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":" ","msgtype":"m.text"},"ts":1604279335000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":" ","msgtype":"m.text"},"ts":1604279335000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"question: is a test without a frontmatter a valid test262 test?","msgtype":"m.text"},"ts":1604293662000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"should it be treated the same as a test without `includes` `features` etc?","msgtype":"m.text"},"ts":1604293686000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I believed that atleast esid was compulsory, but there are tests which don't have any frontmatter, so that assumption isn't quite holding up.","msgtype":"m.text"},"ts":1604293743000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken INTERPRETING.md says test files \"may\" include metadata, so I guess it's technicially optional","msgtype":"m.text"},"ts":1604295291000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm surprised there's any missing it, though","msgtype":"m.text"},"ts":1604295300000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: let me find the exact file that's missing it.","msgtype":"m.text"},"ts":1604296903000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Bakkot: There are about 48 files in test262/test/language/expressions/dynamic-import/ folder alone that don't have any frontmattter","msgtype":"m.text"},"ts":1604300757000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken are those the FIXTURE files? because those aren't tests","msgtype":"m.text"},"ts":1604300832000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1604300848000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"wait, yes","msgtype":"m.text"},"ts":1604300851000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"is there something about it on INTERPRETING.md too?","msgtype":"m.text"},"ts":1604300873000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"https://github.com/tc39/test262/blob/main/INTERPRETING.md#modules","msgtype":"m.text"},"ts":1604300875000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeeeeah","msgtype":"m.text"},"ts":1604300880000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"\"Files bearing a name ending in _FIXTURE.js MUST NOT be interpreted as standalone tests; they are intended to be referenced by test files.\"","msgtype":"m.text"},"ts":1604300883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my bad, I'll read this more carefully.","msgtype":"m.text"},"ts":1604300894000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I rushed into things headfast and didn't read this properly 🙈","msgtype":"m.text"},"ts":1604300921000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"recklessly*","msgtype":"m.text"},"ts":1604301041000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"hm. PR #2085 removed `GetReferencedName ( _V_ )`, but there are still references to it.","msgtype":"m.text"},"ts":1604325032000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"rebase oversight with 2030, I guess","msgtype":"m.text"},"ts":1604330007000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: tx re PR #2220. One other thing I noticed about #2085 was that it un-defined id 'super-reference' (replacing it with 'super-reference-record'). Maybe 'super-reference' should be added as an oldid.","msgtype":"m.text"},"ts":1604336241000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(It un-defined a few other ids as well, but there isn't a sensible place to make them oldids.)","msgtype":"m.text"},"ts":1604336313000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sgtm, I'll add a commit to 2220","msgtype":"m.text"},"ts":1604336338000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek actually, rkirsling is the right person to ask, because I now have the same question. I had written those tests and asked rkirsling to review and sign off, but Fabrice Bellard brought the same question.","msgtype":"m.text"},"ts":1604337481000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"ryzokuken I'm also here to answer any questions re: test262 stuff.","msgtype":"m.text"},"ts":1604337554000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: I know you are! And thanks for that. Didn't want to ping you in the middle of the night though :D","msgtype":"m.text"},"ts":1604339875000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"For now, I'll stop trying to run non-tests and keep the assumption (that all valid tests have a frontmatter), hopefully it won't be a problem.","msgtype":"m.text"},"ts":1604340025000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Sounds good","msgtype":"m.text"},"ts":1604340081000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"devsnek nevermind my \"question\" above, I misread the path through the \"holes check\". I'm making the updates now","msgtype":"m.text"},"ts":1604340196000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: great, thanks!","msgtype":"m.text"},"ts":1604341334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stares at `delete new.target;`","msgtype":"m.emote"},"ts":1604345012000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"stares at `delete super.toString`;","msgtype":"m.emote"},"ts":1604345034000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"one of these is not like the other","msgtype":"m.text"},"ts":1604345043000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: rwaldron-: there's no reason that the HasProperty check should apply to typed arrays","msgtype":"m.text"},"ts":1604345421000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"typed arrays can't have holes, and the methods that actually have complete definitions in the spec don't check HasProperty, e.g. https://tc39.es/ecma262/#sec-%typedarray%.prototype.map","msgtype":"m.text"},"ts":1604345459000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling it does in the cases where TypedArray.p.* delegates to Array.p.* and that function has a holes check","msgtype":"m.text"},"ts":1604345463000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"but it's not delegating, right?","msgtype":"m.text"},"ts":1604345474000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's just lazy speccing","msgtype":"m.text"},"ts":1604345480000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think it's pretty explicit: \"%TypedArray%.prototype.some is a distinct function that implements the same algorithm as Array.prototype.some as defined in 22.1.3.26 except that the this value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of \"length\".\"","msgtype":"m.text"},"ts":1604345547000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"hmm, I disagree, since this is the second such problem we've had to deal with due to that omission of proper algorithms","msgtype":"m.text"},"ts":1604345600000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling the problem I see is that two implementers are telling you that they interpret the spec the same (independently).","msgtype":"m.text"},"ts":1604345627000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"and the ones that have to worry about web compat are on the opposite side, no?","msgtype":"m.text"},"ts":1604345696000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"SM and V8 disagree but I believe that was the case with the other point of disagreement too","msgtype":"m.text"},"ts":1604345844000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling I'm just asking you to make this explicit.","msgtype":"m.text"},"ts":1604345908000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"bradleymeck: does `delete super.toString` work?","msgtype":"m.text"},"ts":1604345968000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no, early error","msgtype":"m.text"},"ts":1604345978000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1604345983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rwaldron-: sorry, make which explicit?","msgtype":"m.text"},"ts":1604345986000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I agree that those method algorithms need to be filled in explicitly","msgtype":"m.text"},"ts":1604346012000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm just spit balling... In the \"lazy spec\" description, add something like \"Step 5.b is replaced with \"Let kPresent be true\"","msgtype":"m.text"},"ts":1604346082000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"It would be different for each of them","msgtype":"m.text"},"ts":1604346096000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1604346144000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or you could add a line in the algorithm's themselves: \"if O.[[TypedArrayName]] is present, let kPresent be true\"","msgtype":"m.text"},"ts":1604346162000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"algorithm*","msgtype":"m.text"},"ts":1604346223000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I think we have the intention to write everything out explicitly, it was just believed not to be urgent","msgtype":"m.text"},"ts":1604346229000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I was off most of last week but I can put it on my radar for this week","msgtype":"m.text"},"ts":1604346296000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Ok, then the issue I'm faced with is that currently devsnek and Fabrice Bellard believe the tests in Test262 to be wrong, and they are trying to implement these changes. I don't want my response to be \"just accept them as is, we'll get around to explicit spec later\"","msgtype":"m.text"},"ts":1604346303000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rkirsling can you comment here: https://github.com/tc39/test262/issues/2879","msgtype":"m.text"},"ts":1604346358000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1604346364000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Thank you sir","msgtype":"m.text"},"ts":1604346367000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I just can't remember where our previous discussion about","msgtype":"m.text"},"ts":1604346374000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm going to undo the changes I have in another PR","msgtype":"m.text"},"ts":1604346388000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"\"not only does it not throw, it doesn't even stop iterating\" took place","msgtype":"m.text"},"ts":1604346388000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Right, that's what I was working from","msgtype":"m.text"},"ts":1604346398000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"But devsnek and Fabrice's reading isn't wrong, tbh.","msgtype":"m.text"},"ts":1604346411000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"The problem is that it's underspec'ed and you're going to fix that.","msgtype":"m.text"},"ts":1604346430000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Right?","msgtype":"m.text"},"ts":1604346432000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"yeah I agree with that statement","msgtype":"m.text"},"ts":1604346444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Cool, glad to see this getting ironed out. I appreciate your time/energy","msgtype":"m.text"},"ts":1604346490000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"likewise 🙇‍♂️","msgtype":"m.text"},"ts":1604346535000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: it seems more correct to me to stop the loop","msgtype":"m.text"},"ts":1604346611000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cuz the length is zero and it doesn't have any of those properties","msgtype":"m.text"},"ts":1604346623000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the issue is that none of the explicit algorithms do that","msgtype":"m.text"},"ts":1604346664000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(like map and filter)","msgtype":"m.text"},"ts":1604346704000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"spec text doesn't have a boolean NOT, right?","msgtype":"m.text"},"ts":1604348382000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i.e. \"perform this predicate AO and return the opposite\"","msgtype":"m.text"},"ts":1604348410000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is there a grammar production used both as a reference/value and for string value?","msgtype":"m.text"},"ts":1604348679000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rkirsling: nope, you usually end up writing two steps","msgtype":"m.text"},"ts":1604348982000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I guess there's `; else return`","msgtype":"m.text"},"ts":1604348992000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1604349036000,"senderName":"shu","senderId":"shu@irc"}
]