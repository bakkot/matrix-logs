[
{"content":{"body":"i'm going to need an editorial and spec review of https://tc39.es/proposal-upsert/ , added to agenda as requesting stage 3, but unclear a bit on what that means when you need the review.","msgtype":"m.text"},"ts":1594390579000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"seems like going towards stage 3 made sense, but we cannot advance it this meeting realistically","msgtype":"m.text"},"ts":1594390597000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"slides also cover the recent changes https://docs.google.com/presentation/d/16PtTpuvkTFycaaqkk5XGZRPLNwzUrzBuN9y7VSrGX9k/edit#slide=id.p","msgtype":"m.text"},"ts":1594390617000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: I made https://github.com/bmeck/proposal-arbitrary-module-namespace-identifiers for `import {\"\" as foo} from \"\";` gonna do the spec today","msgtype":"m.text"},"ts":1594391004000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i remember you were asking about it","msgtype":"m.text"},"ts":1594391011000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: nice","msgtype":"m.text"},"ts":1594391864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the only hard bit is going to be figuring out how to phrase it needs to be representable as valid utf8","msgtype":"m.text"},"ts":1594391892000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have infra for valid utf8 thanks to {en,de}codeURI{component}","msgtype":"m.text"},"ts":1594392010000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh thank god","msgtype":"m.text"},"ts":1594392130000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well in a prose-y way anyway","msgtype":"m.text"},"ts":1594392194000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"internal slot X + getter x(), or configurable-readonly property x. Which one is better in the API design?","msgtype":"m.text"},"ts":1594392232000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: check out AggregateError errors property","msgtype":"m.text"},"ts":1594392282000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: nah, under the hood i see [[IsUnpairedSurrogate]] which is all i needed really","msgtype":"m.text"},"ts":1594392381000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"mathiasbynens: you might know better, is there anything besides surrogates that is a concern when checking if a string in JS is valid utf8?","msgtype":"m.text"},"ts":1594392418000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh I got the link https://github.com/tc39/proposal-promise-any/issues/38","msgtype":"m.text"},"ts":1594392443000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"thanks I'll read it","msgtype":"m.text"},"ts":1594392450000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"bradleymeck: for valid UTF-8, it's just surrogates","msgtype":"m.text"},"ts":1594392491000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: so a static check that all the code points in a string literal are paired would be fine?","msgtype":"m.text"},"ts":1594392512000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: there are cases where you want to check for the larger set of non-characters but that shouldn't be security-sensitive unless you're doing something weird","msgtype":"m.text"},"ts":1594392611000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: this is trying to ensure w/e string is valid utf-8 due to wasm integration https://github.com/bmeck/proposal-arbitrary-module-namespace-identifiers#concerns","msgtype":"m.text"},"ts":1594392643000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"> Getters are for querying internal state; if there's nothing \"internal\" about it, a data property seeems more idiomatic to me.","msgtype":"m.text"},"ts":1594392655000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"non-characters?","msgtype":"m.text"},"ts":1594392656000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this make sense to me, if the data is designed to be immutable, it might be better to use readonly property instead of slot+getter","msgtype":"m.text"},"ts":1594392689000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"bradleymeck: U+FDD0 et al http://www.unicode.org/faq/private_use.html#nonchar4","msgtype":"m.text"},"ts":1594392693000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: interesting, Name in WASM allows for those it looks like https://webassembly.github.io/spec/core/binary/values.html#binary-utf8","msgtype":"m.text"},"ts":1594392784000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: imho everything should allow those, since they can perfectly be represented in utf8","msgtype":"m.text"},"ts":1594392807000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"name is not the same as exports","msgtype":"m.text"},"ts":1594392811000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: but e.g. Chrome's JSON parser/writer didn't until I recently fixed it","msgtype":"m.text"},"ts":1594392826000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"so ymmv","msgtype":"m.text"},"ts":1594392828000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: seems reasonable, this is a spec change just ensuring it is valid utf-8 not that it is sensible","msgtype":"m.text"},"ts":1594392844000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1594392844000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradley you linked to the text format spec in your proposal repo","msgtype":"m.text"},"ts":1594392854000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doh","msgtype":"m.text"},"ts":1594392863000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"should be binary format","msgtype":"m.text"},"ts":1594392873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1594392901000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"üëçüèª","msgtype":"m.text"},"ts":1594392915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mathiasbynens: so only need to iterate and check [[IsUnpairedSurrogate]] it seems, thanks","msgtype":"m.text"},"ts":1594392932000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i still need to fix my utf8 functions in engine262","msgtype":"m.text"},"ts":1594392957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think something is broken in decoding","msgtype":"m.text"},"ts":1594392963000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i figured out why i don't like reading the prose in the spec","msgtype":"m.text"},"ts":1594394821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its too wide","msgtype":"m.text"},"ts":1594394824000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"adding `max-width: 50em` to `p` helps a lot","msgtype":"m.text"},"ts":1594394955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is `export {package as import}` valid when 100% you can't have a local binding named package?","msgtype":"m.text"},"ts":1594401978000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i get that it will blow up later, but it seems like left hand side should be an Identifier not IdentifierName?","msgtype":"m.text"},"ts":1594402006000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's an early error for it","msgtype":"m.text"},"ts":1594402157000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"but it is kind of odd that there's an explicit early error rather than just using `Identifier`, not sure what's up with that","msgtype":"m.text"},"ts":1594402181000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"from the perspective of a parser that's how you'd parse it","msgtype":"m.text"},"ts":1594402209000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe that was the thinking","msgtype":"m.text"},"ts":1594402215000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it? I feel like you'd want to parse it using `Identifier`, which is a thing you already know about","msgtype":"m.text"},"ts":1594402240000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"oh nvm I'm thinking of import not export","msgtype":"m.text"},"ts":1594402262000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"import was probably written first and the export mirrored it","msgtype":"m.text"},"ts":1594402300000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yea import goes down to Identifier via BindingIdentifier","msgtype":"m.text"},"ts":1594402311000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so they don't match, which is equally odd","msgtype":"m.text"},"ts":1594402322000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like there's even a note about \"The above rule means that each ReferencedBindings of NamedExports is treated as an IdentifierReference.\"","msgtype":"m.text"},"ts":1594402370000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I guess IdentifierReference is different from Identifier in that it includes `yield` and `await`? but you can't have a local binding named yield or await in a module anyway","msgtype":"m.text"},"ts":1594402436000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"when is safari gonna ship #!","msgtype":"m.text"},"ts":1594402485000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"unrelated: igalia published a post about Temporal: https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/","msgtype":"m.text"},"ts":1594402574000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I'm counting the seconds until I can use temporal","msgtype":"m.text"},"ts":1594402738000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I'm not sure the seconds are correct because I don't have temporal","msgtype":"m.text"},"ts":1594402752000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they won't be after temporal either :(","msgtype":"m.text"},"ts":1594402763000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"why not","msgtype":"m.text"},"ts":1594402774000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/proposal-temporal/issues/54#issuecomment-546723710","msgtype":"m.text"},"ts":1594402809000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"üëÄ","msgtype":"m.text"},"ts":1594402841000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: I'm wondering here, that is the grammar notation for 08.1 in the specs","msgtype":"m.text"},"ts":1594403612000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it sounds like `08.1` is not conforming to the specs","msgtype":"m.text"},"ts":1594403763000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"mathiasbynens: if you find time, can you glance to check the algo of https://bmeck.github.io/proposal-arbitrary-module-namespace-identifiers/#sec-module-semantics","msgtype":"m.text"},"ts":1594404061000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: looks good","msgtype":"m.text"},"ts":1594404566000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1594404632000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it goes well with the specs, my bad.  I've just found it","msgtype":"m.text"},"ts":1594404685000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"rkirsling: https://github.com/tc39/ecma262/issues/2090","msgtype":"m.text"},"ts":1594405918000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"is \"async\" not an actual keyword?","msgtype":"m.text"},"ts":1594408568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like of/as/from/etc","msgtype":"m.text"},"ts":1594408577000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it is a \"contextual keyword\"","msgtype":"m.text"},"ts":1594408632000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but no not specy","msgtype":"m.text"},"ts":1594408640000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ecmascript has the most evil grammar","msgtype":"m.text"},"ts":1594408678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stares at bash","msgtype":"m.emote"},"ts":1594408776000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: _C_ defined at step 4.b is unused","msgtype":"m.text"},"ts":1594408894000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok now i just need to disambiguate `async()` and `async () =>`","msgtype":"m.text"},"ts":1594408955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: thanks","msgtype":"m.text"},"ts":1594408988000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: I remember having to fix that one in JSC","msgtype":"m.text"},"ts":1594409095000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it was painful in the sense that I addressed all of the relevant failures but IIRC it still didn't feel globally perfect","msgtype":"m.text"},"ts":1594409125000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah no I'm mistaken, it was await as a param name","msgtype":"m.text"},"ts":1594409190000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://trac.webkit.org/changeset/249925/webkit","msgtype":"m.text"},"ts":1594409223000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(also I guess I'm mistaken in that it seems it wasn't so bad in the end; I think it was just difficult to pull apart the intertwining issues at first)","msgtype":"m.text"},"ts":1594409331000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"leobalter: thanks for officially bringing up the discussion","msgtype":"m.text"},"ts":1594409888000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"my feelings are sort of like the eval thing -- either option seems okay as long as we've chosen it consciously","msgtype":"m.text"},"ts":1594409935000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: no problem, I believe it deserves at least that visibility, even more if I wanted this to be a follow up to the proposal","msgtype":"m.text"},"ts":1594409962000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I'm slightly on the same page for the eval problem, but I tend to prefer it being indirect","msgtype":"m.text"},"ts":1594410015000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"as long TC39 makes an opinion, I'd be fine with any outcome","msgtype":"m.text"},"ts":1594410030000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"s/opinion/decision","msgtype":"m.text"},"ts":1594410041000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"(in the eval case in particular, I'm strongly opposed to King Solomon-ing it into an error, but happy to have either spec or impl be made correct)","msgtype":"m.text"},"ts":1594411234000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"likewise","msgtype":"m.text"},"ts":1594415212000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ljharb: if you have a blanket review comment like \"reformat\" i personally would appreciate not using GH's suggest feature","msgtype":"m.text"},"ts":1594424893000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it makes the threads extremely long and hard to scroll through","msgtype":"m.text"},"ts":1594424900000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is there a way to collapse all of them at once","msgtype":"m.text"},"ts":1594424905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah that's fair feedback; i'll delete most of them","msgtype":"m.text"},"ts":1594425257000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: do you know how common it is for finalization groups to use unregister tokens","msgtype":"m.text"},"ts":1594425349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the intention was to try to do the work myself rather than imposing a burden","msgtype":"m.text"},"ts":1594425351000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: k, i left two; one as an example and the other that also fixes a typo","msgtype":"m.text"},"ts":1594425377000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yeah, i think suggestions is a well intentioned feature, i just find it so hard to read","msgtype":"m.text"},"ts":1594425403000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"understandable","msgtype":"m.text"},"ts":1594425416000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"especially since what people end up using them for are typos and other small fixes","msgtype":"m.text"},"ts":1594425418000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the ability to select multiple lines at once helps a ton","msgtype":"m.text"},"ts":1594425429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: i don't know","msgtype":"m.text"},"ts":1594425460000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i found an interesting optimization for register() in v8 where it doesn't have to do a runtime call if there's no unregister token","msgtype":"m.text"},"ts":1594425486000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure how useful it will be though","msgtype":"m.text"},"ts":1594425496000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is there an example of an overwhelming case? I love suggestions, I just hate the bug where you can't accept them in 262","msgtype":"m.text"},"ts":1594425513000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I don't think I've personally had an overwhelming case though)","msgtype":"m.text"},"ts":1594425537000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: right, the runtime calls have to do with the unregister token map. to flip it around, i'd imagine it's at least also common to *not* have unregister tokens","msgtype":"m.text"},"ts":1594425560000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: in the weakrefs PR, every prose paragraph was hard-wrapped, so if i'd done them all there'd have been like a hundred or more","msgtype":"m.text"},"ts":1594425563000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i stopped at like 10","msgtype":"m.text"},"ts":1594425567000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: so in that scenario a fast path is probably worth it, but without real world use cases we're always just guessing","msgtype":"m.text"},"ts":1594425596000,"senderName":"shu","senderId":"shu@irc"}
]