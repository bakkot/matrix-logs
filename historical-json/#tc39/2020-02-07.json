[
{"content":{"body":"is anyone aware of a javascript implementation of the rule-based transliterators in ICU? specifically something that could run in the browser, i.e. without having to bind to ICU?","msgtype":"m.text"},"ts":1581033997000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"I am not sure where to ask about this","msgtype":"m.text"},"ts":1581034005000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"ningu: i'm not aware of such a thing","msgtype":"m.text"},"ts":1581034022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could try compiling libicu targeting wasm","msgtype":"m.text"},"ts":1581034036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I guess","msgtype":"m.text"},"ts":1581034040000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"hrm","msgtype":"m.text"},"ts":1581034044000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"is there a way to tree-shake it and thereby leave out the code that isn't needed?","msgtype":"m.text"},"ts":1581034058000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"I am asking here cause I know that internationalization/unicode support in js is an ongoing effort and some folks here know about ICU","msgtype":"m.text"},"ts":1581034113000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"devsnek: anyway I'm happy to give the wasm route a go, as long as there's some way to end up with js that isn't enormous","msgtype":"m.text"},"ts":1581034150000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"ningu: a good compiler already does that","msgtype":"m.text"},"ts":1581034167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"based on what you expose","msgtype":"m.text"},"ts":1581034169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1581034172000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"assuming you're compiling libicu from source","msgtype":"m.text"},"ts":1581034198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure if I understand -- it isn't just the whole libicu that gets compiled? can you point me to a general guide for compiling libraries with wasm?","msgtype":"m.text"},"ts":1581034202000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"of course from source, yes","msgtype":"m.text"},"ts":1581034205000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"basically when you compile","msgtype":"m.text"},"ts":1581034241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there is this https://developers.google.com/web/updates/2018/03/emscripting-a-c-library","msgtype":"m.text"},"ts":1581034244000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"the compiler will only emit the symbols you actually use","msgtype":"m.text"},"ts":1581034249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't need emscripten for this","msgtype":"m.text"},"ts":1581034261000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since there's no i/o","msgtype":"m.text"},"ts":1581034264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ok got it, so the compile is part of the build/bundling of the js application that uses the library?","msgtype":"m.text"},"ts":1581034274000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"rather than first compile the library, then import it separately or something?","msgtype":"m.text"},"ts":1581034284000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"you have a smaller wrapper c file","msgtype":"m.text"},"ts":1581034299000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that exposes the functions from libicu that oyu want","msgtype":"m.text"},"ts":1581034306000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok I see","msgtype":"m.text"},"ts":1581034316000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"the compiler would only emit code for the stuff your wrappers use","msgtype":"m.text"},"ts":1581034330000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you say I don't need emscripten, but this starts with it too: https://webassembly.org/getting-started/developers-guide/","msgtype":"m.text"},"ts":1581034356000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"so what's the alternative?","msgtype":"m.text"},"ts":1581034359000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"emscripten is a mock implementation of libc","msgtype":"m.text"},"ts":1581034415000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the io parts of it anyway","msgtype":"m.text"},"ts":1581034423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since you don't need that, you can just directly do `clang -target wasm32-unknown`","msgtype":"m.text"},"ts":1581034437000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok I see","msgtype":"m.text"},"ts":1581034446000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"and what about the wrapper file and exposing the functions? is there a guide to that?","msgtype":"m.text"},"ts":1581034469000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"thats just like","msgtype":"m.text"},"ts":1581034484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"writing c","msgtype":"m.text"},"ts":1581034485000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fair enough I guess. so you mean literally a function foo that passes through to call bar from icu (or possibly more complex)","msgtype":"m.text"},"ts":1581034532000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"and then compile that c file that includes the icu headers etc?","msgtype":"m.text"},"ts":1581034550000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"with the wasm target","msgtype":"m.text"},"ts":1581034556000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"I'll try with a hello world first","msgtype":"m.text"},"ts":1581034575000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"well, with a function that returns the square of an integer so no i/o :)","msgtype":"m.text"},"ts":1581034594000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"ningu: yeah you'd just do like `__declspec(dllexport) int add(int a, int b) { return a + b; }`","msgtype":"m.text"},"ts":1581034756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then clang that up","msgtype":"m.text"},"ts":1581034760000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the resulting wasm exports a function called add","msgtype":"m.text"},"ts":1581034765000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is that __declspec business?","msgtype":"m.text"},"ts":1581034778000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"export visibility","msgtype":"m.text"},"ts":1581034800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, and I have to use clang not gcc right?","msgtype":"m.text"},"ts":1581034827000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1581034830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I got this: wasm_test.c:1:12: warning: __declspec attribute 'dllexport' is not supported","msgtype":"m.text"},"ts":1581034882000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1581034989000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ningu: it might be `__attribute__ ((visibility (\"default\")))`","msgtype":"m.text"},"ts":1581035081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it depends on the os and compiler","msgtype":"m.text"},"ts":1581035084000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hrm ok","msgtype":"m.text"},"ts":1581035092000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"you could also do","msgtype":"m.text"},"ts":1581035097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is on linux","msgtype":"m.text"},"ts":1581035097000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"`-Wl,--export=add`","msgtype":"m.text"},"ts":1581035099000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok I see, I was using the wrong version of clang, I need clang 8 and llvm 8","msgtype":"m.text"},"ts":1581035296000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"aim for clang 10","msgtype":"m.text"},"ts":1581035310000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lots of perf stuff","msgtype":"m.text"},"ts":1581035321000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1581035329000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"also this is definitely off topic","msgtype":"m.text"},"ts":1581035359000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry :)","msgtype":"m.text"},"ts":1581035364000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"nah mb","msgtype":"m.text"},"ts":1581035375000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"##javascript is better?","msgtype":"m.text"},"ts":1581035388000,"senderName":"ningu","senderId":"ningu@irc"},
{"content":{"body":"probably","msgtype":"m.text"},"ts":1581035439000,"senderName":"devsnek","senderId":"devsnek@irc"}
]