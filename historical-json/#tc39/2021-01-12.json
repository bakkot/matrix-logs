[
{"content":{"body":"Bakkot: https://github.com/tc39/ecma262/pull/2273","msgtype":"m.text"},"ts":1610423697000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Hm. Thinking more about Number::leftShift, I don't think it's clear what \"left shifting a Number by Y bits\" means. Ditto right-shifts.","msgtype":"m.text"},"ts":1610425476000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Perhaps not for an arbitrary number, but for a number produced by ToInt32 I don't think there's much ambiguity","msgtype":"m.text"},"ts":1610425720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well, one potential (but incorrect) semantics is to multiply the (mathematical) value by 2^Y. Another one is to imagine the Number's significand in a 53-bit register and shift that left by Y. I gather that the correct semantics is to get the mathematical value, represent it in 32-bit 2s complement, left-shift that, read the result as 32-bit 2s comp to get a math integer, then convert that into a Number.","msgtype":"m.text"},"ts":1610427232000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Consider that NumberBitwiseOp goes to the trouble of explicitly saying \"Let lbits be the 32-bit two's complement bit string representing ‚Ñù(lnum).\" and then at the end getting \"the integer represented by the 32-bit two's complement bit string result\"","msgtype":"m.text"},"ts":1610428355000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It seems like similar things must be happening with shifts, but entirely implicitly.","msgtype":"m.text"},"ts":1610428452000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, that's true","msgtype":"m.text"},"ts":1610428648000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"on the other hand I'm not sure spelling it out would actually be _clearer_, per se; readers are likely to be familiar with what left-shifting an int32 does, and adding a bunch of prose would only mask that","msgtype":"m.text"},"ts":1610428703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess there could be a note and then a bunch of prose","msgtype":"m.text"},"ts":1610428724000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll try a PR, see how it looks.","msgtype":"m.text"},"ts":1610428913000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sounds good, thanks","msgtype":"m.text"},"ts":1610428931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: I just realized that https://github.com/tc39/ecma262/pull/2271 and https://github.com/tc39/ecma262/pull/2246 are going to have a ton of merge conflicts","msgtype":"m.text"},"ts":1610430537000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"apologies for not getting to it sooner. I want to get 2271 in asap, I think, since it will also have merge conflicts with almost everything. let me know if you'd like me to make a go at rebasing 2246 when the time comes","msgtype":"m.text"},"ts":1610430621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm guessing those won't be too hard to resolve.","msgtype":"m.text"},"ts":1610431342000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"how soon does 2271 land, d'you think?","msgtype":"m.text"},"ts":1610431380000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"depends on how fast I can convince shu or ljharb to review it","msgtype":"m.text"},"ts":1610431405000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"planning on getting the last bits of work done tonight","msgtype":"m.text"},"ts":1610431424000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and would very much like to get it in before the January meeting, which is two weeks from today","msgtype":"m.text"},"ts":1610431446000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll try to run it through the meatgrinder soon.","msgtype":"m.text"},"ts":1610432169000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"much appreciated","msgtype":"m.text"},"ts":1610432411000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's _mostly_ just moving definitions, but we did end up splitting out a few new ones","msgtype":"m.text"},"ts":1610432456000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am looking forward to finally having a good place to stick headers for SDOs","msgtype":"m.text"},"ts":1610432814000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"by any chance would anyone here happen to know where I can read Jory's \"how to participate\" document?","msgtype":"m.text"},"ts":1610461312000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"have yet to read Allen's \"patterns for participation\", so guess I can start on that for now","msgtype":"m.text"},"ts":1610461652000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: https://github.com/tc39/how-we-work","msgtype":"m.text"},"ts":1610461739000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not a big fan of some of the statements in Allen's document. how-we-work is a living repository edited by many TC39 delegates giving more current information.","msgtype":"m.text"},"ts":1610461778000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"cool, looks like there are quite a few documents in here","msgtype":"m.text"},"ts":1610461879000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"Bakkot: i plan to devote an hour tomorrow to review 2271, though that might not be long enough to finish reviewing","msgtype":"m.text"},"ts":1610471478000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu depends on how thorough you're being; if you trust the correctness and are just looking at the editorial choices that's likely to be enough","msgtype":"m.text"},"ts":1610473407000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can give you a tour at the editor call","msgtype":"m.text"},"ts":1610473422000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that'd be great","msgtype":"m.text"},"ts":1610473745000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"GH's UI is pretty poor for big patches","msgtype":"m.text"},"ts":1610473778000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i should probably just checkout the branch and read the diff in a terminal","msgtype":"m.text"},"ts":1610473787000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"littledan, did you see my message from the other week?","msgtype":"m.text"},"ts":1610476947000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: No, I missed it","msgtype":"m.text"},"ts":1610478108000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"<Sirisian|Work> littledan, Been meaning to ask this. https://github.com/tc39/proposal-decimal/issues/51#issuecomment-587598694 <- is Brendan working on a value type proposal? Not sure if you'd know about any unpublished things.","msgtype":"m.text"},"ts":1610478131000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"<Sirisian|Work> I should say \"still working on\" since he had one ages ago.","msgtype":"m.text"},"ts":1610478131000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"oh, well, the current work towards value types is mostly at https://github.com/tc39/proposal-record-tuple","msgtype":"m.text"},"ts":1610478157000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I have some more thoughts but they are vague and I haven't written them down well","msgtype":"m.text"},"ts":1610478168000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we could do something generalizing `with operator from` from https://github.com/tc39/proposal-operator-overloading , but this would come with significant cost","msgtype":"m.text"},"ts":1610478201000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not seeing the connection between record/tuple and value types. Unless that's what you mean with operators. Like you can't add two anonymous immutable tuples. Also doesn't introduce new types like he had for int64 and uint64 which I've wanted before.","msgtype":"m.text"},"ts":1610481729000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"well, there are different things that different people mean when they talk about value types. Operator overloading is covered in what I linked above. For int64, I think the use cases are more or less subsumed by BigInt.","msgtype":"m.text"},"ts":1610490671000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I got that impression with BigInt64Array and such. Seemed to set things in stone for the direction of new types.","msgtype":"m.text"},"ts":1610494056000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"}
]