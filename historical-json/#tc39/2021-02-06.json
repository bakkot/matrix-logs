[
{"content":{"body":"another reason why class fields are icky https://github.com/nodejs/node/issues/37247","msgtype":"m.text"},"ts":1612620392000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that looks like a normal outcome from attempting to communicate with a subclass from a superclass","msgtype":"m.text"},"ts":1612621583000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"B's constructor calling a method it doesn't define itself is just weird","msgtype":"m.text"},"ts":1612621602000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that's the same outcome you'd get if you defined the property within A's constructor, using the pre-class-field pattern","msgtype":"m.text"},"ts":1612627760000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"seems like the only possible behavior to me","msgtype":"m.text"},"ts":1612627767000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: Bakkot: yeah i posted that in the issue, the icky part is that it makes it less obvious","msgtype":"m.text"},"ts":1612630180000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"only reasonable solution is to not use inheritance </bad-joke>","msgtype":"m.text"},"ts":1612630224000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"the part that‚Äôs broken is the constructor calling this.test() in class A - there‚Äôs no fields in that class, so i don‚Äôt see how it‚Äôs related.","msgtype":"m.text"},"ts":1612630234000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(sorry, swap A and B in my comment, i assumed B would be extending A)","msgtype":"m.text"},"ts":1612630290000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: it is not immediately obvious that the private field hasn't been initialized yet","msgtype":"m.text"},"ts":1612630315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with normal properties you have to call `super()` first which makes it more apparent","msgtype":"m.text"},"ts":1612630331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right but it‚Äôs immediately obvious that the superclass is calling a method that doesn‚Äôt exist in it","msgtype":"m.text"},"ts":1612630334000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ü§∑üèª","msgtype":"m.text"},"ts":1612630344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not a big surprise but this is also something that TS doesn't warn about either. playground: https://cutt.ly/YkvdpWn","msgtype":"m.text"},"ts":1612630641000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"it's not something TS can warn about really","msgtype":"m.text"},"ts":1612631052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep - it would have to effectively error or calling any method in a constructor to catch all the ways this could happen","msgtype":"m.text"},"ts":1612631271000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"I think the rule of 'subclass properties are not setup until after the parents constructor returns' ends up being a rule that is unavoidable/necessary to learn when doing any inheritance.","msgtype":"m.text"},"ts":1612631434000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"for me the pros of this rule outweigh the pain when hitting it for the first time. hopefully the same for others.","msgtype":"m.text"},"ts":1612631516000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"mainly it's just that there's a long list of things with classes that if you do it, it's weird - it can be valid and made to work, but is still weird. calling class methods or doing side effects in the constructor, making a superclass that can't be instantiated by itself, etc","msgtype":"m.text"},"ts":1612645544000,"senderName":"ljharb","senderId":"ljharb@irc"}
]