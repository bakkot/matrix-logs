[
{"content":{"body":"(tfw you don't know which experiment to choose next)","msgtype":"m.text"},"ts":1564272008000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this is kinda why i made engine262","msgtype":"m.text"},"ts":1564272024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it lets you just totally mess around","msgtype":"m.text"},"ts":1564272043000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"success! https://gc.gy/31977212.png","msgtype":"m.text"},"ts":1564272213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"heheh","msgtype":"m.text"},"ts":1564272292000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ok now i've got it parsing optional chaining as normal","msgtype":"m.text"},"ts":1564273062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: is `this?.#test` allowed","msgtype":"m.text"},"ts":1564273307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"believe so","msgtype":"m.text"},"ts":1564274840000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i hope so, but it's worth noting that only prevents an error when `this` is nullish; it will still throw if `this` lacks the `#test` field","msgtype":"m.text"},"ts":1564274911000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1564274948000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm glad to hear this, because parsing would become a lot more complex otherwise","msgtype":"m.text"},"ts":1564275126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"property access is working but calls aren't parsing for some unknown reason ;(","msgtype":"m.text"},"ts":1564276272000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: do you mind if I borrow the tests from your patch","msgtype":"m.text"},"ts":1564276689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not at all","msgtype":"m.text"},"ts":1564276697000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"grazie","msgtype":"m.text"},"ts":1564276751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does `a?.b()` still perform the call if a is nullish?","msgtype":"m.text"},"ts":1564283513000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as far as i can tell that parses as a?.b and then that whole thing is a call expression","msgtype":"m.text"},"ts":1564283530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it does not","msgtype":"m.text"},"ts":1564284042000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i.e. it's not `(a?.b)()`","msgtype":"m.text"},"ts":1564284052000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the base is just `a`","msgtype":"m.text"},"ts":1564284067000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and the whole thing is an OptionalExpression","msgtype":"m.text"},"ts":1564284087000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1564284153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have no idea how to approach this","msgtype":"m.text"},"ts":1564284163000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have an ast sort of like `Call(a?.b, [])`","msgtype":"m.text"},"ts":1564284196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's quite tricky","msgtype":"m.text"},"ts":1564284212000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I still feel like piping the \"optionalness\" through the existing AST structure is not the right way","msgtype":"m.text"},"ts":1564284254000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1564284266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like adding an \"optional\" prop to a member expression node?","msgtype":"m.text"},"ts":1564284283000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like I'd still rather have a parent node that let's you make the short circuit in one jump, if at all possible","msgtype":"m.text"},"ts":1564284309000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmmmmmm","msgtype":"m.text"},"ts":1564284352000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not a bad idea","msgtype":"m.text"},"ts":1564284367000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just have no idea how to do this call","msgtype":"m.text"},"ts":1564284378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of having `a?.b.c` be the same as `(a?.b).c` but carrying some extra data so that you know when `undefined` is an error and when it isn't","msgtype":"m.text"},"ts":1564284411000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"a few hours ago I was worried that I'd have to go back to square one and try that but still hoping not","msgtype":"m.text"},"ts":1564284450000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i made the same mistake with calls in my toy language","msgtype":"m.text"},"ts":1564284569000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess i can read babel","msgtype":"m.text"},"ts":1564284616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've been avoiding doing so, hehehe","msgtype":"m.text"},"ts":1564284704000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: when you parse a?.b() in babel, you get an OptionalCallExpression with the callee being an OptionalMemberExpression","msgtype":"m.text"},"ts":1564284920000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but here's the trick","msgtype":"m.text"},"ts":1564284923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OptionalMemberExpression also has an optional property","msgtype":"m.text"},"ts":1564284932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so a?.b() is OptionalMemberExpression with optional true","msgtype":"m.text"},"ts":1564284941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a?.b.c() is OptionalMemberExpression with optional false","msgtype":"m.text"},"ts":1564284949000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wowsers","msgtype":"m.text"},"ts":1564284997000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so really two flags","msgtype":"m.text"},"ts":1564285017000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I mean maybe I'm being too conservative about adding nodes right now","msgtype":"m.text"},"ts":1564285023000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"short_circuits and child_of_optional_chain","msgtype":"m.text"},"ts":1564285046000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: i figured out a way to do this that only uses a single jump label, basically add a property to member expressions and calls saying if they are short circuiting, then wrap the root in an \"optional chain\" node. when you visit an optional chain node, make a new jump label, push it onto an optional chain jump label stack, and then stack.top() as the target for optional chain null jumps.","msgtype":"m.text"},"ts":1564291902000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1564291942000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no idea how to do this in v8","msgtype":"m.text"},"ts":1564291957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i got it working in slither","msgtype":"m.text"},"ts":1564291963000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1564291968000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so you're saying you'd just evaluate member/call exprs normally otherwise?","msgtype":"m.text"},"ts":1564292048000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's really enticing","msgtype":"m.text"},"ts":1564292061000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah you don't even need to jump over individual member expressions","msgtype":"m.text"},"ts":1564292077000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the thing kicking my ass right now is just how intricate the menagerie of function call nodes is","msgtype":"m.text"},"ts":1564292085000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah i dunno how well the theory meshes with real-world engines","msgtype":"m.text"},"ts":1564292108000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but we can dream :)","msgtype":"m.text"},"ts":1564292117000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm scared to copy-paste too much because keeping it all in sync over time sounds like a maintainability nightmare","msgtype":"m.text"},"ts":1564292138000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's basically the point i got to","msgtype":"m.text"},"ts":1564292157000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in v8 i had like three different versions of MemberExpression : MemberExpression . Identifier","msgtype":"m.text"},"ts":1564292182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/bytecompiler/NodesCodegen.cpp#L1326-L1538","msgtype":"m.text"},"ts":1564292309000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"dot-access-and-call is three nodes amounting to over 200 lines","msgtype":"m.text"},"ts":1564292338000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so many specializations :fear:","msgtype":"m.text"},"ts":1564292355000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I weep","msgtype":"m.text"},"ts":1564292357000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's why I've been stuck in think-and-not-do mode today","msgtype":"m.text"},"ts":1564292474000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"'cause copy-pasting all of that is out of the question","msgtype":"m.text"},"ts":1564292503000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"who would've thought a simple null check would be so hard :(","msgtype":"m.text"},"ts":1564292633000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"srsly","msgtype":"m.text"},"ts":1564292650000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmmmm","msgtype":"m.text"},"ts":1564292825000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I wonder if passing the label down instead of the pre-evaluated base would do the trick","msgtype":"m.text"},"ts":1564292897000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(*instead of the register for the)","msgtype":"m.text"},"ts":1564292947000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"apparently a label in v8 can only have one referencing jump","msgtype":"m.text"},"ts":1564292953000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"interesting. is that a problem here though?","msgtype":"m.text"},"ts":1564293000000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well in `a?.b?.c`","msgtype":"m.text"},"ts":1564293026000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are two jumps referencing the end null label","msgtype":"m.text"},"ts":1564293041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was viewing it as `(a?.b)?.c`","msgtype":"m.text"},"ts":1564293090000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1564293125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so I think you're preoptimizing there :)","msgtype":"m.text"},"ts":1564293126000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in theory its a lot simpler to just have the one label","msgtype":"m.text"},"ts":1564293153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm...faster, for sure, but I hadn't thought of it as simpler","msgtype":"m.text"},"ts":1564293239000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: here's what I came up with https://chromium-review.googlesource.com/c/v8/v8/+/1723359","msgtype":"m.text"},"ts":1564328212000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: gasp, I gotta make haste","msgtype":"m.text"},"ts":1564341871000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: I nerd-sniped myself and ended up staying up til 5am :P","msgtype":"m.text"},"ts":1564342264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"XD","msgtype":"m.text"},"ts":1564342276000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]