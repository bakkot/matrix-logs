[
{"content":{"body":"devsnek: not currently, forgot to ask for stage 1 so never made one","msgtype":"m.text"},"ts":1592697663000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1592697688000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: i meant how symbol is converted to string using \"[\" + description + \"]\".","msgtype":"m.text"},"ts":1592703724000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"That doesn't seem like a convention which is used in other places.","msgtype":"m.text"},"ts":1592703724000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"And also someone noticed that if description is empty, it becomes just [], which might be confused with arrays. So, instead it's kept as just empty string.","msgtype":"m.text"},"ts":1592703724000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"symbol isn't converted to string via \"[\" + description + \"]\"","msgtype":"m.text"},"ts":1592703783000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the symbol-to-string part happens at \"Let description be name's [[Description]] value.\"","msgtype":"m.text"},"ts":1592703827000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i think we are talking about different sections of the spec. I am talking about - https://tc39.es/ecma262/#sec-setfunctionname","msgtype":"m.text"},"ts":1592708121000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"that's what i was talking about too, see step 4.a","msgtype":"m.text"},"ts":1592708150000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Ok, got your point. Yes, technically 4 a gives the description which is a string.","msgtype":"m.text"},"ts":1592708230000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"But that is not the final name which is set to the function","msgtype":"m.text"},"ts":1592708230000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"perhaps you could restate your question/concern/point?","msgtype":"m.text"},"ts":1592708459000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"My question was, is this a convention when a symbol is represented by a string? (description being surrounded by \"[]\")","msgtype":"m.text"},"ts":1592708733000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Is there any other place where a symbol is represented using this format?","msgtype":"m.text"},"ts":1592708756000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Well, that's easy enough to check for yourself: just look for how [[Description]] is used in the spec.","msgtype":"m.text"},"ts":1592708883000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yes. So i saw that symbol.toString does - \"Symbol(\", desc, and \")\".","msgtype":"m.text"},"ts":1592709102000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Is there any reason why these two representations are different?","msgtype":"m.text"},"ts":1592709121000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Dunno. Probably.","msgtype":"m.text"},"ts":1592709199000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Got it. I understand that there was probably some discussion around it.","msgtype":"m.text"},"ts":1592709508000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"So if someone remembers such a discussion or can point to something - that will be helpful.","msgtype":"m.text"},"ts":1592709508000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"(i looked in the notes and couldn't find with basic search)","msgtype":"m.text"},"ts":1592709529000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Looks like it was introduced in one of the early drafts of ES6, is November/December 2012","msgtype":"m.text"},"ts":1592709690000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"s/is/in/","msgtype":"m.text"},"ts":1592709696000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Symbol, that is.","msgtype":"m.text"},"ts":1592709737000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Hmm, i found notes for symbol.description - but that's probably the public property","msgtype":"m.text"},"ts":1592709879000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"And is there any old documentation for these es6 era discussions?","msgtype":"m.text"},"ts":1592709929000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"theoretically, yes","msgtype":"m.text"},"ts":1592710019000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"meeting notes would be posted to the es-discuss list","msgtype":"m.text"},"ts":1592710137000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Ok, i will try to look there","msgtype":"m.text"},"ts":1592710993000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: it's a parallel of computed properties","msgtype":"m.text"},"ts":1592712151000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i.e. representing an expression in an identifier context","msgtype":"m.text"},"ts":1592712186000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ok. So this convention was chosen because it looks like a computed property?","msgtype":"m.text"},"ts":1592712363000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"I mean using square brackets around the description makes it look like a computed property","msgtype":"m.text"},"ts":1592712403000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"yeah, all well known symbols have a description of the way you access them","msgtype":"m.text"},"ts":1592712443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example `Function.prototype[Symbol.hasInstance].toString()` will give you something like `'function [Symbol.hasInstance]() { [native code] }'`","msgtype":"m.text"},"ts":1592712465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Isn't that a side-effect of this rule, though?","msgtype":"m.text"},"ts":1592713952000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Ok, i guess not. Because this is not a normal function, and wasn't created using `Function.prototype[Symbol.hasInstance] = function(){} `.","msgtype":"m.text"},"ts":1592714104000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"It is just made to have a similar name","msgtype":"m.text"},"ts":1592714104000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: what else would you expect `({ [Symbol.iterator]() {} })[Symbol.iterator].name` to be?","msgtype":"m.text"},"ts":1592717069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Well it could have been \"Symbol(Symbol.iterator)\" just like how `Symbol.iterator.toString()` works","msgtype":"m.text"},"ts":1592718469000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"(i am not saying that that should be the case, but it's little odd that symbols can get \"stringified\" in 2 different ways - depending on .toString or NamedEvaluation","msgtype":"m.text"},"ts":1592718566000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1592718568000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1592718584000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bendtherules: i think the difference is that the toString is meant to tell you about the symbol, the name is meant to tell you about the function itself","msgtype":"m.text"},"ts":1592718607000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Hmm, makes sense. I am sure there would have been some discussion around this - so just wanted to find that.","msgtype":"m.text"},"ts":1592718806000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"github.com/tc39/notes would likely have it","msgtype":"m.text"},"ts":1592718849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I searched there, but couldn't find it. There is some discussion around Symbol.description - but I think that is just about internal desc getting exposed through public property","msgtype":"m.text"},"ts":1592718937000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"There is also the es-discuss list, but it's little hard to search. Will try to search more later.","msgtype":"m.text"},"ts":1592718994000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: you can run a git blame on the spec to see which commit introduced it","msgtype":"m.text"},"ts":1592750229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that predates git for the spec","msgtype":"m.text"},"ts":1592757819000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we moved to git somewhere between ES2015 and ES2016","msgtype":"m.text"},"ts":1592757828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"specifically, for the start of ES2016 development","msgtype":"m.text"},"ts":1592768816000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]