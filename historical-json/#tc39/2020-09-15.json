[
{"content":{"body":"it would just be all heximals","msgtype":"m.text"},"ts":1600128009000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was gonna say, yes, it'll be entirely about base-6 and why it's better.","msgtype":"m.text"},"ts":1600128793000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins is all like, \"hey I'm running over to the 1-5, you need anything?\"","msgtype":"m.text"},"ts":1600128984000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1600129023000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(s/err//, I dunno what I was second-guessing)","msgtype":"m.text"},"ts":1600129062000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well or 11-15, whatever","msgtype":"m.text"},"ts":1600129130000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Uh, re-interpreting the numbers, it's roughly 10-54","msgtype":"m.text"},"ts":1600129257000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"using the heximal clock at https://xanthir.com/hex/clock/","msgtype":"m.text"},"ts":1600129300000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"10 months a year 54 years a century","msgtype":"m.text"},"ts":1600129316000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yup, you got it","msgtype":"m.text"},"ts":1600129323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh I was just doing numbers mod 6 or base-6","msgtype":"m.text"},"ts":1600130001000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but yeah for times it'd be different","msgtype":"m.text"},"ts":1600130014000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: damn that'd be quite a shop","msgtype":"m.text"},"ts":1600130052000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Say an ES algorithm has \"If _x_ is 0, throw a FooError. If _y_ is 0, throw a BarError.\" So if you invoke with _x_ = 0, _y_ = 0, you expect a FooError.  Does backwards compat prevent you from swapping the two 'If's, so that _x_=0, _y_=0 results in a BarError?","msgtype":"m.text"},"ts":1600135280000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i would assume so","msgtype":"m.text"},"ts":1600135685000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: people from two browser vendors have told me that they almost never see people depending on the types of errors","msgtype":"m.text"},"ts":1600136008000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so it'd probably be fine","msgtype":"m.text"},"ts":1600136016000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they'd be unlikely to want to try it and see without good reason","msgtype":"m.text"},"ts":1600136027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: which method? my shims depend on that.","msgtype":"m.text"},"ts":1600136028000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"more specifically, the tests do, and as soon as an implementation has ever deviated from the spec in that regard, the implementation does too. so if the order's been consistent in every implementation, then it wouldn't break any of my extant code to swap it, it'd just break my tests.","msgtype":"m.text"},"ts":1600136079000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In https://tc39.es/ecma262/#sec-typedarray-buffer-byteoffset-length, i was looking at the \"If length us not undefined\" in step 8 and \"If length is undefined\" in step 11 and wondering if they could be brought together, but that would change the specified behavior (i.e., which error is thrown) in the case that both _length_ is bad and IsDetachedBuffer() is true.","msgtype":"m.text"},"ts":1600136828000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: most of the time, i'm willing to take the risk for different error types","msgtype":"m.text"},"ts":1600139881000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's pretty low, but still weighed against the rationale for the change","msgtype":"m.text"},"ts":1600139906000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if it's just editorial clarity or something, then no","msgtype":"m.text"},"ts":1600139912000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jmdyck: at the least, none of my code happens to care about that particular one ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1600144545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you may not like it but this is what peak ecmascript performance looks like https://gc.gy/67882719.png","msgtype":"m.text"},"ts":1600177744000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron: those generated tests you just added are missing feature flags","msgtype":"m.text"},"ts":1600178403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What is the `spec` term for auto-boxing?","msgtype":"m.text"},"ts":1600181195000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"i'm not sure there is","msgtype":"m.text"},"ts":1600181224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1600181529000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: a few places like https://tc39.es/ecma262/#sec-getv say \"using a wrapper object appropriate for the type of the value\"","msgtype":"m.text"},"ts":1600189700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: thanks for confirming, had zeroed down to same!","msgtype":"m.text"},"ts":1600189831000,"senderName":"howdoi","senderId":"howdoi@irc"}
]