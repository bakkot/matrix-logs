[
{"content":{"body":"littledan, TabAtkins: I left a slide with a screenshot of the summary table from the proposal wiki, near the end of the pipe-operator presentation. It might help sum up the options for the audience. You can edit/cut it as you think is appropriate.","msgtype":"m.text"},"ts":1615345571000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: A recurring problem in this proposal is that people are overwhelmed by its complexity, which leads them to react negatively to it. Your summary table in https://docs.google.com/presentation/d/1for4EIeuVpYUxnmwIwUuAmHhZAYOOVwlcKXAnZxhh4Q/edit#slide=id.gc6b314891c_1_0 is quite clear and helpful to me, but I'm not sure whether to present it, as I imagine that some people will just feel overwhelmed...","msgtype":"m.text"},"ts":1615376764000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"FWIW, I agree that the table is clear and helpful","msgtype":"m.text"},"ts":1615379773000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jschoi: littledan the third to last row in that table is missing parens around the object literal in the arrow function RHS (and potentially around the “original” as well since the position is ambiguous)","msgtype":"m.text"},"ts":1615387266000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Good catch. I’ll fix.","msgtype":"m.text"},"ts":1615388034000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"littledan: Sorry to bug you, but you could share the slides with my normal email address (jackalmage⊙gc) rather than my work? I can only access Slides on my work account from my laptop, not from my (personal) desktop computer.","msgtype":"m.text"},"ts":1615401543000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I'm still *very* pissy about our security folks removing the ability to read email/cal/docs on personal devices *right at the start of the pandemic quarantine last year*.)","msgtype":"m.text"},"ts":1615401586000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jschoi: Are the parens around the Hack yield example required due to yield precedence if more pipe follows that bit?","msgtype":"m.text"},"ts":1615401656000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Yes, that is a special early error to prevent footgunning due to `yield`’s very loose precedence if more pipe follows it. I am open to removing the rule.","msgtype":"m.text"},"ts":1615401904000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Ahhh, I see. I have no opinion on it, I was just noting the discrepancy.","msgtype":"m.text"},"ts":1615401925000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Sure, gave you access","msgtype":"m.text"},"ts":1615402851000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"danke","msgtype":"m.text"},"ts":1615402858000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"littledan: In your \"hot take\" slide you use \"point-free can be bad when overused\" as the reason to avoid placeholder/partial-application, but those are literally *point-ful*, it's the exact opposite of the point you're making.","msgtype":"m.text"},"ts":1615410368000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, I guess that was written thinking more about smart mix","msgtype":"m.text"},"ts":1615410407000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Smart mix is also pointful.","msgtype":"m.text"},"ts":1615410416000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess I mean something more like \"too complicated\" rather than overused","msgtype":"m.text"},"ts":1615410419000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It in fact does *not* support point-free at all beyond the most basic \"single named unary function\" case.","msgtype":"m.text"},"ts":1615410435000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, the slide says pretty clearly that the reason is excess complexity","msgtype":"m.text"},"ts":1615410522000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I stand by the statement that it's possible to go overboard on these features, and that it can be harmful to the learning process","msgtype":"m.text"},"ts":1615410544000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"No, it says the excess complexity *of point-free programming* (as shown by stack-based/vector/etc) langs is a problem. And Hack/Smart-mix/partial-application are all *explicitly* point-ful to *avoid* point-free-ness.","msgtype":"m.text"},"ts":1615410565000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"F#/minimal style are the ones that allow/support point-free. You're making the point exactly backwards.","msgtype":"m.text"},"ts":1615410585000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"where did I say overused?","msgtype":"m.text"},"ts":1615410592000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"\"Functional, stack-based and vector languages show that you can go overboard on point-free programming and it's harmful to people learning the language\"","msgtype":"m.text"},"ts":1615410606000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, I meant overboard in complexity","msgtype":"m.text"},"ts":1615410616000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think we're talking past each other.","msgtype":"m.text"},"ts":1615410626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In that statement you're making a point about point-free style causing complexity.","msgtype":"m.text"},"ts":1615410640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right?","msgtype":"m.text"},"ts":1615410641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there's lots of different idioms you have to learn to avoid creating variable names in those languages","msgtype":"m.text"},"ts":1615410643000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"my basic feeling is, we should just tell people to go back and name variables when they hit those cases","msgtype":"m.text"},"ts":1615410672000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe it'll be more clear when I'm presenting it?","msgtype":"m.text"},"ts":1615410679000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and then we can argue in the Q/A?","msgtype":"m.text"},"ts":1615410684000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"...yes, okay, I agree. So that point is *exactly backwards* to the way you're using it.","msgtype":"m.text"},"ts":1615410690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Happy to argue in the QA, but don't want the slide to present something that's straight-up wrong. ^_^","msgtype":"m.text"},"ts":1615410704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think F# is simple enough","msgtype":"m.text"},"ts":1615410706000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that's a very subjective judgement","msgtype":"m.text"},"ts":1615410712000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not saying anything F# being complex.","msgtype":"m.text"},"ts":1615410726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I I mean, I think it's simple enough to satisfy the particular concern I'm raising","msgtype":"m.text"},"ts":1615410751000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm saying that your statement about point-free causing complexity is *only* a strike against F#-style. It literally does not apply to the others, they *do* have named arguments. They're pointful.","msgtype":"m.text"},"ts":1615410757000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I understand your argument","msgtype":"m.text"},"ts":1615410769000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"in a different sense, Hack has its own complexity, and achieves an increase in expressiveness","msgtype":"m.text"},"ts":1615410799000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not trying to make a value judgement here. I'm just saying you're making a statement that is exactly backwards in a factual notion.","msgtype":"m.text"},"ts":1615410808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm specifically saying, \"we just don't need to be so expressive\"","msgtype":"m.text"},"ts":1615410809000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"If your statement was about complexity in general it wouldn't be wrong.","msgtype":"m.text"},"ts":1615410826000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess, at a high level, I still see Hack as \"point-free\" kinda since you're not giving a name to your point","msgtype":"m.text"},"ts":1615410839000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(I'd *think* it was wrong, but then it's a value judgement that we can meaningfully disagree on.)","msgtype":"m.text"},"ts":1615410844000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The point is named ?","msgtype":"m.text"},"ts":1615410849000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1615410853000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Like... that's literally its name","msgtype":"m.text"},"ts":1615410856000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, there's a reason why we're discussing these together and not proposing them as two orthogonal features","msgtype":"m.text"},"ts":1615410863000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"foo(1, ?) has a point exactly like foo(1,x) does","msgtype":"m.text"},"ts":1615410866000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and exactly *no* like `curry(foo, 1)` does","msgtype":"m.text"},"ts":1615410891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But like pointful/point-free does have a definition, and that slide is currently factually backwards per that definition.","msgtype":"m.text"},"ts":1615410944000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, the goal is to avoid forcing people to explicitly find names for intermediate values. That's what I'm calling \"point-free\" even though it's techncially wrong","msgtype":"m.text"},"ts":1615410957000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Don't","msgtype":"m.text"},"ts":1615410962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sorry, hit Enter too early","msgtype":"m.text"},"ts":1615410967000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah that should have a different name","msgtype":"m.text"},"ts":1615410971000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like anonymous something","msgtype":"m.text"},"ts":1615410989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Don't use words with well-understood meanings for your own custom meanings, particularly when the normal meaning is relevant to the discussion. ^_^","msgtype":"m.text"},"ts":1615410990000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wait, is the meaning of \"point-free\" \"not named\"?","msgtype":"m.text"},"ts":1615411003000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1615411011000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i've never really understood the term, and i've always lightly assumed \"point\" is `.`","msgtype":"m.text"},"ts":1615411021000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Hehehe","msgtype":"m.text"},"ts":1615411035000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"point\" means \"place\" in this case","msgtype":"m.text"},"ts":1615411046000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(as in 2-place function)","msgtype":"m.text"},"ts":1615411061000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bit of a weird word but it goes back many decades","msgtype":"m.text"},"ts":1615411081000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Yeah so like `flip(Math.pow)` is a point-free way to spell `(e,b) => Math.pow(b,e)`","msgtype":"m.text"},"ts":1615411097000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Manipulating the arguments without explicitly naming them.","msgtype":"m.text"},"ts":1615411110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1615411110000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"TabAtkins: so like using `.bind` instead of an arrow as a callback?","msgtype":"m.text"},"ts":1615411171000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yes, `foo.bind(null, arg1)` vs `arg2=>foo(arg1, arg2)` is point-free vs pointful, because the arg2 argument is never explicitly indicated.","msgtype":"m.text"},"ts":1615411279000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've never looked at the pipeline proposal in depth. Curious, it's not possible to make JS clever enough to pull object names into the scope of a pipeline as an alternative to \"?\" (are these called sigils?). function foo() { return { a: 1, b: 2 } }; foo() |> bar(a, b); Just thinking outloud.","msgtype":"m.text"},"ts":1615411323000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: I'm not sure what your example is trying to show.","msgtype":"m.text"},"ts":1615411354000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh I see, nm.","msgtype":"m.text"},"ts":1615411376000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, it's not possible. Not because it's impossible technically (it def is) but because it breaks the \"bindings should never show up dynamically\" invariant that JS and most languages stick to.","msgtype":"m.text"},"ts":1615411415000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ok with that understanding of the term, the JS community very strongly leans towards \"pointful\" programming","msgtype":"m.text"},"ts":1615411416000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: yes?","msgtype":"m.text"},"ts":1615411419000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: modulo the capital-F FP community","msgtype":"m.text"},"ts":1615411437000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Yes, point-free (from Ramda and some others) is a minority position.","msgtype":"m.text"},"ts":1615411440000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok thanks","msgtype":"m.text"},"ts":1615411444000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(I enjoy it, but it's definitely minority.)","msgtype":"m.text"},"ts":1615411447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i use like it, but given all the array methods pass arguments i rarely need, i don't use it very often","msgtype":"m.text"},"ts":1615411487000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Sirisian|Work: That is, the `a` and `b` bindings aren't present in any lexical scope of the pipe body, it's instead created dynamically from the result of evaluating foo(), which is a no-no.","msgtype":"m.text"},"ts":1615411501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"*i like it, i mean","msgtype":"m.text"},"ts":1615411519000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Yeah exactly, directly passing functions *would* be most useful in .map(), weighting by call-site usage, but that's precisely where you can't safely do it :/","msgtype":"m.text"},"ts":1615411553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Sirisian|Work: You can call the `?`a “placeholder token” or “topic sigil” or “topic reference” or whatever. And the precise token character is not final and would be bikeshedded later, if the Committee shows interest in advancing Hack pipes.","msgtype":"m.text"},"ts":1615411733000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"I also prefer access to point-free style, but would not die on that hill for pipelines. `x=>` and `(x)` aren't *that* expensive in terms of comprehension","msgtype":"m.text"},"ts":1615411735000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Makes sense. I figured introducing random undefined variables would be weird. I usually like named variables, but the sigil works. Very compact.","msgtype":"m.text"},"ts":1615411794000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: not just weird, it would be a massive refactoring hazard from existing code","msgtype":"m.text"},"ts":1615411830000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Different than destructuring?","msgtype":"m.text"},"ts":1615411990000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"if it was implicit, yes","msgtype":"m.text"},"ts":1615412009000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, if you explicitly indicated what keys were being drawn out of the return value of a method (to be made visible to the next pipeline step) it would be fine.","msgtype":"m.text"},"ts":1615412089000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]