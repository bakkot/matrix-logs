[
{"content":{"body":"Guys, the expression `test.hello.foo` yields `Reference` type whose `bv` is `test.hello`, right? If we use that as a `CallExpression`, by `EvaluateCall` 1-a-i thisValue ends up being GetThisValue(test.hello), but I don't think it's right. What am I missing?","msgtype":"m.text"},"ts":1564068736000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"GetThisValue(test.hello) would be test, but the actual run shows foo itself. =/","msgtype":"m.text"},"ts":1564068796000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"in `test.hello.foo`","msgtype":"m.text"},"ts":1564068821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"first a reference of test -> hello is built","msgtype":"m.text"},"ts":1564068831000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then in the `(test -> hello).foo` part","msgtype":"m.text"},"ts":1564068850000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`test->hello` is passed to GetValue()","msgtype":"m.text"},"ts":1564068863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which grabs the result of actually performing the lookup","msgtype":"m.text"},"ts":1564068871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so the final thing is (whatever the result of test.hello is) and foo","msgtype":"m.text"},"ts":1564068888000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So at least the `bv` is not a foo, I think?","msgtype":"m.text"},"ts":1564068950000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"the base value is the result of GetValue(test.hello)","msgtype":"m.text"},"ts":1564068968000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So, the final Reference type of `test.hello.foo` is test.hello -> foo. Am I wrong?","msgtype":"m.text"},"ts":1564069106000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"it's whatever `test.hello` evaluated to","msgtype":"m.text"},"ts":1564069120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if test.hello was 5 it would be 5 -> foo","msgtype":"m.text"},"ts":1564069159000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I got what you meant. Thanks. But, using it as a CallExpression and doing console.log(this) inside foo gives somewhat strange behavior. In `let test = { \"hello\": { foo() { console.log(this); } } };`, test.hello would be \"hello\" object there, and `EvaluateCall` should give me GetThisValue(that \"hello\" object), thereby test.","msgtype":"m.text"},"ts":1564069443000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"Thank you for bearing with me, by the way.","msgtype":"m.text"},"ts":1564069517000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"cpplearner: you should get `{ foo() {} }` as the this value","msgtype":"m.text"},"ts":1564069521000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Thank you for the hints! I finally got it.","msgtype":"m.text"},"ts":1564070137000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"=) Have a nice day.","msgtype":"m.text"},"ts":1564070149000,"senderName":"cpplearner","senderId":"cpplearner@irc"}
]