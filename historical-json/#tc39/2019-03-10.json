[
{"content":{"body":"Bakkot: hah, I hadn't noticed that you're literally in the midst of refactoring that text (https://github.com/tc39/ecma262/pull/1464)","msgtype":"m.text"},"ts":1552183521000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"tbh I don't think \"early ReferenceError\" ought to be a concept in the spec","msgtype":"m.text"},"ts":1552188111000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just throw a SyntaxError","msgtype":"m.text"},"ts":1552188137000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1552188382000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: is that a reversible decision?","msgtype":"m.text"},"ts":1552188401000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: depends on whether anyone is depending on it. But we have generally said (and found) that _removing_ an error which is only observable to correct programs via `eval` (or equivalents) is not problematic, since that happens whenever we add new syntax, so I would guess that changing the type of such an error would likewise be acceptable.","msgtype":"m.text"},"ts":1552188510000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Yeah, I feel like moving from one sort of error to another would be okay, aside from any concern about popular frameworks/libraries checking which kind it is","msgtype":"m.text"},"ts":1552188613000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess my immediate thought was that someone would object on account of the original reason for introducing the concept (whatever that may be), but maybe I'm wrong?","msgtype":"m.text"},"ts":1552188696000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"early Reference Error was introduced in ES6, so discussion might be findable","msgtype":"m.text"},"ts":1552190744000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"draft 10 was the first that had it, 2012-09-27.","msgtype":"m.text"},"ts":1552190968000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"release notes don't mention it.","msgtype":"m.text"},"ts":1552191022000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"There's some history in https://github.com/tc39/ecma262/issues/691","msgtype":"m.text"},"ts":1552191767000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: that is certainly an interesting thread","msgtype":"m.text"},"ts":1552193840000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"from the spec text perspective, they're also rarer than I was thinking","msgtype":"m.text"},"ts":1552194365000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"of the 40 `Static Semantics: Early Errors` sections, there are only four ReferenceError cases (demonstrated by `0++;`, `++0;`, `0 = 0;`, and `0 += 0;`) and they all boil down to \"AssignmentTargetType is ~invalid~\"","msgtype":"m.text"},"ts":1552194662000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"perhaps that does raise a question of whether it's truly worthwhile","msgtype":"m.text"},"ts":1552194718000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: honestly I'd expect those to all be syntax errors, like on a design level","msgtype":"m.text"},"ts":1552228890000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah I added my vote for that to the thread jmdyck linked -- apparently Allen had already said the same, which I totally wasn't expecting","msgtype":"m.text"},"ts":1552243329000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]