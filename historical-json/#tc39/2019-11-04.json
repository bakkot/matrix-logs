[
{"content":{"body":"didn't someone vie for async constructors at one point?","msgtype":"m.text"},"ts":1572885441000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it comes up on esdiscuss every once in a while","msgtype":"m.text"},"ts":1572891315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and someone asked about it here a month ago or so","msgtype":"m.text"},"ts":1572891323000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems not totally unreasonable","msgtype":"m.text"},"ts":1572891844000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I have found myself writing `static async init()` pretty often","msgtype":"m.text"},"ts":1572891863000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"bakkot: i'd argue that's what you should do though","msgtype":"m.text"},"ts":1572892546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ehhhh","msgtype":"m.text"},"ts":1572892572000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"`new` returns instance, static method for random async logic stuff","msgtype":"m.text"},"ts":1572892580000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i've used libraries where new returns promises","msgtype":"m.text"},"ts":1572892590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its kind of annoying","msgtype":"m.text"},"ts":1572892595000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`static async init()` sounds A LOT like Java though.","msgtype":"m.text"},"ts":1572892611000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"AsyncClassFactory","msgtype":"m.text"},"ts":1572892626000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`public static int main()`","msgtype":"m.text"},"ts":1572892629000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"devsnek: the point is that I want it to be an invariant that a.) `new` returns an instance and b.) all instances are fully initialized","msgtype":"m.text"},"ts":1572892630000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but when full initialization requires async logic, I cannot do this","msgtype":"m.text"},"ts":1572892639000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"so `new.await foo()` or whatever seems warranted","msgtype":"m.text"},"ts":1572892652000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"you can just do `await new foo()`","msgtype":"m.text"},"ts":1572892661000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then `new` does not return an instance","msgtype":"m.text"},"ts":1572892675000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1572892677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(also interacts very poorly with inheritance)","msgtype":"m.text"},"ts":1572892682000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1572892687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i feel like we're agreeing","msgtype":"m.text"},"ts":1572892706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... maybe?","msgtype":"m.text"},"ts":1572892726000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"are you in favor of async constructors, or do you think `static async init()` is better?","msgtype":"m.text"},"ts":1572892739000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"async constructors would return promises right?","msgtype":"m.text"},"ts":1572892754000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, technically yes?","msgtype":"m.text"},"ts":1572892774000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but you would invoke them with `new.await`, rather than `await new`","msgtype":"m.text"},"ts":1572892792000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1572892801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1572892803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd probably just go with `static async create()`","msgtype":"m.text"},"ts":1572892819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(or `super.await()`, in an async constructor, I guess.)","msgtype":"m.text"},"ts":1572892830000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah I mean that works","msgtype":"m.text"},"ts":1572892848000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but still interacts poorly with inheritance","msgtype":"m.text"},"ts":1572892853000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"this seems like the virality issue that tla has","msgtype":"m.text"},"ts":1572892855000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"had*","msgtype":"m.text"},"ts":1572892858000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"eh","msgtype":"m.text"},"ts":1572892880000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"tla was lucky that the visible edges of graphs always happened to be async","msgtype":"m.text"},"ts":1572892882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"async things are async","msgtype":"m.text"},"ts":1572892883000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but 99.9% of constructors in js are not returning promises","msgtype":"m.text"},"ts":1572892897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of course, because that's bad","msgtype":"m.text"},"ts":1572892913000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"they are just returning not-fully-initialized instances","msgtype":"m.text"},"ts":1572892919000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah i'm just saying","msgtype":"m.text"},"ts":1572892929000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since constructors don't have asyncness already","msgtype":"m.text"},"ts":1572892938000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we can't add it in","msgtype":"m.text"},"ts":1572892941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and relying on calling code to `await obj.init()`, or to never explicitly construct an object but instead do `await clazz.init()`","msgtype":"m.text"},"ts":1572892942000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"without causing the viral async problem","msgtype":"m.text"},"ts":1572892950000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think that is a problem?","msgtype":"m.text"},"ts":1572892955000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i guess I don't know what you mean by \"problem\"","msgtype":"m.text"},"ts":1572892961000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i mean `class X extends Y {}`","msgtype":"m.text"},"ts":1572892963000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"async functions work fine","msgtype":"m.text"},"ts":1572892964000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"you just `super()`","msgtype":"m.text"},"ts":1572892972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doesn't matter what Y is","msgtype":"m.text"},"ts":1572892977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"async functions kind of have the same problem","msgtype":"m.text"},"ts":1572893006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/","msgtype":"m.text"},"ts":1572893022000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you talking about the \"what color are your functions\" thing?","msgtype":"m.text"},"ts":1572893024000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"heh, yeah","msgtype":"m.text"},"ts":1572893025000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1572893031000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is just... not really a problem, in my experience?","msgtype":"m.text"},"ts":1572893042000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"async things are async","msgtype":"m.text"},"ts":1572893045000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and that's fine","msgtype":"m.text"},"ts":1572893049000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"ü§∑üèª‚Äç‚ôÇÔ∏è","msgtype":"m.text"},"ts":1572893050000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, if you have an async thing deep in your stack, all calling code needs to also be async","msgtype":"m.text"},"ts":1572893066000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but, like","msgtype":"m.text"},"ts":1572893068000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"it _does_ need to be async","msgtype":"m.text"},"ts":1572893072000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"fundamentally, not just as a consequence of the syntax","msgtype":"m.text"},"ts":1572893080000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah, i'm just not sure adding syntax helps","msgtype":"m.text"},"ts":1572893091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it helps because it allows inheritance to work for classes which require async code during initialization","msgtype":"m.text"},"ts":1572893111000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"currently you basically cannot do that","msgtype":"m.text"},"ts":1572893126000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"`return new Promise` works fine here","msgtype":"m.text"},"ts":1572893143000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but it is kind of hilarious","msgtype":"m.text"},"ts":1572893150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: doesn't work at all with fields though","msgtype":"m.text"},"ts":1572893164000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I guess it kind of does","msgtype":"m.text"},"ts":1572893183000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't use fields currently so i guess i haven't been hit hard by that","msgtype":"m.text"},"ts":1572893183000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"mfw fields","msgtype":"m.text"},"ts":1572893201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`return new Promise(async resolve => { this.foo = await foo(); return this; })`","msgtype":"m.text"},"ts":1572893210000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"not just fields though","msgtype":"m.text"},"ts":1572893213000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i know ive used sentinel values as guards for things when i want things only constructed my specific way (such as banning direct `new`)","msgtype":"m.text"},"ts":1572893223000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the argument to new Promise isn't async btw","msgtype":"m.text"},"ts":1572893264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but these are all just goofy ways of trying to not allow people to construct things async, and people needing to do exactly that","msgtype":"m.text"},"ts":1572893267000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: its fine if you give it one for `await` to be usable","msgtype":"m.text"},"ts":1572893284000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: it does not matter","msgtype":"m.text"},"ts":1572893293000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i just mean, you end up with an unhandled rejection","msgtype":"m.text"},"ts":1572893295000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"potentially","msgtype":"m.text"},"ts":1572893298000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah but whatever, handle your exceptions","msgtype":"m.text"},"ts":1572893314000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"devsnek: how so? the return value is the promise","msgtype":"m.text"},"ts":1572893320000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so you still get a way to handle it","msgtype":"m.text"},"ts":1572893326000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: if the async function rejects nothing handles it","msgtype":"m.text"},"ts":1572893336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, i see","msgtype":"m.text"},"ts":1572893339000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yea, `return Promise.resolve().then(async ...` then","msgtype":"m.text"},"ts":1572893354000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but this all just points to how terrible this is without helping the programmer","msgtype":"m.text"},"ts":1572893367000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1572893382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is there this restriction if you can do it anyway (poorly) when needed","msgtype":"m.text"},"ts":1572893391000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"just add the `async`","msgtype":"m.text"},"ts":1572893398000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i like the restriction because it dissuades people from making async constructors","msgtype":"m.text"},"ts":1572893668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"have you ever used the mozilla source-map lib","msgtype":"m.text"},"ts":1572893693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1572893944000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why dissuade though? what are you getting out of it?","msgtype":"m.text"},"ts":1572893985000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the class still is unusable sync","msgtype":"m.text"},"ts":1572893989000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i just don't understand how this benefits either side when a class does have async initialization","msgtype":"m.text"},"ts":1572894027000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah, curent patterns seem strictly worse","msgtype":"m.text"},"ts":1572894059000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"returning a Promise rather than an instance is bad","msgtype":"m.text"},"ts":1572894068000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"returning something which is not fully initialized is also bad","msgtype":"m.text"},"ts":1572894075000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't really think `new.await` is much better than `static async create() {}`","msgtype":"m.text"},"ts":1572894096000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's just my opinion though :)","msgtype":"m.text"},"ts":1572894109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why does it need a new keyword?","msgtype":"m.text"},"ts":1572894137000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: the main reason to want a new keyword is so that it can be used by subclasses invoking `super()`","msgtype":"m.text"},"ts":1572894180000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"(though in that case it would be `super.await()`, not `new.await`)","msgtype":"m.text"},"ts":1572894194000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"super.await is a super expression though","msgtype":"m.text"},"ts":1572894216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you have an async ctor would it ever not await super?","msgtype":"m.text"},"ts":1572894220000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"syntax aside, I don't think this makes it any better","msgtype":"m.text"},"ts":1572894233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: or whatever; ignore the particular syntax","msgtype":"m.text"},"ts":1572894233000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"it's just an awkward situation","msgtype":"m.text"},"ts":1572894239000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: how is \"the class can put all its initialization code in the constructor, so that the constructor never returns half-initialized instances\" not better?","msgtype":"m.text"},"ts":1572894263000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I feel like \"the constructor should not return instances which are not completely intialized\" is a fairly bedrock principle","msgtype":"m.text"},"ts":1572894280000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"you can make the constructor fail","msgtype":"m.text"},"ts":1572894291000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unless a certain symbol or something is passed","msgtype":"m.text"},"ts":1572894303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"use X.create not new X\"","msgtype":"m.text"},"ts":1572894323000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, yes; that seems... really a very awkward thing to be the officially blessed pattern for this common operation?","msgtype":"m.text"},"ts":1572894345000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"hmm I haven't seen it that often","msgtype":"m.text"},"ts":1572894368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of course there's also a third option","msgtype":"m.text"},"ts":1572894399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sync constructor, async methods","msgtype":"m.text"},"ts":1572894404000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: how is requiring programmers to write more boilerplate helping?","msgtype":"m.text"},"ts":1572894405000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"boilerplate has a cost of potentially being done wrong","msgtype":"m.text"},"ts":1572894426000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and these solutions do not seem simple","msgtype":"m.text"},"ts":1572894436000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: I don't think people should write them in the first place","msgtype":"m.text"},"ts":1572894438000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: think/should, people do and APIs are async","msgtype":"m.text"},"ts":1572894453000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sync constructor with async methods is actually really simple","msgtype":"m.text"},"ts":1572894455000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: how so, you have to track initialization manually?","msgtype":"m.text"},"ts":1572894476000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and then const resource = await this.#resource in methods","msgtype":"m.text"},"ts":1572894503000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm I think one of my messages didn't send","msgtype":"m.text"},"ts":1572894532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems like more boilerplate arguments","msgtype":"m.text"},"ts":1572894649000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't see how forcing people to do that helps them","msgtype":"m.text"},"ts":1572894667000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you just don't want the alternative?","msgtype":"m.text"},"ts":1572894672000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm more concerned about who consumes the api","msgtype":"m.text"},"ts":1572894718000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what about them?","msgtype":"m.text"},"ts":1572894730000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'd rather use something like `X.create()`","msgtype":"m.text"},"ts":1572894741000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i think the web does that too","msgtype":"m.text"},"ts":1572894747000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why","msgtype":"m.text"},"ts":1572894767000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like `navigator.getUserMedia()` instead of `new navigator.VideoFeed()`","msgtype":"m.text"},"ts":1572894771000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok... but why","msgtype":"m.text"},"ts":1572894777000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1572894780000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what invariant are you trying to prevent people from breaking","msgtype":"m.text"},"ts":1572894789000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what bugs are caused by using `new`","msgtype":"m.text"},"ts":1572894800000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't understand","msgtype":"m.text"},"ts":1572894808000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i just don't think its the appropriate operation","msgtype":"m.text"},"ts":1572894821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1572894828000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what is appropriate?","msgtype":"m.text"},"ts":1572894834000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cause new Promise certainly uses new","msgtype":"m.text"},"ts":1572894845000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"as do subclasses of it","msgtype":"m.text"},"ts":1572894849000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and you get a promise out of it","msgtype":"m.text"},"ts":1572894860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a promise to *something*","msgtype":"m.text"},"ts":1572894873000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1572894879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so how is that different?","msgtype":"m.text"},"ts":1572894885000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you could do `async constructor`","msgtype":"m.text"},"ts":1572894886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you don't think `new` is the appropriate operation for... getting a new instance of a class?","msgtype":"m.text"},"ts":1572894892000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and get the same pattern","msgtype":"m.text"},"ts":1572894894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems like probably not the claim you meant","msgtype":"m.text"},"ts":1572894897000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i just dislike such a pattern","msgtype":"m.text"},"ts":1572894900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I don't know what claim you meant, if not that","msgtype":"m.text"},"ts":1572894902000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"on a subjective level","msgtype":"m.text"},"ts":1572894904000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just don't see what is dislikable","msgtype":"m.text"},"ts":1572894921000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you call a constructor, which totally doesn't guarantee you get an instance anyway","msgtype":"m.text"},"ts":1572894937000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm saying this the same way i would say my favourite colour is purple","msgtype":"m.text"},"ts":1572895102000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its just what i prefer","msgtype":"m.text"},"ts":1572895110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and no once can like blue?","msgtype":"m.text"},"ts":1572895111000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no one*","msgtype":"m.text"},"ts":1572895115000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no go ahead and like blue","msgtype":"m.text"},"ts":1572895122000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you dislike blue","msgtype":"m.text"},"ts":1572895129000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and so they shouldn't be using blue","msgtype":"m.text"},"ts":1572895135000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm not objecting to you liking blue","msgtype":"m.text"},"ts":1572895137000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you are objecting to me using blue because you want purple","msgtype":"m.text"},"ts":1572895146000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i was just saying my opinion","msgtype":"m.text"},"ts":1572895150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and your opinion differs from wanting to prevent people from using blue?","msgtype":"m.text"},"ts":1572895176000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i was saying the web pattern seems okay to me","msgtype":"m.text"},"ts":1572895240000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i wasn't sure there was a huge motivation to need something else","msgtype":"m.text"},"ts":1572895254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it was more than saying that one pattern seems ok","msgtype":"m.text"},"ts":1572895275000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it was stating that another was not ok","msgtype":"m.text"},"ts":1572895284000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or at least dislikable","msgtype":"m.text"},"ts":1572895297000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"even if one pattern is ok, that shouldn't preclude other patterns from being usable","msgtype":"m.text"},"ts":1572895337000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i was just saying i was surprised people want more of that pattern","msgtype":"m.text"},"ts":1572895338000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like that esdiscuss topic about giving js significant whitespace instead of braces","msgtype":"m.text"},"ts":1572895461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"subjectively not a fan, and if enough people are subjectively not fans of it, it won't happen","msgtype":"m.text"},"ts":1572895518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not really true, i am not a fan of a variety of things that does not mean i attempt to block them","msgtype":"m.text"},"ts":1572896043000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm not trying to block anything lol","msgtype":"m.text"},"ts":1572896087000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm stating that all but 1 could not be fans of something but if that 1 champion pushes it even with that it would still go through unless someone does block it","msgtype":"m.text"},"ts":1572896128000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm just trying to suggest alternatives that don't require modifying the language, which is usually where stuff starts out","msgtype":"m.text"},"ts":1572896149000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not liking some proposal doesn't prevent things from landing","msgtype":"m.text"},"ts":1572896150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we have the alternatives already though and they are troublesome, the reasons by which we are being told to pursue those troubles is unclear","msgtype":"m.text"},"ts":1572896189000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"modifying the language is what tc39 is discussing all the time","msgtype":"m.text"},"ts":1572896205000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: I still don't understand what exactly it is that you dislike","msgtype":"m.text"},"ts":1572897686000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i just don't get the pattern","msgtype":"m.text"},"ts":1572897715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like in node we create a handle synchronously and emit an error event","msgtype":"m.text"},"ts":1572897730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the web has functions that return promises","msgtype":"m.text"},"ts":1572897737000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't get having async initialization code?","msgtype":"m.text"},"ts":1572897750000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"or... some other pattern?","msgtype":"m.text"},"ts":1572897756000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't understand why async constructors are better than doing those things","msgtype":"m.text"},"ts":1572897762000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i get that performing work asynchronously is needed obviously","msgtype":"m.text"},"ts":1572897816000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't know what the first things refers to; you generally can't do things synchronously","msgtype":"m.text"},"ts":1572897819000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"the functions-returning-promises thing isn't really used with classes, afaict","msgtype":"m.text"},"ts":1572897824000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"it works fine if you are just not using classes at all, of course","msgtype":"m.text"},"ts":1572897872000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't write that many libraries, but node and the web do this thing where they have some X class with a constructor that always throws, then a `createX` function that creates an instance","msgtype":"m.text"},"ts":1572897886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but to make it work with a class, you have to do awkward things like forbidding `new`, which is boilerplate you really do not want to require everyone to add, and also a.) does not work with inheritance and b.) requires splitting your initialization code across the constructor and some other async function","msgtype":"m.text"},"ts":1572897924000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"is your position that everyone who wants to use classes and has async code should just have that boilerplate to forbid `new`, not use inheritance, and split their intialization code across the constructor and some other async function?","msgtype":"m.text"},"ts":1572897966000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"the constructor doesn't generally do anything","msgtype":"m.text"},"ts":1572897985000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but what i mean is people don't usually want to subclass them anyway","msgtype":"m.text"},"ts":1572898000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because dealing with that in an async way sucks","msgtype":"m.text"},"ts":1572898006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... right, the proposal would be to make it not suck","msgtype":"m.text"},"ts":1572898017000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i think it would still suck","msgtype":"m.text"},"ts":1572898025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just in a different way","msgtype":"m.text"},"ts":1572898027000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though I think people mainly do not subclass because node classes and web classes aren't really intended to be subclassed, with some rare exceptions","msgtype":"m.text"},"ts":1572898050000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"in what way would it still suck?","msgtype":"m.text"},"ts":1572898087000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"like if i wanted to create my own class that provided the functionality","msgtype":"m.text"},"ts":1572898100000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just that you have to make any class which extends an async class also async?","msgtype":"m.text"},"ts":1572898100000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"that does not seem so bad.","msgtype":"m.text"},"ts":1572898103000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i'd probably wrap it so that it was a sync constructor with async methods","msgtype":"m.text"},"ts":1572898109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since that's a nicer api to use","msgtype":"m.text"},"ts":1572898115000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i wouldn't subclass it","msgtype":"m.text"},"ts":1572898120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think that's actually a nicer API, if the methods are sync once initialization has completed?","msgtype":"m.text"},"ts":1572898140000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"like, let's say my class is a wrapper for values returned by some API","msgtype":"m.text"},"ts":1572898149000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"they aren't","msgtype":"m.text"},"ts":1572898150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... why not","msgtype":"m.text"},"ts":1572898155000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"wait, what do you mean by \"why not\"","msgtype":"m.text"},"ts":1572898165000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1572898169000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"what do you mean by \"they aren't\"","msgtype":"m.text"},"ts":1572898173000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"`async doThing() { const x = await this.#x; }`","msgtype":"m.text"},"ts":1572898185000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't become sync once `this.#x` fulfills","msgtype":"m.text"},"ts":1572898194000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, of course you can write that","msgtype":"m.text"},"ts":1572898197000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"my point is, you can also have a situation where there is one async operation in the lifetime of the class, which occurs during initialization","msgtype":"m.text"},"ts":1572898217000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and every method invocation after that point can be synchronous","msgtype":"m.text"},"ts":1572898224000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"making them have to be async at that point seems like a strictly worse API to use","msgtype":"m.text"},"ts":1572898242000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"just having worked with both patterns","msgtype":"m.text"},"ts":1572898268000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i prefer the async method one","msgtype":"m.text"},"ts":1572898276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"source-map uses the async constructor pattern if you want to try it out","msgtype":"m.text"},"ts":1572898287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think you are literally the only person I have ever heard express that preference","msgtype":"m.text"},"ts":1572898294000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"every one else I have ever talked to prefers things to be sync when they can be sync","msgtype":"m.text"},"ts":1572898314000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"\"when they can be sync\" is pretty abstract","msgtype":"m.text"},"ts":1572898336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if they aren't exposed synchronously you'd never know","msgtype":"m.text"},"ts":1572898348000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"of course sometimes you do not know when an API is more awkward than it needs to be because you do not know about the library interals","msgtype":"m.text"},"ts":1572898372000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but it still seems like, as the library author, given the choice of making your API less awkward, you should do so","msgtype":"m.text"},"ts":1572898390000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"sync methods are generally less awkward than async methods","msgtype":"m.text"},"ts":1572898398000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i rewrote the source-map library to not use async constructors","msgtype":"m.text"},"ts":1572898403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which in my mind was making the api less awkward","msgtype":"m.text"},"ts":1572898413000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess to you that makes it more awkward","msgtype":"m.text"},"ts":1572898419000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I agree that the current patterns for async constructors themselves are not great, but again, the point of this would be to make those better","msgtype":"m.text"},"ts":1572898445000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"after that point - once the class has been constructed - you agree that sync methods are easier to use, yes?","msgtype":"m.text"},"ts":1572898462000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1572898472000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1572898473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe","msgtype":"m.text"},"ts":1572898476000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't mind writing `.then` and `await`","msgtype":"m.text"},"ts":1572898480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, but it easier all around if you don't have to","msgtype":"m.text"},"ts":1572898493000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i'm just saying, as a consumer, there isn't a huge difference between `await new x` and `new.await x`","msgtype":"m.text"},"ts":1572898498000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i understand not using new Promise in your constructor is nice","msgtype":"m.text"},"ts":1572898507000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there is a huge difference when inheritance is involved","msgtype":"m.text"},"ts":1572898519000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"sometimes the way a class is consumed is by subclassing it","msgtype":"m.text"},"ts":1572898550000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"actually, do you have examples of things where this would help with inheritence?","msgtype":"m.text"},"ts":1572898550000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm curious","msgtype":"m.text"},"ts":1572898553000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"specifically, the case is that your superclass needs to do some async initialization, and your constructor code needs to wait for the superclass instance to be fully initialized before it can do its thing","msgtype":"m.text"},"ts":1572898600000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah i get the idea","msgtype":"m.text"},"ts":1572898610000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i've just never really encountered this problem","msgtype":"m.text"},"ts":1572898617000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like normally things acquired asynchronously represent data, not functionality, so people don't tend to subclass them, they tend to wrap them","msgtype":"m.text"},"ts":1572898629000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least in my experience","msgtype":"m.text"},"ts":1572898635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"classes marry data and functionality; that's kind of the point","msgtype":"m.text"},"ts":1572898668000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"or the subclass is separate from the async part","msgtype":"m.text"},"ts":1572898668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like in discord.js, the thing that creates a message instance is not `new Message`","msgtype":"m.text"},"ts":1572898686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its receiving a message over a channel of data, so subclassing the message instance doesn't break anything","msgtype":"m.text"},"ts":1572898702000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it still gets created synchronously","msgtype":"m.text"},"ts":1572898708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"subclassing the message class*","msgtype":"m.text"},"ts":1572898737000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot: i'm saying, classes aren't usually responsible for acquiring the data","msgtype":"m.text"},"ts":1572898837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"classes are often responsible for transforming the data into a suitable internal representation, though, and that is sometimes not a sync operation","msgtype":"m.text"},"ts":1572898867000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"coming up with a way to do inheritance for an abstraction where initialization is async takes a bit of finesse and creativity perhaps, but I think an \"async constructor\" cure would be worse than the disease - it will tend to muddy the waters between memory allocation/initialization and event-loop programming.","msgtype":"m.text"},"ts":1572898878000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"zenparsing: yeah, I don't know that `async constructor` is necessarily the right solution; haven't thought about it much. mostly just gesturing at the existence of the problem.","msgtype":"m.text"},"ts":1572898940000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"though, say more about \"muddy the waters between memory allocation/initialization and event-loop programming\"?","msgtype":"m.text"},"ts":1572898948000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"specifically, it is not obvious how async constructors do that any more than any other class would; possibly I do not know what you are referring to","msgtype":"m.text"},"ts":1572899017000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"node file handles as an example, could use this in theory","msgtype":"m.text"},"ts":1572899036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I'm not sure there would be a point","msgtype":"m.text"},"ts":1572899042000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"consumers wrap them, they wouldn't want to subclass them","msgtype":"m.text"},"ts":1572899051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've just never had a time I wanted to do this, so I'm curious about specific examples","msgtype":"m.text"},"ts":1572899085000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"source-map should arguably return a promise to the complete library with sync constructors with sync methods on them","msgtype":"m.text"},"ts":1572899157000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its only async because of loading wasm","msgtype":"m.text"},"ts":1572899196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: riffing off that, one could imagine a class which, internally, dynamically generates and loads some wasm, and exposes a sync interface to the underlying wasm","msgtype":"m.text"},"ts":1572899284000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"consumers would not need to know wasm was involved at all","msgtype":"m.text"},"ts":1572899307000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and subclasses could build new methods on top of the existing ones, or overload them to provide more checks than the base class does, or whatever","msgtype":"m.text"},"ts":1572899345000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i mean thats kind of what it does now","msgtype":"m.text"},"ts":1572899348000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it returns a promise from the constructor","msgtype":"m.text"},"ts":1572899357000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's also the only lib I know of that does that","msgtype":"m.text"},"ts":1572899423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess you can subclass it by doing `return super().then(...)`","msgtype":"m.text"},"ts":1572899744000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1572900197000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"not really natural though","msgtype":"m.text"},"ts":1572900239000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"bakkot: but you're suggesting kind of the same pattern, just with await, right?","msgtype":"m.text"},"ts":1572900536000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like a sync function using .then vs an async function using await","msgtype":"m.text"},"ts":1572900556000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1572900639000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"with roughly the same advantages and disadvantages","msgtype":"m.text"},"ts":1572900645000,"senderName":"bakkot","senderId":"bakkot@irc"}
]