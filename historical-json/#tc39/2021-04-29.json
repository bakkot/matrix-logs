[
{"content":{"body":"Decorators being at stage 2, I’m wondering whether its `@(expression)` syntax is set in stone: would using `@{expression}` instead be a possibility? The reason why I ask is because Hack-style pipes could use `@` as their placeholder token…if it weren’t for decorators’ `@(expression)` syntax conflicting with function calls.","msgtype":"m.text"},"ts":1619735177000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"…I also just realized that its syntax restriction to identifiers and property chains of identifiers is pretty similar to the original smart-mix pipe proposal’s syntax restriction. I am amused, heh.","msgtype":"m.text"},"ts":1619735311000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: imo the conflict would be conceptual, whether or not there's a grammar conflict","msgtype":"m.text"},"ts":1619735371000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: That’s certainly possible. I wonder if that might be a strong-enough reason not to bother adding support for trying `@` as a placeholder in the Hack-pipes Babel plugin, in addition to `#` and maybe `%` and maybe `?`. Hm.","msgtype":"m.text"},"ts":1619735742000,"senderName":"jschoi","senderId":"jschoi@irc"}
]