[
{"content":{"body":"https://es.discourse.group/t/triple-backtick-template-literal/337/2","msgtype":"m.text"},"ts":1590041678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"indentation in template literals is sometimes ugly\" does not seem like it warrants adding a fourth kind of string literal, on its own","msgtype":"m.text"},"ts":1590046236000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I wonder if proper const references could be implemented performantly","msgtype":"m.text"},"ts":1590069586000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"references/variables whatever","msgtype":"m.text"},"ts":1590069617000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what do you mean","msgtype":"m.text"},"ts":1590070721000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: like `superconst x = {}; x.a = 1` throws an error","msgtype":"m.text"},"ts":1590071694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in my mind specifying this behaviour would be pretty easy but i'm not sure about the performance for actual impls","msgtype":"m.text"},"ts":1590071775000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so any reference with a base of `x` would error if you tried to use a mutation operator (since getters can mutate :shrg)","msgtype":"m.text"},"ts":1590071779000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah you basically just mark the references","msgtype":"m.text"},"ts":1590071799000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and marked references create new marked references","msgtype":"m.text"},"ts":1590071807000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wouldn't it be able to find that during codegen?","msgtype":"m.text"},"ts":1590071821000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so even if you did `const y = x; y.a = 1` it would throw","msgtype":"m.text"},"ts":1590071823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, well... thats mmmm","msgtype":"m.text"},"ts":1590071837000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah that part i think makes codegen slightly hard","msgtype":"m.text"},"ts":1590071853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although i wonder","msgtype":"m.text"},"ts":1590071860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`const y = (() => x)()`","msgtype":"m.text"},"ts":1590071879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that would clear the marker","msgtype":"m.text"},"ts":1590071882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that would add a branch to each op on any potentially non-local ref which seems... no bueno","msgtype":"m.text"},"ts":1590071898000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cause you also get into strange things like `let x = {}; superconst y = x; x = y; x.z = 1//?`","msgtype":"m.text"},"ts":1590071981000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"maybe just allowing that to not throw is reasonable","msgtype":"m.text"},"ts":1590072032000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not like this is a security feature","msgtype":"m.text"},"ts":1590072068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://npmjs.com/dedent exists, why does it need syntax?","msgtype":"m.text"},"ts":1590078064000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i think its useful enough to be built in, and you can't tag an already tagged template","msgtype":"m.text"},"ts":1590078471000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stares at https://twitter.com/garybernhardt/status/1260668609837187073","msgtype":"m.text"},"ts":1590078712000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lul","msgtype":"m.text"},"ts":1590078874000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'd be fine with shipping a builtin dedent API","msgtype":"m.text"},"ts":1590078934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can make it compose with other template tags: dedent(fn) could return a tag which does dedenting and then invokes fn","msgtype":"m.text"},"ts":1590078961000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though it's a little non-obvious what the right behavior is there, since interpolated strings might themselves contain linebreaks and indentation","msgtype":"m.text"},"ts":1590078986000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably you just assume they don't, though","msgtype":"m.text"},"ts":1590079001000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Gary’s using it wrong tho :-)","msgtype":"m.text"},"ts":1590079076000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it’s not meant to be called as a function","msgtype":"m.text"},"ts":1590079083000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it is","msgtype":"m.text"},"ts":1590079132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the example on the npm page","msgtype":"m.text"},"ts":1590079152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah that's explicitly one of the things it supports","msgtype":"m.text"},"ts":1590079164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in any case","msgtype":"m.text"},"ts":1590079183000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think almost every template literal i've ever written that spans multiple lines","msgtype":"m.text"},"ts":1590079200000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"has this indentation problem","msgtype":"m.text"},"ts":1590079205000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can only imagine people liking this feature","msgtype":"m.text"},"ts":1590079272000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah that’s fair","msgtype":"m.text"},"ts":1590079279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I’d like it too, but it doesn’t seem worth the cost","msgtype":"m.text"},"ts":1590079287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what cost","msgtype":"m.text"},"ts":1590079316000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems worth it as an API","msgtype":"m.text"},"ts":1590079321000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not as syntax","msgtype":"m.text"},"ts":1590079322000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"syntax is expensive","msgtype":"m.text"},"ts":1590079327000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this seems pretty simple in terms of both implementation and human understanding","msgtype":"m.text"},"ts":1590079354000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is still something you are making everyone who learns the language learn","msgtype":"m.text"},"ts":1590079373000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is expensive","msgtype":"m.text"},"ts":1590079377000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it seems more than worth it from my perspective","msgtype":"m.text"},"ts":1590079436000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"/shrug","msgtype":"m.text"},"ts":1590079445000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you are welcome to present to the committee","msgtype":"m.text"},"ts":1590079454000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I would wager extremely good odds that most people will agree it is not worth it as syntax","msgtype":"m.text"},"ts":1590079502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have a rule of thumb about syntax, which is that it should either be taking something which is common and awkward to do without syntax and making it easy, or taking something which is effectively impossible and making it possible","msgtype":"m.text"},"ts":1590080122000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"dedenting can be done as without syntax very easily, though it's embarrassing that none of the popular published libraries do it right (assuming this thread is to be trusted)","msgtype":"m.text"},"ts":1590080162000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is it that it's broken in general, or only for String.raw output","msgtype":"m.text"},"ts":1590081704000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"broken in general","msgtype":"m.text"},"ts":1590082000000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"dedent('a\\\\nb'), which contains no linebreaks, returns `a\\nb`, which does","msgtype":"m.text"},"ts":1590082016000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(String.raw output is just normal strings you could write yourself, though, so the question doesn't really make sense)","msgtype":"m.text"},"ts":1590082187000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think using String.raw was just to illustrate that escapes weren't being passed in","msgtype":"m.text"},"ts":1590082231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1590082443000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I actually love this, and I highlight why this needs to be syntax in my reply on es.discourse.group","msgtype":"m.text"},"ts":1590096372000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Having this as an API prevents you from using it as a tag","msgtype":"m.text"},"ts":1590096433000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Eg","msgtype":"m.text"},"ts":1590096453000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: you could make \"String.dd(tag)` contents `\" do the right thing though","msgtype":"m.text"},"ts":1590096533000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e. String.dd(fn) would return a function which wrapped `fn` and passed it the same things it would have been passed if it had been used as a tag directly, except dedented","msgtype":"m.text"},"ts":1590096597000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/eZtDzhud/dedenting.js","msgtype":"m.text"},"ts":1590096613000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think making it a higher-order function is a lot more cost than adding syntax","msgtype":"m.text"},"ts":1590096745000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"... what, why","msgtype":"m.text"},"ts":1590096757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think the higher order function is weirder","msgtype":"m.text"},"ts":1590096789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Because I hate higher-order functions…","msgtype":"m.text"},"ts":1590096792000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'm not gonna comment on cost","msgtype":"m.text"},"ts":1590096795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i will say","msgtype":"m.text"},"ts":1590096804000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its less apparent what is happening","msgtype":"m.text"},"ts":1590096812000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell you hate... map?","msgtype":"m.text"},"ts":1590096813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Functions that return more funcitons is way more complex than individual functions","msgtype":"m.text"},"ts":1590096817000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"map says what it is doing with the function","msgtype":"m.text"},"ts":1590096829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek strong disagree, nothing about \"```\" suggests what's going on","msgtype":"m.text"},"ts":1590096830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe if you call it dedentMap","msgtype":"m.text"},"ts":1590096837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Limiting higher-order to just fucntion-returning functions","msgtype":"m.text"},"ts":1590096839000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"mapDedent(f)","msgtype":"m.text"},"ts":1590096842000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whatever fp people call these functions","msgtype":"m.text"},"ts":1590096852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell you hate Function.prototype.bind?","msgtype":"m.text"},"ts":1590096853000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1590096860000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1590096864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think this preference ought to guide the design of JS","msgtype":"m.text"},"ts":1590096874000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Besides `bind`, I can't think of any other higher-order in the language","msgtype":"m.text"},"ts":1590096908000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"also, though, I don't think people actually need to think about what's going on","msgtype":"m.text"},"ts":1590096909000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even if you don't know that triple backtick performs deindentation","msgtype":"m.text"},"ts":1590096941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'd be like \"how do I use dedent with my tag?\" and stackoverflow would say \"write String.dedent(tag)` foo `\"instead of \"tag` foo `\" and you would go about your life","msgtype":"m.text"},"ts":1590096947000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"under the hood, yes, what's happening is that there is a function which returns a function","msgtype":"m.text"},"ts":1590096962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but that is not something people actually need to think about","msgtype":"m.text"},"ts":1590096968000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if we're considering stackoverflow a valid solution to unclear apis","msgtype":"m.text"},"ts":1590097001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have many things i wish to propose","msgtype":"m.text"},"ts":1590097006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not unclear","msgtype":"m.text"},"ts":1590097012000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's just not something you were aware of","msgtype":"m.text"},"ts":1590097017000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we are considering \"I don't know about this feature\" to be something solved by stackoverflow, yes","msgtype":"m.text"},"ts":1590097032000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can guess what `x.map((a) => a + 1)` does","msgtype":"m.text"},"ts":1590097034000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can guess what String.dedent`` does too","msgtype":"m.text"},"ts":1590097051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also String.dedent(tag)``","msgtype":"m.text"},"ts":1590097057000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`dedent(html)` looks like gibberish to me","msgtype":"m.text"},"ts":1590097060000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it buffs out dents","msgtype":"m.text"},"ts":1590097062000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek I maintain String.dedent(tag)`` is strictly easier to understand at a glance than tag``` ``` is","msgtype":"m.text"},"ts":1590097092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah i think completely the opposite","msgtype":"m.text"},"ts":1590097140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Same","msgtype":"m.text"},"ts":1590097147000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"nothing about ``` suggests dedenting is going on","msgtype":"m.text"},"ts":1590097150000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i care more about the tag than the dedent","msgtype":"m.text"},"ts":1590097163000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just the opposite, to me, since ``` in _every other language_ means \"exactly what's in here, raw, with no changes\"","msgtype":"m.text"},"ts":1590097165000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i only know of python","msgtype":"m.text"},"ts":1590097192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which has dedent","msgtype":"m.text"},"ts":1590097196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but also doesn't have tagged templates","msgtype":"m.text"},"ts":1590097202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"python has it as an API, yes","msgtype":"m.text"},"ts":1590097219000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that being the sensible place to put it","msgtype":"m.text"},"ts":1590097224000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"instead of adding a new type of string literal to the language","msgtype":"m.text"},"ts":1590097230000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if we didn't have tags i might agree with you","msgtype":"m.text"},"ts":1590097234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe we need a standard way to compose tags","msgtype":"m.text"},"ts":1590097258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tag composition doesn't usually make sense","msgtype":"m.text"},"ts":1590097303000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it happens to for dedent, because dedent doesn't need to do interpolation","msgtype":"m.text"},"ts":1590097313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but most tags do","msgtype":"m.text"},"ts":1590097315000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what if its called dedentWithTag","msgtype":"m.text"},"ts":1590097346000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"was there prior art for tagged templates? it's still such an interesting concept to me","msgtype":"m.text"},"ts":1590097347000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: \"quasiliterals\" in some language, iirc","msgtype":"m.text"},"ts":1590097372000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol of course its elang","msgtype":"m.text"},"ts":1590097390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mark miller is everywhere","msgtype":"m.text"},"ts":1590097401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I am fine with dedentWithTag + also dedent, and no overloads","msgtype":"m.text"},"ts":1590097423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though I don't really see what's wrong with the overload","msgtype":"m.text"},"ts":1590097430000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I thought you mistyped erlang for a sec","msgtype":"m.text"},"ts":1590097436000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"erights.org","msgtype":"m.text"},"ts":1590097448000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that language have users? seems weird to use personal research as prior art","msgtype":"m.text"},"ts":1590097475000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: i mean, that's where Promise comes from.","msgtype":"m.text"},"ts":1590097493000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"o_o","msgtype":"m.text"},"ts":1590097505000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"afaik E invented the concept, and other langs' Futures/Promises/etc come from that?","msgtype":"m.text"},"ts":1590097522000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"every interesting feature in modern programming languages came from E or smalltalk","msgtype":"m.text"},"ts":1590097524000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"don't @ me","msgtype":"m.text"},"ts":1590097534000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one of those probably used @ for the first time","msgtype":"m.text"},"ts":1590097545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wowsers, I've never heard of this","msgtype":"m.text"},"ts":1590097558000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I mean the CS concept of a Future is 20 years older than that according to Wikipedia","msgtype":"m.text"},"ts":1590097653000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er rather apparently \"promise\" dates to 1976, and \"future\" to 1977","msgtype":"m.text"},"ts":1590097678000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1590097684000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol mark and dean are in the wikipedia page on futures and promises","msgtype":"m.text"},"ts":1590097763000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: promise.then(future)","msgtype":"m.text"},"ts":1590097860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1590097876000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"apparently they invented the promise pattern that js promises are based on","msgtype":"m.text"},"ts":1590097915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's pretty amazing, to be on the first-ish implementation end of something that propagated to every language","msgtype":"m.text"},"ts":1590098017000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"quite the personal research :-p","msgtype":"m.text"},"ts":1590098073000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think i came up with a novel way of storing some data structure at some point","msgtype":"m.text"},"ts":1590098122000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think it was tree related","msgtype":"m.text"},"ts":1590098133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh it was unicode character name mapping","msgtype":"m.text"},"ts":1590098162000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i hope i still have that code","msgtype":"m.text"},"ts":1590098167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, \"personal\" aside, it does seem to be a matter of research? if I'm following correctly","msgtype":"m.text"},"ts":1590098169000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I guess it sounds like the more literal meaning would've been by Liskov in the 80s: https://en.wikipedia.org/wiki/Argus_(programming_language)","msgtype":"m.text"},"ts":1590098212000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oops nope","msgtype":"m.text"},"ts":1590098270000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"It seems that promises and call-streams were never implemented in any public release of Argus,[16] the programming language used in the Liskov and Shrira paper.\"","msgtype":"m.text"},"ts":1590098274000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and then the Xanadu implementation is claimed to be \"independent\"","msgtype":"m.text"},"ts":1590098328000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"of that","msgtype":"m.text"},"ts":1590098331000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so it's definitely research if you're inventing new (mini-)paradigms","msgtype":"m.text"},"ts":1590098379000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]