[
{"content":{"body":"I frequently have issues with ES module imports, especially when it relates to extending classes. While top level await would be useful, it also comes at the cost of losing the performance benefit gained by statically declaring the imports, and may cause problems when accessing the modules.","msgtype":"m.text"},"ts":1570348503000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"not able to reasonly know which one can be executed first. I have created a gist to highlight the problem at https://gist.github.com/puppy0cam/fd1606a3b712a50a5195aab8ba1447e9","msgtype":"m.text"},"ts":1570348504000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"Currently you can work around the problem by having an internal module that exports the contents of all your other modules in the correct order. This is not an ideal situation, as it can cause tree shaking and other static analysis tools from working effectively. It can lead to warnings in an IDE due to ESLint's sort-imports rule (see","msgtype":"m.text"},"ts":1570348510000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"https://eslint.org/docs/rules/sort-imports) requiring imports to be sorted alphabetically.","msgtype":"m.text"},"ts":1570348511000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"Instead of forcing the JavaScript engine to guess which module should be executed first, there should be syntax that allows you to tell the engine that it is safe to execute an import after the current module is done executing.","msgtype":"m.text"},"ts":1570348518000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"Just as you can defer a script's execution in the browser, a script should be able to defer an imported module to after it has already loaded.","msgtype":"m.text"},"ts":1570348525000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"sorry for the random wall of text lol","msgtype":"m.text"},"ts":1570348552000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"puppy0cam: the issue there imo is that you have circular dependencies","msgtype":"m.text"},"ts":1570380919000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a superclass isn't supposed to know anything about its subclasses","msgtype":"m.text"},"ts":1570380934000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"js engines don't guess what the order to execute is","msgtype":"m.text"},"ts":1570381416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its well defined","msgtype":"m.text"},"ts":1570381418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: so, as the follow-up to https://github.com/tc39/ecma262/pull/1302 and parallel change to https://github.com/tc39/ecma402/issues/54, I'm gonna do the `\"foo\"` -> *\"foo\"* change, but I'm debating the best approach. I started to go through the 1400+ cases one-by-one, but I'm now thinking it may be easier to change all of 'em at once and then examine the diff for things that feel wrong","msgtype":"m.text"},"ts":1570392437000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I remember you'd mentioned that there are lots of algorithmic cases where ~foo~ could be used instead of a string value, but I think that could probably be an even further follow-up","msgtype":"m.text"},"ts":1570392499000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(or at least a subsequent commit)","msgtype":"m.text"},"ts":1570392504000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(That latter was the last para of https://github.com/tc39/ecma262/pull/1592#issuecomment-503663404 )","msgtype":"m.text"},"ts":1570392655000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right! there it is","msgtype":"m.text"},"ts":1570392692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also yeah, ljharb requested a section be added to notation conventions about this","msgtype":"m.text"},"ts":1570392714000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I was thinking it'd be good to do the change-to-tilde first because that would avoid changing some things twice.","msgtype":"m.text"},"ts":1570392776000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that is true","msgtype":"m.text"},"ts":1570392806000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"as long as 402 is free to move in parallel, I don't object to that","msgtype":"m.text"},"ts":1570392833000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"402?","msgtype":"m.text"},"ts":1570392876000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"see my second link above -- the Intl spec also was confused about what the convention should be and figured it'd be easiest to follow establishment of a clear convention in 262","msgtype":"m.text"},"ts":1570392933000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh *ecma*402","msgtype":"m.text"},"ts":1570392972000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"er yeah sorry ðŸ˜… not a PR number","msgtype":"m.text"},"ts":1570392986000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think with PR 1302 landed we basically know what we want, it's just that the enactment is pending","msgtype":"m.text"},"ts":1570393003000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I'm wondering how much `\"foo\"` will be left.)","msgtype":"m.text"},"ts":1570393191000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"not much, I imagine... it actually makes me wonder where the existing convention came from","msgtype":"m.text"},"ts":1570393282000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you mean the pre-1592+1302 convention?","msgtype":"m.text"},"ts":1570393327000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"was there originally no specific stylistic distinction for values?","msgtype":"m.text"},"ts":1570393331000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1570393332000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmm even the ES5 spec has `this` in bold serif font though","msgtype":"m.text"},"ts":1570393427000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"IIRC, the first 'github' version was marked up to achieve the same styling as the Word-based version.","msgtype":"m.text"},"ts":1570393503000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1570393521000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...that we did that, not the convention itself :p","msgtype":"m.text"},"ts":1570393607000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"So the Word-based version used bold sans-serif for some values, and bold monospace for other (string) values","msgtype":"m.text"},"ts":1570394102000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"rkirsling: i'd say do the tilde conversions first, in parallel with the notational conventions prose","msgtype":"m.text"},"ts":1570394146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1570394203000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"can you clarify the scope of that prose?","msgtype":"m.text"},"ts":1570394219000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(re \"this\" ES5 has it in bold serif *and* in bold sans.)","msgtype":"m.text"},"ts":1570394222000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"are we just describing \"notation for ES values versus arbitrary ES code\"? or do we want to pluck that whole table from the ecmarkup docs?","msgtype":"m.text"},"ts":1570394265000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: interesting...I only caught the serif one.","msgtype":"m.text"},"ts":1570394288000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I imagine it was even trickier to catch such things at that time)","msgtype":"m.text"},"ts":1570394303000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(it might be serif in algs, sans in non-alg text)","msgtype":"m.text"},"ts":1570394313000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"rkirsling: something that, if someone asked \"how do i format this\", would help direct them","msgtype":"m.text"},"ts":1570394355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(because algs are default serif, non-algs are default sans)","msgtype":"m.text"},"ts":1570394361000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(in ES5)","msgtype":"m.text"},"ts":1570394487000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this `hint String` notation passed to ToPrimitive is...interesting","msgtype":"m.text"},"ts":1570402833000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's like an atom","msgtype":"m.text"},"ts":1570403300000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb In my usecase, the superclass is meant to serve as a fallback in the event that there is no subclass equivalent available due to new subclasses being implemented by the server but not the library. It is also meant to make sure that they are properly distinguished and instanceof can be used to determine if it is an allowed type without","msgtype":"m.text"},"ts":1570404430000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"checking the instanceof from the subclass.","msgtype":"m.text"},"ts":1570404431000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"puppy0cam: it seems like if the server and client don't have the same support, it should be an error","msgtype":"m.text"},"ts":1570404488000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in abstract operations that describe the types of their parameters, I don't know what to call ~foo~","msgtype":"m.text"},"ts":1570404739000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ecmarkup documentation say \"specification types and their instances\"","msgtype":"m.text"},"ts":1570404768000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's basically an enum value but the enum is anonymous","msgtype":"m.text"},"ts":1570404794000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"puppy0cam: but either way i'd think you want a separate function to handle that, and not the superclass.","msgtype":"m.text"},"ts":1570404838000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: like an atom","msgtype":"m.text"},"ts":1570404923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah but I don't think we use that word","msgtype":"m.text"},"ts":1570404940000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess I could do a custom [Symbol.hasInstance] method, but I do find that custom ones are far slower than the inbuilt one.","msgtype":"m.text"},"ts":1570404943000,"senderName":"puppy0cam","senderId":"puppy0cam@irc"},
{"content":{"body":"puppy0cam: alternatively not rely on `instanceof` in the first place :-)","msgtype":"m.text"},"ts":1570405031000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: aren't there other places that use strings?","msgtype":"m.text"},"ts":1570405058000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like toPrimitive","msgtype":"m.text"},"ts":1570405062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm turning them into ~foo~s by request","msgtype":"m.text"},"ts":1570405084000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1570405088000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol I would've gone the other way","msgtype":"m.text"},"ts":1570405094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean anytime we expose something previously-unexposed they'd need to become strings","msgtype":"m.text"},"ts":1570405134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but otherwise it distinguishes the spec-use-only values well, I suppose","msgtype":"m.text"},"ts":1570405158000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: FunctionInitialize has \"_kind_ which is one of (Normal, Method, Arrow)\"","msgtype":"m.text"},"ts":1570405335000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"CreateDynamicFunction has ```_kind_ is either `\"normal\"`, `\"generator\"`, `\"async\"`, or `\"async generator\"` ```","msgtype":"m.text"},"ts":1570405364000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ahh nice","msgtype":"m.text"},"ts":1570405375000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1570405377000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ForIn/OfHeadEvaluation: The value of _iterationKind_ is either ~enumerate~, ~iterate~, or ~async-iterate~.","msgtype":"m.text"},"ts":1570405422000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ForIn/OfBodyEvaluation: similar syntax","msgtype":"m.text"},"ts":1570405446000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hm, spec bug: sometimes Normal, Method, Arrow have tildes, sometimes they don't","msgtype":"m.text"},"ts":1570405552000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"why don't we just use strings like CreateDynamicFunction","msgtype":"m.text"},"ts":1570405796000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so not use tildes ever?","msgtype":"m.text"},"ts":1570405944000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"those are the two options, basically","msgtype":"m.text"},"ts":1570405970000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I don't really have much of an opinion between the two)","msgtype":"m.text"},"ts":1570405993000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: fixed said bug","msgtype":"m.text"},"ts":1570406180000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(er, added fixes to what I'm doing)","msgtype":"m.text"},"ts":1570406198000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm still gonna do this on top of the `` -> ** change, I think","msgtype":"m.text"},"ts":1570406223000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's how I'm going through this so that I can evaluate each relevant case in turn","msgtype":"m.text"},"ts":1570406244000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and I don't think it would be worth rebasing back off of it","msgtype":"m.text"},"ts":1570406269000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]