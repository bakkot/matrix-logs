[
{"content":{"body":"with \"Array constructor\" it's even more pronounced","msgtype":"m.text"},"ts":1580429066000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"basically just Table 8: Well-Known Intrinsic Objects and this one sentence that occurs for all built-ins that has like \"`Array` behaviour must include a `super` call to the `Array` constructor\"","msgtype":"m.text"},"ts":1580429171000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wherein \"`Array` behaviour\" definitely feels wrong and I think the backticks for `Array` constructor should be abandoned there too since it's just a one-off case","msgtype":"m.text"},"ts":1580429220000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"augh this whole thing is arranged in a way that makes me not even want to touch it though","msgtype":"m.text"},"ts":1580505473000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like you could say like okay \"<built-in> {object, type, value, instance, prototype}\" is always written without backticks and \"<built-in> constructor\" is *usually* written without backticks so we should make that usually into an always","msgtype":"m.text"},"ts":1580505557000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"definitely doable, but","msgtype":"m.text"},"ts":1580505564000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"something like","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"The GeneratorFunction constructor:","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"- is a standard built-in function object that inherits from the `Function` constructor.","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is particular annoying","msgtype":"m.text"},"ts":1580505594000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's like, yeah, on its own, \"inherits from the `Function` constructor\" looks like exactly what I would've been inclined to write","msgtype":"m.text"},"ts":1580505645000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but like it's not even consistent within the scope of that bullet list as a whole","msgtype":"m.text"},"ts":1580505708000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1580505737000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I mean I guess in cases where it says like \"use\" or \"call\" or \"provide arguments to\" then we're clearly talking about code","msgtype":"m.text"},"ts":1580506262000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but inheritance seems like it could be conceptual. maybe I'll try to distinguish that accordingly.","msgtype":"m.text"},"ts":1580506286000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah so then maybe the Well-Known Intrinsic Objects table should change but then like","msgtype":"m.text"},"ts":1580506380000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in the earlier example of \"`Array` behaviour must include a `super` call to the `Array` constructor\" maybe \"Array behaviour\" could go without but \"call to the `Array` constructor\" could be said to need 'em","msgtype":"m.text"},"ts":1580506442000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I dunno how I get so nerd-sniped by stylistic matters like this...)","msgtype":"m.text"},"ts":1580506463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"on the other hand,","msgtype":"m.text"},"ts":1580506692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580506692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"20.4.2.2 Date ( value )","msgtype":"m.text"},"ts":1580506692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"This description applies only if the Date constructor is called with exactly one argument.","msgtype":"m.text"},"ts":1580506692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1580506692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"still does feature the verb \"call\" and is written without backticks :neutral_face:","msgtype":"m.text"},"ts":1580506693000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this should be an improvement at least ðŸ˜• https://github.com/tc39/ecma262/pull/1860","msgtype":"m.text"},"ts":1580511506000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: thank you for all your editorial PRs","msgtype":"m.text"},"ts":1580513777000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: glad it's not annoying ðŸ˜…","msgtype":"m.text"},"ts":1580513796000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]