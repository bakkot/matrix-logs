[
{"content":{"body":"Bakkot, ljharb, it seems like checking for internal slots using the `prototype.has()` is only possible for keyed collections (`Map`, `Set`, `WeakMap`, `WeakSet`) since the other builtins are missing `prototype.has()`...","msgtype":"m.text"},"ts":1617816035000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"using `Object.prototype.toString()` has become a lot more appealing due to its simplicity despite its unreliability","msgtype":"m.text"},"ts":1617816692000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: sure, the mechanism is unique for every builtin","msgtype":"m.text"},"ts":1617816762000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: which is why i made the packages, so you don't have to know all those details","msgtype":"m.text"},"ts":1617816774000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: it also depends on the use case. if it's for debug info, https://npmjs.com/object-inspect has you covered","msgtype":"m.text"},"ts":1617816794000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I find it quite troubling that this isn't easier to do...","msgtype":"m.text"},"ts":1617817135000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: dan and i are planning to reintroduce a proposal sometime this year to make it easier","msgtype":"m.text"},"ts":1617817183000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: i'll ping you when i make the repo; knowing your exact use cases would help","msgtype":"m.text"},"ts":1617817201000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, yes please do let me know once that is underway; the use-case is evident this tweet (runtime typechecking for strict function inputs) https://twitter.com/buildsghost/status/1378091631379767296","msgtype":"m.text"},"ts":1617817357000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: i don't believe typescript's types are anywhere near as robust as \"has internal slots\" tho","msgtype":"m.text"},"ts":1617817523000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: ie if your goal is to match typescript, `instanceof` is probably about the same semantics for most things","msgtype":"m.text"},"ts":1617817541000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`instanceof` doesn't work cross-realm (iframes), but there must be a way to replicate the logic of `instanceof` in userland (something like comparing whether it has the correct prototype)","msgtype":"m.text"},"ts":1617817825000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: typescript doesn't understand realms so that shouldn't matter","msgtype":"m.text"},"ts":1617817917000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is. instanceof is basically calling the Symbol.hasInstance method when present, and checking the .constructor and/or [[Prototype]] (i forget which) when not","msgtype":"m.text"},"ts":1617817937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric that tweet does not make the use case clear to me, fwiw","msgtype":"m.text"},"ts":1617818153000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"checking _primitives_ is an obvious thing to want, but `typeof` accomplishes that","msgtype":"m.text"},"ts":1617818173000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for objects, my position is that your code should not care whether it's given an actual Map or a thing which conforms to the interface of Map","msgtype":"m.text"},"ts":1617818249000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"making it easy to distinguish the two encourages distinguishing between those two cases, and most code should not distinguish","msgtype":"m.text"},"ts":1617818284000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot, yeah, that pretty much sums up how I feel about objects too (conforms to the interface), but making such a check sounds expensive (need to determine if the object in question has all the same properties as an instantiated builtin)","msgtype":"m.text"},"ts":1617818628000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"i'm just reading https://tc39.es/ecma262/#sec-returnifabrupt -- shouldn't \"algorgithms steps\" be \"algorithm steps\"?","msgtype":"m.text"},"ts":1617823109000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"I don't see \"algorg\" anywhere in https://tc39.es/ecma262","msgtype":"m.text"},"ts":1617823191000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"me neither","msgtype":"m.text"},"ts":1617823197000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1617823202000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"\"algorithms steps\"","msgtype":"m.text"},"ts":1617823206000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"ah, yes.","msgtype":"m.text"},"ts":1617823217000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"not helpful when i typo the thing i'm trying to point to :P","msgtype":"m.text"},"ts":1617823218000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"yup, that looks wrong to me.","msgtype":"m.text"},"ts":1617823259000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"seems like it'd be clearer without the plural in the few places it's in, yeah","msgtype":"m.text"},"ts":1617823262000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean maybe technically could be \"algorithms' steps\"","msgtype":"m.text"},"ts":1617823286000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"but that is kind of weird also","msgtype":"m.text"},"ts":1617823291000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1617823295000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Goes back to ES6: https://262.ecma-international.org/6.0/#sec-throw-an-exception","msgtype":"m.text"},"ts":1617823388000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"how did you find that out so quickly?","msgtype":"m.text"},"ts":1617823434000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"just ctrl+f?","msgtype":"m.text"},"ts":1617823444000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"`git log -S 'Algorithms steps'` and then looked at the oldest commit. Could also have used `git blame`.","msgtype":"m.text"},"ts":1617823519000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"That showed it goes back at least to ES6, because that's the oldest version in git.","msgtype":"m.text"},"ts":1617823552000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so then i did a ctrl-f in 5.1 and got no hits.","msgtype":"m.text"},"ts":1617823565000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"git log -S. thanks. didn't know that one","msgtype":"m.text"},"ts":1617823622000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"It's ridiculously useful.","msgtype":"m.text"},"ts":1617823634000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Also git log -G","msgtype":"m.text"},"ts":1617823648000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i just âŒ˜-F'd in the page","msgtype":"m.text"},"ts":1617824217000,"senderName":"ljharb","senderId":"ljharb@irc"}
]