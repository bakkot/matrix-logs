[
{"content":{"body":"https://www.staging-typescript.org/play?ts=4.2.0-pr-42437-10 playground for do expression in typescript","msgtype":"m.text"},"ts":1611496033000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"ljharb: might be interesting to bundle discriminated unions into the matching proposal","msgtype":"m.text"},"ts":1611502769000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://github.com/rbuckton/proposal-enum/issues/6 do u mean this?","msgtype":"m.text"},"ts":1611503315000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: something like that, yes","msgtype":"m.text"},"ts":1611503509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek:it will certainly be possible to do that, and already is in the stage 1 proposal anyways afaict","msgtype":"m.text"},"ts":1611505136000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":" that proposal seems very inactivated these years","msgtype":"m.text"},"ts":1611505214000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"it hasn’t been updated in a number of years, sure. i plan to update it for the March meeting, hopefully","msgtype":"m.text"},"ts":1611505313000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Cool","msgtype":"m.text"},"ts":1611505768000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"About pattern matching I have a concern, match based on structure instead of class might encourage things like \"if this thing has a 'item' method, its a Dom collection\"","msgtype":"m.text"},"ts":1611505933000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: that’s up to the user. it’s not possible to make JS encourage ducktyping *more* imo :-p","msgtype":"m.text"},"ts":1611506990000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and there’s no such thing yet as match based on class, except for instanceof, which is unreliable and not cross-realm for builtins","msgtype":"m.text"},"ts":1611507023000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this proposal won’t prevent using such a thing in the future, but also won’t be inventing it","msgtype":"m.text"},"ts":1611507041000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i hope that the pattern matching proposal only allows you to switch on the _value_ of properties, not their existence","msgtype":"m.text"},"ts":1611507497000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: it’ll include guards, so you can switch on whatever you want. But the first-class syntax part i believe will do what you’re saying.","msgtype":"m.text"},"ts":1611508039000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it’ll all be laid out in detail in March, assuming everything it’s waiting on works out","msgtype":"m.text"},"ts":1611508149000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right, sounds good to me","msgtype":"m.text"},"ts":1611508198000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i am ok with not actively preventing people writing `x in y`, as long as we don't actively encourage it","msgtype":"m.text"},"ts":1611508252000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it’ll depend on your use case. If you’re using tagged unions, you wouldn’t care anyways; if untagged unions eg, you might, but that’s where guards come in","msgtype":"m.text"},"ts":1611508403000,"senderName":"ljharb","senderId":"ljharb@irc"}
]