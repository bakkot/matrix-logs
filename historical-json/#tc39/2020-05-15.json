[
{"content":{"body":"targos per https://github.com/nodejs/node/pull/32202 , make test with `--without-intl` seems to fail to build at all for me locally due to eslint wanting to use the non-intl form how are you running your build/test","msgtype":"m.text"},"ts":1589564646000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"does anyone have the graph of edges in the builtins, maybe as a dot file?","msgtype":"m.text"},"ts":1589578787000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"edges?","msgtype":"m.text"},"ts":1589578822000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what constitutes a node and a line between them in your graph","msgtype":"m.text"},"ts":1589578835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a node is an object, let's say, and an edge is (informally speaking) a gc-strong reference.","msgtype":"m.text"},"ts":1589578878000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"more formally, if x.[[Prototype]] is y, then there's an edge x -> y; if x has a property whose value, getter, or setter is y, then x -> y; and so on","msgtype":"m.text"},"ts":1589578913000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so like, you want to know which builtins strongly point to which others (initially), and which builtins internally reference intrinsics?","msgtype":"m.text"},"ts":1589578920000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jorendorff: you can probably generate that","msgtype":"m.text"},"ts":1589579037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmmm. do builtins effectively reference their realm's intrinsics? I don't remember how the spec works w.r.t. things like calling a function across realms","msgtype":"m.text"},"ts":1589579043000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"do you mean well known intrinsics?","msgtype":"m.text"},"ts":1589579061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well known intrinsics are strongly referenced by the realm itself","msgtype":"m.text"},"ts":1589579073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"In any case I am happy to do without references from builtins to intrinsics due to their algorithms","msgtype":"m.text"},"ts":1589579106000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"https://gist.github.com/devsnek/377e4a52d83e786613997af82710d4db","msgtype":"m.text"},"ts":1589579131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is from a bit of test code i have but it walks over everything accessible from `globalThis`","msgtype":"m.text"},"ts":1589579149000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff: i mean, in that case it's just an object property graph, yes?","msgtype":"m.text"},"ts":1589579206000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I don't know.","msgtype":"m.text"},"ts":1589579222000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"anything they reference with %ThisNotation% is strongly referenced by the realm","msgtype":"m.text"},"ts":1589579234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least should cover [[Prototype]] which isn't a property","msgtype":"m.text"},"ts":1589579257000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"hm i should add [[Prototype]] to my walker","msgtype":"m.text"},"ts":1589579279000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff: `__proto__` is, but sure. what's the goal?","msgtype":"m.text"},"ts":1589579292000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I want to know if it is possible to find cycles (that are not .constructor/.prototype cycles)","msgtype":"m.text"},"ts":1589579328000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I want to know if there are any other than the ones that look like","msgtype":"m.text"},"ts":1589579476000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"m ---> %FunctionPrototype% ---> %ObjectPrototype% ----> m","msgtype":"m.text"},"ts":1589579486000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"where m is some nonstatic method of Object","msgtype":"m.text"},"ts":1589579493000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's not just methods, `Number.MAX_VALUE.constructor.MAX_VALUE`","msgtype":"m.text"},"ts":1589579630000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`String.constructor.name.constructor.name`, etc","msgtype":"m.text"},"ts":1589579658000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"those aren't cycles in the graph I'm asking for...","msgtype":"m.text"},"ts":1589579674000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok so you don't want constructor/prototype but you do want [[Prototype]]?","msgtype":"m.text"},"ts":1589579691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I can write code that walks this graph, and notices, constructor/prototype cycles, and disregards them","msgtype":"m.text"},"ts":1589579720000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's ok for the graph to have those","msgtype":"m.text"},"ts":1589579739000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"now that i think about it","msgtype":"m.text"},"ts":1589579781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"engine262's gc might be useful since it sees all the internal properties","msgtype":"m.text"},"ts":1589579793000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and its easy to modify","msgtype":"m.text"},"ts":1589579799000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the property of cycles i'm interested in here","msgtype":"m.text"},"ts":1589579802000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"is that an implementation that populates the builtins lazily","msgtype":"m.text"},"ts":1589579807000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"needs a strategy for these","msgtype":"m.text"},"ts":1589579832000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it could atomically fill in one strongly connected component at a time, without issues;","msgtype":"m.text"},"ts":1589579835000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"or try to replace some edges with tripwires that trigger more lazy initialization;","msgtype":"m.text"},"ts":1589579855000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"does anything actually do that?","msgtype":"m.text"},"ts":1589579856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"etc. etc.","msgtype":"m.text"},"ts":1589579857000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"SpiderMonkey does, and actually ... surely all the browsers do for the HTML builtins, because that namespace, woof","msgtype":"m.text"},"ts":1589579896000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"wasn't there a proposal to whatwg or smth about making it easier for engines to lazily load things and the engines basically said \"that doesn't matter\"","msgtype":"m.text"},"ts":1589579901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"JSC has lazy-loading of builtins but I don't believe it's done in a tiered fashion per se","msgtype":"m.text"},"ts":1589579910000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh I wasn't even thinking about stuff above 262; definitely necessary there","msgtype":"m.text"},"ts":1589579940000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"actually what is meant by lazy loading builtins","msgtype":"m.text"},"ts":1589580002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"...indeed :)","msgtype":"m.text"},"ts":1589580030000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"like lazily creating the actual heap objects?","msgtype":"m.text"},"ts":1589580036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1589580041000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and engines do that instead of just serializing precreated heaps?","msgtype":"m.text"},"ts":1589580090000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"just\"","msgtype":"m.text"},"ts":1589580118000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, apparently","msgtype":"m.text"},"ts":1589580122000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1589580144000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"total memory usage for a fully populated global is no joke either","msgtype":"m.text"},"ts":1589580182000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/runtime/JSGlobalObject.cpp#L924","msgtype":"m.text"},"ts":1589580248000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"â€¦ fun how all commonly used polyfill systems end up fully enumerating the global object","msgtype":"m.text"},"ts":1589580355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1589580369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as a result, i wonder what percentage of sites would actually benefit from lazy loading","msgtype":"m.text"},"ts":1589580375000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(without some kind of heuristic around the detection mechanisms, at least)","msgtype":"m.text"},"ts":1589580394000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably those sites don't actually care much about performance","msgtype":"m.text"},"ts":1589580409000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wish i could find this issue","msgtype":"m.text"},"ts":1589580409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a really good point","msgtype":"m.text"},"ts":1589580412000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i wouldn't say they don't care","msgtype":"m.text"},"ts":1589580417000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd say correctness trumps perf","msgtype":"m.text"},"ts":1589580422000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"easy to be correct without doing that; just don't use things which need polyfilling","msgtype":"m.text"},"ts":1589580441000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"porque no los dos a la v8's heap snapshots","msgtype":"m.text"},"ts":1589580444000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1589580451000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am kind of joking but kind of not; that's what my team does, and we support back to ie9","msgtype":"m.text"},"ts":1589580477000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes but that's only doable for very targeted use cases with devs that have very niche knowledge","msgtype":"m.text"},"ts":1589580499000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's not practical for the vast majority","msgtype":"m.text"},"ts":1589580504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"depends how much you care about performance","msgtype":"m.text"},"ts":1589580530000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"going by how the web performs","msgtype":"m.text"},"ts":1589580541000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though I dunno, it's not that  hard","msgtype":"m.text"},"ts":1589580543000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'd say most people don't","msgtype":"m.text"},"ts":1589580545000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, yes","msgtype":"m.text"},"ts":1589580549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agree with Bakkot's perspective; there's a lot you can do with transforms without needing full polyfills","msgtype":"m.text"},"ts":1589580671000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: not for instance methods, without types","msgtype":"m.text"},"ts":1589580724000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also there's tons of random brokenness in various versions of shipped builtins that requires repairing","msgtype":"m.text"},"ts":1589580747000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, it's not just about missing things","msgtype":"m.text"},"ts":1589580754000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just use jquery","msgtype":"m.text"},"ts":1589580754000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but if you're gonna polyfill S.p.matchAll you're not gonna be instantiating anything you wouldn't otherwise","msgtype":"m.text"},"ts":1589581840000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and I'm not sure why an app wouldn't have to be aware of \"brokenness\"","msgtype":"m.text"},"ts":1589581888000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in the browsers it supports","msgtype":"m.text"},"ts":1589581902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hence I think if you're aiming for perf, you're not gonna be polyfilling in an unconsciously broad way","msgtype":"m.text"},"ts":1589581972000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]