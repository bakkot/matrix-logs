[
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1594686298000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently it is very clean, it's just that the thing it does very cleanly is bad","msgtype":"m.text"},"ts":1594686310000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(at least in most contexts)","msgtype":"m.text"},"ts":1594686318000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not clear that making it less clean purely for the sake of discouraging it would be an improvement","msgtype":"m.text"},"ts":1594686336000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mhm","msgtype":"m.text"},"ts":1594686465000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: I'm working on 2007, but it's slow going.","msgtype":"m.text"},"ts":1594687238000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck sweet","msgtype":"m.text"},"ts":1594687575000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me know if there's anything which would help on my end","msgtype":"m.text"},"ts":1594687587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g. if you find there's a particular batch of errors which is impeding further progress I'd be very happy to fix those","msgtype":"m.text"},"ts":1594687609000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I should probably just go ahead and fix the ones I've already identified","msgtype":"m.text"},"ts":1594687620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it needs a rebase to master, and there are merge conflicts","msgtype":"m.text"},"ts":1594687646000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"mostly steps-with-ids","msgtype":"m.text"},"ts":1594687669000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(i had to rebase my copy of 2007, because my pipeline only targets the latest master. So that isn't impeding my progress, but when I'm done, I'm probably going to submit a PR against 2007, so that should be easier of it's up-to-date.)","msgtype":"m.text"},"ts":1594688357000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And there are some choices that strike me as odd. E.g., look at SplitMatch's _q_ parameter. The preamble declares it as an integral Number, and the two call-points add some stuff to ensure that it is indeed a Number. But the SplitMatch only ever uses ‚Ñù(_q_). So why not just say it's a mathematical param, and eliminate the conversions to and from Number?","msgtype":"m.text"},"ts":1594692010000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot, you've got me one of the trickiest reading of the grammar today.  https://github.com/tc39/test262/issues/427#issuecomment-657937019","msgtype":"m.text"},"ts":1594696875000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"so please, HALP","msgtype":"m.text"},"ts":1594696884000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter oh man that's an old issue","msgtype":"m.text"},"ts":1594697027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I will take a look","msgtype":"m.text"},"ts":1594697036000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"leobalter: you say in that issue \"here comes a trick: IsUnresovableReference returns true becase the base value component of V is still the Global Env Record.\"","msgtype":"m.text"},"ts":1594697259000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should that \"true\" be \"false\"?","msgtype":"m.text"},"ts":1594697266000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That's a part I'm not fully sure. I formulate this question better at the last comment in the issue.","msgtype":"m.text"},"ts":1594697678000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"my reading of the spec is that it is false","msgtype":"m.text"},"ts":1594697692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am writing up a comment","msgtype":"m.text"},"ts":1594697695000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I believe IsUnresovableReference returns false, because the Reference is set","msgtype":"m.text"},"ts":1594697698000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"but the short version is, your reading of the spec is correct and this is a bug in ecma-262 which never got fixed","msgtype":"m.text"},"ts":1594697714000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm so glad I decided to review that old issue","msgtype":"m.text"},"ts":1594697756000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"commented and opened https://github.com/tc39/ecma262/issues/2093","msgtype":"m.text"},"ts":1594698117000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"leobalter yeah, thanks for catching this","msgtype":"m.text"},"ts":1594698131000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's still a bunch of spec bugs :(","msgtype":"m.text"},"ts":1594698138000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but we're making some progress I think!","msgtype":"m.text"},"ts":1594698151000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll add this case to the Test262 report for the fun parts.","msgtype":"m.text"},"ts":1594698160000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"this is not simple to fix, basically we need to catch several Runtime Evaluations and add a HasBinding check before performing PutValue","msgtype":"m.text"},"ts":1594698192000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter the fix proposed in the esdiscuss thread is to add an additional check for the existence of the property in SetMutableBinding","msgtype":"m.text"},"ts":1594698455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for both object and global environment records, I guess","msgtype":"m.text"},"ts":1594698465000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually just for object I guess, since the global one defers to the object one for non-lexical bindings","msgtype":"m.text"},"ts":1594698507000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I believe for the Object we'd need to carry on some flag to tell this binding should be there","msgtype":"m.text"},"ts":1594698587000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"at least something before PutValue for sure","msgtype":"m.text"},"ts":1594698604000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"there's no way to get the reference to exist in the first place without it being there","msgtype":"m.text"},"ts":1594698647000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is to say, I don't think there's a \"this binding should not be there\" case to distinguish from the \"this binding should be there\"","msgtype":"m.text"},"ts":1594698666000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: perhaps this: https://github.com/tc39/ecma262/compare/master...leobalter:2093/putvalue-strict-check?expand=1","msgtype":"m.text"},"ts":1594699322000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"But I need to verify what else is calling PutValue","msgtype":"m.text"},"ts":1594699330000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I opened a draft PR for now https://github.com/tc39/ecma262/pull/2094","msgtype":"m.text"},"ts":1594699578000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"This might be wrong, but so far it seems ok'ish. I need to continue checking everything that goes through PutValue tomorrow","msgtype":"m.text"},"ts":1594699620000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"that probably works","msgtype":"m.text"},"ts":1594699695000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though, ugh, this is observable because of proxies","msgtype":"m.text"},"ts":1594699702000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the proxy can have side effects","msgtype":"m.text"},"ts":1594700045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"proxies are the worst","msgtype":"m.text"},"ts":1594700050000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Indeed","msgtype":"m.text"},"ts":1594700464000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"that feel when U+2028 is allowed in strings","msgtype":"m.text"},"ts":1594751181000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why doesn't Map.prototype.delete remove `p` from `entries`","msgtype":"m.text"},"ts":1594753133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"huh?","msgtype":"m.text"},"ts":1594753463000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"The value empty is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.\"","msgtype":"m.text"},"ts":1594753669000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Map.prototype.clear says: \"The existing [[MapData]] List is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that List.\"","msgtype":"m.text"},"ts":1594753757000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"maybe the same reason applies to Map.p.delete","msgtype":"m.text"},"ts":1594753768000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think the clear one is about the actual identity of the list","msgtype":"m.text"},"ts":1594753801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the items within","msgtype":"m.text"},"ts":1594753803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hm, %MapIteratorPrototype%.next extracts  _m_.[[MapData]] every time it's called, so it seems like neither the identity of the List nor the 'persistence' of its entries are important","msgtype":"m.text"},"ts":1594754075000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, changed my mind.","msgtype":"m.text"},"ts":1594754183000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"persistence of entries means that if you 'delete' while iterating, [[MapNextIndex]] will still point to the 'next' entry","msgtype":"m.text"},"ts":1594754259000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"if 'delete' removed an entry from the List, then [[MapNextIndex]] would 'skip' if you delete while iterating.","msgtype":"m.text"},"ts":1594754334000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: my analysis is uncovering some other (2007-independent) problems","msgtype":"m.text"},"ts":1594759414000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck I am not surprised","msgtype":"m.text"},"ts":1594759455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with numbers, or more generally?","msgtype":"m.text"},"ts":1594759459000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"E.g. ToInteger can return +/- infinity, but it seems to me that most callers aren't dealing with that possibility.","msgtype":"m.text"},"ts":1594759621000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"at a quick glance it looks like most callers immediately clamp the result with min or max, which is fine","msgtype":"m.text"},"ts":1594759777000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(min and max explicitly include +/- infinity in their domain)","msgtype":"m.text"},"ts":1594759789000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I could definitely believe some don't, and it certainly should not claim to return an integral number","msgtype":"m.text"},"ts":1594759805000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also, that doesn't work when you try to shift things over to mathematical values","msgtype":"m.text"},"ts":1594759880000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what is 2007","msgtype":"m.text"},"ts":1594759926000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"PR #2007, mathematical values","msgtype":"m.text"},"ts":1594759940000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1594759948000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, well, it works fine if we say that our mathematical values are augmented with +/- infinity, but there's is some subtlety there","msgtype":"m.text"},"ts":1594759974000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"Note that the mathematical value of non-finite values is not defined\", so \"the mathematical value of ? ToInteger(_x_)\" is typically not defined","msgtype":"m.text"},"ts":1594760060000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yeah; I'll bring that up with the other editors. Personally, given this evidence, I am inclined to say that you are allowed to take the mathematical value of infinities (but not NaN), though that may cause trouble elsewhere","msgtype":"m.text"},"ts":1594760316000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would be inclined the same, pending the trouble it will probably cause elsewhere","msgtype":"m.text"},"ts":1594760345000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe we want to introduce extended mathematical values","msgtype":"m.text"},"ts":1594762393000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is the reals and also +/- infinity","msgtype":"m.text"},"ts":1594762402000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but keep this distinct from regular mathematical values","msgtype":"m.text"},"ts":1594762410000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and only ever do comparisons on things in this class","msgtype":"m.text"},"ts":1594762430000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I know we do actual arithmetic in some cases and we'd probably change those.)","msgtype":"m.text"},"ts":1594762442000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]