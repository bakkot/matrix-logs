[
{"content":{"body":"@ljharb: Thanks for the heads up. Github app notifications are flaky at times.","msgtype":"m.text"},"ts":1594090460000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bradleymeck: Trying to understand the conversation. So what is the potential problem with object[key] with user-provided key?","msgtype":"m.text"},"ts":1594090929000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Accessing __proto__ in the key?","msgtype":"m.text"},"ts":1594090954000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Even then you can only set proto, not change properties within it.","msgtype":"m.text"},"ts":1594090989000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"littledan: what is finalizationRegistry.[[Realm]] for","msgtype":"m.text"},"ts":1594091706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: Done","msgtype":"m.text"},"ts":1594124550000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"npm watch script seems broken? https://github.com/tc39/ecma262/issues/2083","msgtype":"m.text"},"ts":1594124583000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"v8's test262 runner goes past 100% coverage","msgtype":"m.text"},"ts":1594134250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't like this","msgtype":"m.text"},"ts":1594134254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bendtherules: thanks","msgtype":"m.text"},"ts":1594139123000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bendtherules: see https://twitter.com/bradleymeck/status/1280209566907670530 , basically you have this whole security firm audit noise from people accessing things on prototypes  with dynamic access","msgtype":"m.text"},"ts":1594142267000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and it is a lot of noise if you use `npm audit` or github vulnerability checks","msgtype":"m.text"},"ts":1594142305000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"(both of which are on by default)","msgtype":"m.text"},"ts":1594143144000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: is it `constructor-constructor`, and the code?","msgtype":"m.text"},"ts":1594143200000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes in that case","msgtype":"m.text"},"ts":1594143221000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"fun","msgtype":"m.text"},"ts":1594143227000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but other fun and more esoteric stuff like that does come up while i audit stuff","msgtype":"m.text"},"ts":1594143243000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"So, if libraries do Get/hasOwnProperty instead of general accessors - doesn't that fix it?","msgtype":"m.text"},"ts":1594144337000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"(if that's what they want Ofcourse)","msgtype":"m.text"},"ts":1594144352000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"given these are data manipulation libraries usually, that's a fair limitation","msgtype":"m.text"},"ts":1594144396000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: the problem is that people write the code","msgtype":"m.text"},"ts":1594144794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are of course solutions","msgtype":"m.text"},"ts":1594144797000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the solutions are only useful if people use them","msgtype":"m.text"},"ts":1594144808000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hmm, got it. So, there's no easy syntax for that","msgtype":"m.text"},"ts":1594145013000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: yes it is largely a DX problem","msgtype":"m.text"},"ts":1594145017000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a variety of things can make this easier","msgtype":"m.text"},"ts":1594145025000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can use null prototype objects is my main approach","msgtype":"m.text"},"ts":1594145035000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there are actually very few reasons to want to have an instance of Object","msgtype":"m.text"},"ts":1594145053000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so in the example tweet above adding __proto__:null to the literal fixes it","msgtype":"m.text"},"ts":1594145079000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but no one does that","msgtype":"m.text"},"ts":1594145083000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and security noise comes from the libraries doing dynamic access, so even if it is fixed you still get alerts","msgtype":"m.text"},"ts":1594145119000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"gotta fix `extends null`","msgtype":"m.text"},"ts":1594149204000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"should revisit that","msgtype":"m.text"},"ts":1594149208000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"one hairbrained idea I had for it was to make `Function.prototype` new-able","msgtype":"m.text"},"ts":1594149223000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"though I don't remember enough details to know why I thought that would fix the problem","msgtype":"m.text"},"ts":1594149234000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck: does proto null solve it though? You are going to want to call the inherited method, at some point - after all.","msgtype":"m.text"},"ts":1594150292000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Also what about array literals? That will also finally lead to object in proto chain, right?","msgtype":"m.text"},"ts":1594150292000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"it seems fine to me to make `super()` a no-op when super is null, why is that not workable?","msgtype":"m.text"},"ts":1594150336000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: just thinking out loud, so should `super.xyz`still throw some error?","msgtype":"m.text"},"ts":1594150514000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: yes, i'd expect so","msgtype":"m.text"},"ts":1594150870000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i might expect `super?.xyz` to work","msgtype":"m.text"},"ts":1594150886000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bendtherules: thats fine, the problem is the inherited constructors, calling the method isn't a problem","msgtype":"m.text"},"ts":1594150915000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so yes, a null prototype on dynamic property access usually fixes the issue","msgtype":"m.text"},"ts":1594150942000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: to my recollection most of the complaints are about minor edge cases","msgtype":"m.text"},"ts":1594150968000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bendtherules: you can access ([])['constructor'] just fine so idk what the question about them is","msgtype":"m.text"},"ts":1594150998000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck yeah mostly","msgtype":"m.text"},"ts":1594151007000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck:  I meant, if i do `a={__proto__:null}`, then this solves security issue, but now i can't expect `a.toString` to work. What if i want that?","msgtype":"m.text"},"ts":1594151057000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"stop wanting that, presumably?","msgtype":"m.text"},"ts":1594151075000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"when would you want that to work?","msgtype":"m.text"},"ts":1594151087000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"that is, to work how it does by default","msgtype":"m.text"},"ts":1594151095000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb is \"when super is null\" a at-definition-time property or an at-evaluation-time property? remember that you can dynamically change a class's heritage","msgtype":"m.text"},"ts":1594151140000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: evaluation time, for that reason","msgtype":"m.text"},"ts":1594151151000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: definition-time is \"it's a derived class, so super is allowed\"","msgtype":"m.text"},"ts":1594151166000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok, so is super _required_ in your extends-null class?","msgtype":"m.text"},"ts":1594151197000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I was thinking - with the same object, sometimes i want \"safe mode\" (i.e. i am dealing with user-generated value in this line) - so i'll write something like`obj[? prop1][? prop1]`","msgtype":"m.text"},"ts":1594151216000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bakkot_: yes, if i want to access `this`","msgtype":"m.text"},"ts":1594151225000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb that seems... very strange","msgtype":"m.text"},"ts":1594151232000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1594151234000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but in next line, when i am calling toString, i can call `obj.toString()` directly","msgtype":"m.text"},"ts":1594151241000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"`this` is only ever available in a derived class after calling super()","msgtype":"m.text"},"ts":1594151244000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lj because there is no super class to call?","msgtype":"m.text"},"ts":1594151245000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb *","msgtype":"m.text"},"ts":1594151249000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"there's whatever i put in `extends X`","msgtype":"m.text"},"ts":1594151256000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in this case, `null`","msgtype":"m.text"},"ts":1594151262000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1594151263000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right, well, the contention is that a class which extends null is not a derived class","msgtype":"m.text"},"ts":1594151279000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i'm basing my model on the syntax","msgtype":"m.text"},"ts":1594151291000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if it has \"extends\" it's a derived class","msgtype":"m.text"},"ts":1594151295000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(not that \"derived class\" is a good name for it, that's just the spec name)","msgtype":"m.text"},"ts":1594151308000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is a view one could hold, but not one I share or expect to be common","msgtype":"m.text"},"ts":1594151315000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i mean, i don't think \"common\" needs to apply with anything that changes the [[Prototyoe]] later","msgtype":"m.text"},"ts":1594151350000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what's common is never monkeying with the prototype at all","msgtype":"m.text"},"ts":1594151362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am talking mainly about the mainline case, where you don't do that","msgtype":"m.text"},"ts":1594151370000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ok, so like `class extends null` or the equivalent","msgtype":"m.text"},"ts":1594151379000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1594151384000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"`new class extends null { constructor(){ console.log(this); } } // works?`","msgtype":"m.text"},"ts":1594151398000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"per your above, no","msgtype":"m.text"},"ts":1594151402000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i'd assume it throws, right","msgtype":"m.text"},"ts":1594151405000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that would surprise me","msgtype":"m.text"},"ts":1594151406000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"it would throw with any other value in place of `null` there","msgtype":"m.text"},"ts":1594151418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: what would you expect super() to do in that case?","msgtype":"m.text"},"ts":1594151424000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and since it's an expression, `null` is the same as `x`","msgtype":"m.text"},"ts":1594151426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: nothing","msgtype":"m.text"},"ts":1594151429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: just bind the `this` and install fields","msgtype":"m.text"},"ts":1594151434000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why is that less surprising to you than throwing, because the super class is clearly null?","msgtype":"m.text"},"ts":1594151448000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: iow super does two things right now, \"invoke the superclass constructor\" and \"bind the receiver and install fields\"","msgtype":"m.text"},"ts":1594151450000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb well, yes, because the other things you could put there would be expected to be _actual superclasses_, whereas null is, clearly, not","msgtype":"m.text"},"ts":1594151458000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"because in my `extends null` class what i *want* is to install the fields","msgtype":"m.text"},"ts":1594151464000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and i want to control when that happens","msgtype":"m.text"},"ts":1594151471000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"... well","msgtype":"m.text"},"ts":1594151478000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"stop wanting that?","msgtype":"m.text"},"ts":1594151480000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1594151485000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sorry sorry","msgtype":"m.text"},"ts":1594151486000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i see, that's a different line of argument that folks have a model that all expressions in heritage positions are somehow semantically interchangeable","msgtype":"m.text"},"ts":1594151506000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I mean to say, I don't find \"I want to control when fields are installed on my extends-null class\" to be a compelling use case","msgtype":"m.text"},"ts":1594151507000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"surprise in an edge case seems less important to avoid than giving people what they want :-p","msgtype":"m.text"},"ts":1594151509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: that part's fair","msgtype":"m.text"},"ts":1594151523000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right, well, the thing that I want is to not have to call `super` in my extends-null class","msgtype":"m.text"},"ts":1594151529000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"because, not being a subclass, I don't expect to have to","msgtype":"m.text"},"ts":1594151536000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"there is no superclass to call","msgtype":"m.text"},"ts":1594151550000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i see the difference in our thinking here: to me, if it has `extends`, it *is* a subclass","msgtype":"m.text"},"ts":1594151553000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"... of... what?","msgtype":"m.text"},"ts":1594151561000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"of whatever's on the RHS of `extends`","msgtype":"m.text"},"ts":1594151569000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"... null?","msgtype":"m.text"},"ts":1594151574000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"null is not a class","msgtype":"m.text"},"ts":1594151576000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"this I believe","msgtype":"m.text"},"ts":1594151582000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1594151584000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`new class extends {} { constructor() { this; } }` throws too tho","msgtype":"m.text"},"ts":1594151617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow, \"the RHS is a class\" is already not a guarantee","msgtype":"m.text"},"ts":1594151625000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and the subclass rules still apply to everything simply because `extends` is present","msgtype":"m.text"},"ts":1594151635000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait, I don't understand this example","msgtype":"m.text"},"ts":1594151636000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"why is null the one deviation?","msgtype":"m.text"},"ts":1594151640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it extends an empty object","msgtype":"m.text"},"ts":1594151646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb `{}` is not a class, which is why `super()` would throw","msgtype":"m.text"},"ts":1594151646000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1594151649000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i didn't use super there","msgtype":"m.text"},"ts":1594151654000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i used `this`","msgtype":"m.text"},"ts":1594151655000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sure, but","msgtype":"m.text"},"ts":1594151657000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"and it threw because i never called super","msgtype":"m.text"},"ts":1594151658000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because it's a subclass, *because `extends` is there*","msgtype":"m.text"},"ts":1594151664000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok but it would also throw if you did call `super()`","msgtype":"m.text"},"ts":1594151668000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1594151671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't understand the relevance of this example","msgtype":"m.text"},"ts":1594151678000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so the part that i'm suggesting would be special for null is \"what happens when you call super()\"","msgtype":"m.text"},"ts":1594151685000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is no scenario where `extends` is present and you'd not have to call super to access `this`","msgtype":"m.text"},"ts":1594151694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, yes, I get that this is what you are proposing","msgtype":"m.text"},"ts":1594151705000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"and i don't think it makes any sense to make `null` special for the latter case","msgtype":"m.text"},"ts":1594151707000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"our difference is, I don't think `null` is a class","msgtype":"m.text"},"ts":1594151715000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"meaning, I don't think one can have a subclass of `null`","msgtype":"m.text"},"ts":1594151725000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"neither is most of the other things i can put on the RHS of `extends`","msgtype":"m.text"},"ts":1594151730000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, you can't have subclasses of those eitherr","msgtype":"m.text"},"ts":1594151739000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"because \"the thing it extends is a class\" is currently irrelevant to whether `super` is required.","msgtype":"m.text"},"ts":1594151742000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i also do not understand why your opinion is that \"there is no scenario where `extends` is present and you'd not have to call super to access `this`\" is such a desirable property to preserve","msgtype":"m.text"},"ts":1594151743000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: because the syntax is what developers see","msgtype":"m.text"},"ts":1594151758000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: they see extends, they know they need to call super","msgtype":"m.text"},"ts":1594151767000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: that's my argument anyways","msgtype":"m.text"},"ts":1594151771000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is not my intuition","msgtype":"m.text"},"ts":1594151778000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i simply disagree with that intuition","msgtype":"m.text"},"ts":1594151779000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I see `extends null`, I do not expect to have to call `super`, because I do not think I am writing a derived class","msgtype":"m.text"},"ts":1594151796000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"right but you might not see null there","msgtype":"m.text"},"ts":1594151803000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"...how?","msgtype":"m.text"},"ts":1594151813000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is technically true but I think not super relevant","msgtype":"m.text"},"ts":1594151814000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"you might have a function that takes a superclass and returns a new class, and the user could pass null or a constructor","msgtype":"m.text"},"ts":1594151820000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I expect the overwhelming majority of cases to put `null` there explicitly","msgtype":"m.text"},"ts":1594151827000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"that's fair, i also expect that","msgtype":"m.text"},"ts":1594151834000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah, i see, that would be a strange kind of class factory","msgtype":"m.text"},"ts":1594151840000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that sometimes generates a subclass and sometimes not?","msgtype":"m.text"},"ts":1594151846000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i maintain it's a subclass if it has `extends` :-)","msgtype":"m.text"},"ts":1594151857000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I still want to know what you think it is a subclass _of_","msgtype":"m.text"},"ts":1594151867000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"nothing, if it's null","msgtype":"m.text"},"ts":1594151874000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what... does that mean","msgtype":"m.text"},"ts":1594151879000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"its subclass-ness is not contingent on what it's subclassing","msgtype":"m.text"},"ts":1594151879000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you and I do not share an understanding of the word \"subclass\", I see","msgtype":"m.text"},"ts":1594151898000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1594151901000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: when you are writing new classes, do you think about the class hierarchy?","msgtype":"m.text"},"ts":1594151917000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"another way to put it, is that to me a subclass is only a class body in which `super` can be used","msgtype":"m.text"},"ts":1594151918000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or do you only think about a stream of tokens?","msgtype":"m.text"},"ts":1594151923000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: sure","msgtype":"m.text"},"ts":1594151923000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think about tokens at all, but i do think about what i'm typing, which includes the syntax","msgtype":"m.text"},"ts":1594151938000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"okay, when is the point in time when you switch from thinking about your syntactic notion of \"subclass\" to the other one, where a subclass is a class in a hierarchy with a superclass?","msgtype":"m.text"},"ts":1594151956000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i either typed a base class, or a subclass, by virtue of whether i chose `extends` or not","msgtype":"m.text"},"ts":1594151960000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"when i `new` it, i suppose?","msgtype":"m.text"},"ts":1594151968000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you're describing a runtime characteristic, not a definition time one","msgtype":"m.text"},"ts":1594151984000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there any linkage between your two notions?","msgtype":"m.text"},"ts":1594151992000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this is just all very bizarre to me","msgtype":"m.text"},"ts":1594151999000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so what would be an alternative to \"making extends null work\" besides \"super() where super is null is a runtime noop\"?","msgtype":"m.text"},"ts":1594152031000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the constructor checks the Prototype before it evaluates, and if it's null it binds it like a base class?","msgtype":"m.text"},"ts":1594152055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd rather lean towards the presence of `extends` at all makes it an explicit subclass of some kind","msgtype":"m.text"},"ts":1594152064000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it doesn't make sense to call `extends null` subclassing; what you'd be saying is that there is _implicit_ subclassing when  `extends` is omitted such that you'd like to be able to explicitly cancel it out","msgtype":"m.text"},"ts":1594152072000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: not sure what that means","msgtype":"m.text"},"ts":1594152087000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: what is the difference in your mental model between `class C extends Object` and `class C`","msgtype":"m.text"},"ts":1594152106000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: to me, it is that you have used a different construct","msgtype":"m.text"},"ts":1594152137000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: the former is an explicit subclass and the latter isn't?","msgtype":"m.text"},"ts":1594152146000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't understand the idea that they are equivalent","msgtype":"m.text"},"ts":1594152150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: i don't actually care that they both inherit from Object.prototype","msgtype":"m.text"},"ts":1594152155000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"one requires super()","msgtype":"m.text"},"ts":1594152159000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1594152161000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you made a choice by using 1 of the 2 constructs, and it causes a variation in how they need to be used","msgtype":"m.text"},"ts":1594152198000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oof. it sucks that those are the same insofar as the word \"subclass\" is concerned and yet we have a thing about them that isn't the same :(","msgtype":"m.text"},"ts":1594152209000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: they aren't the same is exactly the point of why i don't think they should be equated","msgtype":"m.text"},"ts":1594152253000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"they do result in the same prototype chain. but they're not the same.","msgtype":"m.text"},"ts":1594152268000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to put it a different way, a non-subclass can simply be thought of as something that cannot call super() during coonstruction","msgtype":"m.text"},"ts":1594152276000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i see, interesting","msgtype":"m.text"},"ts":1594152285000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so you really have a purely syntactic notion of \"subclass\"","msgtype":"m.text"},"ts":1594152300000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1594152304000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ouch","msgtype":"m.text"},"ts":1594152307000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: i wouldn't say syntactic","msgtype":"m.text"},"ts":1594152311000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that's the expectation the ES6 syntax sets up imo","msgtype":"m.text"},"ts":1594152314000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: no?","msgtype":"m.text"},"ts":1594152324000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but the equality of output doesn't tie me to the syntax being equal in intent","msgtype":"m.text"},"ts":1594152332000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: if the difference is not a ontological one in terms of hierarchical relationships but in whether super() throws or not","msgtype":"m.text"},"ts":1594152359000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: that seems purely syntactic to me","msgtype":"m.text"},"ts":1594152363000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's really unfortunate that we made `extends Object` require `super` :(","msgtype":"m.text"},"ts":1594152385000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if we hadn't, then we'd already know what to do with null","msgtype":"m.text"},"ts":1594152399000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and with `extends {}` or `extends false`","msgtype":"m.text"},"ts":1594152407000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: I'd agree that it is related to what the programmer wrote, but not necessarily that it is purely syntactic","msgtype":"m.text"},"ts":1594152420000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"has to dig up a spec sadness","msgtype":"m.emote"},"ts":1594152450000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: so by this logic, you would not be opposed (syntax budget concerns aside) to another syntax that isn't \"extends null\"","msgtype":"m.text"},"ts":1594152476000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"presumably because there is no extant property about super throwing or not tied to any new syntax","msgtype":"m.text"},"ts":1594152496000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: absolutely correvt","msgtype":"m.text"},"ts":1594152498000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`null class` or something","msgtype":"m.text"},"ts":1594152510000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in general i feel like that's a dangerous constraint on design","msgtype":"m.text"},"ts":1594152527000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i'd probably be in the same camp as being fine with other syntax but I would prefer `null` to be in the syntax","msgtype":"m.text"},"ts":1594152529000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: how so?","msgtype":"m.text"},"ts":1594152546000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't really care enough about this particular use case","msgtype":"m.text"},"ts":1594152546000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I think trying to state that the current programmer divergence must preserve the behavior of being purely syntactical is odd is my main complaint about the argument","msgtype":"m.text"},"ts":1594152609000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: because to me, i would almost always prefer to make tradeoffs that favor ontological symmetry (what is or isn't a subclass in the class hierarchy sense, in this case) over syntactic symmetry, unless doing so prohibits performant implementations, say","msgtype":"m.text"},"ts":1594152621000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"extends is just a signal that the class is different from a non-subclass","msgtype":"m.text"},"ts":1594152621000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: see our repeated semi-serious attempts to reclaim 'with' to be useful","msgtype":"m.text"},"ts":1594152650000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is there a real issue with not throwing for null as a class heritage?","msgtype":"m.text"},"ts":1594152651000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: i think i agree with you in principle, but class syntax failed that rubric at inception, because `extends false` eg is permitted","msgtype":"m.text"},"ts":1594152658000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: and similarly, `super` isn't permitted in a class without `extends`, even if that class changes its Prototype later","msgtype":"m.text"},"ts":1594152686000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: no, i think the issue is not requiring typing super()","msgtype":"m.text"},"ts":1594152691000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i don't think there is a problem requiring super() when extending null personally","msgtype":"m.text"},"ts":1594152728000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's no way that shouldn't throw though :-/","msgtype":"m.text"},"ts":1594152755000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'd be kind of terrified if it wasn't required for null, since it is required for everything else","msgtype":"m.text"},"ts":1594152759000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"tbh it's annoying to me to require `super()` in *every* case to me where i'm not changing the argument signature","msgtype":"m.text"},"ts":1594152760000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: why","msgtype":"m.text"},"ts":1594152764000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rkirsling: yes, why","msgtype":"m.text"},"ts":1594152766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: \"super\" just means \"make sure my instance is set up, somehow\"","msgtype":"m.text"},"ts":1594152775000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that it invokes a constructor is an implementation detail","msgtype":"m.text"},"ts":1594152807000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think that's how most people think of it...","msgtype":"m.text"},"ts":1594152807000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's a function call","msgtype":"m.text"},"ts":1594152807000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it is called \"super\"","msgtype":"m.text"},"ts":1594152807000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not \"init\"","msgtype":"m.text"},"ts":1594152807000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: it's function-like, like import(). you can't pass it anywhere else.","msgtype":"m.text"},"ts":1594152808000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: a function call to what? directly to the class heritage? it doesn't do a normal behavior when you call it","msgtype":"m.text"},"ts":1594152814000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I'd agree it has to be a call to *something*","msgtype":"m.text"},"ts":1594152824000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but not to the class heritage itself","msgtype":"m.text"},"ts":1594152830000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah I mean I know it's a keyword but the idea is that you're calling a function, namely the constructor of the superclass","msgtype":"m.text"},"ts":1594152838000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"auto call super if you don't call super seems too magical to me","msgtype":"m.text"},"ts":1594152846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: but it doesn't do that exactly","msgtype":"m.text"},"ts":1594152850000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: i agree","msgtype":"m.text"},"ts":1594152851000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it would need to throw just as `x = null; x.y()` does","msgtype":"m.text"},"ts":1594152857000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and that's not just","msgtype":"m.text"},"ts":1594152860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't call super","msgtype":"m.text"},"ts":1594152862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: sure. and in `extends null` the implied constructor is `function () { return { __proto__: null } }`","msgtype":"m.text"},"ts":1594152870000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it has to be, super isn't used","msgtype":"m.text"},"ts":1594152871000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or smth `if (false) { super() }`","msgtype":"m.text"},"ts":1594152880000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"extends null has no useful behavior atm","msgtype":"m.text"},"ts":1594152897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: I don't understand the last comment","msgtype":"m.text"},"ts":1594152906000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you aren't calling a method of the heritage nor the heritage directly","msgtype":"m.text"},"ts":1594152927000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"rkirsling: i'd be very surprised if people found that `class C extends null { constructor() { super(); this.a = 1; } }  new C()` produces an instance of C, with an own `a` property set to 1, with a [[Prototype]] set to null, was confusing","msgtype":"m.text"},"ts":1594152935000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"clearly what we need is","msgtype":"m.text"},"ts":1594152952000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a global `NullProtoObject` constructor","msgtype":"m.text"},"ts":1594152964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: it's not the produced thing that's confusing, it's the fact that `super()` doesn't throw","msgtype":"m.text"},"ts":1594152990000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I find that wildly objectionable","msgtype":"m.text"},"ts":1594153009000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: I still don't understand the claim it should throw","msgtype":"m.text"},"ts":1594153011000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cause super() clearly doesn't just do a function call","msgtype":"m.text"},"ts":1594153023000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can't call a method on null, I don't know what else to say","msgtype":"m.text"},"ts":1594153035000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: that's not what you're doing","msgtype":"m.text"},"ts":1594153048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: `super()` isn't calling a method on null, it's not calling a method on anything - it's asking the engine to set up the class hierarchy","msgtype":"m.text"},"ts":1594153065000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: you don't call methods on class heritage though, see `extends Object.setPrototype(function () {}, null)`","msgtype":"m.text"},"ts":1594153069000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that *may* involve invoking a constructor","msgtype":"m.text"},"ts":1594153075000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I don't really agree with the claim that `extends false` is permitted","msgtype":"m.text"},"ts":1594153096000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: it's syntactically permitted. obv `super()` would throw there","msgtype":"m.text"},"ts":1594153107000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and therefore do not want to reason from that claim","msgtype":"m.text"},"ts":1594153110000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb sure but why does that... matter?","msgtype":"m.text"},"ts":1594153119000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: if i don't use `this`, i can still return an object from the constructor and everything works fine","msgtype":"m.text"},"ts":1594153120000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because that's how classes work?","msgtype":"m.text"},"ts":1594153126000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't see how it makes sense to just pretend to ignore a bunch of existing semantics until it matches the mental model you want","msgtype":"m.text"},"ts":1594153142000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my mental model is that JS is not typechecked, which means a lot of nonsense is allowed statically and throws only at runtime","msgtype":"m.text"},"ts":1594153188000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"you brought up this example in response to Shu's \"i would almost always prefer to make tradeoffs that favor ontological symmetry over syntactic symmetry\"","msgtype":"m.text"},"ts":1594153215000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"in particular, you claimed JS has failed at this because the syntax is allowed","msgtype":"m.text"},"ts":1594153224000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1594153234000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I dispute this; I claim it also matters what is allowed _at runtime_","msgtype":"m.text"},"ts":1594153235000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i'm just not clear that there is an ontological symmetry","msgtype":"m.text"},"ts":1594153242000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and `extends false` is not","msgtype":"m.text"},"ts":1594153245000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"(unless you do weird things JS programmers are unlikely to need to think about)","msgtype":"m.text"},"ts":1594153258000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i just think of every feature in terms of abstracting all operands to variables","msgtype":"m.text"},"ts":1594153260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"super() does *something* and not a direct call of some kind to the class heritage","msgtype":"m.text"},"ts":1594153260000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: ok, so then you'd prefer `this` to Just Work whenever the superclass either doesn't exist, or it's a base class, or is null?","msgtype":"m.text"},"ts":1594153263000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb concretely, I think `this` should work without calling `super()` first when you have `class {}` or `class extends null {}`","msgtype":"m.text"},"ts":1594153302000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: meaning that the impl would have to check the prototype chain the first time `this` is referenced in any class, instead of only when super is called in a derived/never in a base?","msgtype":"m.text"},"ts":1594153303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1594153310000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wouldn't mind `extends null` meaning you don't call super","msgtype":"m.text"},"ts":1594153317000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb I am not making claims about what should happen outside of those two cases","msgtype":"m.text"},"ts":1594153317000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"but others would","msgtype":"m.text"},"ts":1594153319000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot_: should or must?","msgtype":"m.text"},"ts":1594153330000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: ok, seems like we'd need to figure that out tho","msgtype":"m.text"},"ts":1594153332000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb of course, yes","msgtype":"m.text"},"ts":1594153343000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I just want agreement on the core, happy-path semantics first","msgtype":"m.text"},"ts":1594153352000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"before we worry about the edge cases","msgtype":"m.text"},"ts":1594153358000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i don't think the one can come without the other","msgtype":"m.text"},"ts":1594153366000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1594153376000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1594153379000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so with changing the proto later, even in `class {}`, what happens the first time `this` is referenced?","msgtype":"m.text"},"ts":1594153381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"people will argue about `function factory(S) { return class extends S { constructor() { super(); } } }`","msgtype":"m.text"},"ts":1594153402000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hang on, before I respond to that, I want to know why we need to talk about the edge cases before agreeing on the core semantics","msgtype":"m.text"},"ts":1594153409000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: because in classes, i don't think they're separable","msgtype":"m.text"},"ts":1594153436000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the edge cases are part of the core semantics to me","msgtype":"m.text"},"ts":1594153442000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb well","msgtype":"m.text"},"ts":1594153445000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I do not agree with that","msgtype":"m.text"},"ts":1594153448000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"that's... pretty much a contradiction in terms","msgtype":"m.text"},"ts":1594153461000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"for classes specifically, i think everything's so entangled and intertwined that it can't really be separated","msgtype":"m.text"},"ts":1594153481000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to me, class fields discussions bore that out as well","msgtype":"m.text"},"ts":1594153488000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: i think the presence of extends forcing super() is really brutal to try and claim is decoupled","msgtype":"m.text"},"ts":1594153492000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck I'm not claiming it's decoupled?","msgtype":"m.text"},"ts":1594153512000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"that's the case I'm talking about","msgtype":"m.text"},"ts":1594153516000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i'm losing something via reading this","msgtype":"m.text"},"ts":1594153530000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck my core claims are \"`this` should work without calling `super()` first when you have `class {}` or `class extends null {}`\" and \"I want to get agreement on these cases before trying to reason about what happens when you change the prototype dynamically\"","msgtype":"m.text"},"ts":1594153585000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: there were people who objected to a super call not aligning exactly with the existence of `extends` regardless of what the value actually is","msgtype":"m.text"},"ts":1594153671000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek yes, ljharb has expressed that opinion","msgtype":"m.text"},"ts":1594153682000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"(and while i'm one of them i don't think i ever said as much in plenary)","msgtype":"m.text"},"ts":1594153687000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which is why I'm here contesting it","msgtype":"m.text"},"ts":1594153689000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so there's a number of folks who think that way","msgtype":"m.text"},"ts":1594153694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb anyway, would you be willing to talk about my claims without trying to get into what happens in edge cases?","msgtype":"m.text"},"ts":1594153756000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: can you explain why it must not require calling super, while extends Object must?","msgtype":"m.text"},"ts":1594153782000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"because if you agree those are good goals but don't think there's a good way to achieve them, that's different from disagreeing with the goals","msgtype":"m.text"},"ts":1594153788000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: i'm not sure what more we'd talk about :-) i hear your suggestion, and altho it conflicts with my intuition about extends+super, to me the only way i'd be able to consider ignoring that conflict is if i understand the edge cases too","msgtype":"m.text"},"ts":1594153805000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck I don't think anyone writes `extends Object` and I don't actually care if that particular case requires calling `super` or not","msgtype":"m.text"},"ts":1594153819000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i do disagree with the goal, but not in a forever-intractable kind of way","msgtype":"m.text"},"ts":1594153821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think \"avoiding writing super()\" is a non-goal","msgtype":"m.text"},"ts":1594153832000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(if that were a goal, then most of my \"actual\" subclasses wouldn't have required it either, including every react component)","msgtype":"m.text"},"ts":1594153852000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd agree that avoiding verbosity isn't a real goal, as long as usability isn't too impacted, you already are doing additional burden by requiring `extends null`","msgtype":"m.text"},"ts":1594153871000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yes, my objection is not \"this is a burden\", it's \"this requirement breaks my ontology by suggesting that an extends-null class is a subclass when it is not\"","msgtype":"m.text"},"ts":1594153934000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: why is it not i guess is the follow up","msgtype":"m.text"},"ts":1594153953000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to paraphrase a smart person, \"stop wanting that ontology?\"","msgtype":"m.text"},"ts":1594153958000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck of what?","msgtype":"m.text"},"ts":1594153963000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":":-p","msgtype":"m.text"},"ts":1594153963000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: why is extending null not a subclass if it has a heritage","msgtype":"m.text"},"ts":1594153976000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb I am willing to give it up if there is reason to believe it is unusual!","msgtype":"m.text"},"ts":1594153976000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb but fwiw I cannot find any definition of \"subclass\" anywhere for which \"it is a subclass, but not of anything\" would make sense","msgtype":"m.text"},"ts":1594154003000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i would be very surprised if muggle devs thought about the definition of subclass at all","msgtype":"m.text"},"ts":1594154006000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lack of heritage does affect things like replacements of heritage causing errors","msgtype":"m.text"},"ts":1594154013000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"strong disagree","msgtype":"m.text"},"ts":1594154017000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"everyday practitioners for sure think about class hierarchy?","msgtype":"m.text"},"ts":1594154031000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i believe they think their class either extends something or doesn't, and if it does, it requires super","msgtype":"m.text"},"ts":1594154035000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: yes but not in a strict \"this is a subclass\" sense","msgtype":"m.text"},"ts":1594154044000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't think devs think that","msgtype":"m.text"},"ts":1594154048000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm fine with the idea that people think about some hierarchy but i don't understand that having a heritage is seen as not being a subclass","msgtype":"m.text"},"ts":1594154066000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if anything they forget that it's not simple OOP","msgtype":"m.text"},"ts":1594154072000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck having a heritage _specifically from null_ is not being a subclass","msgtype":"m.text"},"ts":1594154083000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"you cannot be a subclass without having a superclass","msgtype":"m.text"},"ts":1594154091000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"rkirsling: sure but those people also aren't going to be extending null","msgtype":"m.text"},"ts":1594154094000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`null` is not a superclass","msgtype":"m.text"},"ts":1594154097000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1594154104000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ok so then maybe \"subclass\" is the wrong term","msgtype":"m.text"},"ts":1594154104000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if it has `extends`, the spec calls it a derived class","msgtype":"m.text"},"ts":1594154111000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: this past hour of argumentation has kinda hinged on your using a spec author's understanding of \"subclass\" and say that people don't understand it that way","msgtype":"m.text"},"ts":1594154114000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"derived classes require use of super","msgtype":"m.text"},"ts":1594154115000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: can you explain why it isn't something that can be derived from?","msgtype":"m.text"},"ts":1594154119000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"shu: hm, let me think about that one","msgtype":"m.text"},"ts":1594154124000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: to be clear I do think there is variation on the presence of a heritage that is attempting to be ignored, ljharb isn't purely alone","msgtype":"m.text"},"ts":1594154150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck I didn't say \"cannot be derived from\", I said \"is not a class\"","msgtype":"m.text"},"ts":1594154163000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"*is not a superclass","msgtype":"m.text"},"ts":1594154172000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"the reason there being, it is not a class","msgtype":"m.text"},"ts":1594154177000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"the reason for that being that it... isn't... a class? I don't know how to justify that onoe","msgtype":"m.text"},"ts":1594154191000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb: all i'm saying is almost all practitioners, by my observation and experience, certainly think about subclassing. what they don't think about is what you defined \"subclass\" to mean, so yes i agree we should stop using \"subclass\" in this argument at least.","msgtype":"m.text"},"ts":1594154200000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bakkot_: if a class is derived from something it isn't a subclass?","msgtype":"m.text"},"ts":1594154244000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"maybe like \"explicit extension\"","msgtype":"m.text"},"ts":1594154250000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in particular i think the claim that `extends` is purely syntactic is false","msgtype":"m.text"},"ts":1594154276000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`class X { constructor() { this.x = 'x'; } }; X.__proto__ = function Y() {this.y = 'y';}; new X();`","msgtype":"m.text"},"ts":1594154279000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"vs","msgtype":"m.text"},"ts":1594154281000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`class X extends Object { constructor() { super(); this.x = 'x'; } }; X.__proto__ = function Y() {this.y = 'y';}; new X();`","msgtype":"m.text"},"ts":1594154289000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that feels like a pretty compelling example to me","msgtype":"m.text"},"ts":1594154340000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: what is that trying to show","msgtype":"m.text"},"ts":1594154347000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: one of those does add this.y, one does not","msgtype":"m.text"},"ts":1594154391000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"both have a class heritage value of Object","msgtype":"m.text"},"ts":1594154403000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: in the spirit of avoiding the term \"subclass\", I would regard a class which `extends null` as sitting at the top of its class hierarchy, the same way that a class which does not `extend` anything does","msgtype":"m.text"},"ts":1594154418000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"since it sits at the top of its class hierarchy, I would be surprised if I had to call `super()`","msgtype":"m.text"},"ts":1594154433000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: i am unclear on *why* it is at the top","msgtype":"m.text"},"ts":1594154464000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck uh","msgtype":"m.text"},"ts":1594154487000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"there is no possible thing which could be above it?","msgtype":"m.text"},"ts":1594154494000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"null seems to be at the top","msgtype":"m.text"},"ts":1594154496000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"null is not a class","msgtype":"m.text"},"ts":1594154500000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"null cannot be in a class heirarchy","msgtype":"m.text"},"ts":1594154505000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i mean, the hierarchy is between [[Prototype]] values, which are all objects or null","msgtype":"m.text"},"ts":1594154521000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"LSV cannot hold for `null` and any `class` under almost any circumstances","msgtype":"m.text"},"ts":1594154524000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so null is part of a prototype hierarchy - at the top","msgtype":"m.text"},"ts":1594154529000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*LSP","msgtype":"m.text"},"ts":1594154530000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i mean, we can argue it isn't a class but that class does have a heritage","msgtype":"m.text"},"ts":1594154552000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a \"class hierarchy\" is just a combination of the constructor's prototype hierarchy, and its prototype object (and its prototype hierarchy)","msgtype":"m.text"},"ts":1594154560000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no! that's the core confusion i think","msgtype":"m.text"},"ts":1594154568000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb strong disagree","msgtype":"m.text"},"ts":1594154574000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"do ES5 constructors have a class hierarchy?","msgtype":"m.text"},"ts":1594154597000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"class hierarchy is a concept which exists independent of language","msgtype":"m.text"},"ts":1594154599000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"it is a concept prior to concrete programming languages","msgtype":"m.text"},"ts":1594154608000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1594154611000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's a programmer's \"theory\" of a class hierarchy, it's the mental map of building blocks of a program and how things are divided up","msgtype":"m.text"},"ts":1594154612000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb and bradleymeck instead are arguing from purely mechanical grounds of what JS happens to do and how that is inconsistent","msgtype":"m.text"},"ts":1594154629000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because JS is a dynamic language, inconsistencies and weirdness will invariably be possible","msgtype":"m.text"},"ts":1594154644000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i don't care what you call it, it can be a base class but it has a heritage","msgtype":"m.text"},"ts":1594154648000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1594154652000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bakkot_: then \"extends null\" as a concept just doesn't fit into your concept of class hierarchy imo","msgtype":"m.text"},"ts":1594154671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: to be clear i don't care if null is considered outside the heirarchy","msgtype":"m.text"},"ts":1594154679000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb yes, that is my claim","msgtype":"m.text"},"ts":1594154687000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"even the existence of a null [[Prototype]] doesn't seem like it's part of this class hierarchy concept","msgtype":"m.text"},"ts":1594154689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which would mean it's not an appropriate concept to apply to JS","msgtype":"m.text"},"ts":1594154697000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb disagree","msgtype":"m.text"},"ts":1594154702000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i simply don't understand this logic that heritage must match a class hierarchy and be a direct call of some kind to it","msgtype":"m.text"},"ts":1594154720000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't think every feature in a language needs to be represented perfectly by some concept for that concept to be useful","msgtype":"m.text"},"ts":1594154735000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"both of those seem to be invalidated both at runtime and to some extent at parse time","msgtype":"m.text"},"ts":1594154740000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i don't think that's the logic","msgtype":"m.text"},"ts":1594154744000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bakkot_: nor does a useful concept need to constrain every aspect of the language's design","msgtype":"m.text"},"ts":1594154751000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right","msgtype":"m.text"},"ts":1594154759000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"but","msgtype":"m.text"},"ts":1594154759000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"shu: what is the logic? avoid using subclass","msgtype":"m.text"},"ts":1594154762000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that does not mean you are free to ignore it","msgtype":"m.text"},"ts":1594154764000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck I don't know what you mean by \"heritage\", I am realizing","msgtype":"m.text"},"ts":1594154794000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck: the logic is that *unless* you do edge casey things like runtime __proto__ mutation, not requiring super() in `extends null` classes matches up with the general OOP model of class hierarchies","msgtype":"m.text"},"ts":1594154799000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: and that is a valuable property","msgtype":"m.text"},"ts":1594154816000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bakkot_: “not constrain” definitely means “free to ignore” :-p","msgtype":"m.text"},"ts":1594154821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: can you explain what we get for that property?","msgtype":"m.text"},"ts":1594154829000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: that is also just not true!","msgtype":"m.text"},"ts":1594154830000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: we get a happy path for common usage? the normal 80-20 thing","msgtype":"m.text"},"ts":1594154845000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it doesn’t mean it’s wise to ignore it ofc","msgtype":"m.text"},"ts":1594154846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: can you explain that more","msgtype":"m.text"},"ts":1594154853000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why is not using super() the explicit happy path","msgtype":"m.text"},"ts":1594154866000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like, what does that mean","msgtype":"m.text"},"ts":1594154878000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck the happy class is not that you are avoiding `super`","msgtype":"m.text"},"ts":1594154883000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"its that your usage of the language matches the concepts in your head","msgtype":"m.text"},"ts":1594154889000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"in particular, that a class which extends `null` is at the top of its class heirarchy","msgtype":"m.text"},"ts":1594154904000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck: like, when i'm programming in an OO way, i think about classes and how i organize my code, right?","msgtype":"m.text"},"ts":1594154912000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: i don't start by first saying \"let me think of the full semantics of JS's classes\"","msgtype":"m.text"},"ts":1594154926000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think about organization","msgtype":"m.text"},"ts":1594154929000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bakkot_: i don't understand that claim, i don't have a concrete mental model i try to force all my programming into","msgtype":"m.text"},"ts":1594154937000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this isn't concrete","msgtype":"m.text"},"ts":1594154945000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I will let shu say the thing I would say","msgtype":"m.text"},"ts":1594154950000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"it's like a rough organizational idea?","msgtype":"m.text"},"ts":1594154951000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: ok, and having super() would break it, and in a way that isn't easily learned/debugged?","msgtype":"m.text"},"ts":1594154970000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what about it breaks the model","msgtype":"m.text"},"ts":1594154986000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: oh i don't know about the ease claim, it seems easy enough to fix","msgtype":"m.text"},"ts":1594154990000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: it's not a binary break-or-not-break","msgtype":"m.text"},"ts":1594155018000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it makes the mapping more difficult","msgtype":"m.text"},"ts":1594155022000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what would it mean if a base class is calling super()","msgtype":"m.text"},"ts":1594155024000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"from your model","msgtype":"m.text"},"ts":1594155029000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't know what it would mean","msgtype":"m.text"},"ts":1594155040000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck it would not mean anything","msgtype":"m.text"},"ts":1594155047000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"`super()` is a thing for subclasses to do","msgtype":"m.text"},"ts":1594155055000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: it would be non-sensical or something else?","msgtype":"m.text"},"ts":1594155063000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"in particular, for them to invoke their superclass","msgtype":"m.text"},"ts":1594155064000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: and if they don't have superclass?","msgtype":"m.text"},"ts":1594155072000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck this question is like \"what would it mean if orange was a sound\"","msgtype":"m.text"},"ts":1594155086000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"to my recollection abstract superclasses etc might be ellided in ye olden days","msgtype":"m.text"},"ts":1594155087000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: i'd disagree","msgtype":"m.text"},"ts":1594155094000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: hold on, the \"if they don't have a superclass\" is the turning point where we diverge, i think","msgtype":"m.text"},"ts":1594155105000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: *you*, as a JS expert, know that the congruence i want for `super` in my hypothetical is _already not true_","msgtype":"m.text"},"ts":1594155127000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: the contention is that the cases where it is already not true are, i think, rare, like runtime prototype mutation","msgtype":"m.text"},"ts":1594155149000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i'm thinking of me in 11th grade learning Java","msgtype":"m.text"},"ts":1594155158000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: ok what about this: what if `super()` always throws when the superclassish is null, but `super?.()` doesn't throw when it's null (but does set up the `this`)","msgtype":"m.text"},"ts":1594155158000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: would that break you and shu's mental model?","msgtype":"m.text"},"ts":1594155166000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: a lot of what you are stating is really confusing, just like polymorphism is confusing, let alone things like multiple inheritance","msgtype":"m.text"},"ts":1594155186000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but we are familiar with topics here","msgtype":"m.text"},"ts":1594155194000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait `super?.()` doesn't (and shouldn't) exist since it's a keyword though","msgtype":"m.text"},"ts":1594155224000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb again, my core claim is that a class which extends `null` should not need to call `super`; I am somewhat less worried about what happens in other cases","msgtype":"m.text"},"ts":1594155226000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i was not ready for `super?.()`","msgtype":"m.text"},"ts":1594155235000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't hate it","msgtype":"m.text"},"ts":1594155241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: it could certainly be permitted","msgtype":"m.text"},"ts":1594155241000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: single inheritance is confusing?","msgtype":"m.text"},"ts":1594155260000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: for me it was","msgtype":"m.text"},"ts":1594155268000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to some extent... is?","msgtype":"m.text"},"ts":1594155275000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck in 11th grade Java, you would not call `super()` in a class which does not have a superclass","msgtype":"m.text"},"ts":1594155277000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"`super()` is a thing for subclasses to do, and a subclass cannot not-have a superclass","msgtype":"m.text"},"ts":1594155292000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: that was learned and still seems to be completely fine if i had been forced to call it","msgtype":"m.text"},"ts":1594155302000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why would it be completely fine though?","msgtype":"m.text"},"ts":1594155321000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it wasn't inherent in the fact that a class inherited","msgtype":"m.text"},"ts":1594155323000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it refers to something nonexistent","msgtype":"m.text"},"ts":1594155327000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"couldn't you argue if you don't specify `extends` it defaults to Objcet","msgtype":"m.text"},"ts":1594155335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: why does super() have to do something?","msgtype":"m.text"},"ts":1594155337000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"thats really a crux of the argument","msgtype":"m.text"},"ts":1594155349000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if super() doesn't need to do anything... why do you have to avoid calling it","msgtype":"m.text"},"ts":1594155364000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck here we are arguing about whether `super` should be required; if it is required. it definitely does do something","msgtype":"m.text"},"ts":1594155377000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"devsnek: yeah that's my view but I guess it's messy since extends syntactically requires super","msgtype":"m.text"},"ts":1594155385000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bakkot_: why","msgtype":"m.text"},"ts":1594155386000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what might be better a question","msgtype":"m.text"},"ts":1594155406000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: a no-op is still a something","msgtype":"m.text"},"ts":1594155414000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck um. how can it be required and also not do something? at the very least \"make the class work\"? that is a thing that it has done.","msgtype":"m.text"},"ts":1594155416000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i think i am going to do some reviews","msgtype":"m.text"},"ts":1594155486000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I understand that super is _more_ than just a function call but I don't buy that it's ever not one, just because the function is an implicit no-op","msgtype":"m.text"},"ts":1594155507000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bakkot_: to clarify a bit, i don't see a no-op as being a claim that it does something and equating lack of extends and extends Object to be very consistent","msgtype":"m.text"},"ts":1594155516000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck I am not dead-set against it being a no-op. what I am against is it being required.","msgtype":"m.text"},"ts":1594155544000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"also, like I said, I don't really care about the `extends Object` case and am happy to explore whatever semantics there would make people happy","msgtype":"m.text"},"ts":1594155567000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"are there use counters for `extends null`","msgtype":"m.text"},"ts":1594155586000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot_: I'm very unclear on why it must not be required","msgtype":"m.text"},"ts":1594155590000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: there was at one point, but it is so error ridden it was terribly low when aklein did it","msgtype":"m.text"},"ts":1594155614000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek `extends null` currently results in a thing which is impossible to instantiate, which is almost certainly not the thing anyone wants","msgtype":"m.text"},"ts":1594155625000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck well, I don't know if I can say it any more clearly than it was said above, but I'll give it one more shot.","msgtype":"m.text"},"ts":1594155643000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i'm thinking we might just throw if its null","msgtype":"m.text"},"ts":1594155657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"remove the special case for null rather","msgtype":"m.text"},"ts":1594155665000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it's not really a special case right now tho, is it?","msgtype":"m.text"},"ts":1594155693000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it is","msgtype":"m.text"},"ts":1594155699000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot_: thanks, I'm just very confused on what this class heir-achy idea in some circle i've not participated in is being broken by :(","msgtype":"m.text"},"ts":1594155702000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb: ClassDefinitionEvaluation 5.e","msgtype":"m.text"},"ts":1594155731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i never had this mandate in my college that base classes must never do some sort of super, just that they don't","msgtype":"m.text"},"ts":1594155775000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"they must not inherit","msgtype":"m.text"},"ts":1594155787000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the easy way out here would be to specify that Function.prototype returns Object.create(null) when [[Construct]]ed","msgtype":"m.text"},"ts":1594155790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"definitely cannot do that","msgtype":"m.text"},"ts":1594155837000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why not","msgtype":"m.text"},"ts":1594155844000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i've certainly seen code that uses new Function","msgtype":"m.text"},"ts":1594155862000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh you mean the proto itself","msgtype":"m.text"},"ts":1594155872000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1594155874000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mmm","msgtype":"m.text"},"ts":1594155875000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"odd","msgtype":"m.text"},"ts":1594155878000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"when you do `class extends null`","msgtype":"m.text"},"ts":1594155883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the parent is `Function.prototype`","msgtype":"m.text"},"ts":1594155889000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is why it can't be instantiated","msgtype":"m.text"},"ts":1594155896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you did that \"easy way out\", wouldn't one expect `instanceof Function.prototype` to be true?","msgtype":"m.text"},"ts":1594155964000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not inherently?","msgtype":"m.text"},"ts":1594155976000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the result of `new X` doesn't have to fulfill `instanceof X`","msgtype":"m.text"},"ts":1594155987000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i mean builtin protos are weird already, some are instances of their function, some are regular objects, some have the brand of their function","msgtype":"m.text"},"ts":1594156028000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i feel like that's still an expectation people would hold in the common case","msgtype":"m.text"},"ts":1594156053000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if we're going with \"null isn't part of the class hierarchy\" as an expectation","msgtype":"m.text"},"ts":1594156067000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think all the reasonable alternatives are listed in the pr somewhere","msgtype":"m.text"},"ts":1594156137000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck sorry, I had a meeting before I could finish writing this up","msgtype":"m.text"},"ts":1594160794000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"anywhere here: https://gist.github.com/bakkot/d931e4d67a4d44ff79261d3699621cc8","msgtype":"m.text"},"ts":1594160867000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"these are all things that I think, but also concretely I think they correctly describe the intuitions of most people who use `class` in languages like JS, Java, python, C++, etc","msgtype":"m.text"},"ts":1594160929000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: 💯","msgtype":"m.text"},"ts":1594161451000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]