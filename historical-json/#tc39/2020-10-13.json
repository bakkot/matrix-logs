[
{"content":{"body":"jmdyck: if you get a moment, could you run ecmaspeak on 2007 one last time?","msgtype":"m.text"},"ts":1602559586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just finished rebasing it and addressing review comments, and am hoping to land it on Wednesday","msgtype":"m.text"},"ts":1602559601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1602559708000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(have to rebase the 2007-specific ecmaspeak branch to master)","msgtype":"m.text"},"ts":1602560459000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, got some parse errors.","msgtype":"m.text"},"ts":1602560835000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"Let _S_ be the String value whose code units are, in order, the elements in CodePointToUTF16CodeUnits(_V_).\"","msgtype":"m.text"},"ts":1602560902000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"error on \"in order\"","msgtype":"m.text"},"ts":1602560921000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(Bakkot)","msgtype":"m.text"},"ts":1602560994000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hiccup in merge of 2142?","msgtype":"m.text"},"ts":1602561062000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, yup, rebase ssue","msgtype":"m.text"},"ts":1602561291000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1602561391000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Rest of the parse errors might be just legitimate changes in wording for which I need to change grammar","msgtype":"m.text"},"ts":1602561437000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"will take me a ew minutes to work through","msgtype":"m.text"},"ts":1602561455000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"s/ew/few/","msgtype":"m.text"},"ts":1602561502000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, here's one: \"such that j &lt; _searchLen_\" s/j/_j_/","msgtype":"m.text"},"ts":1602561748000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"two hits for that","msgtype":"m.text"},"ts":1602561771000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1602561870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since you replaced wording like \"is greater than or equal to\" with symbols, you might be interested in removing 2 remaining:","msgtype":"m.text"},"ts":1602562420000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"If the length of _S_ is at least 2\"","msgtype":"m.text"},"ts":1602562441000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"integral Number value that is not greater than _n_\" (well, subordinate clause might be tough)","msgtype":"m.text"},"ts":1602562509000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"such that _k_ + _searchLen_ is not greater than _len_\"","msgtype":"m.text"},"ts":1602562528000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"first two are nicer as prose, I think, since one side is prose rather than a math-y expression","msgtype":"m.text"},"ts":1602562670000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed the third one (as `&le;`)","msgtype":"m.text"},"ts":1602562682000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1602562691000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: ok that's it for syntax stuff. That leaves the type analysis, but it's getting late here.","msgtype":"m.text"},"ts":1602563157000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1602563164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"won't be ready to merge until Wednesday afternoon at the earliest anyway","msgtype":"m.text"},"ts":1602563217000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(that is, ~42 hours from now)","msgtype":"m.text"},"ts":1602563231000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: in %TypedArray%.prototype.set( _typedArray_ [ , _offset_ ] ), in \"If _target_.[[ContentType]] is not equal to _typedArray_.[[ContentType]]\", 2007 changes \"is not equal to\" to \"&ne;\". But I'm thinking \"&ne;\" should be reserved for comparing numeric values, whereas this is comparing two types. Maybe change to \"is not the same as\" (for which there's some precedent).","msgtype":"m.text"},"ts":1602599390000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Similarly in `_TypedArray_ ( _typedArray_ )`","msgtype":"m.text"},"ts":1602599438000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and `TypedArraySpeciesCreate`","msgtype":"m.text"},"ts":1602599463000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"[actually, not two types, but two spec values that represent/refer to types]","msgtype":"m.text"},"ts":1602599938000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Also with &ne;, is it okay for one of the operands to be NaN? If not, here's a couple places:","msgtype":"m.text"},"ts":1602601413000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ArraySetLength: `_newLen_ &ne; _numberLen_` (_numberLen_ might be NaN)","msgtype":"m.text"},"ts":1602601491000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Array(_len_): `_intLen_ &ne; _len_` (_len_ might be NaN)","msgtype":"m.text"},"ts":1602601586000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1602602395000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Function.prototype.bind: if _targetLenAsInt_ can be infinite, then `_targetLenAsInt_ - _argCount_` is dubious","msgtype":"m.text"},"ts":1602602594000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"FlattenIntoArray: _depth_ can be +infin, yet `_depth_ - 1`","msgtype":"m.text"},"ts":1602603155000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: given https://github.com/tc39/ecma262/issues/2178#issuecomment-701676969, do you want to be alerted to Set-on-parameter or Set-that-changes-type?","msgtype":"m.text"},"ts":1602603847000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(or defer that to a later PR?)","msgtype":"m.text"},"ts":1602603989000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"In MakeDate, at step 2, we know that _day_ is finite and _time_ is finite (and msPerDay is certainly finite), so step 3 `If _tv_ is not finite` is to catch the possibility that _day_ and/or _time_ is almost-infinity, so the result of the Number-arithmetic is +/- infinity?","msgtype":"m.text"},"ts":1602607441000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Should the preamble for Day specify *finite* time value? Otherwise you could be dividing NaN by msPerDay.","msgtype":"m.text"},"ts":1602608444000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and similarly for other ops. Or is that a different PR?","msgtype":"m.text"},"ts":1602608496000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck > I'm thinking \"&ne;\" should be reserved for comparing numeric values","msgtype":"m.text"},"ts":1602610752000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm fine with using it for arbitrary values, but for types (or values which represent types) \"is not the same as\" probably reads better; will change those","msgtype":"m.text"},"ts":1602610779000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> Also with &ne;, is it okay for one of the operands to be NaN?","msgtype":"m.text"},"ts":1602610787000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm. I think it's OK because this is mathematical equality, but maybe it would be better to use prose to avoid the ambiguity. I'll run it by the other editors","msgtype":"m.text"},"ts":1602611022000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> Should the preamble for Day specify *finite* time value? Otherwise you could be dividing NaN by msPerDay","msgtype":"m.text"},"ts":1602611030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's another PR; some of those changes imply normative changes to setHours (etc), and I added the topic too late at the last meeting to get consensus.","msgtype":"m.text"},"ts":1602611105000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(not just a matter of changing the preamble, but also ensuring that calls respect the finiteness)","msgtype":"m.text"},"ts":1602611119000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1602611124000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"some of the calls don't, and the decision about how to guard them is normative","msgtype":"m.text"},"ts":1602611139000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and that's the bit I didn't get consensus for","msgtype":"m.text"},"ts":1602611145000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1602611150000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so we're going to leave it incoherent for now","msgtype":"m.text"},"ts":1602611157000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"will change `=` and `&ne;` to \"is the same value as\" and \"is not the same value as\" when one operand might be NaN","msgtype":"m.text"},"ts":1602611456000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck is the above list of places that happens complete? if not, do you have a list of such places on hand?","msgtype":"m.text"},"ts":1602611475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ArraySetLength and Array(_len_) are the only valid cases it currently finds.","msgtype":"m.text"},"ts":1602612624000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(It also finds some false positives, because it's not that smart.)","msgtype":"m.text"},"ts":1602612648000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"if the false positives are places which are comparing Numbers but they're definitely not NaN, I'd take those too","msgtype":"m.text"},"ts":1602612710000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably better to change all of them, rather than requiring the reader to understand the NaN distinction","msgtype":"m.text"},"ts":1602612726000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"change all places where comparing Numbers?","msgtype":"m.text"},"ts":1602612771000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"comparing using `=` or `&ne;`, yes","msgtype":"m.text"},"ts":1602612849000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, hm.","msgtype":"m.text"},"ts":1602612922000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"doesn't matter much, so don't bother if it's a bunch of work; we'll sort it out eventually","msgtype":"m.text"},"ts":1602612985000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Looks like those were the only two cases of `Number &ne; Number` or `Number = Number`","msgtype":"m.text"},"ts":1602613160000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I wouldn't have guessed there'd be so few, so I maybe don't trust the code.","msgtype":"m.text"},"ts":1602613212000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(The false positives for comparison-involving-NaN were using &lt;)","msgtype":"m.text"},"ts":1602613327000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it's plausible to me; we try to keep comparisons in the realm of reals where practical","msgtype":"m.text"},"ts":1602613495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1602613541000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"two commits; other one fixing the finiteness checks","msgtype":"m.text"},"ts":1602613547000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(yay, I made 2 of the false positives go away)","msgtype":"m.text"},"ts":1602613647000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"There's ~40 comparisons between Numbers that don't use = or &ne;.","msgtype":"m.text"},"ts":1602614408000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"because they're `>` or `<` or `≥` or `≤` instead?","msgtype":"m.text"},"ts":1602614503000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also, re: `[[ContentType]]`, since they're spec enums I'm content to use `=` rather than \"same value\"","msgtype":"m.text"},"ts":1602614600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"got some syntax errors, stand by.","msgtype":"m.text"},"ts":1602614766000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(yes re other comparators)","msgtype":"m.text"},"ts":1602614795000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, you're saying \"not the same value as\", whereas existing syntax is \"not the same as\"","msgtype":"m.text"},"ts":1602614952000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1602615052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think I like \"same as\" for comparing types or environments but \"same value as\" for comparing numbers","msgtype":"m.text"},"ts":1602615069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which I think is what it is","msgtype":"m.text"},"ts":1602615075000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"could be.","msgtype":"m.text"},"ts":1602615089000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, managed to get stamps from the other editors a day early","msgtype":"m.text"},"ts":1602615147000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gonna land it","msgtype":"m.text"},"ts":1602615151000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Function.prototype.bind has \"Else, if\", but we don't put a comma there","msgtype":"m.text"},"ts":1602615161000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh whoops, thanks","msgtype":"m.text"},"ts":1602615167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"could've sworn I linted for that","msgtype":"m.text"},"ts":1602615189000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"guess not","msgtype":"m.text"},"ts":1602615190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Let me see if anything else comes up.","msgtype":"m.text"},"ts":1602615202000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1602615262000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(syntax passes)","msgtype":"m.text"},"ts":1602615345000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sweet","msgtype":"m.text"},"ts":1602615523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, so the \"comparison involving NaN\" are gone, and also \"Number comparisons involving = or &ne;\"","msgtype":"m.text"},"ts":1602615653000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also the arithmetic-on-infinity in bind and FlattenIntoArray","msgtype":"m.text"},"ts":1602615814000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so looks good","msgtype":"m.text"},"ts":1602615971000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"so\"?","msgtype":"m.text"},"ts":1602616055000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, it looks good.","msgtype":"m.text"},"ts":1602616067000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, great","msgtype":"m.text"},"ts":1602616080000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gonna land it!","msgtype":"m.text"},"ts":1602616084000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"whee","msgtype":"m.text"},"ts":1602616090000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"many many thanks for your checks","msgtype":"m.text"},"ts":1602616098000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you're welcome. glad to be of service.","msgtype":"m.text"},"ts":1602616114000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"landed","msgtype":"m.text"},"ts":1602617370000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"phew","msgtype":"m.text"},"ts":1602617372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: was it decided that losing the id 'sec-isnonnegativeinteger' was acceptable?","msgtype":"m.text"},"ts":1602624178000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1602624295000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1602624301000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: btw https://github.com/tc39/ecma262/pull/2176 now (of course) needs a rebase; I am happy to take care of it if you'd like. I think it can land as soon as that's done.","msgtype":"m.text"},"ts":1602624439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"feel free to squash it down to a single commit before rebasing if that's easier; the separate commits were helpful for review but it's now reviewed","msgtype":"m.text"},"ts":1602624480000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right, will do.","msgtype":"m.text"},"ts":1602624492000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"y","msgtype":"m.text"},"ts":1602624676000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]