[
{"content":{"body":"TabAtkins I for one want node to participate in WebSpecs and work towards better support. One of the biggest challenges comes down to small platform differences that we can't adopt and remain spec compliant (e.g. whatwg streams, event pointer, assuming a single client utilizing the runtime (instead of multi tenant)","msgtype":"m.text"},"ts":1569558049000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"Only so many hours in the day but I would be particularly interested in trying to see what types of changes we could get upstreamed so we could have a spec compliant fetch (for example)","msgtype":"m.text"},"ts":1569558082000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"part of the separate repo is to work out major implementation details without making lots of noise on core. We did this for the new ESM implementation and for http2. Currently being done right now for wasi and QUIC","msgtype":"m.text"},"ts":1569558197000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"yeah I didn't mean to imply that's the only reason there would be a separate repo","msgtype":"m.text"},"ts":1569558303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm loving the freedom of nodejs/repl","msgtype":"m.text"},"ts":1569558323000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What seems a bit concerning is that it doesn't look like many of these repos are in the process of preparing to get merged","msgtype":"m.text"},"ts":1569558387000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"or is that not a fair outlook?","msgtype":"m.text"},"ts":1569558403000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"depends on the time available to the people running them","msgtype":"m.text"},"ts":1569558650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and not all of them intend to be merged","msgtype":"m.text"},"ts":1569558657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TimothyGu I mentioned the ones that are more recent work. AFAIK both QUIC and wasi intead to land, those technologies are still fairly new. I have high confidence with the folks working on webcrypto as well","msgtype":"m.text"},"ts":1569566300000,"senderName":"MylesBorins","senderId":"MylesBorins@irc"},
{"content":{"body":"hello everybody ! I'm looking in to the process of creating a proposal for tc39. I've read that I need a champion before I can start anything, so here I am, searching for a kind soul to champion my proposal !","msgtype":"m.text"},"ts":1569595980000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: it might help to explain the proposal","msgtype":"m.text"},"ts":1569596468000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: sure ! i haven't come across any proposal around the idea of catching by error type (seen for instance in bluebird promises). I think such a feature would be both extremely powerful for developers and simpler than other proposals currently in the works","msgtype":"m.text"},"ts":1569596623000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: a few attempts at that have been brought up in the past. es-discuss has some stuff if you search for it. I believe in general the question that always seems to come up is why to not use if statements instead, a variety of topics come up such as the \"default\" catch vs conditional ones (see the confusion of \"switch\" default case)","msgtype":"m.text"},"ts":1569596814000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there are a lot of different ways that the ecosystem brands things","msgtype":"m.text"},"ts":1569596965000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so it would be difficult to choose one for the syntax","msgtype":"m.text"},"ts":1569596977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: it is true that that feature could be seen as just a different way of using ifs. But with the way the language is evolving with optional catch binding and finally, i fell like a structure handling multiple catches based on type would be a natural evolution, for both try..catch and promises","msgtype":"m.text"},"ts":1569597282000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: like devsnek said, it is very hard to make a generic mechanism that doesn't just devolve into an if/switch","msgtype":"m.text"},"ts":1569597322000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"since things like `instanceof` are not reliable cross realm / may throw if they get the wrong operand","msgtype":"m.text"},"ts":1569597343000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the question then becomes, what unique value do we get by adding something that isn't doable with if/switch","msgtype":"m.text"},"ts":1569597426000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: wouldn't such a feature be useful even if it devolves into an if/switch ? i feel (but that's just an opinion) that the language is evolving to make room for this, and would create better code structure and clarity","msgtype":"m.text"},"ts":1569597527000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: what does it give developers over the if/switch?","msgtype":"m.text"},"ts":1569597562000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i have to say i did not know about the issues of `instanceof`, could you maybe clarify what they are ?","msgtype":"m.text"},"ts":1569597581000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"`try {} catch (e) {} catch (e is ...) {}` would be confusing in general IMO","msgtype":"m.text"},"ts":1569597608000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"pathiery: `[] instanceof Array_from_other_frame` is false","msgtype":"m.text"},"ts":1569597635000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i thought of something closer to `try {} catch (ErrorType1, e) {} catch (ErrorType2, e) {} catch (e) {}`","msgtype":"m.text"},"ts":1569597704000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: and how would those types be checked","msgtype":"m.text"},"ts":1569597790000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i believe, i would make code structure and readability better, a little like optional chaining mainly simplifies developer work by removing the need to nest ternaries/ifs","msgtype":"m.text"},"ts":1569597815000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"it is just a lot of complexity to learn vs just having ifs","msgtype":"m.text"},"ts":1569597817000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it might increase readability a little but it adds a lot of complexity for learning","msgtype":"m.text"},"ts":1569597836000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it doesn't significantly reduce code size like optional stuff did","msgtype":"m.text"},"ts":1569597860000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that is absolutely true","msgtype":"m.text"},"ts":1569597942000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"i honestly did not know about the limitations of `instanceof`","msgtype":"m.text"},"ts":1569597963000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"but concerning complexity, i think having an optional parameter in the `catch` would just build on top of the current features of the language, and resemble current librairies implementing such a feature","msgtype":"m.text"},"ts":1569598065000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"which should in turn not affect learning too much","msgtype":"m.text"},"ts":1569598093000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"bradleymeck: i am a noob here, but wouldn't checking the constructor instead of `instanceof` make this work across realms ?","msgtype":"m.text"},"ts":1569599365000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"i guess i should work on fleshing out the proposal fully and adress it's issues, then look for a champion, seeing that it is not a straightforward proposal","msgtype":"m.text"},"ts":1569599429000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"pathiery: i would suggest writing it as a followup to the pattern matching proposal.","msgtype":"m.text"},"ts":1569599512000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that does sound like the correct way to go about this","msgtype":"m.text"},"ts":1569599583000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"did you know in java you can just leave the catch block off entirely","msgtype":"m.text"},"ts":1569599697000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i will return with a drafted proposal based on the current version of the pattern matching one then","msgtype":"m.text"},"ts":1569599709000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"and then it just functions as a scope or whatever","msgtype":"m.text"},"ts":1569599711000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: does the error throw then ?","msgtype":"m.text"},"ts":1569599727000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1569599731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haha ok","msgtype":"m.text"},"ts":1569599739000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"but the interesting part was `try (X = y) {}`","msgtype":"m.text"},"ts":1569599742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thank you all for your help, have a good day :)","msgtype":"m.text"},"ts":1569599825000,"senderName":"pathiery","senderId":"pathiery@irc"},
{"content":{"body":"why did we ban defaulting in catch?","msgtype":"m.text"},"ts":1569601724000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this test is failing when run with test262","msgtype":"m.text"},"ts":1569602863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/test262/blob/master/test/built-ins/Array/prototype/flatMap/array-like-objects-nested.js","msgtype":"m.text"},"ts":1569602864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but works fine when run directly","msgtype":"m.text"},"ts":1569602868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think its the last assert","msgtype":"m.text"},"ts":1569602917000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: cc","msgtype":"m.text"},"ts":1569602934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh hmm","msgtype":"m.text"},"ts":1569602955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i forgot the lines are messed up cuz i concat the files lol","msgtype":"m.text"},"ts":1569602970000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but this is odd","msgtype":"m.text"},"ts":1569603462000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not really sure what's causing this","msgtype":"m.text"},"ts":1569603918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: i would guess because it slipped people’s mind that you can throw undefined. Seems like a reasonable thing to me to add tho!","msgtype":"m.text"},"ts":1569604127000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll investigate more later","msgtype":"m.text"},"ts":1569604141000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i suspect it might have something to do with expanding the grammar of cacth params","msgtype":"m.text"},"ts":1569604170000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there’s also an open issue on the spec about that i think","msgtype":"m.text"},"ts":1569604207000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"assert._formatValue is causing the test to fail","msgtype":"m.text"},"ts":1569604279000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mfw","msgtype":"m.text"},"ts":1569604284000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1126","msgtype":"m.text"},"ts":1569604666000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yea, seems like this was looked at semi-recently","msgtype":"m.text"},"ts":1569604675000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: https://github.com/tc39/test262/pull/2162 are the tests for it","msgtype":"m.text"},"ts":1569605413000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: if those get written in time, i'll put it on the agenda","msgtype":"m.text"},"ts":1569605424000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i won't have time","msgtype":"m.text"},"ts":1569605520000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i mean i'll present it","msgtype":"m.text"},"ts":1569605545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and chicoxyzzy has already begun the tests, and leobalter is helping them","msgtype":"m.text"},"ts":1569605562000,"senderName":"ljharb","senderId":"ljharb@irc"}
]