[
{"content":{"body":"does test262 cover `for (a = b of whatever) {}`","msgtype":"m.text"},"ts":1597975703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"test262 does not have tests for things which don't match the grammar at all, in most cases","msgtype":"m.text"},"ts":1597976629000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though I guess I did add some for `for (a = b in whatever)`, as part of https://github.com/tc39/ecma262/pull/614","msgtype":"m.text"},"ts":1597976716000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"seems like a good candidate though","msgtype":"m.text"},"ts":1597976723000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"given how it has to be implemented","msgtype":"m.text"},"ts":1597976742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1597976774000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you have to parse as expression and then validate that it's a lhsexpr","msgtype":"m.text"},"ts":1597976809000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: could you resolve 2007's merge conflicts again?","msgtype":"m.text"},"ts":1597978658000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck will do","msgtype":"m.text"},"ts":1597978664000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1597978669000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: done","msgtype":"m.text"},"ts":1597985296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol @ `eshost -se 'Object.defineProperties(function(){}, {length:{value:Infinity}}).bind(null, ...Array.from({length:990})).length'`... we can get 0 from some implementations, Infinity from others, and any integer in [0, 2**53-1] from XS. Reminds me of https://en.wikipedia.org/wiki/Riemann_series_theorem","msgtype":"m.text"},"ts":1598024028000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: and an assertion failure in engine262 :P","msgtype":"m.text"},"ts":1598024314000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"graal also does the weird number thing","msgtype":"m.text"},"ts":1598024325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Lol","msgtype":"m.text"},"ts":1598024335000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"https://gc.gy/65729338.png","msgtype":"m.text"},"ts":1598024339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Should make a list \"you don't know JS (ub version)\"","msgtype":"m.text"},"ts":1598024393000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"the GraalJS limit is a *fascinating* 0x8000_0000_0000_00C0","msgtype":"m.text"},"ts":1598024893000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"2**63 + 192","msgtype":"m.text"},"ts":1598025011000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"in other new, node's value inspect function is broken https://gc.gy/65730112.png","msgtype":"m.text"},"ts":1598025120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`eshost -se 'Object.defineProperties(function(){}, {length:{value:0x8000000000000480}}).bind().length'` is even more hilarious","msgtype":"m.text"},"ts":1598026872000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"... huh","msgtype":"m.text"},"ts":1598026905000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot or ljharb (or anyone interested). I'm trying to resolve a decade old issue, want in?","msgtype":"m.text"},"ts":1598027161000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron sure, what's up?","msgtype":"m.text"},"ts":1598027169000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"undeclared = (this.undeclared = 5);","msgtype":"m.text"},"ts":1598027179000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"In the top level global scope, in strict mode, that does what?","msgtype":"m.text"},"ts":1598027210000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"I would interpret that to evaluate `this.undeclared` first, then evaluate 5, then assign 5 to this.undeclared. Next, it would evaluate `undeclared` (which is now not-so-undeclared) then evaluate the rhs of = and assign it to `undeclared`","msgtype":"m.text"},"ts":1598027297000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron: the spec throws a reference error, most impls don't","msgtype":"m.text"},"ts":1598027297000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we just landed a tweak to the other side of this: https://github.com/tc39/ecma262/pull/2094","msgtype":"m.text"},"ts":1598027337000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think the implementations interpret it the way I have, with some assumption about the innermost assignment expression gets to go first","msgtype":"m.text"},"ts":1598027338000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"in particular because the lhs `undeclared` it resolved to Reference { env: undefined, name: 'undeclared' }` before the rhs is evaluated","msgtype":"m.text"},"ts":1598027341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but yeah my reading agrees with devsnek","msgtype":"m.text"},"ts":1598027375000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"see also https://github.com/tc39/ecma262/issues/467","msgtype":"m.text"},"ts":1598027379000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek that certainly makes more sense.","msgtype":"m.text"},"ts":1598027401000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Bakkot lol, one in the same.","msgtype":"m.text"},"ts":1598027441000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"I started here: https://github.com/tc39/test262/issues/1964","msgtype":"m.text"},"ts":1598027449000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Cool. I'm going to ship a test for this.","msgtype":"m.text"},"ts":1598027460000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1598027463000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"will the test say all the impls are wrong","msgtype":"m.text"},"ts":1598027501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"This was how I mapped it for test writing purposes","msgtype":"m.text"},"ts":1598027503000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"    Let rval be ? GetValue(rref).","msgtype":"m.text"},"ts":1598027507000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"    GetValue(V)","msgtype":"m.text"},"ts":1598027507000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"    If IsUnresolvableReference(V) is true, throw a ReferenceError exception.","msgtype":"m.text"},"ts":1598027507000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"devsnek yep","msgtype":"m.text"},"ts":1598027513000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"well except quickjs and engine262","msgtype":"m.text"},"ts":1598027566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fun stuff","msgtype":"m.text"},"ts":1598027571000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since web engines all agree, probably we should fix the spec for this one...","msgtype":"m.text"},"ts":1598027606000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i feel like the time we spend discussing stuff is inversely proportional to how much it gets used in the real world","msgtype":"m.text"},"ts":1598027609000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec is plausibly web-incompat","msgtype":"m.text"},"ts":1598027626000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Aha, sure enough: engine262","msgtype":"m.text"},"ts":1598027636000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"test262-harness --hostArgs='--features=all' --hostType=engine262 --hostPath=/usr/local/bin/engine262 test/language/identifier-resolution/assign-to-global-undefined.js","msgtype":"m.text"},"ts":1598027636000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Ran 1 tests","msgtype":"m.text"},"ts":1598027636000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"1 passed","msgtype":"m.text"},"ts":1598027636000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"0 failed","msgtype":"m.text"},"ts":1598027636000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Nice one","msgtype":"m.text"},"ts":1598027640000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"I could easily see someone doing something like `x = function(){ / *...* /; window.x = foo; }()`","msgtype":"m.text"},"ts":1598027663000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this seems difficult to fi","msgtype":"m.text"},"ts":1598027663000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fix*","msgtype":"m.text"},"ts":1598027665000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nah, it's pretty straightforward I think","msgtype":"m.text"},"ts":1598027684000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently: `If IsUnresolvableReference(V) is true, then: If IsStrictReference(V) is true, then: Throw a ReferenceError exception.`","msgtype":"m.text"},"ts":1598027702000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot I agree that we should fix the spec, but we should have a test that demonstrates the current expected behavior, then we have something to change test wise when the spec change is in agreement","msgtype":"m.text"},"ts":1598027702000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"this is only strict mode though","msgtype":"m.text"},"ts":1598027714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron yeah for sure, I am happy you are adding a test","msgtype":"m.text"},"ts":1598027716000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Rad.","msgtype":"m.text"},"ts":1598027720000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"does `x = function(){ window.x = foo }()` exist in strict mode","msgtype":"m.text"},"ts":1598027729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek part of the reason I expect it to is, babel's old `let` transform didn't implement TDZ and some major library ran into ~this error because of it","msgtype":"m.text"},"ts":1598027776000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"😢","msgtype":"m.text"},"ts":1598027803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where they had `let x = function(){ /* ... */ if (!x) x = 2 }()` or similar","msgtype":"m.text"},"ts":1598027803000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which works with a non-TDZ transform, breaks if you implement TDZ properly","msgtype":"m.text"},"ts":1598027821000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek anyway, for the fix, I think you just put a step after `IsStrictReference` where you also require it to not currently be a property of the global object","msgtype":"m.text"},"ts":1598027913000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sounds like an observable check","msgtype":"m.text"},"ts":1598027927000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"only in hosts for which the global object has observable property-existence checks, which is not typical","msgtype":"m.text"},"ts":1598027957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think node might in vm contexts lol","msgtype":"m.text"},"ts":1598027984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stares at Node","msgtype":"m.emote"},"ts":1598027985000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1598027994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you don't even need vm to see it","msgtype":"m.text"},"ts":1598027995000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"does node currently observe the check?","msgtype":"m.text"},"ts":1598028002000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can do... special things","msgtype":"m.text"},"ts":1598028003000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://gc.gy/65733031.png","msgtype":"m.text"},"ts":1598028032000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in such a context, what does `x = (x = 5);` do","msgtype":"m.text"},"ts":1598028097000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in strict mode?","msgtype":"m.text"},"ts":1598028131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1598028148000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"throws lmao","msgtype":"m.text"},"ts":1598028154000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/65733151.png","msgtype":"m.text"},"ts":1598028154000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is so cursed","msgtype":"m.text"},"ts":1598028165000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh wait i meant to do this.x","msgtype":"m.text"},"ts":1598028180000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, my bad, yes","msgtype":"m.text"},"ts":1598028188000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah ok doesn't throw","msgtype":"m.text"},"ts":1598028189000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we are safe for now","msgtype":"m.text"},"ts":1598028195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what if the check is observable?","msgtype":"m.text"},"ts":1598028201000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"has own property on the global object in there calls get on the context object","msgtype":"m.text"},"ts":1598028221000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for legacy v8 reasons","msgtype":"m.text"},"ts":1598028223000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess the real question is if anyone would really care","msgtype":"m.text"},"ts":1598028305000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: does it need to be an \"own\" check or can it be on the proto?","msgtype":"m.text"},"ts":1598028343000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"engines are unlikely to want to add overhead unless the overhead only applies in this obscure case","msgtype":"m.text"},"ts":1598028351000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bradleymeck hard to say because in most engines you cannot redefine the proto of the global object, I think","msgtype":"m.text"},"ts":1598028380000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah i think it only applies when you create a v8 global object using the v8 weird legacy c++ proxy thing","msgtype":"m.text"},"ts":1598028380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: nah, you can but not the global proxy in the web*","msgtype":"m.text"},"ts":1598028406000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bleh","msgtype":"m.text"},"ts":1598028439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"dunno, then","msgtype":"m.text"},"ts":1598028441000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it doesn't throw if it is on the proto","msgtype":"m.text"},"ts":1598028505000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to be clear `'use strict'; global.x = (x = 5)` should work right?","msgtype":"m.text"},"ts":1598028529000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1598028539000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`x = 5` will throw","msgtype":"m.text"},"ts":1598028544000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"'use strict'; let proto = {}; Object.setPrototypeOf(this, proto); x = (this.x = 0); y = (proto.y = 0);","msgtype":"m.text"},"ts":1598028635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"chakra: works","msgtype":"m.text"},"ts":1598028637000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"JSC/SM: can't set proto of global","msgtype":"m.text"},"ts":1598028644000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"V8: ReferenceError: y is not defined","msgtype":"m.text"},"ts":1598028655000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"NB _y_, not x","msgtype":"m.text"},"ts":1598028661000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it throws normally on the global in node / a data prop on the global, but not if there is a proto setter","msgtype":"m.text"},"ts":1598028661000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"data prop on the global proto*","msgtype":"m.text"},"ts":1598028686000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck so it looks like the answer to your question is, it really is just a check of the global, not its proto","msgtype":"m.text"},"ts":1598028715000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in V8","msgtype":"m.text"},"ts":1598028722000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but not in chakra","msgtype":"m.text"},"ts":1598028729000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the question is not posable in SM/JSC","msgtype":"m.text"},"ts":1598028740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wow there are exactly 71000 tests (not including annex b and intl)","msgtype":"m.text"},"ts":1598033894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"let's freeze test262","msgtype":"m.text"},"ts":1598034065000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"and hold PRs until we get the next round number","msgtype":"m.text"},"ts":1598034084000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"maybe open an exception if it's a prime","msgtype":"m.text"},"ts":1598034099000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1598034448000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: as long as the next PR adds 17 tests it's cool","msgtype":"m.text"},"ts":1598034571000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or 117, 217, 317, etc","msgtype":"m.text"},"ts":1598034612000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"palindrome-driven development","msgtype":"m.text"},"ts":1598034835000,"senderName":"ljharb","senderId":"ljharb@irc"}
]