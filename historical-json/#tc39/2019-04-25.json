[
{"content":{"body":"is it acceptable to spec generator methods using `GeneratorYield` instead of a prototype with a next method?","msgtype":"m.text"},"ts":1556200960000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that came out awkwardly","msgtype":"m.text"},"ts":1556201000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it acceptable to spec functions in the spec that return iterators as generators and use GeneratorYield or something, instead of returning the big prototype+next thing","msgtype":"m.text"},"ts":1556201029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the decision in the past has always been a new prototype. There was a thread about this at some point. I think it might be worth reconsidering, but I would give a 70% chance we stay the course.","msgtype":"m.text"},"ts":1556202010000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I feel like people might change their minds with the iterator methods proposal","msgtype":"m.text"},"ts":1556203601000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Maybe. There's already tons of iterators on the web platform, and I asked if we should consolidate, and people said we should not.","msgtype":"m.text"},"ts":1556203623000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"being able to say \"a generator function that when called performs the following steps\" seems so nice","msgtype":"m.text"},"ts":1556203643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would also get rid of having to manually define error and return handling","msgtype":"m.text"},"ts":1556203670000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think you should just macro harder","msgtype":"m.text"},"ts":1556203966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Create spec infra that will generate your iterator prototypes etc. for you","msgtype":"m.text"},"ts":1556203975000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"like the typed arrays?","msgtype":"m.text"},"ts":1556204057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, something like that","msgtype":"m.text"},"ts":1556204496000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or figure out a way to write a generator function-ish body that generates a set of next()/throw()/return() function","msgtype":"m.text"},"ts":1556204533000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that sounds like \"a generator function that when called runs the following steps\"","msgtype":"m.text"},"ts":1556205428000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yep but the spec text generates some new prototype","msgtype":"m.text"},"ts":1556206168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So if there's a PR against tc39/ecma262, that doesn't have any existence in the tc39/ecma262 repo, right?","msgtype":"m.text"},"ts":1556212863000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: github auto-creates a ref for every PR, so you can get to it programmatically if you want. but git won't fetch those refs by default","msgtype":"m.text"},"ts":1556212927000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah, so how do it get to it?","msgtype":"m.text"},"ts":1556212955000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: https://gist.github.com/piscisaureus/3342247","msgtype":"m.text"},"ts":1556213015000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wah, so many rull requests.","msgtype":"m.text"},"ts":1556213225000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"-s/rull/pull/","msgtype":"m.text"},"ts":1556213234000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"lol yeah it'll be more useful on future fetches","msgtype":"m.text"},"ts":1556213241000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(hoping to detect editorial stuff before it gets merged into master.)","msgtype":"m.text"},"ts":1556213304000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: if you have any kind of reliable programmatic mechanism it'd be great to add it to CI on every PR :-D","msgtype":"m.text"},"ts":1556213491000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not reliable, no.","msgtype":"m.text"},"ts":1556213648000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"not until ecmaspeak has a reliable spec.","msgtype":"m.text"},"ts":1556213668000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Mind you, checking for well-formedness of markup would be a good start.","msgtype":"m.text"},"ts":1556213748000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"There should be reliable utilities for that.","msgtype":"m.text"},"ts":1556213777000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"any correctness or consistency tools that you'd like to add would be very welcome :-)","msgtype":"m.emote"},"ts":1556214133000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"We run validator.nu on every pull request for WHATWG specs","msgtype":"m.text"},"ts":1556214275000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/whatwg.org/blob/be5d39e4bce5248039816c9fdbccd02f9f840f86/resources.whatwg.org/build/deploy.sh#L179","msgtype":"m.text"},"ts":1556214334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just ran validator.nu against spec.html: 19 errors + 5 warnings","msgtype":"m.text"},"ts":1556214644000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"A bunch would disappear once my editorial PR is merged ;)","msgtype":"m.text"},"ts":1556214948000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but there'd still be some left.","msgtype":"m.text"},"ts":1556214957000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Well, spec.html isn't the interesting thing","msgtype":"m.text"},"ts":1556215427000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://validator.nu/?doc=https%3A%2F%2Ftc39.github.io%2Fecma262 is the important one.","msgtype":"m.text"},"ts":1556215434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that too, but it's easier to fix spec.html's problems.","msgtype":"m.text"},"ts":1556215525000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ElementInternals & form-associated custom elements are one big topic","msgtype":"m.text"},"ts":1556215643000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oops wrong channel","msgtype":"m.text"},"ts":1556215647000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(and fixing spec.html is mostly a prerequisite to getting the rendered version error-free)","msgtype":"m.text"},"ts":1556215693000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"we could validate both the raw and the built version on PRs.","msgtype":"m.text"},"ts":1556216863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I just don't think validating the source document is useful.","msgtype":"m.text"},"ts":1556218828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It gives you a smaller set of problems to look at, that you know aren't caused by the rendering process. That seems moderately useful.","msgtype":"m.text"},"ts":1556218931000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Moreover, once you've taken care of them, you know that all the errors in the rendered spec *are* caused by the rendering process.","msgtype":"m.text"},"ts":1556218995000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But it's not clear there's any mapping between errors in the source doc vs. the output. E.g. the tooling fixes up some errors or changes them.","msgtype":"m.text"},"ts":1556219025000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like any well-formedness errors will get automatically fixed by the tooling.","msgtype":"m.text"},"ts":1556219037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Since it parses and serializes)","msgtype":"m.text"},"ts":1556219043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and yet the rendered spec *does* have well-formedness errors inherited from spec.html","msgtype":"m.text"},"ts":1556219200000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"? validating build output is what i'd expect to be not useful (except for maintainers of the build tool); just like linting, validating the source is what provides actional feedback to PR authors","msgtype":"m.text"},"ts":1556219499000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"The users see the build output","msgtype":"m.text"},"ts":1556219635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The source isn't even HTML","msgtype":"m.text"},"ts":1556219639000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Validating it with a HTML validation tool is dubious","msgtype":"m.text"},"ts":1556219646000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh sure, i agree with that","msgtype":"m.text"},"ts":1556219655000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what i think is useful on 262 tho is validating the source","msgtype":"m.text"},"ts":1556219661000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(which validator.nu may not be the right tool for)","msgtype":"m.text"},"ts":1556219684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"based on the validator.nu ouput, it looks like spec.html is closer to being html than the rendered output is.","msgtype":"m.text"},"ts":1556219737000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"in my ideal world ecmarkup would just be really strict about what it accepted, such that \"ecmarkup accepts it\" would be sufficient to validate the source","msgtype":"m.text"},"ts":1556219762000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: that would be totally great, and we could add that to CI too","msgtype":"m.text"},"ts":1556219780000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if we were comfortable assuming ecmarkup only produced well-formed output we would not then need to run the output through validator.nu; if we weren't we could do that as well","msgtype":"m.text"},"ts":1556219787000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"while we're kicking all this around, prettier has this neat thing were every PR automatically gets a link to a place you can use the project as it would be after the PR merge (e.g. the link at the bottom of https://github.com/prettier/prettier/pull/5996 )","msgtype":"m.text"},"ts":1556219858000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and having a similar bot linking the rendered spec to each PR would be nice","msgtype":"m.text"},"ts":1556219872000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what if there are merge conflicts?","msgtype":"m.text"},"ts":1556219897000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it just doesn't work, IIRC","msgtype":"m.text"},"ts":1556219906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"updates when the branch updates, so when the conflicts are fixed you get a working link","msgtype":"m.text"},"ts":1556219919000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yes, we have that on all web specs","msgtype":"m.text"},"ts":1556220016000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Bakkot: my tools are pretty strict about what they accept, but that's why I have to change them frequently.","msgtype":"m.text"},"ts":1556220023000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"See e.g. https://github.com/whatwg/html/pull/4383 after the <hr>","msgtype":"m.text"},"ts":1556220031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g., the dynamic import PR uses dl/dt/dt, which spec.html hasn't had before, so my code says (in effect) \"what is this?\" But it seems reasonable for the spec to use them, so I add them to my code. Which is why it'd be problematic to use my code in CI.","msgtype":"m.text"},"ts":1556220438000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And it's not uncommon for algorithm-related PRs to use new pseudocode syntax.","msgtype":"m.text"},"ts":1556220733000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]