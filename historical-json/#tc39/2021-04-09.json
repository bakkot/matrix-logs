[
{"content":{"body":"well, Atomics.store has its value get rounded later when writing into the TypedArray, whereas this doesn't occur for Atomics.wait--the rounding needs to be explicit there","msgtype":"m.text"},"ts":1617931565000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: okay, but shouldn","msgtype":"m.text"},"ts":1617933383000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"say Atomics.wait has a Float64 array. So _w_ is going to be an arbitrary float, right? So why would you compare it to _v_, which is an Int32?","msgtype":"m.text"},"ts":1617933807000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, it can't be Float64.","msgtype":"m.text"},"ts":1617933925000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the call to ValidateIntegerTypedArray forces Int32Array or BigInt64Array","msgtype":"m.text"},"ts":1617934039000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pd4d10","msgtype":"m.text"},"ts":1617981986000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"sorry i am getting irc wrong...","msgtype":"m.text"},"ts":1617981999000,"senderName":"robpalme","senderId":"robpalme@irc"},
{"content":{"body":"no worries, ****** is all i see","msgtype":"m.text"},"ts":1617986656000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"Play with Hack-style pipelines (with #-placeholders). (Ignore the errors): https://www.staging-typescript.org/play?ts=4.3.0-pr-43617-2#code/PTAEAUBsEME8HMBOB7ArgOwCagGbMaABLQDGA1gLQDOALrJAKagAOAlsw5K+g1aABY0azKgC4Q8VjX6oARgDoSyALbAAVlQol+yVsGYpmyKtEgV+pSmw5VgAKBCgAKrA4BlEonY0IAJVECQiLiwJLScooqwACyrJ7GyDg0wC7unt76qJCQwAAsAMwAbACMAOwOYADq+GR8-AyITJi8","msgtype":"m.text"},"ts":1617989436000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"bDRM0kwARABq0F7QsoygAOQAFLFUVNzwAJTDoKx8qFQM2LIMeI2g69Og0JOs8DyY8p2gDSiIVHZ2w+DsnNy8AITDdqAfoAA+AHygAMTyRjoeDSd6fX6gaLQaTyIwAd1G-wANKAAEwzcEfSFKdBUZCMIHIeBImYAblAjmKAAZqXYgA","msgtype":"m.text"},"ts":1617989437000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"Pokute: That‚Äôs really cool. Looks like you made a pull request at https://github.com/microsoft/TypeScript/pull/43617, too. Do you anticipate being able to add support for choosing different topic tokens?","msgtype":"m.text"},"ts":1617996363000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Pokute: I happen to have been working on Babel support for Hack pipes, too. You can track that issue at https://github.com/babel/babel/pull/11600. One thing that I plan to do is to force the user to specify which topic token they want: `@`, `%`, `#`, or `?`. You might want to look into doing the same with your TypeScript patches.","msgtype":"m.text"},"ts":1617996492000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Bakkot: In https://github.com/tc39/ecma262/pull/2378#discussion_r610843513, when you say \"mean\", do you mean \"mention\"?","msgtype":"m.text"},"ts":1617997366000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I do mean that yes","msgtype":"m.text"},"ts":1617997419000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1617997455000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jschoi: It might be difficult to support different topic tokens for hack-style pipelines in TS.","msgtype":"m.text"},"ts":1617998834000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"Pokute: I had figured as much. It would be a while anyway until TC39 decides whether to advance it and the topic token becomes worth bikeshedding. Either way, this looks really cool. üëç","msgtype":"m.text"},"ts":1618000547000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: My intention is just raising awareness, interest and to get more discussion ongoing. While hack-style might not be my favourite one, I will still advocate for it if it's the closest one to succeeding.","msgtype":"m.text"},"ts":1618001698000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"I believe that after passing the first version, whichever it might be - F# or hack, it would be really fast and simple to add another one with a different syntax that does the other usecase (placeholder token / unary function calling)","msgtype":"m.text"},"ts":1618001801000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"Pokute: Yeah, that definitely makes sense.","msgtype":"m.text"},"ts":1618001892000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Thus it ends up that peoples' preferences delay the pipelines for everyone since they think that the initial single way the pipeline operator ends up as is the final way with no extensions.","msgtype":"m.text"},"ts":1618001939000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"Especially if hack-style is implemented first, there's no real need for partial application (I made a typescript PR for that one too).","msgtype":"m.text"},"ts":1618002077000,"senderName":"Pokute","senderId":"Pokute@irc"},
{"content":{"body":"thought of something funny. if you had a function f which when given empty template `` returned a new function f2, you could pretend it was f-double prime :D f``.","msgtype":"m.text"},"ts":1618003481000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"could do any even number.. :p","msgtype":"m.text"},"ts":1618003501000,"senderName":"aradesh","senderId":"aradesh@irc"}
]