[
{"content":{"body":"devsnek: seems like there's pretty broad consensus that Iterator should be a class","msgtype":"m.text"},"ts":1565655559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"something along the lines of","msgtype":"m.text"},"ts":1565655607000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"When the Iterator function is called, the following steps are taken:","msgtype":"m.text"},"ts":1565655618000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1. If NewTarget is either undefined or the active function, then","msgtype":"m.text"},"ts":1565655619000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  a. Throw a TypeError exception.","msgtype":"m.text"},"ts":1565655620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"2. Return ? OrdinaryCreateFromConstructor(NewTarget, \"%Iterator.prototype%\").","msgtype":"m.text"},"ts":1565655620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yes, now its more about whether it should be directly constructable","msgtype":"m.text"},"ts":1565655627000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: seems pretty broad agreement on that too","msgtype":"m.text"},"ts":1565655636000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least, I found Domenic's comment in https://github.com/tc39/proposal-iterator-helpers/issues/30#issuecomment-520537582 convincing, and I haven't seen anyone else disagree","msgtype":"m.text"},"ts":1565655683000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1565655689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was about to say, i was confused who was agreeing, cuz you and domenic had different viewpoints","msgtype":"m.text"},"ts":1565655712000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"good to know the consensus is","msgtype":"m.text"},"ts":1565655720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry, I guess I ought to have more explicit than just +1'ing his comment","msgtype":"m.text"},"ts":1565655737000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i will write up a constructor that throws on ~~Math.random() > 0.5~~ NewTarget being the current function","msgtype":"m.text"},"ts":1565655768000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(consensus among the ~5 people who have looked at this anyway; I can't guarantee the rest of the committee will go for it)","msgtype":"m.text"},"ts":1565655793000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we shall see","msgtype":"m.text"},"ts":1565655848000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: this is what you had in mind right? https://gc.gy/33361267.png","msgtype":"m.text"},"ts":1565656277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: since presumably it should also not be callable as a function, you would want to check for undefined as well","msgtype":"m.text"},"ts":1565656528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh good catch","msgtype":"m.text"},"ts":1565656535000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also it's spelled %Iterator.prototype% now","msgtype":"m.text"},"ts":1565656545000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I wrote this a few lines above)","msgtype":"m.text"},"ts":1565656549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should i just s/%IteratorPrototype%/%Iterator.prototype/","msgtype":"m.text"},"ts":1565656606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"presumably yes (cc ljharb)","msgtype":"m.text"},"ts":1565656618000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: since `%Iterator%` exists, yes","msgtype":"m.text"},"ts":1565657433000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1565657444000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i wonder how hard it will be to add suspendable builtins to v8","msgtype":"m.text"},"ts":1565657455000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so wait, what will `new Iterator()` do?","msgtype":"m.text"},"ts":1565657463000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"throw a type error","msgtype":"m.text"},"ts":1565657468000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but `new class extends Iterator {}` will work?","msgtype":"m.text"},"ts":1565657477000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1565657480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"SGTM","msgtype":"m.text"},"ts":1565657482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1565657485000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"altho tbh `new class extends Iterator {}` is kind of silly to require when `new Iterator` could work ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1565657504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a lot of things *could* work","msgtype":"m.text"},"ts":1565657519000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: at that point you would presumably just write `Object.create(Iterator.prototype)`","msgtype":"m.text"},"ts":1565657602000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(or `Iterator.from({ next })` I guess)","msgtype":"m.text"},"ts":1565658210000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Can someone point out text making `let def\\u{61}ult` an error? The closest I see is \"All interpretations of IdentifierName within this specification are based upon their actual code points regardless of whether or not an escape sequence was used to contribute any particular code point.\", but that seems to be trumped by \"A code point in a ReservedWord cannot be expressed by a \\ UnicodeEscapeSequence.\" (a note, but one that is only","msgtype":"m.text"},"ts":1565658794000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: it's a good question -- I don't really see what's enforcing the note","msgtype":"m.text"},"ts":1565658906000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1565659066000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think it's that 11.6.2.1 is listing out the keywords exactly as they're expected to appear in the source text?","msgtype":"m.text"},"ts":1565659113000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah that has to be it.","msgtype":"m.text"},"ts":1565659153000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm considering that, and still not seeing anything to justify rejecting non-export use","msgtype":"m.text"},"ts":1565659270000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: unless you were doing a generic `new IteratorType()` thing, and the default was `Iterator`","msgtype":"m.text"},"ts":1565659561000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: iow it kind of seems like a useless inconsistency to disallow `new Iterator`","msgtype":"m.text"},"ts":1565659574000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gibson042: Identifier has an Early Error reading","msgtype":"m.text"},"ts":1565659711000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> It is a Syntax Error if StringValue of IdentifierName is the same String value as the StringValue of any ReservedWord except for yield or await.","msgtype":"m.text"},"ts":1565659718000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is the thing making that an error.","msgtype":"m.text"},"ts":1565659736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1565659818000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this applies because `def\\u{61}ult` is an Identifier via `Identifier : IdentifierName but not ReservedWord` (ReservedWords, like other tokens, are specified as sequences of SourceCharacter elements, and do not have alternatives allowing unicode escapes)","msgtype":"m.text"},"ts":1565659826000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(also \"default\" is a ReservedWord because it is a Keyword, is the remaining part of this)","msgtype":"m.text"},"ts":1565659864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Thank you. And that means that `({ def\\u0061ult: true })` is a syntax error, right?","msgtype":"m.text"},"ts":1565660112000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: no, it's legal, because the production for PropertyName is IdentifierName, not Identifier, and so that Early Error does not apply","msgtype":"m.text"},"ts":1565660144000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(specifically, the production for LiteralPropertyName, which is the relevant case of PropertyName)","msgtype":"m.text"},"ts":1565660169000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why does that not track to Identifier via IdentifierReference?","msgtype":"m.text"},"ts":1565660199000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"https://tc39.es/ecma262/#prod-PropertyDefinition","msgtype":"m.text"},"ts":1565660207000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ah, n/m","msgtype":"m.text"},"ts":1565660224000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: IdentifierReference is not the relevant production, because it is not followed by `:`","msgtype":"m.text"},"ts":1565660229000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1565660232000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"wipes brow","msgtype":"m.emote"},"ts":1565660255000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"(`({ def\\u0061ult })` is forbidden and, I guess, should probably also have a test, if it doesn't)","msgtype":"m.text"},"ts":1565660257000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: Iterator.prototype does not have a `next` method, so `new Iterator` is not ever going to give you a useful thing","msgtype":"m.text"},"ts":1565660277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so it seems reasonable to forbid it","msgtype":"m.text"},"ts":1565660283000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway, feel free to comment on https://github.com/tc39/proposal-iterator-helpers/issues/30#issuecomment-520537582","msgtype":"m.text"},"ts":1565660297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: ah yeah, that's a fair point. but then it'd error when you tried to iterate it, no?","msgtype":"m.text"},"ts":1565661369000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"incidentally *only* V8 throws on `foo = {}; foo.def\\u{61}ult = 3;`","msgtype":"m.text"},"ts":1565661659000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"probably ought to add that to the issue","msgtype":"m.text"},"ts":1565661714000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"v8 unconditionally considers escaped keywords to be syntax errors","msgtype":"m.text"},"ts":1565661724000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the only reason they even parse them is to have a custom error message instead of \"unexpected token\"","msgtype":"m.text"},"ts":1565661753000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: wait a sec","msgtype":"m.text"},"ts":1565662813000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is there even a meaningful way to test `({ def\\u0061ult })` if you can't make a bound identifier named `default`?","msgtype":"m.text"},"ts":1565662835000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"assign to global","msgtype":"m.text"},"ts":1565663249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or object+with","msgtype":"m.text"},"ts":1565663252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with probably is a bad idea cuz of strict tests","msgtype":"m.text"},"ts":1565663289000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: actually, `({ default })` apparently isn't valid syntax","msgtype":"m.text"},"ts":1565663521000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gah.","msgtype":"m.text"},"ts":1565663834000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er rather on the contrary","msgtype":"m.text"},"ts":1565665180000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in an identifier context there's no case where adding the escape changes whether it is or isn't an error, right?","msgtype":"m.text"},"ts":1565665309000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right (I think), assuming \"adding the escape\" = \"replacing a character with the equivalent Unicode escape sequence\"","msgtype":"m.text"},"ts":1565665884000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565666285000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"for anyone writing tests for nullish coalescing, engine262 has an implementation now, if that helps at all","msgtype":"m.text"},"ts":1565667606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is chrome still the only browser with SAB enabled","msgtype":"m.text"},"ts":1565705418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"think so","msgtype":"m.text"},"ts":1565705487000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so sad","msgtype":"m.text"},"ts":1565705515000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"SAB can let me add stepped evaluation to engine262","msgtype":"m.text"},"ts":1565705541000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that should be able to be gated on feature detection though right? you are just using the Atomics","msgtype":"m.text"},"ts":1565705614000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but Atomics.wait is banned on main thread of browsers","msgtype":"m.text"},"ts":1565705624000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":":themoreyouknow:","msgtype":"m.text"},"ts":1565705634000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I only use wait on the worker thread","msgtype":"m.text"},"ts":1565705652000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's no way to pause evaluation in engine262 so I just block the onNodeEvaluation callback","msgtype":"m.text"},"ts":1565705698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: please help fix dependencies of https://bugzilla.mozilla.org/show_bug.cgi?id=1477743","msgtype":"m.text"},"ts":1565709972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wow this is big","msgtype":"m.text"},"ts":1565710001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: how does something like 1562506 block SAB","msgtype":"m.text"},"ts":1565710134000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"1565206*","msgtype":"m.text"},"ts":1565710148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"1565205*","msgtype":"m.text"},"ts":1565710169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Spectre","msgtype":"m.text"},"ts":1565710251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit might help","msgtype":"m.text"},"ts":1565710364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh ok this makes more sense now","msgtype":"m.text"},"ts":1565710445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"glad to hear that","msgtype":"m.text"},"ts":1565710507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: did you test cases like `foo?.(a?.b)` perchance","msgtype":"m.text"},"ts":1565727134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: in engine262?","msgtype":"m.text"},"ts":1565727148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: why would that work?","msgtype":"m.text"},"ts":1565727219000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nah V8; I figure it wouldn't've been a likely oversight in your own engine","msgtype":"m.text"},"ts":1565727223000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: `a.(b)` is a syntax error; you can't parenthesize in the middle of a chain","msgtype":"m.text"},"ts":1565727248000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ohhh it's a call, nvm","msgtype":"m.text"},"ts":1565727257000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ignore me","msgtype":"m.text"},"ts":1565727258000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yay confusing","msgtype":"m.text"},"ts":1565727267000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haha I was confused by your confusion there","msgtype":"m.text"},"ts":1565727273000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but yes","msgtype":"m.text"},"ts":1565727277000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/33432290.png","msgtype":"m.text"},"ts":1565727292000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I reckon there will be plenty of that in the community for a bit 😅","msgtype":"m.text"},"ts":1565727304000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i've held back on writing a lot of tests because i know bcoe is working on them","msgtype":"m.text"},"ts":1565727325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah I did a doofy thing 'cause I had all jumps targeting the same label even in a case like that","msgtype":"m.text"},"ts":1565727355000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh heh","msgtype":"m.text"},"ts":1565727370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so if foo is a function and a is nullish then the call wouldn't happrn","msgtype":"m.text"},"ts":1565727386000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*happen","msgtype":"m.text"},"ts":1565727390000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"should be an easy fix after lunch here","msgtype":"m.text"},"ts":1565727418000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Huh? Shouldn't `foo?.(a?.b)` desugar to `foo == null ? undefined : foo(a == null ? undefined : a.b)`, in which nullish a can affect the _arguments_ but not prevent the attempted invocation of a non-nullish foo?","msgtype":"m.text"},"ts":1565729373000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: yes, that's the bug rkirsling was saying he was fixing","msgtype":"m.text"},"ts":1565729426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeppers","msgtype":"m.text"},"ts":1565729610000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"was a silly oversight on my part","msgtype":"m.text"},"ts":1565729629000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"just made me wonder what kind of oversights V8 might be susceptible to ;)","msgtype":"m.text"},"ts":1565729663000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"cool, got it","msgtype":"m.text"},"ts":1565729703000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"the short-circuiting behavior of optional chaining is not going to feel intuitive for a long time, if ever","msgtype":"m.text"},"ts":1565729785000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it feels intuitive to me","msgtype":"m.text"},"ts":1565729881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think its like pipelining, it either makes sense to your or it doesn't","msgtype":"m.text"},"ts":1565729915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I do like that part","msgtype":"m.text"},"ts":1565729918000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"my brain refuses to think in terms of pipelines","msgtype":"m.text"},"ts":1565729942000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I worry about the syntax like anybody else but I've gotten used to looking at it so hopefully others will too before long?","msgtype":"m.text"},"ts":1565729945000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: really? have you done any Haskell or the like?","msgtype":"m.text"},"ts":1565729962000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565729967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and elixir","msgtype":"m.text"},"ts":1565729970000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i really like haskell and elixir too","msgtype":"m.text"},"ts":1565729983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah alright then I have nothing to say XD","msgtype":"m.text"},"ts":1565729985000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or, like, bash","msgtype":"m.text"},"ts":1565729988000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^ true","msgtype":"m.text"},"ts":1565729998000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i was writing bash scripts yesterday","msgtype":"m.text"},"ts":1565729999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how is it still so hard to move files from travis to a branch in github","msgtype":"m.text"},"ts":1565730008000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"#atleastitsnotjenkins?","msgtype":"m.text"},"ts":1565730024000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1565730052000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, that could be. But `foo?.(++i)` still looks to me like the increment should always happen, even though it won't if foo is nullish (but *will* if foo is non-nullish and non-callable).","msgtype":"m.text"},"ts":1565730082000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"i just try to avoid update expressions in odd places","msgtype":"m.text"},"ts":1565730118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cuz that's not a problem unique to optional chaining","msgtype":"m.text"},"ts":1565730138000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, but exacerbated by it","msgtype":"m.text"},"ts":1565730211000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"worth noting that the most popular JS styleguide bans pre and postincrement","msgtype":"m.text"},"ts":1565730233000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: `foo?.(i += 1)` is valid too","msgtype":"m.text"},"ts":1565730266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it also bans assignments in expression position","msgtype":"m.text"},"ts":1565730281000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh good","msgtype":"m.text"},"ts":1565730293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm using it as a specific example of side-effecting. Feel free to substitute update expressions/console interactions/internal state manipulation/etc.","msgtype":"m.text"},"ts":1565730293000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"side effects are always risky, though, and it's not like we're catering to them","msgtype":"m.text"},"ts":1565730304000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"e.g., `foo?.(arr.pop())`","msgtype":"m.text"},"ts":1565730428000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"`foo?.(purchaseCar())`","msgtype":"m.text"},"ts":1565730456000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1565730461000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ljharb: 6.1.7.4 uses both %ArrayPrototype% and %Array.prototype%","msgtype":"m.text"},"ts":1565730946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for all of them","msgtype":"m.text"},"ts":1565730954000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which should actually be used","msgtype":"m.text"},"ts":1565730957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: link?","msgtype":"m.text"},"ts":1565731003000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-well-known-intrinsic-objects","msgtype":"m.text"},"ts":1565731012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean there's a thing about accessing properties","msgtype":"m.text"},"ts":1565731089000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the table has to have the old one","msgtype":"m.text"},"ts":1565731091000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: but all new instances should use the new dot style","msgtype":"m.text"},"ts":1565731097000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1565731100000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was just trying to figure out if i should update engine262 to use them or not","msgtype":"m.text"},"ts":1565731113000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes please","msgtype":"m.text"},"ts":1565731136000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"whee https://gc.gy/33436198.png","msgtype":"m.text"},"ts":1565731204000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shouldn't %AsyncGenerator.prototype%  actually be %AsyncGeneratorFunction.prototype.prototype%","msgtype":"m.text"},"ts":1565731277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since %AsyncGenerator% is its own thing, nah","msgtype":"m.text"},"ts":1565731303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well it says that %AsyncGenerator% should be referred to as `%AsyncGeneratorFunction.prototype%","msgtype":"m.text"},"ts":1565731331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1565731343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the main ones i was trying to get rid of are the underscored ones","msgtype":"m.text"},"ts":1565731355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think it's fine to keep the top-level one","msgtype":"m.text"},"ts":1565731364000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1565731386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hey! Would be nice if you could check my proposal to add \"Array.prototype.chunk\" : https://github.com/fernlop/Array.prototype.chunk","msgtype":"m.text"},"ts":1565732029000,"senderName":"fernlop","senderId":"fernlop@irc"},
{"content":{"body":"fernlop: what JS libraries have this kind of functionality, what do they call it, what are their semantics?","msgtype":"m.text"},"ts":1565732152000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fernlop: any other languages besides php?","msgtype":"m.text"},"ts":1565732165000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fernlop: (also for future reference, https://github.com/tc39/template-for-proposals and click \"use this template\")","msgtype":"m.text"},"ts":1565732193000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: if you want people to use that template it maybe should not ask people to ensure they are members of tc39 before using it","msgtype":"m.text"},"ts":1565732261000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: that is a good point","msgtype":"m.text"},"ts":1565732293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll tweak that","msgtype":"m.text"},"ts":1565732296000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think it can be deleted outright, right?","msgtype":"m.text"},"ts":1565732337000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: mostly https://github.com/tc39/template-for-proposals/commit/76bb1c4d3b7431a6e6a04a62dfa4273c131109f1","msgtype":"m.text"},"ts":1565732355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"since the author can be anybody -- they'll need a champion but not before setting pen to paper","msgtype":"m.text"},"ts":1565732360000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ahh seems good","msgtype":"m.text"},"ts":1565732370000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"when i originally made the template i was assuming stage 0 proposals wouldn't really have a repo yet; in practice that's not been the case.","msgtype":"m.text"},"ts":1565732389000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, repos are nice","msgtype":"m.text"},"ts":1565732399000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"im sorry if i made any mistakes but it was not cleary documented how and where to put proposals in the \"idea\" stage.. just tell me how to fix it and i will try my best","msgtype":"m.text"},"ts":1565732488000,"senderName":"fernlop","senderId":"fernlop@irc"},
{"content":{"body":"fernlop: making a repo like this and linking it in this channel is a good way to get started","msgtype":"m.text"},"ts":1565732515000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e., the thing you did was right","msgtype":"m.text"},"ts":1565732543000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"now there is the followup part, which is where people ask about motivation and details, e.g. what do languages other than PHP do, or other JS library","msgtype":"m.text"},"ts":1565732577000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fernlop: you def didn't make a mistake :-) just giving you a heads up for the future","msgtype":"m.text"},"ts":1565732648000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"okay thanks! i will continue with more details","msgtype":"m.text"},"ts":1565732919000,"senderName":"fernlop","senderId":"fernlop@irc"},
{"content":{"body":"TIL that template repos are a thing","msgtype":"m.text"},"ts":1565734001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's pretty new","msgtype":"m.text"},"ts":1565734154000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its pretty cool","msgtype":"m.text"},"ts":1565734250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"revisiting the iterator methods proposal, and reminding myself that people keep asking for these methods to be on iterables, I'm realizing I don't actually understand what is being asked for","msgtype":"m.text"},"ts":1565736211000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"specifically, if we had a `filterIterable` function, what would `filterIterable(new Map([['a', 0], ['b', 1]]), foo)` return?","msgtype":"m.text"},"ts":1565736244000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would it be a Map? (how - is the assumption we'd simultaneously introduce a Symbol.fromIterator?) a \"lazy iterable\"? an array?","msgtype":"m.text"},"ts":1565736296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"people don't want filterIterable(map)","msgtype":"m.text"},"ts":1565736332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they want Iterable(map).filter","msgtype":"m.text"},"ts":1565736341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: on the contrary, rauschma asked for that explicitly","msgtype":"m.text"},"ts":1565736348000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1565736356000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway, even in that world, what does that return?","msgtype":"m.text"},"ts":1565736360000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh for chaining i guess they did","msgtype":"m.text"},"ts":1565736363000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah i dunno","msgtype":"m.text"},"ts":1565736365000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"C# just returns generic enumerables, I guess","msgtype":"m.text"},"ts":1565736548000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wish this zloirock fellow would open some PRs","msgtype":"m.text"},"ts":1565736647000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lots of issues","msgtype":"m.text"},"ts":1565736652000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"PRs are a lot more work","msgtype":"m.text"},"ts":1565736662000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"edit button on github does the job","msgtype":"m.text"},"ts":1565736695000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, but you gotta, like, figure out the correct spec text and formatting and etc","msgtype":"m.text"},"ts":1565736717000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and follow up if there are problems","msgtype":"m.text"},"ts":1565736746000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since raising issues is a volunteer thing anyway, it seems a lot to ask for a full PR too","msgtype":"m.text"},"ts":1565736748000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1565736766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: my preferred interpretation is that they want map.filter(foo) to return a map. And we should totally do that. And for Set. They're just separate proposals.","msgtype":"m.text"},"ts":1565736796000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: those are useful, but I don't think it is actually what rauschma etc were asking for","msgtype":"m.text"},"ts":1565736880000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Maybe in most cases you could mentally model `someCollection.someMethod(...args)` as `new SomeCollection(someCollection[Symbol.iterator]().someMethod(...args))`. (Although I think we should not spec them that way.)","msgtype":"m.text"},"ts":1565736887000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"though I guess, like I said, I'm not really sure what they were asking for","msgtype":"m.text"},"ts":1565736928000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah, I'm not sure what else it could really be","msgtype":"m.text"},"ts":1565736950000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"possibly \"put wu.js in the standard library\"","msgtype":"m.text"},"ts":1565737013000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"isn't wu also iterable(x).map().filter()","msgtype":"m.text"},"ts":1565737056000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes","msgtype":"m.text"},"ts":1565737063000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]