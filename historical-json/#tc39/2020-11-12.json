[
{"content":{"body":"https://github.com/tc39/proposal-upsert is not the https://github.com/tc39/proposals list?","msgtype":"m.text"},"ts":1605201083000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: it is, it's Map.prototype.emplace","msgtype":"m.text"},"ts":1605204023000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(the name is in the top of the readme on proposal-upsert)","msgtype":"m.text"},"ts":1605204040000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: got it, thanks!","msgtype":"m.text"},"ts":1605204072000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: that keeps on changing names due to reasons :/","msgtype":"m.text"},"ts":1605206355000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it also needs to be split into *Map.prototype.get(key, ifMissingFn) and *Map.prototype.update(key, ifPresentFn)","msgtype":"m.text"},"ts":1605206409000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"littledan: your batch preloading, would it be any different from just having an `import.preload(arr): Promise<>`?","msgtype":"m.text"},"ts":1605206523000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: for the better anyway, also heard `item()` might be `at()`","msgtype":"m.text"},"ts":1605206610000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"we'll find out next week","msgtype":"m.text"},"ts":1605206742000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: i can't answer that question since I don't know what that operation would do. It is important to distinguish the array of preloaded resources from the URL of the batch expected to contain them","msgtype":"m.text"},"ts":1605207424000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Can someone remind me why we allow private fields on objects returned by `super` that don't have the parents brand?","msgtype":"m.text"},"ts":1605207462000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"Or was this something we didn't consider?","msgtype":"m.text"},"ts":1605207472000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: allow installing them? parents don’t necessarily have a “brand”, and super can change, i believe?","msgtype":"m.text"},"ts":1605207589000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Yeah, just seems kinda strange and most likely a bug in practice. Doesn't super use [[HomeObject]] so it can't change?","msgtype":"m.text"},"ts":1605207698000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"super.foo does iirc, but super itself i thought depends on the [[Prototype]]","msgtype":"m.text"},"ts":1605207756000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh lol","msgtype":"m.text"},"ts":1605207789000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"So weird, ok","msgtype":"m.text"},"ts":1605207793000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"nvm then","msgtype":"m.text"},"ts":1605207797000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"in practice I’d say returning an object from a constructor is certainly most likely a bug, but since class didn’t “fix” that, it seems important to preserve it","msgtype":"m.text"},"ts":1605207801000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Does anyone know why https://tc39.es/ecma262/#sec-uri-syntax-and-semantics bothers to give the \"general form\" of URIs, and the syntax for uri, uriCharacters, uriCharacter, and uriEscaped? As far as I can see, the spec doesn't make any use of those things.","msgtype":"m.text"},"ts":1605210439000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Moreover, for the other uri* productions, it doesn't actually use them as productions (to parse something), but just as a way to defined a couple character sets.","msgtype":"m.text"},"ts":1605210533000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"my guess is that it's there to give a human-readable explanation of the syntax expected / produced by encodeURI and decodeURI, so you don't have to figure out it out by reading the prose parsing / codegen algorithms","msgtype":"m.text"},"ts":1605210664000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but that's just a guess; I don't know the actual history","msgtype":"m.text"},"ts":1605210699000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but those don't actually care that their input/output is a URI, do they?","msgtype":"m.text"},"ts":1605210729000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"E.g. if encodeURI receives a string which doesn't conform to the uri syntax, it doesn't throw, it just returns another string, right?","msgtype":"m.text"},"ts":1605210859000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(assuming no unpaired surrogates)","msgtype":"m.text"},"ts":1605210886000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1605211348000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"littledan: my main concern is instead of preloading you are priming side-effects of fetching or w/e","msgtype":"m.text"},"ts":1605213007000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: The idea is, it's not a side effect. Servers are required to return the same thing if you skip the batch preload. So, it's just like other kinds of preloading.","msgtype":"m.text"},"ts":1605213042000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this looks a lot like asset references with a reflective API, but it is assigning references out of band?","msgtype":"m.text"},"ts":1605213046000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't understand how that can be enforced","msgtype":"m.text"},"ts":1605213063000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it doesn't give you asset references; it gives you a Promise of void","msgtype":"m.text"},"ts":1605213067000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"URLs are still the logical asset references here","msgtype":"m.text"},"ts":1605213088000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i agree not getting references, but you are doing a very similar thing","msgtype":"m.text"},"ts":1605213092000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hmm, I don't understand","msgtype":"m.text"},"ts":1605213104000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the preloadBatch API is just like adding a <link rel=batchpreload> tag","msgtype":"m.text"},"ts":1605213130000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"which is like adding a bunch of <link rel=preload> tags, but with fancier serving","msgtype":"m.text"},"ts":1605213145000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"see this section for enforcement: https://gist.github.com/littledan/e01801001c277b0be03b1ca54788505e#personalization","msgtype":"m.text"},"ts":1605213172000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that is all browser specific stuff and means you can't have credentialed resources prefetched","msgtype":"m.text"},"ts":1605213214000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"keith_mi_: One example is custom element upgrade","msgtype":"m.text"},"ts":1605213238000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe i'm not understanding something","msgtype":"m.text"},"ts":1605213240000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"keith_mi_: also, generally, maintaining the WeakMap analogy","msgtype":"m.text"},"ts":1605213249000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"bradleymeck: Right, you can't have credientialed resources prefetched","msgtype":"m.text"},"ts":1605213262000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: What's the weakmap analogy?","msgtype":"m.text"},"ts":1605213287000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"about being browser-specific: we're talking about the loading semantics, so it kinda has to be... on the filesystem, the enforcement mechanisms could be different; I guess I haven't really thought about that","msgtype":"m.text"},"ts":1605213289000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"keith_mi_: https://docs.google.com/presentation/d/1lPEfTLk_9jjjcjJcx0IAKoaq10mv1XrTZ-pgERG5YoM/edit","msgtype":"m.text"},"ts":1605213315000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this presentation explains many of the design points for private fields","msgtype":"m.text"},"ts":1605213326000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: yea i'm just confused on how this is going to work in a way that doesn't make the key more complex (also I'd note the key in html will have an assert component so it has another tier)","msgtype":"m.text"},"ts":1605213379000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"about custom element upgrade: HTML uses the super return trick on purpose (Apple pushed for this design I believe)","msgtype":"m.text"},"ts":1605213400000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1605213409000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"it's important that you be able to use private fields in custom HTML elements IMO","msgtype":"m.text"},"ts":1605213416000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"bradleymeck: This definitely doesn't make the key more complex. The key is still the same URL. Resource batch preloading works at a lower level, of populating the HTTP cache","msgtype":"m.text"},"ts":1605213445000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: i'm getting more confused","msgtype":"m.text"},"ts":1605213494000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'll just wait on the presentation","msgtype":"m.text"},"ts":1605213502000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: Jeffrey Yasskin proposed a different URL scheme for bundles, but in my opinion, it's unnecessary in the same-origin case (and I'm proposing restricting bundles to a single origin) https://github.com/WICG/webpackage/blob/master/explainers/bundle-urls-and-origins.md","msgtype":"m.text"},"ts":1605213519000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we don't have any of those in node","msgtype":"m.text"},"ts":1605213534000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so i'm kind of 🤷","msgtype":"m.text"},"ts":1605213539000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the web doesn't have package URLs either, it's just a proposal","msgtype":"m.text"},"ts":1605213552000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we do have scopes on fs but that is about it","msgtype":"m.text"},"ts":1605213555000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's a very self-contained deterministic caching mechanism described in https://gist.github.com/littledan/e01801001c277b0be03b1ca54788505e#semantics-of-resource-batches . I wonder if it could be implemented in node to handle resource batches","msgtype":"m.text"},"ts":1605213603000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I definitely care about this working across environments, e.g., for Node.js startup time","msgtype":"m.text"},"ts":1605213625000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"however, my presentation focuses on web loading, since that's complicated enough","msgtype":"m.text"},"ts":1605213634000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'd be happy to have a call about this some time if you're interested","msgtype":"m.text"},"ts":1605213644000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1605213655000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to me currently this looks mostly like it is useful but the API is confusing me","msgtype":"m.text"},"ts":1605213677000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"(btw the caching described in the section I linked is entirely in-memory. Browsers may want to store this persistently in the HTTP cache but Node would probably just load the resource batch each time)","msgtype":"m.text"},"ts":1605213719000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the trick is to talk about this topic while avoiding saying the words \"batch file\"","msgtype":"m.text"},"ts":1605213730000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"also per bundling include a length param at the tail of w/e the format, we added it web bundles to support executables","msgtype":"m.text"},"ts":1605213768000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]