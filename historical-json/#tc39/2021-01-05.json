[
{"content":{"body":"ljharb: just recapping here, OrdinaryObjectCreate is the old ObjectCreate, right?","msgtype":"m.text"},"ts":1609806412000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: yes, as far as i recall","msgtype":"m.text"},"ts":1609807408000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thanks! Just checking here I need to update ecma402","msgtype":"m.text"},"ts":1609807713000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"upstream/pr/1460 renamed ObjectCreate to OrdinaryObjectCreate (and tweaked the semantics of its second parameter)","msgtype":"m.text"},"ts":1609809471000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"s/tweaked/clarified/","msgtype":"m.text"},"ts":1609809552000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Thatâ€™s all good. I need to sync it in ecma402 soon","msgtype":"m.text"},"ts":1609812011000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: should add 402 to https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md#downstream-dependencies then ðŸ˜Š","msgtype":"m.text"},"ts":1609850720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In https://tc39.es/ecma262/#sec-evaluatecall Step 2.a says","msgtype":"m.text"},"ts":1609856654000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"> 2. Else,","msgtype":"m.text"},"ts":1609856678000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":">     a. Let thisValue be undefined.","msgtype":"m.text"},"ts":1609856678000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"But doesn't this mean `(3 + 3).valueOf()`should pass undefined as the this-value to the method?","msgtype":"m.text"},"ts":1609856725000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I think it's a spec bug","msgtype":"m.text"},"ts":1609856738000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: it's not boxed before it gets there?","msgtype":"m.text"},"ts":1609856771000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Of course it is, my mistake","msgtype":"m.text"},"ts":1609856845000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"this is for unqualified calls like `foobar()`","msgtype":"m.text"},"ts":1609856873000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(i'm not 100% certain, and i haven't found where in the spec it does that boxing yet :-p )","msgtype":"m.text"},"ts":1609856891000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe not the kind of boxing you meant","msgtype":"m.text"},"ts":1609856903000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in this case`(3 + 3).valueOf` evaluates to a PropertyReference","msgtype":"m.text"},"ts":1609856908000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i meant like, boxing the primitive value into an object","msgtype":"m.text"},"ts":1609856911000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie `Object(6)`","msgtype":"m.text"},"ts":1609856917000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, that doesn't happen until later, I think.","msgtype":"m.text"},"ts":1609856919000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1609856920000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah right tho, it's a property reference","msgtype":"m.text"},"ts":1609856934000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In this case, I **think** it doesn't happen at all, because the function is a builtin","msgtype":"m.text"},"ts":1609856935000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"`(3 + 3)()` would probably hit this branch, but then it'd be a typeerror since it's not a function?","msgtype":"m.text"},"ts":1609856950000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think the TypeError happens before you would hit the branch","msgtype":"m.text"},"ts":1609857019000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1609857026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"The branch is in https://tc39.es/ecma262/#sec-ordinarycallbindthis steps 5 and 6","msgtype":"m.text"},"ts":1609857043000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and note that we never get to this algorithm at all for builtins, only for ECMAScript functions","msgtype":"m.text"},"ts":1609857068000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's like: -let ref = evaluate(`(3 + 3).valueOf`); -let callee = GetValue(ref) and check that it's a function; -callee.[[Call]](ref, args)","msgtype":"m.text"},"ts":1609857234000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the [[Call]] is what ultimately does boxing, and only for non-strict ECMAScript functions","msgtype":"m.text"},"ts":1609857256000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"right, thanks","msgtype":"m.text"},"ts":1609857281000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"has anyone proposed a way to make loops \"parallel\" when awaiting?","msgtype":"m.text"},"ts":1609862113000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"isn't that Promise.all with mapping over an array?","msgtype":"m.text"},"ts":1609870464000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"annevk: you're right! Thanks for the catch up! https://github.com/tc39/ecma262/pull/2268/files","msgtype":"m.text"},"ts":1609871847000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ljharb: that's Promise.all but I'd love if I could ever structure some loop syntax to sugar it","msgtype":"m.text"},"ts":1609871932000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: to me, loops are always more sour than alternatives :-)","msgtype":"m.text"},"ts":1609871969000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow the thing i want is API sugar for for..of, ie, and Iterable forEach","msgtype":"m.text"},"ts":1609871989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*an","msgtype":"m.text"},"ts":1609871991000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's not the first time we disagree, but at the same time the for await initially gave me the impression of things executing in parallel (the parallel impression async gives to a dev)","msgtype":"m.text"},"ts":1609872073000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"if we added `await.all` etc, then `for await.all` would make sense to me :-p","msgtype":"m.text"},"ts":1609872102000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1609872109000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"parallel is inaccurate anyway, but await.all seems not much intrusive","msgtype":"m.text"},"ts":1609872137000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it doesn't create extra function contexts, but that depends a lot on how it's implemented to be something good","msgtype":"m.text"},"ts":1609872267000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"i'm not convinced that function contexts are a meaningful cost to be concerned with","msgtype":"m.text"},"ts":1609872293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's some complexity with a `for await.all` where, you can't do `return` or `break` or `continue` or `yield` from inside such a loop","msgtype":"m.text"},"ts":1609874495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least it's not obvious what any of those do","msgtype":"m.text"},"ts":1609874500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is very true","msgtype":"m.text"},"ts":1609874691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a loop construct does seem inherently sequential in some ways","msgtype":"m.text"},"ts":1609874703000,"senderName":"ljharb","senderId":"ljharb@irc"}
]