[
{"content":{"body":"U+2029 PARAGRAPH SEPARATOR begins a new line in JS even if it doesn't display that way, so I call shenanigans on the endpoint there","msgtype":"m.text"},"ts":1549935179000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"> Are gists the most misappropriated blogging platform ever?","msgtype":"m.text"},"ts":1549941041000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"was the part that made me laugh the most tbqh","msgtype":"m.text"},"ts":1549941041000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek, Stuff like that is driving me a bit insane determining if my grammar changes don't create problems. :| The number of weird expansions of the grammar rules that no one would ever write are amazing.","msgtype":"m.text"},"ts":1549941559000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"Also I'm very glad that [] is basically only a valid token sequence for array initialization. Would be a headache if calling arrays with undefined was allowed.","msgtype":"m.text"},"ts":1549943450000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"Also since I have to learn how to write algorithms soon for my proposal. http://sirisian.github.io/ecmascript-types/#prod-MemberExpression If you have grammar rules for parsing something like: https://github.com/sirisian/ecmascript-types#array-views It makes more sense to just write the grammar rule as an argument list? I noticed all the built in functions don't assert their argument lengths. Object.getOwnPropertyDescriptor(o,","msgtype":"m.text"},"ts":1549944097000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"'a', 1, 2, 3); Seems like everything is kept dynamic. Seems strange to me to do the same to the array view syntax though as it's not \"real\" function.","msgtype":"m.text"},"ts":1549944097000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"What I mean is it's not something that can be reassigned by the user like most other functions.","msgtype":"m.text"},"ts":1549944205000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"hrm","msgtype":"m.text"},"ts":1549993456000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"TIL about \"hamburger hill\" as a metaphor","msgtype":"m.text"},"ts":1549993470000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"https://github.com/tc39/proposal-temporal/issues/98","msgtype":"m.text"},"ts":1549993476000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"i find it unlikely that builtin modules will move forward in the next 5 years","msgtype":"m.text"},"ts":1549994025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd say the same, but i'd stop before \"in\"","msgtype":"m.text"},"ts":1549994059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd assume some future set of delegates will in some way agree to either have it or not have it","msgtype":"m.text"},"ts":1549994140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What is blocking them?","msgtype":"m.text"},"ts":1549994281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"consensus\"","msgtype":"m.text"},"ts":1549994298000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"tho I bet the issue of polyfillability probably looms too","msgtype":"m.text"},"ts":1549994319000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"Sure, I guess Iâ€™m looking for a pointer explaining both sides trying to get on that hill","msgtype":"m.text"},"ts":1549994412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"from what i can see, if all the polyfill and security constraints are met, then all the advantages over globals go away","msgtype":"m.text"},"ts":1549994671000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"at which point, i don't see how the feature would carry its weight","msgtype":"m.text"},"ts":1549994682000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I will admit to not having paid full attention to the builtin modules goo to really expound on it well","msgtype":"m.text"},"ts":1549994690000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"globals entail a smallish cost in memory per global object","msgtype":"m.text"},"ts":1549994711000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"thousands of cuts, and all","msgtype":"m.text"},"ts":1549994727000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"and either way, i have yet to see a language-level solution that allows for the polyfill and security use cases (import maps doesn't count)","msgtype":"m.text"},"ts":1549994730000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(because it's not language level)","msgtype":"m.text"},"ts":1549994737000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jwalden: they could be lazily loaded on use, tho. i think that's how some engines do Intl","msgtype":"m.text"},"ts":1549994755000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jwalden: v8 recently(ish) used some fancy memory mapping and snapshotting to de-duplicate that","msgtype":"m.text"},"ts":1549994756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: that's as to the underlying Intl data, not as to the binding functions -- or at least that's how SpiderMonkey does it","msgtype":"m.text"},"ts":1549994789000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: i guess i don't see why the first reference to `Intl` couldn't lazily create the same thing that `import from 'intl'` could","msgtype":"m.text"},"ts":1549994816000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://v8.dev/blog/embedded-builtins","msgtype":"m.text"},"ts":1549994852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but certainly, that'd at least be a benefit of builtin modules (in the world i described above, where polyfill/security needs are met)","msgtype":"m.text"},"ts":1549994855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fancy memory mapping is *possible* for sure, but it rather constrains implementations and is a bit of a complexity tax, definitely","msgtype":"m.text"},"ts":1549994974000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"An idea I quite liked was using builtin modules as a way to expose the world to Wasm","msgtype":"m.text"},"ts":1549995052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1549995068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"E.g., as a way for Wasm to get hold of fetch() or some such","msgtype":"m.text"},"ts":1549995105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't that just anyref","msgtype":"m.text"},"ts":1549995138000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If you want to forever require going through JS, sure","msgtype":"m.text"},"ts":1549995176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how else would js builtins be exposed to wasm","msgtype":"m.text"},"ts":1549995195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Builtin modules?","msgtype":"m.text"},"ts":1549995246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so like","msgtype":"m.text"},"ts":1549995255000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"add a new api to wasm for the embedder to define builtin modules","msgtype":"m.text"},"ts":1549995266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which wasm modules can then use","msgtype":"m.text"},"ts":1549995270000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: thanks for the clear explanation btw","msgtype":"m.text"},"ts":1549995652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: np, i don't like being so doomsay on it, but so many people seem so (perhaps blindly) bearish on it :-/","msgtype":"m.text"},"ts":1549996190000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably wasm already has a way to get at JS globals, right?","msgtype":"m.text"},"ts":1549996212000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: only if you pass them in from JS","msgtype":"m.text"},"ts":1549996318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aiui","msgtype":"m.text"},"ts":1549996359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i mean, you can't create a function in wasm in sloppy mode that returns this and invoke it? or use `Function` and invoke it with `'return this'` and invoke the result?","msgtype":"m.text"},"ts":1549996402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if you can do either of those things then it seems pretty useless to have that restriction in wasm","msgtype":"m.text"},"ts":1549996418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can't create a js function in wasm at all","msgtype":"m.text"},"ts":1549996422000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or strings","msgtype":"m.text"},"ts":1549996430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol, ok","msgtype":"m.text"},"ts":1549996434000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean, it just means a wasm program has to have a js component to provide the global, if it wants it","msgtype":"m.text"},"ts":1549996449000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you could put the chars of return this in memory","msgtype":"m.text"},"ts":1549996450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then call a function from jsland with the address of those chars","msgtype":"m.text"},"ts":1549996465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which converts them into a string","msgtype":"m.text"},"ts":1549996470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then calls Function()","msgtype":"m.text"},"ts":1549996474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, so if it's possible, why force the hoop jumping","msgtype":"m.text"},"ts":1549996585000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ðŸ¤·","msgtype":"m.text"},"ts":1549996751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: because WASM can't do it on its own","msgtype":"m.text"},"ts":1550004484000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it remains in principal of least authority","msgtype":"m.text"},"ts":1550004493000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: can't what, expose the global? why not?","msgtype":"m.text"},"ts":1550004741000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no way to get a hold of it without someone passing it in","msgtype":"m.text"},"ts":1550004758000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wasm modules can mutate undeniable globals tho","msgtype":"m.text"},"ts":1550004778000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"even if WASM makes a string, it needs to pass it out and get the global passed back in","msgtype":"m.text"},"ts":1550004782000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like `[].constructor`","msgtype":"m.text"},"ts":1550004782000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: if you pass in a reference to those","msgtype":"m.text"},"ts":1550004793000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not available w/o being passed in","msgtype":"m.text"},"ts":1550004802000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm confused; so you can't make a JS array in a wasm module?","msgtype":"m.text"},"ts":1550004804000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can, but not without a way of doing so being passed in","msgtype":"m.text"},"ts":1550004820000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"interesting, ok","msgtype":"m.text"},"ts":1550004835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: wasm currently only has four first-class types: i32, i64, f32, f64","msgtype":"m.text"},"ts":1550008662000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1550008668000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't understand what \"hamburger hill\" means...","msgtype":"m.text"},"ts":1550011166000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"","msgtype":"m.text"},"ts":1550011188000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Informative! ^_^","msgtype":"m.text"},"ts":1550011454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, was that a ditto marker?","msgtype":"m.text"},"ts":1550011554000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i've heard \"die on a hill\"; google leads me to https://en.wikipedia.org/wiki/Battle_of_Hamburger_Hill for \"hamburger hill\" but that doesn't help me much","msgtype":"m.text"},"ts":1550011634000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: yes :P","msgtype":"m.text"},"ts":1550011920000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is it like, the McMansion or McJob version of dying on a hill?","msgtype":"m.text"},"ts":1550011955000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(still not sure what that implies but...yeah)","msgtype":"m.text"},"ts":1550011969000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(also I guess that would be \"dying on a McHill\" so yeah, I got nothin')","msgtype":"m.text"},"ts":1550012360000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hamburger hill is dying on a hill that causes you to lose some larger battle","msgtype":"m.text"},"ts":1550015284000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"maximum whoosh","msgtype":"m.text"},"ts":1550015546000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]