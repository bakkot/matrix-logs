[
{"content":{"body":"if ecma262 had multipage","msgtype":"m.text"},"ts":1548907158000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should it be implemented in ecmarkup or by processing the output","msgtype":"m.text"},"ts":1548907181000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Definitely as part of ecmarkup. That could change whenever. That said what would be the goal?","msgtype":"m.text"},"ts":1548907576000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"Sirisian: size and performance","msgtype":"m.text"},"ts":1548907817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my cpu stays pinned around 50% just having the spec open","msgtype":"m.text"},"ts":1548907831000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"can't even open it on my phone","msgtype":"m.text"},"ts":1548907837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lots of people have similar issues","msgtype":"m.text"},"ts":1548907843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I've only started looking at ecmarkup and it's various utility programs. Is it using real web components?","msgtype":"m.text"},"ts":1548907992000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"They look real. nvm. Was thinking maybe it could be a polyfill thing. My computer is too fast to notice things.","msgtype":"m.text"},"ts":1548908112000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"devsnek, Did you try profiling it? I noticed that \"Hit Test\"s take a while on the page. https://bugs.chromium.org/p/chromium/issues/detail?id=428083","msgtype":"m.text"},"ts":1548908950000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"Sirisian: its roughly 800 pages long","msgtype":"m.text"},"ts":1548908982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its just really big","msgtype":"m.text"},"ts":1548908985000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sirisian: it used to be a \"real\" web component thing, but rendering the giant document was extremely slow","msgtype":"m.text"},"ts":1548908987000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"like, minutes to load slow","msgtype":"m.text"},"ts":1548908998000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"so now the elements are preprocessed away, but nothing is stopping osmeone from making a CE implementation AFAIK","msgtype":"m.text"},"ts":1548909020000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"might be nice for small specs?","msgtype":"m.text"},"ts":1548909025000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"It would be naive, but hiding the different sections might be enough. It looks like hit tests are ran for every scroll/mouse move. Also the spec runs 100% fine on my old HTC 10?","msgtype":"m.text"},"ts":1548909217000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"There's absolutely no lag.","msgtype":"m.text"},"ts":1548909241000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"Sirisian: are you using Firefox? I've noticed the spec render smuch quicker in FF than Chrome","msgtype":"m.text"},"ts":1548912299000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I use both, but on mobile I use Chrome.","msgtype":"m.text"},"ts":1548912552000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"I just noticed in Chrome the spec is so large you can't debug it. Only profile, but firefox can debug it.","msgtype":"m.text"},"ts":1548912583000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"its surprisingly easy to parse the spec into json","msgtype":"m.text"},"ts":1548914188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my compliments to the good structure of the build output","msgtype":"m.text"},"ts":1548914199000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ftr it works super fast in safari, which is the only place i've ever looked at it :-p","msgtype":"m.text"},"ts":1548916223000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Scala also uses = to indicate function implementations, it's just that most of the time that implementation is a block statement","msgtype":"m.text"},"ts":1548921186000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"So https://tc39.github.io/ecma262/#sec-object-type only talks about get/set access to properties; but then there's also prose to the extent of \"If O has an own property P\"","msgtype":"m.text"},"ts":1548922242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Context: https://github.com/heycam/webidl/pull/601","msgtype":"m.text"},"ts":1548922346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hello Everybody :) Thanks for the invite @bterlson  (in twitter)","msgtype":"m.text"},"ts":1548929830000,"senderName":"sendilkumarn","senderId":"sendilkumarn@irc"},
{"content":{"body":"annevk: it looks like explaining what an \"own\" property is, and what \"has\" means are being requested?","msgtype":"m.text"},"ts":1548939536000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so what it means to have an own property and what it means to have properties otherwise","msgtype":"m.text"},"ts":1548939575000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: yeah, it's a lil vague how such statements work in terms of primitives defined in ES","msgtype":"m.text"},"ts":1548939758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bradleymeck: it's also not always clear to what extent a host environment is allowed to use those primitives","msgtype":"m.text"},"ts":1548940108000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i would be surprised if a host ever directly used the prose instead of some abstract op or using internal slot methods, as internal slot methods are generally what you want for object ops that are not being done using the Reference Type","msgtype":"m.text"},"ts":1548940272000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we can try and figure out some note we can add though about when it is expected to use things maybe","msgtype":"m.text"},"ts":1548940299000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Well, in the IDL case we basically want \"If |O| has an own property with name |P|\", which ES also uses itself and doesn't really offer an abstraction for","msgtype":"m.text"},"ts":1548940453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does O.[[GetOwnProperty]] not satisfy that, or are you wanting one specifically with a \"Has\" true/false return","msgtype":"m.text"},"ts":1548942583000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-hasownproperty exists, so i'm a little confused","msgtype":"m.text"},"ts":1548942628000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: did you read the IDL PR comments?","msgtype":"m.text"},"ts":1548942703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i did","msgtype":"m.text"},"ts":1548942788000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't have a solution, but i'm just explaining what the spec has/generally should be used","msgtype":"m.text"},"ts":1548942828000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"idk the visibility algorithm in depth though","msgtype":"m.text"},"ts":1548942836000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"So we could use OrdinaryGetOwnProperty (need to bypass proxies iirc), but then we duplicate a whole lot of language that isn't really needed","msgtype":"m.text"},"ts":1548943033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So then the question is if we can use the language around Objects","msgtype":"m.text"},"ts":1548943055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And then a side question is how much that language is formalized enough, as the section on Object itself only talks about get/set, not has","msgtype":"m.text"},"ts":1548943076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think we could expose something about prose in ECMA262 explaining \"has\" as it is not going to change, but I would probably want to figure out what is safe for a host to use with it since it gets around the meta object protocol intentionally","msgtype":"m.text"},"ts":1548943202000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm just not well informed enough on what this is trying to do","msgtype":"m.text"},"ts":1548943266000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the visibility explainer kind of explains the intent, but not all the details","msgtype":"m.text"},"ts":1548943283000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: afaik MOP are constraints on objects; when you define a host object, you need lower-level hooks, such as OrdinaryGetOwnProperty and in this case \"has an own property\"","msgtype":"m.text"},"ts":1548943494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mmmm but this is changing how one of the methods on an object works from outside, maybe i'm confused","msgtype":"m.text"},"ts":1548943593000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it's basically defining a new proxy object","msgtype":"m.text"},"ts":1548944015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry, exotic object","msgtype":"m.text"},"ts":1548944037000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea, but this seems new to me and i'm trying to process.","msgtype":"m.text"},"ts":1548944142000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the exotic object is fine, the visibility algorithm is always within a MOP operation so it is probably fine to use","msgtype":"m.text"},"ts":1548944169000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think the prose we need to add is just about going through MOP operations *unless* you are creating an exotic object and are using things like \"has\" within a MOP operation implementation","msgtype":"m.text"},"ts":1548944223000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that seems ok? will talk to ppl today at meeting in case they miss this","msgtype":"m.text"},"ts":1548944238000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Yeah, and does \"has\" need to be grounded better somehow?","msgtype":"m.text"},"ts":1548944271000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"using \"has\" outside of a MOP operation seems like something that would not be expected/should not be done","msgtype":"m.text"},"ts":1548944275000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1548944289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the meaning of \"has\" won't change but we can add a couple sentences being clearer","msgtype":"m.text"},"ts":1548944295000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't think anyone is asking for it to change, I'm mostly asking for it to be defined","msgtype":"m.text"},"ts":1548944317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: as an abstract op instead of a prose?","msgtype":"m.text"},"ts":1548944334000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"No preference","msgtype":"m.text"},"ts":1548944340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although it does seem somewhat weird to me that not all of an object's layout is done using slots and abstract operations","msgtype":"m.text"},"ts":1548944359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, i'll figure this out","msgtype":"m.text"},"ts":1548944372000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1548944385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: idk, slots being used would still devolve to a list of entries/map of properties","msgtype":"m.text"},"ts":1548944414000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this just isolates the spec level stuff from host/user level","msgtype":"m.text"},"ts":1548944445000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"(though hosts can use slots)","msgtype":"m.text"},"ts":1548944468000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: fair, though it would be somewhat clearer that there's a container for this stuff","msgtype":"m.text"},"ts":1548944639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"michaelficarra: having not watched the presentation yet, what is the difference between your collect() modifications in https://github.com/tc39-transfer/proposal-iterator-helpers/issues/17 and reduce()?","msgtype":"m.text"},"ts":1548968122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"also interested ^","msgtype":"m.text"},"ts":1548968502000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: you can build the collect with reduce, but you can do a lot of things with reduce","msgtype":"m.text"},"ts":1548969170000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"It just sounds like the same thing, an initial value and an accumulator.","msgtype":"m.text"},"ts":1548969187000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"collect is reduce special-cased to accept just the combination and the empty value","msgtype":"m.text"},"ts":1548969191000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"reduce doesn't take an accumulator though","msgtype":"m.text"},"ts":1548969205000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"What is the difference between the reducer and an accumulator?","msgtype":"m.text"},"ts":1548969219000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can write collect in terms of reduce for you, hold on","msgtype":"m.text"},"ts":1548969221000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"The only signature I can imagine for accumulator is (soFar, thisValue) => combinedValue, which is the reducer (modulo thisArg)","msgtype":"m.text"},"ts":1548969238000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"`reduce((k, l) => [...l, k], [])`","msgtype":"m.text"},"ts":1548969287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is collect","msgtype":"m.text"},"ts":1548969301000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Right, I think I'm with Domenic that the proposed mod to `collect()` are literally just `reduce()`.","msgtype":"m.text"},"ts":1548969385000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Having a simple way to reduce into an Array is a good thing; I'm in favor of trivial `.collect()`.)","msgtype":"m.text"},"ts":1548969466000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1548969488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"okay, the difference is a bit subtle","msgtype":"m.text"},"ts":1548969621000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"reduce takes a \"container\" and an \"entry\" and combines them in some way, but the accumulator takes two \"container\"s and combines them","msgtype":"m.text"},"ts":1548969678000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"the difference is that reduce would require you to provide a \"pure\"/\"of\" function as well","msgtype":"m.text"},"ts":1548969698000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"consider me confused","msgtype":"m.text"},"ts":1548969708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess i'll need to watch the presentation","msgtype":"m.text"},"ts":1548969725000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reduce :: (a -> b -> a) -> a -> f b; collect :: (f a -> f a -> f a) -> f a -> g a","msgtype":"m.text"},"ts":1548969847000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if that helps at all","msgtype":"m.text"},"ts":1548969850000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"nope :D","msgtype":"m.text"},"ts":1548969881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What would the second container be here?","msgtype":"m.text"},"ts":1548969998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Given `Iterator([1,2,3]).collect((a,b)=>console.log(a,b)), what'll we log?","msgtype":"m.text"},"ts":1548970021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what is your \"empty\" value?","msgtype":"m.text"},"ts":1548970052000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Assume it's `[]`","msgtype":"m.text"},"ts":1548970060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"then `[], [1]`, `[1], [2]` and `[1,2], [3]`","msgtype":"m.text"},"ts":1548970090000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"assuming you also actually returned the concatenation","msgtype":"m.text"},"ts":1548970108000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"??? You're producing a *brand new* container to singly-wrap each of the items in the starting container?","msgtype":"m.text"},"ts":1548970110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes, because that's sometimes the only way you can do things","msgtype":"m.text"},"ts":1548970128000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Hmmmmm. Ok, I get that, sometimes the values in a monad can't be extracted directly.","msgtype":"m.text"},"ts":1548970157000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's right","msgtype":"m.text"},"ts":1548970174000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"unless they're also comonads :-)","msgtype":"m.text"},"ts":1548970184000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"It doesn't feel like this is a generalization of `collect()`, tho. It's a monadic reduce, rather than a foldable reduce.","msgtype":"m.text"},"ts":1548970192000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I called it a generalisation because I could write \"toArray\" as `.collect(Array.prototype.concat, [])` or `.collect(Array)` depending on how we design the API","msgtype":"m.text"},"ts":1548970243000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(what's the structure that lets you walk the monad like that, but only produce single-value monads? Clearly something foldable-related...)","msgtype":"m.text"},"ts":1548970246000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, yeah, but you can also write toArray with `reduce`, so the same argument applies.","msgtype":"m.text"},"ts":1548970290000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"whether you think of programming in terms of monads or not","msgtype":"m.text"},"ts":1548970312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, reduce is a generalisation of both of them","msgtype":"m.text"},"ts":1548970315000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I didn't plan to use the M word in this conversation lol :-P","msgtype":"m.text"},"ts":1548970338000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Haha, I used it because it's the right word for \"I can write functions overthe values in this structure, but can't actually pull them out to look at\"","msgtype":"m.text"},"ts":1548970370000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I really, *really* wish we didn't call them \"monads\", ugh. Makes them sound so foreign and weird. They're Chainables; you can chain them, just like Functors (ugh) are Mappables.","msgtype":"m.text"},"ts":1548970423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So anyway, I've got an IO<Array<Number>>. I can't pull out the individual array values, but I can return an IO<Number> for each.","msgtype":"m.text"},"ts":1548970485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, hm. Can I. That's basically a Traverse, and IO isn't Traversable.","msgtype":"m.text"},"ts":1548970513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"michaelficarra: got a concrete example? ^_^","msgtype":"m.text"},"ts":1548970526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh boy, off the top of my head?","msgtype":"m.text"},"ts":1548970544000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Hey, you proposed it, if you don't have a concrete use-case that's your own fault. ^_^","msgtype":"m.text"},"ts":1548970641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think my takeaway here is that it would be nice if .collect() was an alias for .collect(Array) and you could also do .collect(Map), .collect(Set), etc. and that would call the Map/Set constructors or .of or .from methods","msgtype":"m.text"},"ts":1548970661000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I like to accommodate others who have strangers needs than me","msgtype":"m.text"},"ts":1548970684000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I'm just a bridge","msgtype":"m.text"},"ts":1548970687000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Not sure about how that works with async","msgtype":"m.text"},"ts":1548970688000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: It produces a promise for the constructed object.","msgtype":"m.text"},"ts":1548970706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"still think Promise.all makes more sense for the async collect case","msgtype":"m.text"},"ts":1548970719000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Domenic: should work fine","msgtype":"m.text"},"ts":1548970721000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"So it collects into an... array? Then calls the Map() constructor?","msgtype":"m.text"},"ts":1548970737000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like, what is the intermediate holding area","msgtype":"m.text"},"ts":1548970745000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"More or less, yeah.","msgtype":"m.text"},"ts":1548970752000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we do have a common \"entries\" interface between all these items","msgtype":"m.text"},"ts":1548970782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"No generic \"add one more item\" protocol for the containers, so you have to do the whole thing at once and collect into an intermediate Array first.","msgtype":"m.text"},"ts":1548970795000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in the spec there's a AddEntriesFromIterable method","msgtype":"m.text"},"ts":1548970823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which all the individual constructors use","msgtype":"m.text"},"ts":1548970830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there could be some symbol that constructors expose to consume entries interfaces","msgtype":"m.text"},"ts":1548970844000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Like, would be more straightforward if they all had an `.addNext()` method that took an appropriately-shaped object (a value for Array and Set, a `[k,v]` pair for Map) matching each entry in their constructing iterators.","msgtype":"m.text"},"ts":1548970856000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"or maybe the instance","msgtype":"m.text"},"ts":1548970857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like Map.prototype[Symbol.addEntry] = Map.prototype.set","msgtype":"m.text"},"ts":1548970872000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Scope creep....","msgtype":"m.text"},"ts":1548970881000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe toArray() is simplest for now","msgtype":"m.text"},"ts":1548970885000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then you can just build an empty on at the start, async-pull and add as you go, then finally resolve the promise with the completed object when you've drained the iterator.","msgtype":"m.text"},"ts":1548970886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hah.","msgtype":"m.text"},"ts":1548970896000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or make collect() throw if called with more than 0 args so we can extend it in the future","msgtype":"m.text"},"ts":1548970913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"michaelficarra: Anyway, get the people you're bridging for to provide a concrete use-case so we can evaluate it. ^_^","msgtype":"m.text"},"ts":1548970917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Array always being the default.)","msgtype":"m.text"},"ts":1548970921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what would the internal makeup of collect be that using Array as a parameter works","msgtype":"m.text"},"ts":1548970942000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like calling with the final array?","msgtype":"m.text"},"ts":1548970959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if collect(Array) ~= Array(collect())","msgtype":"m.text"},"ts":1548970995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah except Array constructor is broken so probably .from()?","msgtype":"m.text"},"ts":1548971161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is gonna go watch Lonsdorf's lecture real quick.","msgtype":"m.emote"},"ts":1548971228000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"something interesting was Iterator.from","msgtype":"m.text"},"ts":1548971269000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if i do `Iterator.from({ next() {} })`, the idea was to push out something that has those methods and the correct prototype?","msgtype":"m.text"},"ts":1548971307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like inheriting from both objects at once...","msgtype":"m.text"},"ts":1548971319000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It inherits from the correct prototype, unclear exactly how","msgtype":"m.text"},"ts":1548971419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably it creates a wrapper that pulls","msgtype":"m.text"},"ts":1548971426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like the wrapper's next() calls the provided object's next()","msgtype":"m.text"},"ts":1548971439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sounds useful","msgtype":"m.text"},"ts":1548971461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I was thinking it would pull the methods from the appropriate places (ideally Symbol-valued properties that identify generally useful concepts)","msgtype":"m.text"},"ts":1548971677000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(I'm talking about protocols)","msgtype":"m.text"},"ts":1548971681000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Domenic: anyway I do want to rename collect to `toArray` I think","msgtype":"m.text"},"ts":1548971772000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if that's what it does","msgtype":"m.text"},"ts":1548971794000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`Array.from(iterable)`, `iterable.toArray()` is a nice symmetry","msgtype":"m.text"},"ts":1548971816000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/iterable/iterator/ I guess","msgtype":"m.text"},"ts":1548971824000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"michaelficarra: Ohhh, I see, you just want a monoidal reduce()","msgtype":"m.text"},"ts":1548972312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Not even a monadic one.","msgtype":"m.text"},"ts":1548972319000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm, Lonsdorf is playing some trickery here tho. In the transducer section they talk about `concat` as a reducer; there the signature is `Fa -> a -> Fa`. Then in the monoid section they pretend its signature is `Fa -> Fa -> Fa`. None of the reducer stuff uses monoids directly.","msgtype":"m.text"},"ts":1548972484000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i propose an implementation defined \"use monadic\" which overrides my proposal as needed","msgtype":"m.text"},"ts":1548972642000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But the \"monoidal fold\" operation is more traditionally written with a monoid-lifter and then the foldable of values. (And if you have a real Monoid thing, you don't need to specify the joiner or the empty value.)","msgtype":"m.text"},"ts":1548972667000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek: (sorry, I'm responding backwards a bit.)","msgtype":"m.text"},"ts":1548972687000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no you're fine i'm just failing at resting pragma jokes","msgtype":"m.text"},"ts":1548972720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So my point is, `Iterator([1,2,3]).collect(...)` wouldn't call the callback with an accumulator and `[1]`/etc, that's a different sort of method entirely.","msgtype":"m.text"},"ts":1548972853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unless I'm totally misreading.","msgtype":"m.text"},"ts":1548972857000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if it had a callback, i would hope it called it with the finished array","msgtype":"m.text"},"ts":1548972960000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm still unconvinced collect needs a callback (and to that end, changing it to toArray seems reasonable)","msgtype":"m.text"},"ts":1548972996000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I guess it's Haskell's `mconcat`?","msgtype":"m.text"},"ts":1548973160000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"my intuition before was that it was a MonadPlus but if we remove Monad, we're just left with a Monoid","msgtype":"m.text"},"ts":1548973187000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Yeah. So the signature you want is instead `iterator.collect(lifter)`, where `lifter` takes a value from the iterator and returns a Monoid wrapping that value. So `[1,2,3].collect(Sum)`, where `Sum` is a class implementing the three required monoid operations (`.of()`, `.empty()`, `.concat()`.","msgtype":"m.text"},"ts":1548973504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"`class Sum { constructor(val) { this.val = val; } empty() { return Sum(0); } concat(that) { return Sum(this.val + that.val); }}`","msgtype":"m.text"},"ts":1548973553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And then if the values in the iterator are *already* monoids, you can call it with no args.","msgtype":"m.text"},"ts":1548973627000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I figured we could do it without an \"of\"/\"pure\" though, as I mentioned above","msgtype":"m.text"},"ts":1548973631000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"But anyway, that's not .collect().","msgtype":"m.text"},"ts":1548973634000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Not sure how you'd do it without the lifting operation.","msgtype":"m.text"},"ts":1548973669000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah me either","msgtype":"m.text"},"ts":1548973686000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Your suggested signature is basically providing the monoid operations directly, rather than just giving a class.","msgtype":"m.text"},"ts":1548973697000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I suggested both","msgtype":"m.text"},"ts":1548973718000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I don't care which one we pick","msgtype":"m.text"},"ts":1548973732000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Ah, didn't see the monoid-only one.","msgtype":"m.text"},"ts":1548973735000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, and I guess we actually can't rely on the values already being monoids, since we don't know their type ahead of time, and thus can't select an empty value.","msgtype":"m.text"},"ts":1548973957000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the user needs to provide an empty","msgtype":"m.text"},"ts":1548974207000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Sure, if you're using a deconstructed monoid, where the function just takes all the bits itself rather than having them packaged into a pre-existing class.","msgtype":"m.text"},"ts":1548974268000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But then you're just reinventing reduce() directly, except less convenient.","msgtype":"m.text"},"ts":1548974282000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because rather than the signature being `reduce((acc,b)=>acc, empty)`, you have `collect((monoid, monoid)=>monoid, empty, val=>monoid)`","msgtype":"m.text"},"ts":1548974360000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"this seems like a scary api","msgtype":"m.text"},"ts":1548974408000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The main value in a monoidal reduce is that you can provide either (a) nothing, relying on the contents being monoidal, or (b) a lifter function only; because of type knowledge it automagically works correctly even when the iterator is empty.","msgtype":"m.text"},"ts":1548974422000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Can't do that in JS; monoids don't have as much justification.","msgtype":"m.text"},"ts":1548974436000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"empty iterator is empty array","msgtype":"m.text"},"ts":1548974449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how map on an empty array is still safe","msgtype":"m.text"},"ts":1548974456000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: No, if your monoid is Sum, then empty iterator should be 0.","msgtype":"m.text"},"ts":1548974467000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If Product, should be 1. Etc.","msgtype":"m.text"},"ts":1548974472000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you mean","msgtype":"m.text"},"ts":1548974499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the iterator has stuff","msgtype":"m.text"},"ts":1548974504000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you want the starting value to be 1","msgtype":"m.text"},"ts":1548974507000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"otherwise you want the starting value to be 0","msgtype":"m.text"},"ts":1548974512000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1548974515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it depends on the operation","msgtype":"m.text"},"ts":1548974519000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"then i don't understand what the existing reduce method is missing","msgtype":"m.text"},"ts":1548974532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`arr.reduce((a, b) => a + b, x)` should have `x` be `0`","msgtype":"m.text"},"ts":1548974537000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but `arr.reduce((a, b) => a * b, x)` should have `x` be `1`","msgtype":"m.text"},"ts":1548974543000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1548974546000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah sure","msgtype":"m.text"},"ts":1548974556000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, if you call `[Sum(1), Sum(2), Sum(3)].collect()`, you should get back a `Sum(6)`. But if you call `[].collect()`, you should get back a `Sum(0)`, *assuming the language knows you intend that to be an Array of Sums*.","msgtype":"m.text"},"ts":1548974573000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since JS can't know that, you can't get that ability.","msgtype":"m.text"},"ts":1548974579000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is this about wrapping the initial value into the thing that reduces","msgtype":"m.text"},"ts":1548974580000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rather than them being separate args","msgtype":"m.text"},"ts":1548974598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So you still have to pass in an empty value, and you've lost most of the reason to use monoids in the first place, versus just using reducers.","msgtype":"m.text"},"ts":1548974599000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd rather `[1, 2, 3][Symbol.iterator]().collect({ [Applicative.pure](a) { return { value: a }; }, [Semigroup.concat](a, b) { return { value: a.value + b.value }; }, [Monoid.empty]() { return { value: 0 }; } }).value` than do the reduction","msgtype":"m.text"},"ts":1548975244000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I'm... not sure how serious you are. Versus `[1,2,3].reduce((a,b)=>a+b, 0)`","msgtype":"m.text"},"ts":1548975623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well it's not like I'm going to write those every time","msgtype":"m.text"},"ts":1548975718000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"If you're pre-writing the class, you can prewrite `function summer(a,b) { return a+b; }` and then just call `[1,2,3].reduce(summer, 0)`. ^_^","msgtype":"m.text"},"ts":1548975774000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Also, pedantry: the necessary method isn't Applicative.pure, but rather Pointed.of; monoids have no reliance on Applicative, but this usage of them does rely on the type being Pointed.)","msgtype":"m.text"},"ts":1548975906000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the usefulness of Pointed on its own is contentious","msgtype":"m.text"},"ts":1548976742000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I would not support introduction of a protocol that just supported `a -> f a` because you can't get anything for free from just that protocol","msgtype":"m.text"},"ts":1548976827000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Sure, sure. Thus the pedantry.","msgtype":"m.text"},"ts":1548976829000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also, on the name pedantry for transducers","msgtype":"m.text"},"ts":1548976859000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"(But it *is* weird to have a Monoid protocol that depends on part of the Applicative protocol for no clear reason.)","msgtype":"m.text"},"ts":1548976860000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it really is a pattern, not a particular fucntion or data structure","msgtype":"m.text"},"ts":1548976869000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I didn't re-watch Brian's talk, but I think he explains it in there actually","msgtype":"m.text"},"ts":1548976904000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"did he go into recursion schemes in his talk?","msgtype":"m.text"},"ts":1548976914000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"transducers are just the usage of a specialised recursion scheme: specialised to iterable structures and specialised to an algebra that is built up from composed functions for the one (Cons) constructor","msgtype":"m.text"},"ts":1548976982000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"He only mentions transducers in the context I'm familiar with: functions that transform a reducer to other reducer.","msgtype":"m.text"},"ts":1548977251000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thus the name.","msgtype":"m.text"},"ts":1548977264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I know \"transduce\" has the more general definition that's basically the same thing too, but it's usage wrt reducers in particular seems to mostly be a \"transform\"+\"reduce\" neologism pun.)","msgtype":"m.text"},"ts":1548977321000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"perks up at the magic word","msgtype":"m.emote"},"ts":1548977334000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"that wasn't enough payoff in that mention of \"pun\" :-P","msgtype":"m.text"},"ts":1548977499000,"senderName":"jwalden","senderId":"jwalden@irc"}
]