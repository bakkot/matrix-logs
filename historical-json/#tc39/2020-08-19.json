[
{"content":{"body":"I’m trying to get back to building and editing https://github.com/js-choi/proposal-smart-pipelines/, but I’m getting an error from ecmarkdown about my old spec source code: “expecting ordered list, got ul”. Is there a way to get a location of the error in the spec source?","msgtype":"m.text"},"ts":1597799064000,"senderName":"jschoi_","senderId":"jschoi_@irc"},
{"content":{"body":"jschoi_ you can use the version of ecmarkdown on github, which has significantly better error messages: https://github.com/tc39/ecmarkup/","msgtype":"m.text"},"ts":1597799111000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Great, thanks.","msgtype":"m.text"},"ts":1597799127000,"senderName":"jschoi_","senderId":"jschoi_@irc"},
{"content":{"body":"especially if you pass --verboose","msgtype":"m.text"},"ts":1597799130000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*--verbose","msgtype":"m.text"},"ts":1597799133000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*ecmarkup, not ecmarkdown, sorry","msgtype":"m.text"},"ts":1597799151000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Thanks, forgot about `--verbose` too. Been a long time.","msgtype":"m.text"},"ts":1597799166000,"senderName":"jschoi_","senderId":"jschoi_@irc"},
{"content":{"body":"Verboose…","msgtype":"m.text"},"ts":1597799167000,"senderName":"jschoi_","senderId":"jschoi_@irc"},
{"content":{"body":"I guess I should cut a release and update the docs. I'd been holding off because I wanted to address a last case for ecma402, but it's probably worth getting the error messages released","msgtype":"m.text"},"ts":1597799244000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jschoi_: I just published ecmarkup v4.0.0, so you can switch to that one instead of pointing at github","msgtype":"m.text"},"ts":1597800829000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Thank you very much!","msgtype":"m.text"},"ts":1597800923000,"senderName":"jschoi_","senderId":"jschoi_@irc"},
{"content":{"body":"oo, github is down","msgtype":"m.text"},"ts":1597803665000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"freeeeeeeeedom","msgtype":"m.text"},"ts":1597803693000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aw it's back up","msgtype":"m.text"},"ts":1597803769000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"IRCCloud was down earlier too","msgtype":"m.text"},"ts":1597804165000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Anyone here familiar with the TypeScript community? Is https://github.com/heycam/webidl/issues/60#issuecomment-676033407 intentional?","msgtype":"m.text"},"ts":1597830554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because there is no observable difference between return undefined or implicitly return","msgtype":"m.text"},"ts":1597831088000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Therefore I think it's okay","msgtype":"m.text"},"ts":1597831104000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Well, but it's not, right? It says there's an error","msgtype":"m.text"},"ts":1597831189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. But maybe I can find some reason for it. I don't know if it is intentional, the return type annotation means you should return something. If you type it as void you are telling the type system that this function should not have return value or it's return value should be ignored. if you are type at anything else you are telling the type system that you must explicitly return something of type T.","msgtype":"m.text"},"ts":1597831448000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Yeah. But maybe I can find some reason for it. I don't know if it is intentional, the return type annotation means you should return something. If you type it as void you are telling the type system that this function should not have return value or it's return value should be ignored. if you are type at anything else you are telling the type system that you must explicitly return something of type T.","msgtype":"m.text"},"ts":1597831525000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Thanks, if you find out please leave a comment in the above issue or ping me.","msgtype":"m.text"},"ts":1597832175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not unreasonable for a richer type system to distinguish between \"undefined\" and the bottom value (what's returned from a \"no return value\" function).","msgtype":"m.text"},"ts":1597855289000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JS doesn't draw a distinction there, but I think it's okay for TS to draw such a distinction, at least theoretically. (There may be practical reasons to not do this, I dunno.)","msgtype":"m.text"},"ts":1597855325000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Basically what JackWorks said - an type that means \"you shouldn't use the return value of this function at all\" is reasonable to distinguish from \"this function can return undefined\" in a type system.","msgtype":"m.text"},"ts":1597855401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i agree - also that it doesn't make sense for webidl or JS to distinguish them","msgtype":"m.text"},"ts":1597858253000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jgraham found https://stackoverflow.com/questions/58885485/why-does-typescript-have-both-void-and-undefined which justifies void for a different reason that seems super reasonable","msgtype":"m.text"},"ts":1597859550000,"senderName":"annevk","senderId":"annevk@irc"}
]