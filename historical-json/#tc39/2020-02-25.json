[
{"content":{"body":"shu: does chrome have a counter for __proto__ usage?","msgtype":"m.text"},"ts":1582655376000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: are you implying there's even the remotest chance it'd be web compatible to get rid of?","msgtype":"m.text"},"ts":1582655688000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: no","msgtype":"m.text"},"ts":1582655694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1582655695000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what'd the counter be for?","msgtype":"m.text"},"ts":1582655704000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/nodejs/node/issues/31951","msgtype":"m.text"},"ts":1582655710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"some bit of proof that this can't happen","msgtype":"m.text"},"ts":1582655731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah thanks","msgtype":"m.text"},"ts":1582655756000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ah, specifically for the getter/setter on Object.prototype","msgtype":"m.text"},"ts":1582656049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean both if possible","msgtype":"m.text"},"ts":1582656062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i assume the object literal extension would be like 100% of sites","msgtype":"m.text"},"ts":1582656070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the accessor would be 99.95%","msgtype":"m.text"},"ts":1582656078000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I doubt the accessor is anything like that commonly used","msgtype":"m.text"},"ts":1582656112000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yeah I'm sure it's a fair bit","msgtype":"m.text"},"ts":1582656115000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: I don't understand your point in that thread; it would be an opt-in flag, just like e.g. having a CSP to disable eval","msgtype":"m.text"},"ts":1582656136000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"CSP is allowed by the spec via hooks","msgtype":"m.text"},"ts":1582656305000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"being \"opt in\" imo doesn't just make everything ok","msgtype":"m.text"},"ts":1582656333000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah but like","msgtype":"m.text"},"ts":1582656338000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do not understand why you think this isn't OK","msgtype":"m.text"},"ts":1582656344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is a security issue","msgtype":"m.text"},"ts":1582656347000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actual people actually suffer because of this","msgtype":"m.text"},"ts":1582656353000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like 3 or 4 of packages i maintain got CVE reports 2 years ago when they all went out re prototype pollution, i'm aware it's an issue. but i'm also aware it's an issue for a minority of use cases, and all popular frameworks and libs presumably have long been fixed","msgtype":"m.text"},"ts":1582656438000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if it's this severe a problem, then we should solve it in the language","msgtype":"m.text"},"ts":1582656478000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and in your view is unacceptable for node to have a workaround which involves disabling part of the language in the - at minimum - years it will take us to solve it \"in the language\"?","msgtype":"m.text"},"ts":1582656579000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"a workaround only employable by the people already aware of the issue, who already know how to select libraries that solve for it?","msgtype":"m.text"},"ts":1582656955000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the security argument supports disabling it by default, not via a flag","msgtype":"m.text"},"ts":1582656971000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm just not sure anyone could ever actually run with the flag","msgtype":"m.text"},"ts":1582657052000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unless you have some serious NIH","msgtype":"m.text"},"ts":1582657064000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's at least something that can be somewhat empirically tested","msgtype":"m.text"},"ts":1582657089000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i'm skeptical yes","msgtype":"m.text"},"ts":1582657092000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's my only problem with the flag though","msgtype":"m.text"},"ts":1582657192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"grepping around my local codebases, there's a lot of uses in babel's old helpers","msgtype":"m.text"},"ts":1582657244000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but eslint has exactly one use in any transitive dependency which actually matters (in chalk)","msgtype":"m.text"},"ts":1582657258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it creeps up on you","msgtype":"m.text"},"ts":1582657439000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"uses of the getter, or of the setter?","msgtype":"m.text"},"ts":1582657466000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the setter","msgtype":"m.text"},"ts":1582658205000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just put `Object.defineProperty(Object.prototype, '__proto__', { set: void 0 })` in the entrypoint before all the requires and started running code","msgtype":"m.text"},"ts":1582658225000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it worked ok","msgtype":"m.text"},"ts":1582658229000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1582658357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"could always just throw it onto the policies feature if people think the flag should be opt-out instead of opt-in. If you opt-in to policies a some things are prevented by default anyway","msgtype":"m.text"},"ts":1582658798000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you mean opt out of __proto__, not opt out of __proto__ being deleted, right?","msgtype":"m.text"},"ts":1582658857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm still curious to understand what kind of person either lacks the knowledge to prevent prototype pollution or works in a system that isn't set up to prevent it, that would also choose to disable the setter","msgtype":"m.text"},"ts":1582658860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: opt-out happens to stuff already by just using policies, you'd have to opt back in to the accessor","msgtype":"m.text"},"ts":1582658903000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh you mean if policies are enabled","msgtype":"m.text"},"ts":1582658932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"policies / SES / / CSP / etc. all take the opt-in to a \"safer\" set of defaults","msgtype":"m.text"},"ts":1582658944000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1582658946000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"then you have to opt-out selectively for things","msgtype":"m.text"},"ts":1582658967000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"opt out of ==","msgtype":"m.text"},"ts":1582658992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to my knowledge language syntax can't be opted out, so you couldn't opt-out of __proto__ in literals","msgtype":"m.text"},"ts":1582659030000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or ==","msgtype":"m.text"},"ts":1582659034000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can hook into == with Symbol.toPrimitive tho","msgtype":"m.text"},"ts":1582659063000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you could make an id for every possible JS value... I guess? but even then it would be evaded by people using stuff that doesn't inherit your hook","msgtype":"m.text"},"ts":1582659123000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1582659150000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://www.npmjs.com/package/vengeful-god has a lot of dumb ideas","msgtype":"m.text"},"ts":1582659175000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://www.npmjs.com/package/noasi","msgtype":"m.text"},"ts":1582659343000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i don't see a counter on quick glance","msgtype":"m.text"},"ts":1582659915000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: that is, none of the counters with Prototype in the name seems to record general use of __proto__, always something more specific about certain prototypes","msgtype":"m.text"},"ts":1582659943000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yeah I couldn't find anything either","msgtype":"m.text"},"ts":1582660322000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wish node could contribute stats","msgtype":"m.text"},"ts":1582660335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: unguarded assignment wouldn't be too hard to detect but lots of false positives","msgtype":"m.text"},"ts":1582661223000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"then just run against the npm registry","msgtype":"m.text"},"ts":1582661233000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]