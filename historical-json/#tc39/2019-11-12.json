[
{"content":{"body":"re-reading and trying to understand why `extends null` is still broken","msgtype":"m.text"},"ts":1573575555000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: why it doesn't work or why it hasn't been fixed yet","msgtype":"m.text"},"ts":1573575640000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"SuperCall seeing `null` seems to be the gist of it","msgtype":"m.text"},"ts":1573575657000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm more curious as to why we haven't fixed it","msgtype":"m.text"},"ts":1573575667000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1321","msgtype":"m.text"},"ts":1573575667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems i missed the birthday of my pr","msgtype":"m.text"},"ts":1573575686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aklein: i know you tried to fix `extends null` a while back as well. didn't see you on ^ . do you have any opinions?","msgtype":"m.text"},"ts":1573575807000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don’t understand why we wouldn’t just make super() largely a noop when the superclass is null","msgtype":"m.text"},"ts":1573577500000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it shouldn’t be possible to have a derived class access the receiver without also having an explicit super; it shouldn’t be possible for a base class to have super; and since extends is an expression it isn’t possible to statically know if it’s extending null, so I’m not sure what other options exist","msgtype":"m.text"},"ts":1573577543000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: do you mean when the superclass is _currently_ null?","msgtype":"m.text"},"ts":1573577675000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1573577691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and also the class had an extends clause, presumably","msgtype":"m.text"},"ts":1573577701000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1573577705000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that seems like a reasonable enough option; you should prepare a PR :P","msgtype":"m.text"},"ts":1573577768000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i added that pr to the agenda, can we keep it all in there for tracking","msgtype":"m.text"},"ts":1573577837000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"(as to \"what other options exist\", see https://github.com/tc39/ecma262/pull/1321 )","msgtype":"m.text"},"ts":1573577840000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i guess i assumed there was a reason that approach wasn’t used. No?","msgtype":"m.text"},"ts":1573577855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not that I'm aware of","msgtype":"m.text"},"ts":1573577871000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"could ask devsnek","msgtype":"m.text"},"ts":1573577883000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1573577911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: how does my approach differ from your PR?","msgtype":"m.text"},"ts":1573577932000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(i have no context built up on this part of the spec)","msgtype":"m.text"},"ts":1573577953000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not sure what you're saying","msgtype":"m.text"},"ts":1573577956000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: the semantics of that PR are summarized in https://github.com/tc39/ecma262/pull/1321#issuecomment-439249010, particularly case 3","msgtype":"m.text"},"ts":1573577981000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"the differences are that a.) your approach switches on the runtime value of the superclass rather than its class at the time it is declared and b.) your approach requires invokation of super in classes which extend null, rather than merely allowing it","msgtype":"m.text"},"ts":1573578034000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"*rather than its value at the time it is declared","msgtype":"m.text"},"ts":1573578065000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"is \"your\" me or ljhrab","msgtype":"m.text"},"ts":1573578075000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ljharb","msgtype":"m.text"},"ts":1573578082000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"cuz those two properties sound good to me","msgtype":"m.text"},"ts":1573578087000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1573578110000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think it should be required for access to this","msgtype":"m.text"},"ts":1573578117000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"whether it switches on the runtime value or not i don’t actually have strong opinions on; it’d be whatever super does when the proto is changed","msgtype":"m.text"},"ts":1573578142000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if super follows the change, then it’d have to switch on the runtime value too","msgtype":"m.text"},"ts":1573578157000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm fine with whatever as long as its not the current behaviour","msgtype":"m.text"},"ts":1573578165000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"super switches on runtime value when the proto is changed","msgtype":"m.text"},"ts":1573578188000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"then it should also be able to “call” null, by doing nothing except setting up the this","msgtype":"m.text"},"ts":1573578208000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"imo","msgtype":"m.text"},"ts":1573578216000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that could be written up","msgtype":"m.text"},"ts":1573578226000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait","msgtype":"m.text"},"ts":1573578237000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"maybe that was false","msgtype":"m.text"},"ts":1573578239000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i know there's HomeObject or something","msgtype":"m.text"},"ts":1573578259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if super doesn’t switch, then super always “calls” the original one, whether it’s null or not","msgtype":"m.text"},"ts":1573578259000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no I was right the first time OK","msgtype":"m.text"},"ts":1573578294000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"just had the wrong test","msgtype":"m.text"},"ts":1573578297000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"GetSuperConstructor does activeFunction.[[GetPrototypeOf]]()","msgtype":"m.text"},"ts":1573578302000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so basically the place where it calls that constructor should be an optional call :-p","msgtype":"m.text"},"ts":1573578320000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and everything else would stay the same?","msgtype":"m.text"},"ts":1573578325000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe?","msgtype":"m.text"},"ts":1573578337000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can test this in engine262","msgtype":"m.text"},"ts":1573578341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`class A { constructor(){ console.log('A'); } }; class B { constructor(){ console.log('B'); } }; class C extends A {}; Object.setPrototypeOf(C, B); new C;`","msgtype":"m.text"},"ts":1573578358000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"please; I never really figured out why this was a hard thing to solve but i had other stuff to focus on","msgtype":"m.text"},"ts":1573578364000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: not _exactly_ since it would still need to evaluate the arguments list, which optional call doesn't do","msgtype":"m.text"},"ts":1573578379000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"(and set `this`)","msgtype":"m.text"},"ts":1573578387000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"that's actually not a problem","msgtype":"m.text"},"ts":1573578389000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thanks to how SuperCall evaluation works","msgtype":"m.text"},"ts":1573578395000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but yeah I think that is the relevant change","msgtype":"m.text"},"ts":1573578399000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"devsnek: but it should be: https://github.com/tc39/ecma262/issues/1351","msgtype":"m.text"},"ts":1573578420000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"bakkot: ok fair, pretty close tho","msgtype":"m.text"},"ts":1573578440000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot: i mean not a problem for this change","msgtype":"m.text"},"ts":1573578446000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah","msgtype":"m.text"},"ts":1573578480000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"seems like we just need to go back to the committee with both of those changes and we could fix super :-p","msgtype":"m.text"},"ts":1573578483000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just being pedantic","msgtype":"m.text"},"ts":1573578483000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"to fix the ordering it just looks like a single operation ordering swap?","msgtype":"m.text"},"ts":1573578779000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`class X extends null` currently gets the prototype %Function.prototype%","msgtype":"m.text"},"ts":1573578886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not null","msgtype":"m.text"},"ts":1573578910000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that seems fine since it isn't the instance","msgtype":"m.text"},"ts":1573578913000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but that means we can't detect it","msgtype":"m.text"},"ts":1573578924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the instance protos are null","msgtype":"m.text"},"ts":1573578925000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: the prototype of the class is used to determine what `super()` calls","msgtype":"m.text"},"ts":1573578938000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"ljharb: bakkot: this is probably why the pr is the way it is","msgtype":"m.text"},"ts":1573578947000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the info that the heritage was null is lost","msgtype":"m.text"},"ts":1573578962000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead we have Function.prototype","msgtype":"m.text"},"ts":1573578972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is not constructable","msgtype":"m.text"},"ts":1573578983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it could be stored in another slot tho, no?","msgtype":"m.text"},"ts":1573579018000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"slots don't update as the prototype changes though","msgtype":"m.text"},"ts":1573579040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like it’s the original [[Prototype]] of the .prototype","msgtype":"m.text"},"ts":1573579048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh right, so it’s the latest [[Prototype]] of the .prototype then?","msgtype":"m.text"},"ts":1573579058000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1573579069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the problem is that we can't tell the difference from","msgtype":"m.text"},"ts":1573579112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"function Y() {} Y.prototype = null; class X extends Y {}","msgtype":"m.text"},"ts":1573579121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"vs class X extends null","msgtype":"m.text"},"ts":1573579127000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except that the latter gets %Function.prototype%","msgtype":"m.text"},"ts":1573579157000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which isn't constructable","msgtype":"m.text"},"ts":1573579160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"could we just make it get the prototype `null`? does anyone actually need classes themselves to inherit from Function.prototype?","msgtype":"m.text"},"ts":1573579162000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i'd be fine with changing it","msgtype":"m.text"},"ts":1573579174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it would be visible","msgtype":"m.text"},"ts":1573579181000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually wait that prototype is important","msgtype":"m.text"},"ts":1573579196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"threw up a PR to fix eval ordering","msgtype":"m.text"},"ts":1573579213000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cuz Function.prototype has methods on it","msgtype":"m.text"},"ts":1573579216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"classes themselves can’t change there i think","msgtype":"m.text"},"ts":1573579227000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what should `(class extends null).toString` be","msgtype":"m.text"},"ts":1573579243000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the classes .prototype is null, no?","msgtype":"m.text"},"ts":1573579243000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the classes .prototype is an object with a null prototype","msgtype":"m.text"},"ts":1573579261000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"honestly i'd be fine with changing the behaviour if the prototype is Function.prototype","msgtype":"m.text"},"ts":1573579332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so you can get the null off the classes prototype","msgtype":"m.text"},"ts":1573579392000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: yeah, works for me","msgtype":"m.text"},"ts":1573579429000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don’t think class extends Function or Function.prototype should break because of this change","msgtype":"m.text"},"ts":1573579464000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the change would be, it would make `class extends Function.prototype` work","msgtype":"m.text"},"ts":1573579493000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"... I think","msgtype":"m.text"},"ts":1573579494000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"(currently it does not)","msgtype":"m.text"},"ts":1573579500000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah that's what it is","msgtype":"m.text"},"ts":1573579516000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and setting the prototype of a class to null would throw","msgtype":"m.text"},"ts":1573579526000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: wait, _setting_ it would throw, or would make the class non-constructible?","msgtype":"m.text"},"ts":1573579546000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"it would make the class impossible to construct","msgtype":"m.text"},"ts":1573579557000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's the case currently, no?","msgtype":"m.text"},"ts":1573579608000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"should be","msgtype":"m.text"},"ts":1573579646000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/41284653.png","msgtype":"m.text"},"ts":1573579654000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the diff is just https://gc.gy/41284695.png","msgtype":"m.text"},"ts":1573579703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, you would really want to allow Function.prototype from any realm","msgtype":"m.text"},"ts":1573579765000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but otherwise yeah","msgtype":"m.text"},"ts":1573579767000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"looking forward to Function.isFunctionPrototype","msgtype":"m.text"},"ts":1573579791000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(or at least the realm the class was defined in, I guess)","msgtype":"m.text"},"ts":1573579791000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah i can change that when i write it up i think","msgtype":"m.text"},"ts":1573579818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I’m confused, why would we want to conflate Function.prototype with a null .prototype.[[Prototype]]","msgtype":"m.text"},"ts":1573579819000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think you're the one conflating it","msgtype":"m.text"},"ts":1573579840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol maybe","msgtype":"m.text"},"ts":1573579844000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right now you could do","msgtype":"m.text"},"ts":1573579852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you said the null gets lost; isn’t it always on .prototypr.[[Prototype]]?","msgtype":"m.text"},"ts":1573579858000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"function X() {} X.prototype = null; class Y extends X {}","msgtype":"m.text"},"ts":1573579866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Object.getPrototypeOf(Y.prototype) is null","msgtype":"m.text"},"ts":1573579876000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, so once that’s found, it hits the special behavior","msgtype":"m.text"},"ts":1573579892000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can get that directly from X","msgtype":"m.text"},"ts":1573579901000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but we aren't extending null","msgtype":"m.text"},"ts":1573579903000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we're extending X","msgtype":"m.text"},"ts":1573579908000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"X is a proper normal constructor","msgtype":"m.text"},"ts":1573579919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right so when Y calls super, it calls X, which works, and doesn’t have a super call so it’s fine","msgtype":"m.text"},"ts":1573579996000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the only issue is a class that extends null and calls super, i thought","msgtype":"m.text"},"ts":1573580013000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and that class being constructed, or extended and constructed)","msgtype":"m.text"},"ts":1573580025000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the problem is weird in general","msgtype":"m.text"},"ts":1573580033000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure what you're suggesting","msgtype":"m.text"},"ts":1573580053000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"activeFunction.prototype.[[Prototype]] doesn't correlate to whether or not its safe for super() to be an actual call","msgtype":"m.text"},"ts":1573580078000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: https://gist.github.com/bakkot/77ead596161e1e499af9b9758cf04379","msgtype":"m.text"},"ts":1573580281000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"devsnek: though, another option here is to just make Function.prototype constructible","msgtype":"m.text"},"ts":1573580319000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I guess that might well actually break someone :(","msgtype":"m.text"},"ts":1573580326000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"that's probably going too far yeah","msgtype":"m.text"},"ts":1573580350000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it isn't totally unreasonable","msgtype":"m.text"},"ts":1573580366000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"what if we just disallowed `extends null`","msgtype":"m.text"},"ts":1573580373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's callable after all","msgtype":"m.text"},"ts":1573580379000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and made people do `Object.setPrototypeOf(this, null)` in their constructors","msgtype":"m.text"},"ts":1573580381000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1573580399000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"or Object.setPrototypeOf(C.prototype, null)","msgtype":"m.text"},"ts":1573580412000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess people already do the latter","msgtype":"m.text"},"ts":1573580419000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i do the latter for sure","msgtype":"m.text"},"ts":1573580443000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it is inconvenient but 🤷","msgtype":"m.text"},"ts":1573580453000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot: actually, making Function.prototype constructable wouldn't work i don't think","msgtype":"m.text"},"ts":1573580515000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1573580527000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1573580529000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"it wouldn't return ObjectCreate(null)","msgtype":"m.text"},"ts":1573580537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean we could specify it to return a null object","msgtype":"m.text"},"ts":1573580561000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that would be weird","msgtype":"m.text"},"ts":1573580564000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you make it depend on new.target, like classes do","msgtype":"m.text"},"ts":1573580573000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't mean weird in spec text","msgtype":"m.text"},"ts":1573580590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if new.target extends null XD","msgtype":"m.text"},"ts":1573580601000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1573580630000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess all these options can be presented to committee","msgtype":"m.text"},"ts":1573580637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot: ah, i see what you mean","msgtype":"m.text"},"ts":1573580780000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot: and `class X extends Function.prototype {}` should throw, and not noop","msgtype":"m.text"},"ts":1573580801000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I don't care about that one","msgtype":"m.text"},"ts":1573580826000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"if making that work makes other things which should work do so, I'm fine with it","msgtype":"m.text"},"ts":1573580849000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"devsnek: you wouldn't make it return `Object.create(null)`; you would make it return `Object.create(new.target.prototype)`","msgtype":"m.text"},"ts":1573580904000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"which seems not totally unreasonable to me?","msgtype":"m.text"},"ts":1573580919000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1573580971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so does this have a test262 test then? https://bugs.webkit.org/show_bug.cgi?id=203957","msgtype":"m.text"},"ts":1573581206000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"Does this seem like something you’d want to change?\" is a surprising question since it sounds like something you'd only ask about unspec'ed behavior, but I don't think that's the case, right?","msgtype":"m.text"},"ts":1573581316000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"something about tc39 PRs seems to make suggestion commits not want to merge","msgtype":"m.text"},"ts":1573587693000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it's when the suggester has write access; it's a known github bug","msgtype":"m.text"},"ts":1573588000000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thats kind of hilarious","msgtype":"m.text"},"ts":1573588013000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1573588020000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or rather when both the suggester and PR author do, i think","msgtype":"m.text"},"ts":1573588030000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1573588044000,"senderName":"devsnek","senderId":"devsnek@irc"}
]