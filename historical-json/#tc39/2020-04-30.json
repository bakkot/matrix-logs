[
{"content":{"body":"i'm wondering if there might be a way to specify a method for sync and async iterator prototypes at the same time","msgtype":"m.text"},"ts":1588209245000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sort of got this thing going https://gc.gy/55914273.png","msgtype":"m.text"},"ts":1588209281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: is there some issue with netlify?","msgtype":"m.text"},"ts":1588223696000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yep, they won't give us a free account without compulsory advertising, and they'll shut us down after today","msgtype":"m.text"},"ts":1588223768000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh that's unfortunate","msgtype":"m.text"},"ts":1588223781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: and any service that forces \"free\" accounts to advertise isn't free, and isn't something i'll be recommending to anyone ever again","msgtype":"m.text"},"ts":1588223788000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"otherwise it worked great tho","msgtype":"m.text"},"ts":1588223794000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah that's kind of a shame","msgtype":"m.text"},"ts":1588223827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is free in the sense students care about, just not so much in the sense engineers trying to avoid an expense report care about","msgtype":"m.text"},"ts":1588224266000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"also not free in the sense that the ecosystem they're hoping to lure, open source, cares about.","msgtype":"m.text"},"ts":1588224344000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I dunno, that's definitely the sense I cared about when I was publishing open source stuff in college","msgtype":"m.text"},"ts":1588224369000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"has anyone ever come across js code that didn't evaluate to what they expected in when entered in a repl","msgtype":"m.text"},"ts":1588278910000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how `while (true) { 5; break; }` evaluates to 5","msgtype":"m.text"},"ts":1588278944000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although that one doesn't seem too surprising","msgtype":"m.text"},"ts":1588278958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/proposal-do-expressions/issues/21","msgtype":"m.text"},"ts":1588279218000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"well yes i was thinking about do expressions","msgtype":"m.text"},"ts":1588279240000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think people are generally very surprised by the results in repl","msgtype":"m.text"},"ts":1588279267000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least that is my theory","msgtype":"m.text"},"ts":1588279270000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait whoa","msgtype":"m.text"},"ts":1588279321000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh maybe this did come up in the context of do exprs and I let it go past me but","msgtype":"m.text"},"ts":1588279348000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I didn't know `eval('while (true) { 5; break; }')` would not return undefined","msgtype":"m.text"},"ts":1588279387000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1588279396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah break and continue completions have an ~empty~ [[Value]]","msgtype":"m.text"},"ts":1588279424000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so it gets replaced by the value of the last item in the statement list","msgtype":"m.text"},"ts":1588279434000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mind blown","msgtype":"m.text"},"ts":1588279457000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I thought completion values were purely spec-internal up 'til now","msgtype":"m.text"},"ts":1588279470000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean they kind of are","msgtype":"m.text"},"ts":1588279485000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in terms of implementation you have a stack or accumulator","msgtype":"m.text"},"ts":1588279499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the last thing that modified the stack/accumulator is the `5`","msgtype":"m.text"},"ts":1588279506000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(which is kind of silly because I've definitely looked at the thread bakkot linked; clearly something failed to click before...)","msgtype":"m.text"},"ts":1588279523000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"isn't that specific to SM and V8 respectively though","msgtype":"m.text"},"ts":1588279567000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1588279599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"SM bytecode and V8 bytecode are centered around stack and accumulator respectively but this isn't so for JSC","msgtype":"m.text"},"ts":1588279634000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1588279650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"registers too","msgtype":"m.text"},"ts":1588279658000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1588279660000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i just meant","msgtype":"m.text"},"ts":1588279672000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have some place where you're expecting a value","msgtype":"m.text"},"ts":1588279682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and break doesn't touch it","msgtype":"m.text"},"ts":1588279685000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is a shame that if statements return undefined instead of empty though","msgtype":"m.text"},"ts":1588279744000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that was changed in ES6 actually","msgtype":"m.text"},"ts":1588279765000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah i know","msgtype":"m.text"},"ts":1588279769000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well anyway i was just thinking","msgtype":"m.text"},"ts":1588279796000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: {}+[] was the triadtional answer, but repls might have fixed that now","msgtype":"m.text"},"ts":1588279797000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i assume we could get browsers on board with changing a number of these things as part of the do expressions proposal, if we all agreed the change was good","msgtype":"m.text"},"ts":1588279804000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nope, still there","msgtype":"m.text"},"ts":1588279819000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in chrome, at least","msgtype":"m.text"},"ts":1588279823000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think that completion values no longer have any cases where something either is or is not empty depending on runtime values","msgtype":"m.text"},"ts":1588279824000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"which I am happy about","msgtype":"m.text"},"ts":1588279827000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"TabAtkins: in the repl proposal, lookahead = { is parsed as an object literal","msgtype":"m.text"},"ts":1588279836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but anyway my idea was that people generally don't seem bamboozled by how the repl behaves (block vs object literal aside)","msgtype":"m.text"},"ts":1588279870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: interestingly in the node repl it eagerly tries to wrap the input in (), so it parses as object literal","msgtype":"m.text"},"ts":1588279939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, that's the behavior I'd naively expect.","msgtype":"m.text"},"ts":1588279952000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"RAther than {}+[] being a block followed by +[]","msgtype":"m.text"},"ts":1588279961000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, that's literally the only thing I've been confused about","msgtype":"m.text"},"ts":1588279980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we should've used {||} for blocks /s","msgtype":"m.text"},"ts":1588279983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should've used `<>`","msgtype":"m.text"},"ts":1588280067000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and had the token between key and value be `=`","msgtype":"m.text"},"ts":1588280068000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"so it would look like HTML","msgtype":"m.text"},"ts":1588280069000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1588280072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"interestingly the completion reform makes js more like rust","msgtype":"m.text"},"ts":1588280155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have to do `if (a) { b } else { c }` instead of `c; if (a) { b }`","msgtype":"m.text"},"ts":1588280173000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or `a ? b : c`?","msgtype":"m.text"},"ts":1588280245000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or are b and c standins for a statement list","msgtype":"m.text"},"ts":1588280266000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1588280270000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd still probably do that with two do expressions on both sides of the ternary :-p","msgtype":"m.text"},"ts":1588280284000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and that is okay","msgtype":"m.text"},"ts":1588280296000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ty for validating me <3","msgtype":"m.text"},"ts":1588280309000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so do expressions for stage 4, any objections?","msgtype":"m.text"},"ts":1588280311000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ship it, it makes pattern matching infinitely easier","msgtype":"m.text"},"ts":1588280322000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh btw i was trying to work out how to make iterators specified in a less weird way","msgtype":"m.text"},"ts":1588280467000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"came up with this so far","msgtype":"m.text"},"ts":1588280471000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/55985455.png https://gc.gy/55985482.png","msgtype":"m.text"},"ts":1588280484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those wrapped iterator things are macros which call the appropriate sync or async methods and handle awaiting","msgtype":"m.text"},"ts":1588280540000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i think the throw and return methods need `Await` in the async version","msgtype":"m.text"},"ts":1588280566000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh yeah those need lots of changes","msgtype":"m.text"},"ts":1588280582000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ie, the same thing shu had to do in Atomics.wait vs Atomics.waitAsync to share an abstract op between them","msgtype":"m.text"},"ts":1588280587000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`[[Iterator]].return` certainly is not valid","msgtype":"m.text"},"ts":1588280594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also since there is an explicit next function","msgtype":"m.text"},"ts":1588280621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is possible to tell whether the argument was passed","msgtype":"m.text"},"ts":1588280629000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although i hate that we carry that","msgtype":"m.text"},"ts":1588280642000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i ultimately didn't really like that abstract op","msgtype":"m.text"},"ts":1588280771000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"too many branches","msgtype":"m.text"},"ts":1588280775000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i abstracted the branches out into those two macros","msgtype":"m.text"},"ts":1588280809000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rn i just say `If Async`","msgtype":"m.text"},"ts":1588280817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't want to have to explicitly pass `async` and `sync` to the macros","msgtype":"m.text"},"ts":1588280834000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ultimately i wanna serve the reader","msgtype":"m.text"},"ts":1588281365000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"refactorings tend to help spec maintainers, but i don't think readers read the spec like they do their own codebase","msgtype":"m.text"},"ts":1588281382000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"duplication probably isn't a big deal","msgtype":"m.text"},"ts":1588281389000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's more work for us as spec maintainers to check for copy/paste errors, but sometimes i feel like it's easier to read","msgtype":"m.text"},"ts":1588281429000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i just really don't want there to end up being differences and issues","msgtype":"m.text"},"ts":1588281473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rn this drops 24 new methods into the spec","msgtype":"m.text"},"ts":1588281499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: imo totally fine to split it back up if that's clearer","msgtype":"m.text"},"ts":1588281622000,"senderName":"ljharb","senderId":"ljharb@irc"}
]