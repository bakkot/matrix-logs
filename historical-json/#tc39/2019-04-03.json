[
{"content":{"body":"Hey friends! Looking to get some feedback on a proposal - what is a good way to do that?","msgtype":"m.text"},"ts":1554311708000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"wuz__: You could post a link here or in es-discuss or https://es.discourse.group/","msgtype":"m.text"},"ts":1554312736000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'll check thos other places too jmdyck, but here is the link: https://github.com/wuz/proposal-range","msgtype":"m.text"},"ts":1554315068000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"wuz__: also check out http://array.build","msgtype":"m.text"},"ts":1554318690000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wuz__: also you may want to talk about, in your readme, why/how `Array.range(x, y).map(f)` is better than `Array.from({ length: y - x }, (_, i) => f(x + i))`","msgtype":"m.text"},"ts":1554318743000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Good advice! Thanks!","msgtype":"m.text"},"ts":1554318800000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"That array build is interesting too! It's a bit different, as it is more around creating a prefilled Array. I think my ideal implementaiton would be within the iterable specification. I feel like that makes it extensible across a number of usecases","msgtype":"m.text"},"ts":1554318925000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"wuz__: also i'd want to see some use cases for a \"string range\", that one seems strange - and also why the step is useful (i don't find it so) - and also why you'd want \"int8\"s instead of just integers","msgtype":"m.text"},"ts":1554318951000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also how would it interact with BigInt","msgtype":"m.text"},"ts":1554318960000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also how it'd interact with https://github.com/tc39/proposal-slice-notation/","msgtype":"m.text"},"ts":1554318989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wuz__: also how it'd be better than a user writing `function* range(x, y) { for (let i = x; i < y; i++) { yield i; }`","msgtype":"m.text"},"ts":1554319043000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"All good questions! Making notes to include some information around that in the next iteration. The \"why is it better than the user writing\" question is one I have thought about a bit. Part of the answer is \"almost every other major language a concept of ranges builtin\", but it also means you have to write specific range functions for each use case you might have in an application.","msgtype":"m.text"},"ts":1554319206000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"That slice notation is super cool, and could fit very well into the concept of ranges","msgtype":"m.text"},"ts":1554319275000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"One major use case for the step operator could be something like: `Date.range(new Date(\"01-01-2019\"), new Date(\"05-01-2019\"), 7)` which would return an array of dates between the two listed dates, but only return every 7 days","msgtype":"m.text"},"ts":1554319439000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"that's true - but a counter argument might be, the alternative is that the language has to address every use case everyone might have in an application","msgtype":"m.text"},"ts":1554321247000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wuz__: for dates, i'd look at the Temporal proposal, which may or may not have a \"duration\" concept, but either way would provide the building blocks for one","msgtype":"m.text"},"ts":1554321274000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that is a good point about having to implement it in many places. I think having general uses or implementations on specific generics is a good start - people can define their own functions that interact with those basic generics.","msgtype":"m.text"},"ts":1554324411000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"The Temporal proposal is really cool and I could see it working really well with the concept of ranges. You could call something like `CivilDateTime.range(date1, date2, CivilDateTime.hour)` to get a range of all the hours between two dates","msgtype":"m.text"},"ts":1554324587000,"senderName":"wuz__","senderId":"wuz__@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1554324855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wuz__: note that i'm not arguing against your proposal here, just trying to ask questions that will be asked eventually anyways :-)","msgtype":"m.text"},"ts":1554324882000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"proposals that answer more potential questions like this often either advance more quickly, or it becomes apparent that the time and effort aren't worth it, either of which is a win :-)","msgtype":"m.text"},"ts":1554324921000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Argument for \"step\" seems to be rather self-evident? You sometimes don't want to count by consecutive integers; evens or odds, etc are useful. Doing that without step is possible but frustrating and non-obvious.","msgtype":"m.text"},"ts":1554331976000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Plus step is exposed in every single range API in any language that isn't limited to a mere two arguments by syntax (like `1..10`).","msgtype":"m.text"},"ts":1554332036000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i'd find it useful to document those use cases; that it's supported doesn't mean i've used/needed it more than a handful of times in my entire career :-)","msgtype":"m.text"},"ts":1554332864000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, it's a minority usage, but I've still used it a handful of times. Value of -1 is the most common I've used. ^_^","msgtype":"m.text"},"ts":1554332942000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]