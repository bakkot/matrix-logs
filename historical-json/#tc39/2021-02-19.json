[
{"content":{"body":"what is 2125 waiting on at this point?","msgtype":"m.text"},"ts":1613761689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: me to write some prose and styling for \"legacy\"","msgtype":"m.text"},"ts":1613761717000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1613761730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is it possible to meaningfully distinguish between an ordinary function and a class's constructor function?","msgtype":"m.text"},"ts":1613761934000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Assume I'm fine with specifically caring about `class { constructor()...}`, not just arbitrary functions that can be used to construct an object.","msgtype":"m.text"},"ts":1613761992000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you can check if something implements [[Construct]]","msgtype":"m.text"},"ts":1613762009000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but idk about [[IsClassConstructor]]","msgtype":"m.text"},"ts":1613762015000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ah, `function foo(){...}` doesn't have [[Construct]]?","msgtype":"m.text"},"ts":1613762043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it does","msgtype":"m.text"},"ts":1613762076000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: how about 2216","msgtype":"m.text"},"ts":1613762145000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: only with function toString, and not in every browser version. so, robustly? no","msgtype":"m.text"},"ts":1613762359000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: otherwise i'd have an npm package for that predicate :-p","msgtype":"m.text"},"ts":1613762376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: what are you trying to do with that info 👀","msgtype":"m.text"},"ts":1613762416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: 2116 landed, so i'm not sure if https://github.com/tc39/ecma262/pull/2216#discussion_r553050958 is updated yet? otherwise i think it just needs reviews","msgtype":"m.text"},"ts":1613762426000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'm wondering if this proposal can have special behavior for functions in a particular spot (intended to be predicates), but not trigger that behavior for class constructors (because it would be worthless) (but class objects are still useful for a different purpose if they opt into the protocol)","msgtype":"m.text"},"ts":1613762879000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rephrased a bit: I have a custom protocol that objects can opt into, via a Symbol property holding a function. But it would be somewhat reasonable to let you just pass the function directly, too, rather than requiring it to be wrapped in a single-purpose wrapper object.","msgtype":"m.text"},"ts":1613763041000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Wondering if I can meaningfully allow both these cases, without accidentally triggering the \"function\" case when someone passes a class that doesn't use the protocol key.","msgtype":"m.text"},"ts":1613763042000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins presumably you'd also want to exclude methods, as in `{ o(){} }`, since those are constructible but not callable?","msgtype":"m.text"},"ts":1613763582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't care about those, if you pass those and it's wrong it's your own fault.","msgtype":"m.text"},"ts":1613763616000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If they get banned, fine, if they don't, fine.","msgtype":"m.text"},"ts":1613763632000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"but that is not true of class objects, you feel?","msgtype":"m.text"},"ts":1613763637000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess I'm having a hard time visualizing this API","msgtype":"m.text"},"ts":1613763647000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Less abstractly, I'm thinking about the custom matcher protocol for the match statement - an object can have `[Symbol.matcher]` or whatever and it gets called with the match object and can accept/reject it. I think it'll be common to just put `[Symbol.matcher]` on your class to get an isinstance match, and I would like it to properly complain at you when you drop a class in there and it *doesn't* have the key.","msgtype":"m.text"},"ts":1613763769000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ahh, got it","msgtype":"m.text"},"ts":1613763804000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"But it also seems reasonable to me to let you just write a function that does custom matching and use that, rather than having to wrap it in an object just so you can assign it.","msgtype":"m.text"},"ts":1613763809000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So if I can distinguish between the return value of `class` vs `function`/arrow-func, that would be nice.","msgtype":"m.text"},"ts":1613763841000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I am not convinced it's worth trying to spec this","msgtype":"m.text"},"ts":1613763907000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you'll get an error either way, right?","msgtype":"m.text"},"ts":1613763922000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like, it looks like a function, so it gets called, and then it's a type error","msgtype":"m.text"},"ts":1613763931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and engines could choose to give a useful error message there","msgtype":"m.text"},"ts":1613763939000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think it's all that helpful to specify that the error happens prior to calling","msgtype":"m.text"},"ts":1613763961000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless I'm misunderstanding, and the observable behavior would be different somehow","msgtype":"m.text"},"ts":1613764005000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"do you mean like","msgtype":"m.text"},"ts":1613764006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`case ((value) => { /* determine if value matches */ })`?","msgtype":"m.text"},"ts":1613764028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as opposed to `case T` where `T[Symbol.matcher]`","msgtype":"m.text"},"ts":1613764044000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1613764097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If you pass a class and it doesn't have the key, it's a constructor function so you'll just call it at that point, right?","msgtype":"m.text"},"ts":1613764100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So it'll silently construct an object and do something wrong, rather than erroring.","msgtype":"m.text"},"ts":1613764120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right, and then immediately get a type error","msgtype":"m.text"},"ts":1613764120000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no, you can't just `()` a class","msgtype":"m.text"},"ts":1613764127000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"TabAtkins: you can make an IsConstructor check with Proxy","msgtype":"m.text"},"ts":1613764129000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"have to `new` it","msgtype":"m.text"},"ts":1613764130000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"OH RIGHT","msgtype":"m.text"},"ts":1613764135000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but it won't just be `class`","msgtype":"m.text"},"ts":1613764139000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I forgot that class constructors aren't callable normally!","msgtype":"m.text"},"ts":1613764143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"okay never mind that's all fine then","msgtype":"m.text"},"ts":1613764150000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"🎉","msgtype":"m.text"},"ts":1613764179000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Yes, I meant that.","msgtype":"m.text"},"ts":1613764180000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so lik ein spec terms i'd be checking the value for a [[Call]] slot or something, right?","msgtype":"m.text"},"ts":1613764216000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins good good","msgtype":"m.text"},"ts":1613764216000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1613764219000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1613764222000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"classes have that slot","msgtype":"m.text"},"ts":1613764223000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even though the thing it does is throw","msgtype":"m.text"},"ts":1613764234000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"How does it have the [[Call]] slot if you can't call it","msgtype":"m.text"},"ts":1613764236000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's a bit silly","msgtype":"m.text"},"ts":1613764237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1613764237000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the reason, I think, is that the typeof check looks for the slot","msgtype":"m.text"},"ts":1613764261000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"okay well whatever it still works, I'd just have to make sure the tests are ordered correctly","msgtype":"m.text"},"ts":1613764265000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and `typeof class {}` should be `\"function\"`","msgtype":"m.text"},"ts":1613764277000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"typeof looks for the slot\" if only typeof were a builtin that we had full control of the interior function of, drat","msgtype":"m.text"},"ts":1613764290000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1613764296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1613764297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, it's all just for our own convenience","msgtype":"m.text"},"ts":1613764304000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it was most convenient to leave the slot there","msgtype":"m.text"},"ts":1613764311000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I assume","msgtype":"m.text"},"ts":1613764315000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there is an invariant","msgtype":"m.text"},"ts":1613764319000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that all things with [[Construct]] must also have [[Call]]","msgtype":"m.text"},"ts":1613764325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a dumb invariant though","msgtype":"m.text"},"ts":1613764332000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well this is js","msgtype":"m.text"},"ts":1613764343000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or, at least, not a particularly useful one","msgtype":"m.text"},"ts":1613764344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah it's not a meaningful invariant if you just... can't call classes","msgtype":"m.text"},"ts":1613764348000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i totally agree :P","msgtype":"m.text"},"ts":1613764355000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins classes and `{ o(){} }` methods!","msgtype":"m.text"},"ts":1613764359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's why I was asking about those","msgtype":"m.text"},"ts":1613764362000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or, wait, those are the other way around","msgtype":"m.text"},"ts":1613764370000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"those are callable but not constructible","msgtype":"m.text"},"ts":1613764375000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"okay phew i was confused","msgtype":"m.text"},"ts":1613764383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"still have a [[construct]] slot though","msgtype":"m.text"},"ts":1613764386000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1613764396000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they should have a [[Cantstruct]] slot","msgtype":"m.text"},"ts":1613764404000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"how do you do a variadic construct without spread","msgtype":"m.text"},"ts":1613764475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok I'm wrong they don't have that slot","msgtype":"m.text"},"ts":1613764502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"apparently I'm just confused today","msgtype":"m.text"},"ts":1613764507000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek `arguments` and `.apply`, presumably","msgtype":"m.text"},"ts":1613764513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":".apply is [[Call]] though","msgtype":"m.text"},"ts":1613764525000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess if you're pre spread it doesn't matter?","msgtype":"m.text"},"ts":1613764533000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"want to replace this `Test262Error.thrower = (...args) => { throw new Test262Error(...args); };`","msgtype":"m.text"},"ts":1613764553000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`Reflect.construct(A, arguments)` also works","msgtype":"m.text"},"ts":1613764629000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and does apply","msgtype":"m.text"},"ts":1613764640000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er, does construct","msgtype":"m.text"},"ts":1613764647000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess its reasonable to assume they could implement Reflect.construct at least","msgtype":"m.text"},"ts":1613764657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`Test262Error` is a thing test262 defines, so you know you can just call it","msgtype":"m.text"},"ts":1613764757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1613764812000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just trying to help someone who is trying to get a js engine up and running","msgtype":"m.text"},"ts":1613764823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they don't have spread yet 😄","msgtype":"m.text"},"ts":1613764832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1613764848000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think I'd just tell them to patch `.thrower` to be `= (a, b, c) => { throw new Test262Error(a, b, c); }`","msgtype":"m.text"},"ts":1613764865000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not actually called with a bunch of arguments, so that's a fine stopgap","msgtype":"m.text"},"ts":1613764878000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's super absurd to me the way Call and Construct slots are done in the spec tho","msgtype":"m.text"},"ts":1613764883000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"classes shouldn't have [[Call]] at all","msgtype":"m.text"},"ts":1613764893000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a lot of things in the spec are pretty absurd","msgtype":"m.text"},"ts":1613764896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"true, but this one has ended up creating user-observable weirdness that can't be undone","msgtype":"m.text"},"ts":1613764911000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"primarily around Proxy tho, to be fair.","msgtype":"m.text"},"ts":1613764916000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I don't know that one; what's the user-observable bit?","msgtype":"m.text"},"ts":1613765087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: new Proxy will throw if you give it a handler with Apply/Construct, on a value that lacks both slots - but it will not throw on an object that lacks only one of them","msgtype":"m.text"},"ts":1613765390000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or sorry","msgtype":"m.text"},"ts":1613765402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's how you can use Proxy to make an `IsConstructor` - it throws if you pass a Construct handler but the target lacks [[Construct]]","msgtype":"m.text"},"ts":1613765414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so you can observe it *not* throw when you pass an Apply handler for a target that *should* lack [[Call]]","msgtype":"m.text"},"ts":1613765437000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so if we fix up the slots to be conceptually correct, the kludges we'd have to accept is that Proxy would have to not throw in a bunch of weird cases, on top of `typeof` having to return \"function\" for Call *or* Construct, whereas now it's just Call.","msgtype":"m.text"},"ts":1613765490000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"> it throws if you pass a Construct handler but the target lacks [[Construct]]","msgtype":"m.text"},"ts":1613766189000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"... does it? I thought all the handlers were evaluated lazily","msgtype":"m.text"},"ts":1613766197000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`new Proxy(() => {}, { construct(){} })` does not seem to throw","msgtype":"m.text"},"ts":1613766213000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ahh, but you _can_ observe the `get` failing to happen","msgtype":"m.text"},"ts":1613766272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that just seems wrong to me tbh","msgtype":"m.text"},"ts":1613766279000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it should do the lookup on the handler before checking the underlying object","msgtype":"m.text"},"ts":1613766288000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(that said you can only observe the `get` failing to happen by actually `new`'ing the proxy itself, which is maybe not so useful)","msgtype":"m.text"},"ts":1613766331000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb or maybe I'm misunderstanding; a running code sample would maybe help","msgtype":"m.text"},"ts":1613766358000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(you can both observe the `[[get]]` for `\"construct\"` happening or not happening and the `construct` method on the handler being called or not being called, I guess)","msgtype":"m.text"},"ts":1613766436000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: ah right, sorry. you can `new` it and call it. `new (new Proxy(target, { construct(){ return {}; } }))` throws iff target lacks [[Construct]], and `(new Proxy(target, { apply(){} }))()` throws if it lacks [[Call]], and the latter won't throw on `class {}`","msgtype":"m.text"},"ts":1613767055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1613767114000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tbh I think we should make the first one not throw","msgtype":"m.text"},"ts":1613767128000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's probably web-compat to do so","msgtype":"m.text"},"ts":1613767158000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless people are using it as an IsConstructor, as an esdiscuss post in 2016 advised them to do","msgtype":"m.text"},"ts":1613767296000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the only reason i haven't built a package that does that is because Proxy isn't far enough back to be useful to me","msgtype":"m.text"},"ts":1613767313000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Hey Bakkot, it's been 4 weeks since you added the \"editor call\" label to https://github.com/tc39/ecma262/issues/2148 Has it fallen off the agenda, or have the editors discussed it but not reached consensus?","msgtype":"m.text"},"ts":1613771970000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Just curious.","msgtype":"m.text"},"ts":1613771984000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck we discussed it but our conclusion was that we need to think about it more","msgtype":"m.text"},"ts":1613772387000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1613772495000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]