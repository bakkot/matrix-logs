[
{"content":{"body":"Can I make a user-defined constructor? For example, since the specification defined Array to be a constructor and a constructor shall also implement [[Call]], I can do new Array() or Array(). But, If I make a new class I can only implement `constructor`. I wonder if there's any chance to implement [[Call]] myself.","msgtype":"m.text"},"ts":1564246845000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"cpplearner: using `function() {}` and `new.target`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target","msgtype":"m.text"},"ts":1564246923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Oh, `FunctionAllocate` takes care of [[Construct]] part, if functionKind is normal. Hmm, but implmenting both with `class` keyword is impossible, am I right?","msgtype":"m.text"},"ts":1564247458000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1564247473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Thanks for clarifying and helping me all the time!","msgtype":"m.text"},"ts":1564247484000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"Have a nice day!","msgtype":"m.text"},"ts":1564247488000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"damn, after a couple of days, I think I've finally worked myself into a corner","msgtype":"m.text"},"ts":1564267548000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"think non-re-evaluation in `a.b?.().c` is just not compatible with an \"it's just a ternary!\"-style approach","msgtype":"m.text"},"ts":1564267612000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(i.e. if I'm just holding `a.b` and `a.b().c`, that call is gonna have a bad time trying to determine its this value...)","msgtype":"m.text"},"ts":1564267743000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: i'm not following what you're saying","msgtype":"m.text"},"ts":1564269374000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: lol I was hoping you would but it's tricky to express concisely","msgtype":"m.text"},"ts":1564269402000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think its just miscommunication","msgtype":"m.text"},"ts":1564269446000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does \"its just a ternary\" refer to the syntax or the behaviour","msgtype":"m.text"},"ts":1564269457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"semantics","msgtype":"m.text"},"ts":1564269463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er like, bytecode standpoint","msgtype":"m.text"},"ts":1564269475000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so like... `(a.b ? a.b() : undefined).c`","msgtype":"m.text"},"ts":1564269485000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except that still throws","msgtype":"m.text"},"ts":1564269493000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i forgot to compare to null/undefined","msgtype":"m.text"},"ts":1564269518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah i dunno i think the feature is pretty useful","msgtype":"m.text"},"ts":1564269585000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, for my hackathon version of this, I just have an OptionalChainNode with children `a.b` and `a.b().c`, and the bytecode generated from that node mimics a ternary, but it naively re-evaluates the base when it's not nullish","msgtype":"m.text"},"ts":1564269613000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1564269647000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(I can upload that part to WK BZ if you want to see)","msgtype":"m.text"},"ts":1564269651000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i get what you're saying now","msgtype":"m.text"},"ts":1564269666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so then to deal with the re-eval, I thought it would suffice to pass down the register for the already-evaluated base","msgtype":"m.text"},"ts":1564269686000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and that almost works...but `a.b()` is usually a single node in itself because it not only needs to know the function to call (`a.b`) it also needs the `this` value (just `a`)","msgtype":"m.text"},"ts":1564269805000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i've gotten too used to an accumulator interpreter","msgtype":"m.text"},"ts":1564269885000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so basically `a.b?.()` is already tricky because I need to pass down the already-evaluated `this` value, but once we extend the chain, I think the entire approach is just doomed","msgtype":"m.text"},"ts":1564269950000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sounds like a fun mess","msgtype":"m.text"},"ts":1564270000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ðŸ˜„","msgtype":"m.text"},"ts":1564270004000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes :P","msgtype":"m.text"},"ts":1564270017000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"a mess indeed, but I still do enjoy a good compiler frontend puzzle","msgtype":"m.text"},"ts":1564270043000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...think I'm gonna upload my naive approach for posterity before I redo it, heh","msgtype":"m.text"},"ts":1564270121000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"pour votre amusement: https://bugs.webkit.org/show_bug.cgi?id=200199","msgtype":"m.text"},"ts":1564270339000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmm yeah i had to emit a different bytecode for each of the accessor, computed, and call variants","msgtype":"m.text"},"ts":1564270451000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the proposal moved forward with parens required right","msgtype":"m.text"},"ts":1564270518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you mean for `??`?","msgtype":"m.text"},"ts":1564270547000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh lol confused already","msgtype":"m.text"},"ts":1564270624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ðŸ˜‚","msgtype":"m.text"},"ts":1564270680000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"me trying to figure out v8's parser https://i.redd.it/f46azqiqcg411.jpg","msgtype":"m.text"},"ts":1564271472000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait maybe there still is a way (tm)","msgtype":"m.text"},"ts":1564271886000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if I have an OptionalCallNode that treats the call as part of the chain's base, maybe this could still be salvageable...?","msgtype":"m.text"},"ts":1564271967000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]