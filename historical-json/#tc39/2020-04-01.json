[
{"content":{"body":"ljharb:","msgtype":"m.text"},"ts":1585699326000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I'm interesting join to help pattern matching, how can I help? 🤔","msgtype":"m.text"},"ts":1585699351000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"ljharb: ^","msgtype":"m.text"},"ts":1585699361000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: thanks, i'll tag you on the issue i file","msgtype":"m.text"},"ts":1585699374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: you too?","msgtype":"m.text"},"ts":1585699376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll happily discuss it","msgtype":"m.text"},"ts":1585699395000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure about championing","msgtype":"m.text"},"ts":1585699402000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1585699422000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: to be clear i really love pattern matching and i want it in the language","msgtype":"m.text"},"ts":1585699454000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"noted :-)","msgtype":"m.text"},"ts":1585699466000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"+1 love pattern matching and waiting it for years","msgtype":"m.text"},"ts":1585699502000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1585753548000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"anyone here?","msgtype":"m.text"},"ts":1585753553000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"I'm here.","msgtype":"m.text"},"ts":1585753638000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I was mapping Sequelize models to object like { attribute: type }, in order to create a serializer or something. So I was doing this: Object.fromEntries(Object.entries(model).map(([key, value]) => [key, value.type])) in order to achieve this.","msgtype":"m.text"},"ts":1585753794000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"The question is: since I'm already using method chaining to get and map entries from attributes, I guess we could use some synthatic sugar in order to map this to Object.fromEntries intead of having an external function call. Like, we could enjoy the clean view of method chaining.","msgtype":"m.text"},"ts":1585753879000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"I was thinking about creating proposal to a new Object method: Object.prototype.self.","msgtype":"m.text"},"ts":1585753929000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"So instead of having something like this","msgtype":"m.text"},"ts":1585753967000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":" Object.fromEntries(Object.entries(model).map(([key,","msgtype":"m.text"},"ts":1585753985000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"                      value]) => [key, value.type]))","msgtype":"m.text"},"ts":1585753985000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"* sorry *","msgtype":"m.text"},"ts":1585753998000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"I would have something like this","msgtype":"m.text"},"ts":1585754003000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"we don't add things to Object.prototype anymore","msgtype":"m.text"},"ts":1585754029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Object.entries(model).map(([key, value]) => [key, value.type]).self(Object.fromEntries)","msgtype":"m.text"},"ts":1585754029000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"Which is much cleaner","msgtype":"m.text"},"ts":1585754138000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"but then you have this `self` property on every single object","msgtype":"m.text"},"ts":1585754152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's really an issue, I didn't think about it.","msgtype":"m.text"},"ts":1585754335000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"Seems like pipeline operator could also help","msgtype":"m.text"},"ts":1585755002000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: That's great, it solves my problem.","msgtype":"m.text"},"ts":1585755223000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"Wasn’t there an `Object.map` proposal presented recently?","msgtype":"m.text"},"ts":1585756918000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"was it the one that got transformed into \"object iteration\"?","msgtype":"m.text"},"ts":1585757341000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"https://github.com/tc39/proposal-object-iteration","msgtype":"m.text"},"ts":1585757342000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"with object iteration and a slight extension of the iterator helpers proposal (\"collect\"), you'd write `Object.iterate(model).map(...).collect(Object.fromEntries)`","msgtype":"m.text"},"ts":1585757843000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`collect` is very interesting","msgtype":"m.text"},"ts":1585759273000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"And `collect` sounds a lot more semantically correct than `self`","msgtype":"m.text"},"ts":1585759631000,"senderName":"renatoalencar","senderId":"renatoalencar@irc"},
{"content":{"body":"mathiasbynens ping","msgtype":"m.text"},"ts":1585761324000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: pong","msgtype":"m.text"},"ts":1585761430000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens actually I guess I didn't have anything further to say","msgtype":"m.text"},"ts":1585761756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: fair enough","msgtype":"m.text"},"ts":1585761795000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"just was trying to move the discussion here","msgtype":"m.text"},"ts":1585761798000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but then I didn't have more discussion","msgtype":"m.text"},"ts":1585761802000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's this thing where if people walk through a doorway they tend to forget what they were doing before","msgtype":"m.text"},"ts":1585761816000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i posit this applies to irc channels as well","msgtype":"m.text"},"ts":1585761828000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I added a new slides listing possible goals: https://docs.google.com/presentation/d/1COuuP_0fxK_s8-H8AScDMjMzKSEiAlAnOi4snP-OiHY/edit#slide=id.g82bd3e5bae_15_10","msgtype":"m.text"},"ts":1585761932000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my intention is to say that I regard the first two goals here as violated only for users who actually try to write unicode escapes for non-BMP characters , who I think are rare enough (and the harm in that case is sufficiently slight) that the other cost to the other goals should outweigh them","msgtype":"m.text"},"ts":1585762011000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"The only reasons to ban these are that it hurts symmetry or exposes users to a concept we want to shield them from. But the number of users affected will be vanishingly small.\" not the only reasons; this aligns perfectly with ES2015 `u`","msgtype":"m.text"},"ts":1585762178000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"how is that not \"hurts symmetry\"?","msgtype":"m.text"},"ts":1585762192000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"resulting in 0 changes to the mental model","msgtype":"m.text"},"ts":1585762205000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"again, how is that not \"hurts symmetry\"?","msgtype":"m.text"},"ts":1585762216000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's completely orthogonal to that","msgtype":"m.text"},"ts":1585762245000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I guess I don't know what you mean then.","msgtype":"m.text"},"ts":1585762253000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you already know what i mean by symmetry","msgtype":"m.text"},"ts":1585762275000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I thought what you meant was, you want this thing to be like that other thing, so that the mental model is simpler","msgtype":"m.text"},"ts":1585762295000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but now I am no longer sure","msgtype":"m.text"},"ts":1585762301000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok let me try again","msgtype":"m.text"},"ts":1585762314000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sorry i'm not being clear, i swear it all makes sense in my head","msgtype":"m.text"},"ts":1585762329000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"by symmetry, I mean the thing where you can copy-paste the sourcetext that makes up any valid group name from within the regexp pattern to `match.groups.<HERE>` without ending up with invalid code","msgtype":"m.text"},"ts":1585762368000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"does that make sense?","msgtype":"m.text"},"ts":1585762381000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Sure, got it","msgtype":"m.text"},"ts":1585762405000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"proposal 3 has this property","msgtype":"m.text"},"ts":1585762420000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1585762456000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it gets there by aligning with ES2015 `u`, as in: `u` makes astral symbols work in `u` regexps, and this becomes another example of that","msgtype":"m.text"},"ts":1585762473000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"resulting in the simplest possible mental model","msgtype":"m.text"},"ts":1585762503000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1585762521000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"proposal 4 (allowing \\u\\u even in identifiers) also has the symmetry property, but at the cost of a much more difficult mental model","msgtype":"m.text"},"ts":1585762526000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"when I said \"symmetry\" in that slide, I meant to refer to both of those things","msgtype":"m.text"},"ts":1585762534000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i understand. i'm trying to explain why i see them as two separate things (and why i listed them separately in my proposal)","msgtype":"m.text"},"ts":1585762568000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585762573000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there are two different concrete properties, agreed","msgtype":"m.text"},"ts":1585762582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they are both examples of, I want this thing to be like this other thing to simplify how many things the user has to know to know everything","msgtype":"m.text"},"ts":1585762594000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and my position is, with the allow-all-escapes proposal, users will only be exposed to the asymmetry if they try to write (not just read) unicode escapes for non-astral characters","msgtype":"m.text"},"ts":1585762628000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, that is, users will only be exposed to _ether of those_ asymmetries","msgtype":"m.text"},"ts":1585762642000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so do you want to add \"simpler mental model\" to your slide?","msgtype":"m.text"},"ts":1585763146000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"or \"smaller mental model delta\" or w/e","msgtype":"m.text"},"ts":1585763156000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"My intention was that that would be covered by \"symmetry\"","msgtype":"m.text"},"ts":1585763184000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since that is why we care about symmetry","msgtype":"m.text"},"ts":1585763191000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"heh, i thought we just agreed they were distinct properties","msgtype":"m.text"},"ts":1585763703000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I agreed that there are two concrete properties which are distinct: having symmetry between the group name in the regex and in the code, and having symmetry with the rest of how u and non-u regexes work","msgtype":"m.text"},"ts":1585763742000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but these are both symmetry","msgtype":"m.text"},"ts":1585763745000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the reason we care about symmetry is, it keeps the mental model simple","msgtype":"m.text"},"ts":1585763757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not in the case of proposal 4","msgtype":"m.text"},"ts":1585763813000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"\"An astral code point can always be represented as \\u𝘏𝘌𝘈𝘋\\u𝘛𝘈𝘐𝘓, and additionally as the more convenient \\u{…} except in old-style non-u regular expressions.\" is quite a mouthful","msgtype":"m.text"},"ts":1585763842000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yes, there is yet another kind of symmetry possible, which is symmetry between how the group name works and the rest of the regex works","msgtype":"m.text"},"ts":1585763880000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(that's the one gibson042 has expressed the most interest in, for example)","msgtype":"m.text"},"ts":1585763890000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"allowing \\u{ to name capture groups in non-Unicode regexes does not simplify that","msgtype":"m.text"},"ts":1585763956000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585763966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I agree with that","msgtype":"m.text"},"ts":1585763972000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am proposing to make it slightly more complicated - to break that particular symmetry - in service of other goals","msgtype":"m.text"},"ts":1585763994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"understood","msgtype":"m.text"},"ts":1585764002000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: yes, proposal 3 gets at that kind of symmetry as well: either astral symbols are supported (`u`), or they aren't (non-`u`)","msgtype":"m.text"},"ts":1585764249000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yup, I agree that proposal 3 has the most symmetry","msgtype":"m.text"},"ts":1585764274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am proposing to break that symmetry in service of other goals","msgtype":"m.text"},"ts":1585764284000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mathiasbynens gibson042: concretely, if you were given a choice ONLY between making /(?<\\u{1d49c}>.)/ legal or illegal, with all of /(?<\\ud835\\udc9c.)/  /(?<\\ud835\\udc9c.)/u /(?<\\u{1d49c}>.)/u being definitely legal, which is your preference?","msgtype":"m.text"},"ts":1585764537000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: illegal. astral support requires `u` flag. matches implementations too","msgtype":"m.text"},"ts":1585764580000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens in this hypothetical, /(?<\\ud835\\udc9c.)/ is legal.","msgtype":"m.text"},"ts":1585764597000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, /(?<\\ud835\\udc9c>.)/, rather","msgtype":"m.text"},"ts":1585764607000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so in this hypothetical, \"astral support requires `u` flag.\" is false","msgtype":"m.text"},"ts":1585764631000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"given that, is that still your preference?","msgtype":"m.text"},"ts":1585764637000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmmm, not sure. where does the hypothetical come from?","msgtype":"m.text"},"ts":1585764659000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"OK also I guess I should extend my hypothetical to say that /(?<𝒜>.)/ is also definitely legal","msgtype":"m.text"},"ts":1585764661000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1585764669000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"this hypothetical comes from, I am going to propose exactly one of these two things","msgtype":"m.text"},"ts":1585764675000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"of these six regexes, five of them I am definitely going to propose should be legal. the sixth, /(?<\\u{1d49c}>.)/, I think we could go either way.","msgtype":"m.text"},"ts":1585764722000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think you should present all the options that were discussed, and then pick your favorite, not provide the committee with just 2 options pretending there's no other way","msgtype":"m.text"},"ts":1585764739000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I'm not going to present to the commitee just these two options","msgtype":"m.text"},"ts":1585764751000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am going to present exactly one of these options as the thing I am going for, and discuss many other options","msgtype":"m.text"},"ts":1585764763000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I am trying to decide which of two options I present as my favorite","msgtype":"m.text"},"ts":1585764776000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"based on which I think is most likely to get consensus","msgtype":"m.text"},"ts":1585764783000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which I am hoping to base on which, of those two, you and gibson042 prefer","msgtype":"m.text"},"ts":1585764795000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i prefer keeping `\\u{...}` non-special in non-`u` regexps","msgtype":"m.text"},"ts":1585764817000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"like, that's one of the reasons we added the `u` flag","msgtype":"m.text"},"ts":1585764834000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i get that we _could_ special-case this one thing if we really wanted to, but imho we shouldn't","msgtype":"m.text"},"ts":1585764855000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"even if \\u\\u and 𝒜 work?","msgtype":"m.text"},"ts":1585764856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585764903000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"ok cool","msgtype":"m.text"},"ts":1585764906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(although i do think this proposal doesn't make sense)","msgtype":"m.text"},"ts":1585764911000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"not too long ago you said \"I'm happy either way\" https://github.com/tc39/ecma262/pull/1869#issuecomment-583982299 :')","msgtype":"m.text"},"ts":1585764959000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah, that was before waldemar pointed out the tooling concern, which had not occurred to me but which I regard as having nontrivial weight","msgtype":"m.text"},"ts":1585764985000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I was previously unconcerned because I regarded this as only affecting users who tried to write unicode escapes in group names, which I expect to be a tiny population and so the decision was unimportant","msgtype":"m.text"},"ts":1585765033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but waldemar correctly points out that it also affects tooling, which has significantly larger impact, so now I think it does matter","msgtype":"m.text"},"ts":1585765072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1585765154000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"prop 3 addressed all that","msgtype":"m.text"},"ts":1585765165000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but yeah, the requirements keep coming","msgtype":"m.text"},"ts":1585765178000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"maybe we shouldn't block es2020 on this","msgtype":"m.text"},"ts":1585765189000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"there's really no rush","msgtype":"m.text"},"ts":1585765198000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I would love to not block es2020 on this","msgtype":"m.text"},"ts":1585765201000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let's do it","msgtype":"m.text"},"ts":1585765210000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"but, unfortunately, making that decision requires convincing waldemar that we should","msgtype":"m.text"},"ts":1585765218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which several people tried to do for like an hour after the meeting last night, to no avail","msgtype":"m.text"},"ts":1585765231000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so I am hoping to route around forcing that issue","msgtype":"m.text"},"ts":1585765238000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if it makes people feel better, include a note in the spec saying that there is an inconsistency that is being addressed with a link to the github issue or something","msgtype":"m.text"},"ts":1585765245000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"oh ok :/","msgtype":"m.text"},"ts":1585765252000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"maybe it helps to not point these things out in future editor updates","msgtype":"m.text"},"ts":1585765284000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"yeah I guess","msgtype":"m.text"},"ts":1585765288000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1585765289000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"last known bug in the spec\"","msgtype":"m.text"},"ts":1585765291000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it really doesn't matter","msgtype":"m.text"},"ts":1585765294000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it wasn't really an editor update thing","msgtype":"m.text"},"ts":1585765294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: my preference would be to disallow `/(?<\\u{1d49c}>.)/`, but I won't block consensus if there's broad support for it","msgtype":"m.text"},"ts":1585765295000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"shu: https://github.com/hax/proposal-function-this/issues/2","msgtype":"m.text"},"ts":1585765764000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Bakkot: it's also worth noting that a smaller change doesn't preclude us from making bigger changes later. otoh if we make the big change first, we likely won't be able to go back","msgtype":"m.text"},"ts":1585765856000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"no one will ever want to revisit this","msgtype":"m.text"},"ts":1585765879000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am not going to present something which says we might come back to it","msgtype":"m.text"},"ts":1585765891000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: you're asking for a pretty big change, and there is pressure with the whole ES2020 thing","msgtype":"m.text"},"ts":1585765918000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"I do not regard this as a big change.","msgtype":"m.text"},"ts":1585765931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I regard the details of which escape sequences are allowed as being a very small detail which will affect only tooling authors and perhaps a dozen humans writing code. (which non-escape characters are allowed affects far more people, of course.)","msgtype":"m.text"},"ts":1585766019000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(sorry, specifically, which escape sequences are allowed _in named capture group names_. which are allowed in identifiers would be a larger change but I am not asking for a change there.)","msgtype":"m.text"},"ts":1585766150000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm talking about supporting astral symbols in non-`u` RegExps in this case (in escaped form or not)","msgtype":"m.text"},"ts":1585766586000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"The spec explicitly permits non-escaped astral symbols in non-u regexes in capture group names; there is no possible ambiguity there.","msgtype":"m.text"},"ts":1585766652000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"We have consensus on that decision.","msgtype":"m.text"},"ts":1585766661000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ack","msgtype":"m.text"},"ts":1585767079000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/yvvzqpdTpoHfygyQXbrYRQHB >","msgtype":"m.emote"},"ts":1585768656000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: not to my knowledge","msgtype":"m.text"},"ts":1585768993000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it came up on es-discuss some time back, I think","msgtype":"m.text"},"ts":1585769021000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah, there's been discussion for it.","msgtype":"m.text"},"ts":1585773973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It's a great idea imo, tho I'd like a slightly different syntax.)","msgtype":"m.text"},"ts":1585773993000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Line/indent-based syntax is a no-go for JS.)","msgtype":"m.text"},"ts":1585774010000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"repurpose `with()` block imo","msgtype":"m.text"},"ts":1585774087000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"fwiw it doesn't require newlines in Dart","msgtype":"m.text"},"ts":1585774177000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it was blocked by nothing in the jsstdlib being usable with it","msgtype":"m.text"},"ts":1585774178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well not \"blocked\"","msgtype":"m.text"},"ts":1585774188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but demotivated","msgtype":"m.text"},"ts":1585774190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"imo we just need to change another symbol for it (`..` maybe not good with JS). and the dart style doesn't seems to related with indent.","msgtype":"m.text"},"ts":1585774341000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"i'm a bit confused how it works","msgtype":"m.text"},"ts":1585774498000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is it a chain of expressions?","msgtype":"m.text"},"ts":1585774507000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how do asi/semis fit in","msgtype":"m.text"},"ts":1585774518000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's a chain of member expressions","msgtype":"m.text"},"ts":1585774527000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"same rules as one dot instead of two","msgtype":"m.text"},"ts":1585774537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except the base of each one becomes the first item","msgtype":"m.text"},"ts":1585774564000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the assignment isn't that","msgtype":"m.text"},"ts":1585774564000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hm i didn't know you could do assignment in that","msgtype":"m.text"},"ts":1585774581000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also `..classes.add(…)` isn't a member expression","msgtype":"m.text"},"ts":1585774588000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it","msgtype":"m.text"},"ts":1585774591000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"* it's a full expression","msgtype":"m.text"},"ts":1585774595000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's a member expression","msgtype":"m.text"},"ts":1585774624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well it's an access and call chain","msgtype":"m.text"},"ts":1585774625000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you can't use operators there, say","msgtype":"m.text"},"ts":1585774636000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: ok so the `..` chain is a chain of member expressions?","msgtype":"m.text"},"ts":1585774647000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's what i expected anyway","msgtype":"m.text"},"ts":1585774653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the assignment is weird","msgtype":"m.text"},"ts":1585774657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how would optional chains fit in","msgtype":"m.text"},"ts":1585774660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's called a \"cascade\" btw, just for helpful verbiage's sake","msgtype":"m.text"},"ts":1585774661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but seems reasonable i guess???","msgtype":"m.text"},"ts":1585774662000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how is this better than just a list of statements, repeating the object","msgtype":"m.text"},"ts":1585774691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Dart has `?.` too so you can see","msgtype":"m.text"},"ts":1585774691000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"someone quick go implement cascade in engine262","msgtype":"m.text"},"ts":1585774742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"err wait","msgtype":"m.text"},"ts":1585774750000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that assignment _is_ weird","msgtype":"m.text"},"ts":1585774754000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I didn't realize Dart even allowed that","msgtype":"m.text"},"ts":1585774763000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we wouldn't have to","msgtype":"m.text"},"ts":1585774768000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah but modulo that","msgtype":"m.text"},"ts":1585774776000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think I support that part of it","msgtype":"m.text"},"ts":1585774783000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but otherwise, \"calling a bunch of things in succession on a single receiver object\" is nice","msgtype":"m.text"},"ts":1585774808000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sent a long message:  < https://matrix.org/_matrix/media/r0/download/matrix.org/qKaRPpWHbkFwQcUApJzlYFBe >","msgtype":"m.emote"},"ts":1585774811000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: heads up that matrix turns your long messages into a link i have to click instead of showing text inline","msgtype":"m.text"},"ts":1585774831000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1585774835000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jackworks: btw your messages are appearing as \"jackworks sent a long message <url>\"","msgtype":"m.text"},"ts":1585774837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and we have to click out to matrix.org to read your messages","msgtype":"m.text"},"ts":1585774846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: yeah i do think that it's an asi problem","msgtype":"m.text"},"ts":1585774849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb wait what's the ASI problem","msgtype":"m.text"},"ts":1585774856000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"matrix yay :P","msgtype":"m.text"},"ts":1585774857000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i don't see an asi problem","msgtype":"m.text"},"ts":1585774864000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: well i mean, conceptually, i'm sure the grammar can work","msgtype":"m.text"},"ts":1585774866000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what's the conceptual problem","msgtype":"m.text"},"ts":1585774874000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because it looks like a bunch of statements, where `..` is the value of the last statement before all the double dot statements","msgtype":"m.text"},"ts":1585774884000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or a bunch of expressions","msgtype":"m.text"},"ts":1585774896000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can do `.method()` on a new line; being able to do `..method()` on a new line is... pretty much exactly the same thing, no?","msgtype":"m.text"},"ts":1585774906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but with a multiline chain item, i think it'll be very confusing","msgtype":"m.text"},"ts":1585774907000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh sure","msgtype":"m.text"},"ts":1585774910000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585774920000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: can you give an example","msgtype":"m.text"},"ts":1585774921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but `.method` is \"get method off of the thing it's dotted onto\"","msgtype":"m.text"},"ts":1585774923000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't get what the confusion is","msgtype":"m.text"},"ts":1585774924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"let's ignore that confusion for now, i'll make an example if this idea gets more written out :-)","msgtype":"m.text"},"ts":1585774947000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh I'm sorry, it only 296 words why matrix think it's long (maybe cause there are 2 code blocks in the msg)","msgtype":"m.text"},"ts":1585774960000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: i'm guessing its the newlines","msgtype":"m.text"},"ts":1585774995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"again for the record, I think it's a great idea for access and call chains; the `=` part makes me frown","msgtype":"m.text"},"ts":1585775051000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fwiw I don't think this feature is worth it","msgtype":"m.text"},"ts":1585775090000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"syntax which is aimed at not having to declare and refer to variables almost never seem worth it to me","msgtype":"m.text"},"ts":1585775115000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's neat","msgtype":"m.text"},"ts":1585775135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1585775141000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's about all i can say about it","msgtype":"m.text"},"ts":1585775174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is very useful for certain patterns that aren't necessarily common in JS, like StringBuilder","msgtype":"m.text"},"ts":1585775175000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm not sure its a good pattern for builders","msgtype":"m.text"},"ts":1585775189000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"taking into account stuff like luxon","msgtype":"m.text"},"ts":1585775198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where each method returns a new instance","msgtype":"m.text"},"ts":1585775202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling builders usually just return the instance from each method and it's not a problem","msgtype":"m.text"},"ts":1585775214000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er yeah that's fair","msgtype":"m.text"},"ts":1585775235000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but the DOM element example that jackworks gave is quite relevant","msgtype":"m.text"},"ts":1585775256000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I was just giving the one example I could demonstrate with the Dart code that I've personally written 😓","msgtype":"m.text"},"ts":1585775280000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the dom example requires appendTo existing, which it doesn't :P","msgtype":"m.text"},"ts":1585775288000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`console.log(date.withCalendar(\"japanese\").era); // \"reiwa\"` shouldn't it return \"令和\" instead of \"reiwa\"?","msgtype":"m.text"},"ts":1585775295000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"here's a thing that generates AST node classes from a YAML file: https://github.com/rkirsling/dlox/blob/master/tool/generate_ast.dart","msgtype":"m.text"},"ts":1585775300000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in actual fact you'd still have to put it in a variable and then do parent.append(variable)","msgtype":"m.text"},"ts":1585775306000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jackworks: yeah that's what michaelficarra asked too","msgtype":"m.text"},"ts":1585775340000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"probably the two-in-one character though","msgtype":"m.text"},"ts":1585775350000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"㋿","msgtype":"m.text"},"ts":1585775372000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah it specifically should be the square era name","msgtype":"m.text"},"ts":1585775409000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585775526000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"can we add \"reify\" to https://github.com/tc39/how-we-work/blob/master/terminology.md ?","msgtype":"m.text"},"ts":1585776583000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"Are you looking for a definition?","msgtype":"m.text"},"ts":1585776752000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Yes, we should add it.","msgtype":"m.text"},"ts":1585776758000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"mpcsh: be the change you want to see in the world","msgtype":"m.text"},"ts":1585776759000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(I don't know what the term means, which is why I was asking here)","msgtype":"m.text"},"ts":1585776796000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"Currently `this.#foo` exists only as syntax","msgtype":"m.text"},"ts":1585776822000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"we should indeed add it. the meaning is, to give a language-level value to, which could be inspected and passed around as any other value could","msgtype":"m.text"},"ts":1585776823000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`#foo` isn’t actually a property key","msgtype":"m.text"},"ts":1585776831000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"mpcsh: ah ok fair","msgtype":"m.text"},"ts":1585776836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"And doesn’t have a ECMAScript value","msgtype":"m.text"},"ts":1585776842000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So you can’t type `console.log(#foo)`","msgtype":"m.text"},"ts":1585776849000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Because it’s not a value","msgtype":"m.text"},"ts":1585776854000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Reify means creating a value for it","msgtype":"m.text"},"ts":1585776866000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"it means \"make concrete\"","msgtype":"m.text"},"ts":1585776885000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's a really opaque term though if you're not used to it","msgtype":"m.text"},"ts":1585776914000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"first-class representation\" was a nice synonym just now","msgtype":"m.text"},"ts":1585776996000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've used \"instantiable\" instead of \"reified\" before but that doesn't apply in all occasions","msgtype":"m.text"},"ts":1585777027000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if we don't reify these as first class values i'm gonna cry","msgtype":"m.text"},"ts":1585777044000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are we talking about lexical referencing or straight 1st class reification as a value? i'm confused as i'd be wary of passing around the value","msgtype":"m.text"},"ts":1585777054000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i would kill to be able to pass around the value","msgtype":"m.text"},"ts":1585777073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we could stop using non-enumerable symbols in node core","msgtype":"m.text"},"ts":1585777095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"really we just need private symbols","msgtype":"m.text"},"ts":1585777191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Can’t Node use V8 internals?","msgtype":"m.text"},"ts":1585777220000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Meaning, can’t you just use V8’s internal Private Symbols?","msgtype":"m.text"},"ts":1585777231000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"someone was against that","msgtype":"m.text"},"ts":1585777248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but regardless","msgtype":"m.text"},"ts":1585777254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would be a shame to keep that fun to v8","msgtype":"m.text"},"ts":1585777258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its such a useful feature","msgtype":"m.text"},"ts":1585777262000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I really like Private Symbols...","msgtype":"m.text"},"ts":1585777272000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"it fulfills all the use cases in such a natural way :(","msgtype":"m.text"},"ts":1585777274000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: btw in node you can use https://npmjs.org/@snek/private","msgtype":"m.text"},"ts":1585777327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Link to source code?","msgtype":"m.text"},"ts":1585777368000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh apparently i forgot to push lol","msgtype":"m.text"},"ts":1585777384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/devsnek/private","msgtype":"m.text"},"ts":1585777385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"404","msgtype":"m.text"},"ts":1585777392000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: https://github.com/devsnek/private-symbol/blob/master/private.cc","msgtype":"m.text"},"ts":1585777474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"THanks","msgtype":"m.text"},"ts":1585777666000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I was curious how you did it. Makes sense that it’s a native module","msgtype":"m.text"},"ts":1585777687000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes :(","msgtype":"m.text"},"ts":1585777700000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i want to give this amazing api to all of js","msgtype":"m.text"},"ts":1585777715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If you run first, you could patch the `Object.keys` (and friends) to ignore regular regular symbols","msgtype":"m.text"},"ts":1585777773000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell Bakkot ljharb rkirsling: https://github.com/tc39/how-we-work/issues/80","msgtype":"m.text"},"ts":1585777774000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"jridgewell: can't patch for-in","msgtype":"m.text"},"ts":1585777790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for-in can’t return a Symbol","msgtype":"m.text"},"ts":1585777799000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh neat","msgtype":"m.text"},"ts":1585777801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The only way to expose a Symbol is through the methods","msgtype":"m.text"},"ts":1585777821000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"neat idea","msgtype":"m.text"},"ts":1585777839000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh wait proxies","msgtype":"m.text"},"ts":1585777849000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Object.assign, object spread, Object.getOwnPropertySymbols, Reflect.ownKeys, proxies","msgtype":"m.text"},"ts":1585777855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: need the modifications for proxies","msgtype":"m.text"},"ts":1585777858000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah, Proxy invariants will be super wonky","msgtype":"m.text"},"ts":1585777862000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"those all interact with sym,bols","msgtype":"m.text"},"ts":1585777862000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"proxies were a mistake","msgtype":"m.text"},"ts":1585777869000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the original sin of ES6","msgtype":"m.text"},"ts":1585777876000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: That’s why I said “(and friends)\"","msgtype":"m.text"},"ts":1585777886000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"There are quite a few methods that need to be patched","msgtype":"m.text"},"ts":1585777892000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585777895000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"But it _could_ be done","msgtype":"m.text"},"ts":1585777898000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I think Proxies are the only really hard part","msgtype":"m.text"},"ts":1585777923000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Because of their internal invariant checks","msgtype":"m.text"},"ts":1585777932000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/compare/master...devsnek:feature/private-symbols?expand=1","msgtype":"m.text"},"ts":1585777935000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fairly small change in the spec at least","msgtype":"m.text"},"ts":1585777960000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the entire diff is +60-12","msgtype":"m.text"},"ts":1585777974000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It’s much large, unfortunately","msgtype":"m.text"},"ts":1585777995000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell this would also require discipline in never using a property a user-controlled object, because it might be a proxy with a `get` trap","msgtype":"m.text"},"ts":1585778000000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in my diff you have to tell the proxy which private symbols it can trap","msgtype":"m.text"},"ts":1585778040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://docs.google.com/presentation/d/1HWM_pREmpz7QN9VrNeFt5T-x6CfKBL06pXhiQcxgfgU/edit","msgtype":"m.text"},"ts":1585778040000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"so you're able to trap ones you can reach","msgtype":"m.text"},"ts":1585778051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the other ones can't be","msgtype":"m.text"},"ts":1585778055000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That was my design as well!","msgtype":"m.text"},"ts":1585778076000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"+1 to that","msgtype":"m.text"},"ts":1585778078000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can only trap the ones you've proven you can already access","msgtype":"m.text"},"ts":1585778088000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: You have to wrap Proxy, too","msgtype":"m.text"},"ts":1585778099000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the entire proxy global","msgtype":"m.text"},"ts":1585778111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You have to ensure the handlers don’t receive a private symbol","msgtype":"m.text"},"ts":1585778114000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"ah and then proxy the proxy, fun","msgtype":"m.text"},"ts":1585778118000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yeah doable","msgtype":"m.text"},"ts":1585778120000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/proxy the proxy/proxy the handler/","msgtype":"m.text"},"ts":1585778127000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I actually have an implementation of that.","msgtype":"m.text"},"ts":1585778136000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"if we just figure out how private fields map to this","msgtype":"m.text"},"ts":1585778153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we can propose it and retire","msgtype":"m.text"},"ts":1585778160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it was proposed and rejected","msgtype":"m.text"},"ts":1585778179000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"We can reify private fields to symbols, iff we keep the brand semantics","msgtype":"m.text"},"ts":1585778182000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you can say the throwing is part of the # syntax","msgtype":"m.text"},"ts":1585778193000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"My proposal got rejected due to using normal propery lookup semantics","msgtype":"m.text"},"ts":1585778233000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"because heaven forbid they're just properties :(","msgtype":"m.text"},"ts":1585778248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It must throw, else there’ll be many objections","msgtype":"m.text"},"ts":1585778249000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"we have the throwing version","msgtype":"m.text"},"ts":1585778260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"objection handled","msgtype":"m.text"},"ts":1585778264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that does not in fact handle the objection","msgtype":"m.text"},"ts":1585778278000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"then why is it in the language","msgtype":"m.text"},"ts":1585778285000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well stage 3","msgtype":"m.text"},"ts":1585778293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"years and years of consensus-building","msgtype":"m.text"},"ts":1585778300000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"decades, even","msgtype":"m.text"},"ts":1585778304000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Which part are you talking about?","msgtype":"m.text"},"ts":1585778327000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Reification is its own discussion, but private symbols with brand semantics would be possible","msgtype":"m.text"},"ts":1585778358000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"My proposal was several changes, and there were objections to basically each","msgtype":"m.text"},"ts":1585778374000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But that doesn’t change the symbol reification is possible","msgtype":"m.text"},"ts":1585778388000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Jumping back for a moment: the point of the cascade operator is that it allows you to do chaining on APIs that *don't* support chaining explicitly. (Such as a *lot* of legacy DOM APIs.) If an API is, say, already using the chained-builder pattern, then it's not necessary, as normal method chaining works there.","msgtype":"m.text"},"ts":1585778537000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"property assignment doesn't support chaining. I have to add a `enableSomeFeature()` that return `this` to prevent the awkward break of chaining","msgtype":"m.text"},"ts":1585778665000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"TabAtkins: +1, sorry for the misspeak","msgtype":"m.text"},"ts":1585778667000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"What confuses me about Dart's syntax is that it appears to bless the receiver of the first cascade operator in an expression, such that all subsequent cascades in the same expression use the same receiver? That feels weird as heck to me.","msgtype":"m.text"},"ts":1585778783000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1585778845000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That all said, hmmmm, does pipeline+comma give us this ability natively? `document.createElement('div') |> #.className = 'abc', #.onclick = ()=>{}, #.appendTo(document.body), #`","msgtype":"m.text"},"ts":1585778915000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1585778938000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(i don't think it does currently, the position of the placeholder is pretty constrained atm)","msgtype":"m.text"},"ts":1585778951000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Okay one sec, lemme make it multiline ^_^","msgtype":"m.text"},"ts":1585778957000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I'm specifically using the hack-syntax pipelines; all other pipelines syntaxes are dead to me for their inherent weaknesses)","msgtype":"m.text"},"ts":1585778983000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1585779039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"document.createElement('div') |>","msgtype":"m.text"},"ts":1585779039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"    #.className = 'abc',","msgtype":"m.text"},"ts":1585779039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"    #.onclick = ()=>{},","msgtype":"m.text"},"ts":1585779039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"    #.appendTo(document.body),","msgtype":"m.text"},"ts":1585779039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"    #","msgtype":"m.text"},"ts":1585779040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1585779040000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"uhoh","msgtype":"m.text"},"ts":1585779048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah i got what you meant, but the current proposal grammar doesn't allow that","msgtype":"m.text"},"ts":1585779073000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Which \"current proposal\"?","msgtype":"m.text"},"ts":1585779084000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(afaik)","msgtype":"m.text"},"ts":1585779085000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the current pipeline proposal is down to F# and \"smart\", iirc, and both of those have semantics largely written down","msgtype":"m.text"},"ts":1585779111000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no idea which one is hack","msgtype":"m.text"},"ts":1585779117000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Smart allows this.","msgtype":"m.text"},"ts":1585779120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1585779122000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Hack is just \"always require the #\"","msgtype":"m.text"},"ts":1585779129000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh god","msgtype":"m.text"},"ts":1585779134000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So smart without the smarts.","msgtype":"m.text"},"ts":1585779134000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that kills point-free style?","msgtype":"m.text"},"ts":1585779243000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Note that this allows slightly wider sets of syntaxes than cascade, even: `el.appendTo(newParent)` isn't even valid syntax, but cascade requires it to exist. In DOM it's instead `newParent.appendChild(el)`, which you'd write as `document.body.appendChild(#)` in the above example","msgtype":"m.text"},"ts":1585779259000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The Hack doesn’t allow tacit style, yeah. It doesn’t have a formal proposal.","msgtype":"m.text"},"ts":1585779264000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"what if you just wrote what the computer should do in prose","msgtype":"m.text"},"ts":1585779271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the most smart","msgtype":"m.text"},"ts":1585779277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The DWIM operator.","msgtype":"m.text"},"ts":1585779282000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"(I'm not implying that I ignore smart; smart is good and pure; I was just saying that point-free is dead to me.)","msgtype":"m.text"},"ts":1585779290000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What’s this pipeline-comma operator, though?","msgtype":"m.text"},"ts":1585779325000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"it's just pipeline plus the existing horror that is the comma operator, as I understand it","msgtype":"m.text"},"ts":1585779350000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1585779358000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"just ordinary, everyday horrifying comma","msgtype":"m.text"},"ts":1585779365000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"can we fit entire programs into pipelines","msgtype":"m.text"},"ts":1585779393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I…think comma behinds less tightly than the pipe operator, but it’s been a while since I’ve been able to look at my own proposal, haha.","msgtype":"m.text"},"ts":1585779404000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"i'm pretty sure that assignment is looser than pipe as well, so actually nm","msgtype":"m.text"},"ts":1585779490000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"you'd need parens","msgtype":"m.text"},"ts":1585779503000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"document.createElement('div') |> (#.className = 'abc', #.onclick = () => {}, #.appendTo(document.body));","msgtype":"m.text"},"ts":1585779537000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"and at that point you might as well just `(x=>{...})(document.createElement('div'))`, honestly.","msgtype":"m.text"},"ts":1585779538000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it should be, yeah","msgtype":"m.text"},"ts":1585779538000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ternary, then assignment, then everything else","msgtype":"m.text"},"ts":1585779548000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Or maybe eventually:","msgtype":"m.text"},"ts":1585779560000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"wait you can do assignment in a ternary?","msgtype":"m.text"},"ts":1585779564000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"document.createElement('div') |> {","msgtype":"m.text"},"ts":1585779564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"  #.className = 'abc',","msgtype":"m.text"},"ts":1585779564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"  #.onclick = () => {},","msgtype":"m.text"},"ts":1585779564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"  #.appendTo(document.body);","msgtype":"m.text"},"ts":1585779564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1585779564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Er, those should be semicolons in that block.","msgtype":"m.text"},"ts":1585779578000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585779584000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm for it","msgtype":"m.text"},"ts":1585779588000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I haven’t kept up; I don’t know how do-expressions have been doing.","msgtype":"m.text"},"ts":1585779590000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"still bad","msgtype":"m.text"},"ts":1585779594000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"er oops I misspoke again","msgtype":"m.text"},"ts":1585779604000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"🤦","msgtype":"m.text"},"ts":1585779615000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bad = those problems with loop control?","msgtype":"m.text"},"ts":1585779628000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"comma, assignment, ternary, ...","msgtype":"m.text"},"ts":1585779633000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wait: `((x=document.createElement('div'))=>{x.classList = 'abc'; ... })()`, there, now it has the starting value up front","msgtype":"m.text"},"ts":1585779639000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"too many parens, but oh well","msgtype":"m.text"},"ts":1585779656000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"bad = we have not revisted it mostly, I think","msgtype":"m.text"},"ts":1585779661000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, nobody's touched it i meant","msgtype":"m.text"},"ts":1585779674000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotcha.","msgtype":"m.text"},"ts":1585779709000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"so many proposals, current and future, would be obsoleted or made simpler with do expressions :-(","msgtype":"m.text"},"ts":1585779710000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"did Dave disappear now too? 😓","msgtype":"m.text"},"ts":1585779714000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"YUP","msgtype":"m.text"},"ts":1585779715000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What has had most of TC39’s attention lately? I need to read the latest minutes…","msgtype":"m.text"},"ts":1585779765000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"So pipeline + do-expr would give you the arrow-function above, but with a lot less parens to worry about.","msgtype":"m.text"},"ts":1585779770000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aka the standard benefit of pipeline, so yay","msgtype":"m.text"},"ts":1585779789000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jschoi empirically, what has most of our attention is \"which kind of unicode escape sequences should be usable in named capture group names for non-BMP unicode characters\"","msgtype":"m.text"},"ts":1585779839000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Aw yeah.","msgtype":"m.text"},"ts":1585779855000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"do expressions are on my proposal list https://snek.dev/proposal-list","msgtype":"m.text"},"ts":1585779857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean the answer is always \"whatever topics are interesting to people attending the meetings\", and nobody at the meetings is currently interested in moving do-exprs.","msgtype":"m.text"},"ts":1585779891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek: Ooh, and it's the next one up, nice","msgtype":"m.text"},"ts":1585779908000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: not ordered","msgtype":"m.text"},"ts":1585779918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry ❤️","msgtype":"m.text"},"ts":1585779924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I choose not to believe you!","msgtype":"m.text"},"ts":1585779926000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585779928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so is \"implicit do expression\" making every statement (that can be wrapped in a explicit do expr) a valid expression in JavaScript?","msgtype":"m.text"},"ts":1585779966000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks where did you see that phrase?","msgtype":"m.text"},"ts":1585779998000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"answer depends on where you saw it","msgtype":"m.text"},"ts":1585780011000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(but probably yes)","msgtype":"m.text"},"ts":1585780013000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh i like it","msgtype":"m.text"},"ts":1585780065000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I love it too. It would make one of smart pipe’s subproposals obsolete.","msgtype":"m.text"},"ts":1585780092000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"some don't make sense","msgtype":"m.text"},"ts":1585780092000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but others do","msgtype":"m.text"},"ts":1585780094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if expressions and throw expressions would be nice","msgtype":"m.text"},"ts":1585780110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it'd be weird to have both those and do expressions though","msgtype":"m.text"},"ts":1585780188000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it wouldn't","msgtype":"m.text"},"ts":1585780202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it wouldn't be weird?","msgtype":"m.text"},"ts":1585780212000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't think it would","msgtype":"m.text"},"ts":1585780218000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i use block expressions in rust all the time","msgtype":"m.text"},"ts":1585780237000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rust is a different language","msgtype":"m.text"},"ts":1585780273000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: for the same reasons i would use them in js","msgtype":"m.text"},"ts":1585780378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek sure, and do expressions might make sense; the point is that it would be would be weird to have three different ways to write a conditional in expression position","msgtype":"m.text"},"ts":1585780421000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: Why `function.sent`?","msgtype":"m.text"},"ts":1585780427000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: oh we don't have to have if expressions","msgtype":"m.text"},"ts":1585780448000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell: why not","msgtype":"m.text"},"ts":1585780457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If we could just get do expressions, I think that's an argument for not having if expressions.","msgtype":"m.text"},"ts":1585780461000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"its useful","msgtype":"m.text"},"ts":1585780462000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But it's soo hard to get do expressions, why not if statements now.","msgtype":"m.text"},"ts":1585780473000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"we have if statements :P","msgtype":"m.text"},"ts":1585780482000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is it that hard","msgtype":"m.text"},"ts":1585780484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Do you have an example?","msgtype":"m.text"},"ts":1585780490000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"is the objection still about implicit return semanticss","msgtype":"m.text"},"ts":1585780493000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1585780498000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"we should remove if statements, to encourage do-exprs.","msgtype":"m.text"},"ts":1585780501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"we have eval","msgtype":"m.text"},"ts":1585780506000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek yes but we shouldn't, everyone agrees we shouldn't except like mark","msgtype":"m.text"},"ts":1585780518000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"eval is terrible","msgtype":"m.text"},"ts":1585780520000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what was the problem with implicit returns again","msgtype":"m.text"},"ts":1585780536000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Whatever that OCP (I don't remember the acronym) closure requirements were.","msgtype":"m.text"},"ts":1585780537000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the big points of contention are 1) whether you can put break / return in expressions and 2) completion values are weird","msgtype":"m.text"},"ts":1585780540000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"TCP","msgtype":"m.text"},"ts":1585780553000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tenant's correspondence principle","msgtype":"m.text"},"ts":1585780558000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or something like that","msgtype":"m.text"},"ts":1585780559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if we don't have break and return there's no reason to have do expressions","msgtype":"m.text"},"ts":1585780562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Tennet","msgtype":"m.text"},"ts":1585780563000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Yeah, that was the big problem.","msgtype":"m.text"},"ts":1585780564000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"you can polyfill them with eval without tcp","msgtype":"m.text"},"ts":1585780570000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a big reason i want them is the return","msgtype":"m.text"},"ts":1585780589000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"you can polyfill them with eval\" is... not a valid argument for \"we don't need X\" imo ^_^","msgtype":"m.text"},"ts":1585780596000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1585780604000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would add it to the private field list of sad things","msgtype":"m.text"},"ts":1585780622000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"along with records","msgtype":"m.text"},"ts":1585780633000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I really wish `eval('foo')` didn't hit CSP.","msgtype":"m.text"},"ts":1585780651000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i really wish trusted types didn't exist","msgtype":"m.text"},"ts":1585780666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If that were the case, we'd already have do expressions.","msgtype":"m.text"},"ts":1585780668000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"That all said, I'm def still in the camp that we should just exactly match the eval() return semantics (even if they're nasty in some cases like loops) for simplicity (no more discussions needed!) and also I just plain don't understand what the return/break problems are","msgtype":"m.text"},"ts":1585780807000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so glad eval hits CSP","msgtype":"m.text"},"ts":1585781024000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so glad","msgtype":"m.text"},"ts":1585781025000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek they don't exist yet!","msgtype":"m.text"},"ts":1585781041000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they probably will","msgtype":"m.text"},"ts":1585781045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I also didn't like them originally, still think they're ugly but will probably make actual users actually safer, so I am willing to accept them","msgtype":"m.text"},"ts":1585781067000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"users of websites, that is","msgtype":"m.text"},"ts":1585781072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"who are the most numerous and highest (to me) priority group","msgtype":"m.text"},"ts":1585781082000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm not convinced but 🤷","msgtype":"m.text"},"ts":1585781134000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't do web spec","msgtype":"m.text"},"ts":1585781137000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`eval(foo)` should certainly hit CSP","msgtype":"m.text"},"ts":1585781145000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"my day job involves talking to engineers at banks","msgtype":"m.text"},"ts":1585781148000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which informs my perspective here","msgtype":"m.text"},"ts":1585781155000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"But why should `eval('foo')`?","msgtype":"m.text"},"ts":1585781171000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"do they ask for decimals","msgtype":"m.text"},"ts":1585781174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell ahhh","msgtype":"m.text"},"ts":1585781177000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek not the web devs, who are the ones I talk to","msgtype":"m.text"},"ts":1585781185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they don't ask for anything when I am talking to them","msgtype":"m.text"},"ts":1585781192000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not Tenant or Tennet, but Tennent. E.g.: https://fanf.livejournal.com/118421.html","msgtype":"m.text"},"ts":1585782844000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"tenant vs tenet vs Tennant (doctor who) vs Tennent (TCP)","msgtype":"m.text"},"ts":1585782911000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: with regards to symmetry with Identifier, is there appetite for refactoring Identifier?","msgtype":"m.text"},"ts":1585783380000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"mpcsh there's nonzero appetite but also some strong opposition","msgtype":"m.text"},"ts":1585783400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in what way? to allow surrogate pairs?","msgtype":"m.text"},"ts":1585783413000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"probably? I was just curious if people had Thoughts on this","msgtype":"m.text"},"ts":1585783436000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"I would assume there would be stronger Unicode-hat opposition to that move","msgtype":"m.text"},"ts":1585783487000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"mathiasbynens in particular has expressed a strong preference to avoid exposing surrogate pairs in more places","msgtype":"m.text"},"ts":1585783511000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"very fair. is there appetite for banning surrogate pairs entirely anywhere in the language?","msgtype":"m.text"},"ts":1585783542000,"senderName":"mpcsh","senderId":"mpcsh@irc"},
{"content":{"body":"web compat precludes that anywhere","msgtype":"m.text"},"ts":1585783560000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am personally in favor for the author simplicity of \"\\u escapes work except for the special case of non-Unicode regular expressions\", but there is definitely strong opposition on the committee","msgtype":"m.text"},"ts":1585783569000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"\"\\u escapes of both flavors\"","msgtype":"m.text"},"ts":1585783600000,"senderName":"gibson042","senderId":"gibson042@irc"}
]