[
{"content":{"body":"> so unless AssertionErrors are uncatchable (and uncatchable errors would be a huge nonstarter for a number of reasons) then i'm not sure why it'd be any different than just any kind of thrown value","msgtype":"m.text"},"ts":1621911695000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, i'm not sure how to interpret this statement","msgtype":"m.text"},"ts":1621911721000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"which part?","msgtype":"m.text"},"ts":1621911793000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the part about \"not sure why it'd be any different than just any kind of thrown value\"","msgtype":"m.text"},"ts":1621911869000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: ah. i'm saying that `throw AssertionError(message)` vs `throw TypeError(message)` doesn't seem that different to me","msgtype":"m.text"},"ts":1621911920000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and to me the word \"assertion\" or \"assert\" has two very strong possible meanings to me: \"if this fails, immediately terminate the program\" or \"this is a claim being made by a test, in non-production code\"","msgtype":"m.text"},"ts":1621911960000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(i said \"to me\" twice, lol)","msgtype":"m.text"},"ts":1621911970000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1621911999000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"my proposal would not mention anything about uncatchableness","msgtype":"m.text"},"ts":1621912035000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"good :-)","msgtype":"m.text"},"ts":1621912081000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, so here is my dilemma: most AssertionErrors that i've seen have the first argument as an options bag (node does it like this) https://github.com/nodejs/node/blob/HEAD/doc/api/assert.md#new-assertassertionerroroptions","msgtype":"m.text"},"ts":1621915707000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"but the `error-cause` proposal seems to be putting the options bag in the second argument","msgtype":"m.text"},"ts":1621915747000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1621915763000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`stackStartFn` also is a bit of a minefield","msgtype":"m.text"},"ts":1621915778000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so.. i wonder if there have already been decisions made about the types of the positional arguments of everything extending the base Error type","msgtype":"m.text"},"ts":1621915910000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: not necessarily. AggregateError takes `errors` first","msgtype":"m.text"},"ts":1621915955000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am unsure whether it would be fine to continue the convention of having the first argument as an options bag (including a `message` property) or if that would be perceived as a malformed error signature from some perspectives","msgtype":"m.text"},"ts":1621916377000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, do you think that it would be appropriate to keep it as a single-argument options-bag?","msgtype":"m.text"},"ts":1621916603000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"it’s still not clear to me what problem the proposal is solving, so it’s hard to have an intuition about the signature. for AggregateError, the argument for consistency (message first) lost out to the argument for consistency (required things first, message is optional)","msgtype":"m.text"},"ts":1621916732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"given that the message would obviously have to be its own argument, for consistency, and given that it’s optional as well as the options bag, i think you could make an argument for either order - except if you’re likely to want message even when omitting the others, in which case, message first, options second?","msgtype":"m.text"},"ts":1621916808000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, i think we can agree that interop btwx test frameworks is a very strong argument, so perhaps this is not an opportunity to redesign the api","msgtype":"m.text"},"ts":1621916840000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"I don’t think it is an argument here tho, because i haven’t seen examples of AssertionError being used to interoperate","msgtype":"m.text"},"ts":1621916879000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow “all these frameworks’ internal implementation details have the same shape” is interesting but not a strong argument to me for a built-in thing","msgtype":"m.text"},"ts":1621916909000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"since it’d effectively remove a dozen lines or so from each of less than a dozen test frameworks (and node), and otherwise wouldn’t be used much at all (unless I’m missing lots of use cases, ofc)","msgtype":"m.text"},"ts":1621916959000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, you are missing a lot of use cases. i have some notes about where the niche for this error is perfectly appropriate, but it's a bit rough, so i will have to share that some other time","msgtype":"m.text"},"ts":1621917102000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: cool, looking forward to reading it","msgtype":"m.text"},"ts":1621958728000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think I have a lot of instances of 'a?.[0] ?? null' in my code. I wonder how common that pattern is now in codebases.","msgtype":"m.text"},"ts":1621966739000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work: i doubt many people do `?? null` tbh, since most code doesn't distinguish between null and undefined","msgtype":"m.text"},"ts":1621966830000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"So does https://github.com/ryzokuken/how-we-work/blob/matrix-guide/matrix-guide.md indicate that TC39 decided to go with Matrix?","msgtype":"m.text"},"ts":1621967311000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i don't think there was any consensus, but also no strong objections yet","msgtype":"m.text"},"ts":1621967588000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"dosn't there need to be consensus on something pretty soon?","msgtype":"m.text"},"ts":1621967656000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"fwiw the backchannel discussion at the ongoing plenary seems to have moved to matrix relatively seamlessly, so I suspect we will end up there as a basically a fait accompli","msgtype":"m.text"},"ts":1621967729000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe someday someone will write a decent client for it and it will get less painful","msgtype":"m.text"},"ts":1621967843000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone email me the logs when it's over <3","msgtype":"m.text"},"ts":1621968070000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"maybe someday i will stop being a bum and get a job","msgtype":"m.text"},"ts":1621968113000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"@rbuckton hi! I've been trying to get your attention through github and also irc, for several weeks now, to review this: https://github.com/tc39/test262/pull/2968","msgtype":"m.text"},"ts":1621968275000,"senderName":"rickwaldron","senderId":"rickwaldron@irc"},
{"content":{"body":"samth, if you do not attend these meetings, you should let me go in your place (or if you do, please send sketchnotes)","msgtype":"m.text"},"ts":1621970540000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"test","msgtype":"m.text"},"ts":1621981500000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]