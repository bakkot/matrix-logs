[
{"content":{"body":"devsnek: it’d have to be safari only, so I’m assuming it’s almost zero","msgtype":"m.text"},"ts":1569815079000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that's my guess too","msgtype":"m.text"},"ts":1569815224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm wondering what usage of TLA will look like if hosts start disabling it all willy nilly","msgtype":"m.text"},"ts":1569815252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I’m sure it’ll be fine; service worker code is a tiny minority","msgtype":"m.text"},"ts":1569815366000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"worker code in general","msgtype":"m.text"},"ts":1569815373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i do agree it’s forking the language a bit, and I’d rather it not be done - but there’s also nothing tc39 can do to stop it.","msgtype":"m.text"},"ts":1569815399000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I thought Chakra was the one that didn't implement TCO","msgtype":"m.text"},"ts":1569826484000,"senderName":"Jessidhia","senderId":"Jessidhia@irc"},
{"content":{"body":"it's just JSC and XS that have it: https://test262.report/features/tail-call-optimization/language","msgtype":"m.text"},"ts":1569827918000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Hi everyone, what about a few methods to work with sets conveniently.1. s.issubset(t) [s <= t]test whether every element in s is in t. 2. s.issuperset(t) [s >= t]test whether every element in t is in s. 3. s.union(t) [s | t]new set with elements from both s and t. 4. s.intersection(t) [s & t]new set with elements common to s and t. 5.","msgtype":"m.text"},"ts":1569878657000,"senderName":"notprometey","senderId":"notprometey@irc"},
{"content":{"body":"s.difference(t) [s - t]new set with elements in s but not in t. 6. s.symmetric_difference(t) [s ^ t]new set with elements in either s or t but not both.","msgtype":"m.text"},"ts":1569878658000,"senderName":"notprometey","senderId":"notprometey@irc"},
{"content":{"body":"notprometey: https://github.com/tc39/set-methods","msgtype":"m.text"},"ts":1569878783000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: could you rebase 1670 to master? I'm getting lots of spurious errors.","msgtype":"m.text"},"ts":1569879674000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Or, how can I rebase my own copy to master?","msgtype":"m.text"},"ts":1569879765000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nm, i think I got it.","msgtype":"m.text"},"ts":1569880315000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: I don't think the world of hosts is all that disorganized. They could theoretically do a lot of things, in certain readings of the specification.","msgtype":"m.text"},"ts":1569881118000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: there are so many little js engines out there it's kinda crazy","msgtype":"m.text"},"ts":1569881897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: i rebased","msgtype":"m.text"},"ts":1569882433000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think the ecosystem of JS engines relies on some obvious, but impossible to write down, invariants about what should be accepted. For example, the maximum JS stack depth shouldn't be ridiculously small, or you won't be able to run anyone else's code (but what does that mean??)","msgtype":"m.text"},"ts":1569882692000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and yet, you can only go about 400 calls down in engine262 :)","msgtype":"m.text"},"ts":1569882725000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although that's a rather contrived example","msgtype":"m.text"},"ts":1569882761000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd think using [[async]] was sort of an \"unwritten invariant\" but perhaps not","msgtype":"m.text"},"ts":1569882878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a spec is only as strong as its consistent implementations","msgtype":"m.text"},"ts":1569882906000,"senderName":"devsnek","senderId":"devsnek@irc"}
]