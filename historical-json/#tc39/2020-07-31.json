[
{"content":{"body":"ok I found it it didn't change in 2019","msgtype":"m.text"},"ts":1596158808000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is quoted here: https://www.quora.com/Why-do-you-think-modulus-is-not-defined-for-floating-point-numbers","msgtype":"m.text"},"ts":1596158811000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but... uh... this is wrong, right? like, set x = 9, y = 5, and then it says to find \"n\" as \"the integer nearest the exact number x/y\", i.e. the integer nearest 9/5, i.e. 2, and then r = x - y * n, i.e. r=9 - 5 * 2, i.e. r = -1","msgtype":"m.text"},"ts":1596158967000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which is... not what remainder(9, 5) is","msgtype":"m.text"},"ts":1596159009000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"... right?","msgtype":"m.text"},"ts":1596159011000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"am I crazy?","msgtype":"m.text"},"ts":1596159013000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> Floating point remainder. This is not like a normal modulo operation, it can be negative for two positive numbers. It returns the exact value of x–(round(x/y)·y).","msgtype":"m.text"},"ts":1596159102000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whyyyyy","msgtype":"m.text"},"ts":1596159192000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"computers be that way sometimes","msgtype":"m.text"},"ts":1596159212000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so when number::remainder says it \"the floating-point remainder r from a dividend n and a divisor d is defined by the mathematical relation [...]\", that doesn't actually mean the IEEE floating-point remainder","msgtype":"m.text"},"ts":1596159227000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1596159518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it should probably not claim to be the floating-point remainder then","msgtype":"m.text"},"ts":1596159529000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sidebar: was creating a demo to share this, got the best URL for it: https://repl.it/repls/ImpracticalDearestRuntimelibrary","msgtype":"m.text"},"ts":1596159549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1596160210000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TIL es6 didn't have the ?/! macros","msgtype":"m.text"},"ts":1596162555000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we must remember what has been lost https://i.imgflip.com/49yuel.jpg","msgtype":"m.text"},"ts":1596162934000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"your meme has an off-by-one error","msgtype":"m.text"},"ts":1596163037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or off by three i guess","msgtype":"m.text"},"ts":1596163052000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wat","msgtype":"m.text"},"ts":1596163102000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1596163166000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: 5, 5.1, and 6 have no assigned doge","msgtype":"m.text"},"ts":1596163386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we don't ~talk~ meme about the \"middle times\"","msgtype":"m.text"},"ts":1596163553000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the second test in built-ins/String/raw/special-characters.js","msgtype":"m.text"},"ts":1596208498000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it turns \\<CR>\\<CR><LF>\\<LF>","msgtype":"m.text"},"ts":1596208549000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"into \\<LF>\\<LF>\\<LF>","msgtype":"m.text"},"ts":1596208583000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that sound correct","msgtype":"m.text"},"ts":1596208586000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: in an ast, would you ever expect to see a node of type \"ForBinding\"","msgtype":"m.text"},"ts":1596214020000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek probably not","msgtype":"m.text"},"ts":1596214030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"LHS of a for-of is either a let-style binding or the LHS of an assignment expression","msgtype":"m.text"},"ts":1596214051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"woudl be weird to have the type not be... those","msgtype":"m.text"},"ts":1596214057000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess one difference is that you can have a `const` binding which isn't initialized?","msgtype":"m.text"},"ts":1596214087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but doesn't seem worth splitting out","msgtype":"m.text"},"ts":1596214093000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm more trying to figure out the organization of uh","msgtype":"m.text"},"ts":1596214096000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when a certain production gets its own node type vs when it's just its children","msgtype":"m.text"},"ts":1596214118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe a better way to ask is: would you ever expect to see { type: 'BindingProperty', SingleNameBinding: ... }","msgtype":"m.text"},"ts":1596214188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of BindingProperty : SingleNameBinding just becoming SingleNameBinding","msgtype":"m.text"},"ts":1596214202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for most ASTs, you never have a node type which only has one legal parent","msgtype":"m.text"},"ts":1596215093000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though I think sometimes it's unavoidable because the type system is too constrained","msgtype":"m.text"},"ts":1596215139000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess \"one legal parent\" isn't quite right, but rather one legal _position_","msgtype":"m.text"},"ts":1596215228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the exception to that is that sometimes you need a wrapper type to separate semantics: like `{ a, ...a }`, you need to differentiate between the two kinds of thing which are otherwise identical, so you might have a `SpreadProperty` which can only appear in objects","msgtype":"m.text"},"ts":1596217920000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i should get a bunch of parser nerds to review the engine262 ast when i finish it","msgtype":"m.text"},"ts":1596218464000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just use shift's","msgtype":"m.text"},"ts":1596218496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"inventing new ASTs makes things harder to use, it needs a pretty good justification","msgtype":"m.text"},"ts":1596218579000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well i'm not expecting anyone to use this","msgtype":"m.text"},"ts":1596218591000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"outside of engine262","msgtype":"m.text"},"ts":1596218597000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, but it is less overhead for people to contribute to your project, and less overhead for contributors to your project to contribute to other projects, if you use a standard AST","msgtype":"m.text"},"ts":1596218666000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'd argue the opposite in this context actually","msgtype":"m.text"},"ts":1596218709000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1596218717000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it takes a lot of effort to map the spec's semantics to an ast that doesn't match","msgtype":"m.text"},"ts":1596218725000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shift matches the spec pretty precisely","msgtype":"m.text"},"ts":1596218777000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just elides intermediate nodes, which pretty much every AST does","msgtype":"m.text"},"ts":1596218788000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and has slightly tighter constraints in some places where the spec enforces those constraints with early errors","msgtype":"m.text"},"ts":1596218820000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm for example","msgtype":"m.text"},"ts":1596218901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"FunctionDeclaration with isAsync/isGenerator","msgtype":"m.text"},"ts":1596218907000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"vs having GeneratorFunctionDeclaration and AsyncFunctionDeclaration","msgtype":"m.text"},"ts":1596218915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, sure, I can see the argument for having a lot more node types rather than having fields on nodes","msgtype":"m.text"},"ts":1596218957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think it'll probably end up being a lot more code that way, though","msgtype":"m.text"},"ts":1596218994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like most places you want to treat those things identically","msgtype":"m.text"},"ts":1596219002000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would say, engine262 has a lot of superfluous structure in order to have less \"is this a node of x type\" code","msgtype":"m.text"},"ts":1596219003000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for Contains or whatever","msgtype":"m.text"},"ts":1596219005000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1596219020000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its more annoying in static semantics for sure","msgtype":"m.text"},"ts":1596219027000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although the way we were writing static semantics with acorn was already annoying","msgtype":"m.text"},"ts":1596219046000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"basically everything in the acorn version goes through this https://github.com/engine262/engine262/blob/master/src/ast.mjs","msgtype":"m.text"},"ts":1596219082000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"never actually check `node.type` directly","msgtype":"m.text"},"ts":1596219088000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fun","msgtype":"m.text"},"ts":1596219216000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we usually just do `switch (node.type)`","msgtype":"m.text"},"ts":1596219223000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, actually, in practice we just have one place that does that and everything else uses it","msgtype":"m.text"},"ts":1596219237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/shapesecurity/shift-reducer-js/blob/2732f575213b200a9acb9fe1a5da47e9b8f13c1e/gen/director.js","msgtype":"m.text"},"ts":1596219254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(ok, it uses an object with mappings rather than a switch, but close enough)","msgtype":"m.text"},"ts":1596219266000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ya saw that","msgtype":"m.text"},"ts":1596219320000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with the new ast i just switch on type as well: https://github.com/engine262/engine262/blob/parser/src/evaluator.mjs#L83","msgtype":"m.text"},"ts":1596219348000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1596219507000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am generally quite happy with the tradeoff Shift makes with having the appropriate number of types of node","msgtype":"m.text"},"ts":1596219531000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if i was going to make a general purpose ast it would probably look like shift","msgtype":"m.text"},"ts":1596219557000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"every AST ends up being general purpose eventually","msgtype":"m.text"},"ts":1596219601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's how we ended up with estree","msgtype":"m.text"},"ts":1596219606000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(but yeah a custom one sounds reasonable for your case)","msgtype":"m.text"},"ts":1596219643000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't think you can even use the parser in engine262 without accidentally including the entire runtime","msgtype":"m.text"},"ts":1596219667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"couldn't use estree without including an entire browser for a long time and that didn't stop anyone","msgtype":"m.text"},"ts":1596219714000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1596219727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: Does https://github.com/tc39/ecma262/pull/2007#issuecomment-667271814 mean that you're going to want my review soon, or just that there will soon be a new version available for review? (Or possibly both)","msgtype":"m.text"},"ts":1596224183000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that there will soon be a new version available for review","msgtype":"m.text"},"ts":1596224234000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we're fixing the issues we're aware of (dates are indeed a particularly tricky one)","msgtype":"m.text"},"ts":1596224246000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you are able to review that one to find the issues we miss (of which I am sure there will be a number) that will be much appreciated","msgtype":"m.text"},"ts":1596224291000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my current stumbling block is that operations `MakeDate` have math being performed on Numbers, and these _might_ have different semantics if you use IEEE floating point math rather than doing the math in the math domain and converting to/from at the boundary of the function, and I need to figure out if the difference is observable and, if so, which is intended/implemented","msgtype":"m.text"},"ts":1596224426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*operations like MakeDate","msgtype":"m.text"},"ts":1596224438000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(ps ryzokuken or other datetime people, if you know the answer to the above question I would love to hear it)","msgtype":"m.text"},"ts":1596224478000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"choose the most confusing behaviour so our successors don't have it too easy","msgtype":"m.text"},"ts":1596224530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Damn","msgtype":"m.text"},"ts":1596224540000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I'm on phone can someone please link me to MakeDate?","msgtype":"m.text"},"ts":1596224593000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-makedate","msgtype":"m.text"},"ts":1596224617000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The abstract operation MakeDate takes arguments day (a Number) and time (a Number). It calculates a number of milliseconds. It performs the following steps when called:","msgtype":"m.text"},"ts":1596224622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"If day is not finite or time is not finite, return NaN.","msgtype":"m.text"},"ts":1596224622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Return day × msPerDay + time.","msgtype":"m.text"},"ts":1596224622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I doubt the difference is observable cuz I implemented that in engine262 using floating point math","msgtype":"m.text"},"ts":1596224784000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then again test262 might be lacking","msgtype":"m.text"},"ts":1596224823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that doesn't mean it's not observable, just means that the difference either is not exercised in the tests (extremely likely) or that the intention is to use floating point math (also likely)","msgtype":"m.text"},"ts":1596224830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess for now I will assume floating piont","msgtype":"m.text"},"ts":1596224953000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"part of my hesitation is that MakeTime explicitly says to use IEEE arithmetic","msgtype":"m.text"},"ts":1596224987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and none of the rest of them do","msgtype":"m.text"},"ts":1596224993000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1596225010000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"the MakeTime one is also confusing because it does two additions without parentheses, but IEEE arithmetic is not associative","msgtype":"m.text"},"ts":1596225020000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Can we just convert to real numbers?","msgtype":"m.text"},"ts":1596225163000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Before that math?","msgtype":"m.text"},"ts":1596225168000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"well, yes, that's the question","msgtype":"m.text"},"ts":1596225177000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we could do that, but this might have observably different semantics","msgtype":"m.text"},"ts":1596225189000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So idk what the original intent was either","msgtype":"m.text"},"ts":1596225214000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Probably need to check in implemeters","msgtype":"m.text"},"ts":1596225226000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"And no harm in specifying now if it doesn't break web reality, is there?","msgtype":"m.text"},"ts":1596225250000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Implementations*","msgtype":"m.text"},"ts":1596225289000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"well, two things: a.) if it's a normative change I'd have to bring it to plenary, and b.) implementations are unlikely to want to actually do arbitrary-precisino math","msgtype":"m.text"},"ts":1596225310000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Since the aim of the pr seems to be reducing ambiguity, we need to specify it one way or the other, I suppose.","msgtype":"m.text"},"ts":1596225547000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"it looks like in es5 this was explicitly not specified: \"an implementation is permitted a choice of internal representations of time values, for example as a 64-bit signed integer or as a 64-bit floating-point value\"","msgtype":"m.text"},"ts":1596225562000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oh wow","msgtype":"m.text"},"ts":1596225586000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I didn't know we accepted integers like that.","msgtype":"m.text"},"ts":1596225613000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"What about the date value? Surely that accepts floats.","msgtype":"m.text"},"ts":1596225643000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"it wouldn't be observable except that the arithmetic would be more precise","msgtype":"m.text"},"ts":1596225657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1596225770000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Don't really know, to be honest 😅","msgtype":"m.text"},"ts":1596225783000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I'll dig deeper into this","msgtype":"m.text"},"ts":1596225840000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"$ eshost -s -e 'Date.UTC(1970, 0, 1, 80063993375, 29, 1, -288230376151711740)'","msgtype":"m.text"},"ts":1596230496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"#### Chakra, SpiderMonkey, V8, XS","msgtype":"m.text"},"ts":1596230496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"29312","msgtype":"m.text"},"ts":1596230496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"#### JavaScriptCore","msgtype":"m.text"},"ts":1596230496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"NaN","msgtype":"m.text"},"ts":1596230496000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"JSC what are you doing","msgtype":"m.text"},"ts":1596230500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: https://gc.gy/63935557.png","msgtype":"m.text"},"ts":1596230565000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hah! Graal is _exactly_ what I was looking for there","msgtype":"m.text"},"ts":1596230592000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"using u64?","msgtype":"m.text"},"ts":1596230606000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mm, no, just parenthesizing differently","msgtype":"m.text"},"ts":1596230614000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1596230622000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`80063993375 * 3600000 + 29 * 60000 + 1 * 1000 - 2**58` is, in math, 29256","msgtype":"m.text"},"ts":1596230646000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so quickjs wins","msgtype":"m.text"},"ts":1596230664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in double-precision floats, if you do your `+` left-associate, it's 29312","msgtype":"m.text"},"ts":1596230671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you parenthesize as 80063993375 * 3600000 + (29 * 60000 + 1 * 1000) - 2**58, it's 29248","msgtype":"m.text"},"ts":1596230687000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what if you return nan","msgtype":"m.text"},"ts":1596230705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think the way you end up with NaN is by time-clipping before doing the arithmetic, which is not allowed per spec","msgtype":"m.text"},"ts":1596230732000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> `return JSValue::encode(jsNumber(timeClip(ms)));`","msgtype":"m.text"},"ts":1596230769000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is that from jsc's source?","msgtype":"m.text"},"ts":1596230811000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ya","msgtype":"m.text"},"ts":1596230817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sweet","msgtype":"m.text"},"ts":1596230820000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"link?","msgtype":"m.text"},"ts":1596230821000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is gonna be a fun test262 test","msgtype":"m.text"},"ts":1596230830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/WebKit/webkit/blob/de7fb331a9fb6ed6773508765f9498fb12f90b4d/Source/JavaScriptCore/runtime/DateConstructor.cpp#L173","msgtype":"m.text"},"ts":1596230836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thank","msgtype":"m.text"},"ts":1596230839000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so glad we support -2**58 milliseconds","msgtype":"m.text"},"ts":1596230913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and 80 billion hours","msgtype":"m.text"},"ts":1596230955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, it looks like TimeClip is the only place we enforce the restricted range for 'time values', and TimeClip is generally called very late in Date functions, so all the date-related operations are potentially dealing with \"out of range\" Number values.","msgtype":"m.text"},"ts":1596231321000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: actually JSC is a lot scarier than i thought","msgtype":"m.text"},"ts":1596231398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its not the clipping, its this https://github.com/WebKit/webkit/blob/de7fb331a9fb6ed6773508765f9498fb12f90b4d/Source/JavaScriptCore/runtime/DateConstructor.cpp#L84-L96","msgtype":"m.text"},"ts":1596231409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it throws everything away if the args don't fit in i32","msgtype":"m.text"},"ts":1596231430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"$ eshost -s -e 'Date.UTC(1970, 0, 1, 0, 0, 0, 2**32)'","msgtype":"m.text"},"ts":1596231528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"#### Chakra, SpiderMonkey, V8, XS","msgtype":"m.text"},"ts":1596231528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"4294967296","msgtype":"m.text"},"ts":1596231528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"#### JavaScriptCore","msgtype":"m.text"},"ts":1596231528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"NaN","msgtype":"m.text"},"ts":1596231528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1596231532000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":":^)","msgtype":"m.text"},"ts":1596231539000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's like a month and a half into the start of the epoch","msgtype":"m.text"},"ts":1596231571000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"2**32 is a totally reasonable number of milliseconds","msgtype":"m.text"},"ts":1596231578000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"🤷🏻","msgtype":"m.text"},"ts":1596231592000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wonder why they even bother with timeClip, then","msgtype":"m.text"},"ts":1596231623000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wow i have a webkit bugzilla account","msgtype":"m.text"},"ts":1596231745000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=215034","msgtype":"m.text"},"ts":1596231877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is there a test262 test","msgtype":"m.text"},"ts":1596231969000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't think so but i'm not 100% sure","msgtype":"m.text"},"ts":1596232041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at a quick glance, no","msgtype":"m.text"},"ts":1596232134000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if jsc has a place which records expectations for test262, that would be an easy way to check","msgtype":"m.text"},"ts":1596232156000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"am i the only one who uses `-ts` instead of `-s` in eshost","msgtype":"m.text"},"ts":1596232163000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"omitting the -t makes output which is more suitable for copy-pasting","msgtype":"m.text"},"ts":1596232198000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://test262.report/browse/built-ins/Date?engines=javascriptcore","msgtype":"m.text"},"ts":1596232201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: product excellence is about not living in the past","msgtype":"m.text"},"ts":1596232751000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: pretty sure I can come up with an example that may or may not be in the past depending on the implementation :P","msgtype":"m.text"},"ts":1596232865000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway this sounds like a fun friday activity","msgtype":"m.text"},"ts":1596232913000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2120","msgtype":"m.text"},"ts":1596233346000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah floats are dumb","msgtype":"m.text"},"ts":1596233353000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it started as a fun thursday activity","msgtype":"m.text"},"ts":1596233364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and we went until we got stuck","msgtype":"m.text"},"ts":1596233374000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then I got distracted trying to figure out of any of this was observably problematic","msgtype":"m.text"},"ts":1596233391000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: in 2120, the second parenthesization doesn't look right (to left)","msgtype":"m.text"},"ts":1596233985000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck in the PR message, or the commit?","msgtype":"m.text"},"ts":1596234027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the message, yeah, it's not right-to-left, but it is a legal parenthesization","msgtype":"m.text"},"ts":1596234051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"PR msg: deepest term would be \"(1 * 1000 + -288230376151711744)\", no?","msgtype":"m.text"},"ts":1596234061000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, ok","msgtype":"m.text"},"ts":1596234085000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I guess the full right-to-left order has the same result as my mixed-order, so I might as well use that as my example","msgtype":"m.text"},"ts":1596234141000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we agreed to \\8 \\9 erroring inside template literals regardless of strictness, right?","msgtype":"m.text"},"ts":1596235710000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or... just strict mode?","msgtype":"m.text"},"ts":1596235743000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: that was the existing behavior and has not changed","msgtype":"m.text"},"ts":1596235942000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(for untagged templates only, of course)","msgtype":"m.text"},"ts":1596235957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah so it's an existing bug...","msgtype":"m.text"},"ts":1596236008000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i see SM and V8 both accept ``\\8`` and ``\\9``","msgtype":"m.text"},"ts":1596236024000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that didn't quote the way i intended...","msgtype":"m.text"},"ts":1596236030000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"am i blind or is there no definition of BindingInitialization for ForBinding","msgtype":"m.text"},"ts":1596238509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"without looking I would guess you don't need one because of the chain production rule","msgtype":"m.text"},"ts":1596238551000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so ForBinding : BindingPattern and ForBinding: BindingIdentifier","msgtype":"m.text"},"ts":1596238634000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"automatically go to 13.3.3.5 and 12.1.5?","msgtype":"m.text"},"ts":1596238660000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> Unless explicitly specified otherwise, all chain productions have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the chain production's sole right-hand side nonterminal and then returns the result.","msgtype":"m.text"},"ts":1596238686000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1596238722000,"senderName":"devsnek","senderId":"devsnek@irc"}
]