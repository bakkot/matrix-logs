[
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1581552020000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we could format longer lists of (slot, value)s better, but probably not a bullet list","msgtype":"m.text"},"ts":1581552052000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"That'","msgtype":"m.text"},"ts":1581552070000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"That's about all we've got at the moment.","msgtype":"m.text"},"ts":1581552084000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And personally, I think it looks okay.","msgtype":"m.text"},"ts":1581552720000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"with these new changes for how objects are created","msgtype":"m.text"},"ts":1581613073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how is Array.prototype set up to correctly be an array","msgtype":"m.text"},"ts":1581613081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> Let func be a new built-in function object that when called performs the action described by steps. The new function object has internal slots whose names are the elements of internalSlotsList.","msgtype":"m.text"},"ts":1581614292000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shouldn't this be done by MakeBasicObject somehow","msgtype":"m.text"},"ts":1581614300000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"? https://tc39.es/ecma262/#sec-arraycreate passes slots to MakeBasicObject","msgtype":"m.text"},"ts":1581614625000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why would \"make basic object\" contain the knowledge about how to make a non-basic object?","msgtype":"m.text"},"ts":1581614646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Array.prototype is not specified to be created using ArrayCreate though is it?","msgtype":"m.text"},"ts":1581614683000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i couldn't find such a thing","msgtype":"m.text"},"ts":1581614686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: also MakeBasicObject is just the base way to create an object","msgtype":"m.text"},"ts":1581614772000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1581614775000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"OrdinaryCreateObject is for ordinary objects","msgtype":"m.text"},"ts":1581614782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object lists that it's an array exotic object","msgtype":"m.text"},"ts":1581614799000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1581614805000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so it doesn't use ArrayCreate but it's indistinguishable from having been called that way","msgtype":"m.text"},"ts":1581614815000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"then why does ArrayCreate exist","msgtype":"m.text"},"ts":1581614822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why don't we just say \"Create an Array exotic object with the required internal slots\"","msgtype":"m.text"},"ts":1581614833000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or rather why does ArrayCreate call MakeBasicObject","msgtype":"m.text"},"ts":1581614854000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i suspect we prefer the new ArrayCreate â†’ MakeBasicObject approach, so it's likely that Array.prototype was overlooked. jmdyck?","msgtype":"m.text"},"ts":1581615498000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"same issue for all the pre-es6 prototypes i think","msgtype":"m.text"},"ts":1581615675000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and builtin functions","msgtype":"m.text"},"ts":1581615701000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"all the prototypes that remain exotic, yeah","msgtype":"m.text"},"ts":1581615762000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there might be more i guess","msgtype":"m.text"},"ts":1581615804000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm just going through engine262 and changing them all atm","msgtype":"m.text"},"ts":1581615831000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: re \"shouldn't this be done by MakeBasicObject somehow\": ISTR that someone (domenic?) pointed out that PR 1460 didn't take on CreateBuiltinFunction.","msgtype":"m.text"},"ts":1581623962000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I can't find it now though.","msgtype":"m.text"},"ts":1581623972000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: re \"it's likely that Array.prototype was overlooked\": not so much overlooked as not quite in scope. 1460 was (I think) mostly targeting alg steps of the form \"Let foo be a newly created Foo exotic object.\" Intrinsics like Array.prototype are created in CreateIntrinsics and not by a step of that form.","msgtype":"m.text"},"ts":1581624288000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1581624377000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so, followup PRs are loosely planned for that?","msgtype":"m.text"},"ts":1581624384000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not that i know of.","msgtype":"m.text"},"ts":1581624408000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1581624438000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object, if we said (something like) \"is created via ArrayCreate(0, %Object.prototype%)\", that would cover bullets 2-4.","msgtype":"m.text"},"ts":1581625052000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1581625086000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(for all the exotic prototypes)","msgtype":"m.text"},"ts":1581625093000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I think String.prototype is the only other.","msgtype":"m.text"},"ts":1581625711000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: `Boolean.prototype` and `Number.prototype` seem to be as well","msgtype":"m.text"},"ts":1581628343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also `Function.prototype`","msgtype":"m.text"},"ts":1581628353000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"They're not exotic.","msgtype":"m.text"},"ts":1581628451000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Well, Function.prototype *could* be exotic, but it's not guaranteed to be.","msgtype":"m.text"},"ts":1581628472000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"they have internal slots","msgtype":"m.text"},"ts":1581628485000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Boolean.prototype is a boolean, Number.prototype is a Number","msgtype":"m.text"},"ts":1581628493000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes?","msgtype":"m.text"},"ts":1581628523000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'm missing your point.","msgtype":"m.text"},"ts":1581628540000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so they should perhaps be using MakeBasicObject instead of saying \"is itself a Boolean object; it has a [[BooleanData]] internal slot with the value false.\"","msgtype":"m.text"},"ts":1581628610000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie it should say something like \"is created via MakeBasicObject('[[BooleanData]]')\"","msgtype":"m.text"},"ts":1581628636000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yup, that's a possibility. Probably OrdinaryObjectCreate rather than MakeBasicObject though.","msgtype":"m.text"},"ts":1581628708000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1581628714000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(When I said \"I think String.prototype is the only other\", I was replying to your \"for all the exotic prototypes\")","msgtype":"m.text"},"ts":1581628816000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(i.e., Array.p and String.p are the only guaranteed-exotic prototypes, I think.)","msgtype":"m.text"},"ts":1581628876000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1581628960000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i guess i meant, \"isn't an ordinary object\"","msgtype":"m.text"},"ts":1581628965000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Boolean.p and Number.p are ordinary objects.","msgtype":"m.text"},"ts":1581629117000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"they have internal slots","msgtype":"m.text"},"ts":1581629181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ordinary objects don't","msgtype":"m.text"},"ts":1581629185000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or maybe, forget what i'm asserting about definitions; Boolean.p and Number.p are in a different category than Object.p and Date.p, whatever we call those categories","msgtype":"m.text"},"ts":1581629228000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sure, depending how you set up your categories","msgtype":"m.text"},"ts":1581629267000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]