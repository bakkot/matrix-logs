[
{"content":{"body":"the cookie 1 year challenge is always fun. Buy a box, wait a year buy a 2nd box and then try to guess which of the cookies are new vs old","msgtype":"m.text"},"ts":1550800933000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lol fascinating","msgtype":"m.text"},"ts":1550801532000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck: not even frozen?","msgtype":"m.text"},"ts":1550807457000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1550807460000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i know that tagalong chocolate gets relatively stale after 4-6 months, so that one'd be easy","msgtype":"m.text"},"ts":1550807484000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(when unfrozen)","msgtype":"m.text"},"ts":1550807494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: in the refrigerator is my game","msgtype":"m.text"},"ts":1550845337000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what are people's opinions on a js runtime that crashes when a promise rejects without a rejection handler","msgtype":"m.text"},"ts":1550854550000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: I don't understand why an explicit RunJobs is needed","msgtype":"m.text"},"ts":1550855068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"After each job, the job queue will be emptied automatically, at least in HTML.","msgtype":"m.text"},"ts":1550855091000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Are you running script without using a job?","msgtype":"m.text"},"ts":1550855098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hey, thanks for the quick review, Domenic","msgtype":"m.text"},"ts":1550855105000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I guess I'm missing the part where HTML gets involved here, in InnerModuleEvaluation","msgtype":"m.text"},"ts":1550855122000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I thought that spun around in JS a bunch without HTML coming into play, once the module graph was all pulled down and executing","msgtype":"m.text"},"ts":1550855142000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Step 13.g.i does PerformPromiseThen()","msgtype":"m.text"},"ts":1550855163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which will enqueue a job","msgtype":"m.text"},"ts":1550855167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which, when that job finishes, will perform a microtask checkpoint","msgtype":"m.text"},"ts":1550855178000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It currently does do that. But with the changes in top-level await, evaluating a module now does promise things, so HTML gets back into the loop","msgtype":"m.text"},"ts":1550855199000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/13.g.i/13.g.iv/","msgtype":"m.text"},"ts":1550855213000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sorry, 13.g.iv of which algorithm?","msgtype":"m.text"},"ts":1550855285000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://tc39.github.io/proposal-top-level-await/#sec-innermoduleevaluation","msgtype":"m.text"},"ts":1550855295000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how can queuing a job run the job queue","msgtype":"m.text"},"ts":1550855330000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, yeah, when all the microtask queue items are done, there's a checkpoint. But I don't see why we'd get to a checkpoint if we have a big glob of modules running","msgtype":"m.text"},"ts":1550855340000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I mean, a bunch of things will get queued, due to stuff happening in launching the evaluation of different modules","msgtype":"m.text"},"ts":1550855358000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the insertion of a microtask queue checkpoint (via the willful violation by HTML noted in FlushJobs) would sort these out","msgtype":"m.text"},"ts":1550855381000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1550855404000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there's a standing disagreement between HTML and JS on layering; I'm not trying to say things are resolved in one way or the other, just explain it with both mechanisms at once","msgtype":"m.text"},"ts":1550855409000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"So the problem is that you are queuing A, B, C, D, E but you want to run things in... what order?","msgtype":"m.text"},"ts":1550855428000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Let me do better letters","msgtype":"m.text"},"ts":1550855445000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Given https://github.com/tc39/proposal-top-level-await/issues/47#issuecomment-464488593","msgtype":"m.text"},"ts":1550855480000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Are you not queuing jobs in order a1-1, a-2, a, b, main?","msgtype":"m.text"},"ts":1550855483000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What order are you queuing the jobs in?","msgtype":"m.text"},"ts":1550855488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the microtask queue congestion issue comes up because of the Promise.all at the beginning of modules that import things","msgtype":"m.text"},"ts":1550855508000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the \"right\" tree might end up being run before the \"left\" tree if it's less deep","msgtype":"m.text"},"ts":1550855525000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, that's why a ends up running after b","msgtype":"m.text"},"ts":1550855559000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Right, I got that. But I'm trying to root cause. Is the issue you are queuing jobs in a different order than a-1, a-2, a, b, main?","msgtype":"m.text"},"ts":1550855566000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, we're telling the modules to start in the right order","msgtype":"m.text"},"ts":1550855586000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's just, when we tell a to start, it has to work through a bunch of Promise reactions first","msgtype":"m.text"},"ts":1550855605000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It seems like you could add an a-1.then(a-2) chain to do this","msgtype":"m.text"},"ts":1550855644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like, add a-1 to a-2's promise.all","msgtype":"m.text"},"ts":1550855658000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm just leery of essentially inserting a \"rearrange the job queue here\" step.","msgtype":"m.text"},"ts":1550855754000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Instead of ensuring the evaluation jobs get queued in the right order in the first place.","msgtype":"m.text"},"ts":1550855773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"isn't that going back to \"variant A\"?","msgtype":"m.text"},"ts":1550855795000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think that would be adding more synchronous behavior than what I'm doing here","msgtype":"m.text"},"ts":1550855805000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1550855809000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"flushing the microtask queue is only about the parts that run synchronously, so it's a lot lighter weight","msgtype":"m.text"},"ts":1550855822000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Yeah, that would be variant A, bad.","msgtype":"m.text"},"ts":1550855834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm just having a fundamental confusion:","msgtype":"m.text"},"ts":1550855842000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"HTML ensures that whenever the stack is empty, the job queue is drained","msgtype":"m.text"},"ts":1550855854000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but, a lot of people have had this kind of reaction, that it doesn't smell right to flush the microtask queue","msgtype":"m.text"},"ts":1550855855000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"If you have to manually flush the job queue, then that means you are doing so when the stack is not empty","msgtype":"m.text"},"ts":1550855870000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't understand why that would be necessary.","msgtype":"m.text"},"ts":1550855876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when you say stack, do you mean that there's no JS running?","msgtype":"m.text"},"ts":1550855896000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1550855903000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g. when we're waiting on a promise reaction","msgtype":"m.text"},"ts":1550855913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, this algorithm is being driven by something that's not JS; there's no JS running","msgtype":"m.text"},"ts":1550855925000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"maybe we can do something at the JS level that explains that, duh, the job queue is clearly drained, no need for FlushJobs","msgtype":"m.text"},"ts":1550855948000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1550855951000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe that is what I'm missing","msgtype":"m.text"},"ts":1550855963000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We are using jobs and promises, but there is no JS execution context stack, where emptying it triggers the microtask checkpoint... hmmm...","msgtype":"m.text"},"ts":1550856045000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, when you say HTML ensures this, do you mean in https://html.spec.whatwg.org/#event-loop-processing-model ?","msgtype":"m.text"},"ts":1550856072000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I guess the issue is (again) that JS doesn't really have a \"processing model\"","msgtype":"m.text"},"ts":1550856088000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and this algorithm is one of the few that runs when there's no JS active","msgtype":"m.text"},"ts":1550856109000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"No, I mean in https://html.spec.whatwg.org/#clean-up-after-running-script","msgtype":"m.text"},"ts":1550856126000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm, so an interesting thing about this algorithm is that we might not actually invoke JavaScript, we might just work our way through some Then reactions and find ourselves still blocked","msgtype":"m.text"},"ts":1550856232000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh, I guess that will still run the \"clean up after running script\" algorithnm","msgtype":"m.text"},"ts":1550856295000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"right, since that algorithm is run after each microtask","msgtype":"m.text"},"ts":1550856321000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Wait a minute","msgtype":"m.text"},"ts":1550856324000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Are all calls to InnerModuleEvaluation() synchronous?","msgtype":"m.text"},"ts":1550856334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1550856338000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Oh then it seems this is already aligned with HTML","msgtype":"m.text"},"ts":1550856347000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"HTML already calls \"clean up after running script\" after it calls Evalaute()","msgtype":"m.text"},"ts":1550856355000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's not the right time, since Evaluate() is only called once, and we need it called after loading each module","msgtype":"m.text"},"ts":1550856370000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"No, nevermind, yeah","msgtype":"m.text"},"ts":1550856378000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right because you are using the job queue for things that could be synchronous, hmm","msgtype":"m.text"},"ts":1550856410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK I have to run to a meeting but I am coming around to draining the job queue","msgtype":"m.text"},"ts":1550856421000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am hopeful my resolution will be to draft a lengthy non-normative note explaining why it makes sense","msgtype":"m.text"},"ts":1550856436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"why FlushJobs makes sense, or why it's not necessary?","msgtype":"m.text"},"ts":1550856460000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Why it makes sense","msgtype":"m.text"},"ts":1550856464000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"OK, great","msgtype":"m.text"},"ts":1550856471000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"We may want to tweak things a bit so we can do host setup, not just host teardown, before/after each chunk of graph work","msgtype":"m.text"},"ts":1550856504000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that makes sense; I imagine that there could be other kinds of settings to put in place. The big question to answer at this point is whether we're doing a microtask checkpoint or going for all-synchronous execution.","msgtype":"m.text"},"ts":1550856759000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and, if this seems reasonable to you, I'm leaning microtask checkpoint as well","msgtype":"m.text"},"ts":1550856785000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(turns out my meeting was a half-hour later, but now I need to get lunch in 25 minutes, whee)","msgtype":"m.text"},"ts":1550856921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"On the other hand it's a bit weird to anticipate every host adding very similar hooks just so that ES can use the job queue to do sync work","msgtype":"m.text"},"ts":1550856971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/4175#issuecomment-466047231 about a no-credentials mode instead of CORS is so weird to me.","msgtype":"m.text"},"ts":1550860860000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If we thought intranets didn't matter, we would've just made no-credentials a requirement for outgoing requests long ago and never had to do the CORS business.","msgtype":"m.text"},"ts":1550860882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oops, wrong channel","msgtype":"m.text"},"ts":1550860893000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just learned that `new Date(undefined)` is not the same thing as `new Date()` and I totally want to flip a table right now 🤯","msgtype":"m.text"},"ts":1550863143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...especially given that `new Date(null)` is treated as `new Date(0)`","msgtype":"m.text"},"ts":1550863162000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":":shakes fist at legacy apis:","msgtype":"m.text"},"ts":1550863167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"┬Temporal┬ノ( º _ ºノ)","msgtype":"m.text"},"ts":1550863176000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: good answer lol","msgtype":"m.text"},"ts":1550863186000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in other news... mathiasbynens: that \"shapes get orphaned on field type change after preventExtensions\" bug the React folks discovered is really fascinating","msgtype":"m.text"},"ts":1550863869000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I was trying to poke at exactly why the bug doesn't apply to JSC","msgtype":"m.text"},"ts":1550863895000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what bug?","msgtype":"m.text"},"ts":1550863905000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"read from here: https://slidr.io/bmeurer/javascript-engine-fundamentals-the-good-the-bad-and-the-ugly#151","msgtype":"m.text"},"ts":1550863940000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems like JSC structures don't have the same \"new shape that extends from the existing one\" pattern that V8 maps have, maybe that's the crux","msgtype":"m.text"},"ts":1550864044000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure if i get it without narration","msgtype":"m.text"},"ts":1550864057000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: so JSObjects have shapes (on-the-fly interfaces kept by the runtime, called \"maps\" in V8 and \"structures\" in JSC), and when you add a new property, a new shape gets extended from the old one (in V8 at least, as I understand it), and preventExtensions (or seal or freeze) makes sort of a final extension on top of that. The bug is that if you initialize a field to a small integer, prevent extensions, and then set it to a","msgtype":"m.text"},"ts":1550864577000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"double, you'd end up with a new orphaned shape for *every such object*: https://bugs.chromium.org/p/v8/issues/detail?id=8538","msgtype":"m.text"},"ts":1550864577000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so they realized that to work around you could initialize the field with NaN or Number.MIN_VALUE (so that it's a double to start with) and then set it to whatever value you wanted (like 0, say) -- https://github.com/facebook/react/pull/14383","msgtype":"m.text"},"ts":1550864663000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"really comical and interesting situation","msgtype":"m.text"},"ts":1550864673000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(note that \"smi\" is evidently the V8ism for \"small int\")","msgtype":"m.text"},"ts":1550864742000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's a fun diff","msgtype":"m.text"},"ts":1550876323000,"senderName":"devsnek","senderId":"devsnek@irc"}
]