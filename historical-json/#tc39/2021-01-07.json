[
{"content":{"body":"Bakkot: i think xref-not-found is not counting oldids","msgtype":"m.text"},"ts":1609979006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why would an xref point to an oldid instead of the new one?","msgtype":"m.text"},"ts":1609979089000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"good point i guess","msgtype":"m.text"},"ts":1609979119000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, that's desirable","msgtype":"m.text"},"ts":1609980823000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can someone remind me if we discussed the `toString` output for https://github.com/tc39/ecma262/pull/2216?","msgtype":"m.text"},"ts":1609981481000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since the PR changes the constructor to be created via `CreateBuiltinFunction`, i imagine `toString` will now print `[native code]` when it did not before","msgtype":"m.text"},"ts":1609981531000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: do you remember?","msgtype":"m.text"},"ts":1609981552000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh, nevermind, it's at the bottom of the PR","msgtype":"m.text"},"ts":1609981882000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it just makes it implementation-defined so we can print whatever","msgtype":"m.text"},"ts":1609981891000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not quite","msgtype":"m.text"},"ts":1609981897000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the constructor _is_ the `class` object, and it has its `[[SourceText]]` slot set explicitly to include the `class {` bit","msgtype":"m.text"},"ts":1609981917000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the change at the bottom is to check for `[[SourceText]]` before bailing out for built-in functions, which was necessary to preserve the existing behavior","msgtype":"m.text"},"ts":1609981943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least I think that's how it works, one sec","msgtype":"m.text"},"ts":1609982003000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, yes, happens in BindingClassDeclarationEvaluation","msgtype":"m.text"},"ts":1609982125000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no normative changes to toString behavior; it's still required to be the source text for the whole `class { ... }` production","msgtype":"m.text"},"ts":1609982187000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1609982295000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that answers 2 of my 3 questions","msgtype":"m.text"},"ts":1609982302000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, 1","msgtype":"m.text"},"ts":1609982401000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: no observable changes to toString afaik","msgtype":"m.text"},"ts":1609985047000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you think there are we should fix that","msgtype":"m.text"},"ts":1609985054000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nope, Bakkot cleared it up for me","msgtype":"m.text"},"ts":1609986445000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"til `NaN ** 0 === 1`","msgtype":"m.text"},"ts":1609997570000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also `(-Infinity) ** 3 === -Infinity` but `(-Infinity) ** 3.00000001 === Infinity`","msgtype":"m.text"},"ts":1609997757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The fact that NaN**0 is 1 bothers me an extremely large amount and I purposely did not reflect that into CSS's pow() function.","msgtype":"m.text"},"ts":1610049460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"would you expect it to be NaN?","msgtype":"m.text"},"ts":1610049487000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(either way the semantics were likely set in stone way back in the beginning, since `Math.pow(NaN, 0)` is also 1)","msgtype":"m.text"},"ts":1610049528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yes. The logic is clearly \"if you replace NaN with any number, it'll be 1\", but we don't apply that logic to other math functions like Math.min(NaN, -Infinity)","msgtype":"m.text"},"ts":1610049553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Math.hypot(Infinity, NaN) is the only othe rlocation where NaN isn't infectious","msgtype":"m.text"},"ts":1610049593000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I have some explanation of this in the note in https://drafts.csswg.org/css-values/#exponent-infinities)","msgtype":"m.text"},"ts":1610049631000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"littledan, Been meaning to ask this. https://github.com/tc39/proposal-decimal/issues/51#issuecomment-587598694 <- is Brendan working on a value type proposal? Not sure if you'd know about any unpublished things.","msgtype":"m.text"},"ts":1610051129000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"I should say \"still working on\" since he had one ages ago.","msgtype":"m.text"},"ts":1610051153000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"totally out of curiosity and without any priority, but the description for Number.EPSILON seems a bit off. https://tc39.es/ecma262/#sec-number.epsilon","msgtype":"m.text"},"ts":1610053684000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"where you read: \"the difference between 1 and the smallest value greater than 1 that is representable as a Number value\"","msgtype":"m.text"},"ts":1610053711000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it's more like: \"the difference between the smallest value greater than 1 that is representable as a Number value minus 1\"","msgtype":"m.text"},"ts":1610053780000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"the current text feels like EPSILON should be > 0.9 and < 1, while in fact its > 0 and < 0.0000001. Approximately: `Number.EPSILON < 0.000000000000001 && Number.EPSILON > 0`","msgtype":"m.text"},"ts":1610053887000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: i read it as \"1.somethingSmall - 1\" which would have to be between 0 and 1e-10","msgtype":"m.text"},"ts":1610054102000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"leobalter: altho i would say that the order is inverted - it currently reads like `1 - 1.somethingSmall` which would be negative","msgtype":"m.text"},"ts":1610054133000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, that's what I meant","msgtype":"m.text"},"ts":1610054248000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"\"difference between\" here is meant as \"distance between X and Y\" and not \"difference of X from Y\"","msgtype":"m.text"},"ts":1610054264000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: thank you! I was overcomplexing my thoughts and your example makes it very clear","msgtype":"m.text"},"ts":1610054383000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"rkirsling: yeah that's true, but i think colloquially those aren't different, altho academically i realize they are","msgtype":"m.text"},"ts":1610054441000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we could say \"unsigned difference\"? ðŸ¤· I don't have a better suggestion (since I think swapping the conjuncts would make the sentence pretty hard to read)","msgtype":"m.text"},"ts":1610054624000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Yeah, I think the current order should be kept for readability, just make it clearer that it's the unsigned difference to avoid any possible confusion.","msgtype":"m.text"},"ts":1610054923000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The text doesn't read that it would be near-1 in either reading, but it's technically unclear whether it's pos or neg.","msgtype":"m.text"},"ts":1610054947000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1610056848000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would \"the magnitude of the difference\" satisfy?","msgtype":"m.text"},"ts":1610057400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't object, anyway","msgtype":"m.text"},"ts":1610057830000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"the real-line distance\" might also work? ðŸ¤·","msgtype":"m.text"},"ts":1610057848000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: it would for me","msgtype":"m.text"},"ts":1610059374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"absolute value of\" or \"magnitude of\" would be clear to me. \"real-line distance\" isn't a term i've ever encountered before.","msgtype":"m.text"},"ts":1610059398000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's just: distance is measured between points, those points sit on the number line, we have to specify that it's the reals that we're discussing","msgtype":"m.text"},"ts":1610062463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but the 1D distance formula is just |x-y| so","msgtype":"m.text"},"ts":1610062478000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"unsigned difference, absolute difference, magnitude of the difference are all fine","msgtype":"m.text"},"ts":1610062499000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]