[
{"content":{"body":"hey all, I'm wondering about the future of https://github.com/tc39/proposal-bind-operator","msgtype":"m.text"},"ts":1580820775000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"last update was 2 years ago, and it was already pitched in 2015","msgtype":"m.text"},"ts":1580820801000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"I'd still love to see it happen","msgtype":"m.text"},"ts":1580820820000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"but I don't see why it isn't happening","msgtype":"m.text"},"ts":1580820831000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"quit","msgtype":"m.text"},"ts":1580828020000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"Hi all","msgtype":"m.text"},"ts":1580843758000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"Just a question about why add a `!` before `[...Array(10)].map(() => Array(1e7))` makes a memory leak, but not without it, please?","msgtype":"m.text"},"ts":1580843876000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"(tested on Firefox & Chrome, same behavior)","msgtype":"m.text"},"ts":1580843928000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"There isn't anything about that code that is leaky in either form. Somehow you are holding a reference to the massive array. When you add the !, you're just holding a reference to a single boolean.","msgtype":"m.text"},"ts":1580843998000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"hmmm, ok, but why these browsers doesn't clear that array ?","msgtype":"m.text"},"ts":1580844121000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"they make it, but after 15-30 seconds","msgtype":"m.text"},"ts":1580844150000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"Would need to see the code around it. But just storing it in a variable in global scope will likely mean the browser won't collect it.","msgtype":"m.text"},"ts":1580844160000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"there is no code around that, only that, running in console","msgtype":"m.text"},"ts":1580844215000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"the memory consumption increases to 2-4Gb","msgtype":"m.text"},"ts":1580844252000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"but after that, the GC seems to sleep for a long time","msgtype":"m.text"},"ts":1580844287000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"I wouldn't test memory leaks in the console, it holds references to previous calculations e.g. with the special $_ variable.","msgtype":"m.text"},"ts":1580844351000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"oh, ok, I see, thanks a lot, you saved my day ^^","msgtype":"m.text"},"ts":1580844553000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"I'm helping on a french community, where another users came with that \"bug\", I searched all the day, nothing to explain that, for the first time, in JS x)","msgtype":"m.text"},"ts":1580844658000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"* user","msgtype":"m.text"},"ts":1580844703000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"Lcfvs: also objects may not get cleaned up for a very long time","msgtype":"m.text"},"ts":1580845677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even if they have no references to them","msgtype":"m.text"},"ts":1580845683000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/they have/there are/","msgtype":"m.text"},"ts":1580845697000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek yeah, a common thing, that, but never heard about the console $_","msgtype":"m.text"},"ts":1580845791000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"Lcfvs: there may also be other internal references when using devtools","msgtype":"m.text"},"ts":1580845863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example in chrome every object result is assigned a unique id that it can be reached from","msgtype":"m.text"},"ts":1580845895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which needs to be manually cleared at a later point in time","msgtype":"m.text"},"ts":1580845901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":o","msgtype":"m.text"},"ts":1580845911000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"noted","msgtype":"m.text"},"ts":1580845966000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"thanks too","msgtype":"m.text"},"ts":1580845971000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"have a nice day, thx again ;)","msgtype":"m.text"},"ts":1580847307000,"senderName":"Lcfvs","senderId":"Lcfvs@irc"},
{"content":{"body":"shu: an example of the escape thing is: test/language/identifiers/val-return-via-escape-hex4.js","msgtype":"m.text"},"ts":1580857010000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: great, thanks","msgtype":"m.text"},"ts":1580857038000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"here's one that tests for the opposite: test/language/expressions/object/ident-name-method-def-super-escaped.js","msgtype":"m.text"},"ts":1580857056000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yeah those are fun to get right","msgtype":"m.text"},"ts":1580857154000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"everyone had bugs with those as of like a year or two ago","msgtype":"m.text"},"ts":1580857161000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think the spec says the first test is wrong","msgtype":"m.text"},"ts":1580857185000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Since an escaped string cannot be a keyword per: https://tc39.es/ecma262/#sec-grammar-notation","msgtype":"m.text"},"ts":1580857217000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"right, that's what the test is asserting","msgtype":"m.text"},"ts":1580857228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it has the 'negative' metadata","msgtype":"m.text"},"ts":1580857239000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1580857251000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"It should be a valid identifier","msgtype":"m.text"},"ts":1580857259000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh, sorry","msgtype":"m.text"},"ts":1580857270000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no, there's an error for that specifically","msgtype":"m.text"},"ts":1580857274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me find it","msgtype":"m.text"},"ts":1580857276000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin range, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a \\ UnicodeEscapeSequence\"","msgtype":"m.text"},"ts":1580857280000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"last error under https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors","msgtype":"m.text"},"ts":1580857326000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It is a Syntax Error if StringValue of IdentifierName is the same String value as the StringValue of any ReservedWord except for yield or await.","msgtype":"m.text"},"ts":1580857334000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, so it's supposed to be lexed as an identifier and then checked against the keyword list","msgtype":"m.text"},"ts":1580857454000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1580857476000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but... why?","msgtype":"m.text"},"ts":1580857483000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1580857484000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"evergreen question","msgtype":"m.text"},"ts":1580857510000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"everyone just has an \"escaped keyword\" token I think","msgtype":"m.text"},"ts":1580857564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least our parser does","msgtype":"m.text"},"ts":1580857570000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"v8's too if I remember right","msgtype":"m.text"},"ts":1580857573000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/shapesecurity/shift-parser-js/blob/6776a563274992579c01dbb53789b1f032c7deed/src/tokenizer.js#L132","msgtype":"m.text"},"ts":1580857577000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/v8/v8/blob/4b9b23521e6fd42373ebbcb20ebe03bf445494f9/src/parsing/parser.cc#L122-L125","msgtype":"m.text"},"ts":1580857586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well keith's question is why do we care to error","msgtype":"m.text"},"ts":1580857593000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry, that wasn't in response to \"why\"","msgtype":"m.text"},"ts":1580857601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1580857604000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"just elaborating on the \"lexed as an identifier\" thing","msgtype":"m.text"},"ts":1580857618000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]