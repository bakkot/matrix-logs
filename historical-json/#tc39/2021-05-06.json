[
{"content":{"body":"s/interal properties/internal slots","msgtype":"m.text"},"ts":1620266470000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"not sure why the spec calls it Error Constructor and not Error Class.. guess the spec still sees classes as syntactic sugar so not sure what the proper terminology would in a proposal for this https://tc39.es/ecma262/#sec-error-constructor","msgtype":"m.text"},"ts":1620267788000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"Bakkot:  (or anyone) https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads defines an additional form for ForInOfStatement. Performing ForInOfLoopEvaluation on it ends with a call to ForIn/OfBodyEvaluation, with |BindingIdentifier| as first arg, passed to _lhs_ param.  I think this will be evaluated at 6.g.i.1 but there's no definition of Evaluation for |BindingIdentifier|. Did I miss something?","msgtype":"m.text"},"ts":1620268752000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, no, that's probably just an oversight","msgtype":"m.text"},"ts":1620268888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it should have the same semantics as https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-runtime-semantics-evaluation basically","msgtype":"m.text"},"ts":1620268969000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1620269004000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I introduced that bug in my very first ecma262 pr","msgtype":"m.text"},"ts":1620269051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"( https://github.com/tc39/ecma262/pull/614 )","msgtype":"m.text"},"ts":1620269057000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"DerekNonGeneric: the Error constructor's prototype chain almost certainly can't change at this point, ever, or it'd break the web","msgtype":"m.text"},"ts":1620276646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: and it's not about internal slots, it's about all the random properties that implementations are allowed to (and do) stick onto error instances","msgtype":"m.text"},"ts":1620276668000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, is this this freedom for impls to do w/e they please unique to errors or ..? would i need to have my spec state this somewhere aswell or ..?","msgtype":"m.text"},"ts":1620332515000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: the spec already explicitly states that impls can add any properties to anything they want","msgtype":"m.text"},"ts":1620332803000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: meaning, all those nonstandard error properties","msgtype":"m.text"},"ts":1620332812000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: it's not something we currently can forbid, anywhere.","msgtype":"m.text"},"ts":1620332825000,"senderName":"ljharb","senderId":"ljharb@irc"}
]