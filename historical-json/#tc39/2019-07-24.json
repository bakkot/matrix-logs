[
{"content":{"body":"man, implementing this syntax error is gonna be kinda grody though","msgtype":"m.text"},"ts":1563929633000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"for `??`?","msgtype":"m.text"},"ts":1563930380000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah. kind of an assumption that all non-assigning binary ops are gonna be alike","msgtype":"m.text"},"ts":1563930635000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so one way would be to say that ?? \"isn't an binary op\" in that sense","msgtype":"m.text"},"ts":1563930698000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but yeah, may require some extra time to think through ðŸ¤”","msgtype":"m.text"},"ts":1563930733000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh fun; my parser does a recursive descent thing where each op gets its own function, so it would be trivial","msgtype":"m.text"},"ts":1563930761000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1563930918000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've got one of those too (though it's for a toy language)","msgtype":"m.text"},"ts":1563930929000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've got one of those too","msgtype":"m.text"},"ts":1563933037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wow this queerjs think just happened","msgtype":"m.text"},"ts":1563933748000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I didn't see anything about it until after it happened :(","msgtype":"m.text"},"ts":1563933764000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ohoho I figured it out","msgtype":"m.text"},"ts":1563935020000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the high-level lesson is \"if your parser (sub-algorithm) is linear, you should probably reconceptualize your problem in a linear fashion too\"","msgtype":"m.text"},"ts":1563935142000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(which sounds stupidly obvious if I do phrase it that way but the trick only works because ?? has *minimum* bin op precedence)","msgtype":"m.text"},"ts":1563935187000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does nullish coalescing have test262 tests","msgtype":"m.text"},"ts":1563939121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: not yet","msgtype":"m.text"},"ts":1563943453000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"writing up a bunch right now which we could copy over","msgtype":"m.text"},"ts":1563943487000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: https://bugs.webkit.org/show_bug.cgi?id=200072","msgtype":"m.text"},"ts":1563946215000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: nice","msgtype":"m.text"},"ts":1563977469000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"patch looks pretty similar to this https://github.com/devsnek/slither/commit/c3799d3133fe00020b3bf6260a7b61eb84727c63","msgtype":"m.text"},"ts":1563977491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: indeed! very nice","msgtype":"m.text"},"ts":1563981991000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Test 123","msgtype":"m.text"},"ts":1564005200000,"senderName":"TheLarkInn","senderId":"TheLarkInn@irc"}
]