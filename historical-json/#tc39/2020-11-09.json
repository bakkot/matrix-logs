[
{"content":{"body":"is there a proposal for Array.prototype.findLast / Array.prototype.findLastIndex? I could swear I remember one but there seem to be no traces of it","msgtype":"m.text"},"ts":1604882451000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe I dreamt it","msgtype":"m.text"},"ts":1604882453000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i've never heard of it even being discussed","msgtype":"m.text"},"ts":1604882616000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"guess I must have dreamt it","msgtype":"m.text"},"ts":1604882665000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I asked about it a while ago","msgtype":"m.text"},"ts":1604890398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't get the extensions proposal","msgtype":"m.text"},"ts":1604944162000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I would love to have the bind operator","msgtype":"m.text"},"ts":1604944168000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i think it is lexically scoped properties?","msgtype":"m.text"},"ts":1604950285000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"from what i can tell its bind operator but you have to use a weird declaration to take advantage of it","msgtype":"m.text"},"ts":1604950357000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yea, there is the ability to declare them though lexically which is different","msgtype":"m.text"},"ts":1604950450000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i am interested to see the motivation for that because it seems like you could just drop the declaration syntax","msgtype":"m.text"},"ts":1604950604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think part of this is allowing a kind of lexical macros, where you don't pollute the prototype when referencing from other modules","msgtype":"m.text"},"ts":1604950739000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah but i feel like the bind operator along already does that?","msgtype":"m.text"},"ts":1604950822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well functions do it already too since you can just wrap in foo(x), so its a big question I would agree","msgtype":"m.text"},"ts":1604950871000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the bind operator is great; being able to do `const map = ::Array.prototype.map.call` would be amazing (haven't read the updated proposal yet tho)","msgtype":"m.text"},"ts":1604953739000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am a bit confused about the `*::` syntax tho","msgtype":"m.text"},"ts":1604953783000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: why remove the `::a.b` form? that's the only part of the proposal that pipeline can't solve (and when we discussed pipeline in committee, that was the only part of the bind operator anyone wanted to keep, in a world where we have pipeline)","msgtype":"m.text"},"ts":1604953848000,"senderName":"ljharb","senderId":"ljharb@irc"}
]