[
{"content":{"body":"I’ve been running into a place where popcount would be useful in some data-compression code (see https://news.ycombinator.com/item?id=20914479). I’m wondering: has anyone talked about proposing a `Math.popCount` function or something similar?","msgtype":"m.text"},"ts":1621239801000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"(Yes, WebAssembly already has `i32.popcnt`, and yes it can be manually done with bit-twiddling, but hardware-accelerated popcount in JS without having to bridge to wasm would still be pretty useful for several diverse applications, from succinct data structures to Hamming distance.)","msgtype":"m.text"},"ts":1621239836000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi, _highly_ doubtful... you may want to search through https://es.discourse.group/","msgtype":"m.text"},"ts":1621258899000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"jschoi, there was also a mailing list at one point, but just got cancelled","msgtype":"m.text"},"ts":1621258959000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"jschoi, the archives are sparse too","msgtype":"m.text"},"ts":1621258984000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"https://github.com/search?q=org%3Atc39+popcount finds a few","msgtype":"m.text"},"ts":1621259074000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"interesting, thanks for that","msgtype":"m.text"},"ts":1621259267000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"In Annex B's `AtomEscape :: DecimalEscape (but only if the CapturingGroupNumber of DecimalEscape is ≤ NcapturingParens)`, the constraint requires that we know NcapturingParens, the total number of capturing left-parens in the Pattern, which we won't know until we've parsed the Pattern. So correctly parsing a part of the Pattern requires you to first parse the whole Pattern? Catch-22.","msgtype":"m.text"},"ts":1621260457000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"What do implementations do in practice?","msgtype":"m.text"},"ts":1621260468000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It looks like engine262 doesn't use the Annex B regexp syntax.","msgtype":"m.text"},"ts":1621260565000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: the NcapturingParens thing doesn't actually affect which patterns match: in non-U annex B regexes, `\\4` or `\\90` or whatever is always legal. it's just that they mean different things depending on NcapturingParens: if the NcapturingParens is sufficiently small the first characters (and possibly the next one or two) will fall through to LegacyOctalEscape or IdentityEscape","msgtype":"m.text"},"ts":1621266722000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is a terrible way of specifying it, but it is unambiguous","msgtype":"m.text"},"ts":1621266761000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: ambiguity wasn't what I was complaining about, rather the forward reference/circularity. I agree that the constraint doesn't affect which texts match Pattern, just the resulting parse tree. So I'm wondering if implementations initially parse it as a DecimalEscape (ignoring the constraint) and then, once they know what NcapturingParens is, go back to each DecimalEscape and figure out what it really should be.","msgtype":"m.text"},"ts":1621273072000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"looks like v8 scans forward when it encounters one which is ambiguous: https://github.com/v8/v8/blob/03fcd892219928663f717fbf55c511234b4b3640/src/regexp/regexp-parser.cc#L734","msgtype":"m.text"},"ts":1621276575000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can't speak to other engines offhand","msgtype":"m.text"},"ts":1621276582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool, thx","msgtype":"m.text"},"ts":1621276901000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"apparently SpiderMonkey uses V8's regexp engine","msgtype":"m.text"},"ts":1621278232000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes, though note the versions might not be in sync and SM might be a few versions behind","msgtype":"m.text"},"ts":1621289945000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jmdyck: Thanks for the pointer. Looks like there was discussion from littledan about adding them to a future BigInt v2 proposal (https://github.com/tc39/proposal-bigint/issues/20)…Could be worth making a future proposal for a non-BigInt popCount built-in, too.","msgtype":"m.text"},"ts":1621291482000,"senderName":"jschoi","senderId":"jschoi@irc"}
]