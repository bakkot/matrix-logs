[
{"content":{"body":"[Array#item(undefine), Array#item(null), Array#item(Nan)] should result in?","msgtype":"m.text"},"ts":1601247768000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: since they're all ToInteger'd, they'll all be 0","msgtype":"m.text"},"ts":1601248231000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, the same as `item(0)`","msgtype":"m.text"},"ts":1601248238000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: will that not result in confusing behavior? if indx is a result of an expression? would it be better if it returned `undefined` like as it does for a non-existing indx?","msgtype":"m.text"},"ts":1601248380000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Similar to If k < 0 or k â‰¥ len, then return undefined","msgtype":"m.text"},"ts":1601248506000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"I noticed in the spec, as you said there is a TOInteger: which would return +0 for NaN, +0, or -0","msgtype":"m.text"},"ts":1601248550000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"-Infinity or Infinity would return an undefined, right?","msgtype":"m.text"},"ts":1601248781000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi right","msgtype":"m.text"},"ts":1601248832000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":".item using ToInteger matches other existing methods like charAt, etc, so I am not worried abuot it benig confusing","msgtype":"m.text"},"ts":1601248874000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think it'll come up much and it's better to be consistent with precedent in edge cases if they're rare, so there's fewer things to learn","msgtype":"m.text"},"ts":1601248898000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also see `document.querySelectorAll('p').item`'s existing behavior","msgtype":"m.text"},"ts":1601248902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1601248911000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interestingly that throws with zero args though","msgtype":"m.text"},"ts":1601248970000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"[][undefined|null|-indx|Infinity] would all result in `undefined` would it not make sense for `item` to do the same?","msgtype":"m.text"},"ts":1601248976000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi those do not necessarily result in `undefined`","msgtype":"m.text"},"ts":1601249026000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling: but, if `item` makes it to stage-4, `document.querySelectorAll('p').item` needs to updated?","msgtype":"m.text"},"ts":1601249042000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"also the behavior for `-indx` is very much intentional","msgtype":"m.text"},"ts":1601249059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or you mean to say, the current behavior is as of the `item` proposal?","msgtype":"m.text"},"ts":1601249060000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: no I'm saying that's the reason for this proposal existing","msgtype":"m.text"},"ts":1601249074000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"negative indexation is simply the benefit that users will see","msgtype":"m.text"},"ts":1601249087000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/proposal-item-method#dom-justifications","msgtype":"m.text"},"ts":1601249099000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the proposal would have been withdrawn if they couldn't use the name `item` because the layering change is the real goal","msgtype":"m.text"},"ts":1601249152000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"interesting, I haven't seen many using `item` on QSA yet.","msgtype":"m.text"},"ts":1601249238000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Bakkot: agree, x = []; x.undefined=1; x['undefined']; //1","msgtype":"m.text"},"ts":1601249366000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"x[undefined] is the more relevant one, but yes","msgtype":"m.text"},"ts":1601249443000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, `item(+/-Infinity)` would be `undefined`","msgtype":"m.text"},"ts":1601249458000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"I take it we're okay with `[].item()` having an implicit `undefined` though?","msgtype":"m.text"},"ts":1601250977000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I mean I sure am, it's just a change from, e.g., NodeList.p.item)","msgtype":"m.text"},"ts":1601250995000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]