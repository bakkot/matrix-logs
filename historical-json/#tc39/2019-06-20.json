[
{"content":{"body":"cj's talk = https://www.youtube.com/watch?v=MO8hZlgK5zc ?","msgtype":"m.text"},"ts":1560990781000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: yep!","msgtype":"m.text"},"ts":1560991151000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1560991158000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"someone who works on test262.report, do you know on average how many tests are marked skip/flake by engines?","msgtype":"m.text"},"ts":1560995168000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek, I still don't understand.  Prehaps \"intent\" is the wrong word/ I'm trying to figure out what it enables engines to do?  AFAICT, all the predictability benefits fall out of the similar language in HostResolveImportedModule.  I suppose without it  a transient network or file-system failure during the first call to HostImportModuleDynamically(referencingScriptOrModule,specifier) or a cache expiration between calls might l","msgtype":"m.text"},"ts":1561038845000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"ErrorIsNullError: it's about preventing the thing you can do in commonjs where you modify the module cache","msgtype":"m.text"},"ts":1561040820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek, As in require.cache in Node.js?","msgtype":"m.text"},"ts":1561041975000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1561041992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Thanks for explaining.","msgtype":"m.text"},"ts":1561041999000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"I guess webpack has that too","msgtype":"m.text"},"ts":1561041999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah.  IIRC, webpack creates a stub require function, and requiring a module looks up into a cache and evals the rewritten module body text on a cache miss.","msgtype":"m.text"},"ts":1561042073000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"I've been reading the related parts of html.spec.whatwg and I think I've got a better handle on how FinishDynamicImport expects the module graph to be fleshed out (per the Assert of the evaluated bit).","msgtype":"m.text"},"ts":1561042233000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"I was missing that bit of context though, so thanks for that.","msgtype":"m.text"},"ts":1561042256000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"I'll prep an editorial PR that adds a note relating to that, and invite Daniel+Domenic to review.  May lead to useful discussion, and/or help someone else who has the same confusion.","msgtype":"m.text"},"ts":1561042407000,"senderName":"ErrorIsNullError","senderId":"ErrorIsNullError@irc"},
{"content":{"body":"cloudshu: Another possibly controversial proposal now that we have WeakRef collection semantics: WeakSet/Map iteration","msgtype":"m.text"},"ts":1561055197000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"thoughts?","msgtype":"m.text"},"ts":1561055201000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1561055220000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why :(","msgtype":"m.text"},"ts":1561055230000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: you want to iterate over existing WeakMaps?","msgtype":"m.text"},"ts":1561055250000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"WeakRefs are a thing which very few people should need to know about or use, which limits the extent to which GC is exposed to random people writing JS; this is not the case for WeakMaps","msgtype":"m.text"},"ts":1561055254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"seems like a useful feature and is an example on the WeakRef doc","msgtype":"m.text"},"ts":1561055256000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"which are explicitly ephemeron things that aren't meant to be iterable?","msgtype":"m.text"},"ts":1561055262000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"yeah i'm with Bakkot on this one","msgtype":"m.text"},"ts":1561055281000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"Yeah basically","msgtype":"m.text"},"ts":1561055282000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"are weak collection iterators async iterators","msgtype":"m.text"},"ts":1561055339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"word, I can 100% guarantee you that there's going to be a library that makes an iterable WeakMap and it's going to be popular","msgtype":"m.text"},"ts":1561055344000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"i'd rather it was a library","msgtype":"m.text"},"ts":1561055361000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's not iterators right now","msgtype":"m.text"},"ts":1561055364000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"no i mean","msgtype":"m.text"},"ts":1561055371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the conceptual weak collection iterators","msgtype":"m.text"},"ts":1561055379000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why would they need to be?","msgtype":"m.text"},"ts":1561055391000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"couldn't you observe collection by doing like `while (true) { [...thing.values()] }`","msgtype":"m.text"},"ts":1561055409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no it would have the same semantics as WeakRef","msgtype":"m.text"},"ts":1561055421000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"isn't that why finalization groups call back in a next tick","msgtype":"m.text"},"ts":1561055425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"once you have iterated the value it's keptAlive until the next tick","msgtype":"m.text"},"ts":1561055440000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1561055445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1561055447000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"still with bakkot though","msgtype":"m.text"},"ts":1561055463000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the thing i really want is a WeakValueMap","msgtype":"m.text"},"ts":1561055479000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't get the advantage of it being a library","msgtype":"m.text"},"ts":1561055485000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: oh for sure, there will be an iterable weakmap on top of weakrefs","msgtype":"m.text"},"ts":1561055493000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"you can do weakvaluemaps on top of weakrefs also","msgtype":"m.text"},"ts":1561055500000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"yeah but it would be nice in std","msgtype":"m.text"},"ts":1561055514000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that's just weakMap where the values are WeakRefs","msgtype":"m.text"},"ts":1561055516000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1561055523000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_mi_: i think the advantage is that the existing invariant for WeakMaps stays as is, and that the \"there be heavy impl-dependent timing here\" is only limited to grepping for weakrefs","msgtype":"m.text"},"ts":1561055597000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"cloudshu: I think that would still be true","msgtype":"m.text"},"ts":1561055618000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: what's the motivation for adding iteration beyond \"it'll be possible anyway with a container on top of weakrefs\"?","msgtype":"m.text"},"ts":1561055628000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"I just think it's going to be in 100% of wild uses of WeakMap","msgtype":"m.text"},"ts":1561055647000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"so we might as well add it","msgtype":"m.text"},"ts":1561055653000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"so engines can optimize","msgtype":"m.text"},"ts":1561055663000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"i think people also take advantage of weak collections being uninspectable","msgtype":"m.text"},"ts":1561055667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whatever the term is","msgtype":"m.text"},"ts":1561055674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wat","msgtype":"m.text"},"ts":1561055682000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"WeakMaps are already widely used without iteration","msgtype":"m.text"},"ts":1561055683000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there is one case i can think of where i would use this","msgtype":"m.text"},"ts":1561055704000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_mi_: wait, what","msgtype":"m.text"},"ts":1561055713000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"but that's one case in like a billion times i've used weakmap","msgtype":"m.text"},"ts":1561055713000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what are you envisioning people doing? creating a shadow map of weakrefs holding on to weakmap keys, just so they can iterate?","msgtype":"m.text"},"ts":1561055743000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"afaik all the web inspectors have added this themselves","msgtype":"m.text"},"ts":1561055747000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"they've also all exposed promise resolution status, beause it's nice when debugging, but that doesn't mean it makes sense to add that to the language","msgtype":"m.text"},"ts":1561055795000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"My point is now that it's possible to add it's going to be done, ubiquitously.","msgtype":"m.text"},"ts":1561055826000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"wouldn't this also break the implementation style where weakmaps are just a wrapper that assign hidden props on the key objects","msgtype":"m.text"},"ts":1561055836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, presumably not until you actually do the iteration","msgtype":"m.text"},"ts":1561055852000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"how would it?","msgtype":"m.text"},"ts":1561055859000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"the weakmap isn't exposed","msgtype":"m.text"},"ts":1561055866000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: put another way, what are we gaining by standardizing it becaues it's possible?","msgtype":"m.text"},"ts":1561055937000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i can't really say i agree or disagree with ubiquity","msgtype":"m.text"},"ts":1561055946000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"I expect it will be done less, much less, if it's in a library rather than in the language.","msgtype":"m.text"},"ts":1561055962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyone have any theories about why lint would fail on ci but work locally","msgtype":"m.text"},"ts":1561055970000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean there's no rush on this since we can easily find out later","msgtype":"m.text"},"ts":1561055996000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"(and also being in a library will mean it's opt-in; adding a library will not grant other people the ability to iterate my non-library weakmaps)","msgtype":"m.text"},"ts":1561055999000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"making an iterable weakmap is fine, but allowing weakmaps to be iterable would be terrible","msgtype":"m.text"},"ts":1561056033000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm still confused how the library will do tihs for existing weakmaps besides keeping a shadow map","msgtype":"m.text"},"ts":1561056056000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"cloudshu: it's in https://github.com/tc39/proposal-weakrefs","msgtype":"m.text"},"ts":1561056140000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"as an example","msgtype":"m.text"},"ts":1561056145000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"and yeah it's a \"shadow\" map","msgtype":"m.text"},"ts":1561056192000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"but that's much more expensive than having the VM iterate it for you since we already can","msgtype":"m.text"},"ts":1561056220000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"oh i never scrolled that far down","msgtype":"m.text"},"ts":1561056241000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"As you now have 3 maps where you really only need one","msgtype":"m.text"},"ts":1561056244000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"LOL","msgtype":"m.text"},"ts":1561056250000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"can't you make the finalization group itself the map","msgtype":"m.text"},"ts":1561056256000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: There's no find","msgtype":"m.text"},"ts":1561056268000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"aw","msgtype":"m.text"},"ts":1561056271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in finalization group","msgtype":"m.text"},"ts":1561056273000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"*I think*","msgtype":"m.text"},"ts":1561056287000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: yeah i mean i could be convinced with usage numbers but it just feels unlikely","msgtype":"m.text"},"ts":1561056320000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i'm concerned that this api could expose data people thought was safely concealed","msgtype":"m.text"},"ts":1561056377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1561056387000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"if you assume people can't read a weakmap","msgtype":"m.text"},"ts":1561056394000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because they can't","msgtype":"m.text"},"ts":1561056396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then suddenly someone runs your code on a new version of node","msgtype":"m.text"},"ts":1561056407000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, it's possible it'd have to be a subclass of WeakMap","msgtype":"m.text"},"ts":1561056414000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"I'm sure Mark would feel that way","msgtype":"m.text"},"ts":1561056423000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"it'd definitely have to be","msgtype":"m.text"},"ts":1561056431000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"probably the first time i've ever agreed with mark","msgtype":"m.text"},"ts":1561056435000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1561056441000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"i wouldn't mind a subclass","msgtype":"m.text"},"ts":1561056461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(it's a similar reason Map and Set should have used SameValue and not SameValueZero :-p)","msgtype":"m.text"},"ts":1561056471000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Proxy.revokable, WeakMap.iterable","msgtype":"m.text"},"ts":1561056482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is that the plan...","msgtype":"m.text"},"ts":1561056497000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"to have the subclass be a property of the main class","msgtype":"m.text"},"ts":1561056509000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"wow is it really revocable","msgtype":"m.text"},"ts":1561056519000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so weird","msgtype":"m.text"},"ts":1561056519000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"well revocable isn't a subclass constructor","msgtype":"m.text"},"ts":1561056536000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"it's just like a function that returns a revocable proxy","msgtype":"m.text"},"ts":1561056543000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"nah i'd expect it to be like `IterableWeakMap` or smth","msgtype":"m.text"},"ts":1561056560000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"goes to a meeting","msgtype":"m.emote"},"ts":1561056591000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: wait hold up can you do proposals my controversial ideas because i don't want the headache","msgtype":"m.text"},"ts":1561056623000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"1) mutable arguments.callStack that lets you programmatically unwind and do stack surgery","msgtype":"m.text"},"ts":1561056672000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"cloudshu: Is there a missing of in there because I don't understand you otherwise?","msgtype":"m.text"},"ts":1561056672000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1561056677000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"🤮","msgtype":"m.text"},"ts":1561056694000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"how else can we write real debuggers??","msgtype":"m.text"},"ts":1561056705000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"one day i will make that proposal","msgtype":"m.text"},"ts":1561056730000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"use the inspector?","msgtype":"m.text"},"ts":1561056734000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"mutable global.stack","msgtype":"m.text"},"ts":1561056753000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"first you have to get stack in the first place","msgtype":"m.text"},"ts":1561056799000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"2) Object.prototype.{castTo,castFrom}BigInt","msgtype":"m.text"},"ts":1561056804000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"O.O","msgtype":"m.text"},"ts":1561056853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one day people will come around to my ideas","msgtype":"m.text"},"ts":1561056874000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i fear these ideas","msgtype":"m.text"},"ts":1561056902000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cloudshu: lol cast an object from a bigint?","msgtype":"m.text"},"ts":1561056936000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, it will replace the guts of the this value","msgtype":"m.text"},"ts":1561056951000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"it'll find the object whose pointer is the bigint value argument, and then replace guts","msgtype":"m.text"},"ts":1561056972000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"what's a pointer","msgtype":"m.text"},"ts":1561057006000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's kind of a philosophical question","msgtype":"m.text"},"ts":1561057032000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":":-p","msgtype":"m.text"},"ts":1561057115000,"senderName":"ljharb","senderId":"ljharb@irc"}
]