[
{"content":{"body":"`var √ = Math.sqrt;` being a syntax error makes JS literally unusable.","msgtype":"m.text"},"ts":1552069497000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"at-mathias time to extend the identifier syntax","msgtype":"m.text"},"ts":1552069721000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: we","msgtype":"m.text"},"ts":1552069974000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TabAtkins: we've already tried to make Math.TAU a thing too :-/","msgtype":"m.text"},"ts":1552069989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what can i do to make Math.TAU a reality","msgtype":"m.text"},"ts":1552070063000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seemed like some delegates were too afraid of being first-movers on \"actually making math awesome\"","msgtype":"m.text"},"ts":1552070124000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so getting it shipped as a constant in other languages would help :-p","msgtype":"m.text"},"ts":1552070140000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1552070222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"srsly tho, https://tauday.com/tau-manifesto","msgtype":"m.text"},"ts":1552070242000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"greetings TC39 members :) I have a proposal that I am looking to get shepherded in. I am fairly new to the process but have read through the proposal documentation. You can find my suggestion here: https://www.npmjs.com/package/dry-forloop","msgtype":"m.text"},"ts":1552070356000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"Thank you to anyone who can assist me with the process. This is super exciting!","msgtype":"m.text"},"ts":1552070394000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"michaelboegner: can you provide some more information on what this is trying to solve, etc","msgtype":"m.text"},"ts":1552070491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, so I see a couple use cases: 1. It provides a simple, easy to understand reduction of the traditional forLoop without anything other than what you would expect to find in said loop, i.e. no extra bells and whistles, it's still a forLoop, just as dry as possible","msgtype":"m.text"},"ts":1552070647000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"well the existing forEach is \"just a for loop\"","msgtype":"m.text"},"ts":1552070698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm confused about what adding all this extra stuff is doing","msgtype":"m.text"},"ts":1552070710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"2. You could argue at this point, hey, but I've got forEach. That basically does the same thing, right? I would say, no, in that you cannot manipulate the start, operator, length and iterator traditionally found in a forLoop using a forEach. This means that you can do things like nesting and manipulation of iteration that forEach doesn't provide, I don't believe at least.","msgtype":"m.text"},"ts":1552070728000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"```array.forDry((e) => {     array.forDry((f) => {         solution.push(e + f)     }, 1) });  console.log(solution);  Expected return:  [ 3, 4, 5, 6, 4, 5, 6, 7, 5, 6, 7, 8, 6, 7, 8, 9, 7, 8, 9, 10 ]```","msgtype":"m.text"},"ts":1552070759000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"right but what's the use case for manipulating all those things","msgtype":"m.text"},"ts":1552070779000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The alternative is nesting two forLoops, which means writing a much wetter code","msgtype":"m.text"},"ts":1552070826000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"alternatively","msgtype":"m.text"},"ts":1552070850000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"i'm not sure what that code does","msgtype":"m.text"},"ts":1552070858000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does it skip the first element?","msgtype":"m.text"},"ts":1552070880000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's equivalent to a nested forLoop with the iterating variable starting at 1","msgtype":"m.text"},"ts":1552070916000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"like `array.forEach((e) => array.slice(1).forEach((f) => { solutions.push(e + f); }))`","msgtype":"m.text"},"ts":1552070936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry, i thought i indluced the array","msgtype":"m.text"},"ts":1552070945000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"so those are equiv","msgtype":"m.text"},"ts":1552070961000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the one i posted seems much clearer","msgtype":"m.text"},"ts":1552070968000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelboegner: your proposal should maybe show a couple examples of what the equivalent code would be with current JS","msgtype":"m.text"},"ts":1552070982000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well you should write up a proposal","msgtype":"m.text"},"ts":1552070997000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so yeah, so the instructions just say to come here and talk to you","msgtype":"m.text"},"ts":1552071010000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"so that's what i'm doing","msgtype":"m.text"},"ts":1552071016000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"What should a proposal look like?","msgtype":"m.text"},"ts":1552071024000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"nevermind, i found one in github","msgtype":"m.text"},"ts":1552071068000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"at a minimum: what is the problem, why does the problem matter, some possible solutions to the problem","msgtype":"m.text"},"ts":1552071070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I appreciate everyone's time","msgtype":"m.text"},"ts":1552071079000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"yeah we're also working on making it easier for new people to get involved","msgtype":"m.text"},"ts":1552071091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cool, thanks again for taking a second to talk it out with me","msgtype":"m.text"},"ts":1552071167000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"michaelboegner: it'd help to document prior art - showing where this pattern is so common in JS or other languages that it warrants being in the language instead of in userland","msgtype":"m.text"},"ts":1552071210000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"michaelboegner: also to make a case for why this is cleaner than, say, using forEach and checking the index, or using flatMap and returning `[]`","msgtype":"m.text"},"ts":1552071249000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"awesome. Will do for sure","msgtype":"m.text"},"ts":1552071284000,"senderName":"michaelboegner","senderId":"michaelboegner@irc"},
{"content":{"body":"(also i hope your npm package doesn’t actually modify Array.prototype; that can be very dangerous and has interfered with other proposals in the past)","msgtype":"m.text"},"ts":1552071390000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Personally, these modifications to start/end belong in functions that return modified arrays themselves (or rather, iterators over the array). Traditional for-loops are terrible UX-wise in the first place, but they're so ubiquitous people learn how they work anyway; scattering the same functionality over a handful of arguments makes the readability much worse.","msgtype":"m.text"},"ts":1552077160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So like `array.forEach(e=>drop(1, array).forEach(f=>solution.push(e+f)))`","msgtype":"m.text"},"ts":1552077201000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: +1","msgtype":"m.text"},"ts":1552079590000,"senderName":"devsnek","senderId":"devsnek@irc"}
]