[
{"content":{"body":"it's just like any other variable","msgtype":"m.text"},"ts":1581984011000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah its just a variable as far as i see it","msgtype":"m.text"},"ts":1581984019000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, but not constrained by lexical scope.","msgtype":"m.text"},"ts":1581984020000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"decorators though are definitely not first class","msgtype":"m.text"},"ts":1581984035000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"language in a language :(","msgtype":"m.text"},"ts":1581984041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doesn't seem any weirder than `<script>let x = 1</script><script>console.log(x)</script>` working","msgtype":"m.text"},"ts":1581984051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"top-level lexical scope is shared across files","msgtype":"m.text"},"ts":1581984059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"/shrug","msgtype":"m.text"},"ts":1581984063000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i mean sure, script tags are weird","msgtype":"m.text"},"ts":1581984063000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but yeah i see what you mean","msgtype":"m.text"},"ts":1581984076000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the ref proposal from ron seems to be aimed at letting you decorate functions without everything falling apart","msgtype":"m.text"},"ts":1581984123000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in which case you wouldn't need to do the evil dsl approach","msgtype":"m.text"},"ts":1581984140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its also kinda funny that people wanted to duplicate es slots with private fields, but es spec fields are a first class type that you can pass around","msgtype":"m.text"},"ts":1581984303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"literally private symbols","msgtype":"m.text"},"ts":1581984335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1581984336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Spec-internally, private names are a thing that can be passed around also. It's just that neither one is exposed to script","msgtype":"m.text"},"ts":1582036337000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(I don't have any problem with something or other that reifies private names, as the decorators proposal included for some time, but we had good reasons for choosing the \"WeakMap\" semantics.)","msgtype":"m.text"},"ts":1582036418000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ljharb: The lexical contour was a TC39 decision, not a weirdness imposed by the environment, since I guess we thought it was important to preserve that kind of availability","msgtype":"m.text"},"ts":1582036448000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: regardless of whether it was an imposition or not, the weirdness of script tags is why the lexical contour makes sense to me - but either way, live bindings are something Iâ€™m not a fan of","msgtype":"m.text"},"ts":1582038842000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(I guess I don't really understand why live bindings were a goal of ES6 modules either, but here we are)","msgtype":"m.text"},"ts":1582039082000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm slowly getting concerned we may need to make bindings first class if there are concerns about JS security so that you can wire modules together without going through JS and export ... from","msgtype":"m.text"},"ts":1582039132000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wire how?","msgtype":"m.text"},"ts":1582039429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or rather, why do you need to connect modules without going through the module system","msgtype":"m.text"},"ts":1582039498000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: you'd still go through the modules system, but not through JS itself","msgtype":"m.text"},"ts":1582040047000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this comes back to the idea that loading JS is dangerous that spawned module attributes","msgtype":"m.text"},"ts":1582040064000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if we expose the ability for non-JS to wire bindings, it seems we would want to do the same for JS itself even if you could not alter runtime generated modules","msgtype":"m.text"},"ts":1582040107000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"littledan: I don't understand why private symbols aren't \"weakmap semantics\"","msgtype":"m.text"},"ts":1582040383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in fact I'd say they're closer than what we have now","msgtype":"m.text"},"ts":1582040426000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we still use a lot of weak maps in node core because private fields are so limited","msgtype":"m.text"},"ts":1582040454000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we even use normal symbols in some cases because it just makes stuff easier, even if we lose out on the private guarantees","msgtype":"m.text"},"ts":1582040483000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: non-js already can, depending on how it creates the module record, no?","msgtype":"m.text"},"ts":1582040670000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: they could to some extent, but to my knowledge none of the other module record types do so","msgtype":"m.text"},"ts":1582040955000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean, export is how js sets up bindings - anything else can set them up however they want","msgtype":"m.text"},"ts":1582041294000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: The private symbol proposals that were brought to TC39 didn't have weakmap semantics; they differed when it came to whether they were considered properties, how they interacted with proxies and [], etc","msgtype":"m.text"},"ts":1582046149000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the private name objects that the decorators proposal contained did have these weakmap semantics, and skipped working with [], Proxy, etc","msgtype":"m.text"},"ts":1582046180000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the contradiction was ultimately about, if it's property-like in some way, then people could develop expectations about it being property-like in some other way, and it snowballs into something that slams into one of our constraints","msgtype":"m.text"},"ts":1582046212000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"a property that can't be found using key enumeration","msgtype":"m.text"},"ts":1582046235000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is literally a way to implement weak maps","msgtype":"m.text"},"ts":1582046246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example, you could feel that it's important that everything which uses [] goes through Proxy. But internal slots don't do that.","msgtype":"m.text"},"ts":1582046249000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I gave a presentation about this topic; let me find the slides","msgtype":"m.text"},"ts":1582046265000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we literally spent years talking about this in committee...","msgtype":"m.text"},"ts":1582046281000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://docs.google.com/presentation/d/1lPEfTLk_9jjjcjJcx0IAKoaq10mv1XrTZ-pgERG5YoM/edit#slide=id.p","msgtype":"m.text"},"ts":1582046316000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/compare/master...devsnek:feature/private-symbols","msgtype":"m.text"},"ts":1582046323000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can see the diff for proxies","msgtype":"m.text"},"ts":1582046335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this doesn't seem complex enough to not reach at least stage 1","msgtype":"m.text"},"ts":1582046362000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if private symbols existed i'd probably want a) a way when creating a proxy to \"tunnel them all\" or \"tunnel none\", with the latter being the default and current behavior; and b) if i have a list of private symbols when creating the proxy, be able to trap them (separately from Get)","msgtype":"m.text"},"ts":1582046456000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right that's in my diff","msgtype":"m.text"},"ts":1582046482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well you can't really say \"tunnel all / tunnel none\" because you can't define behaviour of symbols you can't touch","msgtype":"m.text"},"ts":1582046517000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you can pass symbols you'd like to trap","msgtype":"m.text"},"ts":1582046532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for the tunneling thing, I was suggesting Proxy.transparent. But then people had various concerns with that","msgtype":"m.text"},"ts":1582046715000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, it seems pretty clear to me that all that allowPrivate stuff differs from WeakMap semantics.","msgtype":"m.text"},"ts":1582046849000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: ^ that's what i mean","msgtype":"m.text"},"ts":1582046858000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ie, `new Proxy` would continue to \"tunnel none\"","msgtype":"m.text"},"ts":1582046860000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but we'd need a way to make a proxy that tunneled all private symbols, internal slots, and private fields","msgtype":"m.text"},"ts":1582046876000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what i meant is that you can't ask for one or the other","msgtype":"m.text"},"ts":1582046879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it just has to be the default","msgtype":"m.text"},"ts":1582046884000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then separately, a way to trap the things you can prove you have access to","msgtype":"m.text"},"ts":1582046901000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so... the slide deck I posted above explains why WeakMap semantics are preferable. And the Proxy.transparent sketch shows that ,if we wanted opt-in tunneling and reasoned that it was OK, then we could do it on top of the current private fields/methods proposal.","msgtype":"m.text"},"ts":1582046913000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: i'm not sure why","msgtype":"m.text"},"ts":1582046924000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't disagree that weakmap is a good model","msgtype":"m.text"},"ts":1582046925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, you're proposing something that differs from weakmap, so I'm confused","msgtype":"m.text"},"ts":1582046958000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm not proposing anything","msgtype":"m.text"},"ts":1582046970000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, you are linking to a PR which has a non-weakmap model","msgtype":"m.text"},"ts":1582046985000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, I'm just trying to explain how we arrived where we are","msgtype":"m.text"},"ts":1582046993000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"hm?","msgtype":"m.text"},"ts":1582046996000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh cuz it calls the handler by default","msgtype":"m.text"},"ts":1582047001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah it could also return undefined or whatever is relevant","msgtype":"m.text"},"ts":1582047021000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that diff is more just about showing how simple the semantics of the whole thing can be","msgtype":"m.text"},"ts":1582047045000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we already have a privacy construct at Stage 3; I think anything that's added from here should be in terms of \"explaining\" that proposal/exposing it in some way, rather than a parallel construct","msgtype":"m.text"},"ts":1582047067000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"could explain private fields with symbols if they didn't throw","msgtype":"m.text"},"ts":1582047090000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"another thing that doesn't align with weakmaps","msgtype":"m.text"},"ts":1582047104000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway i'm way too cynical about this","msgtype":"m.text"},"ts":1582047120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"these things weren't accidental; they're design tradeoffs","msgtype":"m.text"},"ts":1582047126000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i mean even in the spec we do RequireInternalSlot","msgtype":"m.text"},"ts":1582047158000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, and we could add something analogous to that for private fields and methods, if we want to","msgtype":"m.text"},"ts":1582047205000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we could probably explain them with private symbols if we just said that its the explicit .# syntax that does the throw","msgtype":"m.text"},"ts":1582047228000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the design space for all this stuff is only so big. We made a tradeoff of WeakMaps + throwing, to be analogous to internal slots, and the rest sort of just follows","msgtype":"m.text"},"ts":1582047234000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"then i could use [] and not have to have useless try catches everywhere","msgtype":"m.text"},"ts":1582047242000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, for many reasons, not just that one","msgtype":"m.text"},"ts":1582047246000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't see any reason why [] couldn't throw; it's been able to forever with getters","msgtype":"m.text"},"ts":1582047267000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"because throwing is terrible","msgtype":"m.text"},"ts":1582047275000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"random api contract from someone's requirement somehow leaked into the spec","msgtype":"m.text"},"ts":1582047292000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, that's sort of a higher-level thing... there are lots of recent features and proposals that throw in various places","msgtype":"m.text"},"ts":1582047317000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we spend a lot of time in committee debating which cases should throw, and making compromises","msgtype":"m.text"},"ts":1582047366000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ya i mean i was there","msgtype":"m.text"},"ts":1582047382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just never heard anything i found compelling for any of this","msgtype":"m.text"},"ts":1582047430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, how do you think we should resolve disagreements like this in the future?","msgtype":"m.text"},"ts":1582047456000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if we decide to keep adding things to the language or making changes, there will be more tradeoffs that some people won't find compelling","msgtype":"m.text"},"ts":1582047496000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i mean if i had been a delegate as is more normal, the resolution probably would've been me blocking stage 3","msgtype":"m.text"},"ts":1582047500000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so idk","msgtype":"m.text"},"ts":1582047508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, how do you think we should make tradeoffs as a group, when we have other people who would've had strong concerns on the other side?","msgtype":"m.text"},"ts":1582047525000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(personally I'm not convinced that battling threats of blocking is the best methodology)","msgtype":"m.text"},"ts":1582047574000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"like i wouldn't be happy about it","msgtype":"m.text"},"ts":1582047584000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but as long as i cared one way or the other","msgtype":"m.text"},"ts":1582047589000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think moving the language forward is worth adding features that are subpar (subjectively as it were)","msgtype":"m.text"},"ts":1582047621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, I feel like *not* throwing would be subpar, and I'm not the only one in committee who feels that way","msgtype":"m.text"},"ts":1582047658000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, what do you do when we get to these contradictions? I do agree that we should think everything through and make sure everything that goes in the language is well-done.","msgtype":"m.text"},"ts":1582047679000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i mean there are things people care about and things they don't care about","msgtype":"m.text"},"ts":1582047696000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like some features hit impasses like this","msgtype":"m.text"},"ts":1582047713000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, well, I've seen us work hard on making agreements to work through impasses when features seem really important to some TC39 members","msgtype":"m.text"},"ts":1582047763000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think that's a good thing","msgtype":"m.text"},"ts":1582047769000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(I guess it's going a lot slower than I'd like for some features, like decorators...)","msgtype":"m.text"},"ts":1582047796000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'd probably also block decorators in their current form","msgtype":"m.text"},"ts":1582047812000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what do you think the decorators proposal should do?","msgtype":"m.text"},"ts":1582047834000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"should note those are the only two proposals i would do so for","msgtype":"m.text"},"ts":1582047839000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think the decorator dsl is worth the feature","msgtype":"m.text"},"ts":1582047862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think we've already argued about this though so","msgtype":"m.text"},"ts":1582047878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you mean, static decorators are not worth it, or it's not worth it to do any kind of decorators at all?","msgtype":"m.text"},"ts":1582047881000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"decorators in some form would be cool","msgtype":"m.text"},"ts":1582047896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you have an idea of another form that you'd like?","msgtype":"m.text"},"ts":1582047906000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah but it doesn't work with function declarations","msgtype":"m.text"},"ts":1582047927000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so i'd probably just say","msgtype":"m.text"},"ts":1582047936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leave it to tooling","msgtype":"m.text"},"ts":1582047939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"worded another way, the ideal form of decorators wouldn't really work with js","msgtype":"m.text"},"ts":1582048045000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as sad as that is","msgtype":"m.text"},"ts":1582048048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so i'd rather just not try to put anything in","msgtype":"m.text"},"ts":1582048069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(would any form of decorators work with function declarations?)","msgtype":"m.text"},"ts":1582048125000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"ones that are hoisted into their own namespace","msgtype":"m.text"},"ts":1582048152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is pretty much it","msgtype":"m.text"},"ts":1582048155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek fwiw the \"anyone can block anything\" is not actually a rule, just a norm","msgtype":"m.text"},"ts":1582048169000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, if it has imperative code, when does that run?","msgtype":"m.text"},"ts":1582048175000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah like i said it doesn't really work out","msgtype":"m.text"},"ts":1582048187000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, that's an issue that would have to be resolved whether it's in tooling or the language","msgtype":"m.text"},"ts":1582048202000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i've seen tooling put decorators on function declarations","msgtype":"m.text"},"ts":1582048222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure what that does","msgtype":"m.text"},"ts":1582048225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because i've never personally used it","msgtype":"m.text"},"ts":1582048230000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it exists","msgtype":"m.text"},"ts":1582048231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my point being people can at least choose the broken thing that suits them","msgtype":"m.text"},"ts":1582048249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not really convinced by that as a design principle... lots of JS users don't really choose their language but rather are working in an environment where a lot of decisions are made for them. We're in a unique position to guide the ecosystem towards a good developer experience.","msgtype":"m.text"},"ts":1582048385000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and i think the static decorators are not a good developer experience","msgtype":"m.text"},"ts":1582048407000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so like....","msgtype":"m.text"},"ts":1582048414000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for users, or decorator authors?","msgtype":"m.text"},"ts":1582048418000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"or both?","msgtype":"m.text"},"ts":1582048422000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"define users in this context","msgtype":"m.text"},"ts":1582048439000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean, developers who tend to use decorators from a framework but don't tend to make their own","msgtype":"m.text"},"ts":1582048454000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so not like, people browsing the web, but people using decorators","msgtype":"m.text"},"ts":1582048480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, you're right, \"user\" is a funny word","msgtype":"m.text"},"ts":1582048489000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if you're doing some sort of emberjs thing i don't think it matters","msgtype":"m.text"},"ts":1582048495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah so I'm definitely open to iterating from static decorators to something else, but I want to figure out what that something else is","msgtype":"m.text"},"ts":1582048498000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but i think that's a bad way to think about it","msgtype":"m.text"},"ts":1582048508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why should the dev using emberjs have to be relegated into this position of decorator user and never decorator author","msgtype":"m.text"},"ts":1582048536000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OK, do you mean, \"bad experience for people implementing decorators, and that set matters\"?","msgtype":"m.text"},"ts":1582048546000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1582048552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(I was hoping that the static decorator definition DSL would be a good developer experience too; I don't quite understand the problems with it)","msgtype":"m.text"},"ts":1582048565000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i don't think there should be a difference in level between people consuming and writing libraries","msgtype":"m.text"},"ts":1582048567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: \"allow private\" is weakmap semantics, but you pass the weakmap (or a proxy to the weakmap) to the proxy handling code, no?","msgtype":"m.text"},"ts":1582048573000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: What do you mean?","msgtype":"m.text"},"ts":1582048585000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"s/should be a difference/should have to be a difference/","msgtype":"m.text"},"ts":1582048596000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing's passed to the proxy in the current design","msgtype":"m.text"},"ts":1582048600000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: I think it's important that we bring a good developer experience to people who write libraries, and a good on-ramp, but it doesn't mean that the set of people is the same in practice or that we can't talk about the differences","msgtype":"m.text"},"ts":1582048638000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the first main issue i have is reflection","msgtype":"m.text"},"ts":1582048676000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: right, i meant in a \"allow tunneling\" variant","msgtype":"m.text"},"ts":1582048684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i dislike the idea of adding things that don't naturally have some first class way of interation","msgtype":"m.text"},"ts":1582048694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the second thing is having to learn a new way of representing the manipulation of values","msgtype":"m.text"},"ts":1582048724000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not just a new api","msgtype":"m.text"},"ts":1582048727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: I guess. Well, anyway, see my slides linked above for more background on why we didn't select a tunneling approach.","msgtype":"m.text"},"ts":1582048756000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: OK, you're opposed to anything second-class?","msgtype":"m.text"},"ts":1582048799000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"not unilaterally","msgtype":"m.text"},"ts":1582048858000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but in the case of decorators, yes","msgtype":"m.text"},"ts":1582048867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: ftr i think the current approach is the right default - i'm saying that i think the extension should be a holistic and safe way to allow tunneling explicitly","msgtype":"m.text"},"ts":1582048885000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: If someone wants to take it up, a starting point could be https://github.com/littledan/proposal-proxy-transparent/issues/4","msgtype":"m.text"},"ts":1582048930000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'd be totally open to handing this repo over to another champion","msgtype":"m.text"},"ts":1582048942000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"noted","msgtype":"m.text"},"ts":1582048965000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also as long as you're here","msgtype":"m.text"},"ts":1582049057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"on the finalization subject","msgtype":"m.text"},"ts":1582049072000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as far as I can tell the only thing preventing real engines from infinite looping is the fact that they check for empty cells an order of magnitude less frequently than engine262 does","msgtype":"m.text"},"ts":1582049109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is why I thought it would be worth mentioning it explicitly as something to watch out for","msgtype":"m.text"},"ts":1582049141000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe we should have an implementers guide. The readme is written more with JS developers as an audience, and I think it's best to keep it that way.","msgtype":"m.text"},"ts":1582049954000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: is it expected that test262 would pass if $262.gc() was a noop","msgtype":"m.text"},"ts":1582053114000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i guess if the implementation collects at a high enough frequency it wouldn't need to do anything","msgtype":"m.text"},"ts":1582053148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I haven't reviewed all the current test262 tests in detail, but I'd be comfortable with test262 tests being checked in which didn't work if $262.gc() weren't a no-op","msgtype":"m.text"},"ts":1582053165000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if that restriction is made, then probably implementations need to share tests at some other level. I was happy that we were able to be flexible about this for Intl locales","msgtype":"m.text"},"ts":1582053188000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i think we currently have such tests","msgtype":"m.text"},"ts":1582053191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Good, that makes me happy","msgtype":"m.text"},"ts":1582053203000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but i'm not sure if its because engine262 has an incredibly high collection frequency or because the tests just don't expect it to do anything","msgtype":"m.text"},"ts":1582053208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm confused. I think if there are tests which don't pass if *too much* collection is done, then they're invalid","msgtype":"m.text"},"ts":1582053231000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oh sorry what i meant is","msgtype":"m.text"},"ts":1582053241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe if you mentioned a test, we could dig into it more?","msgtype":"m.text"},"ts":1582053242000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"they pass even though $262.gc is a noop","msgtype":"m.text"},"ts":1582053248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"No-op is a valid GC strategy as long as you have enough memory. ^_^","msgtype":"m.text"},"ts":1582053254000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek: OK, well, that all sounds plausible","msgtype":"m.text"},"ts":1582053278000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"that sounds like a valid implementation of $262.gc() for your implementation","msgtype":"m.text"},"ts":1582053295000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i just wanted to check if thats valid cuz if it wasn't i'd want to dig in","msgtype":"m.text"},"ts":1582053317000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i could probably add weakset and weakmap at this point","msgtype":"m.text"},"ts":1582053438000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what a weird concept","msgtype":"m.text"},"ts":1582053442000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also there's barely a slowdown for my naive mark implementation which is pretty neat","msgtype":"m.text"},"ts":1582053533000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it probably means the rest of engine262 is just so slow that even marking the entire heap is fast in comparison","msgtype":"m.text"},"ts":1582053552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I gathered that performance wasn't really a goal of engine262","msgtype":"m.text"},"ts":1582053973000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah lol","msgtype":"m.text"},"ts":1582054111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well i try to keep it usable at least","msgtype":"m.text"},"ts":1582054119000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think there are a couple of tests i skip because they take like 15 minutes to run though","msgtype":"m.text"},"ts":1582054149000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I thought Weak* things are just specified to work in the presence of collection, not demand that collection occur?","msgtype":"m.text"},"ts":1582054161000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"nothing demands collection occurs","msgtype":"m.text"},"ts":1582054177000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1582054180000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/49759181.png","msgtype":"m.text"},"ts":1582054182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: but how will you know if engine262 handles html comments properly","msgtype":"m.text"},"ts":1582054208000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah i suppose i could implement them without the collection","msgtype":"m.text"},"ts":1582054208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"every once in a while i run them locally","msgtype":"m.text"},"ts":1582054233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: something potentially more interesting... i'm seeing 0% coverage for %FinalizationGroupCleanupIteratorPrototype%.next","msgtype":"m.text"},"ts":1582056814000,"senderName":"devsnek","senderId":"devsnek@irc"}
]