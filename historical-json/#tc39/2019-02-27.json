[
{"content":{"body":"jmdyck: for https://github.com/tc39/ecma262/issues/1458 what is the actual data model? Can it contain lone surrogates?","msgtype":"m.text"},"ts":1551288040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jmdyck: and by UTF-16 encoding do you mean producing bytes?","msgtype":"m.text"},"ts":1551288089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"ECMAScript source text is a sequence of code points. All Unicode code  point values from U+0000 to U+10FFFF, including surrogate code points,  may occur in source text where permitted by the ECMAScript grammars.\"","msgtype":"m.text"},"ts":1551288148000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-source-text","msgtype":"m.text"},"ts":1551288157000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and by UTF-16 encoding, I mean producing (16 bit) code units, like https://tc39.github.io/ecma262/#sec-utf16encoding does.","msgtype":"m.text"},"ts":1551288271000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I guess there already is an issue on ECMAScript using UTF-16 in a very confusing manner","msgtype":"m.text"},"ts":1551288300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(the term)","msgtype":"m.text"},"ts":1551288310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not finding such an issue.","msgtype":"m.text"},"ts":1551288465000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indeed hmm","msgtype":"m.text"},"ts":1551288514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wow, ES uses \"encode\" to mean something different than \"go from strings to bytes\"??","msgtype":"m.text"},"ts":1551288753000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: code point to code unit","msgtype":"m.text"},"ts":1551289242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it also has this phrase \"UTF-16 encoded Unicode text\" which I think goes from String to scalar values","msgtype":"m.text"},"ts":1551289403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: it's all pretty clear though, so I'm conflicted on filing an issue","msgtype":"m.text"},"ts":1551289429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The phrase \"the result of parsing [String value], interpreted as UTF-16 encoded Unicode text\" means that you (theoretically) have to UTF-16-decode the String value and then parse the resulting sequence of code points as if it was normal source text. (I assume.)","msgtype":"m.text"},"ts":1551290180000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: well, proper UTF-16 decode would throw or replace lone surrogates","msgtype":"m.text"},"ts":1551291170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jmdyck: the spec has a reference after that text which sorta explains what it means, but it's not the best","msgtype":"m.text"},"ts":1551291191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've lost track, are public static class fields shipping in enough places to use them in spec examples yet?","msgtype":"m.text"},"ts":1551300547000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Spec examples for new features","msgtype":"m.text"},"ts":1551300560000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Looks like Chrome-only :(","msgtype":"m.text"},"ts":1551300604000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: re the heart on my comment in the \"define exotic object\" issue: is the approach I described particularly amenable to layering concerns?","msgtype":"m.text"},"ts":1551307789000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: it just seems to actually be way more precise than anything else suggested so far","msgtype":"m.text"},"ts":1551307817000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And it actually addresses the fact that ObjectCreate()'s steps are useful for everyone","msgtype":"m.text"},"ts":1551307843000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"An alternative would be to \"reify\" the brand (I guess as an internal slot), which you could then pass to ObjectCreate/AllocateBasicObject. But then there's the question: what if the brand doesn't 'agree' with the internal methods?","msgtype":"m.text"},"ts":1551308017000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"If the brand isn't there, then there can't be disagreement.","msgtype":"m.text"},"ts":1551308178000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(In the hypothetical, the disagreement could only be for host-defined exotics, I think.)","msgtype":"m.text"},"ts":1551308254000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yes, I think stating the brand / an object's exoticness in terms of the overridden internal methods is the kind of \"first principles\" approach annevk was looking for.","msgtype":"m.text"},"ts":1551310029000,"senderName":"Domenic","senderId":"Domenic@irc"}
]