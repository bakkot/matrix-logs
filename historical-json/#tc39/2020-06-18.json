[
{"content":{"body":"The behavior of  displaying class name of object in chrome console is weird : For `class Test {}` it will show `Test {}` even Test have `Symbol.toStringTag` defined. But for `class Test1 extends Test {}`, it will show `Foo {}` (assume `Test.prototype[Symbol.toStringTag]` is `\"Foo\"`).","msgtype":"m.text"},"ts":1592491243000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: in my chrome i see `class Test` and `class Test1` with `class Test { get [Symbol.toStringTag]() { return 'Foo'; } } class Test1 extends Test {} [Test, Test1]`, same for the instances","msgtype":"m.text"},"ts":1592498371000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: i'd only expect the toStringTag to show up with Object.prototype.toString, and indeed i see `new Test1()  + ''` and `new Test()  + ''` print `[object Foo]`.","msgtype":"m.text"},"ts":1592498420000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: this is another weird issue, getter have different behavior.","msgtype":"m.text"},"ts":1592498431000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"On the other hand, Node.js have consistent and reasonable result.","msgtype":"m.text"},"ts":1592498492000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: `class Test {}  Test.prototype[Symbol.toStringTag] = 'Foo'; class Test1 extends Test {} [Test, Test1]` gives me the same behavior in chrome's repl","msgtype":"m.text"},"ts":1592498514000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah, i do see `new Test1()` in the second example print `Foo {}`, so that seems like a bug","msgtype":"m.text"},"ts":1592498539000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"haxjs: specifically, if i then do `class Test {}  Test.prototype[Symbol.toStringTag] = 'Foo'; class Test1 extends Test {} [Test, Test1]` it restores the proper behavior","msgtype":"m.text"},"ts":1592498574000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so the bug seems to be when Symbol.toStringTag is *enumerable* on a subclass, it incorrectly uses it","msgtype":"m.text"},"ts":1592498590000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(or, that it incorrectly ignores it when it's not enumerable, everywhere else, but that doesn't seem right to me)","msgtype":"m.text"},"ts":1592498610000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess it's a bug, but can't understand how this bug occur ðŸ˜…","msgtype":"m.text"},"ts":1592498678000,"senderName":"haxjs","senderId":"haxjs@irc"},
{"content":{"body":"haxjs: want to file it? :-)","msgtype":"m.text"},"ts":1592498678000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"should `Reflect` have a toStringTag?","msgtype":"m.text"},"ts":1592517660000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone please have an opinion on this","msgtype":"m.text"},"ts":1592517665000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: don't tempt me","msgtype":"m.text"},"ts":1592518004000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: sure","msgtype":"m.text"},"ts":1592518580000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: specifically, \"sure\" to the \"let's retrofit all the namespace objects that don't have @@toStringTag with a @@toStringTag\"","msgtype":"m.text"},"ts":1592518693000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"though one day i would like to get out of the business of having opinions, that'd be nice","msgtype":"m.text"},"ts":1592518771000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: yes, for debuggability","msgtype":"m.text"},"ts":1592519873000,"senderName":"ljharb","senderId":"ljharb@irc"}
]