[
{"content":{"body":"okay, I believe this is the full list of issues in this PR now: https://github.com/tc39/test262/pull/2833#issuecomment-709635850","msgtype":"m.text"},"ts":1602871021000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ fyi shu","msgtype":"m.text"},"ts":1602871031000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: ty","msgtype":"m.text"},"ts":1602872497000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling thanks for those notes","msgtype":"m.text"},"ts":1602873229000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"shu I'll be working on these immediately.","msgtype":"m.text"},"ts":1602873238000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: thank you <3","msgtype":"m.text"},"ts":1602873247000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"was going to ask whether you had the bandwidth","msgtype":"m.text"},"ts":1602873256000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"possibly stupid question: it's possible to construct a string literal with lone surrogates *without* escapes, right?","msgtype":"m.text"},"ts":1602877203000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you can just, like, put the bit pattern for a lone surrogate between quotes?","msgtype":"m.text"},"ts":1602877236000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i believe you can","msgtype":"m.text"},"ts":1602877251000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah you can","msgtype":"m.text"},"ts":1602877285000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu yes","msgtype":"m.text"},"ts":1602877286000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1602877292000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but the actual answer depends on your file's encoding and stuff","msgtype":"m.text"},"ts":1602877313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"according to ecma262 source text is a sequence of 16-bit integers, so you can put the lone surrogate bit pattern in just fine, but your file system or file server may disagree","msgtype":"m.text"},"ts":1602877366000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my actual question was \"can i skip the need to check for lone surrogates in ModuleExportName if i didn't see any escapes during lexing\", and the answer to that seems like a definitive no","msgtype":"m.text"},"ts":1602877400000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"how are y'all dealing with dot variable collisions","msgtype":"m.text"},"ts":1602877442000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what are dot variables?","msgtype":"m.text"},"ts":1602877524000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like those synthesized unutterable names used for codegen?","msgtype":"m.text"},"ts":1602877540000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: like this: https://github.com/v8/v8/blob/master/src/ast/ast-value-factory.h#L225","msgtype":"m.text"},"ts":1602877715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"v8 stores variables all over the place with names like that","msgtype":"m.text"},"ts":1602877758000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i guess this is the one you'd be worried about https://github.com/v8/v8/blob/master/src/parsing/parser.cc#L1408-L1411","msgtype":"m.text"},"ts":1602877824000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, those internal names","msgtype":"m.text"},"ts":1602877837000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i was going to work on that proposal for v8 but i didn't have the energy to figure out a way to avoid collisions","msgtype":"m.text"},"ts":1602877866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i haven't really thought about it yet, but i imagine that desugaring would need to change","msgtype":"m.text"},"ts":1602877961000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: Bakkot: methods like TA.p.every don't give alg steps but say that one \"must take into account the possibility that calls to callbackfn may cause the this value to become detached\" -- is one to assume this means \"check whether we need to throw after every iteration\"?","msgtype":"m.text"},"ts":1602877999000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: actually isn't that desugaring fine?","msgtype":"m.text"},"ts":1602878075000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: the .x there is used in the binding position, not in the ModuleExportName position","msgtype":"m.text"},"ts":1602878091000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's complicated because the thing we're doing on each iteration is an IntegerIndexedElementGet which no longer throws... :(","msgtype":"m.text"},"ts":1602878091000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmmmm","msgtype":"m.text"},"ts":1602878121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you might be right","msgtype":"m.text"},"ts":1602878128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ah wait, no, you were right, the second part of the desugaring `.x as x` is what can conflict","msgtype":"m.text"},"ts":1602878155000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh wait TA.p.filter is spelled out and it doesn't throw on each iteration","msgtype":"m.text"},"ts":1602878289000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling those methods are dumb and we should fix them","msgtype":"m.text"},"ts":1602878308000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah :(","msgtype":"m.text"},"ts":1602878319000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we just did that with the math methods, and there's an open PR doing it for Number","msgtype":"m.text"},"ts":1602878321000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah cool","msgtype":"m.text"},"ts":1602878330000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: ah, i think it might still be okay. the ModuleExportName `as` ModuleExportName case shouldn't be looking up any variables in the local scope","msgtype":"m.text"},"ts":1602878351000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so even if the string contents are the same, they shouldn't conflict since it's not a binding","msgtype":"m.text"},"ts":1602878363000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: reading","msgtype":"m.text"},"ts":1602878379000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"thanks, sorry for the interleaved discussion","msgtype":"m.text"},"ts":1602878394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah https://tc39.es/ecma262/#sec-%typedarray%.prototype.every is a bad piece of spec text and we should be ashamed","msgtype":"m.text"},"ts":1602878451000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: i think the *intention* was to throw. let's see what impls do","msgtype":"m.text"},"ts":1602878508000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the issue is that like, if you look at https://tc39.es/ecma262/#sec-%typedarray%.prototype.map which is clear and simple","msgtype":"m.text"},"ts":1602878620000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"we were letting IntegerIndexedElementSet throw if calling the callback detached the buffer","msgtype":"m.text"},"ts":1602878648000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but now that doesn't throw, so there's a ripple effect","msgtype":"m.text"},"ts":1602878661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which seems fine there","msgtype":"m.text"},"ts":1602878671000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it makes the lack of clarity for every/some even worse","msgtype":"m.text"},"ts":1602878688000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah, the ripple effects, hm","msgtype":"m.text"},"ts":1602878825000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i believe Records and Tuples are currently using the same technique as typed array filter in a bunch of places","msgtype":"m.text"},"ts":1602879386000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, \"this is the same as X except for these changes\"","msgtype":"m.text"},"ts":1602879396000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems fine while iterating in stage 2, but I'll require that fixed before it landss","msgtype":"m.text"},"ts":1602879717000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it might be good to file an issue on the repo with that feedback then","msgtype":"m.text"},"ts":1602879867000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh that's another interesting path","msgtype":"m.text"},"ts":1602884945000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`Object.defineProperty(ta, '0', badDescriptor)` usually throws, but when the buffer is detached, we run into trouble checking the typed array length before dealing with the descriptor","msgtype":"m.text"},"ts":1602885152000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"...which seems like we might just return undefined, except that there is one confusing thing","msgtype":"m.text"},"ts":1602885324000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and that's that detaching the underlying buffer doesn't seem to change [[ArrayLength]] on the typed array? 🤔","msgtype":"m.text"},"ts":1602885404000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which means we probably should still throw","msgtype":"m.text"},"ts":1602885465000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"issue is at https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-defineownproperty-p-desc step 3.b.i if anyone is interested in checking my work","msgtype":"m.text"},"ts":1602885540000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"s/issue/the line in question/","msgtype":"m.text"},"ts":1602885557000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu I have to sign off, I will wrap up the necessary updates to detach buffer tests next week. For now, if there is any issue, I recommend skiplisting the feature: \"align-detached-buffer-semantics-with-web-reality","msgtype":"m.text"},"ts":1602885581000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"\"","msgtype":"m.text"},"ts":1602885581000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Whoops","msgtype":"m.text"},"ts":1602885585000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"seems like elsewhere we always check IsDetachedBuffer immediately before checking IsValidIntegerIndex so maybe this is an editorial bug","msgtype":"m.text"},"ts":1602885660000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah, I feel like that makes the most sense.","msgtype":"m.text"},"ts":1602885705000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu: evidently there are tests to check that `every` and kin throw","msgtype":"m.text"},"ts":1602886917000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: yeah?","msgtype":"m.text"},"ts":1602886985000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmm although they cite the Get","msgtype":"m.text"},"ts":1602887016000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/tc39/test262/blob/main/test/built-ins/TypedArray/prototype/map/callbackfn-detachbuffer.js","msgtype":"m.text"},"ts":1602887016000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ this one at the very least is wrong","msgtype":"m.text"},"ts":1602887089000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so I think it would be reasonable to call them all in need of update","msgtype":"m.text"},"ts":1602887102000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"all\" meaning, all the ones that take a callback function that might detach the buffer before the next Get or Set","msgtype":"m.text"},"ts":1602887140000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that test you just linked expects that it doesn't throw, but that iteration stops after detaching?","msgtype":"m.text"},"ts":1602887166000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"umm currently even iteration wouldn't stop: https://tc39.es/ecma262/#sec-%typedarray%.prototype.map","msgtype":"m.text"},"ts":1602887340000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"unless we view this as an overlooked ripple effect that should be corrected immediately","msgtype":"m.text"},"ts":1602887359000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what do implementations do?","msgtype":"m.text"},"ts":1602889007000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh right [[Get]] and [[Set]] were already allowed outside of JSC","msgtype":"m.text"},"ts":1602889201000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1602889204000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"pretty sure everybody passes these","msgtype":"m.text"},"ts":1602889212000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh!!","msgtype":"m.text"},"ts":1602889429000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://test262.report/browse/built-ins/TypedArray/prototype/map/callbackfn-detachbuffer.js","msgtype":"m.text"},"ts":1602889430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1602889432000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and everyone drew the same conclusion for the implicit ones:","msgtype":"m.text"},"ts":1602889483000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://test262.report/browse/built-ins/TypedArray/prototype/every/callbackfn-detachbuffer.js","msgtype":"m.text"},"ts":1602889484000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"s/implicit ones/ones lacking alg steps/ I mean","msgtype":"m.text"},"ts":1602889518000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"V8 and SM disagree on whether to stop iterating","msgtype":"m.text"},"ts":1602889678000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but already agree on not throwing","msgtype":"m.text"},"ts":1602889689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"V8's choice to stop iterating is a little odd though","msgtype":"m.text"},"ts":1602889790000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"V8 and SM both allow [[Get]] and [[Set]] but you'd expect them both to follow the spec otherwise","msgtype":"m.text"},"ts":1602889861000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1602890576000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm not sure right now we should do here","msgtype":"m.text"},"ts":1602890594000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm gonna try to finish up implementing the arbitrary module export name thing for today, let's come back to this next week","msgtype":"m.text"},"ts":1602890614000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1602890777000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling shu we should summon leobalter to look at the older detach buffer tests, since he was one of the primary authors of those tests back in 2016","msgtype":"m.text"},"ts":1602891500000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"that would be great","msgtype":"m.text"},"ts":1602892181000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's quite a doozy but I at least feel like I've got a handle on it now that I've worked the whole way through JSC's impl","msgtype":"m.text"},"ts":1602892221000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]