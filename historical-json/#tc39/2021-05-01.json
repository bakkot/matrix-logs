[
{"content":{"body":"is it discouraged for new proposals to depend on (or mention) other proposals that are still in the early stages? `Error.prototype.stack` seems to be taking its time and i don't know if it would be realistic to expect that proposal to reach stage 4 prior to being able to claim that a new error type should have that instance property https://github.com/tc39/proposal-error-stacks","msgtype":"m.text"},"ts":1619872335000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"i also find the other non-standard Mozilla instance properties (`fileName`, `lineNumber`, `columnNumber`) very attractive and wonder what can be done to have `NativeError` from the spec also include these https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#instance_properties","msgtype":"m.text"},"ts":1619872752000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: it seems fine, just refine as you go through the stages","msgtype":"m.text"},"ts":1619873171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All of those need to be standardized afaik, but they‚Äôre also tricky","msgtype":"m.text"},"ts":1619873209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, sounds like having a wishlist of instance properties/methods wouldn't be unreasonable at this point","msgtype":"m.text"},"ts":1619873445000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: i think that a) nobody will want any such enhancements until the existing behavior of .stack is standardized, and none of these things belong on the prototype, for membranes reasons, so they'd need to be stored in internal slots and accessed via static methods","msgtype":"m.text"},"ts":1619882582000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: `.stack` itself is eventually going to end up being legacy, effectively discouraged in favor of a static method on Error","msgtype":"m.text"},"ts":1619882602000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: in general there's lots of flexibility around overlapping proposals, but error stacks are a bit of a special case.","msgtype":"m.text"},"ts":1619882659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"aha!","msgtype":"m.text"},"ts":1619882749000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, any idea what you might name this method? `getStackTrace()` or similar?","msgtype":"m.text"},"ts":1619882817000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: yes, it's already in the proposal repo","msgtype":"m.text"},"ts":1619882828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i was basically told that i'd have to split the proposal, and that nothing stack-related could happen until \"everything .stack currently does\" had already advanced","msgtype":"m.text"},"ts":1619882850000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if all the new things in the proposal land, you wouldn't need all those individual properties, since they'd be in the pre-parsed data structure you could get.","msgtype":"m.text"},"ts":1619882906000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"indeed, a proper stack trace object would have filename, line & column number","msgtype":"m.text"},"ts":1619882969000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, is there a rough draft of what that object might look like somewhere?","msgtype":"m.text"},"ts":1619883029000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"there is a complete spec for it :-) you may want to read the proposal repo","msgtype":"m.text"},"ts":1619883052000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"literally the only thing i didn't do is tightly specify how to create the _contents_ of the stack. and that's what i was told i must do before anything else.","msgtype":"m.text"},"ts":1619883080000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(eventually told)","msgtype":"m.text"},"ts":1619883086000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"woah, this is really nice","msgtype":"m.text"},"ts":1619883276000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"i had only seen the readme earlier","msgtype":"m.text"},"ts":1619883286000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"welp, this answers soo many questions (basically knocks off 4 instance properties from my wishlist)","msgtype":"m.text"},"ts":1619883386000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"> none of these things belong on the prototype, for membranes reasons","msgtype":"m.text"},"ts":1619883560000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, care to elaborate what that ^ means?","msgtype":"m.text"},"ts":1619883580000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"sounds like a security concern","msgtype":"m.text"},"ts":1619883633000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"it means that position information is an encapsulation concern, yes","msgtype":"m.text"},"ts":1619884071000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and if it‚Äôs attached to the object, then it can‚Äôt be denied/shadowed based on lexical scope","msgtype":"m.text"},"ts":1619884097000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1619884466000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ok, now i _really_ wanna see this API in action [ no polyfill from the looks of it üò¢ ]","msgtype":"m.text"},"ts":1619884776000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, it looks like `Error#lineNumber` & `Error#columnNumber` would come out of `GetStackFramePositionString`, but would that mean that i would have to parse this string for this specific data, right?","msgtype":"m.text"},"ts":1619884868000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"oh, the 2-element array returned by `FromStackFramePosition` is even easier, but it's unclear to me where these `position` objects come from","msgtype":"m.text"},"ts":1619885624000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"> literally the only thing i didn't do is tightly specify how to create the _contents_ of the stack","msgtype":"m.text"},"ts":1619888288000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, when you get the chance, take a look @ the methods on Java's `StackTraceElement` https://docs.oracle.com/javase/7/docs/api/java/lang/StackTraceElement.html#getLineNumber()","msgtype":"m.text"},"ts":1619888344000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: you‚Äôd never have to parse a string again, is the idea","msgtype":"m.text"},"ts":1619896551000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1619896620000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"If two (or more) Agents share an executing thread, what does that mean? Is it just a time-sharing thing, where at most one of the Agents is executing at a given time? But the Agents are just as 'isolated' (?) as if they weren't sharing?","msgtype":"m.text"},"ts":1619901639000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"they're not quite isolated: the forward progress guarantee applies only to a collection of agents which share an executing thread, not each individual agent","msgtype":"m.text"},"ts":1619902500000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i meant isolated in a more informational sense? execution contexts from 2 different agents that share an executing thread don't thereby have access to any more information (about each other)? An execution context can't even tell if the thread is shared?","msgtype":"m.text"},"ts":1619903464000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"other than the forward progress guarantee, yes, that's true as far as I am aware","msgtype":"m.text"},"ts":1619903555000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"can't\" = \"the spec doesn't provide a way (though the implementation might)\"","msgtype":"m.text"},"ts":1619903560000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, thx.","msgtype":"m.text"},"ts":1619903658000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"did javascriptcore remove ptc?","msgtype":"m.text"},"ts":1619906110000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it no longer seems to work","msgtype":"m.text"},"ts":1619906116000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even in the most basic example, like","msgtype":"m.text"},"ts":1619906143000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"var count = 0; (function f(bound) { ++ count; if (bound <= 0) return; return f(bound - 1); })(100000); console.log(count);","msgtype":"m.text"},"ts":1619906150000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"certainly should not have changed","msgtype":"m.text"},"ts":1619906243000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hard to point at since test262.report is not alive but","msgtype":"m.text"},"ts":1619906257000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"for instance we have no failing (or skipped) tests with `tail` in the name","msgtype":"m.text"},"ts":1619906349000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1619906358000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`tco` is the thing which would be in the name, not `tail`","msgtype":"m.text"},"ts":1619906393000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and those tests certainly fail for me if I try to run them with `jsc`","msgtype":"m.text"},"ts":1619906462000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least `tco-call-args` does","msgtype":"m.text"},"ts":1619906474000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"( https://github.com/tc39/test262/blob/main/test/language/expressions/call/tco-call-args.js )","msgtype":"m.text"},"ts":1619906495000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh `tco` oops","msgtype":"m.text"},"ts":1619906636000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that particular test should not fail, weird","msgtype":"m.text"},"ts":1619906691000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh, apparently the test is strict-only","msgtype":"m.text"},"ts":1619906691000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it passes if I run it in strict mode","msgtype":"m.text"},"ts":1619906700000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"odd, I did not realize tco was strict-only","msgtype":"m.text"},"ts":1619906706000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway yeah that appears to be what was happening","msgtype":"m.text"},"ts":1619906739000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"only works (in jsc) in strict mode","msgtype":"m.text"},"ts":1619906746000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1619906755000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and yeah that's per spec","msgtype":"m.text"},"ts":1619906756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok all is well","msgtype":"m.text"},"ts":1619906759000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"phew!","msgtype":"m.text"},"ts":1619906762000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fwiw these ones do fail","msgtype":"m.text"},"ts":1619906767000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-cross-realm-class-construct.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-cross-realm-class-derived-construct.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-cross-realm-fun-call.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-cross-realm-fun-construct.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-non-eval-function-dynamic.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-non-eval-function.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-non-eval-global.js","msgtype":"m.text"},"ts":1619906771000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"test/language/expressions/call/tco-non-eval-with.js","msgtype":"m.text"},"ts":1619906772000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but they're a little more specific","msgtype":"m.text"},"ts":1619906780000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hah, the cross-realm aspect was actually the thing I was just looking into","msgtype":"m.text"},"ts":1619906849000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think `test/language/expressions/call/tco-cross-realm-class-construct.js` and `test/language/expressions/call/tco-cross-realm-class-derived-construct.js` are wrong as of https://github.com/tc39/ecma262/pull/2216, actually","msgtype":"m.text"},"ts":1619907244000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all four of the `tco-cross-realm` ones, in fact","msgtype":"m.text"},"ts":1619907327000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the test could be repaired by using a revoked proxy instead of a class to produce the type error","msgtype":"m.text"},"ts":1619907356000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but tbh I feel like the spec should change there; the behavior being asserted in these tests is _very_ strange","msgtype":"m.text"},"ts":1619907370000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/tc39/test262/issues/2978","msgtype":"m.text"},"ts":1619910877000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this might be the single most esoteric issue I've ever written up, which is frankly saying something","msgtype":"m.text"},"ts":1619910893000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lolol","msgtype":"m.text"},"ts":1619911125000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"incidentally, would the correction make current JSC behavior correct? or are we off in a different way?","msgtype":"m.text"},"ts":1619911152000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the correction to the tests I suggest in the issue, or the correction to the spec I hint at?","msgtype":"m.text"},"ts":1619911341000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the first: no, you're off in a different way: JSC always derives the realm for the error in this case from the proxy, not its caller","msgtype":"m.text"},"ts":1619911367000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the second: it depends on which of two possible fixes we went with","msgtype":"m.text"},"ts":1619911376000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can observe the bug without tail calls being involved in e.g. https://gist.github.com/bakkot/c386c597938d3462a083865f2fe4df58","msgtype":"m.text"},"ts":1619911482000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's may well be a test262 you xfail as well","msgtype":"m.text"},"ts":1619911494000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"uh well since you ultimately suggested a spec fix I guess that's what I meant","msgtype":"m.text"},"ts":1619912843000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but was just generally curious","msgtype":"m.text"},"ts":1619912849000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"doesn't surprise me that it's not just \"A or B\"","msgtype":"m.text"},"ts":1619912857000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"safari's behavior is reasonable and is probably the one I'd go with if I felt like trying to tweak this part of the spec","msgtype":"m.text"},"ts":1619913139000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]