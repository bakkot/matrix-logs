[
{"content":{"body":"Bakkot: I'm getting the spec into the format that ecmarkup wants","msgtype":"m.text"},"ts":1617584905000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I thought it was going to be tricky, because the info that used to all be in a <dl> is now spread over <emu-clause> + <h1> + <dl>","msgtype":"m.text"},"ts":1617585087000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but I was able to hack something together.","msgtype":"m.text"},"ts":1617585118000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sweet","msgtype":"m.text"},"ts":1617585334000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, when I was playing with it the fact that they're adjacent made it easier to deal with","msgtype":"m.text"},"ts":1617585344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll commit when I've got something that's basically correct, and then we can iterate.","msgtype":"m.text"},"ts":1617585552000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1617585560000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's what I did with ecmarkup","msgtype":"m.text"},"ts":1617585566000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"btw, I don't like the term \"concrete method\". (It suggests they're more concrete than \"abstract operations\".) So I'd like if we could change that before too much gets built on `type=\"concrete method\"`.","msgtype":"m.text"},"ts":1617586601000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"honestly just \"method\" seems like it would work fine","msgtype":"m.text"},"ts":1617587009000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"possibly \"abstract method\"","msgtype":"m.text"},"ts":1617587016000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"though I guess \"abstract\" is awkward there because it's confused with the use of \"abstract\" as in the Java keyword","msgtype":"m.text"},"ts":1617587079000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just \"method\" could be confused with in-language method.","msgtype":"m.text"},"ts":1617587342000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I suggest \"record method\"","msgtype":"m.text"},"ts":1617587357000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(until \"record\" gets renamed)","msgtype":"m.text"},"ts":1617587369000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1617587484000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that would maybe work","msgtype":"m.text"},"ts":1617587504000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"specification method\", alternatively, if we want to be explicit about it","msgtype":"m.text"},"ts":1617587518000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"specification method\" is a little too general, because we've also got internal methods","msgtype":"m.text"},"ts":1617587695000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and numeric methods","msgtype":"m.text"},"ts":1617587706000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"mm, true","msgtype":"m.text"},"ts":1617587895000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I was going off of \"The Environment Record abstract class includes the abstract specification methods defined in Table 17.\"","msgtype":"m.text"},"ts":1617587899000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"record method\" is probably the way to go","msgtype":"m.text"},"ts":1617587920000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"want to open an issue about it or shall I?","msgtype":"m.text"},"ts":1617587927000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe you, i've already got lots of issues.","msgtype":"m.text"},"ts":1617587995000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"side benefit: this frees up \"concrete\" for other use. E.g. \"ECMAScript language value\" -> \"concrete value\"","msgtype":"m.text"},"ts":1617588165000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"opened https://github.com/tc39/ecma262/issues/2371","msgtype":"m.text"},"ts":1617588240000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1617588480000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, finished skimming the diffs","msgtype":"m.text"},"ts":1617588878000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"committed and pushed!","msgtype":"m.text"},"ts":1617589226000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"wait, did that overwrite your push Bakkot?","msgtype":"m.text"},"ts":1617589632000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it did, I can re-do","msgtype":"m.text"},"ts":1617589647000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I should fetch that and rebase (or something)","msgtype":"m.text"},"ts":1617589716000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"anyway, it's looking pretty decent at a glance","msgtype":"m.text"},"ts":1617589902000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"couple of things which stand out so far: the algorithms in https://tc39.es/ecma262/#sec-properties-of-valid-executions aren't handled right by ecmarkup","msgtype":"m.text"},"ts":1617589941000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since they're weird","msgtype":"m.text"},"ts":1617589947000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also, GetGeneratorKind (and presumably other AOs which take no arguments) isn't handled - in the particular case of AOs with no arguments it's probably worth leaving it on a single line","msgtype":"m.text"},"ts":1617590019000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"note for later: StringToBigInt, FunctionDeclarationInstantiation, GetWaiterList have moved-paragraph diffs","msgtype":"m.text"},"ts":1617590083000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, also, ecmarkup isn't inserting the \"It\" in the \"description\" field","msgtype":"m.text"},"ts":1617590157000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"afk a while","msgtype":"m.text"},"ts":1617590209000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that was intentional; especially for the multi-sentence ones, it's annoying to have to remember that the first sentence is truncated at the start","msgtype":"m.text"},"ts":1617590210000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh the GetGeneratorKind thing is actually just a bug in ecmarkup. still, those should be single-line probably","msgtype":"m.text"},"ts":1617592164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: re empty param list: will ecmarkup know to look for the dl is the h1 isn't multi-line?","msgtype":"m.text"},"ts":1617593319000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"s/is/if/","msgtype":"m.text"},"ts":1617593374000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1617593422000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck LocalTZA is implementation-defined, not host-defined","msgtype":"m.text"},"ts":1617593483000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they're different things","msgtype":"m.text"},"ts":1617593488000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, 545 predates that distinction.","msgtype":"m.text"},"ts":1617593502000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"wait, for no-params, do you want whole h1 on one line, or tags on separate lines?","msgtype":"m.text"},"ts":1617593562000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"whole thing on 1 line","msgtype":"m.text"},"ts":1617593590000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"identical to the pre-545 way of writing it","msgtype":"m.text"},"ts":1617593605000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1617593613000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also: you've left \"It performs the following steps when called:\" in the description for `sec-moduleevaluation`, somehow","msgtype":"m.text"},"ts":1617593635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"possibly for all the concrete methods actually","msgtype":"m.text"},"ts":1617593648000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or, no, just Evaluate and Link so far, not all of them","msgtype":"m.text"},"ts":1617593672000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that sounds familiar, but i don't recall why it happened.","msgtype":"m.text"},"ts":1617593698000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"do i need the package-lock.json change?","msgtype":"m.text"},"ts":1617593721000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i must need the package.json change.","msgtype":"m.text"},"ts":1617593746000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"actually, maybe the package-lock change is old","msgtype":"m.text"},"ts":1617593802000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"you can probably get away with skipping the package-lock change","msgtype":"m.text"},"ts":1617593823000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it does have a relevant thing, which is the change to the `ecmarkup` section of it, but it also updates other stuff whenever you install anything","msgtype":"m.text"},"ts":1617593839000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hey neat! this approach fixes a human error: https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-delete-p has \"takes arguments\" despite taking only one argument","msgtype":"m.text"},"ts":1617593889000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's a few bugs in my ecmarkup branch which I am slowly working through","msgtype":"m.text"},"ts":1617593918000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with them fixed, the diff in the HTML is very small","msgtype":"m.text"},"ts":1617593932000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"whee","msgtype":"m.text"},"ts":1617593972000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"have rebased to the upstream, so presumably i won't overwrite your commit again","msgtype":"m.text"},"ts":1617594000000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Okay, so for the subject-less sentence, you'd like just \"It\" ?","msgtype":"m.text"},"ts":1617594041000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"As opposed to (say) \"This operation/method\"","msgtype":"m.text"},"ts":1617594223000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Hm, the auto-rendering doesn't seem to be working.","msgtype":"m.text"},"ts":1617594386000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"It\", yes","msgtype":"m.text"},"ts":1617594725000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1617594733000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that's by far the majority","msgtype":"m.text"},"ts":1617594736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"re: auto-rendering: not sure what's up with that. might be the merge conflicts?","msgtype":"m.text"},"ts":1617594782000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll host a copy once I get ecmarkup fixed up","msgtype":"m.text"},"ts":1617594804000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't know what I can do about merge conflicts.","msgtype":"m.text"},"ts":1617594812000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"My local master is same as upstream/master, and that's what I'm generating 545 from.","msgtype":"m.text"},"ts":1617594868000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I guess it doesn't like the 'history'?","msgtype":"m.text"},"ts":1617594932000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, that's pretty odd. did you rebase on master?","msgtype":"m.text"},"ts":1617594957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, pushed update.","msgtype":"m.text"},"ts":1617595458000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"added \"It\" and single-line <h1> for no-params","msgtype":"m.text"},"ts":1617595478000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yay, conflicts went away.","msgtype":"m.text"},"ts":1617595505000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(agreed re weirdness of Properties of Valid Executions)","msgtype":"m.text"},"ts":1617595613000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"preview failed - I guess it doesn't like the \"installing from branch\" thing :(","msgtype":"m.text"},"ts":1617595677000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hrmph","msgtype":"m.text"},"ts":1617595714000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hosted a copy at https://bakkot.github.io/ecma262-previews/structured-header/","msgtype":"m.text"},"ts":1617595996000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also posted the diff as a comment on the PR","msgtype":"m.text"},"ts":1617596230000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or, well, am attempting to post? github maybe does not like my comment with the whole diff in it","msgtype":"m.text"},"ts":1617596246000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"got LocalTZA fixed locally","msgtype":"m.text"},"ts":1617596308000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ugh, and it doesn't support .diff or .patch files. that's dumb","msgtype":"m.text"},"ts":1617596318000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"figured out the problem with Link and Evaluate","msgtype":"m.text"},"ts":1617596745000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"okay, pushed up fixes.","msgtype":"m.text"},"ts":1617596945000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think that's all you asked for?","msgtype":"m.text"},"ts":1617597018000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"should also drop the custom styling from your branch, I guess","msgtype":"m.text"},"ts":1617597178000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Done.","msgtype":"m.text"},"ts":1617597251000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, also, why did you drop the \"Static Semantics: \" before ParsePattern?","msgtype":"m.text"},"ts":1617597433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1617597466000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"So you want \"<h1>\\n    Static Semantics: ParsePattern (\\n ...\" ?","msgtype":"m.text"},"ts":1617597567000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think so; that's pretty much what's there currently, just with linebreaks + types","msgtype":"m.text"},"ts":1617597610000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(ditto ParseText, of course)","msgtype":"m.text"},"ts":1617597618000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"The code that analyzes headings doesn't retain \"Static Semantics\" or \"Runtime Semantics\".","msgtype":"m.text"},"ts":1617597733000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"still gotta figure out what to do about the Races (etc) AO-like things and Abstract Equality","msgtype":"m.text"},"ts":1617597742000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, ok","msgtype":"m.text"},"ts":1617597753000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think we can just drop it","msgtype":"m.text"},"ts":1617597757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would want to do that as a different commit or PR, though","msgtype":"m.text"},"ts":1617597784000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one of several such","msgtype":"m.text"},"ts":1617597787000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I could hack it in if you like","msgtype":"m.text"},"ts":1617597974000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nah","msgtype":"m.text"},"ts":1617597997000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1617598000000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"at least, not yet; if the other editors really want to keep it around then it'll need to end up in the output somehow","msgtype":"m.text"},"ts":1617598038000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but don't bother unless and until that proves to be the case","msgtype":"m.text"},"ts":1617598053000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, and the \"WeakRef emptying thing\" isn't really an AO","msgtype":"m.text"},"ts":1617598515000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it probably does not need a header","msgtype":"m.text"},"ts":1617598521000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, also, you've stripped the return types from the descriptions, when they are present; I think we should leave them as-is for now","msgtype":"m.text"},"ts":1617598561000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, right.","msgtype":"m.text"},"ts":1617598819000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and we should figure out how to handle multi-paragraph descriptions, as in sec-resolveexport","msgtype":"m.text"},"ts":1617598934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"don't think we want to make them all one line","msgtype":"m.text"},"ts":1617598942000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think probably just keep the `<p>`s, and ecmarkup will know to keep them in their own paragraphs if the `description` DT contains elements without any surrounding text","msgtype":"m.text"},"ts":1617599005000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think i retain multi-paragraphs up to that point, so could make a bunch of <p> elements.","msgtype":"m.text"},"ts":1617599005000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, sounds good","msgtype":"m.text"},"ts":1617599021000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"only in the case that the description is multi-paragraph to start, though","msgtype":"m.text"},"ts":1617599033000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not in the typical case, where the description is inline","msgtype":"m.text"},"ts":1617599041000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1617599044000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pushed multi-paras. ResolveExport was the only one though","msgtype":"m.text"},"ts":1617599854000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think it maybe makes sense to rephrase the preamble of GetWaiterList so that the description comes between the \"The abstract operation GetWaiterList\" part and the \"It performs the following steps when called:\" part","msgtype":"m.text"},"ts":1617600139000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe not though","msgtype":"m.text"},"ts":1617600153000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"possibly that text belongs in its own section, actually","msgtype":"m.text"},"ts":1617600173000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"WaiterLists appear outside that clause, so it would make sense for them to be defined outside that clause","msgtype":"m.text"},"ts":1617600518000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think the WeakRef emptying thing should be made a proper AO.","msgtype":"m.text"},"ts":1617600750000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"getting late here, heading off.","msgtype":"m.text"},"ts":1617600935000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: I just pushed a version that preserves \"returns\" phrasing in descriptions.","msgtype":"m.text"},"ts":1617632577000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Is there any particular reason why `BigInt`s don’t work with `Math.sign`?","msgtype":"m.text"},"ts":1617637467000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: the bigint proposal sadly opted not to update the Math methods to work with bigints. i'd love to help with a proposal to do so.","msgtype":"m.text"},"ts":1617637632000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Ah, that sounds great. If I get around to writing a proposal, I’ll prod you. I ran into this while sorting an array of them.","msgtype":"m.text"},"ts":1617637728000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"I wonder what the history behind that decision was.","msgtype":"m.text"},"ts":1617637769000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: iirc, it was more a desire to keep the proposal minimal","msgtype":"m.text"},"ts":1617637971000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Makes sense.","msgtype":"m.text"},"ts":1617638011000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"> A conversion from a Number or BigInt x to a mathematical value is denoted as \"the mathematical value of x\", or ℝ(x).","msgtype":"m.text"},"ts":1617647177000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"does anyone know if there is a builtin function that would help me accomplish the above?","msgtype":"m.text"},"ts":1617647207000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: there is none, because there's no concept of a mathematical value in observable JS","msgtype":"m.text"},"ts":1617647491000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: what's the use case?","msgtype":"m.text"},"ts":1617647504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, the algorithm for `isIntegralNumber` https://tc39.es/ecma262/#sec-isintegralnumber","msgtype":"m.text"},"ts":1617647602000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, do I need to unwrap boxed primitives using `Number.prototype.valueOf()`?","msgtype":"m.text"},"ts":1617647717000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: yes. https://npmjs.com/unbox-primitive","msgtype":"m.text"},"ts":1617648014000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: also, https://npmjs.com/es-abstract","msgtype":"m.text"},"ts":1617648035000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: that way you don't have to reimplement abstract operations yourself :-p","msgtype":"m.text"},"ts":1617648048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, it seems like you're missing this one","msgtype":"m.text"},"ts":1617648172000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: because it's renamed in ES2021, and es-abstract only has ES2020 so far","msgtype":"m.text"},"ts":1617648194000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wow, this is huge","msgtype":"m.text"},"ts":1617648226000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: you can use https://262.ecma-international.org/11.0/#sec-isinteger, it's the same operation","msgtype":"m.text"},"ts":1617648230000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: it's what all my es-shims ecosystem polyfills use under the hood","msgtype":"m.text"},"ts":1617648254000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: the part that's evaluated is small if you import, eg, `es-abstract/2020/IsInteger`","msgtype":"m.text"},"ts":1617648289000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"interestingly #sec-isinteger makes no mention of making a \"mathematical value\" conversion","msgtype":"m.text"},"ts":1617648418000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"all that stuff was added in ES2021 to improve the precision of the spec","msgtype":"m.text"},"ts":1617648457000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but to observable JS it's identical","msgtype":"m.text"},"ts":1617648463000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"super confusing :p","msgtype":"m.text"},"ts":1617648500000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"i don't think most people are trying to implement the AOs in JS :-p","msgtype":"m.text"},"ts":1617648614000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, it doesn't seem like `unbox-primitive` will work in my situation since at this point in the algorithm, it is still unknown whether the primitive is boxed or not","msgtype":"m.text"},"ts":1617649567000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ljharb, do you have a `maybe-unbox-primitive`? ^^","msgtype":"m.text"},"ts":1617649752000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"function maybeUnboxNumber(value) {","msgtype":"m.text"},"ts":1617650947000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"  return isNumberObject(value) ? numberValueOf(value) : value;","msgtype":"m.text"},"ts":1617650947000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"}","msgtype":"m.text"},"ts":1617650947000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: you could check it with https://www.npmjs.com/package/which-boxed-primitive first, i suppose","msgtype":"m.text"},"ts":1617651376000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: i have an \"is\" predicate for every type already, so you could certainly use https://www.npmjs.com/package/is-number-object as a gate","msgtype":"m.text"},"ts":1617651401000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, my `isNumberObject` looks quite different from yours, but it appears that you have a bug in yours unless i misunderstood what yours in supped to do.. seems like you have may done the `typeof value === 'number'` check prior to doing the `typeof value === 'object'` check, would result in both primitives _and_ boxed primitives passing the check early","msgtype":"m.text"},"ts":1617653234000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: yeah is-number-object is meant to do that, it's a misleading package name","msgtype":"m.text"},"ts":1617654095000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: sadly someone claimed \"is-number\" which just does `isFinite()`","msgtype":"m.text"},"ts":1617654108000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: all my primitive predicates return true if it has the internal slots, whether it's boxed or not","msgtype":"m.text"},"ts":1617654123000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, mine also currently checks the `[[Class]]` internal slot, but what is the purpose of `tryNumberObject`in yours? lol never seen that before","msgtype":"m.text"},"ts":1617654762000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"ohh, you have put that part it in a try/catch block... I see now","msgtype":"m.text"},"ts":1617654847000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"that is a very quite a unique way of going about doing this from what I have seen elsewhere (extremely defensive coding)","msgtype":"m.text"},"ts":1617655955000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: the [[Class]] internal slot doesn't exist in ES6+, and Object.prototype.toString is not reliable in ES6+.","msgtype":"m.text"},"ts":1617656660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i do code my leaf modules particularly defensively, that way i don't have to worry about those being the cause of breakage in any env","msgtype":"m.text"},"ts":1617656692000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"> the [[Class]] internal slot doesn't exist in ES6+, and Object.prototype.toString is not reliable in ES6+.","msgtype":"m.text"},"ts":1617659773000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"sorry, meant to say that i was still using `Object.prototype.toString` (still haven't migrated to anything more reliable yet)","msgtype":"m.text"},"ts":1617659826000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1617659829000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: feel free to use all my predicates in https://npmjs.com/~inspect-js, they're all as reliable as is possible","msgtype":"m.text"},"ts":1617659845000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, looking forward to it, but still haven't figured out the pros/cons btwx using that and the runtime typechecking solution Bakkot mentioned a couple weeks ago (ensure `Map.prototype.has.call(thing)` does not throw)","msgtype":"m.text"},"ts":1617660175000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: if https://npmjs.com/is-map is true, it won't throw","msgtype":"m.text"},"ts":1617660230000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, any idea why `Map.prototype.has.call(thing)` even works at all? Also, are you doing this in `is-map` as well?","msgtype":"m.text"},"ts":1617661142000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: yes, i am doing it in is-map. it works because the function checks the receiver for Map's internal slots. if it has them, it returns true or false, if it doesn't, it throws. so is-map try/catches around that","msgtype":"m.text"},"ts":1617661199000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that sounds much more reliable than what i have been using (only have a vague idea of what internal slots are and wonder if they are immutable)","msgtype":"m.text"},"ts":1617661472000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited.","msgtype":"m.text"},"ts":1617662056000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: the whole point of making those packages is so consumers don't have to think about it :-)","msgtype":"m.text"},"ts":1617663070000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"> The value of the [[DataView]] internal slot is not used within this specification. The simple presence of that internal slot is used within the specification to identify objects created using the DataView constructor.","msgtype":"m.text"},"ts":1617664810000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":" > -- https://tc39.es/ecma262/#sec-properties-of-dataview-instances","msgtype":"m.text"},"ts":1617664826000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: i haven't made an isDataView package, but i could if you need one.","msgtype":"m.text"},"ts":1617664950000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"interesting that some internal slots exist for identification purposes","msgtype":"m.text"},"ts":1617665103000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"}
]