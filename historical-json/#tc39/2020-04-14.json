[
{"content":{"body":"CreateDynamicFunction says stuff like","msgtype":"m.text"},"ts":1586832382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"if kind is generator, let parameterGoal be FormalParameters[+Yield, ~Await]\"","msgtype":"m.text"},"ts":1586832400000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but then later down it says \"throw a syntax error if kind is generator and FormalParameters contains YieldExpression\"","msgtype":"m.text"},"ts":1586832431000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why not just set parameterGoal to [~Yield, ~Await]","msgtype":"m.text"},"ts":1586832445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i wonder if this entire thing could be shortened by cutting out all this manual parsing and just specifying it to evaluate sourceString that is defined way at the bottom","msgtype":"m.text"},"ts":1586832805000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"using [~Yield] would have allowed 'yield' as an identifier, which would be confusing.","msgtype":"m.text"},"ts":1586834135000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1586834200000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok on a separate topic","msgtype":"m.text"},"ts":1586834216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it fair to imagine that UTF16EncodeString and UTF16DecodeString convert between some abstract host string form and js string values","msgtype":"m.text"},"ts":1586834268000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think so.","msgtype":"m.text"},"ts":1586834518000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1586834562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they generally seem to be used when passing strings back and forth between host parsing and js","msgtype":"m.text"},"ts":1586834587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The spec assumes that the host understands ES String values.","msgtype":"m.text"},"ts":1586834592000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well yeah but like","msgtype":"m.text"},"ts":1586834629000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"let x be the result of ! UTF16Decode(string)\"","msgtype":"m.text"},"ts":1586834637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1586834639000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the host has an abstract string form, conversion between that and ES String values is completely hidden from spec-land.","msgtype":"m.text"},"ts":1586834640000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"let x be the result of parsing ! UTF16Decode(string)\"","msgtype":"m.text"},"ts":1586834651000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yup, those ao's are mostly used for converting between *source text* and ES Strings.","msgtype":"m.text"},"ts":1586834711000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: UTF16Encode UTF16DecodeString should be thought of as converting between _Unicode_ strings (more precisely, sequences of codepoints) and ES strings","msgtype":"m.text"},"ts":1586843703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm just trying to figure out if i really need to store source text on functions as an array of code point records","msgtype":"m.text"},"ts":1586843767000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"Unicode strings\" and \"host strings\" are not typically the same, especially given how shoddy unicode support is in most languages","msgtype":"m.text"},"ts":1586843769000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah: no","msgtype":"m.text"},"ts":1586843784000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean i know technically i don't have to","msgtype":"m.text"},"ts":1586843795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but the spec seems to want me to","msgtype":"m.text"},"ts":1586843801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's just because it's a nice formalism, not implementation advice","msgtype":"m.text"},"ts":1586843836000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"here, this is why: https://github.com/tc39/ecma262/pull/1547#issuecomment-581005549","msgtype":"m.text"},"ts":1586843869000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1586843937000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it should still be a string.. Bakkot  : not sure what you mean about host strings, are you talking about non-unicode host encodings?","msgtype":"m.text"},"ts":1586875432000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"srl295: it's a List","msgtype":"m.text"},"ts":1586875488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: even in implementation?","msgtype":"m.text"},"ts":1586875682000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"not in implementation","msgtype":"m.text"},"ts":1586875703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hopefully","msgtype":"m.text"},"ts":1586875707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but in spec","msgtype":"m.text"},"ts":1586875711000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^ OK, thx","msgtype":"m.text"},"ts":1586876415000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"[[SourceText]] is a sequence of code points to match lexical source text, but String values can represent those per https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type . There's an edge case of \"leading surrogate code _point_ followed by trailing surrogate code _point_\" (which would be interpreted as a surrogate pair for a single code unit), but I don't see a way to ever encounter that because it cannot be represented i","msgtype":"m.text"},"ts":1586879916000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"s/surrogate pair for a single code unit/surrogate pair for a single code point/","msgtype":"m.text"},"ts":1586880016000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"it would be kinda cool if `{ ...x, y }` binding created x as a copy of whatever was being matched","msgtype":"m.text"},"ts":1586881481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sort of the reverse of a `{ ...x, y }` expression","msgtype":"m.text"},"ts":1586881522000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ... doesn't it?","msgtype":"m.text"},"ts":1586881789000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1586881792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not valid syntax","msgtype":"m.text"},"ts":1586881795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rest binding element is only valid at the end","msgtype":"m.text"},"ts":1586881807000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, sorry, yes","msgtype":"m.text"},"ts":1586881816000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at some point maybe i'll go check if it was left as future work or explicitly not wanted","msgtype":"m.text"},"ts":1586881849000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there have been proposals that `[ ...x, y] = [1, 2, 3]` give you `x = [1, 2]; y = [3]`","msgtype":"m.text"},"ts":1586881951000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which seems like a different thing than what you're proposing","msgtype":"m.text"},"ts":1586881962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wouldn't want to get into array bindings","msgtype":"m.text"},"ts":1586881997000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"array bindings are tricky because the order of the bindings has to match up with meaningful behaviour about the order of the elements","msgtype":"m.text"},"ts":1586882049000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"don't have to worry about that with object bindings","msgtype":"m.text"},"ts":1586882056000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the spec is missing the definition for the evaluation of AsyncGeneratorDeclaration","msgtype":"m.text"},"ts":1586883167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm its grouped in as HoistableDeclaration","msgtype":"m.text"},"ts":1586883364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: FWIW, https://github.com/tc39/ecma262/issues/1524#issuecomment-613554699 the plan is not particularly detailed and shu suggested it did not include changing all existing occurrences of host in a #whatwg discussion","msgtype":"m.text"},"ts":1586883421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah k, what we'd discussed was changing all prose instances of host to implementation; i don't recall for sure, but we probably also discussed not changing hook names with \"Host\", to avoid churn","msgtype":"m.text"},"ts":1586883545000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: again, not what shu told me in https://freenode.logbot.info/whatwg/20200409#c3606032","msgtype":"m.text"},"ts":1586883693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the context for host->implementation per the last plan was particularly for the phrase \"host-defined\" vs \"implementation-defined\" and \"implementation-dependent\"","msgtype":"m.text"},"ts":1586883768000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not the bare word \"host\" vs \"implementation\"","msgtype":"m.text"},"ts":1586883774000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1586883776000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ty for clarifying","msgtype":"m.text"},"ts":1586883779000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but there was enough unhappiness around that plan that i plan to bring it up again in the editor call anyway","msgtype":"m.text"},"ts":1586883786000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: re https://github.com/tc39/ecma262/issues/1524#issuecomment-613269942: would you also be OK with providing overridable abstract operations only for those things for which we are aware of some host which wants to specify the behavior?","msgtype":"m.text"},"ts":1586883893000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because specifying a bunch of host ops which no one has any interest in using is a fair bit of work for no obvious benefit","msgtype":"m.text"},"ts":1586883925000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: at that point your are making a distinction some people think there is not","msgtype":"m.text"},"ts":1586883933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: and I'd argue you're being inconsistent","msgtype":"m.text"},"ts":1586883940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: if you don't want to acknowledge hosts and live in your vacuum, then don't acknowledge them (while still making things)","msgtype":"m.text"},"ts":1586883965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"work*","msgtype":"m.text"},"ts":1586883968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you want to be pragmatic, embrace all the text that acknowledges hosts","msgtype":"m.text"},"ts":1586884025000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I agree it is mildly inconsistent, but the inconsistency does not particularly bother me. we're defining an API; only putting the things for which there is some consumer into the API is fine.","msgtype":"m.text"},"ts":1586884030000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it bothers me because people keep saying a Host hook is equivalent to NaN stuff","msgtype":"m.text"},"ts":1586884078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: for my understanding, what's the 'host' situation you are referring to?","msgtype":"m.text"},"ts":1586884081000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"srl295 context is mostly in https://github.com/tc39/ecma262/issues/1524","msgtype":"m.text"},"ts":1586884109000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk: I don't understand what you mean by that; say more?","msgtype":"m.text"},"ts":1586884133000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I think if you want to say that implementation and host are the same, you ought to actually remove the distinction and not only offer it to those who can read between the lines","msgtype":"m.text"},"ts":1586884210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: Right, but you referred specifically to Unicode support on the host, which seems to be AWB's footnote 1, is that what you mean?","msgtype":"m.text"},"ts":1586884307000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"srl295 the Unicode conversation was totally unrelated to this conversation","msgtype":"m.text"},"ts":1586884323000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk how is \"change everything to say implementation defined, keep hooks in place for places where they are useful\" not that?","msgtype":"m.text"},"ts":1586884425000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk I guess mostly I fundamentally do not udnerstand what distinction you think there is","msgtype":"m.text"},"ts":1586884438000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: OK. carry on then… ","msgtype":"m.text"},"ts":1586884448000,"senderName":"srl295","senderId":"srl295@irc"},
{"content":{"body":"if the distinction is \"suggest to implementors that there's another place to look for restrictions on something ECMA-262 does not specify\", it seems like that proposal accomplishes it perfectly","msgtype":"m.text"},"ts":1586884471000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if the distinction in your mind is something other than that, then I don't know what it is","msgtype":"m.text"},"ts":1586884488000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"What I'm saying is that implementation-defined with hook = host hook and implementation-defined without hook is implementation-defined, except now you made it more opaque.","msgtype":"m.text"},"ts":1586884627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So at that I'd rather have everything be a hook and let the host^Wimplementation decide who defines what","msgtype":"m.text"},"ts":1586884675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"made it more opaque than... what? that's the current state of the specification.","msgtype":"m.text"},"ts":1586884678000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: the current specification talks about hosts a bunch","msgtype":"m.text"},"ts":1586884693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk in host hooks, yes. outside of host hooks, not really?","msgtype":"m.text"},"ts":1586884807000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not in anything normative, that I can see, except for properties of the global object and \"the host environment's current locale\"","msgtype":"m.text"},"ts":1586884842000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I'm including the non-normative material, that's somewhat relevant for this discussion I think","msgtype":"m.text"},"ts":1586885351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"of the 166 usages of \"host\" in the spec, the only ones which are not describing host hooks, locale, or the global object (or values otherwise made available) are:","msgtype":"m.text"},"ts":1586885452000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1. the [[HostDefined]] slot on realm, script, and module records","msgtype":"m.text"},"ts":1586885456000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"2. the Note about enumerate object properties not requiring a specific algorithm (which should definitely be changed to \"host\")","msgtype":"m.text"},"ts":1586885461000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"3. the `hostDefined` argument to ParseScript (which populates [[HostDefined]], and which is basically a host hook just in the other direction)","msgtype":"m.text"},"ts":1586885468000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"4. the prose in the example of cyclic module record graphs, which is about hosts calling ES abstract methods - again basically a host hook in the other direction","msgtype":"m.text"},"ts":1586885514000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"5. locale","msgtype":"m.text"},"ts":1586885553000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment.\"","msgtype":"m.text"},"ts":1586885570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"6. \"host-defined exceptions that can occur anywhere such as out-of-memory\", which could be changed to \"implementation\"","msgtype":"m.text"},"ts":1586885588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"7. host-synchronizes-with, which is basically a host hook","msgtype":"m.text"},"ts":1586885614000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"8. annex b's \"when the ECMAScript host is a web browser\"","msgtype":"m.text"},"ts":1586885634000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's the list.","msgtype":"m.text"},"ts":1586885635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It's a list for sure :-)","msgtype":"m.text"},"ts":1586885681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk that paragraph is very clearly (to me) about providing the global object or values otherwise made available and integration with host hooks, and nothing else.","msgtype":"m.text"},"ts":1586885684000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I agree that 2 and 6 should change \"host\" to \"implementation\"","msgtype":"m.text"},"ts":1586885714000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but other than that, how does this... not already give you what you want?","msgtype":"m.text"},"ts":1586885752000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with the exception of 2 and 6, we use \"implementation-defined\" only for things which HTML and other hosts do not specify, to my knowledge","msgtype":"m.text"},"ts":1586885784000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so what distinction do you want drawn that is not currently drawn?","msgtype":"m.text"},"ts":1586885796000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"specifically, that is not currently drawn by the dichotomy between things which are specified as host hooks and things which are specified to be implementation-defined?","msgtype":"m.text"},"ts":1586885827000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: it sounds like you might not have followed the issue where there's a bunch of talk about removing all instances of \"host\" as if it's a bad word","msgtype":"m.text"},"ts":1586885861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk I have read and commented on that issue","msgtype":"m.text"},"ts":1586885870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Then I'm not sure what to tell you","msgtype":"m.text"},"ts":1586885877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk _you opened that issue_","msgtype":"m.text"},"ts":1586885883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk I am trying to figure out _what you want_","msgtype":"m.text"},"ts":1586885896000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do not particularly care about AWB's theoretical purity concerns","msgtype":"m.text"},"ts":1586885913000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I want the draft to go further in what it already does","msgtype":"m.text"},"ts":1586885915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in what way?","msgtype":"m.text"},"ts":1586885920000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what change to the list above, or to the usages of \"implementation-defined\", are you looking for?","msgtype":"m.text"},"ts":1586885933000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Distinguishing hosts and implementations, we might well agree 🙂","msgtype":"m.text"},"ts":1586885942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What distinction other than the one already there are you looking for?","msgtype":"m.text"},"ts":1586885961000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Do you just want it to say \"a host is the name for the thing which provides additional ambiently available values and defines the host hooks, an implementation the name for the thing which does everything else\"?","msgtype":"m.text"},"ts":1586886042000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or are you actually looking for some changes to our existing usages of \"implementation\" and \"host\"? and, if so, what changes?","msgtype":"m.text"},"ts":1586886069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I think the second paragraph in https://github.com/tc39/ecma262/issues/1524#issuecomment-600816056 is what would be ideal","msgtype":"m.text"},"ts":1586886143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: provide host hooks and expectations around it and also provide a default host implementation (perhaps that can leave everything implementation-defined, but I'm not sure that would quite work since you have to setup agent clusters, agents, and realms in a certain order for things to make sense)","msgtype":"m.text"},"ts":1586886215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm still not clear on why the \"not html spec\" should be distinguishing between \"things individual html spec implementations can do\" and \"things only the html spec can do\"","msgtype":"m.text"},"ts":1586886216000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the place to understand what all browsers, versus individual browsers, must do is the html spec. what am i missing about what you want to be in 262?","msgtype":"m.text"},"ts":1586886247000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"annevk two things: 1.) now that I've actually read through every usage of \"host\" and \"implementation\" in the spec, I don't actually think the two things are not distinguished","msgtype":"m.text"},"ts":1586886256000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I agree with you on the status quo","msgtype":"m.text"},"ts":1586886286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"specifically, they are distinguished by, we use host hooks + the global object for things HTML is expected to specify, and \"implementation-defined\" for everything else","msgtype":"m.text"},"ts":1586886300000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and 2.) in what way does the \"put links to the HTML spec where things are specified by the HTML spec\" proposal not satisfy that goal?","msgtype":"m.text"},"ts":1586886327000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: well no, e.g. InitializeHostDefinedRealm says implementation-defined a bunch of times which is false","msgtype":"m.text"},"ts":1586886349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: it's also a very bad hook","msgtype":"m.text"},"ts":1586886357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for any reasonable host","msgtype":"m.text"},"ts":1586886361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which ECMA-262 would realize if it tried to define a host pretty quickly","msgtype":"m.text"},"ts":1586886378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do you think `InitializeHostDefinedRealm` should be more constrained?","msgtype":"m.text"},"ts":1586886406000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"annevk I am happy to change \"implementation-defined\" to \"host-defined\" in that abstract operation.","msgtype":"m.text"},"ts":1586886449000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk are there other changes you would like to see?","msgtype":"m.text"},"ts":1586886457000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: possibly, it should probably take parameters of sorts, it's very much unclear how to hold it","msgtype":"m.text"},"ts":1586886468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think a good exercise would be for ECMA-262 editors to define a minimal host with the same rigor as ECMA-262 is defined and see where it breaks down","msgtype":"m.text"},"ts":1586886507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Aside from the obvious fail points such as agents there are others","msgtype":"m.text"},"ts":1586886536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk sure, I am willing to believe there are places things are underspecified or lack arguments. but other than \"fix your bugs\", which, sure, we are doing our best\", I still do not know what actual changes you would like to see as a result of 1524","msgtype":"m.text"},"ts":1586886813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"except I guess changing `InitializeHostDefinedRealm` to use `host-defined` instead of `implementation-defined`?","msgtype":"m.text"},"ts":1586886845000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(or adding explicit host hooks to it instead of saying implementation-defined, or whatever)","msgtype":"m.text"},"ts":1586886871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"annevk: concretely there *are* things we disagree about for what's an implementation's purview vs what's a host's purview","msgtype":"m.text"},"ts":1586887166000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"NaN is (i hope) uncontroversial, but we didn't see reason to preclude exponentiation from constrained by an upstream spec, for instance","msgtype":"m.text"},"ts":1586887187000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah if some upstream spec asks for it I would happily add a host hook which says how exponentiation works more precisely","msgtype":"m.text"},"ts":1586887229000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"PerformEval calls GetThisEnvironment","msgtype":"m.text"},"ts":1586887462000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if it was a direct eval, the running execution context was created by the builtin function [[Call]] method","msgtype":"m.text"},"ts":1586887482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"such an execution context has no LexicalEnvironment","msgtype":"m.text"},"ts":1586887499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then step 2.a fails","msgtype":"m.text"},"ts":1586887527000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"2.a of GetThisEnvironment","msgtype":"m.text"},"ts":1586887535000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that sound right","msgtype":"m.text"},"ts":1586887537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a special case for direct eval in 12.3.6.1, step 6","msgtype":"m.text"},"ts":1586887732000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"don't think it goes through the built-in function [[Call]]","msgtype":"m.text"},"ts":1586887745000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but maybe you still found a bug for indirect eval? not sure without digging deeper right now","msgtype":"m.text"},"ts":1586887790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh maybe i meant indirect","msgtype":"m.text"},"ts":1586887814000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the one where it actually calls %eval%","msgtype":"m.text"},"ts":1586887829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess that's indirect","msgtype":"m.text"},"ts":1586887891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, looks like that should be changed so that it's only performed for direct evals","msgtype":"m.text"},"ts":1586888304000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well it needs to be performed in either case right","msgtype":"m.text"},"ts":1586888351000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1586888359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the GetThisEnvironment call is just there to see if you get to do super calls or whatever","msgtype":"m.text"},"ts":1586888364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which you never get to do for indirect evals","msgtype":"m.text"},"ts":1586888368000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where does it say you can't","msgtype":"m.text"},"ts":1586888379000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, in principle, here","msgtype":"m.text"},"ts":1586888388000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it's bugged","msgtype":"m.text"},"ts":1586888396000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but, like, try it and see","msgtype":"m.text"},"ts":1586888402000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh you mean implementations don't allow it","msgtype":"m.text"},"ts":1586888420000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1586888423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and are not supposed to","msgtype":"m.text"},"ts":1586888426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"got it","msgtype":"m.text"},"ts":1586888429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(but the \"not supposed to\" is meant to be specified in PerformEval, and it's buggy, as you observe)","msgtype":"m.text"},"ts":1586888469000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://gc.gy/54593505.png","msgtype":"m.text"},"ts":1586888507000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is the empty step implicit","msgtype":"m.text"},"ts":1586888534000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"might be editorially clearer to reorder most of those steps","msgtype":"m.text"},"ts":1586888631000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unconditionally initialize in{Function,Method,DerivedConstructor} to false","msgtype":"m.text"},"ts":1586888646000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then subsume the current steps 5 and 6 under \"if direct\"","msgtype":"m.text"},"ts":1586888663000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"seems legit","msgtype":"m.text"},"ts":1586888670000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1949","msgtype":"m.text"},"ts":1586888860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"re: \"is the empty step implicit\": I would say no","msgtype":"m.text"},"ts":1586890559000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Back to devsnek's `{ ...x, y }` syntax","msgtype":"m.text"},"ts":1586891786000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"👀","msgtype":"m.text"},"ts":1586891793000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"We could add that, and it wouldn't be conflicting with the `[ ...x, y ]` syntax","msgtype":"m.text"},"ts":1586891812000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Because `{ y, ...x }` already does what `[ ...x, y ]` is intending to do.","msgtype":"m.text"},"ts":1586891844000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"The patterns are like reverses of each other.","msgtype":"m.text"},"ts":1586891854000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`x` would contain everything except the `y` in both cases","msgtype":"m.text"},"ts":1586891921000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`[ ...x, y ]` would be different than ` { ...x, y }`","msgtype":"m.text"},"ts":1586891952000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But if we tried to make the object rest match the array rest, then `{ ...x, y }` would be equivalent to `{ y, ...x }`","msgtype":"m.text"},"ts":1586892001000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"what syntax do you mean?","msgtype":"m.text"},"ts":1586892677000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: <+devsnek> it would be kinda cool if `{ ...x, y }` binding created x as a copy of whatever was being matched","msgtype":"m.text"},"ts":1586892778000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in pattern matching?","msgtype":"m.text"},"ts":1586892817000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or like in general","msgtype":"m.text"},"ts":1586892820000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1586892822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in bindings","msgtype":"m.text"},"ts":1586892826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"isn't that https://github.com/zkat/proposal-as-patterns ?","msgtype":"m.text"},"ts":1586892835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no it would just be an extension of current binding syntax","msgtype":"m.text"},"ts":1586892846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh is that what that is","msgtype":"m.text"},"ts":1586892856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`{ ...x, y }` tho would be super confusing if it wasn't the same as `{ y, ...x }`","msgtype":"m.text"},"ts":1586892863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1586892865000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1586892868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`{ y, ...x }` and `{ ...x, y }` aren't the same as object literals","msgtype":"m.text"},"ts":1586892898000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"dunno why bindings would have to be","msgtype":"m.text"},"ts":1586892913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's because the latter is an error","msgtype":"m.text"},"ts":1586892986000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if a non-error, i'd expect them to be the same","msgtype":"m.text"},"ts":1586892990000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh in object literals","msgtype":"m.text"},"ts":1586892998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"neither of those are errors in object literals","msgtype":"m.text"},"ts":1586893002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're the same if `x` doesn't have `y` :-p","msgtype":"m.text"},"ts":1586893003000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok but","msgtype":"m.text"},"ts":1586893017000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they aren't the same","msgtype":"m.text"},"ts":1586893019000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the order matters","msgtype":"m.text"},"ts":1586893024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah but that is very rarely a difference which matters","msgtype":"m.text"},"ts":1586893037000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(and is also obviously the difference, from the syntax)","msgtype":"m.text"},"ts":1586893050000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and conceptually they're doing the same kinds of things","msgtype":"m.text"},"ts":1586893050000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which properties there are matters a lot more","msgtype":"m.text"},"ts":1586893053000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"its the same with bindings","msgtype":"m.text"},"ts":1586893084000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`{ y, ...x }` obj without y `{ ...x, y }` obj with y","msgtype":"m.text"},"ts":1586893111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think that is obvious","msgtype":"m.text"},"ts":1586893215000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not obvious to me at all","msgtype":"m.text"},"ts":1586893227000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also it would be really confusing if we had the `let [...x, y]` syntax mean the thing people have asked for it to mean","msgtype":"m.text"},"ts":1586893233000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't see how its any more or less obvious than the object literal","msgtype":"m.text"},"ts":1586893241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because in the curly braces, the three dots syntax with x either means \"grab everything into x except the other things mentioned\" or \"pull everything from x into this new object\". having it mean \"grab everything, even the other things mentioned\" would be wildly confusing to me","msgtype":"m.text"},"ts":1586893338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like `const { …x } = obj; const { y } = obj` seems *way* clearer to me than your suggestion","msgtype":"m.text"},"ts":1586893359000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why is it confusing for bindings to be unordered but for literals to be ordered","msgtype":"m.text"},"ts":1586893401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1586893406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is it confusing for bindings to be ordered when it isn't for literals","msgtype":"m.text"},"ts":1586893418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in bindings, it's pulling things out of the object. in literals, it's smooshing things into it","msgtype":"m.text"},"ts":1586893436000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1586893449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when pulling things out, it's confusing for \"y\" to be pulled twice if it's only mentioned once","msgtype":"m.text"},"ts":1586893456000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow, object destructuring currently only pulls each value once ever, or zero times","msgtype":"m.text"},"ts":1586893479000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"when smooshing things in its confusing for y to be smooshed in twice if its only mentioned once?","msgtype":"m.text"},"ts":1586893481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(unless you repeat it, actually, now that i think of it)","msgtype":"m.text"},"ts":1586893496000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean, `y` itself would only go in once","msgtype":"m.text"},"ts":1586893509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a spreaded object's `y` would also go in, sure","msgtype":"m.text"},"ts":1586893516000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"expression goes from 2y to 1y","msgtype":"m.text"},"ts":1586893525000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"binding goes from 1y to 2y","msgtype":"m.text"},"ts":1586893529000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a symmetry","msgtype":"m.text"},"ts":1586893531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure i get what you mean","msgtype":"m.text"},"ts":1586893564000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`const obj = { …x, y }` only has one `y` on `obj`","msgtype":"m.text"},"ts":1586893582000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`const { y, …x } = obj` only has one `y` binding","msgtype":"m.text"},"ts":1586893598000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`({ ...x, y } = { ...x, y })`","msgtype":"m.text"},"ts":1586893622000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i do see how in the former example, `x.y` and `y` might both exist but would still get smooshed into one `y`","msgtype":"m.text"},"ts":1586893622000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this symmetry","msgtype":"m.text"},"ts":1586893624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right but that wouldn't be symmetrical","msgtype":"m.text"},"ts":1586893636000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because the original `x.y` value would be lost","msgtype":"m.text"},"ts":1586893646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the shape","msgtype":"m.text"},"ts":1586893659000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the identity of the values","msgtype":"m.text"},"ts":1586893666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`x` would have the same shape as the RHS, sure","msgtype":"m.text"},"ts":1586893676000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the point of destructuring is to take apart the shape","msgtype":"m.text"},"ts":1586893688000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to de structure it","msgtype":"m.text"},"ts":1586893691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sort of?","msgtype":"m.text"},"ts":1586893708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people use it for cloning too","msgtype":"m.text"},"ts":1586893720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure but that's not the point of the feature","msgtype":"m.text"},"ts":1586893759000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"people use JSON for cloning, doesn't mean \"cloning\" is relevant to json","msgtype":"m.text"},"ts":1586893768000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean people use it to perform the operation it performs","msgtype":"m.text"},"ts":1586893781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how that operation was meant to be used is kind of irrelevant","msgtype":"m.text"},"ts":1586893800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't agree with that","msgtype":"m.text"},"ts":1586893811000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: `[...x, y] = [...a, b]` is not syntax which currently exists, bu to me it has one obvious meaning: `x` gets `a`, `y` gets `b`.","msgtype":"m.text"},"ts":1586893813000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"^ me too","msgtype":"m.text"},"ts":1586893819000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: the same intuition tells me that `{...x, y} = {...a, b}` has the meaning `x` gets `a`, `y` gets `b`.","msgtype":"m.text"},"ts":1586893842000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right array literals have an coupling between the order of elements and the order of bindings","msgtype":"m.text"},"ts":1586893860000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you mean `{...x, b}`?","msgtype":"m.text"},"ts":1586893888000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, sorry, yes","msgtype":"m.text"},"ts":1586893912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should've named the properties instead of using shorthand","msgtype":"m.text"},"ts":1586893918000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`{...x, p: y} = {...a, p: b}` has the meaning `x` gets `a`, `y` gets `b`","msgtype":"m.text"},"ts":1586893936000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe its better if we leave it as a syntax error","msgtype":"m.text"},"ts":1586893982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because i don't agree with that","msgtype":"m.text"},"ts":1586893986000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the way I would put it is, `...` on the LHS means to me \"every other thing\", not \"every other thing to the left of `...`\", even though these are currently equivalent","msgtype":"m.text"},"ts":1586894161000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1586894605000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jridgewell: why are the logical assignment operators in their own LogicalAssignmentOperator production","msgtype":"m.text"},"ts":1586903885000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just for proposal readability","msgtype":"m.text"},"ts":1586904146000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(see the note at the very top)","msgtype":"m.text"},"ts":1586904164000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh you mean operator","msgtype":"m.text"},"ts":1586904188000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1586904214000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess for the same reason","msgtype":"m.text"},"ts":1586904217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we mentioned needing to rename that to ShortCircuitOperator prior to merge but I thought that part was needed to avoid some AssignmentOperator implications","msgtype":"m.text"},"ts":1586904253000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lemme check","msgtype":"m.text"},"ts":1586904255000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*ShortCircuitAssignmentOperator, I mean","msgtype":"m.text"},"ts":1586904282000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er yeah that's exactly it","msgtype":"m.text"},"ts":1586904322000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's only one RS for AssignmentExpression:LeftHandSideExpressionAssignmentOperatorAssignmentExpression","msgtype":"m.text"},"ts":1586904338000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"grr AssignmentExpression : LeftHandSideExpression AssignmentOperator AssignmentExpression even","msgtype":"m.text"},"ts":1586904353000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"altho jridgewell, with the newest ecmarkup/grammarkdown, you might no longer need to mention it as a separate productiopn","msgtype":"m.text"},"ts":1586904355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, the inline `<ins>` might Just Work","msgtype":"m.text"},"ts":1586904366000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but each short circuit assignment op has its own RS case","msgtype":"m.text"},"ts":1586904376000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so its going to be its own production","msgtype":"m.text"},"ts":1586904423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not an AssignmentExpression","msgtype":"m.text"},"ts":1586904430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean it has to not be an AssignmentExpression at the very least","msgtype":"m.text"},"ts":1586904466000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1586904480000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"dammit","msgtype":"m.text"},"ts":1586904481000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"AssignmentOperator","msgtype":"m.text"},"ts":1586904485000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why","msgtype":"m.text"},"ts":1586904495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it *is* an AssignmentExpression","msgtype":"m.text"},"ts":1586904500000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"can we rename NameSpaceImport to NamespaceImport","msgtype":"m.text"},"ts":1586906324000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes please","msgtype":"m.text"},"ts":1586906348000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol that is a really irritating capitalization","msgtype":"m.text"},"ts":1586906354000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"import { mars } from space;","msgtype":"m.text"},"ts":1586906370000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"welcome to the Name Space","msgtype":"m.text"},"ts":1586906370000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":":notlikethis:","msgtype":"m.text"},"ts":1586906454000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it'd make sense in the sentence \"`foo = 0` and `fox = {...}` are close in name space but not in value space\"","msgtype":"m.text"},"ts":1586906557000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not as annoying as NamespaceImPort","msgtype":"m.text"},"ts":1586908103000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ow","msgtype":"m.text"},"ts":1586908143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it hurts","msgtype":"m.text"},"ts":1586908164000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's a good port","msgtype":"m.text"},"ts":1586908265000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I mean if it's German then I'm okay with it","msgtype":"m.text"},"ts":1586908444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Namespace in dem Port","msgtype":"m.text"},"ts":1586908449000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]