[
{"content":{"body":"is the order taken as meaningful in text like this?","msgtype":"m.text"},"ts":1552109579000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-primary-expression-regular-expression-literals-static-semantics-early-errors","msgtype":"m.text"},"ts":1552109580000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(i.e. do we consider *which* early error gets prioritized in `/+/gg` to be specified?)","msgtype":"m.text"},"ts":1552109580000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I'm assuming not, because V8 and SM both complain about the flags first, and the reason I'm even asking is because I'm playing the video game called \"JSC early error whac-a-mole\"","msgtype":"m.text"},"ts":1552109747000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(it's easily as fun as a Zachtronics title ðŸ˜‚)","msgtype":"m.text"},"ts":1552109789000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling, I would say no, since it does not define semantics differentiating between those two early errors","msgtype":"m.text"},"ts":1552111167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: hmm. I'd ask for a counterexample but then I kind of doubt one exists?","msgtype":"m.text"},"ts":1552111222000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"since I suppose one might view it as needlessly specific","msgtype":"m.text"},"ts":1552111264000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there is a bit of an edge case related to this:  `0++` is, for some reason, an early Reference Error rather than a Syntax Error, so I am not sure what `try { eval('0++; /r/gg;'); } catch (e) { console.log(e.name); }` should print","msgtype":"m.text"},"ts":1552111309000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1552111346000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's like a static race condition lol","msgtype":"m.text"},"ts":1552111368000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in trying to determine if this is specified I have not yet been able to find an answer, but I did learn that `eval` acts as identity for anything which is not of Type string","msgtype":"m.text"},"ts":1552111520000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e. `x = {}; eval(x) === x` is true","msgtype":"m.text"},"ts":1552111534000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"huh. fair enough.","msgtype":"m.text"},"ts":1552111660000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"anyone have any suggestions for how to most cleanly handle this? https://github.com/tc39/ecma262/pull/702#discussion_r263966562","msgtype":"m.text"},"ts":1552114736000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: ParseScript() and ParseModule() both say: \"If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.\"","msgtype":"m.text"},"ts":1552134349000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Which I think answers your question","msgtype":"m.text"},"ts":1552134704000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i don't think any implementations report more than one error","msgtype":"m.text"},"ts":1552146768000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is interesting though https://gc.gy/19851876.png","msgtype":"m.text"},"ts":1552146835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: I wonder if the semantics for PerformEval and/or CreateDynamicFunction should be updated with similar wording - currently they just say \"if any early errors are detected, throw a SyntaxError or a ReferenceError exception, depending on the type of the exception\", which is a little ambiguous because it refers to \"the\" exception but there can be more than one.","msgtype":"m.text"},"ts":1552152401000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yup. And it might be nice to factor out the commonalities, but I think that might be tough.","msgtype":"m.text"},"ts":1552155602000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: cool, thanks!","msgtype":"m.text"},"ts":1552160817000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: also note that the JSC/Ch ReferenceErrors are late ones","msgtype":"m.text"},"ts":1552160839000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: as in they don't throw on invalid regex?","msgtype":"m.text"},"ts":1552164783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the right type of error is thrown for `0++` and for `/r/gg` but they're thrown at runtime","msgtype":"m.text"},"ts":1552164899000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I just put up a fix for early invalid flags: https://bugs.webkit.org/show_bug.cgi?id=195514","msgtype":"m.text"},"ts":1552164902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"introducing the notion of early ReferenceError at all is still a todo item","msgtype":"m.text"},"ts":1552164932000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's weird","msgtype":"m.text"},"ts":1552164958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah the \"late SyntaxError\" there is surprising","msgtype":"m.text"},"ts":1552165064000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but my understanding is that \"early ReferenceError\" is a comparatively new concept","msgtype":"m.text"},"ts":1552165096000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"'twill be fun to address, I expect","msgtype":"m.text"},"ts":1552165124000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh whoa but SM's SyntaxError there is actually for `0++`","msgtype":"m.text"},"ts":1552165374000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so that too is a bug","msgtype":"m.text"},"ts":1552165394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: looks like chakra is an early ReferenceError","msgtype":"m.text"},"ts":1552171502000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: hmm...so it is. I thought they didn't have that notion either though ðŸ¤” guess either I was mistaken or it changed recently","msgtype":"m.text"},"ts":1552171606000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"0++ is all over the place though https://gc.gy/19876609.png","msgtype":"m.text"},"ts":1552171635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"engine262 uses acorn which considers all early errors syntax errors :(","msgtype":"m.text"},"ts":1552171652000,"senderName":"devsnek","senderId":"devsnek@irc"}
]