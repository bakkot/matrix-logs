[
{"content":{"body":"the checks that proxies make on their traps make it difficult to accurately mock spec exotic objects","msgtype":"m.text"},"ts":1582258475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example module namespaces pretend to have properties that don't exist in their underlying ordinary object properties","msgtype":"m.text"},"ts":1582258532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: re new names for integer / array index: to my eye Uint53 and Uint32 actively imply the absence of the -2 / -1 distinction which is therefore a strike against them as opposed to other names","msgtype":"m.text"},"ts":1582258570000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: is there a reason you care about their underlying ordinary object properties? that is, is there a reason you wouldn't just proxy an object with all the properties of the module namespace?","msgtype":"m.text"},"ts":1582258841000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I am legitimately asking; I don't have all of the proxy invariants and module namespace object details paged in)","msgtype":"m.text"},"ts":1582258864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so like","msgtype":"m.text"},"ts":1582258900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"GetOwnProperty basically says \"look up the property from the module\"","msgtype":"m.text"},"ts":1582258918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but proxies don't let you return properties that don't exist on the target","msgtype":"m.text"},"ts":1582258930000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so now you have to like","msgtype":"m.text"},"ts":1582258933000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mirror the properties","msgtype":"m.text"},"ts":1582258937000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its not impossible to solve","msgtype":"m.text"},"ts":1582258946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just not very obvious","msgtype":"m.text"},"ts":1582258950000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1582258967000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think the problem is that proxies try to verify the essential invariants against the target, even though you're trying to project the invariants through the modified traps","msgtype":"m.text"},"ts":1582259048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's actually a kind of neat solution","msgtype":"m.text"},"ts":1582259102000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to the problem of, not wanting to let people do incoherent things, but you don't have a type syste","msgtype":"m.text"},"ts":1582259117000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"m","msgtype":"m.text"},"ts":1582259118000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah its not terrible","msgtype":"m.text"},"ts":1582259135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just makes things slightly more complex","msgtype":"m.text"},"ts":1582259140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1582259142000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the solution being, in leiu of a type-system level proof, you just have to exhibit target object as an existence proof that you are not doing anything which you could not otherwise do, w.r.t the invariants","msgtype":"m.text"},"ts":1582259164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"instead of storing a list of exports i'm now using the object that represents the module's exported bindings as the target","msgtype":"m.text"},"ts":1582259190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what do you mean, don't let you return properties that don't exist on the target?","msgtype":"m.text"},"ts":1582259340000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh meaning you can't claim it's missing and then later claim it's there","msgtype":"m.text"},"ts":1582259360000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: module namespace objects are not extensible","msgtype":"m.text"},"ts":1582259372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1582259387000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: rather, the exotic behaviour claims properties exist that do not actually exit","msgtype":"m.text"},"ts":1582259396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, they exist in terms of the exotic methods","msgtype":"m.text"},"ts":1582259412000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but not in terms of the underlying ordinary properties","msgtype":"m.text"},"ts":1582259420000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is how proxies try to verify it","msgtype":"m.text"},"ts":1582259423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: hm, I would not regard the target as being \"the underlying ordinary properties\"","msgtype":"m.text"},"ts":1582259449000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the target of a proxy is a different object than the proxy","msgtype":"m.text"},"ts":1582259464000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's just kind of hanging out","msgtype":"m.text"},"ts":1582259470000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah ik","msgtype":"m.text"},"ts":1582259471000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"being a witness","msgtype":"m.text"},"ts":1582259471000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there no reference to the proxy object in a proxy trap","msgtype":"m.text"},"ts":1582259723000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the object itself? I don't believe so, no","msgtype":"m.text"},"ts":1582259834000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess doing `this.get()` instead works","msgtype":"m.text"},"ts":1582259843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"IIRC you get a reference to the handler object","msgtype":"m.text"},"ts":1582259846000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"seems to work now, bad formatting aside https://gc.gy/49965493.png","msgtype":"m.text"},"ts":1582260552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: so then how about 'Uint53-string' and (say) 'Uint32m-string', where the 'm' reminds you of the one value 'missing' from the Uint32 range.","msgtype":"m.text"},"ts":1582262001000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that's pretty obtuse i think","msgtype":"m.text"},"ts":1582262188000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's less obtuse than the status quo, i'd say.","msgtype":"m.text"},"ts":1582262223000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"personally i want the names to reflect what they're for, not what they are","msgtype":"m.text"},"ts":1582262372000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(a very weak \"want\")","msgtype":"m.text"},"ts":1582262384000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"too weak to put it in the PR discussion?","msgtype":"m.text"},"ts":1582262414000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so far yes","msgtype":"m.text"},"ts":1582262422000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i cannot abide by uint32m-string","msgtype":"m.text"},"ts":1582262427000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1582262428000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but i did offer a suggestion","msgtype":"m.text"},"ts":1582262429000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"one that wasn't responded to :-p","msgtype":"m.text"},"ts":1582262435000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: note that I'm not thrilled with uint32m-string either, I'm just trying to address feedback.","msgtype":"m.text"},"ts":1582262521000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"one suggestion i raised that Bakkot and mficarra didn't like was typeset the range directly","msgtype":"m.text"},"ts":1582262527000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jmdyck: indeed, sorry if i came off strong","msgtype":"m.text"},"ts":1582262541000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why not just say \"integer index\" and \"array index\"","msgtype":"m.text"},"ts":1582262551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i still wanna try typesetting the range directly and see how it looks","msgtype":"m.text"},"ts":1582262555000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(I'm entering this conversation without context btw)","msgtype":"m.text"},"ts":1582262564000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: see PR for reasons","msgtype":"m.text"},"ts":1582262582000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"like {index key}_{0}^{2^32-2}","msgtype":"m.text"},"ts":1582262589000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which one","msgtype":"m.text"},"ts":1582262594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1623","msgtype":"m.text"},"ts":1582262612000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah I got it","msgtype":"m.text"},"ts":1582262637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"string vs int","msgtype":"m.text"},"ts":1582262641000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also that it is pretty opaque that \"array\" means up to 2^32-2","msgtype":"m.text"},"ts":1582262671000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I don't understand your suggestion","msgtype":"m.text"},"ts":1582262678000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and \"integer\" means 2^53-1","msgtype":"m.text"},"ts":1582262683000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why not redefine those two things as ints and then refer to the string ones explicitly as \"xyz index string\"","msgtype":"m.text"},"ts":1582262698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that was ljharb's sugg in the pr discussion","msgtype":"m.text"},"ts":1582262731000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sort of","msgtype":"m.text"},"ts":1582262744000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: bakkot's objection to uint32 and uint53 are that they are actively misleading","msgtype":"m.text"},"ts":1582262756000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmm github app might be hiding stuff","msgtype":"m.text"},"ts":1582262771000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because the top end of the range isn't uint32 max or uint53 max, but uint32 - 2 and uint53 - 1, respectively","msgtype":"m.text"},"ts":1582262775000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"(unit53 -1 *is* unit53 max)","msgtype":"m.text"},"ts":1582262799000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this is a url: data:text/html,indexKey<sub>0</sub><sup style='margin-left:-.5em'>2<sup>53</sup>-1</sup>","msgtype":"m.text"},"ts":1582262831000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is what shu was suggesting","msgtype":"m.text"},"ts":1582262838000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(or rather, 2^53 - 1 is what you would naturally expect uint53 max to be)","msgtype":"m.text"},"ts":1582262844000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes that's what i'm proposing","msgtype":"m.text"},"ts":1582262854000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jmdyck: true enough, yes","msgtype":"m.text"},"ts":1582262864000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jmdyck: rather, the confusion is that uint32 won't mean the same thing as uint53 for the range, to which your suggestion was adding 'm', and the alternative of mine is to just show the range directly","msgtype":"m.text"},"ts":1582263038000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"though now that i look at Bakkot's data url","msgtype":"m.text"},"ts":1582263139000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"idk that ain't so good","msgtype":"m.text"},"ts":1582263146000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so your suggestion was to use (the html for) \"{index key}_{0}^{2^32-2}\" everywhere my PR says \"Uint32-string\"?","msgtype":"m.text"},"ts":1582263192000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"correct, and 2^53-1 for uint53","msgtype":"m.text"},"ts":1582263214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"to get across that 1) it's property key used as an index and 2) what the actual value range is","msgtype":"m.text"},"ts":1582263250000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hm, well it puts the significant part (\"53\" or \"32\") in a superscript of a superscript.","msgtype":"m.text"},"ts":1582263298000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1582263322000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i don't love my own suggestion fwiw","msgtype":"m.text"},"ts":1582263328000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: it looks a little better with smaller sub/superscripts: data:text/html,indexKey<sub style='font-size: 10px'>0</sub><sup style='margin-left:-.5em;font-size: 10px'>2<sup>53</sup>-1</sup>","msgtype":"m.text"},"ts":1582263359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yeah it is not... great","msgtype":"m.text"},"ts":1582263363000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and that was Bakkot's exact objection","msgtype":"m.text"},"ts":1582263366000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and why not name them with \"array\" and \"string\" rather than with the exact number range?","msgtype":"m.text"},"ts":1582263573000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so \"array index string\" and \"string index string\"?","msgtype":"m.text"},"ts":1582263846000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(modulo capitalization and hyphenation)","msgtype":"m.text"},"ts":1582263862000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or maybe \"array index key\" and \"string index key\"","msgtype":"m.text"},"ts":1582263977000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sure, it's just more meaningful to me if it's described as being for an array, or for a string","msgtype":"m.text"},"ts":1582264219000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the array one is also the output of ToLength, so maybe something like that","msgtype":"m.text"},"ts":1582264245000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Note that there's also a -1 vs -2 distinction hidden in \"array\" vs \"string\": Roughly speaking, the max \"array index\" is the maximum index of an array element, but the max \"string index\" is *one more than* the maximum index of a string element.","msgtype":"m.text"},"ts":1582264437000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(which makes me wonder if there are lurking bugs for a string that is the max length)","msgtype":"m.text"},"ts":1582264700000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"my impression is that those \"lurking bugs\" don't exist, and the maximum \"integer index\" could be one lower than it is, without normative impact.","msgtype":"m.text"},"ts":1582266916000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"why is OrdinarySetWithOwnDescriptor a separate section","msgtype":"m.text"},"ts":1582316347000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: per git blame: https://github.com/tc39/ecma262/pull/992","msgtype":"m.text"},"ts":1582319583000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah called from another spec","msgtype":"m.text"},"ts":1582322186000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1582322187000,"senderName":"devsnek","senderId":"devsnek@irc"}
]