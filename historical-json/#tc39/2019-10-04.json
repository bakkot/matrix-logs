[
{"content":{"body":"So was there a decision on merging Annex B into the main body?","msgtype":"m.text"},"ts":1570148239000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jorendorff: at the moment i think we're LALR(2) because of the `let [` lookahead","msgtype":"m.text"},"ts":1570150741000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i wouldn't be surprised if there's a 3-token lookahead somewhere though","msgtype":"m.text"},"ts":1570150761000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: believe it or not, that's not the same kind of lookahead as the lookahead in \"LALR\"","msgtype":"m.text"},"ts":1570150777000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1570150819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's weird","msgtype":"m.text"},"ts":1570150823000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"*wikipedias*","msgtype":"m.text"},"ts":1570150834000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i am honestly at a loss to explain LALR and LR in a few words","msgtype":"m.text"},"ts":1570150841000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but the kind of lookahead you're talking about is good old common-sense lookahead, and LR and LALR use a ... definitely different notion of lookahead to build their parser tables","msgtype":"m.text"},"ts":1570150877000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"not runtime lookahead at all!","msgtype":"m.text"},"ts":1570150883000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1570150945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wrote email to Waldemar ... because I think this example means ES isn't LR(1) anymore, and I think it was before --- even with the `let [` thing","msgtype":"m.text"},"ts":1570150972000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"just combining states","msgtype":"m.text"},"ts":1570151002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess this technically makes it less usable than a traditional LR","msgtype":"m.text"},"ts":1570151024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(Personally, I don't think it makes sense to talk about the ES grammar being LR(k) or LALR(k) for some k, because it's not even a CFG to begin with.)","msgtype":"m.text"},"ts":1570151305000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: it certainly is not a CFG","msgtype":"m.text"},"ts":1570152902000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in the formal sense","msgtype":"m.text"},"ts":1570152909000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I think it still makes sense to talk about it being LR(k)","msgtype":"m.text"},"ts":1570152953000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"LR(k) isn't defined for non-CFG","msgtype":"m.text"},"ts":1570152977000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think many non-formal statements are valuable","msgtype":"m.text"},"ts":1570153033000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"for example, it was hot today","msgtype":"m.text"},"ts":1570153041000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sure,","msgtype":"m.text"},"ts":1570153067000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"how could a statement about LR-ness be valuable for the ES grammar, well","msgtype":"m.text"},"ts":1570153068000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"suppose someone was trying to make a shift-reduce parser for ES","msgtype":"m.text"},"ts":1570153079000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's useful to say, here are the things you're going to have to hack","msgtype":"m.text"},"ts":1570153137000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ASI for sure","msgtype":"m.text"},"ts":1570153141000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"div-vs-regexp and the like","msgtype":"m.text"},"ts":1570153161000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"non-formal statements are valuable, but saying that a grammar is LR(k) isn't a non-formal statement. Or, it's misleading if you intend it in a non-formal sense.","msgtype":"m.text"},"ts":1570153175000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think saying that any real-world programming language is LR(k) ends up being an informal statement at some point. some languages more informal than others","msgtype":"m.text"},"ts":1570153224000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in practice, that's probably true. I don't approve. :(","msgtype":"m.text"},"ts":1570153310000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, here's the other thing","msgtype":"m.text"},"ts":1570153323000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(unless you then go on to detail the ways in which you're being informal)","msgtype":"m.text"},"ts":1570153339000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think LR is a thin veneer of formality over an algorithm","msgtype":"m.text"},"ts":1570153348000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"No, the algorithm itself *is* formal.","msgtype":"m.text"},"ts":1570153398000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the only property of LR grammars that matters to anyone is that they can be parsed by LR parsers","msgtype":"m.text"},"ts":1570153400000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"contrast regular languages -- there's actually some math there","msgtype":"m.text"},"ts":1570153419000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I agree the algorithm itself is formal","msgtype":"m.text"},"ts":1570153428000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in the sense that contrasts with \"informal\"","msgtype":"m.text"},"ts":1570153460000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but not in the sense that has to do with forms of things, either the language or the grammar","msgtype":"m.text"},"ts":1570153493000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"anyway, think of it this way, i was just eliding all the ways in which i'm being informal, relying on the reader to infer it (waves hands carelessly)","msgtype":"m.text"},"ts":1570153534000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"which, if the reader is Waldemar, is easily done","msgtype":"m.text"},"ts":1570153541000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, that's okay.","msgtype":"m.text"},"ts":1570153754000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But if people are talking about \"LR(1)\", and they *necessarily* are using the term informally, but they don't bother to agree on the informal meaning, that can lead to problems.","msgtype":"m.text"},"ts":1570154135000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re your examples, after the lexical parser returns the IdentifierName 'async', the parser doesn't (initially) know whether to treat it as an Identifier (in a LeftHandSideExpression) or a keyword (in an AsyncArrowFunction)","msgtype":"m.text"},"ts":1570154948000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and the next token ('of') doesn't resolve the conflict","msgtype":"m.text"},"ts":1570154973000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but the one after ('[' or '=>') does.","msgtype":"m.text"},"ts":1570155116000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I don't think I understand what you're getting at","msgtype":"m.text"},"ts":1570155329000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I'm just going over the problem, restating your point maybe.","msgtype":"m.text"},"ts":1570155356000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"rright, the handling of IdentifierNames in the spec is one of the weird parts","msgtype":"m.text"},"ts":1570155383000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(the whole interface between syntactic and lexical is weird)","msgtype":"m.text"},"ts":1570155413000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the two grammars don't fit together the way I thought they did","msgtype":"m.text"},"ts":1570155415000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yes, exactly that","msgtype":"m.text"},"ts":1570155421000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I knew about the weirdness around regexp, but even without that there's other weirdness","msgtype":"m.text"},"ts":1570155440000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"thinks","msgtype":"m.emote"},"ts":1570155493000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, I think that weirdness doesn't really come into play in my problem though","msgtype":"m.text"},"ts":1570155554000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I mean, ... it's there, but it isn't essential","msgtype":"m.text"},"ts":1570155565000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if we somehow specified the language with a very clean interface between the two grammars, and a production \"Identifier : `async`\"","msgtype":"m.text"},"ts":1570155602000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and another production \"Identifier : `of`\"","msgtype":"m.text"},"ts":1570155613000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"then we would still have this issue","msgtype":"m.text"},"ts":1570155616000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"if the issue is that one token of lookahead doesn't suffice, then yeah.","msgtype":"m.text"},"ts":1570155678000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think shift-reduce parsers inherently work one token at a time","msgtype":"m.text"},"ts":1570155696000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"In LR(k) parsers, the k is a static kind of lookahead (relevant at parser table generation time), not a run-time lookahead","msgtype":"m.text"},"ts":1570155747000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"no, the lookahead is relevant at parse-time too.","msgtype":"m.text"},"ts":1570155813000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Can you explain that?","msgtype":"m.text"},"ts":1570155914000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"an LR parsing table gives you an action based on (a) your current state and (b) the current k symbols of lookahead","msgtype":"m.text"},"ts":1570155947000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"That doesn't make sense to me because LR(0) is a thing","msgtype":"m.text"},"ts":1570155987000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"LR(0) means the parser always knows what to do without looking at any lookahead symbols.","msgtype":"m.text"},"ts":1570156051000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"That would mean the parser always knows what to do without looking at the input.","msgtype":"m.text"},"ts":1570156074000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I mean, LR(0) tables and LR(1) tables are both keyed on (state, next input symbol) so to me it looks like they both operate 1 symbol at a time","msgtype":"m.text"},"ts":1570156194000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"👀","msgtype":"m.text"},"ts":1570156215000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, i've found multiple sources supporting your statement about what LR(2) means","msgtype":"m.text"},"ts":1570156436000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I think the 'action' depends on k symbols of lookahead, but the 'goto' always depends on 1 symbol, which isn't a lookahead, it's the symbol on the top of the stack","msgtype":"m.text"},"ts":1570156507000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it's a nonterminal symbol, too","msgtype":"m.text"},"ts":1570156516000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1570156530000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"only one production ever gets reduced at a time, so that makes sense for the goto table","msgtype":"m.text"},"ts":1570156537000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I guess LR(0) is not \"LR(k) for k = 0\" but ... something special","msgtype":"m.text"},"ts":1570156573000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"no, i think it is LR(k) for k=0","msgtype":"m.text"},"ts":1570156598000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"only the current symbol","msgtype":"m.text"},"ts":1570156628000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing ahead","msgtype":"m.text"},"ts":1570156631000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"e.g., i think a basic lisp syntax would be LR(0):","msgtype":"m.text"},"ts":1570156791000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, then i'm very confused, because parser tables for LR(0) and LR(1) look the same. They both have an action table where each column is labeled with one terminal symbol","msgtype":"m.text"},"ts":1570156839000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"you can shift the next symbol without knowing what it is, until you're in a state resulting from shifting a ')', in which case you reduce regardless of the next symbol.","msgtype":"m.text"},"ts":1570156847000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm. sounds wrong for LR(0).","msgtype":"m.text"},"ts":1570156886000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"link to example?","msgtype":"m.text"},"ts":1570156892000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"man its crazy how much simpler writing an actual parser is than figuring out what LALR(2) means","msgtype":"m.text"},"ts":1570156964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: oh, sure","msgtype":"m.text"},"ts":1570156977000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jmdyck: random CS lecture, the first one i found https://www.cs.colostate.edu/~cs453/yr2014/Slides/12-LR0-SLR.ppt.pdf","msgtype":"m.text"},"ts":1570157038000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what you said about lisp is very appealing","msgtype":"m.text"},"ts":1570157114000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"this looks like actual gibberish","msgtype":"m.text"},"ts":1570157155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like the output of failed encoding","msgtype":"m.text"},"ts":1570157167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: but I still don't think you can build me a parser table without the `)` token being in a different column from the others","msgtype":"m.text"},"ts":1570157234000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1570157262000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: another example LR(1) definitely handles one token of input at a time,","msgtype":"m.text"},"ts":1570157293000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1570157295000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"another example, https://en.wikipedia.org/wiki/LR_parser#Action_and_goto_tables","msgtype":"m.text"},"ts":1570157306000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"certainly, the \"unit of shifting\" is 1 token, regardless of k","msgtype":"m.text"},"ts":1570157340000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1570157427000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"another example, https://www.cs.bgu.ac.il/~comp151/wiki.files/ps6.html","msgtype":"m.text"},"ts":1570157433000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"LR(0) definitely has a parser table that dispatches on one token at a time—the next token. SLR, LR(1), and LALR(1), definitely the same.","msgtype":"m.text"},"ts":1570157559000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ok, it's easy to find stuff on the internet that says something else, but i still don't see how that makes any sense","msgtype":"m.text"},"ts":1570157785000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I retract what I said earlier about LR(1) having a formal definition","msgtype":"m.text"},"ts":1570157796000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"them's fighting words","msgtype":"m.text"},"ts":1570157809000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"actually LR(1) might be the only one with a formal definition","msgtype":"m.text"},"ts":1570157895000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"nobody agrees about the others","msgtype":"m.text"},"ts":1570157900000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"you have to just give up and write real parsers","msgtype":"m.text"},"ts":1570157917000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"In the LR(0) tables, I think you'll always see that, for any given state, the action (reduce by some production or shift) is the same regardless of symbol. So you can take the action without looking at the next symbol. But the state you go to will depend on the symbol.","msgtype":"m.text"},"ts":1570158207000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"So I think maybe the LR(0) tables are being presented to make them look more like k=1 tables.","msgtype":"m.text"},"ts":1570158282000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"But the state you go to will depend on the symbol.\" -> \"But the state you go to after shifting a symbol *will* depend on the symbol.\"","msgtype":"m.text"},"ts":1570158381000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i.e., you could present an LR(0) table with only one column for action, but you'd need some terminal columns for goto.","msgtype":"m.text"},"ts":1570158485000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Right, that is what I meant by distinguishing between run-time and static lookahead","msgtype":"m.text"},"ts":1570158492000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"aaaaghh whoa","msgtype":"m.text"},"ts":1570158501000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1570158502000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i have to go, it's the middle of the night here","msgtype":"m.text"},"ts":1570158562000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"LR(0) tables do have the particular regularity you've observed—to my mind, caused by the fact that the table generation algorithm has 0 tokens of lookahead after each LR item","msgtype":"m.text"},"ts":1570158627000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but those tables are exactly the same format as LR(1) tables and the same parser code consumes both","msgtype":"m.text"},"ts":1570158666000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"'night","msgtype":"m.text"},"ts":1570158690000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"well yeah, you can format LR(0) tables so than an LR(1) parser can handle them.","msgtype":"m.text"},"ts":1570158740000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(every LR(0) grammar is an LR(1) grammar)","msgtype":"m.text"},"ts":1570158759000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'm not sure it's a \"you can format\" thing: that is the only way they are ever presented","msgtype":"m.text"},"ts":1570158826000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ljharb: that last commit has %FunctionPrototype% in it","msgtype":"m.text"},"ts":1570159225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a jorendorff in #tc39!","msgtype":"m.text"},"ts":1570159225000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"glad to have you","msgtype":"m.text"},"ts":1570159227000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: apologies for not noticing","msgtype":"m.text"},"ts":1570159236000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whoops","msgtype":"m.text"},"ts":1570159260000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: thanks, will fix","msgtype":"m.text"},"ts":1570159264000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/ecma262/pull/1720","msgtype":"m.text"},"ts":1570159726000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: seems like you were too late","msgtype":"m.text"},"ts":1570160757000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what an amusing conversation that makes me realize how little I know about parsing in spite of feeling like I know a good amount lol","msgtype":"m.text"},"ts":1570160813000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I mean really it's that I learned the Chomsky hierarchy from the views of linguistics and theoretical CS but didn't actually study compilers in school...hehe)","msgtype":"m.text"},"ts":1570160954000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I not sure where the action/goto formulation of parsing tables comes from. Knuth didn't use it when he defined LR. Might be Aho + Ullman.","msgtype":"m.text"},"ts":1570162195000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Hm, I feel like I got nerd-sniped (https://www.xkcd.com/356/)","msgtype":"m.text"},"ts":1570162709000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"possibly self-inflicted.","msgtype":"m.text"},"ts":1570163979000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1570164051000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"It is maybe worth pointing out that the \"[lookahead <! { ... 'let` `[`}]\"  restriction in ExpressionStatement can be implemented in LR(1)","msgtype":"m.text"},"ts":1570176706000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"*\"[lookahead <! { ... `let` `[`}]\"","msgtype":"m.text"},"ts":1570176724000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: How do you figure?","msgtype":"m.text"},"ts":1570191375000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"You just don't need 2 tokens of lookahead at runtime, or 2 tokens of lookahead past the end of any production while building the tables","msgtype":"m.text"},"ts":1570193894000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Well this is weird: \"Knuth proved that it reaches its maximum language recognition power for k=1 and provided a method for transforming LR(k), k > 1 grammars into LR(1) grammars.\" curiouser and curiouser","msgtype":"m.text"},"ts":1570194038000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"So are you making the distinction that you don't need 2 tokens of lookahead at the end of any production, but ExpressionStatement does need 2 tokens of lookahead at the start of the production?","msgtype":"m.text"},"ts":1570195557000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i.e., are you saying that, as long as the lookahead-restrictions involving two-token lookaheads never occur at the end of a production, they can be \"implemented in LR(1)\"?","msgtype":"m.text"},"ts":1570195981000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jorendorff: here's an example (like I suggested last night) of an LR(0) table where the 'action' is a single column (determined by state) and the 'goto' has columns for terminals too: https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/lectures/05/Slides05.pdf (page 256)","msgtype":"m.text"},"ts":1570198247000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And Grune has an LR(0) table that's sort of intermediate between that and the usual presentation of LR(1) tables: https://dickgrune.com/Books/PTAPG_1st_Edition/BookBody.pdf (Figure 9.22). [One column for the reduce actions, but the shift actions are duplicated over multiple columns.]","msgtype":"m.text"},"ts":1570198612000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(oo, lots of merges...)","msgtype":"m.text"},"ts":1570200241000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: re: moving annex B into main body: https://github.com/tc39/ecma262/issues/1595#issuecomment-538255071","msgtype":"m.text"},"ts":1570207400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: I see. ...I still don't see how a \"runtime\" description of the k in LR(k) can produce LR(0) and LR(1) ... I might need to read Knuth's paper to have a hope","msgtype":"m.text"},"ts":1570207687000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I found it, it's 33 pages","msgtype":"m.text"},"ts":1570207695000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jmdyck: oh, i meant to ask. obviously ES is not specified using a CFG. but the language described by the spec grammar (i.e. before taking early errors and cover grammars into account) is a CF language, right? i.e. there exists some CFG that recognizes it","msgtype":"m.text"},"ts":1570207843000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Bakkot: yeah, hm.","msgtype":"m.text"},"ts":1570208280000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(but tx)","msgtype":"m.text"},"ts":1570208285000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jorendorff: I'm iffy on whether Knuth's paper will help.","msgtype":"m.text"},"ts":1570208335000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"...same","msgtype":"m.text"},"ts":1570208344000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but it should contain a definition of LR(k)","msgtype":"m.text"},"ts":1570208349000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and i'm interested in seeing a syntactic definition","msgtype":"m.text"},"ts":1570208361000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"not having seen one before","msgtype":"m.text"},"ts":1570208370000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"not sure what you mean by a \"syntactic definition\".","msgtype":"m.text"},"ts":1570208459000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"if you mean \"anything confirming to this (meta)syntax is a LR(k) grammar, and vice versa\", I don't think that's possible","msgtype":"m.text"},"ts":1570208509000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"*conforming","msgtype":"m.text"},"ts":1570208553000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re: \"runtime\" description of the k in LR(k): The parser can look at up to k of the next input symbols to make a decision about what to do next: shift the next symbol, or reduce by a particular production. If it chooses to shift, then it shifts exactly 1 symbol and uses that (plus the current state) to determine what state to go to.","msgtype":"m.text"},"ts":1570208760000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I believe that description is correct for k >= 0.","msgtype":"m.text"},"ts":1570208811000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re \"the language described by the spec grammar is a CF language\": No.","msgtype":"m.text"},"ts":1570208905000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Or actually, I'm not sure.","msgtype":"m.text"},"ts":1570208961000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But I doubt it.","msgtype":"m.text"},"ts":1570208967000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"You could prove it's a CF language by giving a CFG that's provably equivalent to the spec grammar, but I suspect that would be tough.","msgtype":"m.text"},"ts":1570209077000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'm curious, what is gained from this analysis","msgtype":"m.text"},"ts":1570209120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(dunno, I'm just answering the question)","msgtype":"m.text"},"ts":1570209137000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1570209140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to me, as long as we know the grammar is correct and doesn't require infinite lookahead, that seems good enough","msgtype":"m.text"},"ts":1570209150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"correct\" in what sense?","msgtype":"m.text"},"ts":1570209164000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"like correctly describes javascript in an unambiguous way","msgtype":"m.text"},"ts":1570209192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if/else notwithstanding","msgtype":"m.text"},"ts":1570209205000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you mean \"correct\" in the sense of \"faithfully expresses the idea that tc39 has in its head\"?","msgtype":"m.text"},"ts":1570209393000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"more or less","msgtype":"m.text"},"ts":1570209434000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as opposed to \"there is a way to objectively judge the correctness of this description\"?","msgtype":"m.text"},"ts":1570209437000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that is the point of the spec after all","msgtype":"m.text"},"ts":1570209445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Well, I have some sympathy with your viewpoint.","msgtype":"m.text"},"ts":1570209521000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The question then is: how can we increase our confidence that this description *does* (unambiguously, and with finite lookahead) express what tc39 intends?","msgtype":"m.text"},"ts":1570209626000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"^ this question is a good one for sure","msgtype":"m.text"},"ts":1570209664000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1570209667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but do we need to know the specific k for LR(k) to do that","msgtype":"m.text"},"ts":1570209701000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nah","msgtype":"m.text"},"ts":1570209729000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Presumably one reason to bring LR(k) into the discussion is: *if* you can show that a grammar is (say) LR(2), then right away you know that it's unambiguous and requires finite lookahead to parse.","msgtype":"m.text"},"ts":1570210061000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"rkirsling: interestingly: https://gc.gy/37919385.png","msgtype":"m.text"},"ts":1570214386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jsc and xs disagree here","msgtype":"m.text"},"ts":1570214396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1570214407000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron: ^","msgtype":"m.text"},"ts":1570214410000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry ross","msgtype":"m.text"},"ts":1570214414000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":p","msgtype":"m.text"},"ts":1570214435000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"do abstract modules have imports? from what i can tell they don't","msgtype":"m.text"},"ts":1570215643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Does anyone know the best way to generate a prettified spec diff from a git diff?","msgtype":"m.text"},"ts":1570218243000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"Is looking into https://github.com/tc39/ecma262/pull/1585","msgtype":"m.emote"},"ts":1570218265000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"but reading the diff is annoying","msgtype":"m.text"},"ts":1570218269000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_miller: I don't know about generating a spec diff, but you can at least look at the rendered PR","msgtype":"m.text"},"ts":1570220493000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"How do I do that?","msgtype":"m.text"},"ts":1570220510000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"by clicking \"Show all checks\" at the bottom and then \"details\" next to netlify's check","msgtype":"m.text"},"ts":1570220516000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oh cool, thanks","msgtype":"m.text"},"ts":1570220546000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"(this is a relatively new thing, thanks to I think devsnek)","msgtype":"m.text"},"ts":1570220566000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"was in my editor update on Tuesday, keith_miller :-p","msgtype":"m.text"},"ts":1570220659000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"keith_miller: i'm working on a way to show the diff in it too, but so far its an unsolved problem","msgtype":"m.text"},"ts":1570220795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you ever see green and red in proposals, some poor human had to put those in by hand","msgtype":"m.text"},"ts":1570220813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: I was late... >.>","msgtype":"m.text"},"ts":1570220821000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol no worries","msgtype":"m.text"},"ts":1570220837000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"poor humans","msgtype":"m.text"},"ts":1570220858000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: no worries. This is still great!","msgtype":"m.text"},"ts":1570220882000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"poor humans indeed :(","msgtype":"m.text"},"ts":1570220899000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"I still want to get automatic linking to the rendered spec in the PR message, like prettier has (see bottom of e.g. https://github.com/prettier/prettier/pull/6148 )","msgtype":"m.text"},"ts":1570221008000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(bottom of the OP, that is)","msgtype":"m.text"},"ts":1570221087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i was thinking about that","msgtype":"m.text"},"ts":1570221114000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: open to it, but things that edit the OP are a race condition that can get annoying","msgtype":"m.text"},"ts":1570221220000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: it doesn't edit the OP","msgtype":"m.text"},"ts":1570221227000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's just in the template","msgtype":"m.text"},"ts":1570221229000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/prettier/prettier/blob/master/.github/PULL_REQUEST_TEMPLATE.md","msgtype":"m.text"},"ts":1570221242000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah right, the referer thing","msgtype":"m.text"},"ts":1570221252000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in the html spec they edit it in","msgtype":"m.text"},"ts":1570221328000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I like prettier's approach better I think","msgtype":"m.text"},"ts":1570221347000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it puts the grossness in a different place :-p","msgtype":"m.text"},"ts":1570221439000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh phew, relying on the referer there is an interesting hack.","msgtype":"m.text"},"ts":1570222088000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]