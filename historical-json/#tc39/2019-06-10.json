[
{"content":{"body":"akirose: is there a way to make http://tc39.es redirect to HTTPS?","msgtype":"m.text"},"ts":1560141752000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"well, I guess that does redirect, but http://tc39.es/ecma262/ doesn't","msgtype":"m.text"},"ts":1560141776000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Something something github pages?","msgtype":"m.text"},"ts":1560143549000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"akirose: yeah I think there's a switch on tc39/ecma262","msgtype":"m.text"},"ts":1560143569000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Iâ€™ll take a peek tomorrow!","msgtype":"m.text"},"ts":1560143630000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"TimothyGu: akirose fixed","msgtype":"m.text"},"ts":1560146845000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: thx","msgtype":"m.text"},"ts":1560146855000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"wasn't there an arraybuffer realloc proposal at some point","msgtype":"m.text"},"ts":1560173900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah, https://github.com/domenic/proposal-arraybuffer-transfer/, which I haven't had time to get back to.","msgtype":"m.text"},"ts":1560176049000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hey all! Has there already been a proposal on making Math.random reproducible?","msgtype":"m.text"},"ts":1560182474000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"it seems like a pretty crucial part of making tests pass, and as there's more and more data science tools for JS, it might be nice to not need to go to external libraries for seedable randomness","msgtype":"m.text"},"ts":1560182537000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: https://github.com/tc39/proposal-seeded-random","msgtype":"m.text"},"ts":1560182628000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh neat!","msgtype":"m.text"},"ts":1560182654000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1560182655000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"oh, I don't know how much I like the choices from that proposal, but it's something","msgtype":"m.text"},"ts":1560182703000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1560182731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"welcome to language design","msgtype":"m.text"},"ts":1560182737000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: can we talk about this? I don't see how you couldn't just have something like `Math.seedRandom(<seed>)` once. Sure, this would be global and that might be undesired in many cases, but I think it will cover 95% of all seeding needs. A generator could still be used, as another function","msgtype":"m.text"},"ts":1560182937000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"`Math.seededPRNG({ seed }).next().value`?","msgtype":"m.text"},"ts":1560183012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean that this is fine. A bit clunky, but fine. I'd just love it if there was going to be a simpler solution for simpler cases","msgtype":"m.text"},"ts":1560183051000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"also would be nice to make already existing code (that uses Math.random) be reproducible","msgtype":"m.text"},"ts":1560183111000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"and that might require a lot of restructuring, if the only solution is this definition of `seededPRNG`","msgtype":"m.text"},"ts":1560183189000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"and how about a way to destructure a default import?","msgtype":"m.text"},"ts":1560186466000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"something like `import ({ a, b }) from './exports/default'`","msgtype":"m.text"},"ts":1560186486000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: that'd be confusing since `import { a, b }` already isn't destructuring","msgtype":"m.text"},"ts":1560190746000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, then an additional keyword maybe?","msgtype":"m.text"},"ts":1560190819000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"`import default as { a, b } from './exports/default'`?","msgtype":"m.text"},"ts":1560190870000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"actually, can you use `as` for this already?","msgtype":"m.text"},"ts":1560190882000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"you can `import { a as b }` already","msgtype":"m.text"},"ts":1560191014000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what's the benefit of inline destructuring there? just avoiding a second line?","msgtype":"m.text"},"ts":1560191026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'd argue that's pretty important actually","msgtype":"m.text"},"ts":1560191463000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"imports should be your first statements","msgtype":"m.text"},"ts":1560191477000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"that means that the second line could be quite a ways down","msgtype":"m.text"},"ts":1560191489000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"and I don't see why it should","msgtype":"m.text"},"ts":1560191504000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"plus, there's one more unneeded item in your namespace, which might not be a big deal, but damn, it bothers me :/","msgtype":"m.text"},"ts":1560191549000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"and I meant using `as` to destructure a default import","msgtype":"m.text"},"ts":1560191592000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"if it's possible, I can't get it to work","msgtype":"m.text"},"ts":1560191632000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"intuitively, it would be `import itemWhoseNameMightBeThrownAway as { a, b } from './exports/default'`","msgtype":"m.text"},"ts":1560191659000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"but that's invalid syntax","msgtype":"m.text"},"ts":1560191673000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"or more meaningfully, `import as { a, b } from './exports/default'`","msgtype":"m.text"},"ts":1560191795000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: it always could be, but you can put it immediately afterwards","msgtype":"m.text"},"ts":1560191828000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"allowing destructuring inline won't force it","msgtype":"m.text"},"ts":1560191833000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'd rather avoid polluting the \"import\" part of my scripts","msgtype":"m.text"},"ts":1560191970000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"but sure","msgtype":"m.text"},"ts":1560191977000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"if your default import commonly needs to be destructured","msgtype":"m.text"},"ts":1560192045000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"perhaps it should be multiple named exports","msgtype":"m.text"},"ts":1560192052000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1560192064000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"apparently the airbnb styleguide favours default exports","msgtype":"m.text"},"ts":1560200182000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"if you only export one thing*","msgtype":"m.text"},"ts":1560200213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and when writing tests, if I import named exports at the beginning, and they don't exist, the whole test fails, without going through what could still be tested","msgtype":"m.text"},"ts":1560200249000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"oh, it says that?","msgtype":"m.text"},"ts":1560200267000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"oh, it does","msgtype":"m.text"},"ts":1560200340000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: yes, it favors default exports almost always","msgtype":"m.text"},"ts":1560200342000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, my linter didn't tell me that","msgtype":"m.text"},"ts":1560200354000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"'^^","msgtype":"m.text"},"ts":1560200359000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: the principle is, that a default export is what a module *is*, and a named export is what a module *has*. most every module should *be* something.","msgtype":"m.text"},"ts":1560200362000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how about a `util` module?","msgtype":"m.text"},"ts":1560200398000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"certainly that has many things, but i'd also say, don't have util modules :-)","msgtype":"m.text"},"ts":1560200462000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"where do you put your generic helpers?","msgtype":"m.text"},"ts":1560200488000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"sure, probably someone already wrote something that covers that","msgtype":"m.text"},"ts":1560200511000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"but I also don't want to combine many coding styles","msgtype":"m.text"},"ts":1560200533000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"a file for each util https://github.com/engine262/engine262/tree/master/src/static-semantics","msgtype":"m.text"},"ts":1560200569000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oheck the ci failed","msgtype":"m.text"},"ts":1560200588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh my, that's worrying","msgtype":"m.text"},"ts":1560200604000,"senderName":"towc","senderId":"towc@irc"},
{"content":{"body":"towc: i use folders, not files, to group modules.","msgtype":"m.text"},"ts":1560201897000,"senderName":"ljharb","senderId":"ljharb@irc"}
]