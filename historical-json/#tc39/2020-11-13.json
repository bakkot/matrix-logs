[
{"content":{"body":"bradleymeck: Yeah, I have no concerns with adding that back in, I was just trying to take out every single thing I could to avoid excess complexity, but I probably went overboard","msgtype":"m.text"},"ts":1605271130000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan are you still pursuing https://github.com/tc39/ecma262/pull/2038? I completed the testing work to support it.","msgtype":"m.text"},"ts":1605276094000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"that proposal is seeking another champion. I still think it would be worthwhile, but it's not justified by Records and Tuples in their current state.","msgtype":"m.text"},"ts":1605283593000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"another champion who would explain the utility to the committee could make the case for Stage 2","msgtype":"m.text"},"ts":1605283616000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"anyone have context on the concurrent stuff from Shu on agenda?","msgtype":"m.text"},"ts":1605289553000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i am not asking for any advancement of any new proposals, though i will throw out some ideas","msgtype":"m.text"},"ts":1605289617000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: i do apologize on the delay for readable materials, been crazy busy this week with multiple internal events","msgtype":"m.text"},"ts":1605289637000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: are we talking about something like the old thing from JSCore?","msgtype":"m.text"},"ts":1605289640000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't know what that is","msgtype":"m.text"},"ts":1605289646000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so probably not?","msgtype":"m.text"},"ts":1605289648000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"digs about","msgtype":"m.emote"},"ts":1605289650000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://webkit.org/blog/7846/concurrent-javascript-it-can-work/","msgtype":"m.text"},"ts":1605289665000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"object level locks","msgtype":"m.text"},"ts":1605289673000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh, JSCore as in JSC","msgtype":"m.text"},"ts":1605289766000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lol sorry i always see JSC and JSCore threw me off and i thuoght it was a library","msgtype":"m.text"},"ts":1605289778000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: it is partially related, though i don't think that particular formulation flies","msgtype":"m.text"},"ts":1605289794000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"my high-level thesis is that we have two concurrent programming models in the JS ecosystem: 1) traditional threads with shared memory, which is here to stay because of SABs and increasing adoption of wasm, and 2) web-like, which is this kinda-sorta actor-inspired system with better guarantees, with run-to-completion semantics, async everything, etc","msgtype":"m.text"},"ts":1605289865000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and that we ought to push on both, and i think more work especially is needed to better support 2)","msgtype":"m.text"},"ts":1605289885000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and i'll throw out some ideas there","msgtype":"m.text"},"ts":1605289888000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also SIMD.js!","msgtype":"m.text"},"ts":1605289908000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"hides","msgtype":"m.emote"},"ts":1605289919000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Fil's post is more about how to retrofit JS to do 1) a la Java","msgtype":"m.text"},"ts":1605289919000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which has some good parts, but i think retrofitting our plain objects to be lockable is kinda a lost cause","msgtype":"m.text"},"ts":1605289934000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"SIMD.js as a thin wrapper around wasm SIMD? :P","msgtype":"m.text"},"ts":1605289976000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: idk, if we are working on strings I wish we had SIMD ops XD, but then that means exposing the underbelly of the beast","msgtype":"m.text"},"ts":1605290358000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: anyway does that top-level overview help?","msgtype":"m.text"},"ts":1605290604000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yes, I'm very curious about making 2) cheaper in particular","msgtype":"m.text"},"ts":1605290650000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"1) seems very hard to actually retrofit in any way","msgtype":"m.text"},"ts":1605290664000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"2) ergonomics are good enough that we see massive waste currently","msgtype":"m.text"},"ts":1605290678000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"then please stay tuned :)","msgtype":"m.text"},"ts":1605290830000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"for 1) i don't think it can be retrofit, and would need a new kind of fixed-shape objects that are independently motivated by a lot of other use cases too","msgtype":"m.text"},"ts":1605290874000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"littledan's been doing a lot of thinking in that space","msgtype":"m.text"},"ts":1605290884000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you know, typed objects, like TC39 has been thinking about for many years","msgtype":"m.text"},"ts":1605290992000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I saw there's that module blocks proposal from surma on the agenda, which sounded like it would help with 2","msgtype":"m.text"},"ts":1605291180000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"TIL you can Call SomeClass.constructor","msgtype":"m.text"},"ts":1605291484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm that's just Function, i was thinking of SomeClass.prototype.constructor","msgtype":"m.text"},"ts":1605291605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: yep, it's part of the \"constellation\"","msgtype":"m.text"},"ts":1605294176000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: captured variables would be possible to retrofit but it would be weird now that i think about it. any way i can imagine it would require some boilerplate by programmer","msgtype":"m.text"},"ts":1605295745000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]