[
{"content":{"body":"devsnek: ping","msgtype":"m.text"},"ts":1593833970000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: hi","msgtype":"m.text"},"ts":1593836175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wanted to talk to you about generators etc","msgtype":"m.text"},"ts":1593836272000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"aight","msgtype":"m.text"},"ts":1593836333000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the other day, you saus that the spec doesn't have suspendable abstract ops, but I'm looking at https://tc39.es/ecma262/#sec-generatorresume step 9","msgtype":"m.text"},"ts":1593836447000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what about it","msgtype":"m.text"},"ts":1593836475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that suspends the execution of the GeneratorResume op, and resumes the execution of some other suspended op","msgtype":"m.text"},"ts":1593836537000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it suspends the execution of the entire context","msgtype":"m.text"},"ts":1593836550000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1593836565000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what i meant was, we don't have the ability to suspend just the op","msgtype":"m.text"},"ts":1593836580000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"without the surrounding context","msgtype":"m.text"},"ts":1593836585000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, ok.","msgtype":"m.text"},"ts":1593836598000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so you think of the context as 'surrounding' the execution of the op?","msgtype":"m.text"},"ts":1593836702000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: that seems to be how we've specified it","msgtype":"m.text"},"ts":1593836904000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I ask because there are definitely ops that execute before there are any contexts, and ops that create contexts, and ops that manipulate contexts, which suggests that ops run 'off to the side'. But then there's other stuff that suggests they run 'inside' contexts.","msgtype":"m.text"},"ts":1593837086000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But the spec doesn't really demarcate that shift in perspective.","msgtype":"m.text"},"ts":1593837149000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Anyway, that's a tangent.","msgtype":"m.text"},"ts":1593837306000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The other thing I was looking at was https://tc39.es/ecma262/#sec-generatoryield","msgtype":"m.text"},"ts":1593837351000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this was also interesting https://github.com/tc39/ecma262/pull/1748","msgtype":"m.text"},"ts":1593837388000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So GeneratorYield (as written) is basically just bookkeeping: it sets some things, pops the context stack, and returns. But the thing is, according to the note in step 10, it doesn't return to the operation that called it. This is very odd.","msgtype":"m.text"},"ts":1593837689000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I mean, I understand that there has to be a transfer of control, but to accomplish it via a Note that just says the return goes where you don't expect it, just seems so weird.","msgtype":"m.text"},"ts":1593837770000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the note is for clarity, its not normative","msgtype":"m.text"},"ts":1593837828000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, but if you deleted it, what would tell you that the return isn't to the op's caller, like every other op?","msgtype":"m.text"},"ts":1593837865000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'm guessing some prose somewhere?","msgtype":"m.text"},"ts":1593837918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Well, there's no prose that talks about GeneratorYield's return semantics.","msgtype":"m.text"},"ts":1593838045000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The only references to GeneratorYield are invocations.","msgtype":"m.text"},"ts":1593838065000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(no prose other than that Note)","msgtype":"m.text"},"ts":1593838082000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hopefully something somewhere describes how suspending an execution context works","msgtype":"m.text"},"ts":1593838095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, I don't think there is.","msgtype":"m.text"},"ts":1593838125000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(Another tangent: when the spec says to Suspend a context, it auto-links to https://tc39.es/ecma262/#sec-suspend which is an Atomics op.)","msgtype":"m.text"},"ts":1593838210000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah that confused me a lot","msgtype":"m.text"},"ts":1593838241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"back when i was first setting up generators","msgtype":"m.text"},"ts":1593838253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Well, the clause on execution contexts does talk a little about suspending","msgtype":"m.text"},"ts":1593838344000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but not enough to infer anything about GeneratorYield.","msgtype":"m.text"},"ts":1593838449000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It seems to me that GY should have an explicit transfer of control (suspend itself), and then wait to be resumed (with a value). And then return (as usual) to the op that called GY.","msgtype":"m.text"},"ts":1593838710000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Pretty much like GeneratorResume does.","msgtype":"m.text"},"ts":1593838727000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i wouldn't be against refactorings of how suspension works","msgtype":"m.text"},"ts":1593838813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"One thing though, AsyncGeneratorYield has a similar weirdness.","msgtype":"m.text"},"ts":1593838921000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And I think it could be unweirded in a similar way, but I'm not clear on what happens in AsyncGeneratorResolve.","msgtype":"m.text"},"ts":1593838980000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"AsyncGeneratorResolve calls AsyncGeneratorResumeNext, which *has* an explicit xfer of control, except it seems to be going in the other direction, so I'm confused.","msgtype":"m.text"},"ts":1593839063000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"does engine262 implement async generators?","msgtype":"m.text"},"ts":1593839127000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1593839169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hm, getting late here. I'm heading off, but I'll check the log for any further thoughts you might have.","msgtype":"m.text"},"ts":1593839199000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1593839205000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah Why deref() for WeakRef, not a getter `ref`?","msgtype":"m.text"},"ts":1593876815000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I have a small nitpick - In array.map (https://tc39.es/ecma262/#sec-array.prototype.map), the note says that new elements in array are not considered after map starts. But a similar note in array.foreach doesn't have that part of the note (ignores new elements) - even though that is how it operates.","msgtype":"m.text"},"ts":1593877587000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Is this a miss?","msgtype":"m.text"},"ts":1593877587000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Like what is the general guideline about notes?","msgtype":"m.text"},"ts":1593877731000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Some sections have good understandable notes, others are very sparse. Is it mostly dependent on the proposal writer?","msgtype":"m.text"},"ts":1593877731000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: it does seem like it should be there -- as it turns out, it WAS there in ES5 but was removed as of ES6: see https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18 followed by http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach","msgtype":"m.text"},"ts":1593880735000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure if there would be notes of such a change but you could submit an editorial PR if you wanted","msgtype":"m.text"},"ts":1593880784000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(chances are it'd get merged; at worst you'd find out why :) )","msgtype":"m.text"},"ts":1593880810000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Haha. Ok, I'll raise one","msgtype":"m.text"},"ts":1593880987000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Done. PR - https://github.com/tc39/ecma262/pull/2076, issue - https://github.com/tc39/ecma262/issues/2075.","msgtype":"m.text"},"ts":1593885092000,"senderName":"bendtherules","senderId":"bendtherules@irc"}
]