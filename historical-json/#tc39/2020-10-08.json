[
{"content":{"body":"yeah i am swayed by that to remove String#item","msgtype":"m.text"},"ts":1602125158000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i have also reached out to Magic 360 again since they have yet to respond","msgtype":"m.text"},"ts":1602125175000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it is my wish that when i do bring this up again","msgtype":"m.text"},"ts":1602125248000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that we refrain from talking more about code units","msgtype":"m.text"},"ts":1602125263000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and let the web compat argument stand alone and leave it at that","msgtype":"m.text"},"ts":1602125274000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"couldn't agree more","msgtype":"m.text"},"ts":1602125347000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I will avoid bringing it up","msgtype":"m.text"},"ts":1602126187000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"some thoughts about growing C++'s stdlib, many of which apply to us as well: https://cor3ntin.github.io/posts/std/","msgtype":"m.text"},"ts":1602127081000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: if magic360 and their customers can't be updated, what happens?","msgtype":"m.text"},"ts":1602135533000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"weeping and gnashing of teeth","msgtype":"m.text"},"ts":1602135584000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, i assume that the original motivation is gone, but that there's still a value in having the semantics somehow","msgtype":"m.text"},"ts":1602135613000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's hard to say; the champions said they would abandon the proposal if `item` were unviable","msgtype":"m.text"},"ts":1602135696000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: what do you mean the original motivation is gone?","msgtype":"m.text"},"ts":1602168189000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu good morning! Do you have a moment to weigh in on this: https://github.com/tc39/test262/pull/2833#discussion_r500652041 ?","msgtype":"m.text"},"ts":1602168410000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: sure, ross's understanding there matches mine and he did confirm with me yesterday on irc","msgtype":"m.text"},"ts":1602168468000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu great, then I believe these tests are ready, in support of the spec change.","msgtype":"m.text"},"ts":1602168540000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"great, thank you","msgtype":"m.text"},"ts":1602168634000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh, I'm sorry: I didn't even see that rkirsling had edited his last comment.","msgtype":"m.text"},"ts":1602168744000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"gotta say the YUI thing doesn't look great","msgtype":"m.text"},"ts":1602173914000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i meant that wasn’t the motivation to make everything match observablearray?","msgtype":"m.text"},"ts":1602173972000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, item or nothing?","msgtype":"m.text"},"ts":1602173992000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"So what's the next step? Give up the item proposal?","msgtype":"m.text"},"ts":1602174070000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"ljharb: that was the motivation to make it named `item`","msgtype":"m.text"},"ts":1602174074000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: the semantics already doesn't match IDL's current semantics","msgtype":"m.text"},"ts":1602174085000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: ah ok cool, so it’s still a thing with a different name?","msgtype":"m.text"},"ts":1602174088000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if only we had a language-level brand checking mechanism the web could adopt, people would stop ducktyping builtins :-/","msgtype":"m.text"},"ts":1602174093000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that'd only work for newer things","msgtype":"m.text"},"ts":1602174152000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also people would not stop ducktying builtins","msgtype":"m.text"},"ts":1602174190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think we need \"item\" it cannot resolve the DOM observable array.","msgtype":"m.text"},"ts":1602174190000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"newer code, sure, but older code might migrate over time","msgtype":"m.text"},"ts":1602174191000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks: good question. i'm not sure right now. Magic 360 got back to me that they did update and will encourage their users to update","msgtype":"m.text"},"ts":1602174193000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's plenty of other ways to brand check","msgtype":"m.text"},"ts":1602174203000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I mean \"If it cannot\"","msgtype":"m.text"},"ts":1602174208000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"ljharb: if \"older code might migrate over time\" was our hope, we'd operate a lot differently","msgtype":"m.text"},"ts":1602174214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: not elements or node lists","msgtype":"m.text"},"ts":1602174215000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there is, you can do `.constructor.name` at leat","msgtype":"m.text"},"ts":1602174225000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"least","msgtype":"m.text"},"ts":1602174226000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yeah fair. Encouraging news from magic360","msgtype":"m.text"},"ts":1602174229000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that’s pretty unreliable","msgtype":"m.text"},"ts":1602174240000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1602174247000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no less reliable than absence of `.item`","msgtype":"m.text"},"ts":1602174250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lots of frameworks have an Element and similar","msgtype":"m.text"},"ts":1602174250000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"who's messing with constructors?","msgtype":"m.text"},"ts":1602174253000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot agreed there","msgtype":"m.text"},"ts":1602174262000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"But how to fix the yui breaks","msgtype":"m.text"},"ts":1602174270000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"no one is looking at `.item` because they need specifically a very reliable brand check mechanism","msgtype":"m.text"},"ts":1602174285000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: being forgeable is a problem even if nobody’s breaking the builtins","msgtype":"m.text"},"ts":1602174289000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"forgeability has nothing at all to do with this issue","msgtype":"m.text"},"ts":1602174305000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i agree they don’t usually need the robustness that offers","msgtype":"m.text"},"ts":1602174307000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because these authors are clearly not concerned about forgeability","msgtype":"m.text"},"ts":1602174317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but they were surely looking for a way to ask “is this an element”","msgtype":"m.text"},"ts":1602174320000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"providing any form of that, explicitly, encourages its use instead of less reliable or explicit means","msgtype":"m.text"},"ts":1602174342000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`instanceof Element` is the built-in, obvious way of asking that question","msgtype":"m.text"},"ts":1602174364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fair, but instanceof doesn’t work cross-realm, and people do run into that with iframes occasionally","msgtype":"m.text"},"ts":1602174409000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Do they check this with \"if 'item' in x\"? Is it possible to let it return false but existing?","msgtype":"m.text"},"ts":1602174422000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I would be very surprised to learn that was the concern here","msgtype":"m.text"},"ts":1602174423000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jackworks: YUI checks this with '.item'","msgtype":"m.text"},"ts":1602174433000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jackworks they check with truthiness of `.item`","msgtype":"m.text"},"ts":1602174439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oops","msgtype":"m.text"},"ts":1602174450000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"ljharb if you know enough to be concerned about the cross-frame issue, you likely know enough to use `.constructor.name`","msgtype":"m.text"},"ts":1602174485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"🤣🤣🤣do you want to have more IsHTMLDDA","msgtype":"m.text"},"ts":1602174496000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Bakkot: i agree, I’m not claiming that’s the issue here. I’m saying that something builtin that was cross realm and unforgeable would end up being the natural choice for everyone even if folks didn’t need all it provides, just like happened with Array.isArray.","msgtype":"m.text"},"ts":1602174567000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, it objectively already happened, the bulk of the community doesn’t use instanceof Array","msgtype":"m.text"},"ts":1602174600000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in new code, sure; old code hasn't changed though","msgtype":"m.text"},"ts":1602174883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right now i don't think this warrants the [[IsHTMLDDA] hammer","msgtype":"m.text"},"ts":1602175119000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"🤣","msgtype":"m.text"},"ts":1602175148000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"lol hopefully nothing ever warrants that","msgtype":"m.text"},"ts":1602175161000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1602175195000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"If so, many mambrane library will have one more CVE to fix","msgtype":"m.text"},"ts":1602175248000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"I feel like flickr is disproportionately likely to be the site that breaks when we ship new stuff","msgtype":"m.text"},"ts":1602175250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"indeed, it's come up many times before","msgtype":"m.text"},"ts":1602175259000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"wonder if it's just yui","msgtype":"m.text"},"ts":1602175260000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or if there's something else going on there","msgtype":"m.text"},"ts":1602175271000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think it's just that it's 10 years old?","msgtype":"m.text"},"ts":1602175279000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and duck typing on `item` is surprisingly robust, rather than typing `instanceof` for all array-likes, of which there are many","msgtype":"m.text"},"ts":1602175307000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"my gut reaction here is relative indexing still seems useful, but it's no longer urgent and doesn't block any web stuff we want to to do, so we can bikeshed the name and String inclusion at our leisure","msgtype":"m.text"},"ts":1602175404000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"as for `ObservableArray` itself, it probably needs to do the gross thing of magically materializing `item` as an own-property method","msgtype":"m.text"},"ts":1602175446000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh it's support negative index as index from end? If so it's somewhat useful for me","msgtype":"m.text"},"ts":1602175471000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"i suppose it can also insert a prototype just below Array.prototype that gives you .item or something, but not sure if that works or has other problems","msgtype":"m.text"},"ts":1602175477000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"jackworks: yes, there were two motivations: relative indexing and to aid `ObservableArray` as a replacement for DOM array-likes","msgtype":"m.text"},"ts":1602175510000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"🤔👍","msgtype":"m.text"},"ts":1602175532000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: the second requirement was only about why it's important to be named `item`","msgtype":"m.text"},"ts":1602175534000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: another prototype in the chain seems simplest","msgtype":"m.text"},"ts":1602176561000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yeah, i'll leave that for the folks who want to use this to decide and hash out","msgtype":"m.text"},"ts":1602176588000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the desire was to have ObservableArrays be API-compat with Arrays","msgtype":"m.text"},"ts":1602176616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1602176666000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think if it has to add extra stuff so they're not just like Arrays API-wise, maybe we'll just scuttle the plan to unify legacy types with a new type that emulates legacy behavior","msgtype":"m.text"},"ts":1602176676000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and leave the new ObservableArray type for new APIs only that does not have API compat with older types (i.e. doesn't have .item())","msgtype":"m.text"},"ts":1602176721000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but i don't really have a horse in the race here","msgtype":"m.text"},"ts":1602176771000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"nooooooo not flickr","msgtype":"m.text"},"ts":1602183383000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"</slowpoke>","msgtype":"m.text"},"ts":1602183391000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wait, Flickr is no longer owned by verizon","msgtype":"m.text"},"ts":1602183941000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it was apparently bought by SmugMug in 2018","msgtype":"m.text"},"ts":1602183948000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i wonder how SmugMug engineering feels about flickr...","msgtype":"m.text"},"ts":1602183959000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what names do people like instead of `item`?","msgtype":"m.text"},"ts":1602186371000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`atem`","msgtype":"m.text"},"ts":1602186412000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then we also have to add `gotem` to Sets and Maps","msgtype":"m.text"},"ts":1602186600000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: tbh `.get` would be good if it didn't collide with collections; `.at` works (there's already a stage 0 String.prototype.at proposal, in fact), `.index()` would work but would conflict with `.index` on match objects","msgtype":"m.text"},"ts":1602186660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah i was thinking `at`","msgtype":"m.text"},"ts":1602186772000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"index sounds weird, since we're not getting an index","msgtype":"m.text"},"ts":1602186785000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"get is a possibility, i wonder if that conflicts with anything","msgtype":"m.text"},"ts":1602186791000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"outside of the other collections","msgtype":"m.text"},"ts":1602186800000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"based on our previous experiences i'm sure somebody's doing code like `if (obj.get) { /* is a Map or a Set */ }`","msgtype":"m.text"},"ts":1602186820000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`gottem` lol I love it","msgtype":"m.text"},"ts":1602186919000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"accepts *only* negative indices","msgtype":"m.text"},"ts":1602186936000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well like that's the thing","msgtype":"m.text"},"ts":1602186945000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`.negatem`","msgtype":"m.text"},"ts":1602186947000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if that is the feature, instead of the layering matter","msgtype":"m.text"},"ts":1602186965000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`.gimmie`?","msgtype":"m.text"},"ts":1602186967000,"senderName":"drousso","senderId":"drousso@irc"},
{"content":{"body":"or wait, `.item` for positives and `.meti` for negatives","msgtype":"m.text"},"ts":1602186971000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"then honestly we could just have `.last(n)`","msgtype":"m.text"},"ts":1602186975000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1602186991000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: no, i think it's still valuable to accept both negative and positive indices in a single method","msgtype":"m.text"},"ts":1602186992000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: that'd have to be an array, i think","msgtype":"m.text"},"ts":1602187001000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"alright","msgtype":"m.text"},"ts":1602187004000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"else you're just going to write wrappers that do the dispatch yourself","msgtype":"m.text"},"ts":1602187005000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: `.last(2)` implies you get both","msgtype":"m.text"},"ts":1602187006000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: uh yeah I see your point but that's a naming problem on my part","msgtype":"m.text"},"ts":1602187045000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess if we want the same behavior then `at` sounds good","msgtype":"m.text"},"ts":1602187059000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I fear that too will have compat issues","msgtype":"m.text"},"ts":1602187069000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and also, while we can no longer align JS Arrays with legacy DOM collections, whatever we design here will still be part of *new* DOM collections because ObservableArray still remains the desirable thing to use for new web API proposals","msgtype":"m.text"},"ts":1602187105000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1602187134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`.at` sgtm","msgtype":"m.text"},"ts":1602187429000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"+1 to \".at\"","msgtype":"m.text"},"ts":1602192414000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"we could even use the @ symbol to prevent collisions","msgtype":"m.text"},"ts":1602192723000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rwaldron-: is there anything that the __proto__ tests still need?","msgtype":"m.text"},"ts":1602192755000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`.pickItemFromIndex(n)`","msgtype":"m.text"},"ts":1602193441000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"But .at is almost as good","msgtype":"m.text"},"ts":1602193463000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"devsnek nothing now!","msgtype":"m.text"},"ts":1602194301000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I think I was originally waiting for \"needs consensus\"","msgtype":"m.text"},"ts":1602194316000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"All set.","msgtype":"m.text"},"ts":1602194708000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: btw https://github.com/tc39/test262/pull/2796#issuecomment-700775008","msgtype":"m.text"},"ts":1602195826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the fix is just changing it to be `assert(!f.hasOwnProperty('arguments'))` and `assert(!f.hasOwnProperty('caller'))`?","msgtype":"m.text"},"ts":1602195866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek got it","msgtype":"m.text"},"ts":1602200253000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"}
]