[
{"content":{"body":"jmdyck: neat, thanks!","msgtype":"m.text"},"ts":1582508535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: also I notice some of the headers seem to have some stray punctuation in the current commit, e.g. https://deploy-preview-545--ecma262-snapshots.netlify.com/#sec-updateempty","msgtype":"m.text"},"ts":1582508549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you mean the trailing underscores?","msgtype":"m.text"},"ts":1582508591000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1582508600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"those are intentional, to distinguish \"made up\" types from more-or-less 'official' types","msgtype":"m.text"},"ts":1582508660000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Ah, neat, thanks","msgtype":"m.text"},"ts":1582508692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/545#issuecomment-214957715","msgtype":"m.text"},"ts":1582508732000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I could figure this out by reading it, but since it's 14k lines of code and you're here, is the type analysis you linked above interprocedural?","msgtype":"m.text"},"ts":1582508861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup.","msgtype":"m.text"},"ts":1582508915000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"In particular, I am intending to get to https://github.com/tc39/ecma262/issues/1796 soon, hopefully, which will include specifying for each algorithm whether it returns a completion record or not, and it would be extremely helpful to automatically note when `ReturnIfAbrupt` and friends are used with an algorithm which does not return a completion record (or not used with an algorithm which does), so I can fix those usages","msgtype":"m.text"},"ts":1582508960000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(It's a horrible kludge-fest, but it comes up with useful complaints sometimes.)","msgtype":"m.text"},"ts":1582508968000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(yeah, i just remembered you had raised 1796, so was about to ask if that was your point of interest.)","msgtype":"m.text"},"ts":1582509041000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I've got checks for using ReturnIfAbrupt or '?' when the operand can't be abrupt.","msgtype":"m.text"},"ts":1582509501000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"For RIA, currently only finding one...","msgtype":"m.text"},"ts":1582509615000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-equality-operators-runtime-semantics-evaluation, second group, step 6. (Abstract Equality Comparison can't return abrupt)","msgtype":"m.text"},"ts":1582509728000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"For '?', four...","msgtype":"m.text"},"ts":1582509752000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind, step 6.c, EnumerateObjectProperties can't throw?","msgtype":"m.text"},"ts":1582510036000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Do you happen to also have checks for using `!` when the operand can't be abrupt?","msgtype":"m.text"},"ts":1582510094000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am certain there's a lot more of those, since ljharb has been explicitly asking they be added","msgtype":"m.text"},"ts":1582510106000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it is my intent to get rid of them while I'm at it","msgtype":"m.text"},"ts":1582510116000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-generator-function-definitions-runtime-semantics-evaluation, 2 calls to GeneratorYield, which can't return abruptly?","msgtype":"m.text"},"ts":1582510170000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(and the 4th is a mistake)","msgtype":"m.text"},"ts":1582510181000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"EnumerateObjectProperties can't throw\" is correct; that's plausibly a leftover from the [[Enumerate]] trap existing","msgtype":"m.text"},"ts":1582510239000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I had a check for '!' applied to an operand that can't be abrupt, but commented it out, because there are a lot of hits.","msgtype":"m.text"},"ts":1582510303000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(not so many originally)","msgtype":"m.text"},"ts":1582510317000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"GeneratorYield can return abruptly, kind of","msgtype":"m.text"},"ts":1582510412000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"specifically, if I understand correctly the `?` in `Otherwise, return ? GeneratorYield(...)` is unwrapping the completion returned in 8.a of GeneratorYield, which can be abrupt via Generator.prototype.throw","msgtype":"m.text"},"ts":1582510507000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but does the return in 8.a return a value to the caller of GeneratorYield?","msgtype":"m.text"},"ts":1582510670000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Note says it doesn't.","msgtype":"m.text"},"ts":1582510725000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1582510730000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It must, yes, because that's how the value gets to `yield`","msgtype":"m.text"},"ts":1582510736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1582510764000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The note says that it returns to the evaluation of the YieldExpression, which is to say, to my understanding, to the `?`","msgtype":"m.text"},"ts":1582510790000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, I don't entirely understand how the spec specifies generators yet","msgtype":"m.text"},"ts":1582510894000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I uncommented that '!' check: it found 233 cases.","msgtype":"m.text"},"ts":1582511426000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"does anyone know what the most spec compliant js parser is","msgtype":"m.text"},"ts":1582511455000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm guessing acorn or babel","msgtype":"m.text"},"ts":1582511461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: jmdyck: it returns to the exact point where it says \"suspend the evaluation\"","msgtype":"m.text"},"ts":1582511546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I guess shift :P","msgtype":"m.text"},"ts":1582511564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"babel and acorn are pretty loose","msgtype":"m.text"},"ts":1582511570000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: current spec","msgtype":"m.text"},"ts":1582511577000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"otherwise yes I'd go with shift","msgtype":"m.text"},"ts":1582511582000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, probably babel","msgtype":"m.text"},"ts":1582511587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I've finally figured out my plan for giving engine262 its own parser","msgtype":"m.text"},"ts":1582511603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, test262.report doesn't test parsers against test262-parser-tests","msgtype":"m.text"},"ts":1582511609000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"test262-parser-tests is pretty stale too","msgtype":"m.text"},"ts":1582511620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hoping to update it in the next month or two, but it'll probably slip","msgtype":"m.text"},"ts":1582511633000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm going to vendor something and then slowly modify it","msgtype":"m.text"},"ts":1582511635000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: yeah I was thinking the same thing","msgtype":"m.text"},"ts":1582511653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'd love to add to it but it's closed source :(","msgtype":"m.text"},"ts":1582511663000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is closed source?","msgtype":"m.text"},"ts":1582511734000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"there's no source","msgtype":"m.text"},"ts":1582511742000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"test262.report","msgtype":"m.text"},"ts":1582511748000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, that one","msgtype":"m.text"},"ts":1582511751000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I meant test262-parser-tests","msgtype":"m.text"},"ts":1582511757000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why do we have a separate repo for that","msgtype":"m.text"},"ts":1582511764000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for the parser tests?","msgtype":"m.text"},"ts":1582511779000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1582511785000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mostly because they have a pretty different approach than main the test262 tests","msgtype":"m.text"},"ts":1582511795000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they could just be normal tests with a \"parse\" feature or something","msgtype":"m.text"},"ts":1582511813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"flag","msgtype":"m.text"},"ts":1582511817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"testing parsers filters for them, full engines run them normally","msgtype":"m.text"},"ts":1582511835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"everyone wins","msgtype":"m.text"},"ts":1582511837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the big differences are that they attempt to specify what a parse \"should\" be, they include any negative test anyone has ever found useful, and they include assertions that you reject things which are not explicitly prohibited by the specification","msgtype":"m.text"},"ts":1582511848000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the second one is the main difference","msgtype":"m.text"},"ts":1582511866000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1582511870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"see https://github.com/tc39/test262/pull/559 for some background","msgtype":"m.text"},"ts":1582511962000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"why does engine262 want its own parser?","msgtype":"m.text"},"ts":1582512139000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"because overriding acorn is painful","msgtype":"m.text"},"ts":1582512192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and acorn had a lot of problems","msgtype":"m.text"},"ts":1582512197000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least with regard to test262","msgtype":"m.text"},"ts":1582512204000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and estree kind of sucks","msgtype":"m.text"},"ts":1582512216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I had to argue for like a month to get a not-broken estree form for optional chaining","msgtype":"m.text"},"ts":1582512246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I saw that thread","msgtype":"m.text"},"ts":1582512478000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually I see it still isn't settled","msgtype":"m.text"},"ts":1582512594000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am glad shift has taken the approach of being willing to make breaking changes in the ast format for each yearly release","msgtype":"m.text"},"ts":1582512615000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't understand the concept of not introducing new ast types for new syntax","msgtype":"m.text"},"ts":1582512783000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aw man babel parser has deps","msgtype":"m.text"},"ts":1582512904000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sounds like you should keep using shift!","msgtype":"m.text"},"ts":1582512942000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can't use shift unless it updates","msgtype":"m.text"},"ts":1582512953000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you said you were going to vendor-and-patch anyway","msgtype":"m.text"},"ts":1582512971000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah patch like slow and small changes","msgtype":"m.text"},"ts":1582513049000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't have the bandwidth to make huge changes","msgtype":"m.text"},"ts":1582513061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even within engine262","msgtype":"m.text"},"ts":1582513066000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i couldn't use shift cuz it doesn't use estree","msgtype":"m.text"},"ts":1582513109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"migrating away from estree will take a long time","msgtype":"m.text"},"ts":1582513118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, fair enough","msgtype":"m.text"},"ts":1582513135000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, you could use shift and then use the estree converted","msgtype":"m.text"},"ts":1582513143000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this would be slightly silly but it would work","msgtype":"m.text"},"ts":1582513149000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there's a shift to estree converter?","msgtype":"m.text"},"ts":1582513166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/shapesecurity/shift-spidermonkey-converter-js","msgtype":"m.text"},"ts":1582513167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's also stale, but is pretty trivial to fix","msgtype":"m.text"},"ts":1582513180000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if this were the only thing blocking you I would get it fixed","msgtype":"m.text"},"ts":1582513189000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that and lack of whatever has happened since whenever shift was last updated","msgtype":"m.text"},"ts":1582513211000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i haven't checked in a while so i don't have a list or anything","msgtype":"m.text"},"ts":1582513219000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> The parser supports version 6 (release candidate 2) of the ECMA-262 standard.","msgtype":"m.text"},"ts":1582513242000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol, that comment is false","msgtype":"m.text"},"ts":1582513254000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it supports es2018","msgtype":"m.text"},"ts":1582513258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok not as terrifying","msgtype":"m.text"},"ts":1582513265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"will support 2019 shortly after it's been cut","msgtype":"m.text"},"ts":1582513274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's mostly optional chaining and nullish coalescing and `export * as ns from`, off the top of my head","msgtype":"m.text"},"ts":1582513294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wasn't 2019 cut like a year ago?","msgtype":"m.text"},"ts":1582513296000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... hm","msgtype":"m.text"},"ts":1582513332000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I meant 2020","msgtype":"m.text"},"ts":1582513335000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it should support 2019","msgtype":"m.text"},"ts":1582513339000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bah","msgtype":"m.text"},"ts":1582513345000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we really have not had time to maintain it as well as I would like","msgtype":"m.text"},"ts":1582513361000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"don't feel too pressured to maintain it for my benefit","msgtype":"m.text"},"ts":1582513395000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"2019 was just optional catch IIRC, as far as syntax goes","msgtype":"m.text"},"ts":1582513398000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I mean, we use it a lot, just not with new features so much","msgtype":"m.text"},"ts":1582513405000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we would like it to be usable by the community so people can help maintain it mostly :P","msgtype":"m.text"},"ts":1582513433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well i'm sort of planning to vendor it","msgtype":"m.text"},"ts":1582513453000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably not fantastic in terms of community","msgtype":"m.text"},"ts":1582513482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i should raise some funds to hire an open source consulting firm to write a parser for engine262","msgtype":"m.text"},"ts":1582513868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"please just contribute to an existing one","msgtype":"m.text"},"ts":1582513991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there are so many JS parsers","msgtype":"m.text"},"ts":1582513994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so many","msgtype":"m.text"},"ts":1582513997000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i've tried the whole use an existing one","msgtype":"m.text"},"ts":1582514038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"overriding sucks","msgtype":"m.text"},"ts":1582514041000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Are there any that generate a tree that conforms to the ES grammar?","msgtype":"m.text"},"ts":1582514044000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i actively avoid working on syntactic features","msgtype":"m.text"},"ts":1582514054000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: there might be some automatically derived ones? but the grammar does not produce a typical AST","msgtype":"m.text"},"ts":1582514076000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i really need something in-tree","msgtype":"m.text"},"ts":1582514086000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"especially since i want to convince people to try maintaining their proposals in engine262 at some point","msgtype":"m.text"},"ts":1582514110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"need low friction","msgtype":"m.text"},"ts":1582514112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"indeed, not typical, but it's the tree you need if you want to run the ES pseudocode","msgtype":"m.text"},"ts":1582514131000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nothing i'm aware of actively tries to match the grammar in the spec","msgtype":"m.text"},"ts":1582514167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shift is probably the closest","msgtype":"m.text"},"ts":1582514170000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are parts of the spec that are just terrible for ast though","msgtype":"m.text"},"ts":1582514186000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"comma operator","msgtype":"m.text"},"ts":1582514200000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"basically parts of the spec that are never lowered to their own production","msgtype":"m.text"},"ts":1582514219000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`PrimaryExpression : this`","msgtype":"m.text"},"ts":1582514225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a bajillion intervening nodes in any interesting tree","msgtype":"m.text"},"ts":1582514280000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1582514318000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but again, that's what the syntax-directed operations want.","msgtype":"m.text"},"ts":1582514360000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and there are some parts that don't correspond to how something would actually be parsed","msgtype":"m.text"},"ts":1582514378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like new expressions","msgtype":"m.text"},"ts":1582514380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(typescript parse dynamic import as a CallExperssion where left = `import` syntax token; then it force the rule of only 1 parameter in type check level)","msgtype":"m.text"},"ts":1582522331000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"estree used to do that too","msgtype":"m.text"},"ts":1582522425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"estree really likes to use nodes for the wrong thing so you end up emitting incorrect code","msgtype":"m.text"},"ts":1582522451000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think dynamic import refuse to parse more than 1 argument is not a good idea, it will make future extension (like `import('', {})` in module attribute proposal) harder","msgtype":"m.text"},"ts":1582522609000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"if it (more than 1 arg) is a runtime error it can be feature detected by `try` block","msgtype":"m.text"},"ts":1582522641000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"that wouldn't really scale i don't think","msgtype":"m.text"},"ts":1582522705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm I mean, If it is not a syntax error but a runtime error today, future proposal that import with more than 1 arg can be feature detected by try block.","msgtype":"m.text"},"ts":1582522707000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"you'd have to create a helper function","msgtype":"m.text"},"ts":1582522720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"babel already has too many helper functions","msgtype":"m.text"},"ts":1582522735000,"senderName":"devsnek","senderId":"devsnek@irc"}
]