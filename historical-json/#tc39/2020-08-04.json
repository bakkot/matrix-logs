[
{"content":{"body":"jmdyck: rebased 2007","msgtype":"m.text"},"ts":1596517164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also rebased my in-progress branch on top of it, https://github.com/tc39/ecma262/tree/fix-math-fix","msgtype":"m.text"},"ts":1596517430000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"DecimalEscape :: NonZeroDigit DecimalDigits [lookahead != DecimalDigit]","msgtype":"m.text"},"ts":1596556613000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what does that lookahead do","msgtype":"m.text"},"ts":1596556616000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/DecimalDigits/DecimalDigits?/","msgtype":"m.text"},"ts":1596556673000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think the `i` in the spec is broken","msgtype":"m.text"},"ts":1596563077000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in terms of the runtime semantics","msgtype":"m.text"},"ts":1596563081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you do `/x/i.test('X')` you get PatternCharacter x which does CharacterSetMatcher(['x'], false, 1)","msgtype":"m.text"},"ts":1596563153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm i'm wrong","msgtype":"m.text"},"ts":1596563227000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> Let n be the number of elements in r's captures List. (This is the same value as 21.2.2.1's NcapturingParens.)","msgtype":"m.text"},"ts":1596566208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wouldn't this be number of elements - 1","msgtype":"m.text"},"ts":1596566216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the first element is undefined and then there is an element for each capturing paren","msgtype":"m.text"},"ts":1596566245000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think the spec has some off-by-1 errors wrt captures List","msgtype":"m.text"},"ts":1596567660000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah that's what i'm thinking too","msgtype":"m.text"},"ts":1596567674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not familiar enough to regex to guess what is supposed to happen in all these loops and stuff","msgtype":"m.text"},"ts":1596567700000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess i can brute force it :P","msgtype":"m.text"},"ts":1596567704000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"attempt to start improving that: https://github.com/tc39/ecma262/pull/2112","msgtype":"m.text"},"ts":1596567748000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"oh wow","msgtype":"m.text"},"ts":1596567780000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"btw i just completely rewrote regex in engine262","msgtype":"m.text"},"ts":1596567787000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it mirrors the spec pretty closely","msgtype":"m.text"},"ts":1596567792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you want to check your pr","msgtype":"m.text"},"ts":1596567798000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well i still need to push up a few more things","msgtype":"m.text"},"ts":1596567817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"e.g., consider the two calls to BackreferenceMatcher... If you have a DecimalEscape like `\\1`, then you evaluate the `1` to get the Number value *1*, and pass that to the first param of BackrefMatcher.","msgtype":"m.text"},"ts":1596568074000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'm not against us doing a weird offset thing by having the first element be undefined","msgtype":"m.text"},"ts":1596568104000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But if you have a GroupName-escape like `\\k<foo>`, ... oh, it does work, never mind.","msgtype":"m.text"},"ts":1596568216000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think the fundamental trouble in this space stems from https://tc39.es/ecma262/#sec-pattern : \"indexed 1 through _NcapturingParens_\"","msgtype":"m.text"},"ts":1596568292000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"`\\d-a`","msgtype":"m.text"},"ts":1596568347000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's ClassAtomNoDash `-` ClassAtom","msgtype":"m.text"},"ts":1596568356000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1596568360000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually wait could that be","msgtype":"m.text"},"ts":1596568391000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ClassAtomNoDash ClassAtom ClassAtomNoDash?","msgtype":"m.text"},"ts":1596568405000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess that would make more sense","msgtype":"m.text"},"ts":1596568418000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"indexed 1 through _NcapturingParens_\" conflicts with 6.2.1's \"The elements of a list may be randomly accessed using 0-origin indices.\" so 6.2.1 should at least reflect that possibility.","msgtype":"m.text"},"ts":1596568506000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"gibson042: atm there's stuff like this \"If there does not exist a member a of set A such that Canonicalize(a) is cc, return failure\"","msgtype":"m.text"},"ts":1596569160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what if the evaluation semantics were changed so that the sets were pre-canonicalized","msgtype":"m.text"},"ts":1596569175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like what I'm already doing with _WordCharacters_, or something more?","msgtype":"m.text"},"ts":1596571332000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"every pattern evaluator that returns characters would have to call Canonicalize on them","msgtype":"m.text"},"ts":1596571429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like rn CharacterEscape returns CharacterValue of CharacterEscape","msgtype":"m.text"},"ts":1596571487000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so then it would return Canonicalize(CharacterValue of CharacterEscape)","msgtype":"m.text"},"ts":1596571500000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"CharacterSetMatcher appears to be the only place for that, at least if my PR is merged","msgtype":"m.text"},"ts":1596571899000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"so I think it would be something in that operation like \"1. Let _C_ be the CharSet that contains Canonicalize(_a_) if and only if _A_ contains _a_.\" and then subsequent use of _C_ rather than _A_.","msgtype":"m.text"},"ts":1596572891000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I found a suspected off-by-one error at https://tc39.es/ecma262/#sec-atomescape . Evaluation of AtomEscape :: `k` GroupName invokes BackreferenceMatcher with 0-indexed _parenIndex_ rather than 1-indexed _parenIndex_ + 1","msgtype":"m.text"},"ts":1596573854000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: No, I thought that too (see above), but _parenIndex_ is 1-indexed. I.e. the first (leftmost) group gets a _parenIndex_ of 1","msgtype":"m.text"},"ts":1596576172000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"because the GroupSpecifier that step 1 finds is *within* a group, so the leftmost GroupSpecifier still has one left-capturing paren to its left.","msgtype":"m.text"},"ts":1596576358000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I don't think that's right, AtomEscape :: `k` GroupName looks like `\\k<foo>`—there may not *be* enclosing parentheses","msgtype":"m.text"},"ts":1596576767000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"parentheses around `\\k<foo>` don't matter","msgtype":"m.text"},"ts":1596576835000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, I see","msgtype":"m.text"},"ts":1596576872000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"step 1 looks for a GroupSpecifier, which necessarily occurs within parens","msgtype":"m.text"},"ts":1596576895000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"specifically a left-cap paren to its immediate left","msgtype":"m.text"},"ts":1596576922000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1596577043000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Might be worth a Note.","msgtype":"m.text"},"ts":1596577061000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I was thinking an assertion, but I'm not sure if it would be better in that evaluation or in BackreferenceMatcher","msgtype":"m.text"},"ts":1596577086000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"You could certainly assert that parenIndex >= 1 (in either spot), but that doesn't help explain why it's true.","msgtype":"m.text"},"ts":1596577188000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but it does head off the mistaken assumption","msgtype":"m.text"},"ts":1596577278000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Maybe, if you put it right after the \"Let parenIndex be...\". If you put it in BackrefMatcher, it's still pretty easy to think that `k GroupName` fails to satisfy the assertion.","msgtype":"m.text"},"ts":1596577620000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Maybe best would be a Note in `k GroupName` and an assertion in BackrefMatcher.","msgtype":"m.text"},"ts":1596577796000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: https://github.com/tc39/ecma262/pull/2112/commits/6c45aff421737171d858e6361134ad5467506a06","msgtype":"m.text"},"ts":1596581088000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: what did i do wrong https://gc.gy/64289291.png","msgtype":"m.text"},"ts":1596584315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the linter does not expect method names to have underscores","msgtype":"m.text"},"ts":1596584772000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'll fix it before we land this","msgtype":"m.text"},"ts":1596584793000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aight","msgtype":"m.text"},"ts":1596584852000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ugh idk how to deal with https://tc39.es/ecma262/#step-json-parse-parse","msgtype":"m.text"},"ts":1596584878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe a grammar parameter?","msgtype":"m.text"},"ts":1596584936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"very pretty https://twitter.com/GinoRaidy/status/1290684214673846273","msgtype":"m.text"},"ts":1596585368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1596585373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/64290364.png","msgtype":"m.text"},"ts":1596585378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"stupid clipboard","msgtype":"m.text"},"ts":1596585380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"please disregard above association between \"very pretty\" and twitter link","msgtype":"m.text"},"ts":1596585398000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you mean how to deal with the extended PropertyDefinitionEvaluation semantics thing?","msgtype":"m.text"},"ts":1596585402000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1596585439000,"senderName":"devsnek","senderId":"devsnek@irc"}
]