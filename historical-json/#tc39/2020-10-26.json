[
{"content":{"body":"ljharb: I'd rather like a general fix to spreading an array w/ syntax rather than special tricks or one offs","msgtype":"m.text"},"ts":1603734967000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that's why i was thinking, \"if IsArray() and its constructor is %Array%\" would work","msgtype":"m.text"},"ts":1603735037000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because then spreading still does iteration for everything else, but for the common case we're worried about, a normal array in any realm, it'd be safe","msgtype":"m.text"},"ts":1603735058000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so kind of like the Promise#then exception","msgtype":"m.text"},"ts":1603735059000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which?","msgtype":"m.text"},"ts":1603735073000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"when using await","msgtype":"m.text"},"ts":1603735074000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ah, yes","msgtype":"m.text"},"ts":1603735082000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's a use case for subclasses, but there's no use case where we want people to change how Promise.prototype.then or Array.prototype[Symbol.iterator] works","msgtype":"m.text"},"ts":1603735116000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you want spreading an array to not use Symbol.iterator?","msgtype":"m.text"},"ts":1603735383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just want a safe spread op that doesn't delegate to a mutable thing","msgtype":"m.text"},"ts":1603735481000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"idc personally if it is an array","msgtype":"m.text"},"ts":1603735488000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/2212","msgtype":"m.text"},"ts":1603735535000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: yes, there's no value in it doing so","msgtype":"m.text"},"ts":1603736023000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i dislike random specialization","msgtype":"m.text"},"ts":1603737326000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's fair","msgtype":"m.text"},"ts":1603737361000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"altho i'm not sure how random it is; we have lots of things in the language that have a protocol but still have fallback behavior for builtins","msgtype":"m.text"},"ts":1603737382000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"reading the linked issue, not using iterators to read arguments seems like a better line of discussion","msgtype":"m.text"},"ts":1603737393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i suppose this one would be a bit different, with really only `await`","msgtype":"m.text"},"ts":1603737398000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: the issue is on `super(...args)`, not the `...args` in the signature","msgtype":"m.text"},"ts":1603737416000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1603737425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(as i understand it)","msgtype":"m.text"},"ts":1603737428000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ArgumentBindingInitialization or whatever right?","msgtype":"m.text"},"ts":1603737431000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"idc how it is solved, just introducing a syntax to use @@iterator directly would be enough","msgtype":"m.text"},"ts":1603737665000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that seems incredibly niche","msgtype":"m.text"},"ts":1603737786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though i think some people wanted that to be virtualizable? /me stares","msgtype":"m.text"},"ts":1603737790000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"@@ for all the builtin Symbols would be more sane as a whole to me","msgtype":"m.text"},"ts":1603737803000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you could just make a function which wraps things","msgtype":"m.text"},"ts":1603737837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1603737851000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`const [a, b, c] = iter([1, 2, 3])`","msgtype":"m.text"},"ts":1603737856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, but the problem is that the constructor is self contained","msgtype":"m.text"},"ts":1603737870000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so we don't want to delegate out","msgtype":"m.text"},"ts":1603737877000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"tell people not to override Array.prototype[@@iterator]","msgtype":"m.text"},"ts":1603737886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right now it delegates out to Array@@iterator which is probably saner than telling users to write a custom iterator","msgtype":"m.text"},"ts":1603737902000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: we don't control that","msgtype":"m.text"},"ts":1603737910000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we can tell people to use semicolons and they aren't forced to do so either","msgtype":"m.text"},"ts":1603737929000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right but like","msgtype":"m.text"},"ts":1603737971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if they delete or break array[@@iterator]","msgtype":"m.text"},"ts":1603737980000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"their app will stop working","msgtype":"m.text"},"ts":1603737985000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and they will put it back","msgtype":"m.text"},"ts":1603737991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or the app they're trying to maliciously interfere with will","msgtype":"m.text"},"ts":1603737996000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the point is to make the code more robust, not to get them to fix things manually","msgtype":"m.text"},"ts":1603738018000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"as long as robust code can sanely be written it seems fine to take any direction","msgtype":"m.text"},"ts":1603738041000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"right now super(...args) isn't able to be robust","msgtype":"m.text"},"ts":1603738050000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i really dislike the \"execute code you don't trust\" model","msgtype":"m.text"},"ts":1603738064000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thats generally the life of software big and small","msgtype":"m.text"},"ts":1603738084000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you don't audit every line of code and even if you do, that doesn't make it safe","msgtype":"m.text"},"ts":1603738096000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so put it on a vm somewhere instead of inviting it into your heap","msgtype":"m.text"},"ts":1603738123000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it isn't about \"we can make things trustworthy\" since that is... not reasonable","msgtype":"m.text"},"ts":1603738127000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: even in a different heap you can infect things","msgtype":"m.text"},"ts":1603738139000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"heap doesn't stop delegation issues","msgtype":"m.text"},"ts":1603738147000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ya like i said, vm somwhere","msgtype":"m.text"},"ts":1603738153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you pass in/out data","msgtype":"m.text"},"ts":1603738164000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"vm won't help","msgtype":"m.text"},"ts":1603738167000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"thats the whole injection attack vectors that are big in OWASP","msgtype":"m.text"},"ts":1603738181000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can solve *some* problems on all different levels","msgtype":"m.text"},"ts":1603738197000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this is just solving one problem on one level","msgtype":"m.text"},"ts":1603738204000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"keep solving problems on all levels","msgtype":"m.text"},"ts":1603738213000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"idk it just seems like if the security of your system hinges on the mutability of Array.prototype, you do not have a secure system","msgtype":"m.text"},"ts":1603738266000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"regardless of whether or not super(...args) uses @@iterator","msgtype":"m.text"},"ts":1603738282000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"every system relies on some level of assurance","msgtype":"m.text"},"ts":1603738290000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't see how being able to rely on code you write is a sign of things being bad","msgtype":"m.text"},"ts":1603738309000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"minimizing how much of the code is suspect is valuable","msgtype":"m.text"},"ts":1603738325000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"cuz it implies you're actively working against people patching the code around you","msgtype":"m.text"},"ts":1603738347000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which seems like the thing you should be addressing instead","msgtype":"m.text"},"ts":1603738353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: in all my 10+ years of working on JS, pretty much every system has patched the globals","msgtype":"m.text"},"ts":1603738368000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"google's ad scripts were patching Symbol a year or 2 back and broke parts of us","msgtype":"m.text"},"ts":1603738396000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1603738411000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it isn't like this is... uncommon","msgtype":"m.text"},"ts":1603738416000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, instead of acting like it doesn't happen when it is very common, we can address issues","msgtype":"m.text"},"ts":1603738440000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm sure people patch globals all the time","msgtype":"m.text"},"ts":1603738458000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't try to fight them","msgtype":"m.text"},"ts":1603738465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if they break my stuff i would just remove them","msgtype":"m.text"},"ts":1603738474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not fighting them?","msgtype":"m.text"},"ts":1603738476000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm just making my code work regardless","msgtype":"m.text"},"ts":1603738484000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't see how that is bad","msgtype":"m.text"},"ts":1603738502000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think it makes more sense to just avoid loading scripts that break things","msgtype":"m.text"},"ts":1603738605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can't reasonably ascertain if they do, and i don't control all the scripts","msgtype":"m.text"},"ts":1603738633000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: if you can write up a system that does that, I'd love it","msgtype":"m.text"},"ts":1603738644000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but I do not think it is possible w/ static analysis + human audit","msgtype":"m.text"},"ts":1603738661000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think someone made a startup for this","msgtype":"m.text"},"ts":1603738664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"managing injected scripts","msgtype":"m.text"},"ts":1603738669000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are many","msgtype":"m.text"},"ts":1603738674000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but the fact that not everyone is using such things is telling to me","msgtype":"m.text"},"ts":1603738710000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and you can't bail at runtime, because your site needs to keep working even if it does violate things temporarily","msgtype":"m.text"},"ts":1603738729000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so, we load things that we don't fully understand. that is simply the truth","msgtype":"m.text"},"ts":1603738757000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i still think its inherently useful to be able to patch things around","msgtype":"m.text"},"ts":1603738840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even native programs can swap stuff out using ld_preload and such","msgtype":"m.text"},"ts":1603738854000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ld_preload can't patch everything","msgtype":"m.text"},"ts":1603739040000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm not trying to prevent people from patching stuff, just trying to write code that won't misbehave if they do patch things","msgtype":"m.text"},"ts":1603739065000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you’re also assuming that “break things” is trivially detectable, even in the majority of cases","msgtype":"m.text"},"ts":1603739396000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"even if it’s not malicious, it could be just a mistake that’s hard to notice until damage is done","msgtype":"m.text"},"ts":1603739414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^ what happened to us via google mutating Symbol","msgtype":"m.text"},"ts":1603739512000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why did it mutate it, idk / fallback behavior?","msgtype":"m.text"},"ts":1603739529000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"google maps also had a Map/Set shim that broke a bunch of sites that were using es6-shim","msgtype":"m.text"},"ts":1603740029000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(they fixed it pretty quickly, luckily)","msgtype":"m.text"},"ts":1603740037000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do we technically allow non-callable constructors? they'd have to be exotic, and it seems like a bad idea to me, but i can't find a place where we disallow them","msgtype":"m.text"},"ts":1603756257000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"to me it seems like a bad idea to make things that are never actually callable have [[Call]] :-/ but i believe `typeof` will only return `function` if it has a [[Call]]","msgtype":"m.text"},"ts":1603756638000,"senderName":"ljharb","senderId":"ljharb@irc"}
]