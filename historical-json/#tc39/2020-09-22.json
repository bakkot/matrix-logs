[
{"content":{"body":"Bakkot: In Abstract Equality Comparison, near the bottom: \"If _x_ or _y_ are any of *NaN*, +&infin;, or -&infin;\"","msgtype":"m.text"},"ts":1600736346000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The infinities should be Float-ified.","msgtype":"m.text"},"ts":1600736368000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"is there a way","msgtype":"m.text"},"ts":1600737047000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"given some character","msgtype":"m.text"},"ts":1600737049000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to get something representing the category, maybe language of origin","msgtype":"m.text"},"ts":1600737061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like `a` is latin, `–º` is cyrillic, `Œ∑` is greek, etc","msgtype":"m.text"},"ts":1600737083000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure; that would be useful","msgtype":"m.text"},"ts":1600737141000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it doesn't need to be that exactly","msgtype":"m.text"},"ts":1600737148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"trying to build something that can detect things like \"–ºƒ±Œ∑Œ±—ÇœÉ\"","msgtype":"m.text"},"ts":1600737161000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol wow","msgtype":"m.text"},"ts":1600737169000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(someone edgy spelling the name Minato)","msgtype":"m.text"},"ts":1600737171000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1600737173000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there is cyrillic and greek","msgtype":"m.text"},"ts":1600737188000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1600737202000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck fixed, thanks","msgtype":"m.text"},"ts":1600737365000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Where can I know more about Observable Arrays?","msgtype":"m.text"},"ts":1600737844000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi looks like https://github.com/heycam/webidl/pull/840","msgtype":"m.text"},"ts":1600737897000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: thanks. `building.employees.length = 0;` and ` building.employees.push` will throw, hmm.","msgtype":"m.text"},"ts":1600738414000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Bakkot: Since we think that code unit is a sufficiently big problem, do you think it's worth a `String(\"content\", { format: \"utf-32\" })` proposal?","msgtype":"m.text"},"ts":1600739036000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"Copied from the delegates channel for posterity","msgtype":"m.text"},"ts":1600739046000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller what would that do?","msgtype":"m.text"},"ts":1600739051000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would mean that [] and others access by code point","msgtype":"m.text"},"ts":1600739065000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"since the string is assumed to be backed by UTF-32","msgtype":"m.text"},"ts":1600739075000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"i think grapheme indexed would be more useful","msgtype":"m.text"},"ts":1600739091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"presumably we'd also have a utf-8 and friends","msgtype":"m.text"},"ts":1600739091000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ehhhhhh probably not? but I'd have to think more about it; it might be","msgtype":"m.text"},"ts":1600739097000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: Sorry not quite sure what grapheme indexed is?","msgtype":"m.text"},"ts":1600739111000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"it is slow","msgtype":"m.text"},"ts":1600739126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but also what people expect :P","msgtype":"m.text"},"ts":1600739131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: üè≥Ô∏è‚Äçüåà is 4 code points","msgtype":"m.text"},"ts":1600739148000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"When would it differ from UTF-32 code point?","msgtype":"m.text"},"ts":1600739149000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"AH, ok","msgtype":"m.text"},"ts":1600739153000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"oh sorry i thought you were making a jab about grapheme indexing having to be iterative","msgtype":"m.text"},"ts":1600739171000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah, sounds like there's problems with my idea then","msgtype":"m.text"},"ts":1600739205000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"unicode is a bucket of fun","msgtype":"m.text"},"ts":1600739216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Out of curiosity, can you iterate grapheme clusters backwards?","msgtype":"m.text"},"ts":1600739242000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1600739253000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"ah, ok. Good to know","msgtype":"m.text"},"ts":1600739266000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"reverse_peek?","msgtype":"m.text"},"ts":1600739270000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"idk exactly how they work","msgtype":"m.text"},"ts":1600739276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_miller: `[...'üè≥Ô∏è‚Äçüåà'].reverse().join()` gives you two clusters :-p","msgtype":"m.text"},"ts":1600739284000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it's not optimized","msgtype":"m.text"},"ts":1600739284000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"but i would guess you have to walk backward until you hit something that could be followed","msgtype":"m.text"},"ts":1600739297000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.unicode.org/reports/tr29/","msgtype":"m.text"},"ts":1600739299000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"and then walk foward","msgtype":"m.text"},"ts":1600739300000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1600739301000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"yeah, that's fine","msgtype":"m.text"},"ts":1600739313000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"ljharb: That's because String iterators are code unit, not grapheme","msgtype":"m.text"},"ts":1600739316000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i wonder if that backtracking can be catastrophic","msgtype":"m.text"},"ts":1600739332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Does that work if the string is not well formed?","msgtype":"m.text"},"ts":1600739333000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"jridgewell: oh right the q was, iterate backwards, respecting grapheme clusters","msgtype":"m.text"},"ts":1600739334000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jridgewell: got it","msgtype":"m.text"},"ts":1600739338000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"You'd need a multiple reverse peek, till you see the start of a cluster, or no start so take the unit.","msgtype":"m.text"},"ts":1600739377000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://tc39.es/proposal-intl-segmenter/#sec-findboundary: \"Search¬†_string_¬†for the last segmentation boundary that is preceded by at most¬†_startIndex_¬†code units from the beginning, using locale¬†_locale_¬†and text element granularity¬†_granularity_.\"","msgtype":"m.text"},"ts":1600739389000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"I guess you'd know if you tried to read past the longest grapheme cluster","msgtype":"m.text"},"ts":1600739391000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"https://www.unicode.org/reports/tr29/#Random_Access","msgtype":"m.text"},"ts":1600739416000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Oh interesting","msgtype":"m.text"},"ts":1600739446000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"That's an interesting idea","msgtype":"m.text"},"ts":1600739454000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"But how do you know if you're actually at the Nth cluster? Seems like you'd need to something effectively O(n)","msgtype":"m.text"},"ts":1600739496000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1600739509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could also precompute the graphemes :P","msgtype":"m.text"},"ts":1600739528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"correct, indexing by cluster requires O(n)","msgtype":"m.text"},"ts":1600739541000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Bakkot: StringGetOwnProperty: _len_ is mathy, so  ‚Ñù(_len_) is redundant","msgtype":"m.text"},"ts":1600739544000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: https://en.wikipedia.org/wiki/Skip_list","msgtype":"m.text"},"ts":1600739550000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"assuming i understand the limitations of skip lists","msgtype":"m.text"},"ts":1600739603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck thanks, pushed","msgtype":"m.text"},"ts":1600739604000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the problem there is that graphemes don't have a specific length","msgtype":"m.text"},"ts":1600739611000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"chasing pointers is slow even if it has better big-o performance","msgtype":"m.text"},"ts":1600739621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: True but there are numbers where it's better e.g. if you have a 200MB string","msgtype":"m.text"},"ts":1600739661000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"for sure","msgtype":"m.text"},"ts":1600739667000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"200mb string :notlikethis:","msgtype":"m.text"},"ts":1600739680000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"*every top 200 webpage*","msgtype":"m.text"},"ts":1600739703000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1600739712000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wonder how many of those are me personally","msgtype":"m.text"},"ts":1600739724000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess my strings tend to be on the order of 100k, not quite that big","msgtype":"m.text"},"ts":1600739734000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: in #sec-pattern, \"the index into _Input_ of the character that was obtained from element _index_ of _str_\": _index_ is a Number, so should be wrapped in ‚Ñù()?","msgtype":"m.text"},"ts":1600747712000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck yup","msgtype":"m.text"},"ts":1600750400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hi there","msgtype":"m.text"},"ts":1600774779000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"can you suggest a channel for \"deprecated\" standard support such as ECMA-262 5 and ECMA-262 3?","msgtype":"m.text"},"ts":1600774893000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"aolko: you can just talk about those here","msgtype":"m.text"},"ts":1600784832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, any ui libraries for es5? Component ones","msgtype":"m.text"},"ts":1600788507000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"similar to riot","msgtype":"m.text"},"ts":1600788516000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"aolko: better question for #javascript","msgtype":"m.text"},"ts":1600789491000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er ##javascript","msgtype":"m.text"},"ts":1600789502000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nah, they are all about those es6+ and whatnot","msgtype":"m.text"},"ts":1600789523000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"if someone said that there they are wrong","msgtype":"m.text"},"ts":1600789712000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, they are actively pedalling es6+ only features and apis for starters","msgtype":"m.text"},"ts":1600789761000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"even tho that was uncalled for","msgtype":"m.text"},"ts":1600789786000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"anything js is on topic there","msgtype":"m.text"},"ts":1600789837000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"including good js libraries for a website targeting netscape","msgtype":"m.text"},"ts":1600789862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nope, they listed libraries __only__ for es6+, not even a single one from es5, some even rely on custom elements standards with is also uncalled for","msgtype":"m.text"},"ts":1600789921000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"chich*","msgtype":"m.text"},"ts":1600789928000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"which** (typo galore)","msgtype":"m.text"},"ts":1600789936000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"complain about it to them then","msgtype":"m.text"},"ts":1600789946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this is offtopic for this channel","msgtype":"m.text"},"ts":1600789951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, i'm not the one who ruined a glue language by slowly turning it into java and forming a terrible ecosystem we have today","msgtype":"m.text"},"ts":1600789986000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"yes that was me, apologies","msgtype":"m.text"},"ts":1600790007000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sarcasm not appreciated","msgtype":"m.text"},"ts":1600790031000,"senderName":"aolko","senderId":"aolko@irc"},
{"content":{"body":"Bakkot: FlattenIntoArray: _depth_ is mathy, so `_depth_ is *1*<sub>ùîΩ</sub>` is mixed-type.","msgtype":"m.text"},"ts":1600800624000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck pushed","msgtype":"m.text"},"ts":1600800871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: get %TypedArray%.prototype.byteLength: returns a Number, so \"return 0\" must be float-ified","msgtype":"m.text"},"ts":1600802252000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ditto get %TypedArray%.prototype.byteOffset","msgtype":"m.text"},"ts":1600802272000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"get %TypedArray%.prototype.length","msgtype":"m.text"},"ts":1600802287000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"similarly Atomics.notify re \"return _n_\"","msgtype":"m.text"},"ts":1600802373000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"does this change require explicit conversions everywhere","msgtype":"m.text"},"ts":1600802470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1600802474000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as it should","msgtype":"m.text"},"ts":1600802482000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can actually validate that with engine262 :D","msgtype":"m.text"},"ts":1600802482000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck pushed","msgtype":"m.text"},"ts":1600802484000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"In unescape, \"the code unit whose value is _n_\" but _n_ is a Number.","msgtype":"m.text"},"ts":1600802613000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm I was told for my normative PR that it'd end up as `return *+0*`; did that change?","msgtype":"m.text"},"ts":1600802698000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: pushed, also those couple of lines are awful","msgtype":"m.text"},"ts":1600802807000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling it will probably be `*+0*<sub>ùîΩ</sub>`","msgtype":"m.text"},"ts":1600802823000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but don't worry about it; I'll take care of the making sure things match going forward (and also the linter will catch simple cases like that)","msgtype":"m.text"},"ts":1600802862000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aye-aye","msgtype":"m.text"},"ts":1600802905000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: is there a rule for when you use \"the Number value for\" vs \"ùîΩ\" ?","msgtype":"m.text"},"ts":1600803001000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1600803008000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1600803011000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"change 'em all to F","msgtype":"m.text"},"ts":1600803018000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we will probably go through and try to make them consistent just before landing","msgtype":"m.text"},"ts":1600803023000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, just curious.","msgtype":"m.text"},"ts":1600803036000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"press F to pay your respects to IEEE-754","msgtype":"m.text"},"ts":1600803144000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: I'm assuming that CharacterValue returns a math-integer. If so, then in sec-patterns-static-semantics-character-value, the 3 occurrences of \"the Number value for\" should be deleted","msgtype":"m.text"},"ts":1600804459000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, looks like. pushed.","msgtype":"m.text"},"ts":1600804587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"looking forward to the SDO reorganization so that we can start writing down types for SDOs in a more coherent place","msgtype":"m.text"},"ts":1600804603000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Also in that clause, under \"RegExpUnicodeEscapeSequence :: `u` HexLeadSurrogate `\\u` HexTrailSurrogate\", 2007 changed `1. Let _cp_ be UTF16SurrogatePairToCodePoint(_lead_, _trail_).\\n1. Return the code point value of _cp_.`","msgtype":"m.text"},"ts":1600804613000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"to `Return UTF16SurrogatePairToCodePoint(_lead_, _trail_).`","msgtype":"m.text"},"ts":1600804621000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but I think that's not quite the same","msgtype":"m.text"},"ts":1600804642000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"`the code point value of _cp_` is the phrase that 'converts' a code point into a math-integer.","msgtype":"m.text"},"ts":1600804678000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(which is unintuitive, because \"an X value\" usually means \"a value of type X\")","msgtype":"m.text"},"ts":1600804756000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"At least, that's the most consistent meaning that I've been able to attach to it.","msgtype":"m.text"},"ts":1600804802000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think that particular change is the thing which prompted https://github.com/tc39/ecma262/issues/2181","msgtype":"m.text"},"ts":1600804850000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess I'll revert it for now and we can address as part of that issue, one way or the other","msgtype":"m.text"},"ts":1600804866000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1600804881000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(a better phrase might be \"the numeric value of code point _cp_\")","msgtype":"m.text"},"ts":1600804946000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"fixups: \"Return  the MV of |Hex4Digits|.\" has 2 spaces, and \"Return the the MV of |CodePoint|.\" has 2 \"the\"","msgtype":"m.text"},"ts":1600805061000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also, you missed \"the Number value\" under HexLeadSurrogate etc","msgtype":"m.text"},"ts":1600805151000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: in BackreferenceMatcher, 2007 changed \"The value of _A_'s *\"length\"* property\" to \"The mathematical value of _A_'s *\"length\"* property\", which makes sense. In sec-array-items, there's a similar case \"The value of _array_'s *\"length\"* property\" which should be changed likewise.","msgtype":"m.text"},"ts":1600806147000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck pushed","msgtype":"m.text"},"ts":1600806600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: ToLength could use clamping: Return the Number value for the result of clamping _len_ between 0 and 2^53 - 1.","msgtype":"m.text"},"ts":1600808951000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]