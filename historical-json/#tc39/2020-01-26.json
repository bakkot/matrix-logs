[
{"content":{"body":"ðŸ¤” does there any proposal like `import.self` to resolve this problem (`process.mainModule === module` esm equivalent)? https://github.com/nodejs/node/issues/15760","msgtype":"m.text"},"ts":1580011511000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: the recommendation for node is to use a separate file for \"main\" and \"bin\"; it's considered an antipattern to conflate them","msgtype":"m.text"},"ts":1580011620000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks: node could handle it without any proposal by adding `import.meta.something`, but the modules group decided not to support the antipattern.","msgtype":"m.text"},"ts":1580011646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok... so maybe there is no more use case need to reference the module itself I guess","msgtype":"m.text"},"ts":1580011702000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: i mean, you can self-reference the package in node 13.7+ by using the package name","msgtype":"m.text"},"ts":1580011825000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks: and theoretically you should be able to `import * as self from '.'` (altho i don't think that works right now)","msgtype":"m.text"},"ts":1580011846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"won't `import * as self from '.'` cause side effect?","msgtype":"m.text"},"ts":1580011892000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1580011938000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's a circular dep, but it wouldn't repeat any side effects","msgtype":"m.text"},"ts":1580011945000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you're right","msgtype":"m.text"},"ts":1580012055000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"self-import (including namespace) appears to work in node (13.7.0)","msgtype":"m.text"},"ts":1580014002000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"(though maybe you mean import relying on package.json for resolution, Iâ€™ve only tried with './specific-module-name.mjs')","msgtype":"m.text"},"ts":1580014066000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"if you do need to test if the current module is the entrypoint, process.argv might give you the means, though Iâ€™d be nervous about relying on it","msgtype":"m.text"},"ts":1580014167000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"bathos: self package import does. Self module import does too, youâ€™re saying? (without repeating the file name)","msgtype":"m.text"},"ts":1580014689000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Iâ€™d tested foo.mjs importing foo.mjs. I didnâ€™t test foo.mjs importing a package with \"main\": \"foo.mjs\". Iâ€™ll check it out now tho","msgtype":"m.text"},"ts":1580015421000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"I get a \"Cannot find module\" error when I try \".\", yeah.","msgtype":"m.text"},"ts":1580015548000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"thatâ€™s what i think node needs to add support for. It works in browsers i think","msgtype":"m.text"},"ts":1580015644000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"browsers with import maps you mean?","msgtype":"m.text"},"ts":1580015886000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"(I havenâ€™t tried import maps yet, but afaik thatâ€™s the closest analog, since otherwise itâ€™s just URLs-that-cannot-be-pathname-relative-unless-they-start-with-dot-slash-or-dot-dot-slash-or-slash.)","msgtype":"m.text"},"ts":1580015963000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"(i.e. in a browser self-import works fine, but \".\" alone would be rejected at step 2 here html.spec.whatwg.org/multipage/webappapis.html#resolve-a-module-specifier)","msgtype":"m.text"},"ts":1580016177000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"no, i mean no import maps","msgtype":"m.text"},"ts":1580016261000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but fair, that seems like a gap in browser esm too","msgtype":"m.text"},"ts":1580016283000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`.` is the current URL in every other browser relative url context","msgtype":"m.text"},"ts":1580016296000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, Iâ€™m not sure what the point of eliminating \".\" there is (perhaps it was an oversight). It doesnâ€™t seem necessary for the purpose of reserving \"bare names\".","msgtype":"m.text"},"ts":1580016507000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1580016855000,"senderName":"ljharb","senderId":"ljharb@irc"}
]