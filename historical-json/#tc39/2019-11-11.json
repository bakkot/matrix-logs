[
{"content":{"body":"AggregateError.proottype.toString is just Error.prototype.toString with a single string name change, is this intentional?","msgtype":"m.text"},"ts":1573438190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/proposal-promise-any/pull/37#discussion_r329601782","msgtype":"m.text"},"ts":1573438272000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"see also https://github.com/tc39/proposal-promise-any/issues/36","msgtype":"m.text"},"ts":1573438279000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i'm looking at 36 rn","msgtype":"m.text"},"ts":1573438287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not much in it","msgtype":"m.text"},"ts":1573438288000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the specific comment in 37 which I linked is I think the last anyone actually thought about the question","msgtype":"m.text"},"ts":1573438316000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"(cc mathiasbynens)","msgtype":"m.text"},"ts":1573438320000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i'm looking at https://tc39.es/proposal-promise-any/#sec-aggregate-error.prototype.toString","msgtype":"m.text"},"ts":1573438337000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like this could be an internal slot that changes the default string value","msgtype":"m.text"},"ts":1573438351000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you don't get inconsistent formatting","msgtype":"m.text"},"ts":1573438362000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example Error.prototype.toString.call is fairly common","msgtype":"m.text"},"ts":1573438370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well \"fairly common\" is relative","msgtype":"m.text"},"ts":1573438389000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but debug tooling does it a lot","msgtype":"m.text"},"ts":1573438396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"might as well just comment this on 36","msgtype":"m.text"},"ts":1573438516000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, is your question why is this not omittied entirely, so that it would inherit from error.prototype?","msgtype":"m.text"},"ts":1573438603000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"that seems reasonable to me","msgtype":"m.text"},"ts":1573438608000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"given that there are no other behavior changes","msgtype":"m.text"},"ts":1573438630000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1573438634000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"having the name come from `this.name` and fall back to `Error` seems totally reasonable; no one is likely to be deleting `AggregateError.prototype.name` anyway","msgtype":"m.text"},"ts":1573438675000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i don't think the default even needs overriding","msgtype":"m.text"},"ts":1573438735000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just removing the method from AggregateError should be enough","msgtype":"m.text"},"ts":1573438742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, that's what I meant","msgtype":"m.text"},"ts":1573438747000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"üëçüèª","msgtype":"m.text"},"ts":1573438752000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't really make sense to me tho to have it not look at the errors slot","msgtype":"m.text"},"ts":1573438897000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1573438918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"altho the `Error.prototype.toString.call` argument is decent","msgtype":"m.text"},"ts":1573438919000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: 'message' can refer to the errors, yeah?","msgtype":"m.text"},"ts":1573438932000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"and that gets added to the tostring","msgtype":"m.text"},"ts":1573438939000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"i suppose that's true","msgtype":"m.text"},"ts":1573438944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"as its currently specified its an exact clone of Error.prototype.toString","msgtype":"m.text"},"ts":1573438957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but what i mean is, i'd prefer to find a way that isn't just \"gee willikers, i sure hope impls make this useful\"","msgtype":"m.text"},"ts":1573438967000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i suppose if it was different in some way i wouldn't have brought it up","msgtype":"m.text"},"ts":1573438982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah i know, an explicit step about the errors was removed","msgtype":"m.text"},"ts":1573438983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"prior to you bringing it up (and it's valid to bring up now)","msgtype":"m.text"},"ts":1573438992000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: fwiw that is my usual approach to error messages","msgtype":"m.text"},"ts":1573438999000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"in the spec","msgtype":"m.text"},"ts":1573439003000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"clarity of error messages is something impls have historically competed and iterated on, at least a little, and spec'ing them hinders that","msgtype":"m.text"},"ts":1573439038000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"yeah true, i'm torn","msgtype":"m.text"},"ts":1573439051000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(I know that many of those messages are now depended upon by code, but still)","msgtype":"m.text"},"ts":1573439054000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"did y'all see what v8 did with JSON.stringify circular errors","msgtype":"m.text"},"ts":1573439057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"did not","msgtype":"m.text"},"ts":1573439063000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"https://gc.gy/40986295.png","msgtype":"m.text"},"ts":1573439073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hah, nice","msgtype":"m.text"},"ts":1573439079000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"has anything implemented AggregateError yet","msgtype":"m.text"},"ts":1573439229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"besides core-js","msgtype":"m.text"},"ts":1573439246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: just noticed, a lot of files you create in test262 are missing a newline on the last line, so they aren't technically valid text files according to posix","msgtype":"m.text"},"ts":1573444083000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"might wanna check your editor","msgtype":"m.text"},"ts":1573444103000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://www.npmjs.com/package/es-aggregate-error","msgtype":"m.text"},"ts":1573445212000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"all i could find was core-js","msgtype":"m.text"},"ts":1573445235000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems fine","msgtype":"m.text"},"ts":1573445241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i use that package in https://www.npmjs.com/package/string-replace-all","msgtype":"m.text"},"ts":1573445320000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you use aggregate errors in replaceAll?","msgtype":"m.text"},"ts":1573445353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh sorry wrong one","msgtype":"m.text"},"ts":1573445384000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: https://www.npmjs.com/package/promise.any","msgtype":"m.text"},"ts":1573445402000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"makes more sense","msgtype":"m.text"},"ts":1573445421000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: may I start working on tests for Promise.any if you or someone else didn't start yet? :) I see https://github.com/tc39/test262/pull/2406 is merged so it's time to add them. I also want to implement Promise.any in JSC so tests will help me","msgtype":"m.text"},"ts":1573480292000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"I also can fix AggregateError tests (see https://github.com/tc39/proposal-promise-any/pull/49#issuecomment-552400869) in either in the same PR or separately","msgtype":"m.text"},"ts":1573480808000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"reentrancy is funky in JS data types","msgtype":"m.text"},"ts":1573488853000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]