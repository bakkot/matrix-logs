[
{"content":{"body":"jmdyck: yes but generally posting comments on PRs is annoying; and programmatically editing comments, even the OP, can have race conditions with actual edits","msgtype":"m.text"},"ts":1566790157000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: i prefer things that fail, until you click ‚Äúdetails‚Äù and ack the report explicitly (which then makes it passing)","msgtype":"m.text"},"ts":1566790182000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, i didn't think comments on the PR was a good idea","msgtype":"m.text"},"ts":1566790203000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I was reading about GitHub Checks, which seems nicely integrated, but the instructions for setting up such a thing don't make sense to me","msgtype":"m.text"},"ts":1566790354000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: can you point me to something with a clickable \"details\"?","msgtype":"m.text"},"ts":1566792866000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: every travis-ci run on github","msgtype":"m.text"},"ts":1566793901000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oops, he left","msgtype":"m.text"},"ts":1566793905000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: did you implement ValidateAndApplyPropertyDescriptor in engine262? (re https://github.com/tc39/ecma262/pull/1677 )","msgtype":"m.text"},"ts":1566802386000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: okay then can you point me to a travis-ci run on github? I thought ecma262 used travis to generate the html rendering, but I don't see a \"details\" to click on.","msgtype":"m.text"},"ts":1566825746000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: as far as i know, engine262's implementation matches the spec","msgtype":"m.text"},"ts":1566826133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/engine262/engine262/blob/master/src/abstract-ops/objects.mjs#L119","msgtype":"m.text"},"ts":1566826198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: wouldn't removing those lines let non-configurable properties be overridden","msgtype":"m.text"},"ts":1566826565000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i believe it only lets \"writable\" be set to `false`, which is allowed when nonconfigurable","msgtype":"m.text"},"ts":1566829353000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: test262 runs perfectly with and without the change","msgtype":"m.text"},"ts":1566829406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i assume that's because there's no test for NaN","msgtype":"m.text"},"ts":1566829413000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: ecma262 only uses it on master branches. here's one: https://github.com/ljharb/es-abstract/pull/51","msgtype":"m.text"},"ts":1566829439000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: where in that function do you apply the descriptor?","msgtype":"m.text"},"ts":1566829473000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1566829489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you're missing step 9.","msgtype":"m.text"},"ts":1566829501000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1566829505000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in http://www.ecma-international.org/ecma-262/8.0/#sec-validateandapplypropertydescriptor","msgtype":"m.text"},"ts":1566829505000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and that step is the one that the early return trues bypass","msgtype":"m.text"},"ts":1566829513000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like the actual *application* of the descriptor","msgtype":"m.text"},"ts":1566829522000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(when current isn't undefined)","msgtype":"m.text"},"ts":1566829549000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not entirely sure what you're saying","msgtype":"m.text"},"ts":1566829593000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: tx","msgtype":"m.text"},"ts":1566829595000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: when `current` is undefined, Desc is applied to O in steps 2.c.i and 2.d.i. when `current` and `Desc` aren't both data, or both accessors, it's applied in steps 6.b.i and 6.c.i. when they're both data, or both accessors, it's applied in step 9. your implementation lacks step 9.","msgtype":"m.text"},"ts":1566829705000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: ie, overwriting an existing descriptor without flipping its type between data and accessor","msgtype":"m.text"},"ts":1566829724000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/engine262/engine262/blob/master/src/abstract-ops/objects.mjs#L213-L233","msgtype":"m.text"},"ts":1566829737000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"step 9","msgtype":"m.text"},"ts":1566829740000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh lol it's right there","msgtype":"m.text"},"ts":1566829792000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my bad","msgtype":"m.text"},"ts":1566829803000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok so then perhaps test262 is missing tests, because i can't see how setting an array's length property to be unwritable would work","msgtype":"m.text"},"ts":1566829824000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"defineProperty(array, 'length', { writable: false })?","msgtype":"m.text"},"ts":1566829846000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1566829918000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow `ValidateAndApplyPropertyDescriptor([], 'length', true, { Writable: true, Configurable: false, Value: 0, Enumerable: false }, { Writable: false })`","msgtype":"m.text"},"ts":1566829940000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's supposed to set writable to false, but it returns without applying, i believe","msgtype":"m.text"},"ts":1566829959000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://engine262.js.org/#code=MYewdgzgLgBAhjAvDA2gXQNwCgAOAnASzCgAoB5AIwCsBTYKAOgHMaoyB3MABTxBxrxQAngBEaEYIRxQQeEnAA0MAOQAbGmCZQAFsoCUe7JVr0GAExoAzIjR58Bw%2BUrUatupQG8Y7QlDgV1AC4YSzhVCBoYAF9DXEJicmo6RhY2Tjt%2BQVFxSQJpWScVdU0dfUMgA","msgtype":"m.text"},"ts":1566830080000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1566830143000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so the two lines i'm trying to remove; the implication is that they're only hit when applying the descriptor would be a noop?","msgtype":"m.text"},"ts":1566830278000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll take another look at my impl","msgtype":"m.text"},"ts":1566830291000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: it gets to 7.a","msgtype":"m.text"},"ts":1566830405000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but current.Writable is true","msgtype":"m.text"},"ts":1566830411000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so then it ends up at step 9","msgtype":"m.text"},"ts":1566830416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sets writable to false","msgtype":"m.text"},"ts":1566830425000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ohhh right because current writable is true, it falls down to step 9 in your impl","msgtype":"m.text"},"ts":1566830494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean hopefully this is just a bug in my impl, but i still can't find it :-) i'll keep looking","msgtype":"m.text"},"ts":1566830508000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"alright, i think i found the issue; and it's indeed the implication i mentioned above. i'll close the PR. thanks for helping me work through it!","msgtype":"m.text"},"ts":1566830818000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"üëçüèª","msgtype":"m.text"},"ts":1566830921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Are private methods \"bound\"?","msgtype":"m.text"},"ts":1566836453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. will `const x = this.#x; x()` work for `class Y { #x() { ... } }`?","msgtype":"m.text"},"ts":1566836479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i don't think so","msgtype":"m.text"},"ts":1566836706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would be kind of limiting i think","msgtype":"m.text"},"ts":1566836739000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hmm hmm","msgtype":"m.text"},"ts":1566837571000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's weird because they're \"per instance properties\" conceptually? But not bound, I guess?","msgtype":"m.text"},"ts":1566837586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: HasOwnProperty(this, #x) is true?","msgtype":"m.text"},"ts":1566840839000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I dunno, I'm just repeating what I was told","msgtype":"m.text"},"ts":1566841759000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they aren't bound","msgtype":"m.text"},"ts":1566843367000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Domenic: they're conceptually per-instance, though i expect implementations to share private methods among all instances of the class (v8 does)","msgtype":"m.text"},"ts":1566843514000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: #x is an own property of the instance?","msgtype":"m.text"},"ts":1566844027000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not on the prototype?","msgtype":"m.text"},"ts":1566844036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: well, private fields and methods aren't properties and aren't reflectable via HasOwnProperty","msgtype":"m.text"},"ts":1566844065000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: i know","msgtype":"m.text"},"ts":1566844076000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure what the question means then","msgtype":"m.text"},"ts":1566844085000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is #x mounted to the prototype or the instance","msgtype":"m.text"},"ts":1566844094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the spec?","msgtype":"m.text"},"ts":1566844104000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in the spec","msgtype":"m.text"},"ts":1566844106000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're in [[PrivateFieldValues]] of objects iirc, let me see","msgtype":"m.text"},"ts":1566844178000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"of the instance","msgtype":"m.text"},"ts":1566844193000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"man classfields are weird","msgtype":"m.text"},"ts":1566844221000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're definitely not on the prototype because #-name lookups never cause a prototype lookup","msgtype":"m.text"},"ts":1566844274000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"sorry for maybe some mistakes... irc some new for me...","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"ok then: want discuss my idea - i write here:","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"https://esdiscuss.org/topic/async-class#content-25","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"irc seems fine only with texts or not?","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"i wrote some wrapper and you can find more info there in url up","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"but for simple explanation - just proposal syntax:","msgtype":"m.text"},"ts":1566847826000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"async class PromiseClass { //return Promise","msgtype":"m.text"},"ts":1566847830000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"constructor() {}//async()=>Promise object","msgtype":"m.text"},"ts":1566847832000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"}//class","msgtype":"m.text"},"ts":1566847835000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"async class AsyncClass extends PromiseClass{ // can ext Class|PromiseClass","msgtype":"m.text"},"ts":1566847837000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"constructor(){ await super();} //async()=>Promise object","msgtype":"m.text"},"ts":1566847839000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"}//AsyncClass","msgtype":"m.text"},"ts":1566847841000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"again sorry for all, i try my best, but not always get)","msgtype":"m.text"},"ts":1566847843000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"hm no multiline support or i do something wrong?","msgtype":"m.text"},"ts":1566847886000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"devsnek: I am confused why you keep directing people who want to discuss normative details of the iterator helpers proposal to the ecma262 repo","msgtype":"m.text"},"ts":1566855671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"uhh","msgtype":"m.text"},"ts":1566855682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean with or without the generator stuff, the iterator methods will exist","msgtype":"m.text"},"ts":1566855699000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm seeing it more as a separate design choice","msgtype":"m.text"},"ts":1566855717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that being said i've been trying to use language like \"encourage\"","msgtype":"m.text"},"ts":1566855773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the design choice of whether the methods appear to users as generator functions or not is a choice which your proposal will need to make; your proposal is the right place to discuss it","msgtype":"m.text"},"ts":1566856990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well if my ecma262 pr was approved, i wouldn't go against it in proposals","msgtype":"m.text"},"ts":1566857021000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and if it wasn't proposed, i wouldn't go against the current pattern","msgtype":"m.text"},"ts":1566857030000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wasn't approved*","msgtype":"m.text"},"ts":1566857036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"your PR appears to just be about how things are written down","msgtype":"m.text"},"ts":1566857063000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is irrelevant to the question of which they are","msgtype":"m.text"},"ts":1566857068000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my pr is specifying all future iterators as built in generators","msgtype":"m.text"},"ts":1566857095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which comes with new ways of writing things down and visible changes to the objects","msgtype":"m.text"},"ts":1566857120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"... that's not something you can do in the spec? you can't constrain what future writers are going to write.","msgtype":"m.text"},"ts":1566857128000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in theory no, but its kind of about introducing a pattern","msgtype":"m.text"},"ts":1566857156000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'd be introducing the pattern by choosing a particular path in your proposal","msgtype":"m.text"},"ts":1566857175000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the right place to discuss that is your proposal","msgtype":"m.text"},"ts":1566857182000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since it is the first place we'll need to make that choice","msgtype":"m.text"},"ts":1566857212000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"personally i don't see it that way","msgtype":"m.text"},"ts":1566857233000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but people are free to send messages to the proposal repo or the pr","msgtype":"m.text"},"ts":1566857273000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like everyone else who's commented on the topic does, no?","msgtype":"m.text"},"ts":1566857273000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i assumed most people just weren't aware of my pr to ecma262","msgtype":"m.text"},"ts":1566857291000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: for me, the spec PR only exists to make existing iterator-producing functions simpler to spec/write/read","msgtype":"m.text"},"ts":1566862679000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: i'm not on board with making future ones observably be generators","msgtype":"m.text"},"ts":1566862691000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: still the issue with toStringTag?","msgtype":"m.text"},"ts":1566862743000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: also `[].values().__proto__` vs `(function *() {}()).__proto__`, and a number of other small things","msgtype":"m.text"},"ts":1566862790000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what about that vs is the problem specifically","msgtype":"m.text"},"ts":1566862817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that they're not the same kind of thing, and so changing the former to be the same kind of thing as the latter is observable and thus not ok","msgtype":"m.text"},"ts":1566862835000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't follow","msgtype":"m.text"},"ts":1566862861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and making future iterator-producing functions all the same while leaving the old ones specced the same and also \"being\" the same creates a big inconsistency","msgtype":"m.text"},"ts":1566862862000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like type those two into chrome's repl","msgtype":"m.text"},"ts":1566862869000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like i understand they're different objects","msgtype":"m.text"},"ts":1566862885000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you're considered about the consistency of future ones vs what we currently have?","msgtype":"m.text"},"ts":1566862896000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and different prototype chains and whatnot.","msgtype":"m.text"},"ts":1566862897000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1566862898000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"both observably, and in terms of spec text","msgtype":"m.text"},"ts":1566862906000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's fair","msgtype":"m.text"},"ts":1566862913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"originally i was excited about this generator spec text thing because i thought it'd allow us to much more ergonomically express all past and future iterator-producing functions","msgtype":"m.text"},"ts":1566862944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wasn't thinking of it as making them actually *be* generator functions","msgtype":"m.text"},"ts":1566862954000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"from my perspective, i'd rather get the 30+ ones we're about to do \"right\" (not that right is objective) and call the four we currently have mistakes","msgtype":"m.text"},"ts":1566862982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i remember last meeting you mentioned wanting to keep things very consistent, and i generally agree, but perhaps this is a disagreement of the layering of this","msgtype":"m.text"},"ts":1566863120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i see generators as consistent with the current design because i don't think the exact prototype stuff matters that much at runtime","msgtype":"m.text"},"ts":1566863161000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like you can still call next and all that","msgtype":"m.text"},"ts":1566863174000,"senderName":"devsnek","senderId":"devsnek@irc"}
]