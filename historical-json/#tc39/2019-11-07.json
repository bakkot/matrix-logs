[
{"content":{"body":"is anyone planning on extending Math methods for bigint","msgtype":"m.text"},"ts":1573101224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i haven‚Äôt had time to make a proposal but yes, I‚Äôm super on board for championing that","msgtype":"m.text"},"ts":1573105991000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"l gf z xx","msgtype":"m.text"},"ts":1573139274000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"oops sorry üòÖ","msgtype":"m.text"},"ts":1573139327000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"how old were you when you realized that class declarations are mutable","msgtype":"m.text"},"ts":1573144190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean JS being JS, it's as expected, I would say","msgtype":"m.text"},"ts":1573144907000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"\"it's not mutable unless I say so\" is one of the best parts of Rust, but you kind of need to have a language be like that from the get-go","msgtype":"m.text"},"ts":1573145005000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i thought engine262 had a bug when class X{} X = 1 reassigned X","msgtype":"m.text"},"ts":1573145024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tbf I would've assumed that `class X {}` and `let X = class X {};` had some sort of edge-case difference that I hadn't thought about","msgtype":"m.text"},"ts":1573145308000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but you can always make that `const` whereas the reverse wouldn't've been true","msgtype":"m.text"},"ts":1573145371000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i always thought it was `const`","msgtype":"m.text"},"ts":1573145385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it makes sense if you consider the pre-ES6 code it was aiming to streamline though","msgtype":"m.text"},"ts":1573145845000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1573146036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the flatMap functions in the iterator helpers proposal still don't get errors right","msgtype":"m.text"},"ts":1573151491000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"for some reason https://github.com/tc39/proposal-iterator-helpers/issues/54 is locked so I can't comment there","msgtype":"m.text"},"ts":1573151509000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"(I neglected to review them for correctness when I was touching them for #55, sorry)","msgtype":"m.text"},"ts":1573151527000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"bakkot: oh yeah that issue was more just a reminder for me, you can open a separate one","msgtype":"m.text"},"ts":1573152776000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"‚àö","msgtype":"m.text"},"ts":1573152784000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"littledan: thats a lotta issues","msgtype":"m.text"},"ts":1573153075000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I dunno, those are the substantial issues I want to discuss","msgtype":"m.text"},"ts":1573153098000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"no they're good","msgtype":"m.text"},"ts":1573153105000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it was just kinda funny","msgtype":"m.text"},"ts":1573153109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no need to answer all the questions right up front! We'll have to bring in a lot of stakeholders here to find thorough answers","msgtype":"m.text"},"ts":1573153123000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1573153134000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I have been drafting this for some time. I wanted to get it posted last week, but, you know how it is...","msgtype":"m.text"},"ts":1573153151000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: i'm just not sure of this syntax because its kind of unclear what systems that don't support the metadata are supposed to do","msgtype":"m.text"},"ts":1573153940000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ignore it? error on unknown fields?","msgtype":"m.text"},"ts":1573153949000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what systems would not support metadata?","msgtype":"m.text"},"ts":1573153970000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"like my postgresql js implementation supports field x","msgtype":"m.text"},"ts":1573153984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"node doesn't support field x","msgtype":"m.text"},"ts":1573153988000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does node throw, ignore, something else?","msgtype":"m.text"},"ts":1573153995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in either case you could end up with unexpected behaviour","msgtype":"m.text"},"ts":1573154009000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: arguments that are \"not present\" are undefined?","msgtype":"m.text"},"ts":1573155246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes","msgtype":"m.text"},"ts":1573155256000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: i believe there‚Äôs somewhere in the spec that says that","msgtype":"m.text"},"ts":1573155265000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i understood that to only be times when the phrase \"not present\" isn't in play","msgtype":"m.text"},"ts":1573155281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"perhaps i misread it","msgtype":"m.text"},"ts":1573155284000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the phrase ‚Äúpresent‚Äù is the only way to distinguish","msgtype":"m.text"},"ts":1573155296000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so you *can* distinguish, but you needn't","msgtype":"m.text"},"ts":1573155307000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and places where it‚Äôs observably distinguished to user code are considered legscy","msgtype":"m.text"},"ts":1573155322000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*legacy","msgtype":"m.text"},"ts":1573155323000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i guess in that case, that pr to iterator helpers is good as is","msgtype":"m.text"},"ts":1573155361000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what a weird problem","msgtype":"m.text"},"ts":1573155380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot: shouldn't we only call IteratorClose for errors that don't happen because of iterator protocol stuff","msgtype":"m.text"},"ts":1573158800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I realized when I was making this PR that you might have interpreted my previous statement about this to mean that","msgtype":"m.text"},"ts":1573158836000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"understandably, since it was ambiguous","msgtype":"m.text"},"ts":1573158850000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1573158853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but I think the correct thing is, we do not call IteratorClose on an _iterator which is broken_, in the sense of failing to conform to the iterator prototocol","msgtype":"m.text"},"ts":1573158880000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"but if some _other_ iterator is broken, that's not the fault of the first iterator, so it still needs to get closed gracefully","msgtype":"m.text"},"ts":1573158895000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1573158895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this closes the outer iterator","msgtype":"m.text"},"ts":1573158899000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah exactly","msgtype":"m.text"},"ts":1573158902000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"got it got it","msgtype":"m.text"},"ts":1573158917000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also seems i need to figure out the order of arguments for IfAbruptCloseIterator","msgtype":"m.text"},"ts":1573158956000,"senderName":"devsnek","senderId":"devsnek@irc"}
]