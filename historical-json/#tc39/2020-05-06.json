[
{"content":{"body":"Do you think anyone actually creates a \"class Number {}\" in their code? Would it be a breaking change for a proposal to depend on such syntax for \"extending\" the Number object?","msgtype":"m.text"},"ts":1588731854000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"it's a breaking change regardless of whether it breaks anybody, but I'd bet money that it does exist out there","msgtype":"m.text"},"ts":1588733682000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah that's a totally reasonable thing to write","msgtype":"m.text"},"ts":1588736700000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(maybe not totally)","msgtype":"m.text"},"ts":1588736728000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's definitely reasonable in a non-top scope","msgtype":"m.text"},"ts":1588738255000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Sirisian: `class extends Number` is how you extend the number object?","msgtype":"m.text"},"ts":1588740618000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Sirisian: if you mean, mutating it, it would be an absolutely horrific idea imo to provide any encouragement, let alone syntax, for mutating objects you don't own","msgtype":"m.text"},"ts":1588740638000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb, This was in the context of adding operators to a class. Was trying to think of a simple syntax that used extensions classes like in my above example. (The extensions would only work for defining operators). I guess in C++ if I remember it would be like creating a friend to a free function operator overload, but in that you need access to the class to define the friend to access private variables.","msgtype":"m.text"},"ts":1588741548000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"i'm not sure what \"friend\" would mean in JS","msgtype":"m.text"},"ts":1588741817000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In any case I'd need a way to refer to I guess the intrinsic object as the specification calls it. I don't think there's an elegant syntax that could be made for that. Starting to see why proposal uses the syntax it does.","msgtype":"m.text"},"ts":1588742419000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"String.isWellFormed(str), String.prototype.isWellFormed, or meh?","msgtype":"m.text"},"ts":1588767305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"likely friend in JS just means having a shared private id in scope","msgtype":"m.text"},"ts":1588771275000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can do that with nested classes currently, but not across source texts","msgtype":"m.text"},"ts":1588771292000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the operator overloading proposal was designed to meet multiple different integrity goals, described in the explainer. It feels like the discussion here was focusing on a subset of them.","msgtype":"m.text"},"ts":1588773249000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"annevk \"well formed\" in this context meaning \"valid UTF-16\"?","msgtype":"m.text"},"ts":1588783442000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: yeah, well-formed seems to be the term used for UTF-8 in ECMAScript","msgtype":"m.text"},"ts":1588783652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bakkot: lone surrogate detector is also fine, I don't really care about the specifics","msgtype":"m.text"},"ts":1588783696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/encoding/issues/174 has context","msgtype":"m.text"},"ts":1588783713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems reasonable to me; cc mathiasbynens","msgtype":"m.text"},"ts":1588783857000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sgtm too","msgtype":"m.text"},"ts":1588786473000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"anyone who has graphic design experience please weigh in on https://github.com/tc39/ecmarkup/pull/178","msgtype":"m.text"},"ts":1588801186000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am not a graphic designer and do not want to try to figure out what the correct graphic design is for this","msgtype":"m.text"},"ts":1588801206000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or like UI/UX design really, not graphic design","msgtype":"m.text"},"ts":1588801218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if any v8 people around: are you aware of how v8 handles stack traces for errors thrown with inlined functions in the stack?","msgtype":"m.text"},"ts":1588801386000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"Bakkot, Standard convention for an accordion independent of left/right position is points right is closed and points down is open. That said I've seen the up/down used also. If it's on the left the former convention is more clearly correct. The trick is to pick one and make it part of your identity like tabs/spaces.","msgtype":"m.text"},"ts":1588802242000,"senderName":"Sirisian","senderId":"Sirisian@irc"},
{"content":{"body":"rickbutton: there is a bit of data on sharedfunctioninfo which maps inline locations to usable source positions","msgtype":"m.text"},"ts":1588802493000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thx! ill look there devsnek","msgtype":"m.text"},"ts":1588802540000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: actually i lied its OptimizedCompilationInfo","msgtype":"m.text"},"ts":1588802559000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1588802666000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: is there a specific thing you're trying to do?","msgtype":"m.text"},"ts":1588804648000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rickbutton: https://source.chromium.org/chromium/chromium/src/+/master:v8/src/execution/frames.cc;l=1534?q=OptimizedFrame::Summarize&ss=chromium&originalUrl=https:%2F%2Fcs.chromium.org%2F is what iterates the inlined frames","msgtype":"m.text"},"ts":1588804692000,"senderName":"shu","senderId":"shu@irc"}
]