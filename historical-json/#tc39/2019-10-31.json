[
{"content":{"body":"anyone know what this is talking about? https://github.com/tc39/proposals/issues/254","msgtype":"m.text"},"ts":1572487788000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"was just gonna ask","msgtype":"m.text"},"ts":1572487920000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is there even such a thing as a \"github theme\"?","msgtype":"m.text"},"ts":1572487940000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no idea","msgtype":"m.text"},"ts":1572488243000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1572489806000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"question: is it allowed (or even a good idea) to mix the `e` and `n` notations for numbers?","msgtype":"m.text"},"ts":1572492420000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I guess it'll definitely be nice to represent huge bigint literals.","msgtype":"m.text"},"ts":1572492454000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"FWIW, I tried to exploit `1e11 + 0n` but got slapped in the face with a `TypeError: Cannot mix BigInt and other types, use explicit conversions`.","msgtype":"m.text"},"ts":1572492511000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: i don't think it's allowed","msgtype":"m.text"},"ts":1572492990000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, I just figured that out :P","msgtype":"m.text"},"ts":1572493019000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"question is, should it be?","msgtype":"m.text"},"ts":1572493025000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"can't decide if it's a bad idea or not.","msgtype":"m.text"},"ts":1572493035000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i'd love to use it, like `1e11n` etc","msgtype":"m.text"},"ts":1572493059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but at this point it'd need a separate approval","msgtype":"m.text"},"ts":1572493067000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: would it make a half-decent proposal, or do you think it's going to be hard to convince people to approve it since `BigInt(1e11)` is less convenient but gets the job done?","msgtype":"m.text"},"ts":1572493332000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i'm not really sure","msgtype":"m.text"},"ts":1572493358000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my issue is, unlike a bunch of other things, it is going to be impossible to do it in userland.","msgtype":"m.text"},"ts":1572493372000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"but since `BigInt(1e33) + 1n` works but `1e33 + 1` doesn't, i don't think \"userland\" matters","msgtype":"m.text"},"ts":1572493405000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeeeeeeeah.","msgtype":"m.text"},"ts":1572493431000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I wish I could just `1e33n + 1n`, you know.","msgtype":"m.text"},"ts":1572493444000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"does that have prior art though?","msgtype":"m.text"},"ts":1572494095000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I thought exponent notation is basically associated with IEEE-754, even when there's no fractional part involved","msgtype":"m.text"},"ts":1572494167000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: uhh, honestly, I didn't give any thought to it, but I could look into it...","msgtype":"m.text"},"ts":1572494184000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"it's still useful to avoid repetition of zeroes","msgtype":"m.text"},"ts":1572494273000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"'cause I'm not sure if there's precedence for that in languages with int64 literals","msgtype":"m.text"},"ts":1572494281000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's precedent on my graphing calculator","msgtype":"m.text"},"ts":1572494587000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"...BASIC has BigInt?","msgtype":"m.text"},"ts":1572496590000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"basic?","msgtype":"m.text"},"ts":1572496646000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"unless graphing calculators these days use a different language","msgtype":"m.text"},"ts":1572497066000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"anyway, at a glance, I can't find a language which permits exponent notation in an integer literal","msgtype":"m.text"},"ts":1572497229000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm talking about the TI-83","msgtype":"m.text"},"ts":1572497255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"seems like TI-83 BASIC may have *only* had floating point numbers","msgtype":"m.text"},"ts":1572497701000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't mean in programming, i mean like in the normal interface","msgtype":"m.text"},"ts":1572497732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the math that you're trying to do with a graphing calculator is not restricted to integers though...","msgtype":"m.text"},"ts":1572497809000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's true","msgtype":"m.text"},"ts":1572497863000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i think i could do 1.3e4, etc","msgtype":"m.text"},"ts":1572497882000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which is floating point :P","msgtype":"m.text"},"ts":1572497987000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"even in dynamic languages, there's a clear notion of an integer literal: https://rosettacode.org/wiki/Literals/Integer","msgtype":"m.text"},"ts":1572498028000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"whatever this Frink language is seems to have the only real example I can find:","msgtype":"m.text"},"ts":1572498051000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"1ee39 // (exact exponent, an integer with exact value 10^39)","msgtype":"m.text"},"ts":1572498058000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in scheme there's #e1e9, which is a bigint rather than 1e9 which is a float","msgtype":"m.text"},"ts":1572510987000,"senderName":"wingo","senderId":"wingo@irc"},
{"content":{"body":"wingo: oho, interesting","msgtype":"m.text"},"ts":1572534030000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"some good number constants here https://esolangs.org/wiki/Brainfuck_constants","msgtype":"m.text"},"ts":1572535057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1572535510000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"would it be possible in theory to add concurrent collections to ECMAScript on top of shared memory and value types proposal?","msgtype":"m.text"},"ts":1572545401000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"chicoxyzzy: the only type of shared memory in JS is bytes, so what would it mean to have a concurrent collection?","msgtype":"m.text"},"ts":1572545990000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"bakkot: value types have fixed memory layout so I guess it should be possible to create something like ConcurrentQueue or ConcurrentStack from C#. Maybe very limited, say ConcurrentQueue<int64>","msgtype":"m.text"},"ts":1572546758000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"chicoxyzzy: wait, why would value types have fixed memory layout?","msgtype":"m.text"},"ts":1572546784000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"oh I'm wrong probably. It's about struck types https://github.com/tschneidereit/proposal-typed-objects/blob/master/explainer.md#types","msgtype":"m.text"},"ts":1572546851000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"struct*","msgtype":"m.text"},"ts":1572546863000,"senderName":"chicoxyzzy","senderId":"chicoxyzzy@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/1755#issuecomment-548532220 is because I told that person a library of mine only supports the current node lts","msgtype":"m.text"},"ts":1572551531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: lol so they just posted on a random thing you'd filed?","msgtype":"m.text"},"ts":1572554013000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it would seem so","msgtype":"m.text"},"ts":1572554139000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So Python 3.8 added syntax for indicating positional-only and keyword-only parameters https://docs.python.org/3/whatsnew/3.8.html","msgtype":"m.text"},"ts":1572557013000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And the syntax would actually slot into JS nicely (with the only difference being that we default to positional-only).","msgtype":"m.text"},"ts":1572557043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In 3.8, `def foo(a, b, /, c, d, *, e, f)`, `a` and `b` can only be passed by position, not name; `e` and `f` can only be passed by keyword, not position, and `c` and `d` have the default behavior of allowing either.","msgtype":"m.text"},"ts":1572557130000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://tc39.es/proposal-iterator-helpers/ contains some calls to IteratorStep with one argument, and some with two. What's that about?","msgtype":"m.text"},"ts":1572557165000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"TabAtkins: I feel like destructuring is a strictly superior solution to named parameters","msgtype":"m.text"},"ts":1572558717000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I guess with the exception that it does not allow something to be passed as either named or positional, but in honesty I am not sure it is good to allow that","msgtype":"m.text"},"ts":1572558736000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"I still deeply miss position-or-keyword, yeah.","msgtype":"m.text"},"ts":1572558745000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"favorite part of python invocations","msgtype":"m.text"},"ts":1572558750000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's always seemed kind of contrary to the \"one and only one obvious way\" philosophy","msgtype":"m.text"},"ts":1572558793000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"jorendorff: it's the value that next() is called eith","msgtype":"m.text"},"ts":1572558941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: afaict IeratorStep does not take a second argument","msgtype":"m.text"},"ts":1572559002000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"either in the spec or in the proposal","msgtype":"m.text"},"ts":1572559009000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"uhhhh","msgtype":"m.text"},"ts":1572559025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1572559026000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, i see","msgtype":"m.text"},"ts":1572559028000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah, there's a piece missing","msgtype":"m.text"},"ts":1572559033000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"bakkot: I will look into that :)","msgtype":"m.text"},"ts":1572559040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or a second proposal adds it, or something","msgtype":"m.text"},"ts":1572559047000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"bakkot: That's a general philosophy, not a straitjacket. ^_^","msgtype":"m.text"},"ts":1572559094000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i also prefer destructuring","msgtype":"m.text"},"ts":1572559119000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I like building from primitives","msgtype":"m.text"},"ts":1572559127000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: of course, but it feels weird to have a feature whose purpose is solely to allow multiple ways of doing most things","msgtype":"m.text"},"ts":1572559166000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"when I am writing python I never know which style to prefer, and it's cognitive friction when switching between codebases","msgtype":"m.text"},"ts":1572559186000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"trailing commas is enough","msgtype":"m.text"},"ts":1572559217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"figuring out if a function uses named or destructuring would be painfuo","msgtype":"m.text"},"ts":1572559238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"painful*","msgtype":"m.text"},"ts":1572559244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i wonder if JS users want this","msgtype":"m.text"},"ts":1572559288000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I do find python arguments really cool though","msgtype":"m.text"},"ts":1572559372000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in languages without a single object primitive like js it's a godsend","msgtype":"m.text"},"ts":1572559390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: What do you mean? Python's got {} just like JS.","msgtype":"m.text"},"ts":1572559441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"does py have destructuring?","msgtype":"m.text"},"ts":1572559489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1572559499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and dictionary lookups use strings not identifiers right","msgtype":"m.text"},"ts":1572559508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes...?","msgtype":"m.text"},"ts":1572559515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is unsure what this has to do with \"languages without a single object primitive\"","msgtype":"m.emote"},"ts":1572559527000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh it's not related to that sentence","msgtype":"m.text"},"ts":1572559536000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was just trying to remember","msgtype":"m.text"},"ts":1572559542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Python's `{}` is not like JS's `{}`","msgtype":"m.text"},"ts":1572559551000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it's more like `new Map(...)` in JS","msgtype":"m.text"},"ts":1572559564000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Ah yeah then. Correct, but for the argument case it doesn't matter, since argnames are strings.","msgtype":"m.text"},"ts":1572559574000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1572559596000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"one thing I really want from py is function annotations","msgtype":"m.text"},"ts":1572559613000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"both the comments and the type expressions","msgtype":"m.text"},"ts":1572559621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yus","msgtype":"m.text"},"ts":1572559720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"time to make an AI that merges languages together","msgtype":"m.text"},"ts":1572559853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and run it on elang and py","msgtype":"m.text"},"ts":1572559859000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and thus js 2.0 shall be born","msgtype":"m.text"},"ts":1572559869000,"senderName":"devsnek","senderId":"devsnek@irc"}
]