[
{"content":{"body":"Why does Math.pow not handle bigint type?","msgtype":"m.text"},"ts":1594225285000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules: a general concern about overloading; see https://github.com/tc39/proposal-bigint/issues/197#issuecomment-467941106","msgtype":"m.text"},"ts":1594225738000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: got it.","msgtype":"m.text"},"ts":1594226434000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"it would be nice if super could be used in normal function expressions","msgtype":"m.text"},"ts":1594232094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like when you're trying to override a method in a hacky way","msgtype":"m.text"},"ts":1594232103000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think that would make more sense if we didn't have the whole [[HomeObject]] thing","msgtype":"m.text"},"ts":1594232227000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"(a thing for which I've never entirely understood the motivation, tbh)","msgtype":"m.text"},"ts":1594232243000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"more magic is always good right?","msgtype":"m.text"},"ts":1594232251000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1594232258000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I have a slide in an internal talk I've been writing which contains only the words \"Magic Is Bad\"","msgtype":"m.text"},"ts":1594232274000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1594232284000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe its time to overhaul classes","msgtype":"m.text"},"ts":1594232288000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"*in a web compatible way*","msgtype":"m.text"},"ts":1594232293000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"super also works in object literals","msgtype":"m.text"},"ts":1594232304000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"well, super property access, anyway","msgtype":"m.text"},"ts":1594232308000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1594232313000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this would be vastly more useful if `__proto__` weren't considered a bad pattern","msgtype":"m.text"},"ts":1594232335000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"maybe that's a problem with what is considered a bad pattern, though","msgtype":"m.text"},"ts":1594232343000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"you can use super in method definitions","msgtype":"m.text"},"ts":1594232366000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in object literals","msgtype":"m.text"},"ts":1594232369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, it's just that the super is going to be Object.prototype unless you've mutated the proto after the fact or have used `__proto__` in the initial literal","msgtype":"m.text"},"ts":1594232455000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"and both of the \"unless\" things are usually frowned upon","msgtype":"m.text"},"ts":1594232472000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so having syntax which is only useful if you do frowned-upon things or for some reason want to access properties of Object.prototype is... weird","msgtype":"m.text"},"ts":1594232503000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i don't think people generally frown on __proto__ in literals","msgtype":"m.text"},"ts":1594232587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, maybe. I don't see it used much, certainly","msgtype":"m.text"},"ts":1594232690000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"we shouldn't've put it in annex b if we were expecting it to continue to be good practice","msgtype":"m.text"},"ts":1594232707000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"`{ a: 1 } with null`","msgtype":"m.text"},"ts":1594233296000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bakkot_: thanks for the write up. I'm not sure I understand/agree with it still but it seems to give a clear idea. I do have some replies to each point though.","msgtype":"m.text"},"ts":1594237459000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"per 1: Mainly it seems that the idea of \"is-a\" simply cannot be applied to classes that have null prototypes is a claim. So that would mean they are not describable in general? If they are not describable as being a thing that seems odd in its own.","msgtype":"m.text"},"ts":1594237484000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"per 2: it starts with the claim extends `null` is the same as no heritage, which is partially the debate (missing heritage doesn't dynamic delegate / uses Object not `null`) so I'm unclear on why that is being treated as given.","msgtype":"m.text"},"ts":1594237576000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"per 3: this explanation doesn't seem to be rooted in anything?","msgtype":"m.text"},"ts":1594237604000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"4 is derived from 2 and 3 which seems ok, but it doesn't seem to follow through. it relies on the model of 2 and 3 as being intuitive and given which both of them seem confusing to me at least on first few reads","msgtype":"m.text"},"ts":1594237674000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I think a key framing is \"think of instances of this class as also being instances of any other, broader class.\" as being the pre-requisite for *allowing* the idea super to be considered","msgtype":"m.text"},"ts":1594237754000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"to me, super() doesn't actual tie to a specific class / concrete thing to call and does some really magical stuff if taken in isolation","msgtype":"m.text"},"ts":1594237793000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it seems, to you super() is being tied to some concrete thing to call and that a class must exist but I'm not clear on why it is concrete nor why it must directly exist","msgtype":"m.text"},"ts":1594237843000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think we can reason about what is sensical/non-sensical to frame our side whichever way in retrospective we want on a personal level","msgtype":"m.text"},"ts":1594237902000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but to me I'm unclear on why super() is being stated as inherently non-sensical","msgtype":"m.text"},"ts":1594237919000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'd agree super.foo() is non-sensical, it is requesting a specific thing to be delegated, but it is unclear why super() is","msgtype":"m.text"},"ts":1594237962000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: will write up responses so I can post them all at once, one sec","msgtype":"m.text"},"ts":1594238325000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: i will state that to me this is seeming very much towards trying to make things fit with a mental model and not about learnability/debuggability/refactorability/consistency which the more i think on those the more i think even if it doesn't 100% a mental model it would be preferable to require it","msgtype":"m.text"},"ts":1594238427000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm just unclear on what the downside of requiring it is concretely besides the extra characters","msgtype":"m.text"},"ts":1594238477000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and that falls down to i'm unclear on why a \"baseclass calling super()","msgtype":"m.text"},"ts":1594238500000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"\"baseclass\"","msgtype":"m.text"},"ts":1594238505000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"must mean errors","msgtype":"m.text"},"ts":1594238515000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i do see things like having a constructor body be usable for both a base and subclass as a boon, syntax does hint on if something is requires, matching every other heritage (including Object) requires calling super() even if it errors, etc.","msgtype":"m.text"},"ts":1594238976000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"required*","msgtype":"m.text"},"ts":1594238999000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but the explanation is kind of heady so far","msgtype":"m.text"},"ts":1594239029000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oof, that was a long one","msgtype":"m.text"},"ts":1594239057000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: how does “super installs calls fields” play into your gist?","msgtype":"m.text"},"ts":1594239069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*class fields","msgtype":"m.text"},"ts":1594239082000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ? what does that mean when there is no heritage?","msgtype":"m.text"},"ts":1594239272000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: `super()` first invokes the superclass, and then installs the *current class*’s public and private fields","msgtype":"m.text"},"ts":1594239433000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: https://gist.github.com/bakkot/8ca6db3b995d55f3b6886a5be87d0f38","msgtype":"m.text"},"ts":1594239456000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"ljharb I haven't said anything about fields? I'm not sure what you're asking.","msgtype":"m.text"},"ts":1594239466000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck: so on a `class extends null`, either 1) `super()` would install that class’s fields, or 2) `this` would be automatically available and the fields would be installed prior to the constructor running","msgtype":"m.text"},"ts":1594239467000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: right","msgtype":"m.text"},"ts":1594239470000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: your gist says “this is what super *does*\"","msgtype":"m.text"},"ts":1594239476000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: but it doesn’t mention class fields","msgtype":"m.text"},"ts":1594239481000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: so i’m asking you how your mental model adjusts to the other thing super does.","msgtype":"m.text"},"ts":1594239494000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, the thing that has nothing to do with a class hierarchy","msgtype":"m.text"},"ts":1594239510000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I would not say that `super()` installs fields; I would say that the class constructor does this itself as soon as `super()` has provided the object onto which the fields should be installed","msgtype":"m.text"},"ts":1594239552000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"^","msgtype":"m.text"},"ts":1594239569000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i mean, i type `super()` and if i don’t, the class fields don’t get installed","msgtype":"m.text"},"ts":1594239675000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"surely the class mechanics might be doing it, but that’s not the constructor. but thanks, i think that answers my mental model question","msgtype":"m.text"},"ts":1594239697000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: I'd state c.) that your conclusions doesn't mesh with the terminology not that I reject either the terminology or conclusion itself. in particular i don't understand the terminology of super/sub class since not having a class above in the hierarchy seems to be confounded by things ` class X {} ` being treated as a base class but it does inherit from Object and that super() is tied to a concrete thing","msgtype":"m.text"},"ts":1594239707000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"> Specifically, to me, super is a reification of the relationship between classes discussed above - hence the name - and does not make sense in the absence of such a relationship.","msgtype":"m.text"},"ts":1594239754000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this is interesting to me since it doubles down again on a concrete/direct relationship rather than what to me appears to be an indirect relationship","msgtype":"m.text"},"ts":1594239757000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"> [Breaking this OOP mental] is a very significant cost.","msgtype":"m.text"},"ts":1594239812000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"can you clarify this","msgtype":"m.text"},"ts":1594239816000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think the mental model simply doesn't mesh with reality and thats causing me troubles","msgtype":"m.text"},"ts":1594239860000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"since things with a superclass are being treated as non-subclasses in discussions","msgtype":"m.text"},"ts":1594239877000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and things with a heritage (or lack of in the case of null) are being asserted that the heritage cannot be considered an is-a relationship indirectly in the same way that `extends Foo` can while `extends Foo` doesn't actually assert things being a `Foo`","msgtype":"m.text"},"ts":1594239963000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"re: \"`class X {} ` being treated as a base class but it does inherit from Object\": the point is that I am talking only about how I mentally organize my code. It happens to be the case that every instance of `class {}` inherits from Object, in Javascript's mechanics (and Java's for that matter), but this is a mechanical fact about the implementation of `class` in the language rather than a reflection of a relationship I am","msgtype":"m.text"},"ts":1594239973000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":" specifically intending or thinking about wrt the structure of my program.","msgtype":"m.text"},"ts":1594239973000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i think if we had used a different token than `class` this discussion would be less interesting","msgtype":"m.text"},"ts":1594239978000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bakkot_: right, and that is confusing to me","msgtype":"m.text"},"ts":1594240000000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"because these claims are not matching reality nor claiming to enhance actual programs themselves","msgtype":"m.text"},"ts":1594240025000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so i'm not sure what is being argued for and why","msgtype":"m.text"},"ts":1594240040000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"um.","msgtype":"m.text"},"ts":1594240050000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i see the terms, but the terms are being given as if they are truths somehow and parts of those are confusing me","msgtype":"m.text"},"ts":1594240074000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I guess I have not thus far explicitly made the claim that the ability to think about the structure of my programs and have that be reflected by the programs themselves is valuable, so let me explicitly say that now.","msgtype":"m.text"},"ts":1594240085000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: sure, but now thats much more subjective","msgtype":"m.text"},"ts":1594240109000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"This is all subjective, yes.","msgtype":"m.text"},"ts":1594240117000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"yes, but in degrees","msgtype":"m.text"},"ts":1594240126000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't think this is very subjective, as these things go.","msgtype":"m.text"},"ts":1594240142000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"subjective except that the write-up above has gone to lengths to ensure that it reflects the most basic concepts of OOP","msgtype":"m.text"},"ts":1594240146000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the ones from which it would be disingenuous to diverge and still use a keyword like `class`","msgtype":"m.text"},"ts":1594240168000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: in my OOP courses in college/high school we didn't have these rigid models","msgtype":"m.text"},"ts":1594240172000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"somewhat objectively, the default for `extends` is `Object`","msgtype":"m.text"},"ts":1594240203000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i did understand that a subclass inherits","msgtype":"m.text"},"ts":1594240205000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but the definition of a base class in these recent talks is all over the place","msgtype":"m.text"},"ts":1594240231000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i think there is a desire for omission to be treated like a base class and acknowledgement that it is not reality, but to treat an explicit value (null) as a base class even if it has a heritage","msgtype":"m.text"},"ts":1594240313000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don't understand the actual benefit of the desire","msgtype":"m.text"},"ts":1594240327000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I don't know what \"that is not reality\" means there","msgtype":"m.text"},"ts":1594240331000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"it is a base class","msgtype":"m.text"},"ts":1594240334000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: it inherits","msgtype":"m.text"},"ts":1594240339000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you get .toString etc","msgtype":"m.text"},"ts":1594240343000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that is not the definition I am using!","msgtype":"m.text"},"ts":1594240344000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I was very careful with my definitions!","msgtype":"m.text"},"ts":1594240349000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: i think your definitions are confusing to me as I've stated","msgtype":"m.text"},"ts":1594240392000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1594240412000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"I don't know how to get past that","msgtype":"m.text"},"ts":1594240415000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"i also think that if you’re arguing a more broad concept of class heritage, “a subclass inherits from a base class” is a part of it","msgtype":"m.text"},"ts":1594240418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there’s no class hierarchy without inheritance","msgtype":"m.text"},"ts":1594240431000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"these are things which are, to me, extremely bedrock foundational principles of OOP","msgtype":"m.text"},"ts":1594240432000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"and JS isn’t merely an OOP language, it’s multi-paradigm","msgtype":"m.text"},"ts":1594240445000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which is why there’s a number of language semantics that don’t mesh with those principles","msgtype":"m.text"},"ts":1594240465000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and obv it’s totally fine to pick and choose the semantics you care about for your own mental model","msgtype":"m.text"},"ts":1594240486000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: i was explained OOP and we did state that base/sub/super classes as terms, but in languages where everything is a delegation (recursive object root type) you can't have a base class for example","msgtype":"m.text"},"ts":1594240488000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it seems there is a sub/super relationship mental model difference as part of the issue","msgtype":"m.text"},"ts":1594240543000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"and the sub/super are the same for those? it simply doesn't make sense to try and force those terms there","msgtype":"m.text"},"ts":1594240572000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`super` is the term the language already uses","msgtype":"m.text"},"ts":1594240665000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"we are debating the semantics of a token literally spelled `super()`","msgtype":"m.text"},"ts":1594240677000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: sure, seems fine to call the language to perform super() steps even if there isn't a super to me?","msgtype":"m.text"},"ts":1594240701000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"super() steps to me are indirect not a concrete/direct thing","msgtype":"m.text"},"ts":1594240727000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if we’re talking about literal spelling, then we can’t really ignore the presence of `extends`","msgtype":"m.text"},"ts":1594240728000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"iow either the concrete syntax is important, or else it would be the same discussion of super was spelled `init()`","msgtype":"m.text"},"ts":1594240748000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*if","msgtype":"m.text"},"ts":1594240753000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"super() is extremely confusing in general and I can't easily think of it as a generic function call","msgtype":"m.text"},"ts":1594240762000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb I read \"extends null\" as \"extends nothing\", i.e. \"does not extend anything\", i.e. \"is a base class\"","msgtype":"m.text"},"ts":1594240767000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"none of that seems inconsistent with anything I've said","msgtype":"m.text"},"ts":1594240779000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"that is clear, which suggests that `class {}` is not a base class","msgtype":"m.text"},"ts":1594240785000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: is the same true for extends undefined?","msgtype":"m.text"},"ts":1594240787000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"because it doesn’t extend nothing","msgtype":"m.text"},"ts":1594240789000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb `class {}` also does not extend anything","msgtype":"m.text"},"ts":1594240809000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"so... no?","msgtype":"m.text"},"ts":1594240817000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"and yet, it inherits from Object, which is the same thing","msgtype":"m.text"},"ts":1594240818000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: I'd very strongly it does","msgtype":"m.text"},"ts":1594240820000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"argue*","msgtype":"m.text"},"ts":1594240825000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"“x extends y” to me is a statement both about the syntax and about the runtime behavior","msgtype":"m.text"},"ts":1594240834000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"java/ruby classes extend object by default even if you omit the clause","msgtype":"m.text"},"ts":1594240853000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i suppose the weird part is that `class { }` doesn’t already have a null proto","msgtype":"m.text"},"ts":1594240856000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb as I said above, several times, it is an interesting mechanical fact that the resulting objects have `Object.prototype` in their prototype chain, but this has very little to do with the relationships between structures I am thinking about when organizing my program, which is the thing I actually care about","msgtype":"m.text"},"ts":1594240901000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"perhaps the oddity here is that `class`, `extends`, and `super` are all familiar from class inheritance but \"null proto\" is inherently prototypal","msgtype":"m.text"},"ts":1594240901000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bakkot_: i find it strange that you’d think about how your program is organized when defining classes but not when using them","msgtype":"m.text"},"ts":1594240930000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"... what?","msgtype":"m.text"},"ts":1594240943000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"rkirsling: yes, i 1000% agree that all the spellings in `class` are terrible because they evoke a classical inheritance mindset :-) but that ship has sailed","msgtype":"m.text"},"ts":1594240953000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well I didn't mean that so much as like","msgtype":"m.text"},"ts":1594240966000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb I have no idea how you got that from anything I said","msgtype":"m.text"},"ts":1594240966000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: “has Object.prototype in their prototype chain” is part of how your class instances are organized","msgtype":"m.text"},"ts":1594240969000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bakkot_: it’s not just a mechanical fact, it’s a core part of the organization of your instances.","msgtype":"m.text"},"ts":1594240984000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we're having a hard time because the goal isn't to instantiate a non-Object","msgtype":"m.text"},"ts":1594240984000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb \"is represented by electricity moving through silicons\" is a part of how my classes are implemented, but that is still not an organizing principle which I keep in mind most of the the time when designing the implementation of a class","msgtype":"m.text"},"ts":1594241057000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"lol ok fair","msgtype":"m.text"},"ts":1594241067000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so like, `extends Object` might be default but even with null proto we're not trying to instantiate something that can't hold properties","msgtype":"m.text"},"ts":1594241067000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but i'd think the runtime behavior of your instances *is* something you keep in mind when designing the implementation of a class","msgtype":"m.text"},"ts":1594241081000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like “is this a prototype method or a static method\"","msgtype":"m.text"},"ts":1594241089000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or “what instance methods will this have from its prototype chain\"","msgtype":"m.text"},"ts":1594241098000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hence maybe `extends null` could be called dangerous if that phrasing inherently mixes worlds","msgtype":"m.text"},"ts":1594241109000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the fact that an object has Object.prototype in its prototype chain is virtually never relevant to the organization of my code","msgtype":"m.text"},"ts":1594241118000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"other prototypes which I have explicitly put in the proto chain are","msgtype":"m.text"},"ts":1594241134000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: but that doesn't match reflection utilities in other languages either","msgtype":"m.text"},"ts":1594241174000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there’s a bunch of coding styles where that’s true, sure","msgtype":"m.text"},"ts":1594241175000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ruby // class A; end # A.superclass => Object","msgtype":"m.text"},"ts":1594241176000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but if you’re using your instance as a dictionary, or using `instanceof Object` anywhere, it matters","msgtype":"m.text"},"ts":1594241189000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"pythong: class Foo: \\n pass \\n issubclass(object, Foo) => true","msgtype":"m.text"},"ts":1594241208000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"same for java/etc.","msgtype":"m.text"},"ts":1594241222000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ljharb I am not using my `class {}` instances as dictionaries","msgtype":"m.text"},"ts":1594241222000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bakkot_: i understand that, but that isn’t something universally true","msgtype":"m.text"},"ts":1594241243000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i’ve seen lots of (bad) code that does `Object.assign(this, opts)` or similar","msgtype":"m.text"},"ts":1594241255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and you can still use super.toString even if you don't have an extends clause right?","msgtype":"m.text"},"ts":1594241279000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i don’t do it in my own code either, but i’m not *unaware* of the existing of Object.prototype; if i were, i wouldn’t want extends null in the first place","msgtype":"m.text"},"ts":1594241283000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*existence","msgtype":"m.text"},"ts":1594241287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i feel called out","msgtype":"m.text"},"ts":1594241308000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yes, this is a claim about how people tend to reason about their code. it is about abstractions. obviously all abstractions can break down in some cases: `+ 1` does not actually \"add one\" in the mathematical sense, because of integer overflow, but I still claim that is how one typically thinks about what that code doeos","msgtype":"m.text"},"ts":1594241314000,"senderName":"bakkot_","senderId":"bakkot_@irc"},
{"content":{"body":"bradleymeck: yes, `(new class { x() { return super.toString(); } }).toString()` works as expected","msgtype":"m.text"},"ts":1594241333000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck: `(new class { constructor() { return Object.create(null); } x() { return super.toString(); } }).x()` throws tho","msgtype":"m.text"},"ts":1594241381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(oops, s/.toString/.x` in my first example, same result)","msgtype":"m.text"},"ts":1594241392000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well yes because you replaced the result ;-p","msgtype":"m.text"},"ts":1594241399000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm pretty sure it'd work if i also installed the `x` method onto the null object","msgtype":"m.text"},"ts":1594241414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: thats because super is tied to its scope not the the call though I thought","msgtype":"m.text"},"ts":1594242159000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: i believe that’s right","msgtype":"m.text"},"ts":1594242602000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: am i a member of the editors team on GH? every time you request a review from it I get a notification saying you requested a review from me","msgtype":"m.text"},"ts":1594245781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"um, not that i'm aware","msgtype":"m.text"},"ts":1594245831000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"let me check","msgtype":"m.text"},"ts":1594245837000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://usercontent.irccloud-cdn.com/file/Z5AMMh92/Screenshot_20200708-170413.jpg","msgtype":"m.text"},"ts":1594245866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: you aren't; it might be a weird github bug since you've commented on the pr","msgtype":"m.text"},"ts":1594245897000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"perhaps","msgtype":"m.text"},"ts":1594245905000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i request the editors team to review a *lot* of PRs","msgtype":"m.text"},"ts":1594245905000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I've noticed :D","msgtype":"m.text"},"ts":1594245929000,"senderName":"devsnek","senderId":"devsnek@irc"}
]