[
{"content":{"body":"jmdyck: re: multiline <h1>s: that works less well for optional parameters, I would think","msgtype":"m.text"},"ts":1616979296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did you have something in mind for that case?","msgtype":"m.text"},"ts":1616979304000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rather than indicating optional params by putting brackets around them, you could just pick a way to indicate optional-ness of each param on its line.","msgtype":"m.text"},"ts":1616979503000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"In my pr, I say e.g. \"_foo_ : (optional) an integer\"","msgtype":"m.text"},"ts":1616979531000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(ecmarkup would presumably complain if a non-optional param followed an optional)","msgtype":"m.text"},"ts":1616979580000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1616981168000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that doesn't express all present in, e.g., `GetIterator ( _obj_ [ , _hint_ [ , _method_ ] ] )`","msgtype":"m.text"},"ts":1616981183000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*all the information present in","msgtype":"m.text"},"ts":1616981190000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"are you thinking of the possibility of ( _a_, [ _b_, _c_ ] ) ?","msgtype":"m.text"},"ts":1616982127000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes, as in `FlattenIntoArray ( _target_, _source_, _sourceLen_, _start_, _depth_ [ , _mapperFunction_, _thisArg_ ] )`","msgtype":"m.text"},"ts":1616982155000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well, like I said ~5 years ago, \"Or you could acknowledge that there will always be limits to the invocation constraints that can be expressed in the parameters,  and just decide that coordinating the optionality of two parameters is  beyond that limit. (I.e., just say it in the description and enforce it  in the alg.)\"","msgtype":"m.text"},"ts":1616982315000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(Note that FlattenIntoArray's alg does enforce it.)","msgtype":"m.text"},"ts":1616982355000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It looks like FlattenIntoArray is the only such case.","msgtype":"m.text"},"ts":1616982499000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"mm, yeah, that's an option","msgtype":"m.text"},"ts":1616982553000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I should ask, for the purposes of balancing these tradeoffs, is there a thing you're looking to accomplish with structured headers?","msgtype":"m.text"},"ts":1616982622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"mainly to make it easier to do static analysis.","msgtype":"m.text"},"ts":1616982982000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I also think that having the structure will encourage spec-authors to fill it in, which will improve the spec for human readers. You could accomplish that without structured headers, but I think it would be harder.","msgtype":"m.text"},"ts":1616983190000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I imagine having everything 'declared' will also make things somewhat easier for implementers.","msgtype":"m.text"},"ts":1616983250000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And it provides a place to put future useful info, like https://github.com/tc39/ecma262/issues/2283","msgtype":"m.text"},"ts":1616983354000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(which is maybe just an aspect of the 'static analysis' point)","msgtype":"m.text"},"ts":1616983387000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(oh, it also takes care of https://github.com/tc39/ecma262/issues/253)","msgtype":"m.text"},"ts":1616983735000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1616983919000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, thinking it through some","msgtype":"m.text"},"ts":1616983923000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think we should stick to just AOs to start, since built-in functions are not yet consistent, and making them so shouldn't be part of this PR","msgtype":"m.text"},"ts":1616983992000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which means that there will continue to be headers which use the `[` notation for optional arguments","msgtype":"m.text"},"ts":1616984022000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I hesitate to have two different notations for optional arguments, even though they'd be used for different types of things","msgtype":"m.text"},"ts":1616984060000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which leads me towards putting the types in the dl, at least for now","msgtype":"m.text"},"ts":1616984086000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"separately, I don't want to handle return types until after we fix https://github.com/tc39/ecma262/issues/1796,","msgtype":"m.text"},"ts":1616984123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since there are lots of things which don't logically return completion records, and I don't really want to write down that they do","msgtype":"m.text"},"ts":1616984138000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you don't have to. it depends on how you define the semantics of the 'returns' section.","msgtype":"m.text"},"ts":1616984189000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it's hard to define the semantics of that section, because it's not in a consistent state right now","msgtype":"m.text"},"ts":1616984301000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So to fix 1796, you're planning to insert a \"Returns foo.\" sentence into every preamble?","msgtype":"m.text"},"ts":1616984305000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Something like that, yes.","msgtype":"m.text"},"ts":1616984329000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Not sure exactly what the wording for the completion record case will be yet.","msgtype":"m.text"},"ts":1616984349000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"It returns a Completion Record which, if its [[Type]] is ~normal~, has a [[Value]] which is a Foo.\", maybe","msgtype":"m.text"},"ts":1616984375000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or in the non-completion record case, \"It returns a Foo\"","msgtype":"m.text"},"ts":1616984389000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or, possibly, not a sentence, but a new clause in the first sentence, as in \"The abstract operation ExampleOp takes arguments _foo_ and _bar_ and returns a Foo\"","msgtype":"m.text"},"ts":1616984444000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"re \"It returns a Completion Record which, if its [[Type]] is ~normal~, ...\": (1) ick, and (2) https://github.com/tc39/ecma262/issues/497","msgtype":"m.text"},"ts":1616984498000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"editors are strongly opposed to the approach in the OP of that issue","msgtype":"m.text"},"ts":1616984524000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(myself included)","msgtype":"m.text"},"ts":1616984530000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"They've never said so.","msgtype":"m.text"},"ts":1616984548000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm, I'll try to get something from the group on record","msgtype":"m.text"},"ts":1616984578000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm opposed, at any rate","msgtype":"m.text"},"ts":1616984586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for the reason Domenic gave in that thread","msgtype":"m.text"},"ts":1616984593000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Domenic didn't understand it.","msgtype":"m.text"},"ts":1616984603000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"perhaps I don't either then?","msgtype":"m.text"},"ts":1616984662000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or he mistook the reasoning","msgtype":"m.text"},"ts":1616984665000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or maybe i'm thinking of something else.","msgtype":"m.text"},"ts":1616984704000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"No, yeah, he said \"It seems the motivation here is brevity (omitting !)\", and I responded that was incorrect, and he never replied.","msgtype":"m.text"},"ts":1616984791000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, sure, I agree he misread the motivation","msgtype":"m.text"},"ts":1616984804000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me state my own reasoning, then: I am uncomfortable with anything which allows you to touch the return value of an AO which can throw without explicitly unwrapping the value","msgtype":"m.text"},"ts":1616984871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is, having a return type along the lines of \"string, or an abrupt completion\" is bad, because a consumer can treat that as a string","msgtype":"m.text"},"ts":1616984897000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not correct for them to do so, but it's an easier mistake to make than in the case that the AO always returns a completion record","msgtype":"m.text"},"ts":1616984934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's already possible in the status quo to \"touch the return value of an AO which can throw without explicitly unwrapping the value\"","msgtype":"m.text"},"ts":1616985003000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup, and that's one of the things #1796 would aim to fix","msgtype":"m.text"},"ts":1616985023000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(step 5, \"Remove the bit which allows implicit unwrapping of completion records\")","msgtype":"m.text"},"ts":1616985029000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how is 497 worse?","msgtype":"m.text"},"ts":1616985035000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, it wouldn't be worse than the status quo","msgtype":"m.text"},"ts":1616985048000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it would be a two-steps-forward one-step-back kind of thing","msgtype":"m.text"},"ts":1616985059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but 497 does eliminate implicit unwrapping","msgtype":"m.text"},"ts":1616985139000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes, and that's a step forward","msgtype":"m.text"},"ts":1616985152000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so what's the step backward?","msgtype":"m.text"},"ts":1616985216000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it leads to a world where \"1. Let _x_ be Foo(_bar_). 1. Return _x_ + 1.\" would be coherent, even if Foo could sometimes throw, as long as Foo would not throw for this particular line.","msgtype":"m.text"},"ts":1616985269000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"But I explicitly say that you don't have to omit '!'. You can still require '!'.","msgtype":"m.text"},"ts":1616985316000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The thing which would require `!` in that case would be a line of prose which said \"in order to refer to the return value of an AO which sometimes returns abruptly but cannot in the particular case in question, you must prefix the call with `!`\", presumably?","msgtype":"m.text"},"ts":1616985375000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I want the \"type system\" to ensure that","msgtype":"m.text"},"ts":1616985386000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes and yes.","msgtype":"m.text"},"ts":1616985426000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"if you want the \"type system\" to ensure that, it'll be better to have a good type system.","msgtype":"m.text"},"ts":1616985450000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well, yes, agreed","msgtype":"m.text"},"ts":1616985459000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but even with the very ad-hoc one we have, I think the same principle applies","msgtype":"m.text"},"ts":1616985477000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what i'm implying is, Normal Completions don't make for a good type system.","msgtype":"m.text"},"ts":1616985538000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"how not?","msgtype":"m.text"},"ts":1616985545000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Either<T, E> is a pretty typical building block for things like this, in my experience","msgtype":"m.text"},"ts":1616985571000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rust, e.g., formalizes it in Result<T, E>","msgtype":"m.text"},"ts":1616985588000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, but Either<T, E> isn't what the spec is doing. It's doing more like Either<Completion[Normal, T], Completion[Abrupt, E]>","msgtype":"m.text"},"ts":1616985677000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and that's a lot of cruft that just gets in the way.","msgtype":"m.text"},"ts":1616985695000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"497 is actually trying to get the spec closer to Either<T, E>","msgtype":"m.text"},"ts":1616985740000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think","msgtype":"m.text"},"ts":1616985752000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I definitely think of the Completion type as pretty precisely equivalent to Result","msgtype":"m.text"},"ts":1616985783000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1616985809000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Inventing a new language in the spec 🤔","msgtype":"m.text"},"ts":1616985874000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"but it has an explicit [[Type]], which Either<> doesn't involve","msgtype":"m.text"},"ts":1616985884000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that's pretty much an implementation detail; rather than introducing explicit ADTs, the [[Type]] serves the role of the enum case here","msgtype":"m.text"},"ts":1616985981000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's the usual approach in, say, typescript: the way you write `Result<E, T>` in TS is `{ type: 'error', value: E } | { type: 'ok', value: T }`","msgtype":"m.text"},"ts":1616986052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so when you think of eliminating implicit unwrapping, you think of '!' as explicit unwrapping?","msgtype":"m.text"},"ts":1616986221000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1616986261000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's the `set val to val.[[Value]].` bit of `!`","msgtype":"m.text"},"ts":1616986296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I would remove the `If val is a Completion Record,` part which precedes that bit, since it would always hold)","msgtype":"m.text"},"ts":1616986316000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, i know it does that, the question is whether that's implicit or explicit.","msgtype":"m.text"},"ts":1616986346000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, I would consider that explicit","msgtype":"m.text"},"ts":1616986364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"brief, but explicit","msgtype":"m.text"},"ts":1616986369000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think 497 views it as implicit.","msgtype":"m.text"},"ts":1616986379000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1616986436000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"say more?","msgtype":"m.text"},"ts":1616986437000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to be clear: 497 is not trying to eliminate '!', rather trying to eliminate the unwrapping that happens in '!'.","msgtype":"m.text"},"ts":1616986450000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(among others)","msgtype":"m.text"},"ts":1616986470000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1616986501000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my problem with `!` is the \"If val is a Completion Record,\" part, not the \"set val to val.[[Value]]\" part","msgtype":"m.text"},"ts":1616986517000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it sounds like you have the opposite view?","msgtype":"m.text"},"ts":1616986525000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or, I guess, not the opposite view","msgtype":"m.text"},"ts":1616986557000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think so?","msgtype":"m.text"},"ts":1616986558000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah that was a bad way of saying it","msgtype":"m.text"},"ts":1616986575000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"497 aims to eliminate the \"set val to val.[[Value]]\" part","msgtype":"m.text"},"ts":1616986585000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for my part, I have no issue with that part","msgtype":"m.text"},"ts":1616986592000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"In the spirit of Either<T, E>, I'd like to be able to say (or at least think) this AO returns either an integer or a throw-completion (Either<int, throw>), and have that actually be true, not some waffling about normal completions.","msgtype":"m.text"},"ts":1616986910000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well, my point is, \"Either<int, throw>\" is neither an integer nor a throw-completion","msgtype":"m.text"},"ts":1616986955000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's a structure which represents both the \"integer\" possibility and the \"throw\" possibility","msgtype":"m.text"},"ts":1616986966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and my claim is, that is how we ought to think of completion records","msgtype":"m.text"},"ts":1616986987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1616987014000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I might be okay with that.","msgtype":"m.text"},"ts":1616987236000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"except it's not really how we're set up to think of completion records.","msgtype":"m.text"},"ts":1616987292000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"set up\" by the prose which introduces them?","msgtype":"m.text"},"ts":1616987317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that, and the record itself.","msgtype":"m.text"},"ts":1616987337000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"e.g. unlike Either<int, throw>, completion records don't have a structural division between the normal possibility and the abrupt possibility.","msgtype":"m.text"},"ts":1616987410000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well, there is an explicit distinction between those whose type is ~normal~ and all others","msgtype":"m.text"},"ts":1616987475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(in that the latter are defined to be \"abrupt\")","msgtype":"m.text"},"ts":1616987489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I agree there's nothing further which distinguishes them in that section, although the `!` and `?` macros further switch on it and thereby emphasize its importance","msgtype":"m.text"},"ts":1616987529000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm saying that if you wanted to convey something like Either<normal-value, abrupt-value>, you would probably structure Completion Records differently.","msgtype":"m.text"},"ts":1616987728000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ehhhhhh I mean, that's how I would structure it","msgtype":"m.text"},"ts":1616987769000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I might give the `value` field different names in the two cases, I suppose?","msgtype":"m.text"},"ts":1616987792000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but my understanding of Completion Records has always been precisely that they were intended to convey the thing conveyed by rust's Result type","msgtype":"m.text"},"ts":1616987826000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"With the TS example, `{ type: 'error', value: E } | { type: 'ok', value: T }`, is there a constraint that the two alternatives must have the same fields?","msgtype":"m.text"},"ts":1616987829000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, no","msgtype":"m.text"},"ts":1616987853000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*no, there is not such a constraint, in TS","msgtype":"m.text"},"ts":1616987861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and we could certainly restructure Completion Record so that the two cases didn't share any field names except [[Type]]","msgtype":"m.text"},"ts":1616987921000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it would just be a little wordier, is all","msgtype":"m.text"},"ts":1616987945000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g., a completion record is either a 'normal' comp rec, with [[Type]] (=~normal~) and [[Value]] fields, or an 'abrupt' comp rec, with [[Type]] and [[Value]] and [[Target]] fields ?","msgtype":"m.text"},"ts":1616988088000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1616988149000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so backing up...","msgtype":"m.text"},"ts":1616988217000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"did you mean that you want to solve 1796 before 545, or just that you don't want 545 to handle returns (until 1796 is solved)?","msgtype":"m.text"},"ts":1616988325000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i.e., the possibility of  <dl>s without a 'returns' section","msgtype":"m.text"},"ts":1616988368000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"leaning towards the second one","msgtype":"m.text"},"ts":1616988394000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually I'm pretty neutral myself but I believe that's the position of shu and michael","msgtype":"m.text"},"ts":1616988408000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1616988441000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"let me rephrase, I misread your question","msgtype":"m.text"},"ts":1616988446000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"simpler: would you like to solve 1796 before anything of 545 lands?","msgtype":"m.text"},"ts":1616988509000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I do not want to block 545 on 1796. both \"have 545 include `returns`, with ecmarkup just discarding it\" and \"have 545 omit `returns`\" are viable. I lean weakly towards the second; I think the other editors lean strongly towards the second","msgtype":"m.text"},"ts":1616988515000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"simpler: no","msgtype":"m.text"},"ts":1616988523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"1796 might be easier to solve once 545 is in place.","msgtype":"m.text"},"ts":1616988684000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup, agreed","msgtype":"m.text"},"ts":1616988689000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"on that note: I did a bit of work today on a branch of ecmarkup for use in 545","msgtype":"m.text"},"ts":1616988780000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(which is what prompted this whole thing)","msgtype":"m.text"},"ts":1616988786000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently it consumes-and-discards the 'op kind', 'name', 'for', 'returns', and 'also has access to' fields","msgtype":"m.text"},"ts":1616988818000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently, if my '545' code sees return info in the preamble, it puts it in the <dl> 'returns' section and sometimes removes it from the preamble (so it doesn't appear in the description). If ecmarkup simply discards 'returns' section, that would (currently) omit info from preamble.","msgtype":"m.text"},"ts":1616988840000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, best to leave it in the preamble for now, I think","msgtype":"m.text"},"ts":1616988859000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the \"description\" field","msgtype":"m.text"},"ts":1616988871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Something to watch for when you're diffing the generated preambles (in case I forget)","msgtype":"m.text"},"ts":1616988930000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup yup","msgtype":"m.text"},"ts":1616988936000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"anyway, I'll have a branch tonight which parses the h1 and the 'parameters' and 'description' fields and generates approximately the right output","msgtype":"m.text"},"ts":1616988990000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1616989001000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"though, again, only for basic AOs, not builtins or any of the other kinds of things","msgtype":"m.text"},"ts":1616989010000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I'll bring up the issue of what to do with parameters again at the editor call on Wednesday","msgtype":"m.text"},"ts":1616989087000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we discussed it last week and were in favor of your multiline thing but the issue of optionality had not occurred to me at that point","msgtype":"m.text"},"ts":1616989108000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm ok with leaving out builtins, but i'd like the other operations (SDO, numeric methods, record methods, internal methods, ...)","msgtype":"m.text"},"ts":1616989146000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"as for optionality, the semantics of square brackets are fairly different for AOs vs built-ins","msgtype":"m.text"},"ts":1616989220000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"For built-ins, everything is optional, square brackets just tell you what the 'length' is.","msgtype":"m.text"},"ts":1616989264000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(if it isn't explicitly specified)","msgtype":"m.text"},"ts":1616989282000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmmm, so, let's go through the other things more concretely","msgtype":"m.text"},"ts":1616989299000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"numeric methods I'm totally fine with; they're pretty much just AOs, from my perspective, just with unusual names and with an additional calling convention","msgtype":"m.text"},"ts":1616989326000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(For AOs, square brackets are the difference between a spec error or not.)","msgtype":"m.text"},"ts":1616989344000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"none of the SDOs currently have headers, so I'd probably want to start by adding them","msgtype":"m.text"},"ts":1616989347000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"preambles you mean?","msgtype":"m.text"},"ts":1616989418000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"concrete methods are consistent as of 1994, so I'm happy to include those as well","msgtype":"m.text"},"ts":1616989419000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, sorry, preambles","msgtype":"m.text"},"ts":1616989424000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It seems a bit odd to me: introduce prose, which then has to be converted to <dl>, as opposed to just starting with a <dl>.","msgtype":"m.text"},"ts":1616989514000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"whats all this discussion about 👀","msgtype":"m.text"},"ts":1616989531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a separation of concerns thing","msgtype":"m.text"},"ts":1616989535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: pr 545","msgtype":"m.text"},"ts":1616989539000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: I want 545 to do just one thing, which is a strictly internal reformatting","msgtype":"m.text"},"ts":1616989553000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1616989560000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck I would also be OK with doing it in the other order: land 545 without SDOs, and then in a follow-up PR add SDOs","msgtype":"m.text"},"ts":1616989604000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I just don't want to do them at the same time","msgtype":"m.text"},"ts":1616989609000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, ecmarkup could generate  the current SDO 'preamble'","msgtype":"m.text"},"ts":1616989612000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1616989668000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm a bit uncomfortable with just discarding them, though, because that makes it more likely they get stale","msgtype":"m.text"},"ts":1616989688000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(and also makes it harder to review)","msgtype":"m.text"},"ts":1616989692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait, discarding what?","msgtype":"m.text"},"ts":1616989708000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the DLs for SDOs","msgtype":"m.text"},"ts":1616989720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless you meant a different thing by \"could generate  the current SDO 'preamble'\"?","msgtype":"m.text"},"ts":1616989736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently, if an SDO takes a parameter, it has a <p>With parameter _foo_.</p>","msgtype":"m.text"},"ts":1616989773000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh, yeah, I totally forgot about those","msgtype":"m.text"},"ts":1616989789000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sure, I guess, works for me","msgtype":"m.text"},"ts":1616989832000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what would you want done with things which lack parameters?","msgtype":"m.text"},"ts":1616989860000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as in TopLevelVarScopedDeclarations, let's say","msgtype":"m.text"},"ts":1616989863000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the one-line-per-parameter world?","msgtype":"m.text"},"ts":1616989912000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or parameters-in-dl world?","msgtype":"m.text"},"ts":1616989937000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"let's say the parameters-in-dl world","msgtype":"m.text"},"ts":1616989945000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i've lost track","msgtype":"m.text"},"ts":1616989946000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"currently, for TopLevelVarScopedDeclarations, I say:","msgtype":"m.text"},"ts":1616990021000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"    <dt>parameters</dt>","msgtype":"m.text"},"ts":1616990028000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"    <dd>none</dd>","msgtype":"m.text"},"ts":1616990028000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, works for me","msgtype":"m.text"},"ts":1616990092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right now, the <dl>s for SDOs are all in an annex, because that long predated SDO-consolidation","msgtype":"m.text"},"ts":1616990153000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1616990195000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"now that they're consolidated it makes sense to inline them, I would think","msgtype":"m.text"},"ts":1616990213000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"concretely, for TopLevelVarScopedDeclarations, I would expect:","msgtype":"m.text"},"ts":1616990223000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"<emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"[...]\" type=\"sdo\">","msgtype":"m.text"},"ts":1616990232000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"<h1>Static Semantics: TopLevelVarScopedDeclarations</h1>","msgtype":"m.text"},"ts":1616990233000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"<dl class='header'>","msgtype":"m.text"},"ts":1616990233000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  <dt>for</dt>","msgtype":"m.text"},"ts":1616990233000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  <dd>Parse Node</dd>","msgtype":"m.text"},"ts":1616990233000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  <dt>parameters</dt>","msgtype":"m.text"},"ts":1616990234000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  <dd>none</dd>","msgtype":"m.text"},"ts":1616990235000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"</dl>","msgtype":"m.text"},"ts":1616990236000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup, just wanted to see some uptake on 545 before putting in the work","msgtype":"m.text"},"ts":1616990253000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the `op kind` is implied by the \"type=sdo\" in the `emu-clause`, the `name` is implied by the `h1`, and per above I'm assuming we land 545 without `returns` for now","msgtype":"m.text"},"ts":1616990293000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i had a question on something you said before:","msgtype":"m.text"},"ts":1616990295000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(I'm also not totally sold on \"for\" for SDOs)","msgtype":"m.text"},"ts":1616990313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, there are multiple definitions, and they're discriminated on the basis of Parse Node productions","msgtype":"m.text"},"ts":1616990401000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I agree it's not hugely helpful as is.","msgtype":"m.text"},"ts":1616990433000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"anyway, you had a question?","msgtype":"m.text"},"ts":1616990583000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"I want 545 to do just one thing, which is a strictly internal reformatting\": currently, 545 will sometimes alter the description in a way that ecmarkup would be unlikely to undo. Are you okay with that, or do you want to first rearrange things so that 545 will have zero rendered effect?","msgtype":"m.text"},"ts":1616990755000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Do you have an example off the top of your head?","msgtype":"m.text"},"ts":1616990780000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not off the top","msgtype":"m.text"},"ts":1616990829000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"My answer will depends on how significant the diff is, I think","msgtype":"m.text"},"ts":1616990854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the ideal world we'd rearrange things first, but if that's just going to be a bunch of annoying-to-make tiny wordsmithing tweaks I would be OK combining it (though can't speak for other editors)","msgtype":"m.text"},"ts":1616990917000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"otoh, if the diff is large, I'd want it split out so it can be considered on its own terms","msgtype":"m.text"},"ts":1616990927000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we did discuss where the <dl> should go, any you said immediately after <h1>, so that would be one example","msgtype":"m.text"},"ts":1616990936000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"e.g., if the clause is currently <h1> <emu-note> <p>preamble</p>, and I change that to <h1><dl><emu-note>, then ecmarkup will presumably generate <h1><p><emu-note>","msgtype":"m.text"},"ts":1616991017000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, indeed yes","msgtype":"m.text"},"ts":1616991027000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Stuff like that would be the biggest diffs, I think.","msgtype":"m.text"},"ts":1616991104000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"If we're consistent about putting any emu-notes before the preamble, I can just have ecmarkup generate that as the output","msgtype":"m.text"},"ts":1616991136000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm pretty sure we're not consistent.","msgtype":"m.text"},"ts":1616991189000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I think for that _particular_ example I'd be happier if we rearranged it as its own PR, just because that kind of change is difficult to review in the generated diff","msgtype":"m.text"},"ts":1616991246000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but we can worry about that when we get there","msgtype":"m.text"},"ts":1616991252000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1616991267000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(or at least its own commit, not necessarily its own PR)","msgtype":"m.text"},"ts":1616991280000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, one last thing: you have headers for things like Abstract Equality Comparison, which are weird","msgtype":"m.text"},"ts":1616991426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they are indeed","msgtype":"m.text"},"ts":1616991443000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"weird meaning, Abstract Equality Comparison has its own unique calling convention, and a different preamble","msgtype":"m.text"},"ts":1616991444000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you have them labelled as being of kind \"abstract operation\"","msgtype":"m.text"},"ts":1616991494000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they should at least be their own kind","msgtype":"m.text"},"ts":1616991502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and possibly not have headers at all","msgtype":"m.text"},"ts":1616991513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, sometimes it's hard to know exactly what constitutes a 'kind'","msgtype":"m.text"},"ts":1616991558000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"There's no reason it couldn't be a completely conventional AO.","msgtype":"m.text"},"ts":1616991606000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1616991610000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"except possibly churn elsewhere","msgtype":"m.text"},"ts":1616991621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it isn't referenced much.","msgtype":"m.text"},"ts":1616991649000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it's discussed in some books and such","msgtype":"m.text"},"ts":1616991657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which are not easily patched","msgtype":"m.text"},"ts":1616991664000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but if we called it AbstractEqualityComparison or Abstract_Equality_Comparison, I don't think anyone would be confused if a book called it Abstract Equality Comparison","msgtype":"m.text"},"ts":1616991717000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(or we could say that an AO name can have spaces)","msgtype":"m.text"},"ts":1616991771000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, it wouldn't be that bad","msgtype":"m.text"},"ts":1616991808000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"books are likely broken already, we've renamed a ton of AOs","msgtype":"m.text"},"ts":1616991847000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think it matters precisely zero if we break a book that's published months after it's written and is obsolete potentially months before it's published","msgtype":"m.text"},"ts":1616991881000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I care more than zero","msgtype":"m.text"},"ts":1616991894000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"are there that many books that actually refer to specific AOs?","msgtype":"m.text"},"ts":1616991896000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but not infinitely","msgtype":"m.text"},"ts":1616991899000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, abstract equality is a particularly popular thing to talk about","msgtype":"m.text"},"ts":1616991910000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because it's weird","msgtype":"m.text"},"ts":1616991911000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean, i don't think we should capriciously break them","msgtype":"m.text"},"ts":1616991954000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but someone who's writing or reading a book already gave up caring about staleness/obsolescence","msgtype":"m.text"},"ts":1616991967000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and most books that talk about it are going to talk about `==` and not the arbitrary name the spec has historically given it","msgtype":"m.text"},"ts":1616992002000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"re 497, we're maybe not too far apart.","msgtype":"m.text"},"ts":1616992531000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"disagreement seems to hinge mostly on what counts as implicit and how completion records are framed, yes","msgtype":"m.text"},"ts":1616993828000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am happy to revise the framing of completion records as part of 1796 (or elsewhere)","msgtype":"m.text"},"ts":1616993873000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(also, not gonna have the branch ready tonight, since I still need to teach it how to handle concrete methods and etc)","msgtype":"m.text"},"ts":1616994018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Hello I see this event \"Do Expressions Experiment Planning\" on the TC39 events calendar","msgtype":"m.text"},"ts":1617016296000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Did anyone know what's the topic of this event?","msgtype":"m.text"},"ts":1617016297000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Bakkot: forgot to ask: do you (or the other editors) have motivations for structured-headers other than the things I outlined?","msgtype":"m.text"},"ts":1617024734000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: my motivation is that i currently scrape the spec to try to get a list of AO names for es-abstract; something that would allow me to reliably identify things that take or return Parse Nodes, for example, would be amazing (since it makes no sense for me to try to support those), and something that let me eventually validate argument and return types would be even better.","msgtype":"m.text"},"ts":1617030447000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"That sounds well-aligned with what I'm going for.","msgtype":"m.text"},"ts":1617030983000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://jsfiddle.net/jgu2a8ef/ This behavior is confusing to me with destructuring. If you uncomment the code d is defined.","msgtype":"m.text"},"ts":1617036757000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"I like how it's consistent across FF and Chrome, so it's clearly part of the spec probably. I just can't reason about it.","msgtype":"m.text"},"ts":1617036861000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Sirisian|Work it's the same thing as how `var x = y = z` will define `y` in the global scope","msgtype":"m.text"},"ts":1617037354000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for exactly the same reason, `const validAttributes = { d, ...e } = c` will define `d` and `e` in the global scope","msgtype":"m.text"},"ts":1617037394000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"today I learned. I rarely if ever write code like this.","msgtype":"m.text"},"ts":1617037399000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Would be nice to have syntax like const a = { const b, const ...c } = d; I mentioned that the other day without realizing the automatic global scope.","msgtype":"m.text"},"ts":1617037548000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"},
{"content":{"body":"Or I guess it would still be global scope and const in that interpretation. hmm.","msgtype":"m.text"},"ts":1617037574000,"senderName":"Sirisian|Work","senderId":"Sirisian|Work@irc"}
]