[
{"content":{"body":"was there ever a proposal to add refs to JS?","msgtype":"m.text"},"ts":1581972340000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"What do you mean by refs","msgtype":"m.text"},"ts":1581972395000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"essentially a way to do pass by reference instead of w/e you want to call how parameters are passed currently","msgtype":"m.text"},"ts":1581972428000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: https://github.com/rbuckton/proposal-refs has never been presented, i think","msgtype":"m.text"},"ts":1581972937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1581973021000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: a year ago i experimented with reifying the Reference type using `&` and `*` syntax","msgtype":"m.text"},"ts":1581977080000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it worked well but i couldn't find any good use for it","msgtype":"m.text"},"ts":1581977096000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I'm more interested in smart pointer or ref semantics that allow constraining usage","msgtype":"m.text"},"ts":1581977676000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://github.com/rbuckton/proposal-refs/issues/6#issuecomment-587161053","msgtype":"m.text"},"ts":1581977699000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: that seems like a job for your type system","msgtype":"m.text"},"ts":1581977877000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bradleymeck: i'm not sure what that example is trying to illustrate","msgtype":"m.text"},"ts":1581977948000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that `if foo === 1` should form an exclusive condition where foo can't be modified to be anything other than `1`?","msgtype":"m.text"},"ts":1581977971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"While held by a specific kind of ref, yes. That ref essentially has exclusive access","msgtype":"m.text"},"ts":1581978258000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Once that ref is gone, the variable is not exclusive","msgtype":"m.text"},"ts":1581978421000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"technically references would be gc'd too","msgtype":"m.text"},"ts":1581978509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Depends. Only if they are first class/go into gc values do they need gc","msgtype":"m.text"},"ts":1581978729000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I'd imagine it would have to be zero gc to work","msgtype":"m.text"},"ts":1581978748000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean if `let x = ref y` is a thing they're observable in some way","msgtype":"m.text"},"ts":1581978751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The values they hold will be, for sure. But the ref itself might not be first class. Even if observable it doesn't have to be gc based","msgtype":"m.text"},"ts":1581978828000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"non first class values in js seems odd but ðŸ¤·","msgtype":"m.text"},"ts":1581979078000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we made private fields so who knows","msgtype":"m.text"},"ts":1581979087000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Same for the live binding stuff, and how decorators are starting to look","msgtype":"m.text"},"ts":1581981699000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"It's just JS branching out","msgtype":"m.text"},"ts":1581981714000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i really dislike it","msgtype":"m.text"},"ts":1581983817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"imo live bindings are terrible","msgtype":"m.text"},"ts":1581983854000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is live bindings just","msgtype":"m.text"},"ts":1581983868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the second-class nature of the latest decorators branch imo makes it untenable","msgtype":"m.text"},"ts":1581983869000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`@onchange(cb) let = a1`","msgtype":"m.text"},"ts":1581983888000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1581983892000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"let a = 1","msgtype":"m.text"},"ts":1581983893000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1581983894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you want to inspect scopes just reify scopes","msgtype":"m.text"},"ts":1581983909000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it's like `export let a = 1; setTimeout(() => { a = 2; })` and the value change being propagated","msgtype":"m.text"},"ts":1581983915000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1581983919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see what you mean","msgtype":"m.text"},"ts":1581983924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"module live bindings","msgtype":"m.text"},"ts":1581983928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how are those not \"first class\"","msgtype":"m.text"},"ts":1581983933000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we have a dedicated module namespace object that lets you inspect them","msgtype":"m.text"},"ts":1581983975000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because you can't pass the binding around, only the value","msgtype":"m.text"},"ts":1581983977000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think that's a non-first-class addition though","msgtype":"m.text"},"ts":1581983991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah that's never seemed weird to me","msgtype":"m.text"},"ts":1581983995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the module namespace object is first class, but that's not bindings, that's like an exotic object","msgtype":"m.text"},"ts":1581983997000,"senderName":"ljharb","senderId":"ljharb@irc"}
]