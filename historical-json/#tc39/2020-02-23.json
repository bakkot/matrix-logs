[
{"content":{"body":"jmdyck: how have you been generating the headers in https://github.com/tc39/ecma262/pull/545 ?","msgtype":"m.text"},"ts":1582421824000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm curious about the `System.*` namespace. It seems that there was a time (maybe around 2017), some proposal is using the `System` namespace like it is a \"standard library namespace\" (like `java.lang.*` for Java) for their APIs like `System.getStackString` from https://tc39.es/proposal-error-stacks/ or `System.import(...)` for dynamic import iirc.","msgtype":"m.text"},"ts":1582458453000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Why does the System namespace no longer used today? When does it originate? Where does it comes from? Is there a history for that?","msgtype":"m.text"},"ts":1582458453000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Another question, SystemJS is a completely compatible ES Module translation target, is it a \"legacy\" from something like rejected proposal for ES Module? Does it related to the `System.*` namespace?","msgtype":"m.text"},"ts":1582458704000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"Bakkot: I generate the #545 headers via code in https://github.com/jmdyck/ecmaspeak-py, specifically https://github.com/jmdyck/ecmaspeak-py/blob/master/static_type_analysis.py","msgtype":"m.text"},"ts":1582461664000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jackworks: a number of proposals grant privileges, and were thus originally conceived as going on a “privilege-granting” object like System. dynamic import needed to be syntactic to be contextual; System.global ended up being a global (to match people’s usage) and because a global can be denied and linted against just like System usage","msgtype":"m.text"},"ts":1582471257000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks: for stacks, it’s still somewhat of an open question but as long as virtualization can be done with them on Error, then there’s no need for System","msgtype":"m.text"},"ts":1582471295000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jackworks: SystemJS originated with a pre-2015 module spec, which includes the loader spec that never materialized, so I’m not sure how it’s different from the actual spec today (but there’s definitely no System namespace)","msgtype":"m.text"},"ts":1582471343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Thanks for the explanation!","msgtype":"m.text"},"ts":1582472274000,"senderName":"jackworks","senderId":"jackworks@irc"}
]