[
{"content":{"body":"how do people feel about trying to work on mitigating prototype pollution vulnerabilities in user land libraries that the JS ecosystem is seeing a lot of","msgtype":"m.text"},"ts":1594062919000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we can't patch overwrite mistake, but maybe we could make own properties more developer friendly to deal with?","msgtype":"m.text"},"ts":1594062955000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"basically the problem is libraries are doing `object[key]` on arbitrary input and by default some builtin prototypes allow for crawling to codegen etc.","msgtype":"m.text"},"ts":1594063118000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"on a glance no builtin types allow for codegen based purely off own property traversal unless you have access to the root intrinsic. E.G. to get to Function.prototype.constructor via own property traversal you have to get to Function or Function.prototype, which most userland libraries are not generally called with","msgtype":"m.text"},"ts":1594063270000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: how has --disable-proto been going in node","msgtype":"m.text"},"ts":1594063417000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"npm audit still as noisey as ever","msgtype":"m.text"},"ts":1594063934000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"same with --frozen-intrinsics","msgtype":"m.text"},"ts":1594063952000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"optional chaining does remove the need for some helper libs like lodash so may see a long tail decrease","msgtype":"m.text"},"ts":1594063985000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i still don't think most of them are actual vulnerabilities","msgtype":"m.text"},"ts":1594065802000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bendtherules: heads up on one final change on https://github.com/tc39/ecma262/pull/2076 before i land it :-)","msgtype":"m.text"},"ts":1594068375000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: regardless of personal feeling there appears to be a need to fix whatever category of issue is causing the distress","msgtype":"m.text"},"ts":1594071145000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I personally do agree it is a vulnerability if you are unable to verify consumers","msgtype":"m.text"},"ts":1594071197000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's been just as many CVEs caused by catastrophic regex backtracking; why doesn't that need fixing?","msgtype":"m.text"},"ts":1594071198000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I never said it doesn't","msgtype":"m.text"},"ts":1594071216000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I just am asking about addressing a noisy issue of the ecosystem, redos has owasp coverage and mitigation pretty well documented","msgtype":"m.text"},"ts":1594071268000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sorry, not trying to throw some whataboutism on it :-) i'm just confused why this one is worth trying to \"fix\" in the language and the other one hasn't been","msgtype":"m.text"},"ts":1594071269000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Redos affects other languages and a large variety of tools work to handle it. To my knowledge only ocap styles like SES try to deal with prototype mutation","msgtype":"m.text"},"ts":1594071348000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"SES doesn't cover entirely the claimed vulnerability since it doesn't seek to prevent codegen entirely","msgtype":"m.text"},"ts":1594071406000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Prototype pollution is more JS specific than redos basically","msgtype":"m.text"},"ts":1594071441000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that is a fair point","msgtype":"m.text"},"ts":1594071457000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you could also argue that redos doesn't have the same severity, halting execution isn't something JS seeks to prevent generally","msgtype":"m.text"},"ts":1594071641000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"prototype pollution is about potential codegen/misinterpretation","msgtype":"m.text"},"ts":1594071659000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"one could prevent progress, but the other can potentially lead towards malicious execution","msgtype":"m.text"},"ts":1594071698000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]