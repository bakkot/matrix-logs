[
{"content":{"body":"ljharb?","msgtype":"m.text"},"ts":1565233881000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1565233919000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"In 1376 you changed lots of old-style intrinsics to new-style, but didn't change all.","msgtype":"m.text"},"ts":1565233978000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I was wondering why not all, what the criterion was.","msgtype":"m.text"},"ts":1565234018000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i changed all the ones that were accessible off of other ones - which did i miss?","msgtype":"m.text"},"ts":1565234069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: like, `%ArrayPrototype%` is `%Array.prototype` because `%Array%` exists, but i didn't change things like IteratorPrototype etc","msgtype":"m.text"},"ts":1565234105000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if there's more that can be changed to use the new style, that'd be great","msgtype":"m.text"},"ts":1565234114000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I found about 67","msgtype":"m.text"},"ts":1565234134000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"E.g., a bunch of %GeneratorPrototype% that could be %Generator.prototype%","msgtype":"m.text"},"ts":1565234208000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"basically i was only thinking about the user-observable ones","msgtype":"m.text"},"ts":1565234238000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but yeah you're right, those should be changed too","msgtype":"m.text"},"ts":1565234249000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if you make a PR, great, otherwise i'll do it tomorrow :-)","msgtype":"m.text"},"ts":1565234255000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah, I've got the search-and-replace commands set up.","msgtype":"m.text"},"ts":1565234283000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sweet, appreciate it","msgtype":"m.text"},"ts":1565234293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just need to be sure to keep the old style ones for layered specs; i'll remove all of those once i've updated html and intl to use the new style.","msgtype":"m.text"},"ts":1565234317000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"There are some where the new-style is a bit round-about, e.g. %AsyncGenerator% -> %AsyncGeneratorFunction.prototype%, you still want those to change?","msgtype":"m.text"},"ts":1565234348000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hey while you two are here -- is https://github.com/tc39/ecma262/pull/1658 actually meant to be normative? I thought it was just making explicit what was already assumed","msgtype":"m.text"},"ts":1565234351000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(oops, come back to me if I'm interrupting)","msgtype":"m.text"},"ts":1565234378000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: its about making them more readable, so im fine with your judgement call there","msgtype":"m.text"},"ts":1565234409000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: iâ€™m not really sure","msgtype":"m.text"},"ts":1565234430000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: if it changes observable requirements, even if itâ€™s a spec bug that nobody we know about has implemented spiritually wrong, itâ€™s still normative","msgtype":"m.text"},"ts":1565234460000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"re old style for layered specs: sure, they're all in table 7, I'm not touching that.","msgtype":"m.text"},"ts":1565234473000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right that's fair","msgtype":"m.text"},"ts":1565234473000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: turns out %AsyncGenerator% was the only such example. I'll leave it as is.","msgtype":"m.text"},"ts":1565234731000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1565234983000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: I also found some things that shouldn't have been changed, so have commits to change them back.","msgtype":"m.text"},"ts":1565235270000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"O.o like what?","msgtype":"m.text"},"ts":1565235282000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"%AsyncIteratorPrototype% -> %AsyncIterator.prototype%","msgtype":"m.text"},"ts":1565235340000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"latter assumes %AsyncIterator%, which doesn't exist","msgtype":"m.text"},"ts":1565235362000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oops, thanks then","msgtype":"m.text"},"ts":1565235368000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(Maybe it should exist, I don't know.)","msgtype":"m.text"},"ts":1565235412000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the iterator helper proposal can address that :-)","msgtype":"m.text"},"ts":1565235434000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"^ iterator methods poposal says it exists","msgtype":"m.text"},"ts":1565235686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Dang.","msgtype":"m.text"},"ts":1565236460000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"E.g., if I change \"This function is the <dfn>%Promise_all%</dfn> intrinsic object.\" to new-style, then the %Promise_all% in Table 7 won't get auto-linked.","msgtype":"m.text"},"ts":1565236589000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right, thatâ€™s why i left those","msgtype":"m.text"},"ts":1565238114000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Although it's weird, some get linked correctly anyway.","msgtype":"m.text"},"ts":1565238230000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"E.g. FunctionPrototype and ObjectPrototype in table 7 link to the right place, even though the <dfn> has the new-style reference.","msgtype":"m.text"},"ts":1565238278000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"So if I keep the <dfn>s to old-style, then the old-style refs (in table 7) get auto-linked, but new-style references (anywhere) don't.","msgtype":"m.text"},"ts":1565238660000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Given that trade-off, I think I'd vote the other way.","msgtype":"m.text"},"ts":1565238836000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i.e., let the old-style refs in Table 7 go unlinked. (The new-style ref in column 3 will get linked, so there's still a link on the row.)","msgtype":"m.text"},"ts":1565238958000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Note that this is only talking about cases where old-style and new-style differ, not the 'base' ones like %Array%' and '%String%'.","msgtype":"m.text"},"ts":1565239035000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: does Chrome Canary give you a way to pass your V8 feature flag, btw?","msgtype":"m.text"},"ts":1565244331000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling, yeah, --js-flags=\"\"","msgtype":"m.text"},"ts":1565253463000,"senderName":"gsathya","senderId":"gsathya@irc"},
{"content":{"body":"Does the language have any built-in setters","msgtype":"m.text"},"ts":1565279863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: __proto__","msgtype":"m.text"},"ts":1565279928000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol --_--","msgtype":"m.text"},"ts":1565279937000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: also function.prototype.caller and function.prototype.arguments","msgtype":"m.text"},"ts":1565279966000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh and arguments.callee","msgtype":"m.text"},"ts":1565279981000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh and all the properties of a mapped arguments object","msgtype":"m.text"},"ts":1565279994000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think that's everything","msgtype":"m.text"},"ts":1565280006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so its basically all legacy stuff","msgtype":"m.text"},"ts":1565280012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1565280247000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsathya: cool! seems like Safari TP might not have an equivalent thing ðŸ˜¥","msgtype":"m.text"},"ts":1565281452000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does nullish coalescing have the restriction requiring parens","msgtype":"m.text"},"ts":1565281791000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Don't forget RegExp friends $0-$9","msgtype":"m.text"},"ts":1565282386000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"RegExp in general...","msgtype":"m.text"},"ts":1565282403000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: yes","msgtype":"m.text"},"ts":1565282495000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck: is that in the spec?","msgtype":"m.text"},"ts":1565282525000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like i know it exist","msgtype":"m.text"},"ts":1565282530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"exists*","msgtype":"m.text"},"ts":1565282532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i can't find it","msgtype":"m.text"},"ts":1565282535000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whats this channel about","msgtype":"m.text"},"ts":1565282641000,"senderName":"satoriprints","senderId":"satoriprints@irc"},
{"content":{"body":"I know tc39","msgtype":"m.text"},"ts":1565282651000,"senderName":"satoriprints","senderId":"satoriprints@irc"},
{"content":{"body":"devsnek: it doesn't seem so, but it probably should be listed XD","msgtype":"m.text"},"ts":1565282804000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"satoriprints: we discuss javascript here","msgtype":"m.text"},"ts":1565282827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah mixing is prevented from being a valid production","msgtype":"m.text"},"ts":1565282989000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"see, say, https://github.com/tc39/proposal-nullish-coalescing/issues/44","msgtype":"m.text"},"ts":1565283040000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: does the grammar in the spec restrict it?","msgtype":"m.text"},"ts":1565283109000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was wondering after referring to the actual text","msgtype":"m.text"},"ts":1565283124000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe i'm just bad at reading spec text","msgtype":"m.text"},"ts":1565283136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, notice where it's BitwiseOR","msgtype":"m.text"},"ts":1565283166000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"those are blocking logical ops","msgtype":"m.text"},"ts":1565283181000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1565283198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it can go to LogicalOR or Coalesce","msgtype":"m.text"},"ts":1565283208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it all makes sense now","msgtype":"m.text"},"ts":1565283217000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhm. was a really nice simplification ðŸ˜ƒ","msgtype":"m.text"},"ts":1565283263000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"one nitpick I'd been meaning to make is that LogicalExpression is an unfortunate name since \"logical\" means \"truth(iness)-oriented\", though the only countersuggestion I can come up with is like ShortCircuitExpression","msgtype":"m.text"},"ts":1565283444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well logicaland and logicalor are truthiness oriented","msgtype":"m.text"},"ts":1565283475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but coalescing is nullish-oriented, so unless we mean ternary logic... ðŸ˜› short circuiting is really the thing that they have in common","msgtype":"m.text"},"ts":1565283838000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I phrased JSC's error message like this: https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/parser/Parser.cpp#L3932","msgtype":"m.text"},"ts":1565284072000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does jsc integrate with its own debugger via CLI or just lldb?","msgtype":"m.text"},"ts":1565285492000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: how do you mean CLI? lldb would be the command-line approach but you can use Xcode or Visual Studio","msgtype":"m.text"},"ts":1565286463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: d8 for example can be debugged using chrome devtools if you are shifty, XS has XSBug","msgtype":"m.text"},"ts":1565286761000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"gui devtools basically","msgtype":"m.text"},"ts":1565286769000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh yeah you can inspect a JSContext","msgtype":"m.text"},"ts":1565286931000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"you do `run-jsc --remote-debug`, open Safari, and choose Develop > <host name> > JSContext","msgtype":"m.text"},"ts":1565287014000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":":huzzah:","msgtype":"m.text"},"ts":1565287029000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ðŸŽŠ","msgtype":"m.text"},"ts":1565287042000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"reading https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/jsc.cpp it doesn't seem to have a \"break-on-start\" flag?","msgtype":"m.text"},"ts":1565288123000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh yeah I was having trouble with that too","msgtype":"m.text"},"ts":1565288683000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think there's a bug there but I didn't get to digging super deeply","msgtype":"m.text"},"ts":1565288712000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also seems i cant actually connect if the code is too tight","msgtype":"m.text"},"ts":1565288713000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"tight?","msgtype":"m.text"},"ts":1565289013000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i can't \"break\" in the debugger","msgtype":"m.text"},"ts":1565289323000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but loops etc. are still print() ing","msgtype":"m.text"},"ts":1565289334000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1565292541000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fwiw there's a #webkit-inspector channel ;)","msgtype":"m.text"},"ts":1565292560000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"has this sort of thing been discussed/proposed? https://gc.gy/33000678.png","msgtype":"m.text"},"ts":1565295687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of `\\u{2771}`","msgtype":"m.text"},"ts":1565295715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1565295972000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1565295973000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't think so","msgtype":"m.text"},"ts":1565295975000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cc mathiasbynens","msgtype":"m.text"},"ts":1565295980000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"are those specified to be usable as identifiers?","msgtype":"m.text"},"ts":1565295988000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like, guaranteed not to change ever?","msgtype":"m.text"},"ts":1565295996000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565296029000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/Unicode_character_property#Name","msgtype":"m.text"},"ts":1565296031000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"> Starting from Unicode version 2.0, the published name for a code point will never change. In the event of a misspelling in a publication, a correct name will later be assigned to the code point as a Character Name Alias. Within the whole range of names, an alias is unique too.","msgtype":"m.text"},"ts":1565296043000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting...that's good to know.","msgtype":"m.text"},"ts":1565296059000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah they're totally stable, python even uses them for this kind of escape","msgtype":"m.text"},"ts":1565296061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unicode is usually pretty good about this sort of thing","msgtype":"m.text"},"ts":1565296070000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"obviously some names are rather long","msgtype":"m.text"},"ts":1565296083000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: lol I see what you mean about the adding the jump to V8 being simpler","msgtype":"m.text"},"ts":1565302410000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1565302421000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wasn't there a decorators proposal that had decorators for like everything, even expressions?","msgtype":"m.text"},"ts":1565305051000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ðŸ¤¢","msgtype":"m.text"},"ts":1565305135000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"unsure","msgtype":"m.text"},"ts":1565305139000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but in theory any `@x y` can become `x(y)`","msgtype":"m.text"},"ts":1565305152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: oh yes","msgtype":"m.text"},"ts":1565305652000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"gimme that meta programming juice, om nom","msgtype":"m.text"},"ts":1565305664000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"its what the perfs crave","msgtype":"m.text"},"ts":1565305676000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ðŸ˜‚","msgtype":"m.text"},"ts":1565305691000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i like the composability of the more generalized decorators","msgtype":"m.text"},"ts":1565305716000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"electrolytes.js","msgtype":"m.text"},"ts":1565305717000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"cause im looking at infix bang after the realms call and is infix bang really just an expression decorator?","msgtype":"m.text"},"ts":1565305770000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"infix decorators","msgtype":"m.text"},"ts":1565305798000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"specialized to be remote method objects, but generalizing the problem out a bit","msgtype":"m.text"},"ts":1565305798000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ugggg","msgtype":"m.text"},"ts":1565305803000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i would generalize it to proxies","msgtype":"m.text"},"ts":1565305811000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not decorators","msgtype":"m.text"},"ts":1565305814000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"proxies don't work for pipeline","msgtype":"m.text"},"ts":1565305832000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"neither does infix anything","msgtype":"m.text"},"ts":1565305844000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"x.y.z would need to be converted and eagerly sent off before .z happens","msgtype":"m.text"},"ts":1565305847000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'd somewhat agree with infix being a problem with the solution, but the use case is pipelining for remote objects","msgtype":"m.text"},"ts":1565305877000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean... `a.b.c` works just fine","msgtype":"m.text"},"ts":1565305893000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and if you could remap all the Meta Object Protocol in an expression seems like that would work","msgtype":"m.text"},"ts":1565305901000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"are you saying you want to support `a |> b |> c`?","msgtype":"m.text"},"ts":1565305906000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or c b a","msgtype":"m.text"},"ts":1565305911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1565305913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"promise pipelining, not pipeline operator","msgtype":"m.text"},"ts":1565305923000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"pipeline is an overloaded term now","msgtype":"m.text"},"ts":1565305924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like you can do `a.b[c](d)`","msgtype":"m.text"},"ts":1565305934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where those are all your custom graph builders","msgtype":"m.text"},"ts":1565305943000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is how capn proto works today","msgtype":"m.text"},"ts":1565305951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`await rpc.doX(rpc.doY())` as an example","msgtype":"m.text"},"ts":1565306006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thenables + proxies","msgtype":"m.text"},"ts":1565306011000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"kind of, the await bit breaks pipelining","msgtype":"m.text"},"ts":1565306022000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how so","msgtype":"m.text"},"ts":1565306027000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i pass rpc.doY directly to rpc.doX","msgtype":"m.text"},"ts":1565306040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then await folds that into a request for doY applied to doX","msgtype":"m.text"},"ts":1565306064000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(await a!b)!c <-- needing the await","msgtype":"m.text"},"ts":1565306072000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"how is that not just a.b.c","msgtype":"m.text"},"ts":1565306094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is message passing and not doing .gets","msgtype":"m.text"},"ts":1565306110000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a is a target for messages rather than a direct reference","msgtype":"m.text"},"ts":1565306121000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or it gets turned into one really","msgtype":"m.text"},"ts":1565306127000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean i don't understand","msgtype":"m.text"},"ts":1565306130000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why a.b is applied out","msgtype":"m.text"},"ts":1565306144000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what happens if i use .then in capn proto? /reading","msgtype":"m.text"},"ts":1565306217000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"x!then() == ?","msgtype":"m.text"},"ts":1565306227000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"pipelining doesn't solve that","msgtype":"m.text"},"ts":1565306232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"x.then would be the commit","msgtype":"m.text"},"ts":1565306235000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm just reading this lib for now","msgtype":"m.text"},"ts":1565306240000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"nothing on top of promises solves thenables being strings instead of symbols","msgtype":"m.text"},"ts":1565306260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a syntax for applying chains of promises sounds nice though","msgtype":"m.text"},"ts":1565306303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`fetch()!.json()!.something`","msgtype":"m.text"},"ts":1565306340000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a syntax for dealing with specialized forms of MOP alternatives in general seems to be a lot of proposal","msgtype":"m.text"},"ts":1565306419000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"s","msgtype":"m.text"},"ts":1565306423000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"optional chaining for example","msgtype":"m.text"},"ts":1565306439000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it seems like a more general problem than we have been treating it","msgtype":"m.text"},"ts":1565306454000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"@awaitAllGets( fetch().json().something )","msgtype":"m.text"},"ts":1565306715000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that breaks locality to me","msgtype":"m.text"},"ts":1565306751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1565307008000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it encapsulates what it meta-programs","msgtype":"m.text"},"ts":1565307021000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i wouldn't assume it could reach inside of functions","msgtype":"m.text"},"ts":1565307031000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but the 2 `.`s in it seem fine to modify","msgtype":"m.text"},"ts":1565307042000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it makes it feel like the dots are magically awaiting","msgtype":"m.text"},"ts":1565307121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and you can't control which ones","msgtype":"m.text"},"ts":1565307125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"move it outside the decorated expression?","msgtype":"m.text"},"ts":1565307254000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"then you might have to nest the decorated expressions","msgtype":"m.text"},"ts":1565307276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"make a goofy rule like preceding _ awaits and $ doesn't?","msgtype":"m.text"},"ts":1565307280000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"plenty of ways to work around","msgtype":"m.text"},"ts":1565307291000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1565307298000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nesting expressions is common place though","msgtype":"m.text"},"ts":1565307302000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean like","msgtype":"m.text"},"ts":1565307307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`@x { @x { a.b }.c }.d","msgtype":"m.text"},"ts":1565307331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that even work","msgtype":"m.text"},"ts":1565307334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`a!.b.c!.d` is the goal","msgtype":"m.text"},"ts":1565307342000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"idk, don't have a proposal","msgtype":"m.text"},"ts":1565307343000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"could make it so only !. are visible to be altered?","msgtype":"m.text"},"ts":1565307363000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"too much bikeshed in here, I'm off to the dollar movie theater","msgtype":"m.text"},"ts":1565307384000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"flees","msgtype":"m.emote"},"ts":1565307390000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"have fun","msgtype":"m.text"},"ts":1565307543000,"senderName":"devsnek","senderId":"devsnek@irc"}
]