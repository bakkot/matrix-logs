[
{"content":{"body":"littledan: the latest decorator proposal looks pretty good","msgtype":"m.text"},"ts":1599496432000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess the reason we didn't go with it in the first place is all the features it doesn't have that static decorators have?","msgtype":"m.text"},"ts":1599496458000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh my g-d, devsnek is saying this about a proposal that I worked on?!?!?!","msgtype":"m.text"},"ts":1599496461000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"what's going on?","msgtype":"m.text"},"ts":1599496467000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1599496470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, it took me personally a long time to come to understand that this is what field decorators should do, nothing more, nothing less. that was kinda the hard case tbh","msgtype":"m.text"},"ts":1599496507000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i need to review it more in depth but the whole \"they're just functions\" thing is very appealing","msgtype":"m.text"},"ts":1599496541000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(it's weird that it took me so long since a lot of different people were saying that explicitly for a while)","msgtype":"m.text"},"ts":1599496541000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: is the proposal adding Symbol.metadata","msgtype":"m.text"},"ts":1599496750000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Yes, but there's no particular behavior attached to Symbol.metadata","msgtype":"m.text"},"ts":1599496773000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"yeah no i like it","msgtype":"m.text"},"ts":1599496782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would be fun if ts had a mode to emit type info in metadata","msgtype":"m.text"},"ts":1599496802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah... it's hard since types don't really have a runtime representation","msgtype":"m.text"},"ts":1599496970000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"should we have syntax in JS to indicate types that would have runtime reification???","msgtype":"m.text"},"ts":1599496991000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"indeed, decorators that use type metadata is a big gap in this proposal","msgtype":"m.text"},"ts":1599496999000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but I feel like that can only really be filled by type systems. So, those type systems can emit extra data to Symbol.metadata, maybe","msgtype":"m.text"},"ts":1599497021000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i used a python library once","msgtype":"m.text"},"ts":1599497036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it took advantage of python's type annotations being runtime reflectable","msgtype":"m.text"},"ts":1599497055000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to dynamically generate string parsers","msgtype":"m.text"},"ts":1599497069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it was very slick","msgtype":"m.text"},"ts":1599497071000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, I mean this is commonly used with TS, it has a mode for this","msgtype":"m.text"},"ts":1599497085000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i wish ts would take rtti more seriously :(","msgtype":"m.text"},"ts":1599497125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rbuckton: ^","msgtype":"m.text"},"ts":1599497134000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I feel like TC39 would be the right place to do a proposal for runtime type stuff, and it'd look a bit different from TypeScript. Mark and Waldemar did  a \"guards\" proposal some years ago; maybe that could be a good basis","msgtype":"m.text"},"ts":1599497169000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i feel like any attempt to standardize a type syntax will fail","msgtype":"m.text"},"ts":1599497230000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://web.archive.org/web/20141214075910/http://wiki.ecmascript.org/doku.php?id=strawman:guards","msgtype":"m.text"},"ts":1599497254000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this proposal used :: so it's unambiguous/non-overlapping with TypeScript","msgtype":"m.text"},"ts":1599497270000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I like how we have the division between TS doing checking statically and TC39 doing runtime semantics. If we can maintain that, I'll be happy","msgtype":"m.text"},"ts":1599497304000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the statement \"any attempt to standardize ___ will fail\" is true most of the time :)","msgtype":"m.text"},"ts":1599497334000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"guards look interesting","msgtype":"m.text"},"ts":1599497381000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> i wish ts would take rtti more seriously","msgtype":"m.text"},"ts":1599497582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I wish TS would take compile-time type information more seriously","msgtype":"m.text"},"ts":1599497586000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lmao","msgtype":"m.text"},"ts":1599497710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: is `@()` allowed in the simplified proposal? one section says it is and one section says it is not","msgtype":"m.text"},"ts":1599504128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"err, it is allowed","msgtype":"m.text"},"ts":1599504138000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"well `@(expression)`","msgtype":"m.text"},"ts":1599504138000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which section says it isn't","msgtype":"m.text"},"ts":1599504144000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"> Forms like @foo.bar or @(foo) are no longer permitted, as decorators are not JavaScript expressions.","msgtype":"m.text"},"ts":1599504147000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, @() is an error :)","msgtype":"m.text"},"ts":1599504148000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"oops!","msgtype":"m.text"},"ts":1599504155000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I should've fixed that before distributing broadly...","msgtype":"m.text"},"ts":1599504165000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1599504166000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so `@x` and `@x.y` are allowed but for random exprs you have to do `@x(expr)`","msgtype":"m.text"},"ts":1599504192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm i guess i have to add class fields to engine262 if i want to play with this","msgtype":"m.text"},"ts":1599504231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we really need to deduplicate all the various function and method evaluation stuff","msgtype":"m.text"},"ts":1599506719000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmmm when `ObjectLiteral` grammar is used in a proposal, it links to the annex b definition instead of the main definition","msgtype":"m.text"},"ts":1599509195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, yup, later biblio entries take precedence, looks like, and the annex B definition of `ObjectLiteral` is later than the main one","msgtype":"m.text"},"ts":1599510905000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also the biblio file is super stale because it isn't automatically kept up to date","msgtype":"m.text"},"ts":1599510919000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek is there an existing proposal with this behavior that I can link in the issue I'm opening?","msgtype":"m.text"},"ts":1599511304000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot I was just prototyping something locally","msgtype":"m.text"},"ts":1599513641000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1599513647000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]