[
{"content":{"body":"devsnek none of them seem particularly unclear to me?","msgtype":"m.text"},"ts":1587689044000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"do you have a concrete example?","msgtype":"m.text"},"ts":1587689049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: the ones with the with statement seem okay now that I read them again since they explicitly mention the execution context","msgtype":"m.text"},"ts":1587689173000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the other two occurances seem kind of undefined though","msgtype":"m.text"},"ts":1587689187000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1587689303000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the one in the definition of ECMAScript Function Objects is using it to talk about the concept, not a concrete thing in the specification","msgtype":"m.text"},"ts":1587689345000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like, that's what a closure is: it is some code closed over a lexical environment","msgtype":"m.text"},"ts":1587689359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ðŸ¤·","msgtype":"m.text"},"ts":1587689401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the one which is \"NOTE: Only a single lexical environment is needed for the parameters and top-level vars.\" seems pretty clear to me: if you go down that branch you end up with one LexicalEnvironment, by contrast to the other branch, where you end up with two","msgtype":"m.text"},"ts":1587689433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there any reason why RegExp.prototype is `/(?:)/` rather than `/|/`? both seem like they're equivalent","msgtype":"m.text"},"ts":1587756661000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"| would require an actual alternation inside of it right?","msgtype":"m.text"},"ts":1587756958000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it is an alternation but it's a needless one","msgtype":"m.text"},"ts":1587757641000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`/|/` is shorter to type but equivalent to `/(?:)|(?:)/` so it'd be redundant in that sense","msgtype":"m.text"},"ts":1587757690000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1587758685000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but since it's shorter :-p","msgtype":"m.text"},"ts":1587758694000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I don't think shorter is the goal, necessarily","msgtype":"m.text"},"ts":1587761505000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"technically you could just have `//`","msgtype":"m.text"},"ts":1587761519000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that's a comment","msgtype":"m.text"},"ts":1587761625000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or an empty regex","msgtype":"m.text"},"ts":1587761657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not in JS! :P","msgtype":"m.text"},"ts":1587761881000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"new RegExp(\"\").toString() === '/(?:)/'","msgtype":"m.text"},"ts":1587761892000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"undeniable\" is a weird word","msgtype":"m.text"},"ts":1587762929000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I mean our meaning, not the word in general)","msgtype":"m.text"},"ts":1587762944000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]