[
{"content":{"body":"how about extending nullish coalescing operator for destructuring objects?","msgtype":"m.text"},"ts":1568798329000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"const { thing=true } = { thing: null }; thing; // thing would be null","msgtype":"m.text"},"ts":1568798992000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"const { thing??true } = { thing: null }; thing; // thing would be true","msgtype":"m.text"},"ts":1568798992000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: In my opinion, this would be rather confusing. I'd prefer to keep things simpler.","msgtype":"m.text"},"ts":1568799965000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"howdoi: We should have some strong evidence that this is needed to add more complexity to destructuring","msgtype":"m.text"},"ts":1568799992000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: let me try to find such cases, thanks.","msgtype":"m.text"},"ts":1568801369000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: pretty much all of web specs use null in a way that might be a good place to start, e.g. `let {...} = webAPIResultOrElement`","msgtype":"m.text"},"ts":1568814961000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hmm, `Array.prototype.push.call('abc', 1);` is prohibited by V8/SM and allowed by JSC/XS, but I don't think we have a relevant Test262 case, and I'm a bit confused in analyzing  https://tc39.es/ecma262/#sec-array.prototype.push","msgtype":"m.text"},"ts":1568829189000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in that the error V8/SM gives is in assigning to String#length, but nobody complains about `let x = 'abc'; x.length++;`","msgtype":"m.text"},"ts":1568829219000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh never mind","msgtype":"m.text"},"ts":1568829258000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"> If success is false and Throw is true, throw a TypeError exception.","msgtype":"m.text"},"ts":1568829268000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jsc and xs should def be throwing","msgtype":"m.text"},"ts":1568829295000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also somehow engine262 has the most descriptive error here https://gc.gy/36534310.png","msgtype":"m.text"},"ts":1568829327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: is that different in sloppy vs strict?","msgtype":"m.text"},"ts":1568830789000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"d'oh, yup","msgtype":"m.text"},"ts":1568830824000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not the case I was concerned with but the `x.length++` is prohibited in strict, yeah","msgtype":"m.text"},"ts":1568830864000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"XS actually permits it in both","msgtype":"m.text"},"ts":1568830916000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://test262.report/browse/built-ins/String/S15.5.5.1_A4_T1.js verifies that it works in sloppy but there's doesn't seem to be a test for strict","msgtype":"m.text"},"ts":1568831112000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"huh, didn't realize you could `super` from one static field to another","msgtype":"m.text"},"ts":1568847246000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]