[
{"content":{"body":"devsnek: feels like it'd be awfully neat to optimize `a?.b ?? c` such that we don't load undefined and check whether it's nullish","msgtype":"m.text"},"ts":1566174519000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think I might need to learn how to read higher-level JIT dumps before I can achieve that though...","msgtype":"m.text"},"ts":1566174553000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(by that I mean: I think this might beyond the level of bytecode manipulation? but then for all I know maybe data-flow analysis automatically achieves something similar already? too noob to know at this moment.)","msgtype":"m.text"},"ts":1566174723000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/1fDBP0M4/","msgtype":"m.text"},"ts":1566175278000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"^ what I mean in pseudo-bytecode","msgtype":"m.text"},"ts":1566175293000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also maybe we should form an cross-engine implementers channel üòÖ","msgtype":"m.text"},"ts":1566175317000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: I don't know what the implementation of nullish coalescing looks like in V8, but if it emits reasonable bytecode it should be optimized for free","msgtype":"m.text"},"ts":1566175345000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah that's the thing","msgtype":"m.text"},"ts":1566175357000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"X expression always returns null","msgtype":"m.text"},"ts":1566175371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and Y expression is jumpifnull","msgtype":"m.text"},"ts":1566175379000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was gonna start by investigating that (in JSC) but it turns out reading the dumps is gonna take some patience/practice","msgtype":"m.text"},"ts":1566175421000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er s/was gonna start by/started to/","msgtype":"m.text"},"ts":1566175456000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it would be interesting to see if neighboring expressions could be combined","msgtype":"m.text"},"ts":1566175457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for better performance in the interpreter stage","msgtype":"m.text"},"ts":1566175463000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"JSC's bytecode generator does deal with stuff like `!x ? y z`","msgtype":"m.text"},"ts":1566175505000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ahem","msgtype":"m.text"},"ts":1566175508000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`!x ? y : z`","msgtype":"m.text"},"ts":1566175512000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hi guys. i was reading ecma262 and in section 5.15 i found a section which is particularly unclear to me. the section starting \"References to nonterminals on the right-hand side of a production can also be parameterized. For example:\"","msgtype":"m.text"},"ts":1566202389000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"5.1.5*","msgtype":"m.text"},"ts":1566202405000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"it gives two examples with a [+In] and a [~In] without explaining the logic, and then a sentence after \"A nonterminal reference may have both a parameter list and an ‚Äúopt‚Äù suffix. For example:\"","msgtype":"m.text"},"ts":1566202465000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"which implies it can occur in a list, but there is no hint at what the logic would be if it was a list of more than one element","msgtype":"m.text"},"ts":1566202478000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"it follows a section where every combinatorial combination of items from a list was used, but the examples given seem to indicate that this is not the case here","msgtype":"m.text"},"ts":1566202508000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"but the language kind of implies it's the same","msgtype":"m.text"},"ts":1566202517000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"aradesh: re \"it gives two examples with a [+In] and a [~In] without explaining the logic\". There isn't really 'logic' involved. It's just saying that, on the right-hand-side of a production, e.g. ExprStmt[+In] 'expands to' ExprStmt_In and ExprStmt[~In] to ExprStmt.","msgtype":"m.text"},"ts":1566215984000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"The whole passage about grammatical parameters is just saying how you can expand uses of them into conventional BNF notation.","msgtype":"m.text"},"ts":1566216241000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(which is probably the easiest way to specify them, but possibly not the best way to think about them when looking at productions)","msgtype":"m.text"},"ts":1566216427000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but that seems kind of redundant? if writing [+In] is literally equivalent to writing _In and [~In] is literally equivalent to writing nothing. it later mentions \"parameter list\" which implies maybe we'd see things like [+In, +Return] what would that expand to? if that isn't a legitimate thing, then the statement \"parameter list\" should be changed","msgtype":"m.text"},"ts":1566218967000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"in the previous section Stmt[In, Return] converts to four different things: Stmt, Stmt_In, Stmt_Return, Stmt_In_return","msgtype":"m.text"},"ts":1566219037000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"and the way the text reads give the impression that what follows in analogous to the previous section","msgtype":"m.text"},"ts":1566219063000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"Foo[+In, +Return] would expand to Foo_In_Return, according to the given scheme.","msgtype":"m.text"},"ts":1566220672000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Stmt[In, Return] expands to 4 things because it's on the left-hand-side.","msgtype":"m.text"},"ts":1566220768000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or, maybe a better explanation: Stmt[In, Return] expands to 4 things because \"In\" represents (the possibility of) both +In and ~In, and similarly for \"Return\".","msgtype":"m.text"},"ts":1566220871000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"okay.","msgtype":"m.text"},"ts":1566220893000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"Foo[+In, +Return] asserts specific settings for each parameter, so only expands to a single thing.","msgtype":"m.text"},"ts":1566220923000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"On the right-hand-side, Foo[?In, ?Return} would expand to 4 things","msgtype":"m.text"},"ts":1566220978000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(or: would cause the containing production to expand 4-fold)","msgtype":"m.text"},"ts":1566221052000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks. i'll read along and check this all makes sense with what i see later. it could be explained a bit more clearly though imo. the way it's written just makes me feel like i've missed something","msgtype":"m.text"},"ts":1566221136000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"I agree it's unclear, but it's not obvious to me how to make it clearer.","msgtype":"m.text"},"ts":1566221293000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"perhaps an example along the lines of Foo[?In, +Ret, ~Bar]","msgtype":"m.text"},"ts":1566221360000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"Perhaps. I worry that it might just give some readers more to be confused about.","msgtype":"m.text"},"ts":1566221775000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or perhaps start with the ? notation, and then indicate that if one of the choices is specified, you identify it with a + or a ~","msgtype":"m.text"},"ts":1566222188000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"restricting it to that one","msgtype":"m.text"},"ts":1566222198000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"I don't think you can start with '?', because it only makes sense in the context of the left-hand-side notation. i.e., you can't have [?X] on the rhs unless you have [X] on the lhs","msgtype":"m.text"},"ts":1566222315000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1566222748000,"senderName":"aradesh","senderId":"aradesh@irc"},
{"content":{"body":"devsnek: why do you say the module's context doesn't exist until evaluation? It seems to be set up during Link()","msgtype":"m.text"},"ts":1566240414000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see, context vs. environment","msgtype":"m.text"},"ts":1566240599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I have a change locally that is less invasive, of the suggestion from ljharb","msgtype":"m.text"},"ts":1566242352000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as I'm refactoring it though, I like Allen's comment","msgtype":"m.text"},"ts":1566242403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: so this was way easier than I was originally thinking: https://bugs.webkit.org/show_bug.cgi?id=200875","msgtype":"m.text"},"ts":1566254887000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1566254955000,"senderName":"devsnek","senderId":"devsnek@irc"}
]