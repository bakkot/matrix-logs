[
{"content":{"body":"devsnek: what will? the arbitrary namespaces PR never gets into bindings themselves just names","msgtype":"m.text"},"ts":1598496102000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: it has the same problem the spec has","msgtype":"m.text"},"ts":1598497034000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`.default` instead of `*default*` but same class of problem","msgtype":"m.text"},"ts":1598497057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are async stack traces standardization part of some proposal?","msgtype":"m.text"},"ts":1598537924000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no, but it’s possible they’ll have to be considered in the stacks proposal","msgtype":"m.text"},"ts":1598538446000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"anyone interested in a .mailmap for ecma262?","msgtype":"m.text"},"ts":1598548788000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: not sure what you mean, if we have mappings to do we can certainly add one","msgtype":"m.text"},"ts":1598551931000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean we definitely do","msgtype":"m.text"},"ts":1598551981000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i came up with this https://gc.gy/66256991.png","msgtype":"m.text"},"ts":1598551996000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: wait tho, github does most of these","msgtype":"m.text"},"ts":1598552048000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"are you saying these are commits that github doesn't attach to the right account?","msgtype":"m.text"},"ts":1598552059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i would imagine github is able to use accounts to figure it out","msgtype":"m.text"},"ts":1598552073000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but `git log` would need that map","msgtype":"m.text"},"ts":1598552086000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah. i guess we could? seems like we'd want CI to be able to autogenerate it with the github api tho, so we didn't have to manually keep it in sync","msgtype":"m.text"},"ts":1598552121000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"altho in that case it'd probably be better not to commit it at all, and just let folks run the command locally if they want to use it (because i don't think git uses a mailmap by default?)","msgtype":"m.text"},"ts":1598552142000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it uses it by default","msgtype":"m.text"},"ts":1598552185000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, since whne?","msgtype":"m.text"},"ts":1598552196000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1598552202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"before i started using git","msgtype":"m.text"},"ts":1598552205000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://stackoverflow.com/questions/13777171/configuring-git-log-to-use-mailmap-by-default#:~:text=The%20default%20mailmap%2C%20located%20in,outside%20of%20the%20repository%20itself.","msgtype":"m.text"},"ts":1598552279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"according to that it's off by default","msgtype":"m.text"},"ts":1598552291000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"True by default\"","msgtype":"m.text"},"ts":1598552301000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah ok, missed that","msgtype":"m.text"},"ts":1598552311000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://git-scm.com/docs/git-config#Documentation/git-config.txt-logmailmap","msgtype":"m.text"},"ts":1598552317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1598552320000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i still wonder when that changed; last time i looked into using a mailmap file it was not enabled by default, so i bailed on it","msgtype":"m.text"},"ts":1598552413000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there anything in the spec that has a [[Construct]] but not a [[Call]]","msgtype":"m.text"},"ts":1598552598000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm thinking no","msgtype":"m.text"},"ts":1598552637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> Every object that supports [[Construct]] must support [[Call]]","msgtype":"m.text"},"ts":1598552669000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"sad","msgtype":"m.text"},"ts":1598552682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i agree it's sad","msgtype":"m.text"},"ts":1598553008000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'd love to refactor so that things could have Construct but not Call","msgtype":"m.text"},"ts":1598553025000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it'd require some nastiness in Proxy, and typeof function would have to check either slot","msgtype":"m.text"},"ts":1598553039000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"luckily i already have a \"ConstructorNonCallable\" exception for symbol and map and whatnot","msgtype":"m.text"},"ts":1598553143000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: both Call() and Construct() check that they have the appropriate internal slot separately though at least idk what you need to do in proxy","msgtype":"m.text"},"ts":1598553190000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"proxy needs a two line change","msgtype":"m.text"},"ts":1598553216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"specifically the removal of indentation","msgtype":"m.text"},"ts":1598553225000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it'd also be observable if Proxy threw when you provided `construct` to a callable non-constructible thing, or `apply` to a constructible non-callable thing","msgtype":"m.text"},"ts":1598553248000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i haven't really looked into it","msgtype":"m.text"},"ts":1598553275000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: right now proxy doesn't throw if you add handlers that aren't going to be used (e.g. `new Proxy({}, {apply() {}})()` works)","msgtype":"m.text"},"ts":1598553394000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait what","msgtype":"m.text"},"ts":1598553445000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why did i think it did","msgtype":"m.text"},"ts":1598553461000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah ok nvm","msgtype":"m.text"},"ts":1598553550000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it can't since it doesn't even read the handlers until you try to invoke the relevant trap","msgtype":"m.text"},"ts":1598554007000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wish there was a way to invoke a constructor on an instance","msgtype":"m.text"},"ts":1598554277000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: what does that mean","msgtype":"m.text"},"ts":1598555952000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: for example invoke Map on an object to turn that object into a Map","msgtype":"m.text"},"ts":1598555997000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can if the constructor takes an object","msgtype":"m.text"},"ts":1598556017000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"create a new map?","msgtype":"m.text"},"ts":1598556018000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"`new Map(Object.fromEntries(obj))` tho :-p","msgtype":"m.text"},"ts":1598556026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like if you already have an instance","msgtype":"m.text"},"ts":1598556034000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the need doesn't fit our object model works","msgtype":"m.text"},"ts":1598556048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's no solution","msgtype":"m.text"},"ts":1598556050000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so same identity/ref but swapping out the structure","msgtype":"m.text"},"ts":1598556066000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1598556130000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does @@hasInstance of Function.prototype actually do anything?","msgtype":"m.text"},"ts":1598556319000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: isn't that what makes instanceof work for Function constructors?","msgtype":"m.text"},"ts":1598556679000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"InstanceofOperator -> OrdinaryHasInstance(target, V)","msgtype":"m.text"},"ts":1598556789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"@@hasInstance -> OrdinaryHasInstance(this, V)","msgtype":"m.text"},"ts":1598556798000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i could be reading this wrong but isn't this the same","msgtype":"m.text"},"ts":1598556849000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure what you mean","msgtype":"m.text"},"ts":1598556898000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would the behaviour of js change at all","msgtype":"m.text"},"ts":1598556929000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if Function.prototype[@@hasInstance] was removed","msgtype":"m.text"},"ts":1598556937000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think so","msgtype":"m.text"},"ts":1598556948000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but you can override it.","msgtype":"m.text"},"ts":1598556950000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`Object.defineProperty(Function, Symbol.hasInstance, { value: () => false }); Function instanceof Function // false`","msgtype":"m.text"},"ts":1598556958000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i was just trying to figure out why it exists","msgtype":"m.text"},"ts":1598556972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"most of the symbol protocols have identical fallbacks","msgtype":"m.text"},"ts":1598556974000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"maybe in past editions it did more stuff","msgtype":"m.text"},"ts":1598556976000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it exists so non-builtins can opt into the protocol","msgtype":"m.text"},"ts":1598556980000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's defined on builtins for consistnecy","msgtype":"m.text"},"ts":1598556986000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1598557089000,"senderName":"devsnek","senderId":"devsnek@irc"}
]