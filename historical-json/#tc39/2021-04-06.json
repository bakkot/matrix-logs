[
{"content":{"body":"re Issue 2373, something I don't understand: erights says that if `new Function(attackerProvidedString)` succeeds, then `attackerProvidedString` is a syntactically valid function body (agreed), and then says \"that may then be safely concatenated in exactly this way without creating an injection attack\". I don't understand how mere syntactic validity prevents an injection attack. Can't a valid function body nevertheless ","msgtype":"m.text"},"ts":1617669548000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck you got cut off, I think?","msgtype":"m.text"},"ts":1617669730000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Can't a valid function body nevertheless be an attack?","msgtype":"m.text"},"ts":1617669755000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes, but only once executed","msgtype":"m.text"},"ts":1617669888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1617669950000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb, does `is-map` really need to know if `$Set.call(x)` throws? Would this still work as expected w/o determining if `x` were also a `Set` in this module? https://github.com/inspect-js/is-map/blob/main/index.js#L34","msgtype":"m.text"},"ts":1617669974000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"Bakkot: Is he saying this?: if `new Function(x)` doesn't raise a syntax error, then you can call the resulting function without fear of an injection attack.","msgtype":"m.text"},"ts":1617670241000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"If so, that's what i don't understand.","msgtype":"m.text"},"ts":1617670252000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I believe he is saying that he has code which uses `Function` to check if something is a valid function body, and then discards the result and composes it with other code and `eval`s the result, in a way which is safe iff the code assumed to be a valid function body is in fact a valid function body","msgtype":"m.text"},"ts":1617670764000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this being the sort of thing he likes to do","msgtype":"m.text"},"ts":1617670830000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, ok.","msgtype":"m.text"},"ts":1617670833000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"DerekNonGeneric: it's required because of a core-js bug, where some versions of it don't distinguish between Map and Set.","msgtype":"m.text"},"ts":1617670844000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"DerekNonGeneric: iow, if not for core-js, that file wouldn't need any Set things at all","msgtype":"m.text"},"ts":1617670856000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wow, what a weird bug","msgtype":"m.text"},"ts":1617670912000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"Bakkot: in that case, I'm surprised that he can guarantee safeness of eval'ing the composed thing merely by knowing that x is a valid function body. Unless the composed thing doesn't actually execute x, I guess.","msgtype":"m.text"},"ts":1617671093000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right, that's my assumption","msgtype":"m.text"},"ts":1617671103000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least does not immediately eval it, but perhaps instead stashes it somewhere and evals it in a very restrictive (`with (proxy)`) environment","msgtype":"m.text"},"ts":1617671137000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or not `with (proxy)` but defensive in some manner, at any rate","msgtype":"m.text"},"ts":1617671169000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is his whole thing, with es-membrane and so on","msgtype":"m.text"},"ts":1617671176000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but not defensive enough to deal with x not being a valid function body.","msgtype":"m.text"},"ts":1617671216000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ok, i think i can kind of see how that makes sense, thanks.","msgtype":"m.text"},"ts":1617671264000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: re 2374, we usually capitalize the first word of a NOTE (if it isn't an alias or some such)","msgtype":"m.text"},"ts":1617671510000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, nice catch","msgtype":"m.text"},"ts":1617671520000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one more for the linter","msgtype":"m.text"},"ts":1617671523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there are a couple exceptions elsewhere","msgtype":"m.text"},"ts":1617671547000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: node used to be vulnerable to `require` in that way, because the implementation used to just slap function text around the module contents and eval it","msgtype":"m.text"},"ts":1617671632000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: so it's a legit attack surface. i just don't think it's that big a deal here since only one out of like a dozen implementations misinterpreted it","msgtype":"m.text"},"ts":1617671655000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb markm's claim is that the new text, as of 2348, is easier to misinterpret","msgtype":"m.text"},"ts":1617671861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: I see we have two existing notes in violation of this new rule","msgtype":"m.text"},"ts":1617671884000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean, maybe, but xs's impl predates that for sure","msgtype":"m.text"},"ts":1617671886000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: (that's what I meant by \"there are a couple exceptions elsewhere\")","msgtype":"m.text"},"ts":1617671919000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, totally missed that line","msgtype":"m.text"},"ts":1617671931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"xst parses the concatenation as an Expression, I guess?","msgtype":"m.text"},"ts":1617671947000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"If anything, xst's bug is an indication that the *former* text is \"easy to misinterpret\"","msgtype":"m.text"},"ts":1617672099000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1617672215000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"altho, i'm also surprised we don't have a test262 case for this one","msgtype":"m.text"},"ts":1617672235000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we don't? ee","msgtype":"m.text"},"ts":1617672285000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"issue comments imply we don't","msgtype":"m.text"},"ts":1617672302000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i haven't looked myself","msgtype":"m.text"},"ts":1617672313000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hm, lots of tests in built-ins/Function/","msgtype":"m.text"},"ts":1617672352000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(a lot of which don't actually call Function!)","msgtype":"m.text"},"ts":1617672470000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I looked and couldn't find one","msgtype":"m.text"},"ts":1617672607000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and xs does run test262, so it probably would have caught it","msgtype":"m.text"},"ts":1617672615000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one could always modify https://github.com/engine262/engine262/blob/a1204a50231457ad6183573c6957267f66f094bb/src/runtime-semantics/CreateDynamicFunction.mjs#L29 to have the bug and run test262 with the modification and see if there are any test failures","msgtype":"m.text"},"ts":1617672660000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I'm much too lazy for that at the moment","msgtype":"m.text"},"ts":1617672667000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah, I couldn't find a test that tries to do something inject-y with Function()","msgtype":"m.text"},"ts":1617672715000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck https://github.com/tc39/ecmarkup/pull/315 will hopefully prevent my mistake in the future","msgtype":"m.text"},"ts":1617672866000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sidebar: I am looking forward to integrating 545 into the linter, to check AOs are called with the appropriate number of arguments","msgtype":"m.text"},"ts":1617672892000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can't yet check types, but even that step is going to help a fair bit","msgtype":"m.text"},"ts":1617672907000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this will also make the build a lot slower, probably, but what can you do","msgtype":"m.text"},"ts":1617672921000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm pretty sure my static analysis would have found wrong-number-of-args.","msgtype":"m.text"},"ts":1617672953000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"probably!","msgtype":"m.text"},"ts":1617672966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"In fact, I'm sure it *did*, I'm not positive it found them all though.","msgtype":"m.text"},"ts":1617672976000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I am steadily reimplementing all of your static analysis, apparently","msgtype":"m.text"},"ts":1617672986000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1617672992000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"except I get the advantage of being able to make the spec consistent first","msgtype":"m.text"},"ts":1617673006000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not fair.","msgtype":"m.text"},"ts":1617673015000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"So editors are going to decide how to handle/format the weird cases, and we'll iterate on those, and 545 will be ready?","msgtype":"m.text"},"ts":1617673331000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or is there more to do?","msgtype":"m.text"},"ts":1617673614000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I will probably submit a PR making some stuff consistent first, namely the following:","msgtype":"m.text"},"ts":1617673987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(maybe) drop Static Semantics prefix on AOs","msgtype":"m.text"},"ts":1617673995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- move emu-notes which are between \"It performs...\" and emu-alg to just before \"It performs...\"","msgtype":"m.text"},"ts":1617673995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"  - and emu-notes which are before the preamble to the same: GlobalDeclarationInstantiation, BlockDeclarationInstantiation, FunctionDeclarationInstantiation","msgtype":"m.text"},"ts":1617673995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- split text in GetWaiterList into its own clause","msgtype":"m.text"},"ts":1617673995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- \"This operation\" -> \"It\" for `sec-createsetiterator`, `sec-createmapiterator`, `sec-createarrayiterator`","msgtype":"m.text"},"ts":1617673995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- the flatmap arguments thing","msgtype":"m.text"},"ts":1617673996000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- phrasing for LocalTZA","msgtype":"m.text"},"ts":1617673997000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- phrasing for HostEnqueueFinalizationRegistryCleanupJob","msgtype":"m.text"},"ts":1617673998000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- drop \"Concrete Method\" suffix","msgtype":"m.text"},"ts":1617673999000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- add <p>The abstract operation StringToBigInt takes argument <var>argument</var>.</p>","msgtype":"m.text"},"ts":1617674000000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I suspect the thing we will decide for the weird cases is that they shouldn't be part of 545","msgtype":"m.text"},"ts":1617674029000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but we'll discuss it","msgtype":"m.text"},"ts":1617674039000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then I believe it will be ready to land, yes","msgtype":"m.text"},"ts":1617674074000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I guess I'll also need to fix up ecmarkup a bit more","msgtype":"m.text"},"ts":1617674100000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh! the other thing was SDOs","msgtype":"m.text"},"ts":1617674105000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"did you want to land SDOs in a followup, or something else?","msgtype":"m.text"},"ts":1617674126000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(\"flatmap\" -> \"FlattenIntoArray\" ?)","msgtype":"m.text"},"ts":1617675491000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah that","msgtype":"m.text"},"ts":1617675498000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well, in my master, I've disbanded the Annex-of-SDO-headers: each SDO header now appears in the first (and usually only) clause that defines the SDO.","msgtype":"m.text"},"ts":1617675628000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but I haven't pushed that to my 545 branch yet.","msgtype":"m.text"},"ts":1617675651000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right. so if you do push it to 545, there's potentially more to do there - ecmarkup doesn't support it yet, and I don't know what changes to the generated output will be implied","msgtype":"m.text"},"ts":1617675695000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you do it in a followup then of course it doesn't matter for 545","msgtype":"m.text"},"ts":1617675709000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Also, it'll raise the question of how to handle https://tc39.es/ecma262/#sec-static-semantics-tv-and-trv","msgtype":"m.text"},"ts":1617675719000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"You could just split them into two separate clauses: there's only 4 simple cases in common.","msgtype":"m.text"},"ts":1617675973000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And I'm guessing that would allow uses of TV and TRV to autolink.","msgtype":"m.text"},"ts":1617676532000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I could do that right now, if you like.","msgtype":"m.text"},"ts":1617676602000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sure, that seems reasonable","msgtype":"m.text"},"ts":1617676948000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as subclauses of 12.8.6.1, perhaps, with the text currently at the start of 12.8.6.1 left where it is?","msgtype":"m.text"},"ts":1617676966000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so 12.8.6.1 would be","msgtype":"m.text"},"ts":1617676974000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I wasn't thinking they needed to be grouped.","msgtype":"m.text"},"ts":1617677052000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"<h1>Static Semantics: TV and TRV</h1>\\n<p>A template literal component [...] <emu-clause aoid=\"TV\">...</emu-clause> <emu-clause aoid=\"TRV\">...</emu-clause>","msgtype":"m.text"},"ts":1617677059000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, mostly I want to group them so that the text in 12.8.6.1 has an obvious place to go","msgtype":"m.text"},"ts":1617677080000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we could also rephrase it, but I don't see harm in grouping","msgtype":"m.text"},"ts":1617677101000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all but its last sentence is talking about TV","msgtype":"m.text"},"ts":1617677119000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it's talking about TV, but mostly applies to TRV as well","msgtype":"m.text"},"ts":1617677173000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the last sentence is talking about TRV. so that seemed like a good split for that para.","msgtype":"m.text"},"ts":1617677174000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but TRV says it's similar to TV.","msgtype":"m.text"},"ts":1617677198000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"/shrug","msgtype":"m.text"},"ts":1617677218000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm OK with splitting that text if you strongly prefer to do so, but still lean towards grouping them in one clause and leaving the text as-is","msgtype":"m.text"},"ts":1617677228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think there is harm in grouping such similar operations","msgtype":"m.text"},"ts":1617677237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, I'll pr what i've got, and editors can decide.","msgtype":"m.text"},"ts":1617677437000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Done.","msgtype":"m.text"},"ts":1617679057000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1617679120000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"That doubling-up has been an occasional annoyance for ages, i'm surprised I didn't notice before how splittable it was.","msgtype":"m.text"},"ts":1617679169000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yay, autolinking works","msgtype":"m.text"},"ts":1617679282000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: I think that `Function` example is still illegal under 2348, because you're missing a ')'. Instead, make the first arg ') /*' or the second arg '*/ ) {'","msgtype":"m.text"},"ts":1617680087000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ah, yeah, thanks","msgtype":"m.text"},"ts":1617680247000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm sorry that problem with 2348 didn't occur to me.","msgtype":"m.text"},"ts":1617680298000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it happens, no one else caught it either","msgtype":"m.text"},"ts":1617680475000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am annoyed at myself for not catching it; I work in security, and this is an instance of a very common class of parsing-related security bug, where the parse of the composition of two things has different properties than the composition of their individual parses.","msgtype":"m.text"},"ts":1617680622000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]