[
{"content":{"body":"o/","msgtype":"m.text"},"ts":1598729680000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"is there a way to list the internal methods of an Object? [AFAIR, we can only do it in the JS engine with some help of C++ methods]","msgtype":"m.text"},"ts":1598729982000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: you mean from JS?","msgtype":"m.text"},"ts":1598733647000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: yes","msgtype":"m.text"},"ts":1598733683000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"if there were then they wouldn't be internal","msgtype":"m.text"},"ts":1598733705000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's also no guarantee that they exist at all; they're just how the spec defines the observable behavior of objects","msgtype":"m.text"},"ts":1598733726000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"nods, https://tc39.es/ecma262/#table-5 are the essential ones, right?","msgtype":"m.text"},"ts":1598733861000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"yup: `Table 6: Essential Internal Methods`","msgtype":"m.text"},"ts":1598734072000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sidebar: we had a project to make tables have real IDs instead of numbers which get stale","msgtype":"m.text"},"ts":1598734104000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we should get back to that","msgtype":"m.text"},"ts":1598734111000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"can't find an issue for it... guess I will open one","msgtype":"m.text"},"ts":1598734181000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nice! I would like to contribute to that effort.","msgtype":"m.text"},"ts":1598734183000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"aha: https://github.com/tc39/ecma262/pull/2060","msgtype":"m.text"},"ts":1598734228000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just gotta get another editor to stamp it","msgtype":"m.text"},"ts":1598734241000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1598734942000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Bakkot: it occurs to me, the annoying part of the invariants is not so much that they exist, but that they're enforced against the proxy target","msgtype":"m.text"},"ts":1598739331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what else could they be enforced against?","msgtype":"m.text"},"ts":1598739346000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1598739349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but like if your traps behave consistently","msgtype":"m.text"},"ts":1598739355000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and do things not related to the trap","msgtype":"m.text"},"ts":1598739360000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it would probably be better if \"target\" had been called \"witness\"","msgtype":"m.text"},"ts":1598739380000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since that's its actual function","msgtype":"m.text"},"ts":1598739388000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i had this issue when i was faking module namespace objects via proxies","msgtype":"m.text"},"ts":1598739395000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, the confusion is that the design suggests that the point of the \"target\" is that it is in some sense \"the actual object\", rather than serving a proof that the proxy is behaving consistently wrt the object invariants, which is the thing it actually does","msgtype":"m.text"},"ts":1598739499000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*serving as a proof","msgtype":"m.text"},"ts":1598739505000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":" well in terms of the ses use case of proxies it makes sense","msgtype":"m.text"},"ts":1598739538000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but if you're going for like \"new exotic behaviour\" it's a bit meh","msgtype":"m.text"},"ts":1598739559000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"IIRC SES uses \"shadow targets\" rather than directly wrapping the object, so I don't think the design even suits SES's use case","msgtype":"m.text"},"ts":1598739615000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well i'm definitely not an ses expert","msgtype":"m.text"},"ts":1598739647000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you google \"ses shadow target\" it's just results for some handgun","msgtype":"m.text"},"ts":1598739678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mark mentions it here: https://github.com/Agoric/SES-shim/issues/88#issuecomment-552685187","msgtype":"m.text"},"ts":1598739723000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I think I got that idea from conversations with him; I don't know what they actually call it (and have not read the source lately)","msgtype":"m.text"},"ts":1598739748000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]