[
{"content":{"body":"jmdyck: updated the gist with a summary of different engines: https://gist.github.com/bakkot/587234af192dcb86f6a76b024a416c1c#file-iterator-result-realm-js-L74-L88","msgtype":"m.text"},"ts":1620174713000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"honestly I like safari's behavior best, I think","msgtype":"m.text"},"ts":1620174745000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"there are there\" -> \"there are three\"","msgtype":"m.text"},"ts":1620174989000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks, fixed","msgtype":"m.text"},"ts":1620175080000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, also my claim that the spec unconditionally uses `.next`'s realm for the async case is maybe not true","msgtype":"m.text"},"ts":1620175168000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least when there is an `await` involved","msgtype":"m.text"},"ts":1620175221000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like safari's behavior best in that it makes the most sense, or would be cleanest to specify?","msgtype":"m.text"},"ts":1620175580000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also: \"I'm not entirely about this\" -> \"I'm not entirely sure about this\" ?","msgtype":"m.text"},"ts":1620175622000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hah yes","msgtype":"m.text"},"ts":1620175681000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck like it best in that it makes the most sense","msgtype":"m.text"},"ts":1620175698000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least for sync generators","msgtype":"m.text"},"ts":1620175701000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for async, depends a bit on your perspective, I guess","msgtype":"m.text"},"ts":1620175756000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"either safari's behavior - \"always .next's realm\"- or a behavior no one actually has, \"always the generator's realm\", would be coherent choices, I think","msgtype":"m.text"},"ts":1620175800000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wrt 2400, I could make a PR that applied the suggested change to Await and GeneratorYield, and that would be an improvement, I think, but that would still leave AGYield, so I think I'll wait until that's settled.","msgtype":"m.text"},"ts":1620176002000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But it sounds like that might be a while.","msgtype":"m.text"},"ts":1620176013000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but of those two coherent choices, I prefer using `.next`, since the code in generator itself never creates a thing which looks like `{ value, done }`, which suggests that `.next` is responsible for creating that object","msgtype":"m.text"},"ts":1620176047000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, probably","msgtype":"m.text"},"ts":1620176049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm a bit hesitant to bring this to committee, because very few people understand realms at all, and even fewer care","msgtype":"m.text"},"ts":1620176082000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what's the alternative?","msgtype":"m.text"},"ts":1620176109000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"suffer from the spec being bad forever, basically","msgtype":"m.text"},"ts":1620176123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ee","msgtype":"m.text"},"ts":1620176128000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I also do not like that option","msgtype":"m.text"},"ts":1620176136000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if I do bring it, it will be because I have a concrete change to the specification I want to make which I think improves clarity, and which entails a normative change","msgtype":"m.text"},"ts":1620176154000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which will probably look roughly like either your suggestion in 2400 + some tracking of realms for AGYield, and rewriting AGYield, or, otherwise, my earlier suggestion about conflating stack manipulation and transfer of control, if I can figure out how to make it work","msgtype":"m.text"},"ts":1620176627000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think my suggestion in 2400 would allow some refactoring that might get things close to the conflation model. (with various caveats)","msgtype":"m.text"},"ts":1620179647000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, agreed","msgtype":"m.text"},"ts":1620181267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb, extending the generic builtin error type (`globalThis.Error`) seems like the wrong approach for `AssertionError` tbh","msgtype":"m.text"},"ts":1620194826000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"the few instance properties inherited from it that are guaranteed by the spec (`message` & `name`) do not seem to outweigh the useless, insecure, and terribly unreliable instance properties that would be inherited by it the various hosts","msgtype":"m.text"},"ts":1620195513000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"*that would be inherited by it in the various hosts","msgtype":"m.text"},"ts":1620195711000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: all the builtin error constructor classes inherit from Error","msgtype":"m.text"},"ts":1620196934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you'd need a very, very strong reason for a new one to not do so","msgtype":"m.text"},"ts":1620196950000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot, do you think having a few pretty-strong reasons would be sufficient?","msgtype":"m.text"},"ts":1620197787000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"depends on how strong they were I guess","msgtype":"m.text"},"ts":1620197800000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there aught to be a new `Exception` (or something) class we can inherit from w/o all the non-standard behavior. we need something that provides position information, which is a core tenet of what an assertion error _should_ be able to provide as a debugging tool","msgtype":"m.text"},"ts":1620199011000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric: that behavior isnâ€™t something the spec can prohibit. Implementations could stick the same info on Exception.","msgtype":"m.text"},"ts":1620215374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it may be more likely that in a future ES202X the Error constructor inherits from Exception, which would provide all the internal properties and methods","msgtype":"m.text"},"ts":1620258898000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"}
]