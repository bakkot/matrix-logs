[
{"content":{"body":"rkirsling: is there a better short phrase?","msgtype":"m.text"},"ts":1587773453000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: oh it just made me wonder what would be \"denying\"","msgtype":"m.text"},"ts":1587773761000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the ability to make a new reference to the value in question without being passed it","msgtype":"m.text"},"ts":1587773790000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"basically you can't prevent someone from being able to get a reference =? it cannot be denied access","msgtype":"m.text"},"ts":1587773814000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"term comes from the ocap focused members within tc39 so it kind of makes sense to be so terse","msgtype":"m.text"},"ts":1587773846000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hmm I see","msgtype":"m.text"},"ts":1587773920000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"why not just \"accessible\"?","msgtype":"m.text"},"ts":1587777785000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: things are accessible even if you can deny them by deleting globally accessible references. undeniable is a subset of accessible","msgtype":"m.text"},"ts":1587777858000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the implementation can delete, or some other ES code can delete?","msgtype":"m.text"},"ts":1587777929000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"there is just a lot of undocumented murkiness here, but the import part is about if something is deniable, not if it can be accessed","msgtype":"m.text"},"ts":1587777935000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jmdyck: that is also murky (see things where __proto__ are being deleted these days by runtimes)","msgtype":"m.text"},"ts":1587777961000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"jmdyck: if first-run code can prevent you from getting to it, it's deniable","msgtype":"m.text"},"ts":1587777969000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's the definition","msgtype":"m.text"},"ts":1587777975000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(because the only security model that exists in JS is \"being first-run code\")","msgtype":"m.text"},"ts":1587777995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"pretty much","msgtype":"m.text"},"ts":1587778006000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you have to apply other things ontop of running first to get other guarantees","msgtype":"m.text"},"ts":1587778020000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"hm, so now I'm wondering how anything is undeniable","msgtype":"m.text"},"ts":1587778029000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: usually via prototypes being stuck on things, even if you don't have a ref to String.prototype, '' leaks it as its own prototype , https://github.com/Agoric/SES-shim/blob/05582658d61c4551472329a59ddca1455f256d23/packages/harden/src/anonIntrinsics.js#L78-L85","msgtype":"m.text"},"ts":1587778324000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I guess if it were unobstructable / unobscurable then it would be straightforward but \"undeniable\" is colloquially a synonym \"legitimate\" hehe","msgtype":"m.text"},"ts":1587779144000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*synonym for","msgtype":"m.text"},"ts":1587779153000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(or well \"unequivocal\" would be more accurate than legitimate but whatever)","msgtype":"m.text"},"ts":1587779202000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"or more succinctly, \"deny X\" != \"deny access to X\"","msgtype":"m.text"},"ts":1587779276000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I realize this is wasted effort on my part lol","msgtype":"m.text"},"ts":1587779297000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: anything accessible from syntax is generally undeniable","msgtype":"m.text"},"ts":1587787448000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"For single-word clarity, I like rkirsling's \"unobstructable\" / \"unobscurable\".","msgtype":"m.text"},"ts":1587837490000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"why does pattern syntax use [empty] instead of _opt","msgtype":"m.text"},"ts":1587845592000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what's pattern synta","msgtype":"m.text"},"ts":1587845895000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"x","msgtype":"m.text"},"ts":1587845896000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there anywhere that has the entire expansion be opt-marked?","msgtype":"m.text"},"ts":1587845907000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think that's why.","msgtype":"m.text"},"ts":1587845914000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like why `( GroupSpecifier Disjunction )`","msgtype":"m.text"},"ts":1587846157000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: destructuring? pattern matching?","msgtype":"m.text"},"ts":1587846159000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"where `GroupSpecifier : [empty]` is a thing","msgtype":"m.text"},"ts":1587846164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instead of just doing","msgtype":"m.text"},"ts":1587846167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`( GroupSpecifier_opt Disjunction )`","msgtype":"m.text"},"ts":1587846173000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: regex","msgtype":"m.text"},"ts":1587846178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1587846275000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah that does seem weird","msgtype":"m.text"},"ts":1587846341000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if you did that you could probably update the static semantics bits to talk about GroupName instead","msgtype":"m.text"},"ts":1587846446000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ClassRanges too is weird like that","msgtype":"m.text"},"ts":1587846504000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems like an editorial opportunity to me","msgtype":"m.text"},"ts":1587846522000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also kind of weird because it allows like","msgtype":"m.text"},"ts":1587846599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`/a|/`","msgtype":"m.text"},"ts":1587846604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"empty alternatives","msgtype":"m.text"},"ts":1587846608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean `Alternative: [empty]` could still be desirable","msgtype":"m.text"},"ts":1587846756000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"err ::","msgtype":"m.text"},"ts":1587846764000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure off the top of my head how you'd get rid of it","msgtype":"m.text"},"ts":1587846812000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what do you call `?=` and `?!` and `?<=` and `?<!` in groups","msgtype":"m.text"},"ts":1587846980000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well i know ?<= is lookbehind","msgtype":"m.text"},"ts":1587846998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"lookaround\", I believe","msgtype":"m.text"},"ts":1587847056000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1587847078000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"s/oh//","msgtype":"m.text"},"ts":1587847134000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"aha https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions","msgtype":"m.text"},"ts":1587847147000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lookahead, negative lookahead, lookbehind, and negative lookbehind","msgtype":"m.text"},"ts":1587847164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, I thought you want a single name for all four","msgtype":"m.text"},"ts":1587847177000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*wanted","msgtype":"m.text"},"ts":1587847181000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"laoops","msgtype":"m.text"},"ts":1587847187000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops*","msgtype":"m.text"},"ts":1587847189000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm trying to design a usable AST","msgtype":"m.text"},"ts":1587847201000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for ch, return the result of applying that mapping to ch.","msgtype":"m.text"},"ts":1587855881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i nominate this as the most jank algorithm step","msgtype":"m.text"},"ts":1587855892000,"senderName":"devsnek","senderId":"devsnek@irc"}
]