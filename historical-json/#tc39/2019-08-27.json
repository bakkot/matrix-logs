[
{"content":{"body":"how strange this chat work... ok no matter... sorry for offtop","msgtype":"m.text"},"ts":1566865733000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"I need time to get used to it...","msgtype":"m.text"},"ts":1566865733000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"esdiscuss.org work strange too... but ok... my main thought: i create new wrapper","msgtype":"m.text"},"ts":1566865836000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"some comments and code here:","msgtype":"m.text"},"ts":1566865922000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"https://gist.github.com/goloroden/c976971e5f42c859f64be3ad7fc6f4ed#gistcomment-3008872","msgtype":"m.text"},"ts":1566865923000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"Dimitrian: you can already return promises from constructors","msgtype":"m.text"},"ts":1566866154000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"omg that timing","msgtype":"m.text"},"ts":1566866161000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: already? yes, but my proposal -  native AsyncClass","msgtype":"m.text"},"ts":1566866866000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"Dimitrian: is that just allowing await in the constructor?","msgtype":"m.text"},"ts":1566866936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Dimitrian: generally the ecosystem has moved to a pattern where if you have async logic, you'd have a static method","msgtype":"m.text"},"ts":1566866994000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`new X() instanceof X` generally being considered bad","msgtype":"m.text"},"ts":1566867013000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: idea simple Class return obj, Async return promise same like async func","msgtype":"m.text"},"ts":1566867145000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"Dimitrian: i see the idea","msgtype":"m.text"},"ts":1566867155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm saying i think a better pattern is a separate function for the async behaviour","msgtype":"m.text"},"ts":1566867248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"factory\" as they called it on the mailing list you linked","msgtype":"m.text"},"ts":1566867261000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek:i will use my ugly wrapper and seems not only i have pain without async","msgtype":"m.text"},"ts":1566867280000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"personally i've done `static async create() { const x = await xyz; const y = await xyz; return new this(x, y); }`","msgtype":"m.text"},"ts":1566867332000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then your public api is `Thing.create()`","msgtype":"m.text"},"ts":1566867344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes i know this way, but how you extends then?","msgtype":"m.text"},"ts":1566867381000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"you don't","msgtype":"m.text"},"ts":1566867415000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i'd consider that safer","msgtype":"m.text"},"ts":1566867427000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"extending something that returns a promise means your `this` value is now a promise instance","msgtype":"m.text"},"ts":1566867443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but my wrapper can) but this all not native...","msgtype":"m.text"},"ts":1566867447000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"in the extends case, i'd suggest https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/","msgtype":"m.text"},"ts":1566867501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"try simple repeat my wrapper with you method","msgtype":"m.text"},"ts":1566867608000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"*sample","msgtype":"m.text"},"ts":1566867616000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"i think my way is more simple and near native...","msgtype":"m.text"},"ts":1566867717000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"but however not native and ugly anyway","msgtype":"m.text"},"ts":1566867861000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"It seems that GitHub pages serves up different content depending on whether you request via HTTP vs HTTPS.","msgtype":"m.text"},"ts":1566916776000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I added a file to my gh-pages branch, pushed it up, and then tried to access it on github.io, got 404.","msgtype":"m.text"},"ts":1566916848000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Eventually, I discovered that I had to request it via HTTPS.","msgtype":"m.text"},"ts":1566916880000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Hmm, *now* http works.","msgtype":"m.text"},"ts":1566916978000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hrmph","msgtype":"m.text"},"ts":1566916993000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"It's like there's a cache, and https forces a cache-refresh, and http doesn't.","msgtype":"m.text"},"ts":1566917079000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: you should check the box in repo options that disallows http anyways","msgtype":"m.text"},"ts":1566923942000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Done. thanks.","msgtype":"m.text"},"ts":1566928533000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"here always so quiet... i wrote some thouths in esdiscuss https://esdiscuss.org/topic/async-class#content-31","msgtype":"m.text"},"ts":1566931843000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"repeat here main:  seems my idea not bad, just need help with good semantic","msgtype":"m.text"},"ts":1566931918000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"},
{"content":{"body":"maybe another main word? like not async => promise_class","msgtype":"m.text"},"ts":1566931959000,"senderName":"Dimitrian","senderId":"Dimitrian@irc"}
]