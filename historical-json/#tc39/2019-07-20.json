[
{"content":{"body":"there's no example of how to implement evaluating generic module X when you're dynamic importing","msgtype":"m.text"},"ts":1563584364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shouldn't there be like a `HostEnsureModuleEvaluated(moduleRecord)` that the thing would call or something","msgtype":"m.text"},"ts":1563584395000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and like what do i do if i resolve to a module that is evaluating, the spec says i must return a module that is evaluated, do i wait a tick or something?","msgtype":"m.text"},"ts":1563584642000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the module isn't cyclic, how would i even know if its been evaluated or not","msgtype":"m.text"},"ts":1563584771000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: \"evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion\"","msgtype":"m.text"},"ts":1563587549000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes that's the line that is giving me trouble","msgtype":"m.text"},"ts":1563587612000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"How your host ensures modules Evaluate() methods have been called is up to your host.","msgtype":"m.text"},"ts":1563587635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can see examples of how it's done in browsers by looking at the HTML spec.","msgtype":"m.text"},"ts":1563587645000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i mean for an abstract module record","msgtype":"m.text"},"ts":1563587653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its safe to just do `Evaluate()`","msgtype":"m.text"},"ts":1563587657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because its required to return undefined if its already evaluated","msgtype":"m.text"},"ts":1563587664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Abstract module records Evaluate() doesn't exist","msgtype":"m.text"},"ts":1563587683000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it is not safe to do it since it doesn't make sense","msgtype":"m.text"},"ts":1563587689000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"abstract module records have Link() and Evaluate()","msgtype":"m.text"},"ts":1563587708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"They do not","msgtype":"m.text"},"ts":1563587713000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Concrete subclasses do","msgtype":"m.text"},"ts":1563587717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"test/test262/test/language/expressions/dynamic-import/assignment-expression/unary-expr.js","msgtype":"m.text"},"ts":1563587717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1563587723000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok but i mean","msgtype":"m.text"},"ts":1563587726000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the concrete implementations are required to return undefined if its already evaluated","msgtype":"m.text"},"ts":1563587742000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sure but there will usually be a lot more involved in evaluating a module than just calling Evaluate()","msgtype":"m.text"},"ts":1563587767000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"here's the logic i'm using so far https://gc.gy/31292760.png","msgtype":"m.text"},"ts":1563587772000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you'll notice that this can return modules that are `evaluating` or `linking`","msgtype":"m.text"},"ts":1563587784000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i've seen at least one example of it returning a module that is `evaluating`","msgtype":"m.text"},"ts":1563587795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I suggest studying https://html.spec.whatwg.org/multipage/webappapis.html#hostimportmoduledynamically(referencingscriptormodule,-specifier,-promisecapability) and linked algorithms.","msgtype":"m.text"},"ts":1563587798000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They ensure the result is always evaluated","msgtype":"m.text"},"ts":1563587806000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i am not doubting that algorithms to do this can exist","msgtype":"m.text"},"ts":1563588037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm just confused why the spec doesn't provide one","msgtype":"m.text"},"ts":1563588042000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Doing so is intricately entangled in host mechanisms","msgtype":"m.text"},"ts":1563588060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The spec's job is not to provide a host for finding/linking/evaluating modules. That requires a host. If you want engine262 to be a host, you'll need your own algorithms. The algorithms you use will not generally be useful to other hosts.","msgtype":"m.text"},"ts":1563588115000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"its able to run them not-dynamically without any host algorithms","msgtype":"m.text"},"ts":1563588133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I can't see how that's true. There's no algorithm in the spec to turn specifiers into source text strings (e.g. by reading file contents)","msgtype":"m.text"},"ts":1563588161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"no, but once you resolve the modules","msgtype":"m.text"},"ts":1563588171000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec has all the algorithms to run them","msgtype":"m.text"},"ts":1563588178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for dynamic imports though, the spec is like \"lol figure that out yourself\"","msgtype":"m.text"},"ts":1563588191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The situation is the same here","msgtype":"m.text"},"ts":1563588192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Once you dynamically import the module, the spec has all the algorithms to run them","msgtype":"m.text"},"ts":1563588203000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You just need to call them","msgtype":"m.text"},"ts":1563588208000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In a way that makes sense for your host","msgtype":"m.text"},"ts":1563588218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Note how HTML uses \"run a module script\" for both static and dynamic cases.","msgtype":"m.text"},"ts":1563588268000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1563588307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but html spec also disavows the top level module jobs","msgtype":"m.text"},"ts":1563588324000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yes, those are disappearing from the spec soon","msgtype":"m.text"},"ts":1563588334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We have consensus to remove them","msgtype":"m.text"},"ts":1563588339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what happens if HTML has to HostImportModuleDynamically a module that is currently evaluating","msgtype":"m.text"},"ts":1563588403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"RTC guarantees this won't happen.","msgtype":"m.text"},"ts":1563588426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rtc?","msgtype":"m.text"},"ts":1563588436000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"run to completion","msgtype":"m.text"},"ts":1563588447000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in theory a sync implementation with `import(x)` from module `x` would have this problem though right?","msgtype":"m.text"},"ts":1563588475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't understand the question","msgtype":"m.text"},"ts":1563588489000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"like if you're in module `x`","msgtype":"m.text"},"ts":1563588507000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and `import(x)` is called","msgtype":"m.text"},"ts":1563588511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and that synchronously performs module lookup","msgtype":"m.text"},"ts":1563588528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it ends up with a module record that is evaluating","msgtype":"m.text"},"ts":1563588534000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is it supposed to return","msgtype":"m.text"},"ts":1563588538000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That'd be the same as using `import 'x'` I think","msgtype":"m.text"},"ts":1563588543000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it fails","msgtype":"m.text"},"ts":1563588549000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if i ignore the assertions about returning an evaluated record it works","msgtype":"m.text"},"ts":1563588566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You mean if your host violates the spec?","msgtype":"m.text"},"ts":1563588582000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and `import 'x'` from `x` always works","msgtype":"m.text"},"ts":1563588583000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"per spec","msgtype":"m.text"},"ts":1563588587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't believe that's true...","msgtype":"m.text"},"ts":1563588590000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1563588593000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh with no bindings?","msgtype":"m.text"},"ts":1563588599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the test suite even uses that to inspect namespaces before they're complete","msgtype":"m.text"},"ts":1563588603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess `Cyclic Module Record's [[status]] is \"evaluated\"` is different from \"abstract module record's Evaluate() has returned a normal completion\"","msgtype":"m.text"},"ts":1563588688000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so perhaps this invariant is incorrect?","msgtype":"m.text"},"ts":1563588878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What leads to that conclusion?","msgtype":"m.text"},"ts":1563588900000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because its possible to have a module that is still evaluating","msgtype":"m.text"},"ts":1563588941000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should i return an abrupt completion or something?","msgtype":"m.text"},"ts":1563588950000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's [[status]] is \"evaluating\", but it meets the spec's criteria of \"evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion\"","msgtype":"m.text"},"ts":1563588998000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It is perhaps confusing that the informal \"evaluated\" phrase is used when talking about AMRs in this way, when CMRs have a specific \"evaluated\" [[status]] that is more narrowly defined. We could remove the \"evaluated, i.e.\"","msgtype":"m.text"},"ts":1563589052000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i'm pretty sure by the time Evaluate() returns everything should have [[Status]] of \"evaluated\"","msgtype":"m.text"},"ts":1563589068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like the case i described is definitely within the Evaluate() call","msgtype":"m.text"},"ts":1563589132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Didn't you give a case where that's not true?","msgtype":"m.text"},"ts":1563589134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in my case you're still within the call stack of module.Evaluate()","msgtype":"m.text"},"ts":1563589151000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it hasn't returned yet","msgtype":"m.text"},"ts":1563589159000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You're also outside the callstack of a different module.Evaluate()","msgtype":"m.text"},"ts":1563589170000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"on the same module.","msgtype":"m.text"},"ts":1563589172000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i am?","msgtype":"m.text"},"ts":1563589193000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can't call Evaluate() on an evaluating module, the assertion will fail","msgtype":"m.text"},"ts":1563589221000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1563589229000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"perhaps that is the issue","msgtype":"m.text"},"ts":1563589234000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Then yeah don't do sync import()","msgtype":"m.text"},"ts":1563589234000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because doing sync import() will cause assertion failures","msgtype":"m.text"},"ts":1563589253000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Which makes sense because it's async","msgtype":"m.text"},"ts":1563589257000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(I've humored this sync import() fantasy long enough!!)","msgtype":"m.text"},"ts":1563589274000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1563589278000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm just trying to hook up HostImportModuleDynamically to HostResolveImportedModule and not do anything complex :(","msgtype":"m.text"},"ts":1563589300000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If \"being async\" counts as complex, I think you are kind of working against the grain of dynamic import()'s design, and thus causing yourself unanticipated complexity.","msgtype":"m.text"},"ts":1563589362000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"with TLA, couldn't a module be Evaluate()ing over multiple ticks","msgtype":"m.text"},"ts":1563589460000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah I wonder how that gets integrated","msgtype":"m.text"},"ts":1563589479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hopefully updated to \"the promise is resolved\" or something","msgtype":"m.text"},"ts":1563589490000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ljharb: btw my pr doesn't explicitly set the length anymore","msgtype":"m.text"},"ts":1563593803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"setting length correctly is probably a battle for another pr","msgtype":"m.text"},"ts":1563593835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: do the alg steps mention it?","msgtype":"m.text"},"ts":1563593846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1563593853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like below throwerSteps, there should be a note, like in Promise resolve functions","msgtype":"m.text"},"ts":1563593920000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's only used when there is no explicit `X ( )`","msgtype":"m.text"},"ts":1563593934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like with promise resolve functions","msgtype":"m.text"},"ts":1563593938000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is there ever one in this kind of “algorithm steps for a function” thing?","msgtype":"m.text"},"ts":1563593965000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I’m reasonably sure that it’s only done for promise functions, and they all have a note.","msgtype":"m.text"},"ts":1563593985000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wdym","msgtype":"m.text"},"ts":1563593985000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"referencing the actual steps for an already created function?","msgtype":"m.text"},"ts":1563594013000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: in Promise Resolve Functions, it's not a note, it's just a very short paragraph.","msgtype":"m.text"},"ts":1563595384000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what if promises were async iterable","msgtype":"m.text"},"ts":1563595557000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(is this a new topic? because if it's the same topic, i'm not sure how it connects.)","msgtype":"m.text"},"ts":1563595635000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh sorry its a new topic","msgtype":"m.text"},"ts":1563595878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: In \"I’m reasonably sure that it’s only done for promise functions\", what do you mean by \"it\" ?","msgtype":"m.text"},"ts":1563595935000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"does anyone know what the result of the codeblock here will be https://github.com/pemrouz/proposal-emitter#background","msgtype":"m.text"},"ts":1563595971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: sorry i mean, it seems that other than ThrowTypeError, the only way functions are typically created is by referring to the same section as https://tc39.es/ecma262/#sec-promise-resolve-functions","msgtype":"m.text"},"ts":1563596937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or rather a section formatted that way","msgtype":"m.text"},"ts":1563596944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that’s the model that promise.allsettled and matchAll etc all followed","msgtype":"m.text"},"ts":1563596953000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so maybe the real issue is that ThrowTypeError should change to match all the other places that make functions","msgtype":"m.text"},"ts":1563596972000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm confused","msgtype":"m.text"},"ts":1563597386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"only way functions are created\" other than calls to FunctionAllocate, you mean.","msgtype":"m.text"},"ts":1563597394000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Backing up a bit: 2 ways to create a function object: via FunctionAllocate and via CreateBuiltinFunction.","msgtype":"m.text"},"ts":1563597482000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"really, via FunctionCreate","msgtype":"m.text"},"ts":1563597509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well FunctionCreate and its brethren","msgtype":"m.text"},"ts":1563597522000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"GeneratorFunctionCreate, AsyncFunctionCreate etc","msgtype":"m.text"},"ts":1563597547000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1563597551000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but they all go through FunctionAllocate.","msgtype":"m.text"},"ts":1563597565000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(And actually, there are 2 other ways to create a function object, both exotic: ProxyCreate and BoundFunctionCreate)","msgtype":"m.text"},"ts":1563597703000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"CreateBuiltinFunction is used to create both named builtins (mostly in CreateIntrinsics step 13) and anonymous builtins (scattered throughout)","msgtype":"m.text"},"ts":1563597887000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the latter are mostly generated in arbitrary numbers by factory-like operations","msgtype":"m.text"},"ts":1563598056000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(e.g., a given realm can have an arbitrarily large set of near-identical promise resolve functions)","msgtype":"m.text"},"ts":1563598160000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and yet we have one ThrowTypeError for three different error scenarios","msgtype":"m.text"},"ts":1563598263000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but %ThrowTypeError% is different in that there's exactly one per realm.","msgtype":"m.text"},"ts":1563598276000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\"","msgtype":"m.text"},"ts":1563598385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"good error messages :P","msgtype":"m.text"},"ts":1563598400000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"%TypedArray% might be another one-per-realm anonymous built-in function, though it's weird. That might be all.","msgtype":"m.text"},"ts":1563598968000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1563599102000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Guys, function expression (!= arrow function) is a primary expression, but parentheses are necessary to directly call it?","msgtype":"m.text"},"ts":1563625036000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"Are you talking about parentheses around the function expression or parentheses around the arguments?","msgtype":"m.text"},"ts":1563626022000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"around the function expression.","msgtype":"m.text"},"ts":1563626043000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"In my understanding, CallExpression -> MemberExpression () -> PrimaryExpression () -> Function Expression () is possible.","msgtype":"m.text"},"ts":1563626186000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"But, node.js rejects it so... I'm a bit curious.","msgtype":"m.text"},"ts":1563626210000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"depends on the context","msgtype":"m.text"},"ts":1563626282000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"try this: 1 + function () { return 2; }()","msgtype":"m.text"},"ts":1563626296000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"wow.","msgtype":"m.text"},"ts":1563626330000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"=O","msgtype":"m.text"},"ts":1563626332000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"Can you give some hints so that I can dig into it? =)","msgtype":"m.text"},"ts":1563626357000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"That's interesting.","msgtype":"m.text"},"ts":1563626364000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"to check: that expression returned 3, right?","msgtype":"m.text"},"ts":1563626397000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but if you leave off the \"1+\", you get a syntax error?","msgtype":"m.text"},"ts":1563626438000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yes. I got the error.","msgtype":"m.text"},"ts":1563626455000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"The parser is attempting to parse the input as a Statement, and in particular an ExpressionStatement. But there's a rule that says an ExpressionStatement can't start with the \"function\" keyword.","msgtype":"m.text"},"ts":1563626555000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://tc39.es/ecma262/#prod-ExpressionStatement","msgtype":"m.text"},"ts":1563626560000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Wow. Thanks for your help.","msgtype":"m.text"},"ts":1563626625000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"I really appreciate it. =)","msgtype":"m.text"},"ts":1563626630000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"no problem","msgtype":"m.text"},"ts":1563626655000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: does this look good to you? https://github.com/tc39/ecma262/pull/1635/files","msgtype":"m.text"},"ts":1563638664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Instead of `_realmRec_.[[Intrinsics]]`, you could just have `_intrinsics_`","msgtype":"m.text"},"ts":1563638990000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1563639064000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"And it omits setting %ThrowTypeError%'s [[Extensible]] to *false*, but then so does the current spec.","msgtype":"m.text"},"ts":1563639108000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: if its not explicitly created, the definition is enough","msgtype":"m.text"},"ts":1563639135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least with the current spec","msgtype":"m.text"},"ts":1563639150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd like everything to be more explicit but it seems like something for another pr","msgtype":"m.text"},"ts":1563639159000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, it's currently part of the magic surrounding CreateBuiltinFunction.","msgtype":"m.text"},"ts":1563639204000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But yes, this is what I was describing in my comment (modulo getting rid of AddRestrictedFunctionProperties, which also deserves to be a separate PR).","msgtype":"m.text"},"ts":1563639431000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Now I'm just checking that it all works out the same.","msgtype":"m.text"},"ts":1563639480000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"works out in engine262","msgtype":"m.text"},"ts":1563639591000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yup, seems equivalent to me.","msgtype":"m.text"},"ts":1563640029000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]