[
{"content":{"body":"devsnek: presumably because the _consumer_ of the iterator hitting an error condition is not the iterator's problem","msgtype":"m.text"},"ts":1583193745000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`.throw` only really makes sense for iterators which do something with the argument to `.next`, so, not the iterators you would use with for-of","msgtype":"m.text"},"ts":1583193796000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess there are arguments both ways","msgtype":"m.text"},"ts":1583193835000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is the argument for calling `.throw`?","msgtype":"m.text"},"ts":1583193854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"something about wrapping streams with async iterators","msgtype":"m.text"},"ts":1583193921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/nodejs/node/pull/32051","msgtype":"m.text"},"ts":1583193967000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in a push stream model i guess you'd expect the stream itself to own errors that happen while consuming","msgtype":"m.text"},"ts":1583194065000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for a push stream I would expect the stream to be responsible for handling errors which happen while producing values to be pushed, but not for errors which happen while consuming","msgtype":"m.text"},"ts":1583194381000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"generally speaking the consumer of some data having an error is not the responsibility of the producer of the data","msgtype":"m.text"},"ts":1583194396000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean in the nodejs model it works how i described","msgtype":"m.text"},"ts":1583194403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because it uses event emitters","msgtype":"m.text"},"ts":1583194414000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`emit('data')` would throw if handlers of the data event throw","msgtype":"m.text"},"ts":1583194432000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or pass an error event or whatever it does","msgtype":"m.text"},"ts":1583194452000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's pretty unintuitive to me, but ok","msgtype":"m.text"},"ts":1583194456000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in the web platform `dispatchEvent` does not throw even if listeners added by `addEventListener` do","msgtype":"m.text"},"ts":1583194478000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah i mean in general i agree with the design in the spec","msgtype":"m.text"},"ts":1583194480000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah it just throws","msgtype":"m.text"},"ts":1583194538000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what just throws?","msgtype":"m.text"},"ts":1583194564000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`emit('data')`","msgtype":"m.text"},"ts":1583194588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i couldn't remember if it threw or made the emitter emit an 'error' event","msgtype":"m.text"},"ts":1583194602000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, yeah","msgtype":"m.text"},"ts":1583194634000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]