[
{"content":{"body":"huh, interesting that neither V8 nor SM currently pass this: https://test262.report/browse/built-ins/ArrayBuffer/prototype/byteLength/detached-buffer.js","msgtype":"m.text"},"ts":1599076244000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: do they support $DETACHBUFFER?","msgtype":"m.text"},"ts":1599076281000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems like they do","msgtype":"m.text"},"ts":1599076496000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"they pass, e.g., https://test262.report/browse/built-ins/DataView/prototype/getUint8/detached-buffer.js","msgtype":"m.text"},"ts":1599076591000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-arraybuffer.cc;l=114?q=ArrayBufferByteLength","msgtype":"m.text"},"ts":1599076681000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a TODO to throw a typeerror :D","msgtype":"m.text"},"ts":1599076687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1599076724000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"very simple change","msgtype":"m.text"},"ts":1599076730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tbh those should all be moved to torque","msgtype":"m.text"},"ts":1599076770000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are years-old nonconformances in the TA/AB code in V8","msgtype":"m.text"},"ts":1599077186000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it is unclear what the value is to cover those corners now","msgtype":"m.text"},"ts":1599077209000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i might rewrite a bunch of that in torque","msgtype":"m.text"},"ts":1599077219000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and cover them while i'm at it","msgtype":"m.text"},"ts":1599077226000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: I mean I can't decide priorities for anybody but I thought spec conformance was its own reward","msgtype":"m.text"},"ts":1599077295000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"to be clear, the open question isn't difficulty of changing the code, but determining web compat","msgtype":"m.text"},"ts":1599077298000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"given these are 4-year old bugs that may have been depended upon","msgtype":"m.text"},"ts":1599077311000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://bugs.chromium.org/p/v8/issues/detail?id=4895&q=&can=3","msgtype":"m.text"},"ts":1599077312000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the \"unclear what the value is\" means unclear what the value is in doing the research on web compat for these corners","msgtype":"m.text"},"ts":1599077334000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ohh fascinating","msgtype":"m.text"},"ts":1599077342000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah it is a bit interesting if we've been conforming to something other than the spec for so long","msgtype":"m.text"},"ts":1599077374000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's been inheritance chain there from littledan to sathya to me :P","msgtype":"m.text"},"ts":1599077390000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"err, there's been an*","msgtype":"m.text"},"ts":1599077405000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what does it return in browsers","msgtype":"m.text"},"ts":1599077429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"0?","msgtype":"m.text"},"ts":1599077430000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"think so, let me check","msgtype":"m.text"},"ts":1599077456000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like right now I got confused because I noticed that checking buffer.byteLength on the underlying ArrayBuffer of WebAssembly.Memory *doesn't* throw in other browsers after calling memory.grow(1)","msgtype":"m.text"},"ts":1599077457000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so like, even in wasm space people could well be checking whether byteLength is 0, just like our tests were","msgtype":"m.text"},"ts":1599077522000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I wonder if I should jettison that part of my patch","msgtype":"m.text"},"ts":1599077539000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sounds like the thing to do here is change the spec","msgtype":"m.text"},"ts":1599077554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1599077558000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i think it's 0","msgtype":"m.text"},"ts":1599077559000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah the wonders of js","msgtype":"m.text"},"ts":1599077568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah, that's what i'd lean to, would like to hear moz and apple's opinions","msgtype":"m.text"},"ts":1599077572000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i wonder what led to the error being left out on byteLength getter","msgtype":"m.text"},"ts":1599077587000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"across browsers","msgtype":"m.text"},"ts":1599077590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i was just pinged today by anne and domenic on https://github.com/tc39/ecma262/issues/678","msgtype":"m.text"},"ts":1599077616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"> Considering that Edge has been shipping throwing on detached typed arrays, I plan on changing Firefox to also throw.","msgtype":"m.text"},"ts":1599077648000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the good 'ol days","msgtype":"m.text"},"ts":1599077656000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://esdiscuss.org/topic/arraybuffer-neutering offers some history","msgtype":"m.text"},"ts":1599077665000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the throwing behavior was made strict when ecma262 took over speccing ABs from khronos, but stuff had shipped","msgtype":"m.text"},"ts":1599077688000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and as with things go, this probably was pretty low priority during the ES6 days","msgtype":"m.text"},"ts":1599077714000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"TIL they were part of khronos","msgtype":"m.text"},"ts":1599077714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when there was a general scramble to catch up on feature implementation","msgtype":"m.text"},"ts":1599077721000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and here we are","msgtype":"m.text"},"ts":1599077722000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1599077741000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"now we know where the \"equiv c type\" table came from","msgtype":"m.text"},"ts":1599077756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I have to run to a doctor's appt but yeah this is sounding like a potential topic for the next meeting","msgtype":"m.text"},"ts":1599077764000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the lesson for me here is mainly that the ES6 model of throwing a large featureset over the wall to implementers had many bad consequences in long-tail interop","msgtype":"m.text"},"ts":1599077860000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"+1000","msgtype":"m.text"},"ts":1599077869000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(though it traded it arguably for more cohesion)","msgtype":"m.text"},"ts":1599077871000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"gonna take some time off, toodles","msgtype":"m.text"},"ts":1599078024000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"is there really no simple way of doing [[OwnPropertyKeys]] and keep the interleaved Symbol/string ordering??","msgtype":"m.text"},"ts":1599079532000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm stuck doing a really weird for...in loop","msgtype":"m.text"},"ts":1599079552000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: wdym?","msgtype":"m.text"},"ts":1599079608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I'm implementing a userland https://tc39.es/ecma262/#sec-copydataproperties","msgtype":"m.text"},"ts":1599079631000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if there is interoperability between engines on this TypedArray behavior, I'd prefer to change the spec than to risk compatibility","msgtype":"m.text"},"ts":1599079646000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i mean what is \"interleaved Symbol/string ordering\"","msgtype":"m.text"},"ts":1599079652000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: ...{[Symbol.toStringTag]: ()=>'_', inTheMiddle:true, [Symbol.toPrimitive]: () => 0} , needs to define `inTheMiddle` between the symbols","msgtype":"m.text"},"ts":1599079790000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"littledan: yeah the reality seems very predictable even without hard data here","msgtype":"m.text"},"ts":1599079799000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er *numerical data, I mean","msgtype":"m.text"},"ts":1599079822000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"bradleymeck: that's not how ordinary objects work though","msgtype":"m.text"},"ts":1599079825000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: I feel like the data we'd need to make this decision would just be, checking the behavior in all engines","msgtype":"m.text"},"ts":1599079850000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"which I guess there are test262 tests for, so maybe we can even just find it on that dashboard...","msgtype":"m.text"},"ts":1599079861000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"they always enumerate their own keys with symbols last","msgtype":"m.text"},"ts":1599079861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: https://test262.report/browse/built-ins/ArrayBuffer/prototype/byteLength/detached-buffer.js","msgtype":"m.text"},"ts":1599079879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, well ... now thats confusing","msgtype":"m.text"},"ts":1599079893000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: wow","msgtype":"m.text"},"ts":1599079919000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"devsnek: thats only going through OrdinaryOwnPropertyKeys it seems","msgtype":"m.text"},"ts":1599080026000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which spread... doesn't?","msgtype":"m.text"},"ts":1599080032000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"stares","msgtype":"m.emote"},"ts":1599080067000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: yea it looks like object spread doesn't follow that","msgtype":"m.text"},"ts":1599080152000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"wait no... its just indirect","msgtype":"m.text"},"ts":1599080184000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"but it isn't true still for non-ordinary objects so... back to for...in","msgtype":"m.text"},"ts":1599080262000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i mean `Reflect.ownKeys` will return whatever the object gives it","msgtype":"m.text"},"ts":1599080312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aha, forgot about that","msgtype":"m.text"},"ts":1599080465000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"tyty","msgtype":"m.text"},"ts":1599080508000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"for-in doesn't hit symbols anyway","msgtype":"m.text"},"ts":1599082147000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]