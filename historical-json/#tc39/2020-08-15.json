[
{"content":{"body":"did we ever determine what the problem with Date.prototype.setMonth is","msgtype":"m.text"},"ts":1597454710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek I don't think it's specifically a setMonth problem","msgtype":"m.text"},"ts":1597455485000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"setMinutes etc also does arithmetic without a NaN guard","msgtype":"m.text"},"ts":1597455512000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"setYear guards because it can be used to make an invalid date into a valid one, weirdly enough","msgtype":"m.text"},"ts":1597455535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"setMinutes works though","msgtype":"m.text"},"ts":1597455568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"define \"works\"","msgtype":"m.text"},"ts":1597455591000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"doesn't have out of range behaviour","msgtype":"m.text"},"ts":1597455614000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes it does","msgtype":"m.text"},"ts":1597455632000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where","msgtype":"m.text"},"ts":1597455653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`let s be SecFromTime(t);`","msgtype":"m.text"},"ts":1597455657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"secFromTime performs floor","msgtype":"m.text"},"ts":1597455668000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"floor is not defined on NaNs","msgtype":"m.text"},"ts":1597455672000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok but like that's just fp math","msgtype":"m.text"},"ts":1597455751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure what you mean by that","msgtype":"m.text"},"ts":1597455819000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the spec explicitly defines \"floor\", and the definition it gives does not make sense if you give a non-finite value","msgtype":"m.text"},"ts":1597455834000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aight","msgtype":"m.text"},"ts":1597455866000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway I'm pretty sure all the setX date proto methods except setYear (and its variants) should explicitly guard for NaN right after doing all the (observable) type coercions on the arguments","msgtype":"m.text"},"ts":1597456052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that matches what engines seem to do, anyway","msgtype":"m.text"},"ts":1597456058000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if (isnan) { return new Date(NaN) } ?","msgtype":"m.text"},"ts":1597456097000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or return this i guess","msgtype":"m.text"},"ts":1597456120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not a new date, the current one","msgtype":"m.text"},"ts":1597456120000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1597456122000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actuallhy NaN","msgtype":"m.text"},"ts":1597456224000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they return NaN","msgtype":"m.text"},"ts":1597456227000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and do not mutate this","msgtype":"m.text"},"ts":1597456234000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can see the explicit guards in v8: https://github.com/v8/v8/blob/4b9b23521e6fd42373ebbcb20ebe03bf445494f9/src/builtins/builtins-date.cc#L529","msgtype":"m.text"},"ts":1597456366000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"would you call this normative or editorial","msgtype":"m.text"},"ts":1597456494000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ehhhh editorial probably? in that it is unimplementable as written, by a strict reading, and the intent pretty clearly can't be anything other than this","msgtype":"m.text"},"ts":1597456544000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i.e. \"spec bug\"","msgtype":"m.text"},"ts":1597456549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2136","msgtype":"m.text"},"ts":1597456789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1597456850000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you have a couple stray ones","msgtype":"m.text"},"ts":1597456854000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the year methods already have the guards","msgtype":"m.text"},"ts":1597456858000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and don't need new ones","msgtype":"m.text"},"ts":1597456862000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(... I think)","msgtype":"m.text"},"ts":1597456875000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i believe you are correct","msgtype":"m.text"},"ts":1597456977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"these are all checking if the receiver is NaN, what about the provided argument?","msgtype":"m.text"},"ts":1597459682000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"those already have guards, at least in the cases I've looked at","msgtype":"m.text"},"ts":1597459715000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1597459729000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll try to double check","msgtype":"m.text"},"ts":1597459732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"would it be simpler to redefine MinFromTime and friends to handle NaN?","msgtype":"m.text"},"ts":1597459770000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ehhh... probably not, I think","msgtype":"m.text"},"ts":1597459814000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1597460700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"#JustSayDraftGang strikes again https://gc.gy/65168485.png","msgtype":"m.text"},"ts":1597463508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should this test be in annex b? https://gc.gy/65212135.png","msgtype":"m.text"},"ts":1597507139000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cuz afaict `\\1` is a valid DecimalEscape and that's always allowed","msgtype":"m.text"},"ts":1597507168000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well allowed aside from the early error about nCapturingParens","msgtype":"m.text"},"ts":1597507253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, I am pretty sure this is a syntax error because of that error","msgtype":"m.text"},"ts":1597509145000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the \"It is a Syntax Error if the CapturingGroupNumber of DecimalEscape is larger than NcapturingParens\" noe","msgtype":"m.text"},"ts":1597509167000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm maybe the description is just confusing","msgtype":"m.text"},"ts":1597509428000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we should deprecate the parser tests repo or merge it into test262 or require it to be updated along with test262 or something","msgtype":"m.text"},"ts":1597525689000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, I haven't had time to maintain it :(","msgtype":"m.text"},"ts":1597528152000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]