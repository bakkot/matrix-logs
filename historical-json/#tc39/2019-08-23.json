[
{"content":{"body":"is it valid to have a production like `MultiLineComment HoistableDeclaration`","msgtype":"m.text"},"ts":1566528855000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"will this magically take the needed precedence https://gc.gy/34235651.png","msgtype":"m.text"},"ts":1566530657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: does any production have DocumentedClass on the rhs?","msgtype":"m.text"},"ts":1566536975000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: no","msgtype":"m.text"},"ts":1566536984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my goal here is just to introduce new runtime semantics for `MultiLineComment ClassDeclaration`","msgtype":"m.text"},"ts":1566537001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if such a production ever occurs","msgtype":"m.text"},"ts":1566537009000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the only reason i created \"DocumentedClass\" was because just having `MultiLineComment ClassDeclaration` was rendered with a `:` in the middle","msgtype":"m.text"},"ts":1566537042000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1566537087000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Comments don't survive to the syntactic level","msgtype":"m.text"},"ts":1566537153000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that's what i was worried about","msgtype":"m.text"},"ts":1566537162000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean a human reading this would know what's supposed to happen... but it would be good for it to conform to all our grammar invariants and whatnot","msgtype":"m.text"},"ts":1566537231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think the spec has any way to bring those two things together.","msgtype":"m.text"},"ts":1566537333000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"one could promote multilinecomment from scanning to parsing","msgtype":"m.text"},"ts":1566537416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is what babel does","msgtype":"m.text"},"ts":1566537419000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but would that break all the productions","msgtype":"m.text"},"ts":1566537424000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1566537436000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this is still our own magical language to describe syntax right?","msgtype":"m.text"},"ts":1566537461000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1566537513000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"like we can just specify new ways that productions match source text","msgtype":"m.text"},"ts":1566537530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what's the goal?","msgtype":"m.text"},"ts":1566537570000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we can add productions, but we don't have new ways that they can match source text","msgtype":"m.text"},"ts":1566537589000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: docstrings","msgtype":"m.text"},"ts":1566537599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why would they need to be parsed as anything but a comment","msgtype":"m.text"},"ts":1566537616000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: i mean why can't we just say \"productions can match nodes removed in scanning\"","msgtype":"m.text"},"ts":1566537640000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: comments are removed before we build the syntax","msgtype":"m.text"},"ts":1566537666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're just whitespace","msgtype":"m.text"},"ts":1566537671000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so atm they can't be used in syntactic productions","msgtype":"m.text"},"ts":1566537694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why would we want them to tho","msgtype":"m.text"},"ts":1566537708000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: we could maybe say that, but we'd have to be way more precise about what it means.","msgtype":"m.text"},"ts":1566537738000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i mean we would definitely want to use more formal language","msgtype":"m.text"},"ts":1566537767000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(there is some vagueness at the syntactic/lexical boundary, but not in a way that would help this effort, I don't think)","msgtype":"m.text"},"ts":1566537828000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: do you think i'm going about this the wrong way","msgtype":"m.text"},"ts":1566537867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol i'm still missing why you're going about this","msgtype":"m.text"},"ts":1566537889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: cuz i want docstrings","msgtype":"m.text"},"ts":1566537903000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you already have them","msgtype":"m.text"},"ts":1566537915000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why does the language spec need to know about them","msgtype":"m.text"},"ts":1566537925000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for runtime shenanigans","msgtype":"m.text"},"ts":1566537939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"such as?","msgtype":"m.text"},"ts":1566537945000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"have you seen python's help function","msgtype":"m.text"},"ts":1566537950000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have not","msgtype":"m.text"},"ts":1566537966000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but why would \"not the engine\" need access to source text level stuff?","msgtype":"m.text"},"ts":1566537985000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"python has a meta __doc__ string made from comments on functions","msgtype":"m.text"},"ts":1566538004000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is used in repls and stuff to provide better completions and whatnot","msgtype":"m.text"},"ts":1566538020000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a repl is the engine tho, that has superpowers, no?","msgtype":"m.text"},"ts":1566538047000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean not just the built-in repl","msgtype":"m.text"},"ts":1566538080000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but doing it at the spec level also means all the various tooling will bother to understand it","msgtype":"m.text"},"ts":1566538122000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"better docs in browser consoles, maybe in error output, etc","msgtype":"m.text"},"ts":1566538136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devnek: Not sure re \"going about this the wrong way\". Tough to see any way to fit it into the current spec 'architecture'.","msgtype":"m.text"},"ts":1566538139000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"that kind of presumes docstrings are a good thing tho, when they don't enforce anything","msgtype":"m.text"},"ts":1566538143000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1566538160000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: they're generally prose","msgtype":"m.text"},"ts":1566538167000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not talking about jsdoc","msgtype":"m.text"},"ts":1566538172000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"prose isn't parseable","msgtype":"m.text"},"ts":1566538176000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its just a string","msgtype":"m.text"},"ts":1566538182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the source of a multiline comment","msgtype":"m.text"},"ts":1566538187000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, so like `value[Symbol.details] = 'some string'`?","msgtype":"m.text"},"ts":1566538195000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like if we want something at runtime, let's make it a runtime value","msgtype":"m.text"},"ts":1566538203000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: it's a runtime value","msgtype":"m.text"},"ts":1566538261000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's what you're suggesting comments be made into","msgtype":"m.text"},"ts":1566538271000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so far i just define Symbol.documentation","msgtype":"m.text"},"ts":1566538276000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the runtime can read them, they're a runtime value","msgtype":"m.text"},"ts":1566538280000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1566538284000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/34235651.png","msgtype":"m.text"},"ts":1566538286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can do whatever you want with that, override it","msgtype":"m.text"},"ts":1566538307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"delete it","msgtype":"m.text"},"ts":1566538311000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well sure but why turn comments into that","msgtype":"m.text"},"ts":1566538343000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that would also break like, every minifier","msgtype":"m.text"},"ts":1566538352000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if someone wants it runtime-available they'd write it as a string directly","msgtype":"m.text"},"ts":1566538358000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and in Python it _is_ a String, no?","msgtype":"m.text"},"ts":1566538384000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ya","msgtype":"m.text"},"ts":1566538396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just `fn.__doc__`","msgtype":"m.text"},"ts":1566538403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a normal string","msgtype":"m.text"},"ts":1566538405000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"er yeah accessible as such, but I mean also directly written as such","msgtype":"m.text"},"ts":1566538438000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh yeah","msgtype":"m.text"},"ts":1566538469000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a multiline string","msgtype":"m.text"},"ts":1566538472000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but they don't have multiline comments in python","msgtype":"m.text"},"ts":1566538488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so multiline strings are double-duty","msgtype":"m.text"},"ts":1566538494000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think this is mostly about being able to position the property assignment in the common comment position, not necessarily needing them to be a comment","msgtype":"m.text"},"ts":1566569584000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the problem*","msgtype":"m.text"},"ts":1566569597000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"what is the dangling else problem?","msgtype":"m.text"},"ts":1566594728000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a classic","msgtype":"m.text"},"ts":1566594916000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh its not specific to ecma262","msgtype":"m.text"},"ts":1566594955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i see now","msgtype":"m.text"},"ts":1566594958000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if (C1) {...} if (C2) {...} else {...}","msgtype":"m.text"},"ts":1566594965000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so our actual grammar is ambiguous about this?","msgtype":"m.text"},"ts":1566594983000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1566594987000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i mean i can see that its always ambiguous to humans","msgtype":"m.text"},"ts":1566594991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but different implementations could have different associativity?","msgtype":"m.text"},"ts":1566595008000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Disambiguated by prose: \"Each else for which the choice of associated if is ambiguous shall be associated with the nearest possible if that would otherwise have no corresponding else.\"","msgtype":"m.text"},"ts":1566595013000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i mean wouldn't that just be the default","msgtype":"m.text"},"ts":1566595040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"going left to right, the current IfStatement would associate with the `else` token before the outer one does","msgtype":"m.text"},"ts":1566595060000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"CFGs don't have an idea of 'default'.","msgtype":"m.text"},"ts":1566595105000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nor does the LR parser construction algorithm.","msgtype":"m.text"},"ts":1566595129000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"by default i mean the normal interpretation of a source text","msgtype":"m.text"},"ts":1566595146000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"huh https://en.wikipedia.org/wiki/Dangling_else","msgtype":"m.text"},"ts":1566595209000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i would've thought something that associates `if a (if b c) else d` would just be doing it wrong","msgtype":"m.text"},"ts":1566595209000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^ ditto, I've never thought about it","msgtype":"m.text"},"ts":1566595222000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"The prose disambiguation does correspond to what you think of as \"normal interpretation\" I guess,","msgtype":"m.text"},"ts":1566595249000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"outside of a rec-dec viewpoint","msgtype":"m.text"},"ts":1566595249000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it's still ambiguous from a CFG point of view.","msgtype":"m.text"},"ts":1566595266000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1566595271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(er, rec-desc...? so much for trying to say it cool and short lol)","msgtype":"m.text"},"ts":1566595285000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"from a LR point of view, you get a shift-reduce conflict, i think.","msgtype":"m.text"},"ts":1566595291000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"do you know what waldemar's fix for it is","msgtype":"m.text"},"ts":1566595307000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't know for sure, but the wikipedia page that rkirsling linked to has some possibilities.","msgtype":"m.text"},"ts":1566595363000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Is waldemar's visible anywhere?","msgtype":"m.text"},"ts":1566595385000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(his code)","msgtype":"m.text"},"ts":1566595399000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"not that i'm aware","msgtype":"m.text"},"ts":1566595405000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if there exists a programmatic way to validate grammar it'd be super to add it to CI","msgtype":"m.text"},"ts":1566595418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers","msgtype":"m.text"},"ts":1566595450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just split the entire grammar in half along the boundary of the if statement production lol","msgtype":"m.text"},"ts":1566595510000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The ES grammar could probably do it with a grammar parameter.","msgtype":"m.text"},"ts":1566595576000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(On second glance, my original example was wrong. Read wikipedia instead.)","msgtype":"m.text"},"ts":1566595726000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"grammar hurts my brain","msgtype":"m.text"},"ts":1566595748000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"The trick ... is not minding that it hurts.\" (https://www.youtube.com/watch?v=TvQViPBAvPk)","msgtype":"m.text"},"ts":1566595950000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: what's needed to add something to ecma262 CI?","msgtype":"m.text"},"ts":1566596028000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: make a PR that adds a travis job (or i suppose, a github action) that will fail when something is wrong and won't fail when things aren't wrong :-)","msgtype":"m.text"},"ts":1566596171000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"adds it where?","msgtype":"m.text"},"ts":1566596197000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: we can add jobs that lint for all the things you keep having to editorial-fix too, if we can find a reliable linter","msgtype":"m.text"},"ts":1566596199000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for travis, to `.travis.yml`; for a github action, i think anywhere in the `.github` folder","msgtype":"m.text"},"ts":1566596218000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: tbh if you even just open a PR that adds an `npm run-script` to package.json for a verification/validation command, i can add that to travis easily","msgtype":"m.text"},"ts":1566596254000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so .travis.yml invokes scripts/auto-deploy.sh which invokes update-branch, which invokes \"npm run build-travis\", which invokes ecmarkup somehow?","msgtype":"m.text"},"ts":1566596579000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: oh that's just the one job","msgtype":"m.text"},"ts":1566596717000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: but yes that's how it works","msgtype":"m.text"},"ts":1566596723000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: you can add multiple jobs in a matrix, and each one can do its own thing - i typically use https://github.com/inspect-js/is-callable/blob/master/.travis.yml","msgtype":"m.text"},"ts":1566596750000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and failing is a non-zero exit code or what?","msgtype":"m.text"},"ts":1566596856000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: are any of your remaining comments on https://github.com/tc39/ecma262/pull/1525 blocking?","msgtype":"m.text"},"ts":1566596886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: yep","msgtype":"m.text"},"ts":1566597145000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: i suppose not, but they're small changes ¯\\_(ツ)_/¯ i'll ping kevin in the next editor's meeting about it","msgtype":"m.text"},"ts":1566597222000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1566597230000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"github actions appears to be in beta. Is tc39 participating?","msgtype":"m.text"},"ts":1566597589000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1566597605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/actions","msgtype":"m.text"},"ts":1566597625000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, 'actions' isn't an actual directory in repo","msgtype":"m.text"},"ts":1566597708000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or it will be if someone adds an action?","msgtype":"m.text"},"ts":1566597752000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"it will be `.github/workflows/<whatever>.yml`","msgtype":"m.text"},"ts":1566597773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/new/master?filename=.github%2Fworkflows%2Fmain.yml&workflow_template=blank","msgtype":"m.text"},"ts":1566597792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, i asked toi add the tc39 org to the beta","msgtype":"m.text"},"ts":1566598055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"totally fine to stick with travis for now tho","msgtype":"m.text"},"ts":1566598072000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"without using beta software in production I don't think we're really acting in the spirit of the js ecosystem","msgtype":"m.text"},"ts":1566600116000,"senderName":"devsnek","senderId":"devsnek@irc"}
]