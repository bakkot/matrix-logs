[
{"content":{"body":"shu have you been following https://github.com/WebAssembly/threads/issues/144 ?","msgtype":"m.text"},"ts":1580713948000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(I ask because one of the proposals is to change how Atomics.wait works slightly)","msgtype":"m.text"},"ts":1580714018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Why does MakeBasicObject not take a list of internal methods as well?","msgtype":"m.text"},"ts":1580741027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which ones?","msgtype":"m.text"},"ts":1580741253000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: depends on the caller","msgtype":"m.text"},"ts":1580741292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so the non-ordinary ones, you mean?","msgtype":"m.text"},"ts":1580741324000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: yeah, defaulting the others makes sense","msgtype":"m.text"},"ts":1580741340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so when you say a list of internal methods, you mean not just the names (as it does with the internal slots), but the actual definition to be used for that internal method?","msgtype":"m.text"},"ts":1580741405000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(*actual definitions to be used for those internal methods)","msgtype":"m.text"},"ts":1580741615000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(^annevk)","msgtype":"m.text"},"ts":1580743249000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: hmm yeah, I guess it already has the slots, just not the implementations","msgtype":"m.text"},"ts":1580743288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jmdyck: yeah, I guess passing in the implementations would make sense","msgtype":"m.text"},"ts":1580743342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The current setup feels a little weird as it's still about a set of conventions to follow rather than an approach from first principles","msgtype":"m.text"},"ts":1580743404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and pr 1460 doesn't resolve that weirdness?","msgtype":"m.text"},"ts":1580743464000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, sorry, 1453","msgtype":"m.text"},"ts":1580743502000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, dang it.","msgtype":"m.text"},"ts":1580743521000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: it still seems like it allows weird things like calling Ordinary to make something and then mutate internal methods","msgtype":"m.text"},"ts":1580743559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was right the first time, 1460. Ah, it's been merged.","msgtype":"m.text"},"ts":1580743560000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: you're not supposed to, but...","msgtype":"m.text"},"ts":1580743564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(it's also not entirely clear to me that IDL got notified about that change)","msgtype":"m.text"},"ts":1580743592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hold it, weren't you *advocating* for create-an-ordinary-and-then-mutate-its-internal-methods in 1453? (\"... some have overridden internal methods. It would be nice if we could tack  those on at the end and not have to know about them upfront.\")","msgtype":"m.text"},"ts":1580743788000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: 1) I think there might be a later comment where I agreed to alternatives 2) if the current setup didn't try to distinguish between Ordinary and Base as it does with notes I wouldn't have complained","msgtype":"m.text"},"ts":1580744061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, I do kind of like the idea of passing all the internal stuff (both definitions for methods and initial value for slots) into the object-creation operation","msgtype":"m.text"},"ts":1580744086000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"One problem would be taking care of the two cases identified by bakkot here: https://github.com/tc39/ecma262/pull/1460#discussion_r373764030","msgtype":"m.text"},"ts":1580745492000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Another would be bikeshedding the syntax to create a List of internal-method-names-and-their-definitions.","msgtype":"m.text"},"ts":1580745610000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"And I'm not sure the result would be clearer to the reader. So it might be a fair bit of work that ultimately isn't accepted.","msgtype":"m.text"},"ts":1580746019000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"So that sort of answers your initial question, annevk.","msgtype":"m.text"},"ts":1580746035000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb, do you have an opinion?","msgtype":"m.text"},"ts":1580746051000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Note that a valid alternative to what I think is problematic might be to not call it OrdinaryCreate and not limit its use through prose. And everyone can just pick whatever the most convenient thing is to create their object. (Another alternative might be to freeze the internal methods at some point such that modifying them triggers an assert.)","msgtype":"m.text"},"ts":1580747191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"re the first thing: you mean erase the distinction between MakeBasicObject and OrdinaryObjectCreate?","msgtype":"m.text"},"ts":1580747367000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1580747411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(i.e., roughly, drop OOC and replace calls with MBO)","msgtype":"m.text"},"ts":1580747424000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"well, that got some push-back in 1453","msgtype":"m.text"},"ts":1580747477000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"or keep it if it does something useful in addition, but don't try to prevent usage for non-ordinary objects if it makes sense for those (they also need the additional thing, plus yet more things)","msgtype":"m.text"},"ts":1580747478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, i think the point is that OOC *doesn't* do (much) useful in addition to MBO, pretty much its whole point is to signal that an ordinary object is being created (i.e., an object that will remain ordinary after its creation).","msgtype":"m.text"},"ts":1580747626000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I see, I should have checked","msgtype":"m.text"},"ts":1580747757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess in that case only the freezing suggestion makes some amount of sense","msgtype":"m.text"},"ts":1580747769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks for walking me through things","msgtype":"m.text"},"ts":1580748051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the freezing suggestion (or something similar) came up before, but I'm having trouble finding it","msgtype":"m.text"},"ts":1580748138000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re \"such that modifying them triggers an assert\": Well, we could have something like: Assert: We have now finished creating this object. There will be no further changes to its internal methods.","msgtype":"m.text"},"ts":1580748731000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But to me, that's not a proper Assert, because you can't check it at the point it occurs. So it's more like a Note.","msgtype":"m.text"},"ts":1580748793000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: agreed","msgtype":"m.text"},"ts":1580748807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jmdyck: you'd need to make it explicit via some mechanism that setting an internal method can no longer be set, perhaps that's not worth it","msgtype":"m.text"},"ts":1580748873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"My guess would be: not worth it.","msgtype":"m.text"},"ts":1580748907000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"We could place such a Note easily for exotics, but not so easily for ordinaries.","msgtype":"m.text"},"ts":1580748933000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, requiring them all upfront is really the way to do that","msgtype":"m.text"},"ts":1580748935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You want to put such a Note at the end of OrdinaryObjectCreate, but you can't because of functions.","msgtype":"m.text"},"ts":1580748991000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but you could put it there and then modify it \"(except for possibly [[Call]] and [[Construct]])\"","msgtype":"m.text"},"ts":1580749084000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'm not sure such in-alg notes are a big win over the out-of-alg notes.","msgtype":"m.text"},"ts":1580749222000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: kinda sorta based on what iâ€™ve heard through emscripten folks in the office, i thought the conclusion was to just do it for the regular atomic ops","msgtype":"m.text"},"ts":1580749385000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: jmdyck: i wouldnâ€™t mind a List of slots and defs up front approach","msgtype":"m.text"},"ts":1580749595000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"dunno if iâ€™ll have cycles to work on it soonish, however","msgtype":"m.text"},"ts":1580749618000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but for both that and the freezing approach weâ€™d need the new concept of an initialize-once internal slot","msgtype":"m.text"},"ts":1580749746000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"how do yâ€™all feel about keeping the mutation wording but introducing a initialize-once internal slot/method?","msgtype":"m.text"},"ts":1580749816000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Most *slots* aren't initialize-once, I think.","msgtype":"m.text"},"ts":1580750011000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indeed they are not","msgtype":"m.text"},"ts":1580750025000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"perhaps the new spec thing can be restricted to methods","msgtype":"m.text"},"ts":1580750038000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but it may also be useful to tighten down a subset of slots that are better off initialize once? unsure if we have anything like that","msgtype":"m.text"},"ts":1580750067000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but I like the idea of passing in the *initial* value of slots, because then you're not separating the 'allocation' from the initialization.","msgtype":"m.text"},"ts":1580750113000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yes, though weâ€™d still need to call out that we are changing the semantics of internal methods to such that itâ€™s not permitted to set them after the fact","msgtype":"m.text"},"ts":1580750177000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"to be clear i am also +1 passing initial value","msgtype":"m.text"},"ts":1580750212000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"itâ€™d also make the meta-identity thing explicit and clearer","msgtype":"m.text"},"ts":1580750264000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: there are changes to atomics.wait and atomics.notify","msgtype":"m.text"},"ts":1580750274000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what are they?","msgtype":"m.text"},"ts":1580750319000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"uhhhhh","msgtype":"m.text"},"ts":1580750339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait should not fail if given 0 and on unshared iirc","msgtype":"m.text"},"ts":1580750354000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how does that affect js?","msgtype":"m.text"},"ts":1580750368000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"currently it always throws on unshared right?","msgtype":"m.text"},"ts":1580750384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: I've thought about the up-front thing a bit before, I might have time to throw together at least a draft pr.","msgtype":"m.text"},"ts":1580750442000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this is unshared wasm memory right","msgtype":"m.text"},"ts":1580750447000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1580750464000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: cool","msgtype":"m.text"},"ts":1580750469000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"iâ€™d need to read the wasm spec","msgtype":"m.text"},"ts":1580750519000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"does it normativelg reference Atomics","msgtype":"m.text"},"ts":1580750533000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it used to but I don't think it does anymore","msgtype":"m.text"},"ts":1580750596000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the problem is that some wasm stuff calls to atomics through js","msgtype":"m.text"},"ts":1580750611000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(initialize-once for internal methods makes sense to me)","msgtype":"m.text"},"ts":1580750619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like old old emscriptem","msgtype":"m.text"},"ts":1580750622000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"emscripten","msgtype":"m.text"},"ts":1580750627000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(not sure how this would work with the current override technique, guess that would have to be redone)","msgtype":"m.text"},"ts":1580750651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tbh I haven't been tracking threading that much","msgtype":"m.text"},"ts":1580750714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"been focused on wasi","msgtype":"m.text"},"ts":1580750718000,"senderName":"devsnek","senderId":"devsnek@irc"}
]