[
{"content":{"body":"rickbutton: is there any info on RefCollection outside of that presentation","msgtype":"m.text"},"ts":1585593727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because i have many many objections i'd like to write down","msgtype":"m.text"},"ts":1585593736000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah, there is a proposal repo, but it is currently private, msg-ing rricard to open it up","msgtype":"m.text"},"ts":1585594551000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"removing ownership of refs from where they are contained seems like it automatically disqualifies the design tbh","msgtype":"m.text"},"ts":1585594578000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"individual ref cells at each position would be better","msgtype":"m.text"},"ts":1585594594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and better yet would be removing the restriction on objects in records","msgtype":"m.text"},"ts":1585594603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not sure what you mean by individual ref cells","msgtype":"m.text"},"ts":1585594650000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"like instead of one thing owning a bunch of cells","msgtype":"m.text"},"ts":1585594661000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"each instance is its own thing","msgtype":"m.text"},"ts":1585594667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1585594674000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"yea I can see that work as well","msgtype":"m.text"},"ts":1585594678000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"but like i said","msgtype":"m.text"},"ts":1585594684000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"better would be just allowing objects in records","msgtype":"m.text"},"ts":1585594690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what would it mean for a primitive to contain an object?","msgtype":"m.text"},"ts":1585594704000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"it's an early idea, I'm gonna try to get the RefCollection up asap","msgtype":"m.text"},"ts":1585594717000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"it would mean there was a pointer to the object","msgtype":"m.text"},"ts":1585594717000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like how there will be pointers to the doubles","msgtype":"m.text"},"ts":1585594724000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because engines put doubles in the heap","msgtype":"m.text"},"ts":1585594730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well sure","msgtype":"m.text"},"ts":1585594737000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i don't understand your question then","msgtype":"m.text"},"ts":1585594746000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the record holds some keys and values","msgtype":"m.text"},"ts":1585594760000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why is there a limitation on the type of the value","msgtype":"m.text"},"ts":1585594770000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ergonomically there is a point in having to make the extra dereferencing hoo[","msgtype":"m.text"},"ts":1585594773000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"hoop*","msgtype":"m.text"},"ts":1585594780000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"yeah the extra reference is kind of awful too","msgtype":"m.text"},"ts":1585594792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even if you move to a per-instance cell","msgtype":"m.text"},"ts":1585594797000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we can improve it","msgtype":"m.text"},"ts":1585594800000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"I agree it's annoying","msgtype":"m.text"},"ts":1585594813000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"you could make the cell implicit in the record","msgtype":"m.text"},"ts":1585594817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you just do `#{ a: {} }`","msgtype":"m.text"},"ts":1585594829000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then `whatever.a === that object`","msgtype":"m.text"},"ts":1585594836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"one of the major arguments against objects in records is also an ergonomic one","msgtype":"m.text"},"ts":1585594853000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"yeah people want to guarantee the objects are frozen all the way down","msgtype":"m.text"},"ts":1585594869000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the ergonomic goal here is to typeerror","msgtype":"m.text"},"ts":1585594870000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"if you bail out, you have to explicitely do it","msgtype":"m.text"},"ts":1585594888000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"exactly, from our research most bugs introduced while using immutable libraries like Immutable.js and immer are at the boundaries","msgtype":"m.text"},"ts":1585594898000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"`#{ a: r({}) }","msgtype":"m.text"},"ts":1585594901000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"from my perspective not allowing objects is unergonomic to the point of being a blocking point","msgtype":"m.text"},"ts":1585594907000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whatever.a.deref() === that object","msgtype":"m.text"},"ts":1585594918000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"I don' t know but in this area","msgtype":"m.text"},"ts":1585594928000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"so when two things collide i generally feel its better to go for the one that allows both","msgtype":"m.text"},"ts":1585594944000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"allowing objects doesn't mean you can't have things that are immutable all the way down","msgtype":"m.text"},"ts":1585594957000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I need to go for a quick while","msgtype":"m.text"},"ts":1585594970000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"wasn't there a suggestion to have `##{}` or something which enforces immutable in its children","msgtype":"m.text"},"ts":1585594982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or maybe ## was the one that allows mutable children","msgtype":"m.text"},"ts":1585594995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't remember which was which","msgtype":"m.text"},"ts":1585595000000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"^ that question is why I'm not in favor of that syntax","msgtype":"m.text"},"ts":1585595013000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"in either case","msgtype":"m.text"},"ts":1585595019000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not having objects directly seems like a huge pain point","msgtype":"m.text"},"ts":1585595029000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"allowing objects means that given a record you can't know if it is actually immutable","msgtype":"m.text"},"ts":1585595029000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"like i'm imagining how i'd use these in node core","msgtype":"m.text"},"ts":1585595046000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and this would just be a huge pain","msgtype":"m.text"},"ts":1585595049000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to the point of not using them","msgtype":"m.text"},"ts":1585595057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you have any specific examples? vv interested in them","msgtype":"m.text"},"ts":1585595128000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"for example datagram packets","msgtype":"m.text"},"ts":1585595129000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to reply to a datagram message you need the host+port","msgtype":"m.text"},"ts":1585595150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"moving to `#{ host, port, socket }` would be cool","msgtype":"m.text"},"ts":1585595170000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except making socket a ref of some sort is a terrible api","msgtype":"m.text"},"ts":1585595178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so i wouldn't bother","msgtype":"m.text"},"ts":1585595182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or maybe `#{ host, port, socket, reply() }`","msgtype":"m.text"},"ts":1585595207000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except again you can't put the reply function in directly","msgtype":"m.text"},"ts":1585595216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its like there's this cool feature but its so annoying to use its better to just not use it","msgtype":"m.text"},"ts":1585595256000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"another example would be, if we supported evaluation results from TLA modules, they have to be packed up like { result: value }","msgtype":"m.text"},"ts":1585595303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which seems like a good case for a record","msgtype":"m.text"},"ts":1585595309000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since mutating that would just cause confusion","msgtype":"m.text"},"ts":1585595318000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but if value happens to be an object that breaks","msgtype":"m.text"},"ts":1585595327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, allowing objects in records simplifies that use case, but on the other end, I think that allowing #[{}] !== #[{}] causes a significant amount of sharp edges in real world code, we find a majority of bugs in immutables happen because the user of the library didn't expect an object or doesn't understand object identity, so I worry that introducing a primitive that can deeply compare but won't if you aren't careful","msgtype":"m.text"},"ts":1585595491000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"is a super sharp edge","msgtype":"m.text"},"ts":1585595491000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"do actual humans think of things in js as primitives and objects","msgtype":"m.text"},"ts":1585595528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because i find that distinction pretty much meaningless","msgtype":"m.text"},"ts":1585595537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe not using the nouns \"primitive\" and \"object\" but certainly \"things i can compare with ===\" and \"things i need to write a deep compare function for\"","msgtype":"m.text"},"ts":1585595574000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"in the context of equality, at least","msgtype":"m.text"},"ts":1585595581000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"so the problem is identity","msgtype":"m.text"},"ts":1585595608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the categorization","msgtype":"m.text"},"ts":1585595611000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah exactly, the meat of the sharp edge is the fact that putting an object in a record implicitly gives the record identity","msgtype":"m.text"},"ts":1585595652000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i mean if they're defined to recursively have the identity of their parts (how most languages do it) then its not really a problem","msgtype":"m.text"},"ts":1585595677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess you're saying people would be surprised that it stopped at the object boundary","msgtype":"m.text"},"ts":1585595698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yep, there is no spec reason it isn't possible, it's surprising for humans imo","msgtype":"m.text"},"ts":1585595719000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"weird cuz i find it surprising the other way around","msgtype":"m.text"},"ts":1585595732000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the main motivation we got on why it's like this is actually interviewing some developers using Immutable.js that ended up not trusting immutable equality because they started mixing object","msgtype":"m.text"},"ts":1585595748000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"my intuition exactly matches rickbutton's fwiw","msgtype":"m.text"},"ts":1585595758000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's a footgun we want to avoid","msgtype":"m.text"},"ts":1585595785000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"if it was added without that behaviour i wouldn't find much use in it probably","msgtype":"m.text"},"ts":1585595832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"making the ref hoop explicit is a way to at least bring awareness on that footgun","msgtype":"m.text"},"ts":1585595834000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"so its hard to comment much on it at that point","msgtype":"m.text"},"ts":1585595838000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that seems fine; not every feature needs to be useful for everyone","msgtype":"m.text"},"ts":1585595847000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"eh","msgtype":"m.text"},"ts":1585595856000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i mean if we're adding new primitives","msgtype":"m.text"},"ts":1585595867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems like a pretty high bar","msgtype":"m.text"},"ts":1585595878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(there is a balance, of course)","msgtype":"m.text"},"ts":1585595878000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I would not find it useful if it allowed non-primitive objects, because of that sharp edge, so one of us is going to be out of luck","msgtype":"m.text"},"ts":1585595888000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: oh, there is no way this would get through the committee if it was primitive and also allowed objects inside of it","msgtype":"m.text"},"ts":1585595904000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like private fields, i've probably used them like once ever because they're so limited","msgtype":"m.text"},"ts":1585595911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if it has objects inside of it, it is not primitive","msgtype":"m.text"},"ts":1585595912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't want the same to happen to records","msgtype":"m.text"},"ts":1585595915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because i think they're cool","msgtype":"m.text"},"ts":1585595920000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you don't want them to be primitives, what do you expect the behavior of === to be?","msgtype":"m.text"},"ts":1585595944000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"we're just starting on this, I'm sure we can find ways to make them useful","msgtype":"m.text"},"ts":1585595956000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"for you*","msgtype":"m.text"},"ts":1585595962000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"on the subject of identity https://github.com/tc39/proposal-record-tuple/issues/65#issuecomment-606178554","msgtype":"m.text"},"ts":1585595971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"refcollection is just a very basic way to do it so far","msgtype":"m.text"},"ts":1585595984000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"i think the solution here is going to end up being some sort of new ref primitive","msgtype":"m.text"},"ts":1585595999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i'm just never going to use them","msgtype":"m.text"},"ts":1585596006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there is no way any sort of ref primitive is going to get through committee either","msgtype":"m.text"},"ts":1585596018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's why symbol was a nice way to tie things up","msgtype":"m.text"},"ts":1585596029000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"wait so then what is refcollection","msgtype":"m.text"},"ts":1585596036000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it has ergonomic issues","msgtype":"m.text"},"ts":1585596038000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"oh it returns a symbol?","msgtype":"m.text"},"ts":1585596039000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585596042000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"ah jeez","msgtype":"m.text"},"ts":1585596048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's kind of cute","msgtype":"m.text"},"ts":1585596057000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes reakized my slides suck","msgtype":"m.text"},"ts":1585596058000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"that seems like a huge footgun too","msgtype":"m.text"},"ts":1585596062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing implies its a ref to another object in that case","msgtype":"m.text"},"ts":1585596070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have to implicitly know","msgtype":"m.text"},"ts":1585596096000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the refcollection is there to make you manage it","msgtype":"m.text"},"ts":1585596098000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"no like","msgtype":"m.text"},"ts":1585596107000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if i hand you a record","msgtype":"m.text"},"ts":1585596110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have to know","msgtype":"m.text"},"ts":1585596112000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"exactly where all those symbols are","msgtype":"m.text"},"ts":1585596118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I agree it's not perfect","msgtype":"m.text"},"ts":1585596120000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"and that they need to be unwrapped","msgtype":"m.text"},"ts":1585596121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and you have to be given the refcollection somehow","msgtype":"m.text"},"ts":1585596132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"out of band","msgtype":"m.text"},"ts":1585596135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you hand me a record, you also need to hand me a refcollection","msgtype":"m.text"},"ts":1585596135000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"why not just hand you an object then","msgtype":"m.text"},"ts":1585596143000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if Object.freeze is easier","msgtype":"m.text"},"ts":1585596178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i end up never using this","msgtype":"m.text"},"ts":1585596183000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the most primitive form of that is I hand you an object with the record and the symbol mapping","msgtype":"m.text"},"ts":1585596185000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"with Object.freeze you lose deep equality checks","msgtype":"m.text"},"ts":1585596211000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"there are deep equality libraries 🤷🏻","msgtype":"m.text"},"ts":1585596244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: stepping back a bit, why do you want to have these records-with-mutable-contents?","msgtype":"m.text"},"ts":1585596324000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i gave some examples above","msgtype":"m.text"},"ts":1585596334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you said you wanted to write `#{ host, port, socket }`, but I don't know why you want to write that","msgtype":"m.text"},"ts":1585596351000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think there are more use cases for records than diffing react trees","msgtype":"m.text"},"ts":1585596353000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right because those shouldn't be mutable","msgtype":"m.text"},"ts":1585596364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we also discussed with jridsgewell about template-records and tuples","msgtype":"m.text"},"ts":1585596372000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"and that also means you can compare the two message origins","msgtype":"m.text"},"ts":1585596380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with ===","msgtype":"m.text"},"ts":1585596382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jridgewell*","msgtype":"m.text"},"ts":1585596382000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"instead of doing a.host === b.host && a.port === b.port && a.socket === b.socket","msgtype":"m.text"},"ts":1585596393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah template records make zero sense to me","msgtype":"m.text"},"ts":1585596405000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"template tuples maybe","msgtype":"m.text"},"ts":1585596409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: what's the advantage of them not being mutable? are you handing the same object off to multiple parties somewhere?","msgtype":"m.text"},"ts":1585596428000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: they're part of the public node api","msgtype":"m.text"},"ts":1585596436000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you mutated them all you're doing is creating confusion","msgtype":"m.text"},"ts":1585596449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek right my question is, does the API return the same object to multiple different callers, or does it make a fresh object for each caller?","msgtype":"m.text"},"ts":1585596473000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because if it's fresh, I don't see much advantage in immutability","msgtype":"m.text"},"ts":1585596482000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean if you just don't think this is a valid use case then whatever","msgtype":"m.text"},"ts":1585596499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no I am just trying to understand why you want this","msgtype":"m.text"},"ts":1585596509000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"for context, to me the advantage of immutability is mostly when you have one object you're handing to multiple parties, so that one party cannot mutate it and thereby mess up the other party","msgtype":"m.text"},"ts":1585596535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"immutability is whatever","msgtype":"m.text"},"ts":1585596561000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the main reason in this case is equality and being able to use it as a map key or something","msgtype":"m.text"},"ts":1585596574000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ahh","msgtype":"m.text"},"ts":1585596580000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i really hope tuples can replace Symbol.compositeKey","msgtype":"m.text"},"ts":1585596626000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you just end up with huge leaks if you use ref cells","msgtype":"m.text"},"ts":1585596651000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well refcollection cells","msgtype":"m.text"},"ts":1585596661000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the map key thing I tend to just solve in userland, but it does get a bit awkward","msgtype":"m.text"},"ts":1585596671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I should clean up the library I wrote for that and publish it maybe","msgtype":"m.text"},"ts":1585596678000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how do you end up with leaks?","msgtype":"m.text"},"ts":1585596679000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"ends up being pretty clean for users, just messy internally","msgtype":"m.text"},"ts":1585596685000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"RefCollection has to strongly reference the object","msgtype":"m.text"},"ts":1585596698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as the symbol could possibly be alive","msgtype":"m.text"},"ts":1585596708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and since userland can't iterate over the heap","msgtype":"m.text"},"ts":1585596718000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we just have to call that forever","msgtype":"m.text"},"ts":1585596722000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the refcollection polyfill will leak until it's released","msgtype":"m.text"},"ts":1585596750000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"yeah so","msgtype":"m.text"},"ts":1585596755000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not good for maps","msgtype":"m.text"},"ts":1585596760000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you can see an implementation in engine where it automatically releases","msgtype":"m.text"},"ts":1585596782000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"the map implementation can't tell if the object is still being used from the symbol it has","msgtype":"m.text"},"ts":1585596786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can clean the entire map","msgtype":"m.text"},"ts":1585596800000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but not individual keys","msgtype":"m.text"},"ts":1585596802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"individual entries","msgtype":"m.text"},"ts":1585596822000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes I agree in the case of the polyfill","msgtype":"m.text"},"ts":1585596837000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"well, you can use a FinalizationRegistry","msgtype":"m.text"},"ts":1585596845000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i guess you could","msgtype":"m.text"},"ts":1585596857000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but an in-engine impl can handle that of course","msgtype":"m.text"},"ts":1585596861000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"that seems incredibly complex for the simple case of compound keys","msgtype":"m.text"},"ts":1585596868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't see where RefCollection comes into play for compound keys","msgtype":"m.text"},"ts":1585596896000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"because the keys could be objects","msgtype":"m.text"},"ts":1585596905000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ultimately if this works for a unique refcollection we can think of a more global mechanism","msgtype":"m.text"},"ts":1585596905000,"senderName":"rricard","senderId":"rricard@irc"},
{"content":{"body":"maps can use objects as keys","msgtype":"m.text"},"ts":1585596911000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh I see, you are saying if records allowed objects via RefCollection then records-as-keys-in-Map gets more weird if the records include objects","msgtype":"m.text"},"ts":1585596971000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i just want there to be more use to this than react vdoms","msgtype":"m.text"},"ts":1585597002000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"without super contrived apis","msgtype":"m.text"},"ts":1585597027000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the object thing can't be worked out, perhaps the equality can be split into a separate syntax","msgtype":"m.text"},"ts":1585597088000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"#@{} for immutable+deeply equal or something","msgtype":"m.text"},"ts":1585597105000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though immutability with implicit object refs is nice :(","msgtype":"m.text"},"ts":1585597125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to be fair none of our internal research involves using record&tuple for vdoms, they just provide a consise and well-understood example (they would obviously be beneficial though)","msgtype":"m.text"},"ts":1585597385000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i'm just thinking of all the things i do with PartialEq in rust","msgtype":"m.text"},"ts":1585597412000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, I confess have also (almost) never used react vdoms","msgtype":"m.text"},"ts":1585597426000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all the examples i've seen so far involve vdoms","msgtype":"m.text"},"ts":1585597445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not inherently react i guess","msgtype":"m.text"},"ts":1585597449000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or any other vdoms","msgtype":"m.text"},"ts":1585597455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tbh i'm still not clear on why having first class refs in the language would not be a terrible thing","msgtype":"m.text"},"ts":1585597467000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah i'd probably block if symbols in global caches was the solution","msgtype":"m.text"},"ts":1585597542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like, i've seen a couple use cases for them, but nothing compelling to me","msgtype":"m.text"},"ts":1585597544000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(not block as in tc39 block)","msgtype":"m.text"},"ts":1585597556000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and i've always considered it a wonderful thing that JS doesn't have refs/pointers","msgtype":"m.text"},"ts":1585597558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"symbols seem strictly worse imo","msgtype":"m.text"},"ts":1585597595000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in this use case","msgtype":"m.text"},"ts":1585597602000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well i missed some talking","msgtype":"m.text"},"ts":1585598067000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585598110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1585598114000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"I'm on day 22 of isolation if I don't argue semantics then I can't tell if I'm alive","msgtype":"m.text"},"ts":1585598141000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"its mostly just me having private symbol deja vu with records","msgtype":"m.text"},"ts":1585598163000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I argue therefore I am.","msgtype":"m.text"},"ts":1585598430000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nuh uh","msgtype":"m.text"},"ts":1585598496000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i doubt compositeKey could be replaced as long as things strongly hold onto refs","msgtype":"m.text"},"ts":1585598568000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"that's my fear","msgtype":"m.text"},"ts":1585598604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why does it have to replace compositeKey?","msgtype":"m.text"},"ts":1585598650000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it doesn't have to","msgtype":"m.text"},"ts":1585598666000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it is kind of an easy step to take","msgtype":"m.text"},"ts":1585598677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't see how it is easy? since these are strong refs","msgtype":"m.text"},"ts":1585598689000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"since they have the identity of their children","msgtype":"m.text"},"ts":1585598691000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no I mean if they didn't require all the ref stuff","msgtype":"m.text"},"ts":1585598708000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"kind of?","msgtype":"m.text"},"ts":1585598712000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"compositeKey allows partial GC idk how this would","msgtype":"m.text"},"ts":1585598737000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it does what","msgtype":"m.text"},"ts":1585598748000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"compositeKey(a, b, c) lets b GC regardless of if the key lives","msgtype":"m.text"},"ts":1585598771000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1585598811000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a, b, and c do not have their lifetimes interwoven nor tied to the key","msgtype":"m.text"},"ts":1585598814000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I mean that makes sense in some ways","msgtype":"m.text"},"ts":1585598820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think this is just the problem of having a weird symbol wrapper","msgtype":"m.text"},"ts":1585598832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you just won't be able to reproduce the key from them (since b is gone)","msgtype":"m.text"},"ts":1585598838000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"it's a contrived solution","msgtype":"m.text"},"ts":1585598840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1585598848000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you're making a weird function that does magic with objects to create some symbol","msgtype":"m.text"},"ts":1585598868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its not magic, just some weakmaps","msgtype":"m.text"},"ts":1585598879000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Vs just using the inherent identity rules of the language","msgtype":"m.text"},"ts":1585598881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I know how it works internally, I mean it's not obvious or natural","msgtype":"m.text"},"ts":1585598953000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rickbutton: rricard it might be interesting to compare the RC to compositeKey in general. compositeKey explicitly doesn't have a way to reflect on component parts","msgtype":"m.text"},"ts":1585598957000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"in languages with tuples like rust and python you just naturally use them as map keys","msgtype":"m.text"},"ts":1585598969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bevause it makes sense","msgtype":"m.text"},"ts":1585598976000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it seems fine for me coming from the perspective of DBs with composite keys","msgtype":"m.text"},"ts":1585598984000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you could use things as a map key in those languages but they stay strongly held","msgtype":"m.text"},"ts":1585599003000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which is part of the point of not doing that in the compositeKey proposal","msgtype":"m.text"},"ts":1585599016000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah I mean it's not crazy","msgtype":"m.text"},"ts":1585599054000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm fine with composite key","msgtype":"m.text"},"ts":1585599058000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but given we might have tuples","msgtype":"m.text"},"ts":1585599067000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those would be way more natural","msgtype":"m.text"},"ts":1585599081000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you needed the weakmap semantics you'd usually do that yourself","msgtype":"m.text"},"ts":1585599120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also various things about whether you want it to drop from the map or not","msgtype":"m.text"},"ts":1585599133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could have both but you would want to lean towards compositeKey for anything with differing lifetimes if memory is a premium, also you can't weakmap tuples so that makes things hard to deal with in a weak way","msgtype":"m.text"},"ts":1585599135000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there are a lot of options there that the language can't infer for you","msgtype":"m.text"},"ts":1585599148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd agree but i wouldn't say tuples replace arrays or weak keys","msgtype":"m.text"},"ts":1585599170000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"map can't have it drop; it would have to be weakmap","msgtype":"m.text"},"ts":1585599172000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and a weakmap could drop it iff the key itself was dropped and all its values were","msgtype":"m.text"},"ts":1585599187000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that one I think the language can infer","msgtype":"m.text"},"ts":1585599191000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: but that requires the key to drop before its components can gc is my point","msgtype":"m.text"},"ts":1585599235000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"so you have interwoven the lifetimes","msgtype":"m.text"},"ts":1585599246000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck wait, why does it?","msgtype":"m.text"},"ts":1585599258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you'd use finalization registry to make it drop","msgtype":"m.text"},"ts":1585599264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am not suggesting you can use the composite to get its components","msgtype":"m.text"},"ts":1585599276000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: if you can get the key you can access the components","msgtype":"m.text"},"ts":1585599281000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"even if the objects are dead, because you hold that unique symbol","msgtype":"m.text"},"ts":1585599311000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in your proposal? that is not required to be true for the thing I said","msgtype":"m.text"},"ts":1585599314000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: in my proposal that isn't true, but i thought your antecedent was about tuples","msgtype":"m.text"},"ts":1585599368000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1585599373000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no, was speaking of composite keys, sorry","msgtype":"m.text"},"ts":1585599378000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my overarching point was that weird behaviour like interactions with object lifetimes should be explicit because you're probably doing something that is a special case","msgtype":"m.text"},"ts":1585599424000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for composite keys, map cannot drop the key ever because maps cannot drop anything, and for weakmaps the key can be dropped if the key itself and at least one of its components has been dropped","msgtype":"m.text"},"ts":1585599438000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can't use a composite key in a weakmap","msgtype":"m.text"},"ts":1585599522000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's just a symbol","msgtype":"m.text"},"ts":1585599526000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can in the object form","msgtype":"m.text"},"ts":1585599529000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"there's an object form?","msgtype":"m.text"},"ts":1585599538000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it has object and symbol, symbol was only added because people wanted it","msgtype":"m.text"},"ts":1585599544000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1585599562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wish weakmaps could hold symbols","msgtype":"m.text"},"ts":1585599572000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can recreate compositeSymbol easily enough and people wanted it so 🤷","msgtype":"m.text"},"ts":1585599584000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"they can hold boxed symbols","msgtype":"m.text"},"ts":1585599589000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: not that helpful though","msgtype":"m.text"},"ts":1585599604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does anyone know where to report that w3 has uncool URLs? https://www.w3.org/TR/wai-aria/roles no longer works","msgtype":"m.text"},"ts":1585604718000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and a bunch of others)","msgtype":"m.text"},"ts":1585604739000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what is /roles supposed to be","msgtype":"m.text"},"ts":1585605113000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"specifically, https://www.w3.org/TR/wai-aria/roles#composite_header 404s and the content now lives at https://www.w3.org/TR/wai-aria/#composite","msgtype":"m.text"},"ts":1585605228000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also https://www.w3.org/TR/wai-aria/states_and_properties → https://www.w3.org/TR/wai-aria/#states_and_properties","msgtype":"m.text"},"ts":1585605237000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and a few others","msgtype":"m.text"},"ts":1585605243000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"basically it looks like they regressed their site back to hashbang URLs, like it's 2006","msgtype":"m.text"},"ts":1585605254000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the main thing is that they need to add redirects, but i'm not sure where to report that","msgtype":"m.text"},"ts":1585605272000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Late to the R&T discussion, but","msgtype":"m.text"},"ts":1585606536000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":">  my intuition exactly matches rickbutton's fwiw","msgtype":"m.text"},"ts":1585606539000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Same here. I really like this new design.","msgtype":"m.text"},"ts":1585606545000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"😢","msgtype":"m.text"},"ts":1585606554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"And I also don't understand how tuples could have replaced CompositeKeys","msgtype":"m.text"},"ts":1585607020000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Even the old design","msgtype":"m.text"},"ts":1585607023000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Would have caused a permanent memory leak, ala the tagged template literal redesign","msgtype":"m.text"},"ts":1585607054000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"As soon as you stick the old Tuple into a WeakMap, it becomes a permanent value","msgtype":"m.text"},"ts":1585607085000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"if you have the tuple you have the key","msgtype":"m.text"},"ts":1585607108000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you don't you don't","msgtype":"m.text"},"ts":1585607120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i agree the semantics on how to release them is iffy","msgtype":"m.text"},"ts":1585607134000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The problem is that I could create the key at any future point","msgtype":"m.text"},"ts":1585607221000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So that key can never be released","msgtype":"m.text"},"ts":1585607229000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right as long as the objects exist","msgtype":"m.text"},"ts":1585607240000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that isn't surprising to me","msgtype":"m.text"},"ts":1585607254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Consider it without the objects, purely immutable primitive types","msgtype":"m.text"},"ts":1585607318000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you can't put that in a weakmap","msgtype":"m.text"},"ts":1585607330000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If I did `weakMap.set([1, 2, 3], {})`","msgtype":"m.text"},"ts":1585607338000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you can't use numbers as weakmap keys though","msgtype":"m.text"},"ts":1585607358000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Sorry, meant `weakMap.set(#[1, 2, 3], {})`","msgtype":"m.text"},"ts":1585607361000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you still can't use numbers as weakmap keys","msgtype":"m.text"},"ts":1585607371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It's a tuple, though","msgtype":"m.text"},"ts":1585607380000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Which is just an immutable array","msgtype":"m.text"},"ts":1585607387000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"tuple of numbers","msgtype":"m.text"},"ts":1585607393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Tuple of _anything_ is my point","msgtype":"m.text"},"ts":1585607404000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"there has to be a lifetime somewhere for it to be valid as a weakmap key","msgtype":"m.text"},"ts":1585607406000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(i probably wouldn't use tuples in weakmaps in either case)","msgtype":"m.text"},"ts":1585607429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think that's going to fly with end users","msgtype":"m.text"},"ts":1585607436000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"\"Why is this tuple allowed and not that one?\"","msgtype":"m.text"},"ts":1585607449000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"#[1, 2, 3] as a weakmap key is nonsensical","msgtype":"m.text"},"ts":1585607457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the same way 5 as a weakmap key is nonsensitcal","msgtype":"m.text"},"ts":1585607470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nonsensical","msgtype":"m.text"},"ts":1585607473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The difficulty is explaining this to anyone","msgtype":"m.text"},"ts":1585607477000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I can say the same about `Symbol('foo')` and `Symbol.for('foo')`","msgtype":"m.text"},"ts":1585607492000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Why would one be allowed and the other now?","msgtype":"m.text"},"ts":1585607500000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Why would one be allowed and the other not**?","msgtype":"m.text"},"ts":1585607503000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"neither are allowed atm","msgtype":"m.text"},"ts":1585607506000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Wasn't that just discussed above?","msgtype":"m.text"},"ts":1585607524000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't think its worth trying to argue about the behaviour of values based on weakmap keys","msgtype":"m.text"},"ts":1585607536000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because everything is very weird","msgtype":"m.text"},"ts":1585607550000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But this is a discussion on replacing CompositeKey with R&T, which has to work for maps and weakmaps.","msgtype":"m.text"},"ts":1585607611000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I don't think there's we can discuss one without the other.","msgtype":"m.text"},"ts":1585607628000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i wasn't really thinking about weakmaps","msgtype":"m.text"},"ts":1585607654000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Only maps?","msgtype":"m.text"},"ts":1585607676000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes, i don't think its bad that you have to build your own keying system for weakmaps","msgtype":"m.text"},"ts":1585607700000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the lifetimes there are tricky to get right and if any of it is done implicitly you might accidentally leak something","msgtype":"m.text"},"ts":1585607719000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or end something too early","msgtype":"m.text"},"ts":1585607724000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"For maps only, I think either R&T design would work?","msgtype":"m.text"},"ts":1585607767000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"what is r&t","msgtype":"m.text"},"ts":1585607786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Records & Tuples","msgtype":"m.text"},"ts":1585607791000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"by either design do you mean with or without objects allowed?","msgtype":"m.text"},"ts":1585607808000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah, if I've skimmed the above discussion correctly","msgtype":"m.text"},"ts":1585607835000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"One with `Ref`, and one with direct mutable objectcs","msgtype":"m.text"},"ts":1585607843000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i think it would be pretty useless without objects allowed","msgtype":"m.text"},"ts":1585607851000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you have to set up really a bunch of lifetime management with the ref stuff","msgtype":"m.text"},"ts":1585607881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even though you don't care about lifetimes at all","msgtype":"m.text"},"ts":1585607886000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and ref has a lot of other problems","msgtype":"m.text"},"ts":1585607921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess it couldn't be just a second tuple to let it handle for you.","msgtype":"m.text"},"ts":1585607929000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'd be fine with two kinds of tuples","msgtype":"m.text"},"ts":1585607946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Eg, `Map.set(#[ immutable, refs ])`, where you get the immutable and refs from the first R&T.","msgtype":"m.text"},"ts":1585607979000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Because the `refs` reference wouldn't be allowed.","msgtype":"m.text"},"ts":1585607998000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't understand what this means","msgtype":"m.text"},"ts":1585608010000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bradley's `CompositeKey` might work","msgtype":"m.text"},"ts":1585608017000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's an attempt to store both the tuple and it's mutable refs in a single Map key.","msgtype":"m.text"},"ts":1585608038000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"that doesn't seem possible","msgtype":"m.text"},"ts":1585608057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So you don't manually manage the lifetime of the refs, it's done for you","msgtype":"m.text"},"ts":1585608059000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"given just the objects that make up the key","msgtype":"m.text"},"ts":1585608090000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where do you derive the refs from","msgtype":"m.text"},"ts":1585608095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for a get() operation","msgtype":"m.text"},"ts":1585608101000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"on a larger level this is the problem, if you just allow objects you don't have to solve all these problems because the semantics just naturally work together","msgtype":"m.text"},"ts":1585608144000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but apparently that's also a footgun","msgtype":"m.text"},"ts":1585608196000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(i never encountered that being a problem in python though)","msgtype":"m.text"},"ts":1585608231000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is `refs` not a map itself?","msgtype":"m.text"},"ts":1585608408000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"So it holds onto the mutable objects?","msgtype":"m.text"},"ts":1585608417000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you're the one who brought refs into this","msgtype":"m.text"},"ts":1585608440000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in order to get an item out of the map you need to have the identity with it, so you'd need a reference to `refs`","msgtype":"m.text"},"ts":1585608490000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure what `refs` is though","msgtype":"m.text"},"ts":1585608494000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it the RefCollection?","msgtype":"m.text"},"ts":1585608499000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1585608531000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`const refs = new RefCollection();`","msgtype":"m.text"},"ts":1585608540000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"well you can't store that in a tuple","msgtype":"m.text"},"ts":1585608562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since its an object","msgtype":"m.text"},"ts":1585608564000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I see it uses `deref`","msgtype":"m.text"},"ts":1585608565000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Instead of `get`","msgtype":"m.text"},"ts":1585608596000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"RefCollection.prototype.ref apparently returns a symbol","msgtype":"m.text"},"ts":1585608599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1585608619000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"so you just have to know that some symbols in records and tuples need to be derefed in some random refcollection somewhere","msgtype":"m.text"},"ts":1585608621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which refcollection? who knows!","msgtype":"m.text"},"ts":1585608627000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"This is the same as with Tagged Template Literals","msgtype":"m.text"},"ts":1585608643000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"in what way","msgtype":"m.text"},"ts":1585608650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Mutable data is stored out-of-band (in the invocations arguments)","msgtype":"m.text"},"ts":1585608661000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"And immutable data is stored as a frozen `TemplateStringsArray`","msgtype":"m.text"},"ts":1585608677000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"You reference the mutable data based on the index","msgtype":"m.text"},"ts":1585608697000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"is it frozen?","msgtype":"m.text"},"ts":1585608697000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is what frozen?","msgtype":"m.text"},"ts":1585608710000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the array","msgtype":"m.text"},"ts":1585608713000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i know its cached","msgtype":"m.text"},"ts":1585608715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The `TemplateStringsArray` is frozen","msgtype":"m.text"},"ts":1585608726000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"The arguments aren't frozen, you have to generate your own array","msgtype":"m.text"},"ts":1585608737000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585608756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not seeing how this relates to map keys though","msgtype":"m.text"},"ts":1585608766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you saying you want to have a key that is the template string array and the values together","msgtype":"m.text"},"ts":1585608805000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for caching the rendered result or something","msgtype":"m.text"},"ts":1585608812000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"No, I was talking about using a Tuple for CompositeKey still","msgtype":"m.text"},"ts":1585609029000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"But it doesn't work it still doesn't work.","msgtype":"m.text"},"ts":1585609042000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"CompositeKey would, though","msgtype":"m.text"},"ts":1585609049000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"You'd just stick your immutable R&T and the mutable Refs into a CompositeKey, and let the `===` take care of the equality","msgtype":"m.text"},"ts":1585609076000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"where do you get refs from","msgtype":"m.text"},"ts":1585609091000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for get()","msgtype":"m.text"},"ts":1585609094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://button.dev/talks/record-and-tuple-tc39-march-2020.pdf https://www.irccloud.com/pastebin/CWoXdvIl/RefCollection.js","msgtype":"m.text"},"ts":1585609207000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`rc` is a brand instance you make with every tuple","msgtype":"m.text"},"ts":1585609238000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"(`rc` being what I was calling `refs`)","msgtype":"m.text"},"ts":1585609249000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yeah i've seen the slides","msgtype":"m.text"},"ts":1585609263000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"With the Tagged form of R&T, you'll could get them automatically as a parameter","msgtype":"m.text"},"ts":1585609678000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"We'd just have to settle on a syntax for Tagged form and inclusions.","msgtype":"m.text"},"ts":1585609696000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"jridgewell: i'm still not convinced that tagged records and tuples make any amount of sense","msgtype":"m.text"},"ts":1585609728000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its like saying tagged object literal or tagged array literal","msgtype":"m.text"},"ts":1585609756000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You had a very real complaint about the burden of creating a `RefCollection`","msgtype":"m.text"},"ts":1585609807000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It just solves that for you","msgtype":"m.text"},"ts":1585609813000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't understand how it does anything","msgtype":"m.text"},"ts":1585609891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't make sense to me","msgtype":"m.text"},"ts":1585609894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`tag#{ foo: object }` would invoke `foo` with an already built record and refs","msgtype":"m.text"},"ts":1585610056000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`tag#{}` doesn't make sense to me","msgtype":"m.text"},"ts":1585610083000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So you wouldn't have to create and do the `rc.ref(...)` manually","msgtype":"m.text"},"ts":1585610087000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"regardless of what {} contains","msgtype":"m.text"},"ts":1585610090000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and that doesn't solve the ref problem","msgtype":"m.text"},"ts":1585610095000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Did ``` tag`x` ``` make sense at first?","msgtype":"m.text"},"ts":1585610103000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585610107000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Why?","msgtype":"m.text"},"ts":1585610121000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"but i literally cannot figure out what semantics `tag#{}` has","msgtype":"m.text"},"ts":1585610122000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it feels like you're saying tagged number","msgtype":"m.text"},"ts":1585610135000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i can think of things that tagged numbers would do","msgtype":"m.text"},"ts":1585610151000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the best i can come up with is something analogous to the JSON.stringify callback for a \"tagged record\"","msgtype":"m.text"},"ts":1585610179000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that seems like a reach","msgtype":"m.text"},"ts":1585610190000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it does look kind of weird, `tag#`","msgtype":"m.text"},"ts":1585610340000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/Ub13FBLx/","msgtype":"m.text"},"ts":1585610343000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"like at least `obj.#x` has the `.` in it","msgtype":"m.text"},"ts":1585610361000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh you're saying `tag#{}` is shorthand for proper records that allow all values in them","msgtype":"m.text"},"ts":1585610376000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1585610383000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"there are a lot of problems with that","msgtype":"m.text"},"ts":1585610390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example","msgtype":"m.text"},"ts":1585610393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Because the values will be put into the refs automatically","msgtype":"m.text"},"ts":1585610396000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"`tag1#{ x: tag2#{ y: {} } }`","msgtype":"m.text"},"ts":1585610408000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What's wrong with that?","msgtype":"m.text"},"ts":1585610433000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"having separate refs just don't work","msgtype":"m.text"},"ts":1585610435000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"We do the same with tagged templates","msgtype":"m.text"},"ts":1585610443000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you lose the refs in x","msgtype":"m.text"},"ts":1585610443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You have to return a result from the tag","msgtype":"m.text"},"ts":1585610453000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"If you want to use a result","msgtype":"m.text"},"ts":1585610458000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"what could the possible return value be","msgtype":"m.text"},"ts":1585610465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"to be useful","msgtype":"m.text"},"ts":1585610466000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/polymer/lit-html/","msgtype":"m.text"},"ts":1585610485000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"like if i just want records that can hold objects","msgtype":"m.text"},"ts":1585610488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The entire design of Tagged Template Literals is about the return value","msgtype":"m.text"},"ts":1585610499000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Lit uses `TemplateResult` values","msgtype":"m.text"},"ts":1585610513000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Which allow you to render","msgtype":"m.text"},"ts":1585610517000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"yes but we're not trying to compose the values of a record","msgtype":"m.text"},"ts":1585610518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're already composed","msgtype":"m.text"},"ts":1585610521000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"into key: value","msgtype":"m.text"},"ts":1585610527000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But they're not, because you can't hold mutable values.","msgtype":"m.text"},"ts":1585610537000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1585610542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you end up","msgtype":"m.text"},"ts":1585610543000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with this useless function","msgtype":"m.text"},"ts":1585610547000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You need a tag that actually does something","msgtype":"m.text"},"ts":1585610554000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"what is \"something\"","msgtype":"m.text"},"ts":1585610562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what possible use is there","msgtype":"m.text"},"ts":1585610568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/Polymer/lit-html/blob/master/src/lit-html.ts#L67-L68","msgtype":"m.text"},"ts":1585610615000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"https://github.com/Polymer/lit-html/blob/7c7442278281a6923eb1dfbb77600b8b64522a50/src/lit-html.ts#L67-L68","msgtype":"m.text"},"ts":1585610622000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"You return a value that composes the immutable and mutable parts","msgtype":"m.text"},"ts":1585610633000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"they're already composed","msgtype":"m.text"},"ts":1585610639000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"And do something with that value in your library","msgtype":"m.text"},"ts":1585610641000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"into keys and values","msgtype":"m.text"},"ts":1585610649000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"They are not by definition.","msgtype":"m.text"},"ts":1585610652000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"if you don't want that","msgtype":"m.text"},"ts":1585610657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why are you using a key value thing","msgtype":"m.text"},"ts":1585610660000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"You cannot hold mutable data in an immutable record","msgtype":"m.text"},"ts":1585610664000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"this doesn't solve the problem","msgtype":"m.text"},"ts":1585610676000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So, no, they are not composed.","msgtype":"m.text"},"ts":1585610677000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i started with mutable and immutable components that can't be composed","msgtype":"m.text"},"ts":1585610707000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and ended with mutable and immutable components that can't be composed","msgtype":"m.text"},"ts":1585610715000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because they're still stuck in a record and a floaty \"refs\" object","msgtype":"m.text"},"ts":1585610765000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the refs can't be associated with the record in any way","msgtype":"m.text"},"ts":1585610773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and if you want nested structures","msgtype":"m.text"},"ts":1585610781000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can't put refs anywhere","msgtype":"m.text"},"ts":1585610787000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because again its an object","msgtype":"m.text"},"ts":1585610803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and refs really fall apart as soon as you start combining records and tuples from different places","msgtype":"m.text"},"ts":1585610876000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"have like five different ref collections each holding a different bit of this tuple i'm trying to get values out of","msgtype":"m.text"},"ts":1585610913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does accessing a value become O(n) to the number of ref collections since you have to check each one","msgtype":"m.text"},"ts":1585610925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where do you even put all these ref collections","msgtype":"m.text"},"ts":1585610954000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/84lzR9OW/deep-tagged-record.js","msgtype":"m.text"},"ts":1585610990000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"This is entirely up to the tag library","msgtype":"m.text"},"ts":1585611023000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"And it's the _same_ super powers we give to Tagged Template Literals","msgtype":"m.text"},"ts":1585611045000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"so in this case","msgtype":"m.text"},"ts":1585611058000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you nest the refs deeply","msgtype":"m.text"},"ts":1585611061000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"refs.get(refs).refs.get(refs)","msgtype":"m.text"},"ts":1585611069000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"As example code, yes.","msgtype":"m.text"},"ts":1585611091000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Again, the tag library can do anything.","msgtype":"m.text"},"ts":1585611099000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"can it solve this problem in a reasonable way?","msgtype":"m.text"},"ts":1585611110000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"refs.get(refs).refs.get(refs) doesn't seem to pass the bar for in-the-language design","msgtype":"m.text"},"ts":1585611155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/WqdrIhyA/deep-tagged-template-literals.js","msgtype":"m.text"},"ts":1585611346000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"obviously yes","msgtype":"m.text"},"ts":1585611358000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Is this any different than^","msgtype":"m.text"},"ts":1585611363000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"tagged templates flatten into one value","msgtype":"m.text"},"ts":1585611364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"records flatten into two values","msgtype":"m.text"},"ts":1585611369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1585611381000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"because tagged templates are allowed to return objects that reference objects","msgtype":"m.text"},"ts":1585611403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Because if you flatten it all into a single object, you lose the positions of the interpolations","msgtype":"m.text"},"ts":1585611408000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Which means it was no better than constructing the object in the first place.","msgtype":"m.text"},"ts":1585611435000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'm just really not sure what problem tagged records solve","msgtype":"m.text"},"ts":1585611456000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess it makes making vdoms easier","msgtype":"m.text"},"ts":1585611464000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it doesn't solve my problem though","msgtype":"m.text"},"ts":1585611470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think your problem can be solved while giving interpolation positions.","msgtype":"m.text"},"ts":1585611508000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't think my problem can be solved by tagged records","msgtype":"m.text"},"ts":1585611531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"period end of story","msgtype":"m.text"},"ts":1585611535000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Which would limit the use of records in any tree structure","msgtype":"m.text"},"ts":1585611537000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"vdom just being one use case.","msgtype":"m.text"},"ts":1585611544000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"as far as i can tell i would not have any use cases for records and tuples","msgtype":"m.text"},"ts":1585611555000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with the current design","msgtype":"m.text"},"ts":1585611558000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they just wouldn't be usable","msgtype":"m.text"},"ts":1585611572000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and its giving me private fields vibes (i have no uses for those either because they're so limited)","msgtype":"m.text"},"ts":1585611600000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"As a counter, I don't think mixing mutable and immutable in the same structure solve any real problem.","msgtype":"m.text"},"ts":1585611620000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"It's just a mutable structure then.","msgtype":"m.text"},"ts":1585611631000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"immutable isn't the only thing that records and tuples have","msgtype":"m.text"},"ts":1585611645000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"their identity is the identity of their children","msgtype":"m.text"},"ts":1585611657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which is useful in lots of cases","msgtype":"m.text"},"ts":1585611674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even if the structure is mutable","msgtype":"m.text"},"ts":1585611678000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Which would be broken with any mutable reference","msgtype":"m.text"},"ts":1585611682000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i'm not diffing vdoms","msgtype":"m.text"},"ts":1585611694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i gave an example above of a udp datagram origin object","msgtype":"m.text"},"ts":1585611724000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"How would you generate a second UDP packet that's equal?","msgtype":"m.text"},"ts":1585611774000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"its not the packet data","msgtype":"m.text"},"ts":1585611788000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its the origin of the packet","msgtype":"m.text"},"ts":1585611793000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the ip and port","msgtype":"m.text"},"ts":1585611794000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"s/packet/datagram/","msgtype":"m.text"},"ts":1585611801000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"you need both to reply","msgtype":"m.text"},"ts":1585611805000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but you also don't want to combine them into a string or something because then you have to parse it apart","msgtype":"m.text"},"ts":1585611826000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"There are no problems with 2 primitives in a tuple, though.","msgtype":"m.text"},"ts":1585611854000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"(notice that composite keys also don't work here because they don't ref the items that they're made of)","msgtype":"m.text"},"ts":1585611861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes but then maybe you want to add the socket reference","msgtype":"m.text"},"ts":1585611870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway if this comes down to my use cases not being valid there's not much point in arguing","msgtype":"m.text"},"ts":1585611908000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What socket reference?","msgtype":"m.text"},"ts":1585611977000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"on a high level, node has a datagram socket instance","msgtype":"m.text"},"ts":1585612011000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could also do a reply function right on the origin record","msgtype":"m.text"},"ts":1585612127000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though the semantics of the identity of that would be iffy","msgtype":"m.text"},"ts":1585612140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"What if we had operator overloading?","msgtype":"m.text"},"ts":1585612432000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Eg, my deep equality tag returns some instance that will do equality for you.","msgtype":"m.text"},"ts":1585612454000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't need deep equality of normal objects","msgtype":"m.text"},"ts":1585612470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Or, just a `Datagram` class that had equality without even involving R&t.","msgtype":"m.text"},"ts":1585612481000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"oh i see what you mean","msgtype":"m.text"},"ts":1585612489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"on a very theoretical level that would work","msgtype":"m.text"},"ts":1585612504000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't think operator overloading is a good idea in js","msgtype":"m.text"},"ts":1585612515000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"afaik it has yet to be shown that you can do it in an ergonomic way without slowing down all occurrences of the overloaded operator","msgtype":"m.text"},"ts":1585612561000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Even the static import design?","msgtype":"m.text"},"ts":1585612590000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"I thought that solved the issue.","msgtype":"m.text"},"ts":1585612594000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"the `with operators` thing?","msgtype":"m.text"},"ts":1585612599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1585612604000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"i don't consider that ergonomic","msgtype":"m.text"},"ts":1585612605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"honestly i think its more of a footgun","msgtype":"m.text"},"ts":1585612637000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since you can just forget to have it","msgtype":"m.text"},"ts":1585612643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"especially the more you scope it","msgtype":"m.text"},"ts":1585612653000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the more you need it","msgtype":"m.text"},"ts":1585612655000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the more places you can forget it","msgtype":"m.text"},"ts":1585612658000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's the first design that i don't instantly and violently abhor","msgtype":"m.text"},"ts":1585612663000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i'm not convinced either","msgtype":"m.text"},"ts":1585612670000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's not as bad as others","msgtype":"m.text"},"ts":1585612679000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't think it's good enough","msgtype":"m.text"},"ts":1585612685000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i also have issues with how static it is","msgtype":"m.text"},"ts":1585612702000,"senderName":"devsnek","senderId":"devsnek@irc"}
]