[
{"content":{"body":"I was wondering if it is possible to have optional getters and setters, or will it be a breaking change to implement that.","msgtype":"m.text"},"ts":1580990775000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"acagastya: what do you mean optional?","msgtype":"m.text"},"ts":1581000465000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"you can have only 1 or the other already","msgtype":"m.text"},"ts":1581000476000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or both","msgtype":"m.text"},"ts":1581000492000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I was running an old version of TypeScript where without a matching get/set pair, it would throw an error.","msgtype":"m.text"},"ts":1581001199000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"I just checked with typescriptâŠ™3 and it was not a problem.","msgtype":"m.text"},"ts":1581001220000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"Though I get `'get' and 'set' accessor must have the same type.`","msgtype":"m.text"},"ts":1581001355000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"thats a typescript question and probably best on their discussion areas, TC39 is JavaScript","msgtype":"m.text"},"ts":1581003430000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Isn't tc39 for ECMAScript and JavaScript is one variant of ES, just like TypeScript?","msgtype":"m.text"},"ts":1581006859000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"I don't know, the naming is sometimes confusing, but TypeScript is supposed to adhere to ECMA standards, so I will put it there too.","msgtype":"m.text"},"ts":1581006913000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"acagastya: the error you're getting is outside the realm of ecmascript","msgtype":"m.text"},"ts":1581006977000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ECMA does put restriction on the getter setter <name> accessing/modifying different things, and that, I think TS should not enforce strictly.","msgtype":"m.text"},"ts":1581007080000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"ecmascript puts no restrictions on what the getter and setter are allowed to do","msgtype":"m.text"},"ts":1581007330000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're just normal functions","msgtype":"m.text"},"ts":1581007337000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Yes, I will file a bug for TypeScript stating tht.","msgtype":"m.text"},"ts":1581007517000,"senderName":"acagastya","senderId":"acagastya@irc"},
{"content":{"body":"when would NewGlobalEnvironment(G, thisValue) be called with G !== thisValue","msgtype":"m.text"},"ts":1581017649000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: when the host requires it to be otherwise","msgtype":"m.text"},"ts":1581017989000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i mean","msgtype":"m.text"},"ts":1581017999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in reality","msgtype":"m.text"},"ts":1581018001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like do browsers do that","msgtype":"m.text"},"ts":1581018005000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why do we have this functionality","msgtype":"m.text"},"ts":1581018008000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah reality.","msgtype":"m.text"},"ts":1581018012000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"a window proxy?","msgtype":"m.text"},"ts":1581018021000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"`this === window`","msgtype":"m.text"},"ts":1581018035000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you're saying","msgtype":"m.text"},"ts":1581018059000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the real non-proxy window","msgtype":"m.text"},"ts":1581018062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would be [[GlobalObject]]","msgtype":"m.text"},"ts":1581018068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not sure. All my notes say are \"(e.g., a window proxy)\" for the case you're asking about.","msgtype":"m.text"},"ts":1581018169000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb says (https://github.com/tc39/ecma262/pull/1463#discussion_r264312095): \"all browsers supply a different globalThis value from the globalObject value (a window proxy).\"","msgtype":"m.text"},"ts":1581018259000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1581018301000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm trying to make sense of v8's logic for creating contexts (realms)","msgtype":"m.text"},"ts":1581018367000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess in v8's case, the global object is always an ordinary object, and the this value is what is changed","msgtype":"m.text"},"ts":1581018437000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhofman: re your question; i believe that SES deletes the `constructor` property entirely","msgtype":"m.text"},"ts":1581021265000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so that `.constructor` would always be undefined","msgtype":"m.text"},"ts":1581021274000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Thanks! makes sense","msgtype":"m.text"},"ts":1581021296000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"(For reference, question was in SES, is  `Object.getPrototypeOf(function(){}).constructor !== Function` )","msgtype":"m.text"},"ts":1581021367000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"mhofman: ah, turns out that they replace the constructor accessor so it provides `Function`, which always throws","msgtype":"m.text"},"ts":1581028638000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: Is the TL;DR of issue 179 that our definition works?","msgtype":"m.text"},"ts":1581029478000,"senderName":"keith_miller","senderId":"keith_miller@irc"},
{"content":{"body":"keith_miller: what is \"our\"?","msgtype":"m.text"},"ts":1581029498000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: one idea you and i had was to null out all weakrefs, but bakkot gave a counterexample","msgtype":"m.text"},"ts":1581029519000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"keith_miller: i *think* bakkot's proposed \"Set of objects\" thing works","msgtype":"m.text"},"ts":1581029529000,"senderName":"shu","senderId":"shu@irc"}
]