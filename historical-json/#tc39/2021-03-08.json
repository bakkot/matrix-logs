[
{"content":{"body":"should probably update the topic of that room if possible","msgtype":"m.text"},"ts":1615215499000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"bakkot, I guess `Map.prototype.has.call(thing)` would only be reliable if using the the frozen intrinsics (and to jackwork's point about the frozen primordials: I was under the impression that using those actually resulted in a net loss in performance, but would have to actually benchmark) https://github.com/nodejs/node/blob/HEAD/lib/internal/freeze_intrinsics.js#L126","msgtype":"m.text"},"ts":1615219218000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"DerekNonGeneric yes, in general if you are not running first so you can to capture untouched versions of the builtins you are entirely subject to the constrains of earlier code","msgtype":"m.text"},"ts":1615219274000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that was true even in ES5, when the intrinsic Object.prototype.toString was reliable","msgtype":"m.text"},"ts":1615219290000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someone could always have swapped it out","msgtype":"m.text"},"ts":1615219297000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cosign, there's no defense against first-run code for deniable things","msgtype":"m.text"},"ts":1615219357000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"compartments!","msgtype":"m.text"},"ts":1615219810000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"And that compartment can be fake too!","msgtype":"m.text"},"ts":1615219883000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1615219925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"clearly we need compartment syntax /s","msgtype":"m.text"},"ts":1615219932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1615219966000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"compartments would work great as long as they're created by first-run code :-p","msgtype":"m.text"},"ts":1615220688000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gotta set a reminder to ask mark about compartment syntax on april first","msgtype":"m.text"},"ts":1615221126000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Testing.","msgtype":"m.text"},"ts":1615221556000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"TabAtkins, littledan: I’ve archived the old smart-pipes proposal and pushed a new Hack-pipes proposal to https://github.com/js-choi/proposal-hack-pipes/.","msgtype":"m.text"},"ts":1615221559000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"A spec is at https://jschoi.org/21/es-hack-pipes/.","msgtype":"m.text"},"ts":1615221565000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"We’ll also need to update tomorrow’s slides, the general pipe proposal’s readme, and some of the general pipe proposal’s old GitHub issues.","msgtype":"m.text"},"ts":1615221581000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"I’ve also swapped `#` with `%` in the explainer and spec, because I figure that `%` is less overloaded a token, but I’m fine with switching it back if it’s a big thing.","msgtype":"m.text"},"ts":1615221922000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"jschoi__: I think you should probably stick with `#` for now to maintain continuity. Sigil bikeshedding is unavoidable, but there's no need to introduce it at the same time as trying to clarify affordances.","msgtype":"m.text"},"ts":1615227543000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: Good point. Done.","msgtype":"m.text"},"ts":1615229788000,"senderName":"jschoi__","senderId":"jschoi__@irc"},
{"content":{"body":"jschoi: Do you want to make a PR against the main pipeline proposal to refer to this one instead of \"smart\"?","msgtype":"m.text"},"ts":1615239893000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(tbh I think switching to ? at the same time as talking about placeholders would remove a lot of the hesitancy)","msgtype":"m.text"},"ts":1615239950000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: Yes, I will make a PR. But first, are you fine with me altering your meeting slides to refer to the new Hack proposal instead of the old smart-mix proposal?","msgtype":"m.text"},"ts":1615240436000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Also, I can switch the placeholder to `?` in both the proposal and the slides today.","msgtype":"m.text"},"ts":1615240449000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"yeah I like the idea of using ? as a placeholder; it will get rid of the \"yuck\" factor for some people","msgtype":"m.text"},"ts":1615240548000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"My problem with `?` versus `%` or `#` is that it’s visually overloaded with binary `??` and trinary `? :`, but this opinion is weakly held.","msgtype":"m.text"},"ts":1615240580000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Avoiding the yuck factor is probably than bikeshedding right now.","msgtype":"m.text"},"ts":1615240619000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"*probably better right now","msgtype":"m.text"},"ts":1615240627000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"I’ll edit the slideshow later today. I’ll edit the proposal and make the PR request after that.","msgtype":"m.text"},"ts":1615240654000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"littledan: The presentation slides have been edited. I took out the stuff about smart mix, added more reasoning from TabAtkins’s essay to the Hack slide, and changed the Hack placeholder tokens from `#` to `?`. (As an aside, your slide 29, “Dan’s hot take”, has text cut off at the bottom; don’t know if you intended to do that or if you were going to tweak it later.)","msgtype":"m.text"},"ts":1615244713000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Yeah I have zero opinion on what the placeholder should be; if `?` makes people happier, that's fine.","msgtype":"m.text"},"ts":1615244778000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i suspect any change in placeholder will cause people to overindex on the placeholder","msgtype":"m.text"},"ts":1615244815000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and that since both # and ? have problems, we'll have to paint that bikeshed at some point, but hopefully not until the actual semantics are locked down","msgtype":"m.text"},"ts":1615244834000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jschoi: do you mind giving me edit rights on the repo? got some minor fixes i want to make in the readme","msgtype":"m.text"},"ts":1615244910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Done.","msgtype":"m.text"},"ts":1615244979000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Or invite has been sent, at least.","msgtype":"m.text"},"ts":1615244993000,"senderName":"jschoi","senderId":"jschoi@irc"}
]