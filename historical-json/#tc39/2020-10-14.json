[
{"content":{"body":"can someone check my understanding of https://github.com/tc39/test262/blob/main/test/language/statements/class/elements/arrow-body-indirect-eval-err-contains-arguments.js? this test seems wrong","msgtype":"m.text"},"ts":1602691668000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since https://tc39.es/proposal-class-fields/#sec-performeval-rules-in-initializer explicitly calls out direct eval","msgtype":"m.text"},"ts":1602691717000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu agreed, also the comment on the file itself says that","msgtype":"m.text"},"ts":1602691861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1602691886000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's a procedurally generated test so probably the \"direct\" part was just missed","msgtype":"m.text"},"ts":1602691894000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"although, wait, hang on","msgtype":"m.text"},"ts":1602691910000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's a reference error anyway because `arguments` is not defined in the global scope","msgtype":"m.text"},"ts":1602691931000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1602691941000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1602691946000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you should get a reference error because of `arguments` being unbound, I think","msgtype":"m.text"},"ts":1602691974000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah hm, it's just the comments then? let's see","msgtype":"m.text"},"ts":1602692018000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah I think it is accidentally right","msgtype":"m.text"},"ts":1602692092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah that seems right, it's testing class's strictness with indirect eval","msgtype":"m.text"},"ts":1602692117000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1602692216000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1602692252000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"strictness isn't relevant","msgtype":"m.text"},"ts":1602692256000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"a reference (not assignment) too an unbound variable is always a referenceerror","msgtype":"m.text"},"ts":1602692275000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and strictness does not propagate to indirect eval","msgtype":"m.text"},"ts":1602692319000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, amazingly everything i said was wrong","msgtype":"m.text"},"ts":1602692338000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu or Bakkot is there something missing from that test?","msgtype":"m.text"},"ts":1602692412000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: it's not testing what the comment says it's testing","msgtype":"m.text"},"ts":1602692446000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the comment says it's testing an early error special case for \"arguments\" inside direct eval, while the test has an indirect eval","msgtype":"m.text"},"ts":1602692471000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"AH! Let me go fix rhat","msgtype":"m.text"},"ts":1602692495000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"it ends up testing access to an unbound reference at the global scope to \"arguments\"","msgtype":"m.text"},"ts":1602692501000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"The generated file name and test body is all correct,","msgtype":"m.text"},"ts":1602692513000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"(context is this was failing on V8, but that's because the V8 shell by defaults includes \"arguments\" on the global, and i need to turn that off for the test262 runner...)","msgtype":"m.text"},"ts":1602692520000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron-: well it's all incidentally correct, but it's very misleading","msgtype":"m.text"},"ts":1602692538000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's not testing anything to do with field initializers or eval","msgtype":"m.text"},"ts":1602692551000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu, yes I recall. In Andre's original tests, V8 was failing for reasons that I determined were erroneous: it's not a \"forbidden extension\" to have an arguments object in the global scope.","msgtype":"m.text"},"ts":1602692621000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I will revisit this today and get info: ... sorted out.","msgtype":"m.text"},"ts":1602692649000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"yeah, but it's also fine for test262 to say it requires that its runner environment doesn't have \"arguments\"","msgtype":"m.text"},"ts":1602692662000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu I'd like for that to be not the case ^^","msgtype":"m.text"},"ts":1602692689000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: ah, okay, also fine with me","msgtype":"m.text"},"ts":1602692734000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rwaldron-: do you plan on removing these tests then?","msgtype":"m.text"},"ts":1602692741000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu likely for now, yes","msgtype":"m.text"},"ts":1602692773000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1602692790000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu I'm trying to recall if I gave you a \"heads up notice\" for these failures.","msgtype":"m.text"},"ts":1602692818000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Not sure if you see those","msgtype":"m.text"},"ts":1602692819000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"I'm certain that I did.","msgtype":"m.text"},"ts":1602692824000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"i do see them, yes, though there's a variable lag on when i act on them :)","msgtype":"m.text"},"ts":1602692840000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Ah, ok. No problem.","msgtype":"m.text"},"ts":1602692850000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"today is that go-through-failures-since-last-update day","msgtype":"m.text"},"ts":1602692872000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"an easy fix is too define `arguments` in the test and then assert that this reads from that variable","msgtype":"m.text"},"ts":1602693119000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oh, great! I'm here all for that.","msgtype":"m.text"},"ts":1602693121000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"shu ^","msgtype":"m.text"},"ts":1602693124000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"Bakkot ...read my mind.","msgtype":"m.text"},"ts":1602693178000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1602693178000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"wfm, but removal still seems easier","msgtype":"m.text"},"ts":1602693216000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"while that's an easy fix for the test part of it, it's still misleading given its file name, where it is in the test directory hierarchy","msgtype":"m.text"},"ts":1602693258000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: rwaldron-: devsnek: i recall you discussing this earlier. i didn't find a PR to change the spec so i opened one: https://github.com/tc39/ecma262/pull/2205","msgtype":"m.text"},"ts":1602697498000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu awww man. I think jugglinmike wanted to work on that.","msgtype":"m.text"},"ts":1602697549000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"No worries, I'll have him take a look at it","msgtype":"m.text"},"ts":1602697562000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"oh even better, i'm happy to let him take the lead there","msgtype":"m.text"},"ts":1602697673000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm not sure when he planned on getting to it, but I'll have him take a look at what you've written so far and see if he has anything more to add to the conversation.","msgtype":"m.text"},"ts":1602697750000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"shu I was mistaken, that's not the spec bug Mike wanted to work on","msgtype":"m.text"},"ts":1602698734000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1602698993000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu I've reworked the indirect eval test cases so that they: a) have valid info/description, b) test something that doesn't penalize V8 for having a valid extension (the arguments object)","msgtype":"m.text"},"ts":1602699192000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: excellent, thanks for the quick action here","msgtype":"m.text"},"ts":1602699243000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1602699248000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"What's the status of \"Item Method\"? I wrote tests when it reached Stage 3, but that seems to be in jeopardy. Has there been any discussion or agreement on a renaming yet? I can get the tests updated quickly once I have that info","msgtype":"m.text"},"ts":1602700452000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: i plan to present at the next meeting to rename to `at`, open to bikeshedding","msgtype":"m.text"},"ts":1602700491000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Oh, nice! \"at\" was my favorite of the new options.","msgtype":"m.text"},"ts":1602700511000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"rwaldron-: the YUI3 breakage is the nail in the coffin for the `item` name. i'll make a thread about it now, i haven't done that yet...","msgtype":"m.text"},"ts":1602700512000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Yeah, def agree with that.","msgtype":"m.text"},"ts":1602700522000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"When should the tests be updated? After next meeting, if there is agreement to the rename?","msgtype":"m.text"},"ts":1602700549000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"for now folks can skiplist them easily, by ignoring test/built-ins/*/prototype/item","msgtype":"m.text"},"ts":1602700600000,"senderName":"rwaldron-","senderId":"rwaldron-@irc"},
{"content":{"body":"heh it's a breaking change for a presentation I gave and used the steps from Array#item as the example","msgtype":"m.text"},"ts":1602700665000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"well, .at() seems pretty good too","msgtype":"m.text"},"ts":1602700676000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"rwaldron-: definitely don't rename until after the meeting, yeah","msgtype":"m.text"},"ts":1602701061000,"senderName":"shu","senderId":"shu@irc"}
]