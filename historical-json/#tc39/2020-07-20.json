[
{"content":{"body":"jmdyck: Bakkot: copypasta, let me change now","msgtype":"m.text"},"ts":1595212562000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hm, there is some precedent for this, like `thisStringValue` having `<dfn id=\"sec-thisstringvalue\">`","msgtype":"m.text"},"ts":1595212679000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that's kinda unfortunate","msgtype":"m.text"},"ts":1595212687000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: do `<dfn>`s take oldids=?","msgtype":"m.text"},"ts":1595212707000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not sure, let me check","msgtype":"m.text"},"ts":1595212729000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: should, based on impl","msgtype":"m.text"},"ts":1595212770000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm not adding oldids to the ones i just introduced but for the older ones, we should keep the oldids","msgtype":"m.text"},"ts":1595212781000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"okay great","msgtype":"m.text"},"ts":1595212783000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, tested experimentally","msgtype":"m.text"},"ts":1595212865000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's kind of funny actually; the oldids will link directly to the definition, rather than (as is normal for dnfs) the containing section","msgtype":"m.text"},"ts":1595212912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2103","msgtype":"m.text"},"ts":1595213097000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"off","msgtype":"m.emote"},"ts":1595213100000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"everybody ready for today?","msgtype":"m.text"},"ts":1595244753000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"https://youtu.be/jxi0ETwDvws?t=116","msgtype":"m.text"},"ts":1595244757000,"senderName":"ystartsev","senderId":"ystartsev@irc"},
{"content":{"body":"i suppose i did know this already, but i'm very surprised that optional chains aren't valid assignment targets","msgtype":"m.text"},"ts":1595250608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: hi - looking at https://github.com/tc39/ecma262/pull/2045, it seems very likely to land. Is that right?","msgtype":"m.text"},"ts":1595256984000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"devsnek: i think there was some back and forth and it was dropped in ancient times due to back and forth","msgtype":"m.text"},"ts":1595258292000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ya","msgtype":"m.text"},"ts":1595258315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ystartsev: that channel has a lot of programming related music videos","msgtype":"m.text"},"ts":1595258340000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i asked people at godaddy about if they wanted it and the overwelming majority wanted if (z) x.y = z rather than that","msgtype":"m.text"},"ts":1595258342000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i am knowledgeable of that, but in the moment of writing code i just naturally did `a?.b = c` and then was sad when it failed","msgtype":"m.text"},"ts":1595258350000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"isn't that `??=`","msgtype":"m.text"},"ts":1595258370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or just `||=`","msgtype":"m.text"},"ts":1595258374000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jorendorff: there're still some work not done, including old ids and some review ExEBoss rises I'll handle them tomorrow","msgtype":"m.text"},"ts":1595258385000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"oh no i guess that's the inverse","msgtype":"m.text"},"ts":1595258390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jackworks: yep -- it all looks good","msgtype":"m.text"},"ts":1595258415000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i just wanted to make sure i'm not missing anything","msgtype":"m.text"},"ts":1595258446000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: afaik all the editors are on board with the concept; it may need some more tweaks, and it’ll need review (but that will likely be after plenary)","msgtype":"m.text"},"ts":1595262072000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ok, thanks. that makes sense.","msgtype":"m.text"},"ts":1595262102000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yeah I haven't gotten a chance to review the PR itself and so can't say if the current form works, but I still agree with the plan we talked about during last meeting","msgtype":"m.text"},"ts":1595262127000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jorendorff: the hope is to find some balance between “converting none of the existing iterator-producers” and “converting all of them” that both convinces us it’s viable and also doesn’t make jackworks do too much work :-)","msgtype":"m.text"},"ts":1595262151000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: Ah, I see. Thanks for the extra context. Does this imply trying to change the prototype chains of the existing iterator-producers?","msgtype":"m.text"},"ts":1595262284000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"I don't think so; I am pretty sure when we discussed this at the last meeting we said that the point of this effort was strictly editorial improvement for specifying iterators","msgtype":"m.text"},"ts":1595262412000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I am in general not in favor of making normative decisions for editorial reasons","msgtype":"m.text"},"ts":1595262444000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jorendorff: no, it very much implies not doing that, since that'd be observable :-)","msgtype":"m.text"},"ts":1595264223000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"OK, good","msgtype":"m.text"},"ts":1595264232000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"bterlson: I love your social isolation hair style","msgtype":"m.text"},"ts":1595265014000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: lol thanks","msgtype":"m.text"},"ts":1595265294000,"senderName":"bterlson","senderId":"bterlson@irc"},
{"content":{"body":"how would people people want to spec export/import wildcards regarding arbitrary binding name strings, currently we use a special string: \"*default*\" , but that would be valid in https://github.com/bmeck/proposal-arbitrary-module-namespace-identifiers , so need to alter on a type somehow so it isn't a string","msgtype":"m.text"},"ts":1595271450000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"same for \"*\"","msgtype":"m.text"},"ts":1595271518000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"we could spec it using symbols as special well known values?","msgtype":"m.text"},"ts":1595271568000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"or use tilde-values?","msgtype":"m.text"},"ts":1595271599000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: i guess we could, seems a bit odd to mix string and tilde values in a list","msgtype":"m.text"},"ts":1595271742000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"can we refactor this https://gc.gy/62976763.png","msgtype":"m.text"},"ts":1595271766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: sounds like a question for #tc39-editor-group","msgtype":"m.text"},"ts":1595271779000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I think we could use a spec enum value for it","msgtype":"m.text"},"ts":1595271786000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"devsnek: refactor how?","msgtype":"m.text"},"ts":1595271809000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"can move it there","msgtype":"m.text"},"ts":1595271815000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"don't need nested if statements i don't think","msgtype":"m.text"},"ts":1595271817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: might push this up in a minute https://gc.gy/62976833.png","msgtype":"m.text"},"ts":1595271840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: a spec enum makes sense to me","msgtype":"m.text"},"ts":1595271874000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu:","msgtype":"m.text"},"ts":1595271946000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I don't have a motivation for disallowing","msgtype":"m.text"},"ts":1595271953000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I'm just addressing a point that came out from the proposal issues, and my preference is to not disallow","msgtype":"m.text"},"ts":1595271982000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it's too specific and disallowing might involve some tricky change in the grammar to also extend DecimalLiteral in Annex B","msgtype":"m.text"},"ts":1595272018000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"so if you don't see enough motivation, I'm totally onboard with you","msgtype":"m.text"},"ts":1595272037000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: yeah it just seems like more work to me","msgtype":"m.text"},"ts":1595272047000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"leobalter: since as you said exponential parts have been allowed forever, and that's the same kind of weirdness","msgtype":"m.text"},"ts":1595272065000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so if we can't disallow all weirdness, it seems worse to me to bless some subset of weirdness and say \"okay these weird things are allowed, but new weird things aren't allowed\", if we don't expect people to use the feature anyhow","msgtype":"m.text"},"ts":1595272100000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"all other things being equal, that is, like implementation and spec burden","msgtype":"m.text"},"ts":1595272109000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in this case it seems like they are?","msgtype":"m.text"},"ts":1595272114000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the flip side is maybe if we allow it it's likely to be implemented wrong?","msgtype":"m.text"},"ts":1595272167000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like, in the parser when you start parsing a legacy nonoctal you'll pass some flag that says \"separators not allowed\" which might get accidentally propagated to the part after `.` or `e`, but that's a pretty weak argument","msgtype":"m.text"},"ts":1595272214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but given that it's all implemented already...","msgtype":"m.text"},"ts":1595272252000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"we also have \"*namespace*\"","msgtype":"m.text"},"ts":1595272294000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I checked the history: that elseless-if-within-if goes back to a late draft of ES6. It seems like there's never been a reason for it.","msgtype":"m.text"},"ts":1595272322000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"shu I created a new slide I'll show during the continuation: https://docs.google.com/presentation/d/1J-oYbstZX2W0LCIVtKG4XbTxWe3cH8JoWNGnoL2F-94/edit#slide=id.g8c6affb1a1_0_50","msgtype":"m.text"},"ts":1595272346000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ljharb: https://travis-ci.org/github/tc39/ecma262/jobs/710124061","msgtype":"m.text"},"ts":1595272364000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's weird that I'm presenting a proposal that my goal is to reject it :)","msgtype":"m.text"},"ts":1595272369000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"jmdyck: thx, made pr https://github.com/tc39/ecma262/pull/2105","msgtype":"m.text"},"ts":1595272378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: :highfive: more or less","msgtype":"m.text"},"ts":1595272384000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1595272385000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: that happens when the PR has too many commits, but i deployed a service fix for it an hour ago. rerunning.","msgtype":"m.text"},"ts":1595272443000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i mean its only got 1 commit","msgtype":"m.text"},"ts":1595272467000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(once I can come up with a rationale for how things are then I feel less strongly about changing them, I suppose)","msgtype":"m.text"},"ts":1595272472000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: I made a suggestion on 2105, and gh gives me an option to \"Commit suggestion\", which I don't think I've seen before.","msgtype":"m.text"},"ts":1595272561000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: hm, if it fails again i'll reach out to my contact at Begin","msgtype":"m.text"},"ts":1595272566000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"jmdyck: if it works go for it","msgtype":"m.text"},"ts":1595272574000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: it's supposed to always be there","msgtype":"m.text"},"ts":1595272579000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://gc.gy/62977581.png","msgtype":"m.text"},"ts":1595272582000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when i try to use it","msgtype":"m.text"},"ts":1595272588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a bug on github; if the suggestion is from someone with write access, you can't accept it","msgtype":"m.text"},"ts":1595272607000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"incredible","msgtype":"m.text"},"ts":1595272621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Oh, I see it when people make suggs on *my* PRs, but this is my sugg on someone else's PR.","msgtype":"m.text"},"ts":1595272643000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what happens if you click it","msgtype":"m.text"},"ts":1595272657000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"let's see....","msgtype":"m.text"},"ts":1595272669000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and try to commit it","msgtype":"m.text"},"ts":1595272671000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that bug has been plaguing us forever 😭","msgtype":"m.text"},"ts":1595272678000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"jmdyck: iirc you have write access on 262, so you *should* have write access on all PR branches too","msgtype":"m.text"},"ts":1595272693000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do i have write access to 262?","msgtype":"m.text"},"ts":1595272731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Got the same old \"This diff has recently been updated. Refresh and try again.\"","msgtype":"m.text"},"ts":1595272757000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: afaik no","msgtype":"m.text"},"ts":1595272780000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: build issue is fixed, job passed on rerun","msgtype":"m.text"},"ts":1595274795000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1595274830000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: we've had consensus for this one, right? https://github.com/tc39/test262/issues/2653","msgtype":"m.text"},"ts":1595276567000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: yep! :D","msgtype":"m.text"},"ts":1595276592000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if we have do expressions do we need static constructors","msgtype":"m.text"},"ts":1595285732000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yes, for anything in the block that's not setting up a field","msgtype":"m.text"},"ts":1595285913000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like if it wants to put a data property on the prototype, or to defineProperty something","msgtype":"m.text"},"ts":1595285931000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: why can't you do that in a do expression","msgtype":"m.text"},"ts":1595285972000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because the do expression would still have to be assigned to a class field, and you may not want one?","msgtype":"m.text"},"ts":1595286090000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1595286106000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where else would you put a do expression except in the RHS of a class field","msgtype":"m.text"},"ts":1595286117000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: const X = do { create class here }","msgtype":"m.text"},"ts":1595286132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or let X I guess","msgtype":"m.text"},"ts":1595286146000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why are class declarations mutable anyway","msgtype":"m.text"},"ts":1595286154000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: that wouldn't provide access to private fields outside the class body.","msgtype":"m.text"},"ts":1595289561000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"though private declarations would!","msgtype":"m.text"},"ts":1595289582000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which we should do anyway","msgtype":"m.text"},"ts":1595289586000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]