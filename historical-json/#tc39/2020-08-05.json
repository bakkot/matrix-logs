[
{"content":{"body":"so you're thinking of a grammar parameter that doesn't affect the grammar at all, it's just there to convey some info to a deep node?","msgtype":"m.text"},"ts":1596585637000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"grammar parameter doesn't seem like the way to go to me","msgtype":"m.text"},"ts":1596585741000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I would just spell it out in prose","msgtype":"m.text"},"ts":1596585752000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not sure how to spell it out with prose","msgtype":"m.text"},"ts":1596585848000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"same as it is now?","msgtype":"m.text"},"ts":1596585866000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"evaluate script except make sure that isProtoSetter is false\"?","msgtype":"m.text"},"ts":1596585877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck i'm working on moving __proto__ into the main spec","msgtype":"m.text"},"ts":1596585891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"except that in the semantics for PropertyDefinitionEvaluation of PropertyDefinition : PropertyName `:` AssignmentExpression steps 3 and 4 are replaced by 1. Let _isProtoSetter_ be *false*\"","msgtype":"m.text"},"ts":1596585907000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1596585909000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"scary","msgtype":"m.text"},"ts":1596585914000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1596585925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"link to PR?","msgtype":"m.text"},"ts":1596585936000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"what if i added a new definition for  PropertyDefinition : __proto__ : AssignmentExpression","msgtype":"m.text"},"ts":1596585940000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then in the actual algorithm add a subsequent step which says `1. Note: the above steps are replaced during JSON.parse`","msgtype":"m.text"},"ts":1596585940000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i haven't uploaded it yet","msgtype":"m.text"},"ts":1596585946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1596585949000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"going to in a minute","msgtype":"m.text"},"ts":1596585954000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the \"Replaced by\" thing is a thing we already do elsewhere","msgtype":"m.text"},"ts":1596585970000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"see e.g. https://tc39.es/ecma262/#sec-built-in-function-objects-construct-argumentslist-newtarget","msgtype":"m.text"},"ts":1596585972000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's one of the things ecmarkup now explicitly supports","msgtype":"m.text"},"ts":1596585991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unfortunate but ok","msgtype":"m.text"},"ts":1596585995000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(well, the reference to steps, anyway)","msgtype":"m.text"},"ts":1596586002000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you maybe don't need an \"is replaced by\" thing","msgtype":"m.text"},"ts":1596586106000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"wait, __proto__ in main spec, but it's still 'normative optional'?","msgtype":"m.text"},"ts":1596586179000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1596586232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, then I should probably wait to see","msgtype":"m.text"},"ts":1596586249000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"here https://github.com/tc39/ecma262/pull/2125","msgtype":"m.text"},"ts":1596586252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jmdyck: to be clear, the syntax __proto__ is required","msgtype":"m.text"},"ts":1596586263000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the accessor __proto__ is optional","msgtype":"m.text"},"ts":1596586272000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"inconsistent whether hyphen between '__proto__' and 'is-proto-setter-true'","msgtype":"m.text"},"ts":1596586433000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ref has it, def doesn't","msgtype":"m.text"},"ts":1596586448000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Also, step-ids usually start with \"step-\". (Not sure if ecmarkup complains if they don't.)","msgtype":"m.text"},"ts":1596586513000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(or is it ecmarkdown)","msgtype":"m.text"},"ts":1596586529000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ecmarkuparound","msgtype":"m.text"},"ts":1596586557000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, i understand original the question now.","msgtype":"m.text"},"ts":1596586602000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"idk how i'm going to implement this \"replace step\" thing in engine262 😢","msgtype":"m.text"},"ts":1596586655000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`globalThis.dontproto = 1`","msgtype":"m.text"},"ts":1596586669000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i have a different suggestion","msgtype":"m.text"},"ts":1596586680000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1596586693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it'll take me a while to get the wording","msgtype":"m.text"},"ts":1596586723000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no rush","msgtype":"m.text"},"ts":1596586729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"In the alg, start the new code with a step something like: If this |PropertyDefinition| is within a |Script| that is being evaluated for JSON.parse (see \"step-json-parse-parse\"), then \\n Let _isProtoSetter_ be *false*.","msgtype":"m.text"},"ts":1596587116000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1596587138000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there's a sliver of precedent for the wording","msgtype":"m.text"},"ts":1596587171000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-resolvebinding step 3","msgtype":"m.text"},"ts":1596587203000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i hate that","msgtype":"m.text"},"ts":1596587208000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1596587214000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"we need to get rid of that","msgtype":"m.text"},"ts":1596587216000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is there a way to build without the linter","msgtype":"m.text"},"ts":1596587339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just omit --lint-spec","msgtype":"m.text"},"ts":1596587354000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`npm run build-only` will do it","msgtype":"m.text"},"ts":1596587369000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1596587373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"next version of ecmarkup will be a little more helpful in telling you the options you want","msgtype":"m.text"},"ts":1596587421000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Well, if you figure out a nice way to \"get rid of that\", you can apply it my suggestion.","msgtype":"m.text"},"ts":1596587449000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i don't have a better suggestion","msgtype":"m.text"},"ts":1596587463000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we should make emu-xref self closing","msgtype":"m.text"},"ts":1596587510000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't think we can. ad hoc elements can't be.","msgtype":"m.text"},"ts":1596587535000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i mean we can emit them with </emu-xref>","msgtype":"m.text"},"ts":1596587554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but in terms of authoring we could make them self closing","msgtype":"m.text"},"ts":1596587561000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or at least, not in html. spec.html doesn't *have* to be html","msgtype":"m.text"},"ts":1596587562000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"we use an off-the-shelf HTML parser","msgtype":"m.text"},"ts":1596587567000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"don't really want to write my own at the moment","msgtype":"m.text"},"ts":1596587576000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hah, I wrote my own in a few hours when I got tired of the off-the-shelf one.","msgtype":"m.text"},"ts":1596587619000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pr it into ecmarkup","msgtype":"m.text"},"ts":1596587630000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it isn't written in js/ts","msgtype":"m.text"},"ts":1596587645000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also it has to either emit the format jsdom expects or we also have to rewrite jsdom","msgtype":"m.text"},"ts":1596587694000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or at least the relevant bits","msgtype":"m.text"},"ts":1596587700000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or write an adapter I guess","msgtype":"m.text"},"ts":1596587710000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my parser's pretty simple, because spec.html uses a very well-behaved subset of html.","msgtype":"m.text"},"ts":1596587725000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but that's all it has to deal with, so why not?","msgtype":"m.text"},"ts":1596587746000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sounds like my rewrite of engine262","msgtype":"m.text"},"ts":1596587752000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: s/Else, If/Else if/","msgtype":"m.text"},"ts":1596588529000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Also, although I agree you don't need that sentence at [id=\"step-json-parse-parse\"] any more, it might still be helpful to readers to point out that this evaluation is special-cased at <step-link>.","msgtype":"m.text"},"ts":1596589009000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Or maybe not. Maybe I prefer it without.","msgtype":"m.text"},"ts":1596589115000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"is anyone able to review (and hopefully merge) my PR to the TC39 site? It fixes UI bug on mobile that is somewhat unsightly https://github.com/tc39/tc39.github.io/pull/206","msgtype":"m.text"},"ts":1596592665000,"senderName":"DerekNonGeneric","senderId":"DerekNonGeneric@irc"},
{"content":{"body":"is the spec backwards https://gc.gy/64297783.png","msgtype":"m.text"},"ts":1596592791000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fixed it by flipping the alternative parser inside out https://gc.gy/64298329.png","msgtype":"m.text"},"ts":1596593336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mathiasbynens: do you know a good way to map from the unicode property tables in the spec to the unicode-x packages?","msgtype":"m.text"},"ts":1596602663000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for example ID_Start/True -> Binary_Property/ID_Start","msgtype":"m.text"},"ts":1596602688000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://github.com/mathiasbynens/regexpu-core/blob/b031e2721608f517588a97b06f847f015d65bc6d/rewrite-pattern.js#L43-L55","msgtype":"m.text"},"ts":1596603208000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"is it literally just that one ternary","msgtype":"m.text"},"ts":1596603238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, see the surrounding code as well","msgtype":"m.text"},"ts":1596603260000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"this is to go from source text to the unicode-x packages btw, not from the spec tables necessarily (but i suppose that's what you wanted?)","msgtype":"m.text"},"ts":1596603287000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"binary properties are always Binary_Property/*","msgtype":"m.text"},"ts":1596603306000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"well i'm implementing the spec line for line so i end up with the result of UnicodeMatchProperty and UnicodeMatchPropertyValue","msgtype":"m.text"},"ts":1596603337000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"handleLoneUnicodePropertyNameOrValue looks similar though","msgtype":"m.text"},"ts":1596603349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if there's Foo=Bar then you look for `${unalias('Foo')}/${unalias('Bar')}`","msgtype":"m.text"},"ts":1596603363000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"else it's `Baz`, which is `General_Category/Baz`","msgtype":"m.text"},"ts":1596603386000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"or Binary_Property/Baz, right","msgtype":"m.text"},"ts":1596603402000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right that's why you handle those first","msgtype":"m.text"},"ts":1596603413000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: seems to be working, thanks 👍🏻","msgtype":"m.text"},"ts":1596604845000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yay 👍🏻","msgtype":"m.text"},"ts":1596604871000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"although bundling these sets into engine262 may prove to be a problem","msgtype":"m.text"},"ts":1596604897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because of size?","msgtype":"m.text"},"ts":1596605147000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just make it a peerdep or whatever","msgtype":"m.text"},"ts":1596605151000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well i want to use it in browser too","msgtype":"m.text"},"ts":1596605165000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you can load the peerdep when someone asks for it","msgtype":"m.text"},"ts":1596605246000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"trying to build it used 6gb of heap and then crashed 🎉","msgtype":"m.text"},"ts":1596605371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"psh","msgtype":"m.text"},"ts":1596605381000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how do real engines pack this data","msgtype":"m.text"},"ts":1596605392000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as my undergrad algorithms professor liked to say, algorithms are for people who can't order more RAM","msgtype":"m.text"},"ts":1596605407000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bags of holding?","msgtype":"m.text"},"ts":1596605412000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm i guess its just part of icu","msgtype":"m.text"},"ts":1596605546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cat /lib/icu | emscripten","msgtype":"m.text"},"ts":1596605601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh no","msgtype":"m.text"},"ts":1596605607000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/NiceLabs/proposal-arraybuffer-equals","msgtype":"m.text"},"ts":1596638839000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"does anyone interested in champion this? 🤔","msgtype":"m.text"},"ts":1596638866000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: IMO it needs better motivation. a byte-wise comparison of two entire buffers is easy enough to write and doesn't seem very common","msgtype":"m.text"},"ts":1596653046000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i might also be concerned with concurrent access for shared stuff","msgtype":"m.text"},"ts":1596653197000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i assumed it was for ABs, not SABs","msgtype":"m.text"},"ts":1596653283000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that thing ain't gonna work good for SABs","msgtype":"m.text"},"ts":1596653289000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ljharb: https://gc.gy/64358629.png","msgtype":"m.text"},"ts":1596653632000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: lol it’s a start, but I’d really suggest splitting those into a different PR, since i bet it’ll take a bit to workshop that, and to work out Kevin and my disagreement about optionality","msgtype":"m.text"},"ts":1596653700000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how about angled red-and-yellow stripes :P","msgtype":"m.text"},"ts":1596653723000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"now we're talkin","msgtype":"m.text"},"ts":1596653729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't know how to do that but if someone knows how","msgtype":"m.text"},"ts":1596653741000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that sidebar being red/yellow stripes would be awesome","msgtype":"m.text"},"ts":1596653751000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: they're in every engine, if the only thing contentious is the note we put on them then i don't think it needs a separate pr","msgtype":"m.text"},"ts":1596653782000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don’t want bad things required if they can be optional instead, even if everyone ships them already.","msgtype":"m.text"},"ts":1596653846000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so like","msgtype":"m.text"},"ts":1596653901000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would you want to make with statements normative optional","msgtype":"m.text"},"ts":1596653907000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in theory","msgtype":"m.text"},"ts":1596653914000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the ecosystem can rely on the behavior that cannot be removed from engines for compat reasons, we shouldn't take stances on stylistic choices of which API to use","msgtype":"m.text"},"ts":1596653922000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah i mean like","msgtype":"m.text"},"ts":1596653942000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec says the how","msgtype":"m.text"},"ts":1596653946000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not the why","msgtype":"m.text"},"ts":1596653947000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we do take stances on things that break semantic stuff (e.g. document.all typeof and boolean nightmare)","msgtype":"m.text"},"ts":1596654120000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"devsnek: I’m specifically talking about non-grammar","msgtype":"m.text"},"ts":1596654454000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"idk what the difference is","msgtype":"m.text"},"ts":1596654466000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can’t use js to delete the grammar","msgtype":"m.text"},"ts":1596654482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not sure what you mean","msgtype":"m.text"},"ts":1596654495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or polyfill it, etc","msgtype":"m.text"},"ts":1596654495000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the question is not polyfillability","msgtype":"m.text"},"ts":1596654518000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the question is","msgtype":"m.text"},"ts":1596654520000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"is this a thing that is in the js language\"","msgtype":"m.text"},"ts":1596654526000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the reality answer is \"yes\"","msgtype":"m.text"},"ts":1596654530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I’m saying i see syntax and api as different categories","msgtype":"m.text"},"ts":1596654530000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"bradleymeck the stance that we took on document.all was for implementations, not for users","msgtype":"m.text"},"ts":1596654548000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and I’m still skeptical that there’s new code that uses defineGetter and friends","msgtype":"m.text"},"ts":1596654551000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we don't only support new code","msgtype":"m.text"},"ts":1596654567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"1js right?","msgtype":"m.text"},"ts":1596654570000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb I have seen defineGetter incode written within the last six months on web properties","msgtype":"m.text"},"ts":1596654596000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i'd agree with that statement but we likely wouldn't have said anything about style","msgtype":"m.text"},"ts":1596654601000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"1js gets invoked arbitrarily. it didn’t make Module and Script unambiguous, E.G.","msgtype":"m.text"},"ts":1596654615000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the point was document.all semantics are problematic but needed to be explained","msgtype":"m.text"},"ts":1596654618000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Bakkot: what for?","msgtype":"m.text"},"ts":1596654623000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb defining a getter?","msgtype":"m.text"},"ts":1596654630000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: like why couldn’t they rely on the syntax form, or O.dP","msgtype":"m.text"},"ts":1596654640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they could have but they didn't","msgtype":"m.text"},"ts":1596654645000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"welcome to javascript","msgtype":"m.text"},"ts":1596654648000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you’re saying it’s an education problem then that imo supports my position","msgtype":"m.text"},"ts":1596654655000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"people use bad things until they learn it’s bad. signals in the spec help with that. annex b helps with that","msgtype":"m.text"},"ts":1596654677000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am saying that __defineGetter__ will be with us forever","msgtype":"m.text"},"ts":1596654697000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and no implementation intending to run existing JS can avoid shipping it","msgtype":"m.text"},"ts":1596654710000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so we should not make it optional","msgtype":"m.text"},"ts":1596654720000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I also disagree with the idea that the spec should be used for this kind of pedagogy. I do not think people who are putting __defineGetter__ in new code are reading the spec.","msgtype":"m.text"},"ts":1596654751000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I’m not convinced that’s true.","msgtype":"m.text"},"ts":1596654754000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"node is trying to remove the proto mutator, for example","msgtype":"m.text"},"ts":1596654769000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(and yes, they won’t read the spec, but all the articles they read, if any, will be informed by it)","msgtype":"m.text"},"ts":1596654787000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"at the expense of breaking a bunch of code, which they're willing to do","msgtype":"m.text"},"ts":1596654794000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and being optional affords them that leeway to experiment","msgtype":"m.text"},"ts":1596654811000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to be clear large swaths of the ecosystem stop working when you get rid of __proto__","msgtype":"m.text"},"ts":1596654817000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the most downloaded package on npm uses __proto__","msgtype":"m.text"},"ts":1596654823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they can do that experiment whether or not it is optional","msgtype":"m.text"},"ts":1596654844000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"no they can’t","msgtype":"m.text"},"ts":1596654849000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes they can?","msgtype":"m.text"},"ts":1596654852000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1596654852000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or rather, not without being out of compliance","msgtype":"m.text"},"ts":1596654862000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1596654865000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which they can do","msgtype":"m.text"},"ts":1596654866000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i have zero cares for an engine that’s out of compliance","msgtype":"m.text"},"ts":1596654869000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"with zero cost","msgtype":"m.text"},"ts":1596654870000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1596654872000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what i care about is that they can experiment while remaining in compliance","msgtype":"m.text"},"ts":1596654879000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tbh your prioritize seem... extremely... bad.","msgtype":"m.text"},"ts":1596654883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1596654889000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"backwards","msgtype":"m.text"},"ts":1596654895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think we are missing a _lot_ of background assumptions here","msgtype":"m.text"},"ts":1596654905000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like what a spec is for","msgtype":"m.text"},"ts":1596654912000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it matters *a lot* to people what the spec says. I’m not saying the spec shouldn’t conform to reality in the general case, ofc","msgtype":"m.text"},"ts":1596654918000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fwiw ljharb","msgtype":"m.text"},"ts":1596654955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if we're \"experimenting\" we aren't worried about compliance","msgtype":"m.text"},"ts":1596654966000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but for each place where we change the spec to match reality, we should be evaluating what the *ideal* would be, weighing if reality can change to match it or not, and doing the least bad compromise","msgtype":"m.text"},"ts":1596654969000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1596654985000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: i doubt node would remove something by default that’s required by the spec","msgtype":"m.text"},"ts":1596654991000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"reality cannot get rid of __defineGetter__","msgtype":"m.text"},"ts":1596654991000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so, we should match reality","msgtype":"m.text"},"ts":1596654996000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb: we deleted Atomics.wake","msgtype":"m.text"},"ts":1596655001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1596655017000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: I’m not sure that’s true. does xs need it, for example?","msgtype":"m.text"},"ts":1596655034000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"xs has it","msgtype":"m.text"},"ts":1596655042000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb does xs intend to run existing code?","msgtype":"m.text"},"ts":1596655048000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: “reality” isn’t solely defined by the corpus of existing js code imo","msgtype":"m.text"},"ts":1596655051000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb so like.","msgtype":"m.text"},"ts":1596655062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"backing up a step.","msgtype":"m.text"},"ts":1596655064000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1596655067000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: not sure what you mean about Atomics.wake","msgtype":"m.text"},"ts":1596655076000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"node deleted Atomics.wake before it was removed from the spec","msgtype":"m.text"},"ts":1596655098000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as part of a semver major cycle","msgtype":"m.text"},"ts":1596655114000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1596655118000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because reality said it was being changed to notify","msgtype":"m.text"},"ts":1596655136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so, anticipating an upcoming change","msgtype":"m.text"},"ts":1596655147000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I’m not being super pedantic here about “compliance”","msgtype":"m.text"},"ts":1596655154000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"although i'm noticing that firefox still has Atomics.wake present","msgtype":"m.text"},"ts":1596655169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if something isn’t expected to be non-required, then i would not expect node to ever remove it by default","msgtype":"m.text"},"ts":1596655170000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb your stance appears to be \"I personally would prefer people not use this widely-implemented thing, whose use has no negative security implications, so we should not make it normatively required\". I disagree with this entire category of argument.","msgtype":"m.text"},"ts":1596655220000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I do not think that argument is relevant, at all, to whether something should be normatively required.","msgtype":"m.text"},"ts":1596655237000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to be clear, we're marking __proto__ optional because of security, not because we dislike it","msgtype":"m.text"},"ts":1596655259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek right, that's the point of that qualification","msgtype":"m.text"},"ts":1596655272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: i think that “would this have ever been in the language if it had gone through a proper design process” is a reasonable question to ask when considering optionality","msgtype":"m.text"},"ts":1596655303000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am fine with keeping the __proto__ setter normative optional","msgtype":"m.text"},"ts":1596655303000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb why?","msgtype":"m.text"},"ts":1596655308000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"because history, intention, and design matter when looking at usability and thinking about users?","msgtype":"m.text"},"ts":1596655345000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they do, this is why mdn has a big red box at the top of the __defineSetter__ page","msgtype":"m.text"},"ts":1596655363000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don’t think it is appropriate or sufficient to only consider spec versus reality here, I’m concerned about users’ mental models","msgtype":"m.text"},"ts":1596655378000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but that doesn't have any bearing on the specifics of how __defineSetter__ is implemented","msgtype":"m.text"},"ts":1596655382000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those things matter when communicating to users which parts of the language they should use, but that is not what we are discussing. we are discussing what things in the spec are optional for implementations.","msgtype":"m.text"},"ts":1596655415000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: and I’m glad we’re retaining that big red box in the spec when moving it out of annex b (making it more explicit, even)","msgtype":"m.text"},"ts":1596655420000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: i suspect we have different experiences informing how much what the spec says actually matters to inexperienced users","msgtype":"m.text"},"ts":1596655447000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't think anyone here is against a note saying they suck","msgtype":"m.text"},"ts":1596655457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: in my experience, those users don’t read the spec, but they cite it *often* when justifying some decisions","msgtype":"m.text"},"ts":1596655466000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: often because they saw the citation in a book or blog post","msgtype":"m.text"},"ts":1596655481000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if you’ll pardon the term, there is a very objective trickle-down effect that happens from putting discouragements or encouragement in the spec","msgtype":"m.text"},"ts":1596655509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"again, we are discussing which features implementations are permitted to omit, not editorial notes about style preferences","msgtype":"m.text"},"ts":1596655552000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"currently, anything in annex b “might not be there”, and so that leads people to avoid using them. Not all people, surely, but many.","msgtype":"m.text"},"ts":1596655579000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I am happy to have a separate conversation about whether we should annotate the features in the spec we personally dislike with notes saying that","msgtype":"m.text"},"ts":1596655580000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that some of the features are always everywhere doesn’t change the effect.","msgtype":"m.text"},"ts":1596655617000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb those features _will in fact be there_. those people are being _misled_ by the spec's current totally false implication that they might not","msgtype":"m.text"},"ts":1596655633000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am strongly opposed to this philosophy of lies-to-children as a principle guiding normative decisions about what is in the spec","msgtype":"m.text"},"ts":1596655649000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yes, misled to everyone’s benefit","msgtype":"m.text"},"ts":1596655649000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not that i want to mislead people","msgtype":"m.text"},"ts":1596655664000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but my priority is the outcome","msgtype":"m.text"},"ts":1596655669000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not sure what this has to do with the normative requirements of the spec","msgtype":"m.text"},"ts":1596655710000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I am unwilling to lie to people just to get them to stop using a feature I dislike which has no negative security consequences.","msgtype":"m.text"},"ts":1596655735000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think the spec should do so either.","msgtype":"m.text"},"ts":1596655747000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"especially since the spec is also used by implementors.","msgtype":"m.text"},"ts":1596655758000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the point of the spec is to clearly communicate the requirements of an implementation to someone making an implementation","msgtype":"m.text"},"ts":1596655845000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reading backlog: strong agreement with Bakkot here","msgtype":"m.text"},"ts":1596656492000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah, I think that's well-conveyed: it is an implementation guide, not a usage guide","msgtype":"m.text"},"ts":1596656558000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"> I am happy to have a separate conversation about whether we should annotate the features in the spec we personally dislike with notes saying that","msgtype":"m.text"},"ts":1596656574000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"^ i am not. the answer to that is \"no we should not\"","msgtype":"m.text"},"ts":1596656589000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well yeah, obviously the way Bakkot phrased that none of us would be on board with it, myself included","msgtype":"m.text"},"ts":1596657253000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: the spec is very much a usage guide as well, whether that's intended or not","msgtype":"m.text"},"ts":1596657298000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"how is it a usage guide","msgtype":"m.text"},"ts":1596657322000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it just says that things exist","msgtype":"m.text"},"ts":1596657326000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's used as one","msgtype":"m.text"},"ts":1596657326000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and what arguments they take, and what types/shapes those arguments can take","msgtype":"m.text"},"ts":1596657336000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but if a user grabs the spec, wouldn't it just be to prove that, e.g. \"V8 is doing the wrong thing\"?","msgtype":"m.text"},"ts":1596657341000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: link me some examples","msgtype":"m.text"},"ts":1596657350000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: i'm not saying users grab the spec","msgtype":"m.text"},"ts":1596657353000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i'm saying that the things users read are written by people who cite the spec (and nobody looks up the citations)","msgtype":"m.text"},"ts":1596657367000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: off the top of my head i don't have any, but i will do so when i find some.","msgtype":"m.text"},"ts":1596657380000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: the majority of my opinion here is from many, many years of helping inexperienced JS programmers on IRC","msgtype":"m.text"},"ts":1596657396000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't understand what advice can be offered by reading the spec","msgtype":"m.text"},"ts":1596657426000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and the increased popularity of transpilation, and \"compat tables\" and whatnot, mean that average users are much more aware of what's standard and what's not","msgtype":"m.text"},"ts":1596657428000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: devsnek https://twitter.com/rauschma/status/644511281421111296","msgtype":"m.text"},"ts":1596657459000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to name one prominent author.","msgtype":"m.text"},"ts":1596657470000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so one time in 2015 some guy misrepresented annex b","msgtype":"m.text"},"ts":1596657490000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I believe that these people exist. I just do not think this fact should guide normative decisions about what is required.","msgtype":"m.text"},"ts":1596657492000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://twitter.com/phoddie/status/1150911833944907776","msgtype":"m.text"},"ts":1596657493000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: it's not a misrepresentation tho","msgtype":"m.text"},"ts":1596657500000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: that is how it's often been talked about in plenary by various delegates.","msgtype":"m.text"},"ts":1596657509000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's the kind of misconception we're trying to combat by inlining it","msgtype":"m.text"},"ts":1596657519000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Bakkot: i think that's a fine discussion to have","msgtype":"m.text"},"ts":1596657520000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: imo it's not a misconception.","msgtype":"m.text"},"ts":1596657528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it is a misconception","msgtype":"m.text"},"ts":1596657535000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in the tweet you linked","msgtype":"m.text"},"ts":1596657542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"XS found that it couldn't be a useful implementation without implementing those annex b things","msgtype":"m.text"},"ts":1596657554000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"either we are intending to guide usage, in which case we should the conversation about annotating the features in the spec we personally dislike, or we are not. in neither case is the right outcome that we use this input to guide normative decisions in the spec.","msgtype":"m.text"},"ts":1596657561000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in ES5: https://es5.github.io/B.html \"This non-normative annex suggests uniform semantics for such properties without making the properties or their semantics part of this standard.\"","msgtype":"m.text"},"ts":1596657581000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it seem very strange to me to say \"I want to guide usage, but I only want to do so by making normative decisions about what's optional, to the detriment of implementors\"","msgtype":"m.text"},"ts":1596657590000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: guiding usage doesn't require \"personal\" dislike.","msgtype":"m.text"},"ts":1596657592000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb right, that note turned out to be wrong","msgtype":"m.text"},"ts":1596657597000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah that's actually a super helpful point toward promoting that handful including __proto__","msgtype":"m.text"},"ts":1596657606000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: how is it a detriment to implementors for things to be optional?","msgtype":"m.text"},"ts":1596657614000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(that = Peter's tweet)","msgtype":"m.text"},"ts":1596657617000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb because they are in fact not","msgtype":"m.text"},"ts":1596657621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ljharb if you are writing an implementation, and omit __defineGetter__, your implementation will not be able to run the millions of lines of JS which exist","msgtype":"m.text"},"ts":1596657640000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"in fact\" depends on what code is run in the implementation","msgtype":"m.text"},"ts":1596657645000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not every implementation needs to be able to run \"all code in the ecosystem\"","msgtype":"m.text"},"ts":1596657654000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not everything needs to be a JS engine at all!","msgtype":"m.text"},"ts":1596657667000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you can be a different language, that's fine","msgtype":"m.text"},"ts":1596657673000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"however","msgtype":"m.text"},"ts":1596657675000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how much JS code is there that has no browser globals or node modules/require, etc","msgtype":"m.text"},"ts":1596657676000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and that also uses these annex b things","msgtype":"m.text"},"ts":1596657684000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"do you have any defineGetter examples that don't rely on a nonstandard module system, node core modules, browser globals/the DOM, or the ability to have i/o?","msgtype":"m.text"},"ts":1596657729000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what does that have to do with anything","msgtype":"m.text"},"ts":1596657743000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"console.log isn't part of the standard either","msgtype":"m.text"},"ts":1596657744000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it probably should be","msgtype":"m.text"},"ts":1596657761000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that's a separate convo","msgtype":"m.text"},"ts":1596657766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i'm saying that if the argument is \"the spec must have X because everyone defacto has to implement X anyways\" only works if the code in question is actually 262-portable","msgtype":"m.text"},"ts":1596657769000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if it has `window` in it, it's not","msgtype":"m.text"},"ts":1596657776000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"eg","msgtype":"m.text"},"ts":1596657780000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fricking _nashorn_ found they had to add __defineGetter__","msgtype":"m.text"},"ts":1596657796000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ouch","msgtype":"m.text"},"ts":1596657801000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol fair, but any chance that's because nobody in the ecosystem was writing code for nashorn, and they wanted to be able to ride on the back of the existing ecosystem?","msgtype":"m.text"},"ts":1596657836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i don't understand what point you're trying to make","msgtype":"m.text"},"ts":1596657845000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I am sure they did want to ride on the back of the existing ecosystem, and people's experience writing for it! that is the point of using JS instead of a new language in the first place! that is _why we have a standard_!","msgtype":"m.text"},"ts":1596657871000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: i mean the underlying point is that i think that things in annex b carry a connotation of being both deprecated and optional, and for API things, i do not want to lose that without careful consideration.","msgtype":"m.text"},"ts":1596657876000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"nashorn didn't want to create a new ecosystem they wanted to be part of the existing ecosystem\"","msgtype":"m.text"},"ts":1596657881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ugh what bakkot said","msgtype":"m.text"},"ts":1596657889000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: people like using RN and react because the knowledge transfers even though the code largely does not","msgtype":"m.text"},"ts":1596657902000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: you don't need to use *any* specific existing code to have it be useful to have a JS engine.","msgtype":"m.text"},"ts":1596657916000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(obviously the vast majority would be pretty reusable)","msgtype":"m.text"},"ts":1596657939000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but in the RN ecosystem, the packages that are shared between RN and react web are not that plentiful.","msgtype":"m.text"},"ts":1596657958000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and it's still useful that RN is javascript","msgtype":"m.text"},"ts":1596657964000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hermes, an engine written solely for running reactive native, has __defineSetter__","msgtype":"m.text"},"ts":1596658037000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"react native*","msgtype":"m.text"},"ts":1596658048000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: okay. and we're saying your understanding of the connotation is a misconception. arguing here doesn't seem particularly productive because it has mostly been telling of your philosophical disagreement with what a standard ought to do, and what a standards developing organization ought to do, as Bakkot noted earlier","msgtype":"m.text"},"ts":1596658094000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hermes has relatively inconsistent support for parts of the standard, altho it's improving, and it's not clear to me which parts they added for parity with jsc (the previous RN engine) or out of necessity from existing RN code.","msgtype":"m.text"},"ts":1596658106000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: whether it's a misconception is not an objective thing, and i'm not the only one in the committee with it. i agree the philosophical debate isn't likely to be productive.","msgtype":"m.text"},"ts":1596658138000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the philosophical debate is the only relevant debate here","msgtype":"m.text"},"ts":1596658154000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i thought at the october meeting we explicitly came to agreement on how annex b didn't imply the things shouldn't exist and that we should try to reconcile them with the main spec","msgtype":"m.text"},"ts":1596658182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: not implying having misconceptions it not limited to you, no","msgtype":"m.text"},"ts":1596658209000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"devsnek: see the notes, one of the bulletpoints is my explicit objection to indiscriminately hoisting API things out of annex b","msgtype":"m.text"},"ts":1596658211000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oops, too many negations there","msgtype":"m.text"},"ts":1596658220000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"lol i think i know what you meant","msgtype":"m.text"},"ts":1596658226000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right there are things in annex b that would break certain requirements we have of the main spec","msgtype":"m.text"},"ts":1596658235000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like the regex grammar","msgtype":"m.text"},"ts":1596658238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: grammar things i'm on board with hoisting up","msgtype":"m.text"},"ts":1596658248000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb the notes do not in fact say that","msgtype":"m.text"},"ts":1596658252000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: \"For non-grammar, the previous consensus holds but we keep in mind JHD’s request that we clearly mark things that we want to deprecate or discourage, perhaps in prose where Annex B once stood\"","msgtype":"m.text"},"ts":1596658279000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://github.com/tc39/notes/blob/7b2de881081abd34b02bc87bcdb662fd97555795/meetings/2019-10/october-1.md#conclusionresolution-4","msgtype":"m.text"},"ts":1596658283000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1596658286000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ie, plenary only discussed grammar","msgtype":"m.text"},"ts":1596658293000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i.e., you want there to be non-normative notes about things being discouraged","msgtype":"m.text"},"ts":1596658296000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this is very different from \"my explicit objection to indiscriminately hoisting API things out of annex b\"","msgtype":"m.text"},"ts":1596658313000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1596658318000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we did not explicitly discuss whether inlined api things would remain optional","msgtype":"m.text"},"ts":1596658330000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the implication to me was that most things would remain optional","msgtype":"m.text"},"ts":1596658337000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"either way the only thing we had consensus for, and the only thing the agenda item was about, was annex b grammar","msgtype":"m.text"},"ts":1596658353000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm not against things being optional","msgtype":"m.text"},"ts":1596658383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"__proto__ is optional","msgtype":"m.text"},"ts":1596658385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but optional requires a good reason","msgtype":"m.text"},"ts":1596658391000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"anyway, let me repeat myself above. my stance continues to be: either we are intending to guide style, in which case we should have the conversation about annotating all the features in the spec we personally dislike, or we are not, in which case it is absurd to say that something should be normative optional because we want people not to use it.","msgtype":"m.text"},"ts":1596658430000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"change requires consensus. all things in annex b are already optional.","msgtype":"m.text"},"ts":1596658433000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: you keep saying \"personally\" dislike","msgtype":"m.text"},"ts":1596658446000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: that's a strawman","msgtype":"m.text"},"ts":1596658450000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: we could annotate things the *committee* dislikes, sure. which we already do.","msgtype":"m.text"},"ts":1596658464000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"just not everything.","msgtype":"m.text"},"ts":1596658467000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb uh","msgtype":"m.text"},"ts":1596658468000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we definitely have not taken a vote on whether we subjectively like __defineGetter__","msgtype":"m.text"},"ts":1596658488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what i mean is, \"personally\" implies that individuals get to stamp their individual dislike on things","msgtype":"m.text"},"ts":1596658499000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"which obv is not what anyone would want","msgtype":"m.text"},"ts":1596658504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that seems to be what you've been arguing","msgtype":"m.text"},"ts":1596658513000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, s/personally/collectively/, whatever","msgtype":"m.text"},"ts":1596658513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: then i've done a bad job of expressing my points","msgtype":"m.text"},"ts":1596658530000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"my stance continues to be: either we are intending to guide style, in which case we should have the conversation about annotating all the features in the spec we collectively dislike, or we are not, in which case it is absurd to say that something should be normative optional because we want people not to use it.","msgtype":"m.text"},"ts":1596658549000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"everything in annex b is already specifically optional, and \"being in annex b\" already conveys \"deprecated\"","msgtype":"m.text"},"ts":1596658557000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a PR is editorial if it doesn't change the former (and possibly the latter, but we already seem to have consensus on adding the latter explicitly when inlining). it's normative if it does change the former, and we'd need consensus on that.","msgtype":"m.text"},"ts":1596658588000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and we have evidence that for implementations, __defineSetter__ is not actually optional","msgtype":"m.text"},"ts":1596658594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i see no evidence that it being optional has been a detriment, though","msgtype":"m.text"},"ts":1596658619000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its detrimental to existence of the spec","msgtype":"m.text"},"ts":1596658636000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec's reason for existing","msgtype":"m.text"},"ts":1596658643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is to tell implementers what they need to do","msgtype":"m.text"},"ts":1596658650000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if it doesn't do that it is failing","msgtype":"m.text"},"ts":1596658654000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it is detrimental to lie to people because we want other people not to use a feature because we think it's stylistically bad","msgtype":"m.text"},"ts":1596658659000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and everyone implemented it already, so it seems that the spec making it optional hasn't stopped anyone from doing what they need to do","msgtype":"m.text"},"ts":1596658670000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there continue to be new implementations with surprising frequency","msgtype":"m.text"},"ts":1596658681000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there has also been anecdotes of implementations learning, the hard way, that they have to implement it, like in nashorn and hermes?","msgtype":"m.text"},"ts":1596658695000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"then there should be lots of examples of where it was a huge inconvenience/disruption for these things to be marked as optional","msgtype":"m.text"},"ts":1596658702000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"every time one of those happens those people end up finding out, usually the hard way, that the spec is lying to them","msgtype":"m.text"},"ts":1596658702000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shu: \"hermes has it\" isn't that; nashorn \"having to add it\" is indeed such an anecdote","msgtype":"m.text"},"ts":1596658722000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb I ran into this _perrsonally_!","msgtype":"m.text"},"ts":1596658725000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"on?","msgtype":"m.text"},"ts":1596658730000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I maintain a JS engine for my company!","msgtype":"m.text"},"ts":1596658731000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"when I wrote it the first time it did not get annex B right because I didn't know it was important!","msgtype":"m.text"},"ts":1596658745000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, so you built the engine without annex b, and how quickly ran into problems?","msgtype":"m.text"},"ts":1596658760000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the reproduction code for the function name issue used __lookupSetter__","msgtype":"m.text"},"ts":1596658763000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i couldn't run it in engine262","msgtype":"m.text"},"ts":1596658766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"it wasn't right the first time\" is not really a reliable rubric for good code :-p","msgtype":"m.text"},"ts":1596658776000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1596658782000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I gotta walk away from this conversation, I'm sorry.","msgtype":"m.text"},"ts":1596658791000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's *the* rubric for the spec","msgtype":"m.text"},"ts":1596658792000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you directly refusing to acknowledge implementers' lived experience?","msgtype":"m.text"},"ts":1596658798000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean like, was it exceedingly more difficult to implement annex b because you didn't realize at the beginning that you had to implement it","msgtype":"m.text"},"ts":1596658806000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am baffled","msgtype":"m.text"},"ts":1596658806000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: no, i'm trying to understand it","msgtype":"m.text"},"ts":1596658810000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i am seeing no evidence of that","msgtype":"m.text"},"ts":1596658816000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: so far what i'm hearing is \"i didn't know i needed it, so i didn't build it. then i found out, and built it\"","msgtype":"m.text"},"ts":1596658825000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a bunch of implementers said \"this was confusing\" and you're saying \"lol thats not so bad\"","msgtype":"m.text"},"ts":1596658840000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Bakkot and you have said you found it so, totally. please link me to examples of others?","msgtype":"m.text"},"ts":1596658871000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you linked one of xs","msgtype":"m.text"},"ts":1596658880000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu shared the one about nashorn","msgtype":"m.text"},"ts":1596658882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not trying to marginalize those two examples, i'm just trying to understand them","msgtype":"m.text"},"ts":1596658883000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the xs one doesn't say anything about confusion","msgtype":"m.text"},"ts":1596658897000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot shared the one about nashorn, not me","msgtype":"m.text"},"ts":1596658897000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's just a statement of fact about which subset of annex b xs implements","msgtype":"m.text"},"ts":1596658904000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: the understanding is that you take them at face value, in that one of the central points of a standard is to facilitate ease of entry into the market for newcomers","msgtype":"m.text"},"ts":1596658928000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"engines make mistakes in implementations all the time, i don't see \"i didn't do it right the first time\" as evidence of confusion","msgtype":"m.text"},"ts":1596658930000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or rather, as strong evidence of it","msgtype":"m.text"},"ts":1596658941000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and here are people trying to enter the market place, and found out the standard did not facilitate that as well as it could have","msgtype":"m.text"},"ts":1596658943000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i understand that","msgtype":"m.text"},"ts":1596658951000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it is not for you to dismiss them and say \"they didn't do it right the first time\"?","msgtype":"m.text"},"ts":1596658961000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"because they did -- the standard says it's optional","msgtype":"m.text"},"ts":1596658967000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm not trying to dismiss anything","msgtype":"m.text"},"ts":1596658967000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the market says it is not","msgtype":"m.text"},"ts":1596658972000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think that case can be made for individual parts of annex b, but not for all of it as a whole. i'm convinced of it with proto, and i'm not convinced with the defineGetter family.","msgtype":"m.text"},"ts":1596659088000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what would it take for you to be convinced","msgtype":"m.text"},"ts":1596659125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a reasonable question to ask and i'll try to come up with an answer for it","msgtype":"m.text"},"ts":1596659168000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fwiw every non-browser js engine i'm aware of implements __defineGetter__ and co","msgtype":"m.text"},"ts":1596659177000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually i take that back i found one, espruino","msgtype":"m.text"},"ts":1596659241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i would certainly be interested to see examples of code that has been unchanged for long enough that it won't likely ever be updated, uses defineGetter and friends, and isn't part of a website.","msgtype":"m.text"},"ts":1596659308000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"any new code using it is pretty likely to be easily updated to use defineProperty","msgtype":"m.text"},"ts":1596659331000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why should it be updated","msgtype":"m.text"},"ts":1596659341000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right now? because it's depending on optional parts of the spec.","msgtype":"m.text"},"ts":1596659374000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but every js engine supports it","msgtype":"m.text"},"ts":1596659408000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and it has no security issue","msgtype":"m.text"},"ts":1596659411000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec doesn't mention security issues either","msgtype":"m.text"},"ts":1596659418000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right but we change the spec to deal with security issues","msgtype":"m.text"},"ts":1596659435000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"\"every engine supports an optional thing\" doesn't make it a safe thing to rely on forever, since it's optional","msgtype":"m.text"},"ts":1596659440000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"for example SharedArrayBuffer global being optional","msgtype":"m.text"},"ts":1596659448000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, which means that you can never safely write code that depends on it being present","msgtype":"m.text"},"ts":1596659465000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"normal humans don't care what the spec says, they care if their code runs","msgtype":"m.text"},"ts":1596659468000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that such code may exist doesn't force us to make it required","msgtype":"m.text"},"ts":1596659472000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"either we are intending to guide style, in which case we should have the conversation about annotating all the features in the spec we collectively dislike, or we are not, in which case it is absurd to say that something should be normative optional because we want people not to use it. normative optionality is not the correct tool to guide style.","msgtype":"m.text"},"ts":1596660378000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we should not lie to implementors about whether they need to implement something in order to run JS as it exists just because we want users not to use a feature. that is contrary to the core purpose of having a standard.","msgtype":"m.text"},"ts":1596660421000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1596660799000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"weakref are merged","msgtype":"m.text"},"ts":1596663882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"js is finally good","msgtype":"m.text"},"ts":1596663889000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: \"Let agentRecord be the surrounding agent's Agent Record\"","msgtype":"m.text"},"ts":1596664295000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this seems.... not right?","msgtype":"m.text"},"ts":1596664303000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the weakrefs PR?","msgtype":"m.text"},"ts":1596664334000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait did this add a new thing","msgtype":"m.text"},"ts":1596664343000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"cc shu/Bakkot re the weakrefs PR ^","msgtype":"m.text"},"ts":1596664355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no i guess it just","msgtype":"m.text"},"ts":1596664378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess this isn't wrong","msgtype":"m.text"},"ts":1596664396000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"unexpected change though","msgtype":"m.text"},"ts":1596664400000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: why does that seem not right?","msgtype":"m.text"},"ts":1596664444000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it seemed not right before i realized there was a refactoring to make it right","msgtype":"m.text"},"ts":1596664464000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"%WeakRef% and %FinalizationRegistry% aren't in the intrinsics table","msgtype":"m.text"},"ts":1596665051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"whoops","msgtype":"m.text"},"ts":1596665177000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'll put up a PR to add them","msgtype":"m.text"},"ts":1596665181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/ecma262/pull/2126","msgtype":"m.text"},"ts":1596665460000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"when did the whole \"agent record\" thing happen","msgtype":"m.text"},"ts":1596665594000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: https://github.com/tc39/ecma262/pull/522 ?","msgtype":"m.text"},"ts":1596665793000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"reminder that https://searchfox.org/ecma262/source/spec.html","msgtype":"m.text"},"ts":1596665817000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the hell","msgtype":"m.text"},"ts":1596665883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how did i never notice that agent records are a thing","msgtype":"m.text"},"ts":1596665897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they must have been secret agent records","msgtype":"m.text"},"ts":1596665933000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"… i'll show myself out","msgtype":"m.text"},"ts":1596665937000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wow you made jmdyck leave","msgtype":"m.text"},"ts":1596665956000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1596666465000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the new native function matcher test takes like 10 minutes to run in engine262","msgtype":"m.text"},"ts":1596667368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"big speed","msgtype":"m.text"},"ts":1596667369000,"senderName":"devsnek","senderId":"devsnek@irc"}
]