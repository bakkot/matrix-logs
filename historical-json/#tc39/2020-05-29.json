[
{"content":{"body":"shu: do weakrefs allow finalizers on the value of a private field if there is no references to the private identifier anymore?","msgtype":"m.text"},"ts":1590759769000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"e.g. `function hmmm(a) { class O { #a; constructor(a) {this.#a = a;} }; return new O(a); }` would that prevent `a` from having finalizers run?","msgtype":"m.text"},"ts":1590759858000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"would s/that/the return value/","msgtype":"m.text"},"ts":1590759887000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I guess that sort of requires treating private symbols like ephemerons","msgtype":"m.text"},"ts":1590762785000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm completely fine with it never running finalizers personally","msgtype":"m.text"},"ts":1590762893000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i just am struggling to understand this situation","msgtype":"m.text"},"ts":1590762911000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if a private field is created but there are no references around to observe it did it ever really happen","msgtype":"m.text"},"ts":1590762955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well it is `unreachable` isn't super clearly defined","msgtype":"m.text"},"ts":1590763048000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"bradleymeck: not sure i understand","msgtype":"m.text"},"ts":1590763969000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"bradleymeck: what value is the finalized registered to in the example, a?","msgtype":"m.text"},"ts":1590763990000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: so if I have an Object `a` and it has a private field `#foo`","msgtype":"m.text"},"ts":1590764004000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if `a.#foo` is no longer reachable since all code that has the identifier `#foo` in scope has been collected, can you collect `a.#foo`/run its finalizer","msgtype":"m.text"},"ts":1590764055000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"this was brought up when discussing symbols in weak collections yesterday in Realms call @_o","msgtype":"m.text"},"ts":1590764103000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1590764108000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that depends on the optimizations an engine does around private fields","msgtype":"m.text"},"ts":1590764130000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"seems to reduce to escape analysis in general, so unlikely to be done in the interpreter and baseline tiers","msgtype":"m.text"},"ts":1590764201000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'd agree there, just more trying to see if it was prohibited for some reason","msgtype":"m.text"},"ts":1590764202000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"no not prohibited","msgtype":"m.text"},"ts":1590764209000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1590764212000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"just seems unlikely to happen in practice to me","msgtype":"m.text"},"ts":1590764221000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"question re TemplateCharacter :: `\\` NotEscapeSequence","msgtype":"m.text"},"ts":1590769531000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"There are early error rules that disallow it in untagged TemplateLiterals, but it's allowed in tagged TemplateLiterals, right?","msgtype":"m.text"},"ts":1590769660000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1590769674000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"per https://github.com/tc39/proposal-template-literal-revision","msgtype":"m.text"},"ts":1590769689000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/per/as a consequence of/","msgtype":"m.text"},"ts":1590769696000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"good consequences","msgtype":"m.text"},"ts":1590769790000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ok, so the TV of `\\` NotEscapeSequence is *undefined*, and that'll come up when you invoke TemplateStrings with _raw_ = *false*, right?","msgtype":"m.text"},"ts":1590769858000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sounds right to me","msgtype":"m.text"},"ts":1590769901000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"So in GetTemplateObject, an element of _cookedStrings_ might be *undefined*?","msgtype":"m.text"},"ts":1590769938000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1590769945000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's observable in userland, even:","msgtype":"m.text"},"ts":1590769951000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it also says \"Let _cookedValue_ be the String value _cookedStrings_[_index_].\"","msgtype":"m.text"},"ts":1590769964000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"console.log`\\x` is an array with `0` element `undefined`","msgtype":"m.text"},"ts":1590769967000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, yup, looks like that is stale","msgtype":"m.text"},"ts":1590770008000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is a String or `undefined`","msgtype":"m.text"},"ts":1590770017000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably easier to just say `be cookedStrings[index]`, and not assert on the type","msgtype":"m.text"},"ts":1590770031000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1590770041000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"this was an oversight in https://github.com/tc39/ecma262/pull/773, looks like","msgtype":"m.text"},"ts":1590770063000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"nice catch","msgtype":"m.text"},"ts":1590770074000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i should figure out a nice way to put those assertions in engine262","msgtype":"m.text"},"ts":1590770136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"someday we'll build type checking into the CI","msgtype":"m.text"},"ts":1590770156000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"probably not this year, hopefully this decade","msgtype":"m.text"},"ts":1590770162000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it would catch so many editorial bugs","msgtype":"m.text"},"ts":1590770168000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: are you inclined to make the PR fixing the above? I'll do it if not.","msgtype":"m.text"},"ts":1590770197000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Yeah, I can do it some time today.","msgtype":"m.text"},"ts":1590770224000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sweet, thanks","msgtype":"m.text"},"ts":1590770232000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"My static type checking exploded in TemplateStrings, which led me (eventually) to that step in GetTemplateObject","msgtype":"m.text"},"ts":1590770336000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jorendorff: re your slides, v8's opinion was that using generators would be the same or faster, not the same or slower","msgtype":"m.text"},"ts":1590775334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, i'll edit that out before the presentation","msgtype":"m.text"},"ts":1590775357000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"thanks for the feedback","msgtype":"m.text"},"ts":1590775365000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"well if other engines have concerns it could be slower that's useful too","msgtype":"m.text"},"ts":1590775371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just want to make sure we have all the info","msgtype":"m.text"},"ts":1590775378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I just deleted it. I noticed that the screenshot I have of your sketch of option 3 has a typo","msgtype":"m.text"},"ts":1590781625000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"typo?","msgtype":"m.text"},"ts":1590781644000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: step 3 calls %SyncMap% with one this-value and one argument, but %SyncMap% takes two positional arguments, no this","msgtype":"m.text"},"ts":1590781658000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"doesn't it do \"IteratorHelperStart\" or something","msgtype":"m.text"},"ts":1590781686000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, it does","msgtype":"m.text"},"ts":1590781702000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"then that could work! no worries","msgtype":"m.text"},"ts":1590781732000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm imagining that calls the generator and skips next()","msgtype":"m.text"},"ts":1590781736000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I was imagining that it would call .next() once on the generator, yes","msgtype":"m.text"},"ts":1590781791000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"and discard the result","msgtype":"m.text"},"ts":1590781816000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1590781827000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i don't understand yet why it's helpful to have the arguments in a different form","msgtype":"m.text"},"ts":1590781829000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"than, say, Call()","msgtype":"m.text"},"ts":1590781840000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1590781842000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the this value isn't used","msgtype":"m.text"},"ts":1590781847000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"IteratorHelperStart doesn't technically exist yet so we are free to do whatever we want","msgtype":"m.text"},"ts":1590781879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, i agree","msgtype":"m.text"},"ts":1590781890000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"this can definitely be made to work","msgtype":"m.text"},"ts":1590781897000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"wow, PR 1519 is a blast from the past. Took me a while to page that all back in.","msgtype":"m.text"},"ts":1590786316000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yup!","msgtype":"m.text"},"ts":1590787671000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I'm trying to get some of the older outstanding ones in","msgtype":"m.text"},"ts":1590787679000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Particularly since we might restructure a bunch of stuff as a consequence of https://github.com/tc39/ecma262/issues/1950","msgtype":"m.text"},"ts":1590787700000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1590787833000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"any idea of when 1950 might land?","msgtype":"m.text"},"ts":1590787899000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"we're going to talk about it at the meeting next week, to give the delegates the opportunity to raise objections, and then it will depend on one of us having the time to do the work","msgtype":"m.text"},"ts":1590788044000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, and there's a few more details to work out","msgtype":"m.text"},"ts":1590788050000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g. I think it might make sense to keep Evaluation and Early Errors together with the grammar, as they currently are","msgtype":"m.text"},"ts":1590788083000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i wish they were grouped together","msgtype":"m.text"},"ts":1590788111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its impossible to find early errors","msgtype":"m.text"},"ts":1590788118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1590788126000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Does grouping them make it any easier?","msgtype":"m.text"},"ts":1590788137000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the only way to find an early error if you don't know the exact prose","msgtype":"m.text"},"ts":1590788150000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"My thinking was, at least for Evaluation, you want to be able to click on a production to see how it evaluates","msgtype":"m.text"},"ts":1590788156000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is to grep through every single early error section","msgtype":"m.text"},"ts":1590788159000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, right, but is that... any harder than scrolling through all of them in one place?","msgtype":"m.text"},"ts":1590788183000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"always just C-f \"Semantics: Early\" and then C-g across all of the sections","msgtype":"m.text"},"ts":1590788202000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think scrolling through a single section would be any easier than that","msgtype":"m.text"},"ts":1590788211000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think the problem rn is","msgtype":"m.text"},"ts":1590788249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they seem to be written by people who already know what they are","msgtype":"m.text"},"ts":1590788271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for someone reading the spec to try to figure out what semantics need to be applied, it is very difficult","msgtype":"m.text"},"ts":1590788292000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"grouping would help with this, you think?","msgtype":"m.text"},"ts":1590788357000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think it would be a good first step","msgtype":"m.text"},"ts":1590788387000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not sure i have a perfect solution","msgtype":"m.text"},"ts":1590788393000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot:  https://github.com/tc39/ecma262/pull/2022 has the cookedStrings fix.","msgtype":"m.text"},"ts":1590790311000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(and others)","msgtype":"m.text"},"ts":1590790322000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re 1590: if you keep Evaluation together  with the grammar, would you also keep things like NamedEvaluation and LabelledEvaluation?","msgtype":"m.text"},"ts":1590790635000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek, when you say \"grouped\", you mean \"close to the corresponding grammar\"?","msgtype":"m.text"},"ts":1590790768000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i meant have one section for all the early error stuff","msgtype":"m.text"},"ts":1590790786000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, ok.","msgtype":"m.text"},"ts":1590790800000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Maybe, after each chunk of defining grammar (or after each production? hm), there could be a list of SDOs that are defined on those productions, and clicking the SDO-name would take you to the appropriate portion of that SDO's section.","msgtype":"m.text"},"ts":1590791265000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(You'd want the list generated automatically, presumably.)","msgtype":"m.text"},"ts":1590791318000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm, named evaluation is interesting","msgtype":"m.text"},"ts":1590791411000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, I think it might make more sense to have backreferences","msgtype":"m.text"},"ts":1590791425000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I could also probably get `evaluating |Production|`  to link to the right place","msgtype":"m.text"},"ts":1590791439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(That should maybe be re-cast into a proper SDO-call.)","msgtype":"m.text"},"ts":1590791478000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Maybe. It does read nicely, currently.","msgtype":"m.text"},"ts":1590791600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck: re: 1950, another consideration is that https://github.com/tc39/ecma262/pull/2007 almost certainly needs to land first","msgtype":"m.text"},"ts":1590791897000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"since it is a pretty pervasive change","msgtype":"m.text"},"ts":1590791911000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1590791951000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(I am assuming that 545 won't be too hard to rebase, since it's automatically generated, but let me know if this is not so.)","msgtype":"m.text"},"ts":1590792039000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, i think it'll be okay.","msgtype":"m.text"},"ts":1590792173000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]