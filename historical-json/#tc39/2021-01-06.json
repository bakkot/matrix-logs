[
{"content":{"body":"having 'for of'  expression alternative. e.g. python list comprehension. Combined with the await.all proposal. That could give some nice syntax for starting a set of tasks off in parallel.","msgtype":"m.text"},"ts":1609964488000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"though this might be exactly what ljharb suggested and I just didn't follow","msgtype":"m.text"},"ts":1609964541000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"it is","msgtype":"m.text"},"ts":1609964821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the point was raised that itâ€™d only work if return/continue/break/yield were banned within it","msgtype":"m.text"},"ts":1609964836000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"to be able to use await for inside each iteration without blocking the loop. would there still be a 'do async' block","msgtype":"m.text"},"ts":1609968607000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"for (const x of it) do async { ... }","msgtype":"m.text"},"ts":1609968635000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"i am hoping to bring `async do` at the next meeting, which would let you do that, yeah","msgtype":"m.text"},"ts":1609968668000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but you still couldn't use `return`/`break`/`continue`/`yield`","msgtype":"m.text"},"ts":1609968699000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(you won't be able to use those instead of any `async do` block)","msgtype":"m.text"},"ts":1609968711000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right. because they would only have a chance to do something before hitting the first await","msgtype":"m.text"},"ts":1609968828000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"and would be odd to only allow 'break' before the await","msgtype":"m.text"},"ts":1609968842000,"senderName":"aclaymore","senderId":"aclaymore@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1609968846000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: are you okay with the subarray thing following 2221 or did you want it to be tacked on?","msgtype":"m.text"},"ts":1609971210000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's otherwise ready to go","msgtype":"m.text"},"ts":1609971215000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"new PR seems fine","msgtype":"m.text"},"ts":1609971302000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i want to get michael's stamp on 2221 before landing it; will pester him today","msgtype":"m.text"},"ts":1609971324000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: okay, so the %TA%#subarray thing seems straight up wrong","msgtype":"m.text"},"ts":1609971457000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it looks like whenever detach checks were added and the RequireInternalSlot(O, [[TypedArrayName]]) steps were replaced with ValidateTypedArray(O), subarray was missed","msgtype":"m.text"},"ts":1609971518000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"agreed.","msgtype":"m.text"},"ts":1609971604000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://twitter.com/ktemkin/status/1346734616749563905","msgtype":"m.text"},"ts":1609971956000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"gotta use this tweet in half of my tc39 presentations","msgtype":"m.text"},"ts":1609971972000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1609971988000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: Bakkot: hmm, actually, i don't know anymore","msgtype":"m.text"},"ts":1609972022000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"all subarray does before calling TypedArraySpeciesConstruct() is to determine the arguments to pass to the constructor","msgtype":"m.text"},"ts":1609972072000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"since it's an aliased view, not a copy, no bytes in the buffer are actually accessed","msgtype":"m.text"},"ts":1609972085000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah but regardless of the original state of things, it should've been included in https://github.com/tc39/ecma262/pull/2207","msgtype":"m.text"},"ts":1609972143000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"since it's using [[ArrayLength]]","msgtype":"m.text"},"ts":1609972183000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"currently, no implementations actually throw if the `this` is initially detached","msgtype":"m.text"},"ts":1609972274000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"all web engines throw at the species construct","msgtype":"m.text"},"ts":1609972282000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i agree it's problematic that it's accessing [[ArrayLength]], however","msgtype":"m.text"},"ts":1609972298000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not sure how to best fix this -- perhaps we add a shortcircuit path that calls the constructor with some default arguments?","msgtype":"m.text"},"ts":1609972353000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i am not at all concerned that with the right subclass constructor the arguments are actually observable currently, since i'm trying to kill species","msgtype":"m.text"},"ts":1609972387000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ah hm","msgtype":"m.text"},"ts":1609972762000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if not detached [[ArrayLength]] else 0?","msgtype":"m.text"},"ts":1609972789000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: something like that, yes","msgtype":"m.text"},"ts":1609973112000,"senderName":"shu","senderId":"shu@irc"}
]