[
{"content":{"body":"If the magic 360 library is a paid library, does it possible to contact the team? Because users have to pay to use the library so the team must have a list of their clients","msgtype":"m.text"},"ts":1601598917000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"jackworks: Mozilla and Google have reached out","msgtype":"m.text"},"ts":1601602172000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Cool","msgtype":"m.text"},"ts":1601603134000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"rickbutton: btw the current logic in the spec text considers `#[0]` and `#[-0]` equal but not `#[#[0]]` and `#[#[-0]]`","msgtype":"m.text"},"ts":1601613868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you sure?","msgtype":"m.text"},"ts":1601615107000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"SameValueZero -> TupleSameValueZero","msgtype":"m.text"},"ts":1601615107000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"for each element:","msgtype":"m.text"},"ts":1601615107000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"  SameValueZero -> TupleSameValueZero","msgtype":"m.text"},"ts":1601615107000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"reads as correct to me, but also it is late","msgtype":"m.text"},"ts":1601615118000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: nvm there was a typo :P sorry","msgtype":"m.text"},"ts":1601615175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"u good :)","msgtype":"m.text"},"ts":1601615185000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":" is the Tuple(len) override for compat with Array(len)?","msgtype":"m.text"},"ts":1601615203000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like something worth getting rid of","msgtype":"m.text"},"ts":1601615213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah it was originally for symmetry, we have a PR to get rid of it: https://github.com/tc39/proposal-record-tuple/pull/173","msgtype":"m.text"},"ts":1601615420000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"we haven't made a final decision but I don't think anyone on the champion group has a strong opinion either way","msgtype":"m.text"},"ts":1601615420000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"the Array ctor overload s generally considered to have been a mistake","msgtype":"m.text"},"ts":1601615543000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I am in favor of not repeating it","msgtype":"m.text"},"ts":1601615550000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"slightly more of a mistake than computers themselves","msgtype":"m.text"},"ts":1601615557000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"alternatively, do not allow it to be invoked at all, and instead only allow .of and .from","msgtype":"m.text"},"ts":1601615593000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(this is probably a bad idea)","msgtype":"m.text"},"ts":1601615597000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this has made the very sparse wall of Things I Lack an Opinion On","msgtype":"m.text"},"ts":1601615629000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don't mind very much what Tuple(x) does","msgtype":"m.text"},"ts":1601615640000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as long as it doesn't magically create a tuple of [x] or len x based on the type of x","msgtype":"m.text"},"ts":1601615652000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"how come https://tc39.es/ecma262/#sec-array.prototype-@@unscopables includes, e.g., flatMap but not map?","msgtype":"m.text"},"ts":1601617596000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling because `map` already existed when unscopables was introduced","msgtype":"m.text"},"ts":1601617621000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1601617632000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so someone using `with (arr)` presumably had already accounted for `map`","msgtype":"m.text"},"ts":1601617635000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pretty sure only ES6+ things are unscopables","msgtype":"m.text"},"ts":1601617637000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but presumably had not accounted for `flatMap`, since it didn't exist","msgtype":"m.text"},"ts":1601617659000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my real question: are we supposed to add `item` then?","msgtype":"m.text"},"ts":1601617670000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1601617673000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1601617675000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1601617677000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"any new string-named array prototype property","msgtype":"m.text"},"ts":1601617688000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like it says in the note: The own property names of this object are property names that were not included as standard properties of Array.prototype prior to the ECMAScript 2015 specification","msgtype":"m.text"},"ts":1601617703000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should TypedArray.prototype have it tho?","msgtype":"m.text"},"ts":1601617710000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TA should not have unscopables","msgtype":"m.text"},"ts":1601617721000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"does it?","msgtype":"m.text"},"ts":1601617722000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just Array currently","msgtype":"m.text"},"ts":1601617731000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"good good","msgtype":"m.text"},"ts":1601617736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(TA should, and does, get `.item`, if that was the question)","msgtype":"m.text"},"ts":1601617760000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it doesn't have it","msgtype":"m.text"},"ts":1601617784000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm wondering why it doesn't","msgtype":"m.text"},"ts":1601617786000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TA didn't exist prior to ES2015","msgtype":"m.text"},"ts":1601617801000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there was no back compat to worry about","msgtype":"m.text"},"ts":1601617806000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unscopables is purely a back compat thing, since new code should not have `with`","msgtype":"m.text"},"ts":1601617821000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with considers non-enumerables and non-owns too tho, so why doesn't RegExp, Date, etc have unscopables?","msgtype":"m.text"},"ts":1601617864000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably there was not a concern that anyone was writing `with (regex)`","msgtype":"m.text"},"ts":1601617896000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"or `with (date)`, etc","msgtype":"m.text"},"ts":1601617906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually I don't know if Date or RegEx got any new string-keyed methods","msgtype":"m.text"},"ts":1601617924000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i don't think they did","msgtype":"m.text"},"ts":1601617935000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"RegExp got a ton of new prototype accessors","msgtype":"m.text"},"ts":1601617935000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but i suppose they were owns before","msgtype":"m.text"},"ts":1601617941000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so, .flags, .unicode, .sticky","msgtype":"m.text"},"ts":1601617949000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"String got .matchAll, .includes","msgtype":"m.text"},"ts":1601617960000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah, yeah","msgtype":"m.text"},"ts":1601617973000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so yeah, presumably there was not concern that people were `with`-ing such things","msgtype":"m.text"},"ts":1601617988000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also wouldn't we want to actively prevent someone from doing something bad with `with (promise)` or `with (map)` etc?","msgtype":"m.text"},"ts":1601617989000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"certainly that would be an odd thing to do","msgtype":"m.text"},"ts":1601617995000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right but like, what's the added cost then to including all the unscopables","msgtype":"m.text"},"ts":1601617998000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its assumed that code doing `with (array) {}` exists","msgtype":"m.text"},"ts":1601618012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a bunch of overhead in engines?","msgtype":"m.text"},"ts":1601618012000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it would only slow down code that did the odd things that nobody thinks will ever happen","msgtype":"m.text"},"ts":1601618021000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and adding new methods shouldn't add new variables into those scopes","msgtype":"m.text"},"ts":1601618028000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, it adds to the amount of stuff you need to load into memory when you load the page","msgtype":"m.text"},"ts":1601618037000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's not free","msgtype":"m.text"},"ts":1601618042000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"don't modern engines put everything in .ro_data anyway","msgtype":"m.text"},"ts":1601618062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"until it gets messed with anyway","msgtype":"m.text"},"ts":1601618079000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: i mean, it could be lazy-loaded only when accessed or used with `with`, and if that never happened then, free?","msgtype":"m.text"},"ts":1601618080000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"re: \"wouldn't we want to actively prevent someone from doing something bad with `with (promise)` or `with (map)` etc\" - no? we already have a sensible thing, which is, strict mode prevents you from doing `with`; I don't think we really care to round off sharp edges for people who do that","msgtype":"m.text"},"ts":1601618097000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I don't think lazy-loading was nearly as common a technique when es2015 was introduced","msgtype":"m.text"},"ts":1601618110000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"how is array prototype unscopables not rounding off ♯ edges","msgtype":"m.text"},"ts":1601618115000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"back compat","msgtype":"m.text"},"ts":1601618121000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i think array prototype ones is about not breaking code","msgtype":"m.text"},"ts":1601618131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not \"you might doo something bad\", it's \"we might break the web\"","msgtype":"m.text"},"ts":1601618134000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"very different issue","msgtype":"m.text"},"ts":1601618137000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1601618137000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`with (array) { flatMap(array, x) }`","msgtype":"m.text"},"ts":1601618153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so, we could add them to all the others, and it'd be a cleaner system, and it wouldn't break anyone, but nobody cares because nobody does that?","msgtype":"m.text"},"ts":1601618162000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"sounds right to me","msgtype":"m.text"},"ts":1601618178000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i dunno if i would say cleaner","msgtype":"m.text"},"ts":1601618187000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, yeah, \"cleaner\" is disputable","msgtype":"m.text"},"ts":1601618199000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"already crazy enough that unscopables is an object","msgtype":"m.text"},"ts":1601618207000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, fair","msgtype":"m.text"},"ts":1601618239000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah it's super weird it wasn't just a Set","msgtype":"m.text"},"ts":1601618265000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"eh, object is a reasonable enough choice if you only want string keys","msgtype":"m.text"},"ts":1601618331000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sets get weird - like, does it reach into the slot directly, making Set contents unforgeable? does it invoke the iteration protocol, with all the complexity that entails?","msgtype":"m.text"},"ts":1601618372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm, true","msgtype":"m.text"},"ts":1601618388000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I use Object.create(null) objects rather than sets or maps in some of my performance-sensitive code for that reason, when they suffice","msgtype":"m.text"},"ts":1601618453000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should just be array#includes","msgtype":"m.text"},"ts":1601618454000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"includes performs observable property accesses","msgtype":"m.text"},"ts":1601618478000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1601618486000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1601618490000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess back in 2015 engines didn't really have the optimization layout for making that ok","msgtype":"m.text"},"ts":1601618498000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but today they do","msgtype":"m.text"},"ts":1601618501000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"making use of that here sounds like it would add an extremely nasty code path to an already extremely nasty part of engines","msgtype":"m.text"},"ts":1601618611000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"should've just disabled with in strict and sloppy","msgtype":"m.text"},"ts":1601618682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure the realms polyfill couldn't exist, but i see that as a bonus","msgtype":"m.text"},"ts":1601618693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and `eval` while they were at it, presumably","msgtype":"m.text"},"ts":1601618860000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I used eval in anger this week; it was fun","msgtype":"m.text"},"ts":1601618891000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"makes prototyping a code generator a lot easier","msgtype":"m.text"},"ts":1601618903000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1601618927000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"just mash some strings together and eval it; don't even need to write to disk","msgtype":"m.text"},"ts":1601618932000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i use the vm to get rid of the guilt","msgtype":"m.text"},"ts":1601618955000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gonna switch to constructing and realizing ASTs at some point","msgtype":"m.text"},"ts":1601618957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"vm api*","msgtype":"m.text"},"ts":1601618959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably around the time I switch to doing the code generation in Java","msgtype":"m.text"},"ts":1601618974000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ohno","msgtype":"m.text"},"ts":1601618980000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(the week before that I wrote eval for java! good times, good times.)","msgtype":"m.text"},"ts":1601618989000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(don't worry, it's only used in tests)","msgtype":"m.text"},"ts":1601619018000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"O.o","msgtype":"m.text"},"ts":1601619024000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would not want to work on/in Java","msgtype":"m.text"},"ts":1601619069000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's actually pretty nice!","msgtype":"m.text"},"ts":1601619076000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"must be subjective","msgtype":"m.text"},"ts":1601619095000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i've written java professionally for a few months total, and i doubt anyone would pay me enough to do it again","msgtype":"m.text"},"ts":1601619116000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"has some painful bits, but version 8 and subsequent introduced a lot of nicer parts","msgtype":"m.text"},"ts":1601619118000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we used java in my cs classes","msgtype":"m.text"},"ts":1601619120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"never going back","msgtype":"m.text"},"ts":1601619131000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think java-as-taught-in-cs-class is probably a much worse dialect of the language","msgtype":"m.text"},"ts":1601619174000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"at least i skipped the class where java itself was the subject","msgtype":"m.text"},"ts":1601619213000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably the worst thing was failing an assignment because the homework checker didn't support `var`","msgtype":"m.text"},"ts":1601619298000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"heh https://gc.gy/69324339.png","msgtype":"m.text"},"ts":1601619344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"java has lambdas!","msgtype":"m.text"},"ts":1601619372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ya but you have to declare an interface","msgtype":"m.text"},"ts":1601619385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that type is normally spelled `Predicate<Integer>`","msgtype":"m.text"},"ts":1601619399000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I believe it's built in","msgtype":"m.text"},"ts":1601619417000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"shouldn't need to declare it","msgtype":"m.text"},"ts":1601619420000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1601619421000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html","msgtype":"m.text"},"ts":1601619438000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'll remember that if i ever write java ever again :P","msgtype":"m.text"},"ts":1601619440000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1601619457000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]