[
{"content":{"body":"TabAtkins: why do you think proxies result in overloaded = operator?","msgtype":"m.text"},"ts":1549413578000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"`foo.bar = 1` does a specific thing, normally. When a proxy is involved, it instead calls  a user-defined function that can do anything.","msgtype":"m.text"},"ts":1549413624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That seems like the same thing, more or less, as overloading the = operator?","msgtype":"m.text"},"ts":1549413645000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"technically its just always overloaded","msgtype":"m.text"},"ts":1549413865000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"proxies are just another exotic object","msgtype":"m.text"},"ts":1549413875000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I see, I think of that as changing how . works, not =","msgtype":"m.text"},"ts":1549414160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: that's the same for setters tho, right?","msgtype":"m.text"},"ts":1549414160000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"accessors are a subset of object behaviour","msgtype":"m.text"},"ts":1549414260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: yup, same deal","msgtype":"m.text"},"ts":1549416143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: overloading an operator either way, sure","msgtype":"m.text"},"ts":1549416431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"shouldn't this change x, not add a new property to y https://gc.gy/17136350.png","msgtype":"m.text"},"ts":1549431373000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Personally, I could go either way on user-level operator overloading vs adding more built-in types with overloaded operators, but I think TC39 is in a funny middle state where we don't have consensus on the future plans, which makes it hard for CSS units to be ergonomic either one way or the other way","msgtype":"m.text"},"ts":1549458497000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I think allowing hosts to overload is different from JS hooks though, so a 3rd option!","msgtype":"m.text"},"ts":1549463445000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"yeah, that'd be interesting, so we could have Decimal in TC39, CSS units through host hooks, but no JS-defined stuff, and no ability to polyfill those two","msgtype":"m.text"},"ts":1549463497000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"however, when Andrew Paprocki presented on Decimal, some people said, \"this must be through JS-level operator overloading\"","msgtype":"m.text"},"ts":1549463522000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, I wanted to think through what that would mean, to understand whether we should go that way, or one of these other ways","msgtype":"m.text"},"ts":1549463540000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i don't think host hooks would be a practical solution, at least thinking of the relationship between chromium and v8","msgtype":"m.text"},"ts":1549463920000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably worse than a pure js api","msgtype":"m.text"},"ts":1549463942000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"littledan: lots of people want to keep virtualization ;p","msgtype":"m.text"},"ts":1549464205000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'm also hopeful that now that v8 is working on a jitless mode there will be more focus on how things impact pure interpreters","msgtype":"m.text"},"ts":1549464279000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: I think my operator overloading proposal should be good with virtualization. Do you see problems?","msgtype":"m.text"},"ts":1549465833000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"at the same time, you can't write your own Number or BigInt today, so I don't understand what the argument is that you must be able to write your own Decimal if it exists","msgtype":"m.text"},"ts":1549465869000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: nope, but the virtualization invalidates a lot of my stuff around minification XD","msgtype":"m.text"},"ts":1549465873000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"which stuff?","msgtype":"m.text"},"ts":1549465884000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"folding +b into a number then making other things folded based upon that","msgtype":"m.text"},"ts":1549465909000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"like `typeof +b`","msgtype":"m.text"},"ts":1549465915000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"idk if unary plus actually is overloadable in your proposal (goes to check)","msgtype":"m.text"},"ts":1549465991000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"unary plus has to throw if ToNumber fails","msgtype":"m.text"},"ts":1549467921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for asm.js reasons","msgtype":"m.text"},"ts":1549467923000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1549467925000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So what are your thoughts on forkable generators? Generators that you could shallow-clone and re-enter from a saved state? I'm thinking of things like encoding decision trees for user actions. In case you're curious, I've got a quick little strawman proposal I scrapped together: https://github.com/isiahmeadows/proposal-generator-fork","msgtype":"m.text"},"ts":1549480682000,"senderName":"isiahmeadows","senderId":"isiahmeadows@irc"},
{"content":{"body":"mmm, continuations :P","msgtype":"m.text"},"ts":1549481985000,"senderName":"efaust","senderId":"efaust@irc"},
{"content":{"body":"Yeah, that was an inspiration. I just wanted to keep it mutable so it'd integrate a bit better with iteration.","msgtype":"m.text"},"ts":1549482097000,"senderName":"isiahmeadows","senderId":"isiahmeadows@irc"},
{"content":{"body":"isiahmeadows: might be a better thing to suggest to https://github.com/tc39/proposal-iterator-helpers","msgtype":"m.text"},"ts":1549483441000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"a lot of iterator libraries and interfaces already have teeing","msgtype":"m.text"},"ts":1549483450000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not sure if it'd be a good idea to suggest as specifically an extension to `Generator` itself rather than a new subtype of it - not all generators in practice support being split like that.","msgtype":"m.text"},"ts":1549483504000,"senderName":"isiahmeadows","senderId":"isiahmeadows@irc"},
{"content":{"body":"I can certainly file an issue over there, though.","msgtype":"m.text"},"ts":1549483542000,"senderName":"isiahmeadows","senderId":"isiahmeadows@irc"},
{"content":{"body":"the prototype a generator returns can override the base tee method ðŸ¤·","msgtype":"m.text"},"ts":1549483542000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"But what about ensuring side effects in the generator side are repeated?","msgtype":"m.text"},"ts":1549484103000,"senderName":"isiahmeadows","senderId":"isiahmeadows@irc"},
{"content":{"body":"tee though consuming the original/neutering it seems the general approach to avoid some replay confusion, the tee makes a buffered pair of 2 different iterators","msgtype":"m.text"},"ts":1549486227000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"not splitting to replay effects","msgtype":"m.text"},"ts":1549486238000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"}
]