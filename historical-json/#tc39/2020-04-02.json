[
{"content":{"body":"Many SMP code points (surrogate pairs) are already valid in identifiers and strings. Are you talking about lone surrogate code points?","msgtype":"m.text"},"ts":1585786148000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi `\\uLEAD\\uTRAIL` is never legal in an identifier","msgtype":"m.text"},"ts":1585786504000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the grammar allows it but an early error rule forbids it (specifically https://tc39.es/ecma262/#sec-identifier-names-static-semantics-early-errors )","msgtype":"m.text"},"ts":1585786545000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Isn‚Äôt \\uLEAD illegal because LEAD isn‚Äôt a hexadecimal code?","msgtype":"m.text"},"ts":1585786933000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Though I need to reread the spec.","msgtype":"m.text"},"ts":1585786946000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"sorry, that's a shorthand","msgtype":"m.text"},"ts":1585787052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I mean to say that, for example, `\\ud835\\udc9c` is never legal in an identifier","msgtype":"m.text"},"ts":1585787085000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"even though directly using the code point represented by that pair of surrogates, ùíú, is","msgtype":"m.text"},"ts":1585787106000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and we should change that because it's ridiculous","msgtype":"m.text"},"ts":1585787498000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I mean somebody could propose it, and then if it gets blocked as predicted we'd have it on the record :P","msgtype":"m.text"},"ts":1585787740000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's no reason to allow only BMP characters to be escaped in identifiers, who is going to argue for that?","msgtype":"m.text"},"ts":1585787848000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"you can use `\\u{}` to put any code point in an identifier","msgtype":"m.text"},"ts":1585787893000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, any ID_part","msgtype":"m.text"},"ts":1585787902000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so this would just be adding another way to do it","msgtype":"m.text"},"ts":1585787925000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and this way involves surrogate pairs","msgtype":"m.text"},"ts":1585787934000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"which many people want to not put in new places","msgtype":"m.text"},"ts":1585787943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'd be against surrogate pairs in more places","msgtype":"m.text"},"ts":1585788107000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"our language doesn't have to be utf16","msgtype":"m.text"},"ts":1585788118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1585788122000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so with this mental model \\uXXXX is just shorthand for BMP \\u{...}","msgtype":"m.text"},"ts":1585788132000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I wish our language was utf16, but it's not even that","msgtype":"m.text"},"ts":1585788143000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: you're in luck, it's not","msgtype":"m.text"},"ts":1585788145000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"utf16ish","msgtype":"m.text"},"ts":1585788155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i always do the {} when i do that","msgtype":"m.text"},"ts":1585788174000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you use escape sequences in your identifiers?","msgtype":"m.text"},"ts":1585788238000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"in strings sometimes","msgtype":"m.text"},"ts":1585788267000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"never in identifiers","msgtype":"m.text"},"ts":1585788271000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we're just talking about identifiers","msgtype":"m.text"},"ts":1585788296000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"if i did them in identifiers i'd use {} too","msgtype":"m.text"},"ts":1585788316000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"If \\u{} is already legal, then \\u with surrogate pairs should be legal; I think the Unicode Standard is clear about that always being the case, regardless of the particular UTF encoding‚Ä¶","msgtype":"m.text"},"ts":1585788368000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"jschoi: can you point me to any relevant documentation?","msgtype":"m.text"},"ts":1585788391000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"Yeah, I need to check again.","msgtype":"m.text"},"ts":1585788397000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"I‚Äôll let you know if I do.","msgtype":"m.text"},"ts":1585788401000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1585788408000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"That is, I think the Standard says surrogate pairs must always be equivalent to their respective SMP points.","msgtype":"m.text"},"ts":1585788415000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"But I‚Äôll try to find a citation later.","msgtype":"m.text"},"ts":1585788426000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"it may not directly apply to our use of escape sequences, but it will at least be a relevant recommendation","msgtype":"m.text"},"ts":1585788482000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"surrogate pairs aren't legal in this context","msgtype":"m.text"},"ts":1585788544000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they aren't decoded incorrectly","msgtype":"m.text"},"ts":1585788552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're not treated equivalently to the code point itself or the escape sequence for the code point either","msgtype":"m.text"},"ts":1585788600000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1585788617000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if Unicode has a recommendation that they're not to be treated differently, I think it'd be relevant","msgtype":"m.text"},"ts":1585788623000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"don't get me wrong, I support the consistency","msgtype":"m.text"},"ts":1585788630000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i don't think any humans at unicode would want there to be pairs in more places at least","msgtype":"m.text"},"ts":1585788660000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's just that (Unicode-hat) sffc and mathiasbynens expressed opposition to having surrogate pairs valid in more contexts","msgtype":"m.text"},"ts":1585788664000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(whether that's an objection or not)","msgtype":"m.text"},"ts":1585788684000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what happens if you remove an item from an array while doing forEach","msgtype":"m.text"},"ts":1585789308000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think you end up skipping the next element","msgtype":"m.text"},"ts":1585789329000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah that seems right","msgtype":"m.text"},"ts":1585789368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"truth comes out of her well to shame you","msgtype":"m.text"},"ts":1585789372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Do you mean via `splice`?","msgtype":"m.text"},"ts":1585789373000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"Bakkot: uhhhh...","msgtype":"m.text"},"ts":1585789389000,"senderName":"jridgewell","senderId":"jridgewell@irc"},
{"content":{"body":"splice yes","msgtype":"m.text"},"ts":1585789420000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nsfw-ish https://en.wikipedia.org/wiki/Truth_Coming_Out_of_Her_Well","msgtype":"m.text"},"ts":1585789422000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i need to do \"for each item of cells if cell is x then remove cell\"","msgtype":"m.text"},"ts":1585789445000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe filter","msgtype":"m.text"},"ts":1585789456000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"filter wouldn't be too crazy but","msgtype":"m.text"},"ts":1585789467000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that sounds like what filter is for","msgtype":"m.text"},"ts":1585789468000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1585789470000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually no i can't do it in a callback sigh","msgtype":"m.text"},"ts":1585789483000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/53494539.png","msgtype":"m.text"},"ts":1585789543000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what's wrong with a filter?","msgtype":"m.text"},"ts":1585789656000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is Q a macro?","msgtype":"m.text"},"ts":1585789659000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1585789663000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess it must be","msgtype":"m.text"},"ts":1585789665000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1585789668000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it expands to a return","msgtype":"m.text"},"ts":1585789671000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the value is abrupt","msgtype":"m.text"},"ts":1585789677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yay for macros","msgtype":"m.text"},"ts":1585789682000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mhofman: would marking the values of weakmaps fix the problem here?","msgtype":"m.text"},"ts":1585790315000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i feel like that should work but it seems too easy","msgtype":"m.text"},"ts":1585790335000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"(assuming that the key and the value aren't the same object)","msgtype":"m.text"},"ts":1585790349000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then you'd miss a lot of cases where the keys are only accessible through the values","msgtype":"m.text"},"ts":1585790368000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"aka obj1 references obj2, which references obj1, and both are mapping each other in the WeakMap","msgtype":"m.text"},"ts":1585790469000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"cycles are fun :)","msgtype":"m.text"},"ts":1585790495000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"that would leak though, not be collected too soon","msgtype":"m.text"},"ts":1585790539000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1585790545000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"i'm having a hard time thinking of an optimal solution","msgtype":"m.text"},"ts":1585790662000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"WeakMap are hard. I think the approach taken by polyfills is acceptable, even though they also leak, it's less critical","msgtype":"m.text"},"ts":1585790765000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"i can't associate them directly in the way the polyfills do","msgtype":"m.text"},"ts":1585790795000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i don't think...","msgtype":"m.text"},"ts":1585790813000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i still need to have the spec's mapping where the weakmap holds the values","msgtype":"m.text"},"ts":1585790847000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i could just go full ephemeron i guess","msgtype":"m.text"},"ts":1585790947000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm way not familiar with all this, but couldn't you have each ObjectValue keep a Map of WeakMap instances where it's a key to the value it's associated with in those WeakMap?","msgtype":"m.text"},"ts":1585791241000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"oh i just pinged you on the issue with a possible fix lol","msgtype":"m.text"},"ts":1585791258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"after marking just go through the weakmaps again and check their keys and values","msgtype":"m.text"},"ts":1585791273000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's basically going ephemeron ;)","msgtype":"m.text"},"ts":1585791299000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1585791305000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"from what I remember there is some recursion needed when you deal with ephemerons. I believe you may find more WeakMap keys that need be marked","msgtype":"m.text"},"ts":1585791439000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"hmmmmm","msgtype":"m.text"},"ts":1585791503000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I believe the way it could be done is to add the entries of weakmaps to a Map, and everytime you mark a key, you remove the entry and mark the value","msgtype":"m.text"},"ts":1585791709000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"s/Map/queue/","msgtype":"m.text"},"ts":1585791741000,"senderName":"mhofman","senderId":"mhofman@irc"},
{"content":{"body":"yeah that makes sense","msgtype":"m.text"},"ts":1585791921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"michaelficarra: I was mistaken. The Unicode Standard has no normative requirement that surrogate pairs be always interpreted as their respective SMP points regardless of UTF encoding‚Äînor does it seem to normatively prohibit them in non-UTF-16 encodings. It merely says in Definitions 74 and 75 that surrogate pairs are designed for use in UTF-16.","msgtype":"m.text"},"ts":1585792952000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"aww that's too bad jschoi","msgtype":"m.text"},"ts":1585793061000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"I probably won't bring forward a proposal to change identifier then, if it's going to get pushback","msgtype":"m.text"},"ts":1585793094000,"senderName":"michaelficarra","senderId":"michaelficarra@irc"},
{"content":{"body":"ljharb: very exciting that es2017 was finally released :P","msgtype":"m.text"},"ts":1585797421000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1585797515000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's no way to make a release silently ¬Ø\\_(„ÉÑ)_/¬Ø","msgtype":"m.text"},"ts":1585797528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hm looks like 1892 needs some fixes.","msgtype":"m.text"},"ts":1585800330000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sorry, 1869.","msgtype":"m.text"},"ts":1585800339000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: tldr?","msgtype":"m.text"},"ts":1585800359000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm cutting the spec as we speak, so time's a factor :-)","msgtype":"m.text"},"ts":1585800373000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'll see what I can do.","msgtype":"m.text"},"ts":1585800395000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1585800416000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh, I missed the [U] flags on the LHSes in the early error rules","msgtype":"m.text"},"ts":1585800589000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I never remember to look for the flags there","msgtype":"m.text"},"ts":1585800595000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the RHSes too I guess","msgtype":"m.text"},"ts":1585800600000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bah","msgtype":"m.text"},"ts":1585800601000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's what I get for writing spec when tired","msgtype":"m.text"},"ts":1585800607000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and not just early error rules","msgtype":"m.text"},"ts":1585800704000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"k well hopefully the PR gets up and gets a review or two tonight, and i'll cut a spec in the morning","msgtype":"m.text"},"ts":1585800719000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the other SDOs too, yeah","msgtype":"m.text"},"ts":1585800787000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someday we will have a linter which will stop me from shooting myself in the foot","msgtype":"m.text"},"ts":1585800913000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"someday","msgtype":"m.text"},"ts":1585800914000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck is it just the stray flags?","msgtype":"m.text"},"ts":1585800918000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I can make a PR for that right now if you're busy","msgtype":"m.text"},"ts":1585800925000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's all i've found so far, but i'm not finished.","msgtype":"m.text"},"ts":1585800941000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(flags = gram parameters)","msgtype":"m.text"},"ts":1585800957000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1585801045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh that's very soon","msgtype":"m.text"},"ts":1585801546000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: littledan: would be nice to get this figured out https://github.com/tc39/ecma262/commit/c59502090e2c250cd7e457b5506b92db6b21d153#diff-3540caefa502006d8a33cb1385720803R7599","msgtype":"m.text"},"ts":1585801548000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, finished analysis, starting pr","msgtype":"m.text"},"ts":1585801784000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/1929","msgtype":"m.text"},"ts":1585802200000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck thanks!","msgtype":"m.text"},"ts":1585802446000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yw","msgtype":"m.text"},"ts":1585802453000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"can someone archive the import.meta repo","msgtype":"m.text"},"ts":1585805494000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I believe the PR that was merged preserves the invariants that were there before. If you want to add additional invariants, that seems like a good topic for a separate PR.","msgtype":"m.text"},"ts":1585826697000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: job records had realm and scriptormodule which was used when creating the context in RunJobs","msgtype":"m.text"},"ts":1585833591000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: OK, do you think there were any invariants attached to those record fields that we've removed?","msgtype":"m.text"},"ts":1585834297000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I think the record fields were removed because they were unused, so I don't really understand the issue","msgtype":"m.text"},"ts":1585834317000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: they were used to set the correct realm and scriptormodule","msgtype":"m.text"},"ts":1585834334000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in EnqueueJob it would grab them from the current execution context","msgtype":"m.text"},"ts":1585834429000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and operations in the spec fail if those slots aren't correctly set","msgtype":"m.text"},"ts":1585834457000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, they were recorded there. Are you taking the descriptions in table 25 as normative?","msgtype":"m.text"},"ts":1585834464000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I thought it ended up being more up to the embedder to use them","msgtype":"m.text"},"ts":1585834481000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not aware of anything that made RunJobs non normative","msgtype":"m.text"},"ts":1585834531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wasn't the whole problem that RunJobs was normative but no one implemented the RunJobs loop","msgtype":"m.text"},"ts":1585834572000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right, RunJobs was \"dead spec\" in HTML, unfortunately","msgtype":"m.text"},"ts":1585834648000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, the version of the patch that I produced preserved the job records, based on my understanding of TC39 consensus. The editor group decided that it would be OK to remove the job record. I'd follow up with them here.","msgtype":"m.text"},"ts":1585834694000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but regardless of how people treated that section it correctly described how to set up the context and now we don't have that","msgtype":"m.text"},"ts":1585834714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'll open an issue or something I guess","msgtype":"m.text"},"ts":1585834733000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, so I proposed that we preserve that setup","msgtype":"m.text"},"ts":1585834979000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"an issue sounds like a good place to follow up","msgtype":"m.text"},"ts":1585834991000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"i'm not understanding what makes that normative","msgtype":"m.text"},"ts":1585840389000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: what","msgtype":"m.text"},"ts":1585840424000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: the contextorrealm stuff for job records","msgtype":"m.text"},"ts":1585840451000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it was normative because it was in the spec and it wasn't normative optional","msgtype":"m.text"},"ts":1585840473000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually even normative optional stuff is normative","msgtype":"m.text"},"ts":1585840484000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if you wanted to queue a promise job the spec defined how to queue and run them using RunJobs","msgtype":"m.text"},"ts":1585840505000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it wasn't normative in practice?","msgtype":"m.text"},"ts":1585841739000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not only was it not used by upstream specs, it was willfully violated by html, as dan said","msgtype":"m.text"},"ts":1585841775000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the loop wasn't but how to run an individual job definitely was","msgtype":"m.text"},"ts":1585841780000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my point is just that we went from the spec correctly saying how to run a job to the spec not correctly saying how to run a job","msgtype":"m.text"},"ts":1585841855000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what are we saying incorrectly now?","msgtype":"m.text"},"ts":1585843796000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean the realms that were used for promises were in fact not correct before, for html","msgtype":"m.text"},"ts":1585843817000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: all engines implemented context setup correctly as RunJobs specified","msgtype":"m.text"},"ts":1585843916000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and still do","msgtype":"m.text"},"ts":1585843919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"RunJobs wasn't used?","msgtype":"m.text"},"ts":1585843946000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm confused","msgtype":"m.text"},"ts":1585843948000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what does it mean to implement dead code correctly","msgtype":"m.text"},"ts":1585843961000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the logic within run jobs","msgtype":"m.text"},"ts":1585843971000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the active realm when a promise job is queued","msgtype":"m.text"},"ts":1585843984000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's up to the host","msgtype":"m.text"},"ts":1585843992000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"needs to be the active realm when the job is run","msgtype":"m.text"},"ts":1585843993000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and all the implementations do that correctly","msgtype":"m.text"},"ts":1585844007000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as far as i know","msgtype":"m.text"},"ts":1585844010000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but we don't specify it","msgtype":"m.text"},"ts":1585844021000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd be happy to look at a PR","msgtype":"m.text"},"ts":1585844090000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"hard for me to understand what exactly is incorrect in deleted dead code","msgtype":"m.text"},"ts":1585844109000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the deleted dead code was correct","msgtype":"m.text"},"ts":1585844222000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aside from the loop","msgtype":"m.text"},"ts":1585844228000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can make a pr i suppose","msgtype":"m.text"},"ts":1585844236000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"correctness of dead code is just not a well-formed thing, i really don't understand what that means","msgtype":"m.text"},"ts":1585844309000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"implementations that weren't browsers","msgtype":"m.text"},"ts":1585844365000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and didn't ignore runjobs","msgtype":"m.text"},"ts":1585844371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least didn't ignore it as much as html did","msgtype":"m.text"},"ts":1585844383000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"would get a correct implementation of ecmascript by using the steps within the run jobs loop","msgtype":"m.text"},"ts":1585844394000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they will not get a correct implementation of ecmascript by using the description currently in the spec","msgtype":"m.text"},"ts":1585844416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the current description requires the implementation to implement HostEnqueuePromiseJob","msgtype":"m.text"},"ts":1585844441000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1585844463000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and implementations withouts specs are more than welcome to keep the historical invariants in there","msgtype":"m.text"},"ts":1585844470000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean the spec literally doesn't function","msgtype":"m.text"},"ts":1585844513000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the realm isn't set","msgtype":"m.text"},"ts":1585844515000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you will fail an assertion in CreateBuiltinFunction","msgtype":"m.text"},"ts":1585844524000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if the host hook doesn't set the execution context with script that it's trying to run?","msgtype":"m.text"},"ts":1585844600000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the host hook doesn't have an execution context","msgtype":"m.text"},"ts":1585844621000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in 8.4, there is a list of invariants describing what host AOs for scheduling jobs must adhere to","msgtype":"m.text"},"ts":1585844649000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the first bullet point is \"Push an execution context onto the execution context stack.\"","msgtype":"m.text"},"ts":1585844655000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"perhaps you're asking for that list of invariants to be tighter?","msgtype":"m.text"},"ts":1585844662000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes that's what i keep saying","msgtype":"m.text"},"ts":1585844681000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we need to specify the realm (and maybe scriptormodule) that that execution context uses","msgtype":"m.text"},"ts":1585844705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the realm is a per-kind-of-job thing i imagine","msgtype":"m.text"},"ts":1585844855000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"perhaps","msgtype":"m.text"},"ts":1585844883000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"for HostEnqueuePromiseJob itself, since we pull out the right realm on our side","msgtype":"m.text"},"ts":1585844905000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i'm not sure what that means","msgtype":"m.text"},"ts":1585844919000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry, i didn't finish the sentence","msgtype":"m.text"},"ts":1585844932000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/BN8eZ53s/maybe_fixed.html","msgtype":"m.text"},"ts":1585844991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm saying we need to do something more like this","msgtype":"m.text"},"ts":1585844998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then we just have to specify what _realm_ is for HostEnqueuePromiseJob","msgtype":"m.text"},"ts":1585845129000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the logic in html is more complicated than that afaiu","msgtype":"m.text"},"ts":1585845176000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the host is kind of a moot point here","msgtype":"m.text"},"ts":1585845202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the context needs to fulfill invariants of ecmascript itself","msgtype":"m.text"},"ts":1585845227000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in html `set script execution context to a new JavaScript execution context, with its Function field set to null, its Realm field set to active script's settings object's Realm, and its ScriptOrModule set to active script's record.`","msgtype":"m.text"},"ts":1585845399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"only if the active script is not null","msgtype":"m.text"},"ts":1585845437000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"usually it's the active script's context","msgtype":"m.text"},"ts":1585845458000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in ecmascript that's \"the realm of the current execution context\"","msgtype":"m.text"},"ts":1585845462000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it never reuses the same context","msgtype":"m.text"},"ts":1585845508000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"actually in html it looks like it might run a job with no execution context at all","msgtype":"m.text"},"ts":1585845537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it may never make an execution context","msgtype":"m.text"},"ts":1585845539000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that breaks even more stuff lol","msgtype":"m.text"},"ts":1585845540000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and doesn't fulfill ecmascript either (\"the implementation must: 1. Push an execution context onto the execution context stack.\")","msgtype":"m.text"},"ts":1585845646000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah i don't even know when the active script is null and this host hook would be called","msgtype":"m.text"},"ts":1585845836000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so basically i think we need to give all jobs a ScriptOrModule and a Realm, and set the execution context fields correctly","msgtype":"m.text"},"ts":1585845877000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"tightening up sounds good, could you make a PR? i'd still need to think about it more carefully i have time","msgtype":"m.text"},"ts":1585845884000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"where the ScriptOrModule and Realm come from is up to the thing that is queuing at least","msgtype":"m.text"},"ts":1585845897000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there're two timings for the hooks: enqueue time, and job-running time","msgtype":"m.text"},"ts":1585845901000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i can try to put something together","msgtype":"m.text"},"ts":1585845906000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"execution context creation might not be observable, but since it depends on the active script, which is an observable thing, seems like we need to separate during what time does context creation happen","msgtype":"m.text"},"ts":1585846001000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://github.com/tc39/ecma262/pull/1934","msgtype":"m.text"},"ts":1585846824000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: thanks, i'll try to get to reviewing it next week. i'm not fully grokking the html part yet","msgtype":"m.text"},"ts":1585846988000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"üëçüèª","msgtype":"m.text"},"ts":1585846999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: something is off there in that we don't always create a new execution context","msgtype":"m.text"},"ts":1585847102000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"probably just needs to be \"assert that there is an active script\" instead of branching","msgtype":"m.text"},"ts":1585847127000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, there can definitely be no active script","msgtype":"m.text"},"ts":1585847140000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"that i confirmed","msgtype":"m.text"},"ts":1585847142000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there is an example below in the spec, with a button onclick","msgtype":"m.text"},"ts":1585847151000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1585847162000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"editorially, Job Records were cleaned up for ease of layering","msgtype":"m.text"},"ts":1585847167000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yeah i just thought it would be the easiest way to store the three items together","msgtype":"m.text"},"ts":1585847198000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm open to other things","msgtype":"m.text"},"ts":1585847202000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the invariants might need to be tightened up but i need to think through whether we should say anything more than ensure that stuff can run instead of a particular realm","msgtype":"m.text"},"ts":1585847214000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well i think they need to be tighter than \"any random realm\" because we are creating observable js objects using that realm","msgtype":"m.text"},"ts":1585847250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like the promise resolve functions and stuff","msgtype":"m.text"},"ts":1585847258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wah, github has internal server error.","msgtype":"m.text"},"ts":1585859679000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"https://www.githubstatus.com/","msgtype":"m.text"},"ts":1585859722000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"guess my upload will have to wait","msgtype":"m.text"},"ts":1585859821000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"because github is down?","msgtype":"m.text"},"ts":1585860502000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's off-and-on for me","msgtype":"m.text"},"ts":1585860506000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]