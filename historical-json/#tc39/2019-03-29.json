[
{"content":{"body":"littledan: so overloading of Number and BigInt is gonna be a thing after all?","msgtype":"m.text"},"ts":1553870625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That was the conclusion for Intl.NumberFormat.prototype.format, yes","msgtype":"m.text"},"ts":1553870651000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: was there a more general conclusion too?","msgtype":"m.text"},"ts":1553870666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The committee declined to recommend anything for WebIDL, but I'd like us to eventually be able to migrate Intl to WebIDL","msgtype":"m.text"},"ts":1553870667000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"however, I am also fine with prohibiting the overloading in WebIDL for now","msgtype":"m.text"},"ts":1553870680000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I explained to the committee that I'd like to bring alignment on these decisions","msgtype":"m.text"},"ts":1553870696000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: if we're going to allow it folks are gonna overload","msgtype":"m.text"},"ts":1553870697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1553870704000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: e.g., in that Wasm decision","msgtype":"m.text"},"ts":1553870706000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/decision/issue/","msgtype":"m.text"},"ts":1553870713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wait that one is different","msgtype":"m.text"},"ts":1553870713000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Is it?","msgtype":"m.text"},"ts":1553870725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/WebAssembly/JS-BigInt-integration/issues/12","msgtype":"m.text"},"ts":1553870745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that one clearly should not allow an overload; this is just like writing into a Uint64Array, which the committee decided should not be permitted. It's about Number values \"being in range\" so it's OK","msgtype":"m.text"},"ts":1553870778000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the distinction is a little subtle, I understand","msgtype":"m.text"},"ts":1553870801000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: once it's in IDL that distinction will be lost","msgtype":"m.text"},"ts":1553870812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but, that proposal is purely about \"eh, both should work here\" whereas the NumberFormat issue is a genuine overload","msgtype":"m.text"},"ts":1553870816000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"well, how about we think about the NumberFormat.format thing as using an \"any\"-based overload, and don't let people do it in WebIDL?","msgtype":"m.text"},"ts":1553870838000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: unless browsers have linting on it and informed reviewers","msgtype":"m.text"},"ts":1553870846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: I guess","msgtype":"m.text"},"ts":1553870862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, I can write more about this in the W3C TAG spec guidelines","msgtype":"m.text"},"ts":1553870873000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'm not sure if people read that...","msgtype":"m.text"},"ts":1553870879000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Might still get copy-and-paste, but maybe","msgtype":"m.text"},"ts":1553870889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems like it's typically down to you, Domenic , bz and a couple others to actually enforce conventions","msgtype":"m.text"},"ts":1553870896000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"They should, but I also haven't read it recently to be fair","msgtype":"m.text"},"ts":1553870900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"uhuh","msgtype":"m.text"},"ts":1553870906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's why I'm skeptical ðŸ˜ƒ","msgtype":"m.text"},"ts":1553870916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1553870922000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"OK, I'll think about this more","msgtype":"m.text"},"ts":1553870925000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't think overloading Intl methods will keep working in the future. Domenic pointed out that, if Temporal is in a module, then it couldn't be purely lazy-loaded if we let it overload Intl.DateTimeFormat methods","msgtype":"m.text"},"ts":1553870962000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"also, overloading on different platform objects gets kinda wonky if we move to same-realm brand checking","msgtype":"m.text"},"ts":1553870987000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"one nice benefit of same-realm brand checking that Domenic pointed out is, current realm = relevant realm! We don't have to have that argument then.","msgtype":"m.text"},"ts":1553871014000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1553871144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm a lil scared for same-realm brands, but I suppose it's not too different from what JavaScript has thus far, except for Array","msgtype":"m.text"},"ts":1553871180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"w3ctag design guidelines are sometimes-read, and somewhat-often cited by people","msgtype":"m.text"},"ts":1553872470000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although I guess the recent instance I am thinking about is bz citing them, so that's not so helpful. I guess it saves bz a bit of time.","msgtype":"m.text"},"ts":1553872494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: JS has cross-realm brand checks","msgtype":"m.text"},"ts":1553872523000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hmm yeah, I guess it does mostly, so maybe I'm more concerned","msgtype":"m.text"},"ts":1553872578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's just more restrictive, and aligned with what JS developers are able to create in their own files","msgtype":"m.text"},"ts":1553872597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe I'm biased but I think the complexity of allowing cross-realm access at all is just a mistake of the web platform; everything should have been postMessage().","msgtype":"m.text"},"ts":1553872623000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So little steps we can take to make the platform simpler seem nice, like same-realm brand checks and that proposal from dtapuska to allow sites to isolate themselves from cross-realm access even if same-origin. (I think that's what the proposal was.)","msgtype":"m.text"},"ts":1553872665000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think a proposal that gives you an agent cluster per document has legs","msgtype":"m.text"},"ts":1553872695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What dtapuska and mikewest proposed were not quite there","msgtype":"m.text"},"ts":1553872710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I'm just focused on the simplification and not on the security boundary. Although probably we should couple them, so as not to have two things.","msgtype":"m.text"},"ts":1553873073000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's also a potential parallelization boundary and without an agent cluster it might be much harder to parallelize due to shared memory","msgtype":"m.text"},"ts":1553873220000,"senderName":"annevk","senderId":"annevk@irc"}
]