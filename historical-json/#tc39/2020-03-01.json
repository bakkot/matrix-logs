[
{"content":{"body":"devsnek: there is an important difference in how they're created, which is that module namespaces are created with internal methods which invoke OrdinaryGet, and proxies are not","msgtype":"m.text"},"ts":1583022883000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess?","msgtype":"m.text"},"ts":1583023171000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"something about that doesn't sit with me","msgtype":"m.text"},"ts":1583023192000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it helps if you don't think about the spec as being a program so much","msgtype":"m.text"},"ts":1583023234000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you still need to explicitly say a proxy has [[ProxyTarget]]","msgtype":"m.text"},"ts":1583023238000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and a namespace has [[Exports]]","msgtype":"m.text"},"ts":1583023244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so why don't you need to say an object has ordinary properties","msgtype":"m.text"},"ts":1583023252000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh, you do: https://tc39.es/ecma262/#sec-object-type","msgtype":"m.text"},"ts":1583023263000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"All objects are logically collections of properties\"","msgtype":"m.text"},"ts":1583023267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*ordinary* properties","msgtype":"m.text"},"ts":1583023286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is a non-ordinary property?","msgtype":"m.text"},"ts":1583023300000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: where you say \"create an own data property\" or \"create an own accessor property\"","msgtype":"m.text"},"ts":1583023363000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"those are the kinds of properties which are meant when it says all objects are logically collections of properties","msgtype":"m.text"},"ts":1583023400000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"then","msgtype":"m.text"},"ts":1583023409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OrdinaryGet on a proxy would be valid?","msgtype":"m.text"},"ts":1583023415000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since proxy is a part of that definition","msgtype":"m.text"},"ts":1583023423000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't really know what that means?","msgtype":"m.text"},"ts":1583023429000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is your question \"are any of the steps in OrdinaryGet nonsensical when applied to a proxy\"?","msgtype":"m.text"},"ts":1583023455000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i guess i mean OrdinaryGetOwnProperty","msgtype":"m.text"},"ts":1583023474000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but yes","msgtype":"m.text"},"ts":1583023475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OrdinaryDefineOwnProperty and OrdinaryGetOwnProperty when used on things like proxies","msgtype":"m.text"},"ts":1583023498000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I believe the answer is no","msgtype":"m.text"},"ts":1583023501000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"see, it's the \"when used on things like proxies\" which is tripping me up","msgtype":"m.text"},"ts":1583023513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they _aren't_ used on things like proxies","msgtype":"m.text"},"ts":1583023521000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the \"when\" is confusing","msgtype":"m.text"},"ts":1583023526000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm trying to figure out if all objects have \"own\" properties","msgtype":"m.text"},"ts":1583023588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"an implementation of the spec could theoretically perform that call","msgtype":"m.text"},"ts":1583023629000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Since the spec does not perform that call, it would no longer be an implementation of the spec","msgtype":"m.text"},"ts":1583023666000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but anyway yes all objects of \"own\" properties, per the section I linked above","msgtype":"m.text"},"ts":1583023694000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"An Object is logically a collection of properties. Each property is either a data property, or an accessor property. [...] The properties accessible via get and set access includes both own properties that are a direct part of an object and inherited properties which are provided by another associated object via a property inheritance relationship. [...] All objects are logically collections of properties, but there are multiple forms of","msgtype":"m.text"},"ts":1583023736000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"objects that differ in their semantics for accessing and manipulating their properties.\"","msgtype":"m.text"},"ts":1583023737000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"left unsaid in that last part is that Proxies do not provide any way of accessing and manipulating their properties","msgtype":"m.text"},"ts":1583023751000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why is using ordinary ops on a proxy out of range if using them on module namespaces isn't","msgtype":"m.text"},"ts":1583023805000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they both provide their own implementation of [[GetOwnProperty]]","msgtype":"m.text"},"ts":1583023818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"When are you thinking an implementation would invoke OGOP on a proxy?","msgtype":"m.text"},"ts":1583023898000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ü§∑üèª","msgtype":"m.text"},"ts":1583023949000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm able to do such a thing in engine262 at least","msgtype":"m.text"},"ts":1583023969000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok, so when does engine262 do it?","msgtype":"m.text"},"ts":1583023988000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"never","msgtype":"m.text"},"ts":1583024001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it's possible","msgtype":"m.text"},"ts":1583024003000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so i want to make sure engine262 does the right thing if someone did that","msgtype":"m.text"},"ts":1583024012000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so you're asking what the OGOP algorithm means when _O_ is a proxy?","msgtype":"m.text"},"ts":1583024088000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i guess","msgtype":"m.text"},"ts":1583024118000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like if you did OrdinaryDefineOwnProperty and then OrdinaryGetOwnProperty","msgtype":"m.text"},"ts":1583024140000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do you get your property back out","msgtype":"m.text"},"ts":1583024145000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does nothing happen","msgtype":"m.text"},"ts":1583024148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is the whole thing in valid","msgtype":"m.text"},"ts":1583024151000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"invalid*","msgtype":"m.text"},"ts":1583024153000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think it would create an own property on the proxy","msgtype":"m.text"},"ts":1583024250000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"based on what bakkot said about the object definition","msgtype":"m.text"},"ts":1583024258000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but then bakkot also said it isn't valid","msgtype":"m.text"},"ts":1583024265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I wouldn't say it's *invalid* per se, but the spec never performs such an invocation, so it has no need to define its semantics.","msgtype":"m.text"},"ts":1583024315000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i'd be fine if it was invalid","msgtype":"m.text"},"ts":1583024365000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just want to figure out some answer","msgtype":"m.text"},"ts":1583024370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hopefully we can project out of the spec whether or not a certain behaviour is correct or not","msgtype":"m.text"},"ts":1583024385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Presumably, when OGOP refers to an own property of _O_, that's not a veiled reference to a MOP method, else you'd get infinite recursion.","msgtype":"m.text"},"ts":1583025044000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah no that's the actual hook into the implementation's method of storing properties","msgtype":"m.text"},"ts":1583025229000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess I'd say that if your implementation calls OrdinaryDefineOwnProperty on a proxy, then OrdinaryGetOwnProperty will 'see' that property.","msgtype":"m.text"},"ts":1583025645000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"But again, that's not spec semantics, that's just a possible approach to non-spec semantics.","msgtype":"m.text"},"ts":1583025760000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Another approach would be for the Ordinary* ops to assert that _O_ isn't a proxy.","msgtype":"m.text"},"ts":1583025958000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"O is ordinary or a module namespace object","msgtype":"m.text"},"ts":1583026025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i prefer the less locked down approach","msgtype":"m.text"},"ts":1583026038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"where it just works","msgtype":"m.text"},"ts":1583026046000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Ordinary* ops have to work for more than just ordinary and module namespace objects","msgtype":"m.text"},"ts":1583026106000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1583026120000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what else","msgtype":"m.text"},"ts":1583026121000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"e.g., array's [[DefOwnProp]] has a call to OGOP","msgtype":"m.text"},"ts":1583026228000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oh and arrays","msgtype":"m.text"},"ts":1583026241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"on the array object","msgtype":"m.text"},"ts":1583026244000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think it makes more sense to just","msgtype":"m.text"},"ts":1583026248000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"approach it as working","msgtype":"m.text"},"ts":1583026254000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like that's the approach we take","msgtype":"m.text"},"ts":1583026262000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we can override but always fall back to the ordinary ops","msgtype":"m.text"},"ts":1583026268000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"String object's [[GetOwnProperty]] calls OGOP on the String object","msgtype":"m.text"},"ts":1583026286000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"and other examples","msgtype":"m.text"},"ts":1583026343000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: I don't think it is important that the algorithms in the spec be meaningful when used in ways which the spec does not use them in","msgtype":"m.text"},"ts":1583034236000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is not a library in the programming sense; it is a specification","msgtype":"m.text"},"ts":1583034265000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that is to say, I don't think it is important that one be able to answer questions like \"what happens when this algorithm is invoked on this kind of object, which it is never invoked on\"","msgtype":"m.text"},"ts":1583034397000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all that said, in this case I do think it happens to work out such that all of the steps in OrdinaryGetOwnProperty would make sense when applied to a proxy, and would manipulate its collection of properties, which it happens to have because the spec says all objects have properties","msgtype":"m.text"},"ts":1583034482000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but the fact that there is an answer to this question, under the current specification, is pretty much coincidence; if we had happened to have an \"Assert: O is not a proxy\" in OGOP, or in the definition of objects had excluded proxies, there would not be an answer, and that would be OK because it is not the purpose of the spec to answer questions like that","msgtype":"m.text"},"ts":1583034550000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: if there was an assert I wouldn't ask","msgtype":"m.text"},"ts":1583035619000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: in principle there could be an assert for every statement which happens to be true after every algorithm step","msgtype":"m.text"},"ts":1583036077000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they are basically comments","msgtype":"m.text"},"ts":1583036107000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we use them all the time to restrict what abstract ops run on","msgtype":"m.text"},"ts":1583036184000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we use them to clarify why the steps in the abstract operation are sensible","msgtype":"m.text"},"ts":1583036203000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"they do not restrict what they run on","msgtype":"m.text"},"ts":1583036211000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the thing which restricts what they run on is, we don't run them on the things we don't want to run them on","msgtype":"m.text"},"ts":1583036225000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ug my messages didn't send","msgtype":"m.text"},"ts":1583036773000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: i'd say it's not ok to use the ordinary ops directly on a module namespace object either","msgtype":"m.text"},"ts":1583038558000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: only via their internal methods","msgtype":"m.text"},"ts":1583038565000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"eh","msgtype":"m.text"},"ts":1583038573000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that makes no sense to me","msgtype":"m.text"},"ts":1583038579000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"abstract ops aren't general purpose functions","msgtype":"m.text"},"ts":1583038588000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's literally what they are","msgtype":"m.text"},"ts":1583038596000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"any usage outside of their explicitly referenced usage is invalid","msgtype":"m.text"},"ts":1583038601000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no, they're not","msgtype":"m.text"},"ts":1583038604000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"general logic abstracted out to be used in other places","msgtype":"m.text"},"ts":1583038607000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"they're functions that are used for \"the exact purpose they're specified for, and nothing more\"","msgtype":"m.text"},"ts":1583038616000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"not arbitrary places","msgtype":"m.text"},"ts":1583038623000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"explicitly enumerated ones","msgtype":"m.text"},"ts":1583038628000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the main question is, why *would* you ever use an OrdinaryGet operation on an exotic objcet","msgtype":"m.text"},"ts":1583038698000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"idk","msgtype":"m.text"},"ts":1583038706000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"someone can do `AbstractOps.OrdinaryGet(AbstractOps.ProxyCreate())`","msgtype":"m.text"},"ts":1583038725000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ok so, if there's no reason to do it, why is it important that the spec doesn't explicitly forbid it?","msgtype":"m.text"},"ts":1583038726000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well sure","msgtype":"m.text"},"ts":1583038731000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so i wondered what should happen","msgtype":"m.text"},"ts":1583038731000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"an incompetent or malicious implementation can do all sorts of things","msgtype":"m.text"},"ts":1583038742000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"in this case, does the proxy even have any properties?","msgtype":"m.text"},"ts":1583038766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its prototype would be via the proxy trap","msgtype":"m.text"},"ts":1583038777000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it does by the definition of objects","msgtype":"m.text"},"ts":1583038803000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"people at least agree on that","msgtype":"m.text"},"ts":1583038809000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"still up in the air if OrdinaryXyz can be used to access them","msgtype":"m.text"},"ts":1583038823000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's *capable* of having them, syure","msgtype":"m.text"},"ts":1583038876000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but the only way it could get them is OrdinarySet","msgtype":"m.text"},"ts":1583038881000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and since nothing invokes that on a proxy, how could it get any?","msgtype":"m.text"},"ts":1583038888000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"an impl could certainly store things on it, and get them, but no observable JS could, so why is it a question worth thinking about?","msgtype":"m.text"},"ts":1583038909000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: observable js can't call the ops either so","msgtype":"m.text"},"ts":1583039062000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ü§∑üèª","msgtype":"m.text"},"ts":1583039066000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1583039068000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so you're asking a question about a thing that basically can't ever happen :-)","msgtype":"m.text"},"ts":1583039083000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well actually i do have $262.callAbstract","msgtype":"m.text"},"ts":1583039088000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but besides that","msgtype":"m.text"},"ts":1583039093000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, within your enginr","msgtype":"m.text"},"ts":1583039094000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*engine","msgtype":"m.text"},"ts":1583039095000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we could certainly add an assertion about what kind of object the ordinary methods are called on","msgtype":"m.text"},"ts":1583039116000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i'm just not sure who it'd be to help","msgtype":"m.text"},"ts":1583039127000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"probably no one","msgtype":"m.text"},"ts":1583039133000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"all it would do is make engine262 a bit slower cuz i actually check assertions lol","msgtype":"m.text"},"ts":1583039152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"assert is called 1,508,260,158 times during a test262 run","msgtype":"m.text"},"ts":1583039211000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"do all the asserts succeed?","msgtype":"m.text"},"ts":1583039239000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1583039327000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there were a few cases where they didn't last year","msgtype":"m.text"},"ts":1583039347000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i fixed the spec","msgtype":"m.text"},"ts":1583039358000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think most of the calls are probably from expanding `!`","msgtype":"m.text"},"ts":1583039427000,"senderName":"devsnek","senderId":"devsnek@irc"}
]