[
{"content":{"body":"found a fun bug in some version of v8 - check out node v10.0, and sometimes if you make a `new Error()` instance, and then stick properties on it, and `Object.entries()` it, you'll mistakenly get an empty array","msgtype":"m.text"},"ts":1613099535000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's not deterministic tho so i can't even figure out how to test for it","msgtype":"m.text"},"ts":1613099547000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"gsathya mathiasbynens shu: any chance there's a v8 bug that can link me to a regression test for that? (i'm having trouble locating one)","msgtype":"m.text"},"ts":1613102603000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: do you have an example bit of code?","msgtype":"m.text"},"ts":1613103221000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: in the 10.0 repl, `asdf = Object.assign(new Error('foo'), { path: '/some/path', pkgid: 'some@package', file: '/some/file', stack: 'hello' })` and then `Object.entries(asdf)` - verbatim","msgtype":"m.text"},"ts":1613103370000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if you stick a `var` in front, you get the proper entries, which is even weirder","msgtype":"m.text"},"ts":1613103388000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"fun","msgtype":"m.text"},"ts":1613103394000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but if you do the same in \"not the repl\" it's not as reproducible","msgtype":"m.text"},"ts":1613103413000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but like, npm's own tests fail in node 10.0 because tap is using Object.entries","msgtype":"m.text"},"ts":1613103427000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"its a bug in the Object.entries builtin probably","msgtype":"m.text"},"ts":1613103476000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no jit happening at this point","msgtype":"m.text"},"ts":1613103481000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes, that's what i'm trying to reliably detect at runtime, so i can patch it","msgtype":"m.text"},"ts":1613103504000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"all i can find is maybe https://chromium-review.googlesource.com/c/v8/v8/+/859937 but i don't know how to navigate v8 stuff well enough to find a regression test","msgtype":"m.text"},"ts":1613103787000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"v8 tests are not well organized","msgtype":"m.text"},"ts":1613103808000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"best luck is checking for `test/mjsunit/regress-bugid.js`","msgtype":"m.text"},"ts":1613103821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, all i can find is https://chromium.googlesource.com/v8/v8/+/4455377fca84bd78274a87b6dce898000f7d5784/test/mjsunit/es8/object-entries.js so i guess i'll have to try all those one at a time to see if it can repro it without the %HeapVerify stuff","msgtype":"m.text"},"ts":1613104153000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i can't repro it in d8 using the same version that node 10.0 is using","msgtype":"m.text"},"ts":1613104549000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i can repro it in node 10.0","msgtype":"m.text"},"ts":1613104555000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm, how would node differ from d8?","msgtype":"m.text"},"ts":1613104738000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"all the repl stuff","msgtype":"m.text"},"ts":1613104836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this definitely doesn't just happen in the repl; i just can't repro it reliably outside the repl, or outside npm's tap tests","msgtype":"m.text"},"ts":1613104855000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i’m off now and also on pto tomorrow, please email me at my work email","msgtype":"m.text"},"ts":1613104871000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: oh sure, thanks!","msgtype":"m.text"},"ts":1613104906000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: https://github.com/npm/cli/runs/1875790649?check_suite_focus=true","msgtype":"m.text"},"ts":1613104908000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: lol the repro code, in a `test.js` file, and in the repl doing `.load test.js` doesn't repro it either","msgtype":"m.text"},"ts":1613105213000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: i don't have more context re: whether this is a regression or not, but for these things it's totally fine to file a crbug and take it from there","msgtype":"m.text"},"ts":1613122125000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: oh it’s totally fixed - I’m trying to figure out how to patch that old v8 version by locating the old regression test","msgtype":"m.text"},"ts":1613143749000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ooh! if i wanted to find out i'd probably just bisect, either with https://source.chromium.org/chromium/chromium/src/+/master:tools/bisect-builds.py;drc=b590808db8d9a05e4dab667239348088cc049c87","msgtype":"m.text"},"ts":1613147142000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"i don't have v8 cloned, so if it comes to that i will :-)","msgtype":"m.text"},"ts":1613147181000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or by manually doing `for v in 8.{0,9}; do jsvu \"v8@${v}\"; done` and testing in the different v8-* binaries quickly","msgtype":"m.text"},"ts":1613147194000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"once you find the version with the fix, git log just that range","msgtype":"m.text"},"ts":1613147226000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"interesting, thanks - i'll try that","msgtype":"m.text"},"ts":1613147233000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ?","msgtype":"m.text"},"ts":1613147397000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: There's an unclosed <p> tag in the spec. Do you want to slip in a fix, or do you want me to submit a PR?","msgtype":"m.text"},"ts":1613147850000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: line?","msgtype":"m.text"},"ts":1613147947000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"<p>Every built-in function object, including constructors, has a *\"name\"* property ...","msgtype":"m.text"},"ts":1613147991000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks, it's still valid html (it auto-closes) but i'll just add a commit to fix it","msgtype":"m.text"},"ts":1613148118000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"will make a note to lint that","msgtype":"m.text"},"ts":1613148154000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"tx","msgtype":"m.text"},"ts":1613148842000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]