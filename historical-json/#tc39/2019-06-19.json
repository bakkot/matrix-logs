[
{"content":{"body":"Does anyone know if anyone has proposed a if (let myVariable = ...) { } syntax before?","msgtype":"m.text"},"ts":1560966523000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"I couldn't find anything.","msgtype":"m.text"},"ts":1560966525000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"interesting...would be surprising if it were never discussed, given its existence in other langs ðŸ¤”","msgtype":"m.text"},"ts":1560966913000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"keith_mi_: what's the `...`","msgtype":"m.text"},"ts":1560967325000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"usually `if let` is part of pattern matching right?","msgtype":"m.text"},"ts":1560967345000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: Some expression that you want to bind","msgtype":"m.text"},"ts":1560967350000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"like if (let foo = bar.baz())","msgtype":"m.text"},"ts":1560967376000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: spidermonkey used to have let expressions but not quite that form i don't think","msgtype":"m.text"},"ts":1560967385000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"basically any RHS expression","msgtype":"m.text"},"ts":1560967407000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"ok, I make a proposal then","msgtype":"m.text"},"ts":1560967424000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"is this always truthy?","msgtype":"m.text"},"ts":1560967442000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"always falsy?","msgtype":"m.text"},"ts":1560967444000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it looks real odd by today's standards `let (x = y) z`","msgtype":"m.text"},"ts":1560967449000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"what is always truthy or always falsy?","msgtype":"m.text"},"ts":1560967478000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"like","msgtype":"m.text"},"ts":1560967483000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when does this if block run","msgtype":"m.text"},"ts":1560967488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's truthy if the RHS is truthy","msgtype":"m.text"},"ts":1560967491000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"yeah, like in C i imagine","msgtype":"m.text"},"ts":1560967497000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i wasn't aware this was a thing in C","msgtype":"m.text"},"ts":1560967506000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but ok","msgtype":"m.text"},"ts":1560967509000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if (let foo = bar()) runs when bar() is truthy","msgtype":"m.text"},"ts":1560967516000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"it's sugar for { let variable = expression; if (variable) { ... } }","msgtype":"m.text"},"ts":1560967522000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1560967527000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_mi_: real talk do you want the binding to be available in the else branch","msgtype":"m.text"},"ts":1560967533000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1560967539000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"o really","msgtype":"m.text"},"ts":1560967542000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"would interact weirdly with `else if (let`","msgtype":"m.text"},"ts":1560967552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean that's not how any other language does it","msgtype":"m.text"},"ts":1560967552000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"you'd just stack up declarations","msgtype":"m.text"},"ts":1560967562000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess it's not quite sugar then...","msgtype":"m.text"},"ts":1560967576000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"but yeah","msgtype":"m.text"},"ts":1560967578000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"I mean we're just talking about https://doc.rust-lang.org/reference/expressions/if-expr.html#if-let-expressions, yeah?","msgtype":"m.text"},"ts":1560967604000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1560967619000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's what i thought this was too","msgtype":"m.text"},"ts":1560967625000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"except for the parens difference and the expression difference","msgtype":"m.text"},"ts":1560967629000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no that's doing destructuring","msgtype":"m.text"},"ts":1560967630000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: that breaks with c","msgtype":"m.text"},"ts":1560967640000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"which you could do here possibly","msgtype":"m.text"},"ts":1560967642000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"keith_mi_: in c the binding is available in both branches","msgtype":"m.text"},"ts":1560967645000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"wait really?","msgtype":"m.text"},"ts":1560967652000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"oh wow...","msgtype":"m.text"},"ts":1560967699000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"idk I'm neutral on it being on both sides","msgtype":"m.text"},"ts":1560967749000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"er sorry, I guess Rust is hard to compare with since do exprs and pattern matching are outstanding, but lemme rephrase","msgtype":"m.text"},"ts":1560967774000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"c isn't exactly a gold standard of language design","msgtype":"m.text"},"ts":1560967784000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we're talking about C++17 \"if auto\", right?","msgtype":"m.text"},"ts":1560967804000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it seems gross to me to further conflate assignment with expressions","msgtype":"m.text"},"ts":1560967826000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"If we ever had a pattern matching proposal we could choose something else to indicate you wanted a pattern match here","msgtype":"m.text"},"ts":1560967828000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"`if (type = x`","msgtype":"m.text"},"ts":1560967832000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"type could be auto","msgtype":"m.text"},"ts":1560967836000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'd rather see us make assignments become statements if it were web compat :-)","msgtype":"m.text"},"ts":1560967844000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"something something `let` reserved keyword","msgtype":"m.text"},"ts":1560967865000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm yeah I'm inclined to agree that if we did this it should be after Kat and Dave get their stuff through :P","msgtype":"m.text"},"ts":1560967886000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ðŸ˜±","msgtype":"m.text"},"ts":1560967911000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is the matching proposal still weird","msgtype":"m.text"},"ts":1560967945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the pattern matching proposal mentions things like `if let`, iirc","msgtype":"m.text"},"ts":1560967973000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"i just want matching as an expression","msgtype":"m.text"},"ts":1560967992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: what was weird about it? It's recently been updated, to support expressions.","msgtype":"m.text"},"ts":1560967992000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1560968003000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then yes, there's expressions, in a limited sense, thanks to littledan","msgtype":"m.text"},"ts":1560968006000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"just using the entire match as an expression was what i wanted","msgtype":"m.text"},"ts":1560968019000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"check out https://github.com/tc39/proposal-pattern-matching#motivating-examples","msgtype":"m.text"},"ts":1560968025000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"yea just saw that","msgtype":"m.text"},"ts":1560968030000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ðŸŽ‰","msgtype":"m.text"},"ts":1560968032000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does that look like enough to you?","msgtype":"m.text"},"ts":1560968037000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"looks more or less like what i imagined","msgtype":"m.text"},"ts":1560968051000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm kinda spoiled by rust though","msgtype":"m.text"},"ts":1560968057000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like, not being able to do general-purpose expressions (so if you're in \"expression mode\", you can't use keywords and statements in legs)","msgtype":"m.text"},"ts":1560968058000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"is that a left hand side expression","msgtype":"m.text"},"ts":1560968082000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm?","msgtype":"m.text"},"ts":1560968099000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"the grammar of the expression side","msgtype":"m.text"},"ts":1560968115000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you said its not general-purpose expressions","msgtype":"m.text"},"ts":1560968125000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems like this bit is potentially directly relevant: https://github.com/tc39/proposal-pattern-matching/blob/latest/TO_INFINITY_AND_BEYOND.md#--if-case-convenience-sugar","msgtype":"m.text"},"ts":1560968136000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"like has it been settled which expression production it is","msgtype":"m.text"},"ts":1560968147000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I haven't messed with the grammar bits yet, no","msgtype":"m.text"},"ts":1560968499000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"sorry had to get off the bus","msgtype":"m.text"},"ts":1560968616000,"senderName":"keith_mi_","senderId":"keith_mi_@irc"},
{"content":{"body":"zkat: is `~x` a placeholder for `->`","msgtype":"m.text"},"ts":1560968820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait no that doesn't make sense","msgtype":"m.text"},"ts":1560968843000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, that was a reference to a now-dropped subproposal for extensible patterns","msgtype":"m.text"},"ts":1560968858000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"oh ok","msgtype":"m.text"},"ts":1560968873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"which might be replaces with `NewExpression`/`CallExpression` inversion, as in https://github.com/tc39/proposal-pattern-matching/issues/117","msgtype":"m.text"},"ts":1560968918000,"senderName":"zkat","senderId":"zkat@irc"},
{"content":{"body":"ljharb: While it's usually a bad idea to do assignment as an expression (I agree with you), I'm not convinced that would be a problem here.","msgtype":"m.text"},"ts":1560969567000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"my argument is there can only be one lexical assignment per if condition","msgtype":"m.text"},"ts":1560969585000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"keith_m__: and what if you want two tho? like `const { foo } = obj; let { bar } = obj`","msgtype":"m.text"},"ts":1560969603000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that would be a syntax error","msgtype":"m.text"},"ts":1560969616000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"or even `const { foo, bar } = obj`","msgtype":"m.text"},"ts":1560969618000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well that's destructuring so I'd be ok with that","msgtype":"m.text"},"ts":1560969630000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"ok so, the limitation of destructuring not allowing mixing let/const is \"fine\" because you can do 2 statements - but if there's a place where you can only do one, that will likely present a problem","msgtype":"m.text"},"ts":1560969663000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"why not `for (let a = b(); a;;) {}`","msgtype":"m.text"},"ts":1560969663000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1560969667000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"isn't that an infinite loop?","msgtype":"m.text"},"ts":1560969697000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"oh yeah","msgtype":"m.text"},"ts":1560969703000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1560969705000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"my thought process stopped at \"yeah this would run and not run\"","msgtype":"m.text"},"ts":1560969727000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you also can't have an else","msgtype":"m.text"},"ts":1560969732000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"ljharb: Destructuring is also a bit weird because it's somewhat unclear what the conditional is?","msgtype":"m.text"},"ts":1560969801000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"is it the fact that the destructuring \"succeeded\"? Or that the RHS is actually an object?","msgtype":"m.text"},"ts":1560969832000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"so maybe destructuring is a bad choice","msgtype":"m.text"},"ts":1560969848000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"if destructuring doesn't succeed it throws","msgtype":"m.text"},"ts":1560969855000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean maybe you don't want that behavior here?","msgtype":"m.text"},"ts":1560969868000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"but yeah that is getting into matching territory","msgtype":"m.text"},"ts":1560969874000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1560969879000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"Also, you could do two statements for destructuring here","msgtype":"m.text"},"ts":1560969912000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"`#pragma match` or `#pragma destructure` ftfy","msgtype":"m.text"},"ts":1560969917000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"keith_m__: right, so then you block destructuring in an `if`, and now you have a weird sub-form of assignment","msgtype":"m.text"},"ts":1560969954000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"since you could do if (let { foo } = obj) { const { bar } = obj; }","msgtype":"m.text"},"ts":1560969957000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"but I think it's worth exploring what the different semantics could be","msgtype":"m.text"},"ts":1560969997000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"anywho I will make a proposal unless people think it's beating a dead horse","msgtype":"m.text"},"ts":1560970100000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"keith_m__: i'd search esdiscuss first for previous discussions on it","msgtype":"m.text"},"ts":1560970218000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I did some googling and couldn't find anything","msgtype":"m.text"},"ts":1560970232000,"senderName":"keith_m__","senderId":"keith_m__@irc"},
{"content":{"body":"definitely seems like a worth problem space to bring up in session","msgtype":"m.text"},"ts":1560971194000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"late reply: i think \"c's not a great language to emulate\" is more an argument for not having `if (let foo = bar)` the available-in-both-branches thing","msgtype":"m.text"},"ts":1560971727000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"if we're to have the form, it'd be weird to diverge imo","msgtype":"m.text"},"ts":1560971760000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"I don't think this syntax is worth it, in honesty","msgtype":"m.text"},"ts":1560971814000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i'm like a weak agree on it not being worth it","msgtype":"m.text"},"ts":1560971892000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i do use the form in c++ fairly frequently","msgtype":"m.text"},"ts":1560971901000,"senderName":"cloudshu","senderId":"cloudshu@irc"},
{"content":{"body":"i never even knew it existed","msgtype":"m.text"},"ts":1560973368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but same agreement as cloudshu","msgtype":"m.text"},"ts":1560973380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also, previous discussions: https://esdiscuss.org/topic/proposal-if-variable-initialization https://esdiscuss.org/topic/proposal-let-in-if-parentheses","msgtype":"m.text"},"ts":1560976459000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I think I'm understanding the fetch spec right, but just to check - is it intended then when fetching a resource with {redirect: \"manual\"}, the response type is always \"cors\" (even with Access-Control-Allow-Origin set to *), unless there's a redirect, in which case the response type is \"opaqueredirect\"?","msgtype":"m.text"},"ts":1560978211000,"senderName":"oliverdunk","senderId":"oliverdunk@irc"},
{"content":{"body":"oliverdunk: I think you'd have to talk to WHATWG about fetch; it's not part of the language spec","msgtype":"m.text"},"ts":1560978484000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Gotcha, that makes sense rkirsling.","msgtype":"m.text"},"ts":1560978508000,"senderName":"oliverdunk","senderId":"oliverdunk@irc"},
{"content":{"body":"gh-1158 is merged! :hooray:","msgtype":"m.text"},"ts":1560980569000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"getting archive.is/TeTng fixed has been on my todo list for _three years_","msgtype":"m.text"},"ts":1560980678000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wow, that's the first time I've actually viewed that site","msgtype":"m.text"},"ts":1560980758000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"just watched cj's talk at jsconf","msgtype":"m.text"},"ts":1560983991000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"reminds me of the arguments in the std proposal","msgtype":"m.text"},"ts":1560984011000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the energy of being in the front row for that and not knowing what was coming, man. it was really something","msgtype":"m.text"},"ts":1560984043000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but yeah there's a common theme in the ether, I think","msgtype":"m.text"},"ts":1560984114000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]