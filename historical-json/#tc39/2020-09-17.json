[
{"content":{"body":"Next in Test262: https://twitter.com/leobalter/status/1306705490135506945","msgtype":"m.text"},"ts":1600378054000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"shortcut: jump to the runtime evaluation of try-catch-finally","msgtype":"m.text"},"ts":1600378098000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"regardless of the answer, I love the hint XD","msgtype":"m.text"},"ts":1600378120000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in fact all engines are failing","msgtype":"m.text"},"ts":1600378134000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oh god is the `break` actually relevant? üò±","msgtype":"m.text"},"ts":1600378184000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yes :)","msgtype":"m.text"},"ts":1600378191000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"that's the tricky part","msgtype":"m.text"},"ts":1600378197000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"er duh, it's a do-while, of course it's relevant","msgtype":"m.text"},"ts":1600378217000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there is also another example here, even more messed up:","msgtype":"m.text"},"ts":1600378278000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I mean I really hope it's `undefined` but if it were I feel like we wouldn't be talking about it","msgtype":"m.text"},"ts":1600378325000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er wait no sorry","msgtype":"m.text"},"ts":1600378386000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(function fn() { do { try { return 42; } catch(e) {} finally { break; } } while (false); })()","msgtype":"m.text"},"ts":1600378393000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I take that back","msgtype":"m.text"},"ts":1600378394000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"don't take that back","msgtype":"m.text"},"ts":1600378423000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1600378429000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's undefined","msgtype":"m.text"},"ts":1600378437000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1600378453000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-try-statement-runtime-semantics-evaluation, for the try-catch-finally evaluation, step 5","msgtype":"m.text"},"ts":1600378465000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"_If F.[[Type]] is normal, set F to C._","msgtype":"m.text"},"ts":1600378491000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"F.[[Type]] is break","msgtype":"m.text"},"ts":1600378505000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"then: \"Return Completion(UpdateEmpty(F, undefined)).\"","msgtype":"m.text"},"ts":1600378543000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it swallows the previous completions","msgtype":"m.text"},"ts":1600378569000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"`finally` generally wreaks havoc","msgtype":"m.text"},"ts":1600378834000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"unless I missed the finally Block + break","msgtype":"m.text"},"ts":1600378849000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I learned a lot of the finally tricks from Dave Herman, I wish I could confirm this sorcery here","msgtype":"m.text"},"ts":1600378959000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I wish he* could confirm this","msgtype":"m.text"},"ts":1600378969000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"your reading seems right to me","msgtype":"m.text"},"ts":1600378996000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"a break completion always has `~empty~` value","msgtype":"m.text"},"ts":1600379006000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what made you go down this part of the spec, leo?","msgtype":"m.text"},"ts":1600379077000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"migrating old tests from V8","msgtype":"m.text"},"ts":1600379099000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oh man, do we have tests that test for the wrong completion?","msgtype":"m.text"},"ts":1600379119000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so","msgtype":"m.text"},"ts":1600379119000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"idk, I file an issue a couple years ago and Rick was writing down tests. Engines are disagreeing","msgtype":"m.text"},"ts":1600379153000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I was checking the details in a full review, reading spec here and there","msgtype":"m.text"},"ts":1600379170000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"wait but like","msgtype":"m.text"},"ts":1600379180000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is it even correct that `eval('do { -2; break; -3 } while (false)')` returns -2?","msgtype":"m.text"},"ts":1600379191000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so for a block `while (1) { 42; break; }` the completion is 42;","msgtype":"m.text"},"ts":1600379195000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"but _finally_ ignores the try block","msgtype":"m.text"},"ts":1600379210000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-do-while-statement-runtime-semantics-labelledevaluation","msgtype":"m.text"},"ts":1600379217000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`return Completion(UpdateEmpty(stmtResult, V))` yet V is still `undefined`","msgtype":"m.text"},"ts":1600379236000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in this case, I was wrong as well, not undefined, but -2 for my original example","msgtype":"m.text"},"ts":1600379238000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"in this case, JSC and Moddable are failing, but ok, engine262, SM and V8 are correct","msgtype":"m.text"},"ts":1600379320000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1600379335000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and that's super tricky","msgtype":"m.text"},"ts":1600379338000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it's hard to collect all the pieces. I'm trying to fetch where the Block evaluates the completion to -2","msgtype":"m.text"},"ts":1600379384000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"it's in StatementList","msgtype":"m.text"},"ts":1600379432000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it looks like Block in that case should evaluate with [[Type]]: ~break~ but still [[Value]]: <the last value>","msgtype":"m.text"},"ts":1600379465000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so that's not quite so shocking then but I wonder what JSC is doing wrong","msgtype":"m.text"},"ts":1600379560000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there're so many examples floating i'm confused","msgtype":"m.text"},"ts":1600379593000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which one is JSC getting wrong?","msgtype":"m.text"},"ts":1600379599000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the one in the tweet","msgtype":"m.text"},"ts":1600379632000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"shu `do { try { 42 } catch (e) { -1 } finally { -2; break; -3 }; } while (false)`","msgtype":"m.text"},"ts":1600379646000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1600379654000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"JSC is getting 42? interesting","msgtype":"m.text"},"ts":1600379668000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"depends on how finally blocks are implemented, is it a subroutine?","msgtype":"m.text"},"ts":1600379687000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but still `do { try { 42 } catch (e) { -1 } finally { break; -3 }; } while (false)` should complete to _undefined_","msgtype":"m.text"},"ts":1600379908000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"for that one, V8 is returning 42 instead.","msgtype":"m.text"},"ts":1600379930000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"let me transform this in tests","msgtype":"m.text"},"ts":1600379938000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"lol we must be doing something wrong in this massive codegen helper","msgtype":"m.text"},"ts":1600380332000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/bytecompiler/BytecodeGenerator.cpp#L5019-L5174","msgtype":"m.text"},"ts":1600380333000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"delete it and start over","msgtype":"m.text"},"ts":1600380377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"üôÖ‚Äç‚ôÄÔ∏è","msgtype":"m.text"},"ts":1600380454000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wow for once chakracore implements something weird correctly","msgtype":"m.text"},"ts":1600380599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it seems like only jsc, xs, and qjs get this wrong","msgtype":"m.text"},"ts":1600380624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm not done with the test cases","msgtype":"m.text"},"ts":1600380675000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"üò±","msgtype":"m.text"},"ts":1600380683000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"engine dev: my code is conformant!","msgtype":"m.text"},"ts":1600380803000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Leo: oh we're only getting started","msgtype":"m.text"},"ts":1600380804000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"leobalter: i'd expect your tweet to either be -2 or -3 - what does the spec say and what do engines do?","msgtype":"m.text"},"ts":1600380804000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i read the scrollback but i still don't know the answer","msgtype":"m.text"},"ts":1600380812000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"-2","msgtype":"m.text"},"ts":1600380833000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"for the tweet it's \"-2 and JSC is wrong\" but it's only one of a variety of cases","msgtype":"m.text"},"ts":1600380833000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and `undefined` for `do { try { 42 } catch (e) { -1 } finally { break; -3 }; } while (false)`","msgtype":"m.text"},"ts":1600380848000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"for instance, remove the `-2;` and V8 is wrong","msgtype":"m.text"},"ts":1600380849000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1600380853000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: yes sir","msgtype":"m.text"},"ts":1600380861000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"intuitively i think i'd expect the last expression evaluated in a finally, and before a break, would be the completion value","msgtype":"m.text"},"ts":1600380868000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there are more cases for continue and return completions","msgtype":"m.text"},"ts":1600380879000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"(and if \"nothing\", undefined)","msgtype":"m.text"},"ts":1600380888000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there an eshost mode to print the result of running a statement","msgtype":"m.text"},"ts":1600380918000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1600380927000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"print()","msgtype":"m.text"},"ts":1600380929000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"you can't pass a statement to print","msgtype":"m.text"},"ts":1600380934000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"eval :P","msgtype":"m.text"},"ts":1600380940000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oh right eval","msgtype":"m.text"},"ts":1600380945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":" `eshost -stx \"print(eval('99; do { -99; try { 42 } catch (e) { -1 } finally { break; -3 }; } while (false);'))\"`","msgtype":"m.text"},"ts":1600380950000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"-tse ftw","msgtype":"m.text"},"ts":1600380963000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"clearly eshost needs a `--print` arg, but lol that would probably interact badly with completion semantics tests","msgtype":"m.text"},"ts":1600380980000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we should have do expressions ASAP","msgtype":"m.text"},"ts":1600380982000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"wow almost everything gets the last one wrong","msgtype":"m.text"},"ts":1600380986000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"engine262 and spidermonkey op","msgtype":"m.text"},"ts":1600380999000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"leobalter: I mean `do` exprs would effectively be the motivation to fix these, right?","msgtype":"m.text"},"ts":1600381017000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"they're kind of cosmetic at present","msgtype":"m.text"},"ts":1600381040000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"do expressions would have to specify these things yeah","msgtype":"m.text"},"ts":1600381050000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: it would help me using eshost -e","msgtype":"m.text"},"ts":1600381149000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"my use case is probably the least relevant but I'd love it","msgtype":"m.text"},"ts":1600381168000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"I just want some sort of `do Block`","msgtype":"m.text"},"ts":1600381196000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"lol yeah no there are various motivations for having do expressions, but I mean, I think the strongest reason to fix the bugs you're looking at is \"so that we can have do expressions\"","msgtype":"m.text"},"ts":1600381206000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and they have to allow control flow :^)","msgtype":"m.text"},"ts":1600381239000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol technically it is a point to add to the list","msgtype":"m.text"},"ts":1600381287000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"do expressions are kind of too powerful. the `do Block` is simple in theory but then you can simulate throw expressions with it, like in default values of function params","msgtype":"m.text"},"ts":1600381296000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"`fn(x = do { throw 'hi' }) {} `","msgtype":"m.text"},"ts":1600381318000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"seems fine to me","msgtype":"m.text"},"ts":1600381336000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"p sure the throw expression proposal would simplify that to `fn(x = throw 'hi') {}`","msgtype":"m.text"},"ts":1600381355000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"FWIW, I'd be fine.","msgtype":"m.text"},"ts":1600381363000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"throw expression helps if you only need throw, but I actually want everything inside the do expressions","msgtype":"m.text"},"ts":1600381398000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"even a `eshost -e 'do { ... }'`","msgtype":"m.text"},"ts":1600381421000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"leobalter: why?","msgtype":"m.text"},"ts":1600381431000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu would you mind specifying what part you're referring to?","msgtype":"m.text"},"ts":1600381451000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"re: but I actually want everything inside the do expressions","msgtype":"m.text"},"ts":1600381463000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"for testing, I have many cases I could benefit of do expressions instead of a whole immediate fn or even an arrow function. I also can benefit of verifying completion values without eval and all the garbage from eval. Plus one for throw statements","msgtype":"m.text"},"ts":1600381547000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"composing default parameters too","msgtype":"m.text"},"ts":1600381570000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"i'd prefer some of those corner cases to be not expressible at all","msgtype":"m.text"},"ts":1600381602000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"well, that's one of the reasons I don't try to champion the do expressions proposal. I'd like it to be simple and even thou, I don't find my use cases compelling enough to convince other people","msgtype":"m.text"},"ts":1600381677000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":" i just don't want do expressions to change anything except being a block","msgtype":"m.text"},"ts":1600381730000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"makes refactoring harder if random stuff doesn't work","msgtype":"m.text"},"ts":1600381740000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"simple as `AssignmentExpression: do Block`","msgtype":"m.text"},"ts":1600381741000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"oof, break/return/continue in a do expression is something i very much do not want","msgtype":"m.text"},"ts":1600381832000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we could compromise and have `do good {}` and `do bad {}`","msgtype":"m.text"},"ts":1600381867000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`do crimes {}`","msgtype":"m.text"},"ts":1600381881000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"shu rkirsling devsnek ljharb  https://github.com/tc39/test262/pull/2792","msgtype":"m.text"},"ts":1600383468000,"senderName":"leobalter","senderId":"leobalter@irc"},
{"content":{"body":"intense","msgtype":"m.text"},"ts":1600383509000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]