[
{"content":{"body":"jmdyck thanks, fixed","msgtype":"m.text"},"ts":1600560632000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: In \"the smallest (closest to -&infin;) integral Number value ...\", shouldn't the -&infin; be marked as a Number value?","msgtype":"m.text"},"ts":1600563778000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(ditto 'greatest')","msgtype":"m.text"},"ts":1600563800000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ditto \"preferring the Number closer to +&infin;\"","msgtype":"m.text"},"ts":1600565746000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: makes sense. And why is it immutable binding for func name? Is it because that extra scope is shared between all function calls? Normally for function declarations, the binding is mutable, so why not same here","msgtype":"m.text"},"ts":1600567536000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"bendtherules that one I'm not sure of; that's how it's been since es3, or maybe before. I would speculate that it's because the only binding which can possibly exist in its scope, so unlike function declarations it doesn't really make sense to modify it because you can always just shadow it instead","msgtype":"m.text"},"ts":1600568068000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Hmm, but imo - its still a hidden variable introduced by js, and there is not much clue that it is going to be immutable - so a innocent user might write hello=123 within a function body anr actually face an error","msgtype":"m.text"},"ts":1600568339000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Also, would you say this behavior is documented from reading the mdn pade (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)?","msgtype":"m.text"},"ts":1600568588000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Seems undocumented to me, it talks a bit about read-only function.name,but not the binding","msgtype":"m.text"},"ts":1600568588000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"not sure what you mean by hidden","msgtype":"m.text"},"ts":1600568818000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"re: MDN: it's a wiki; if you think something is missing you can submit a fix","msgtype":"m.text"},"ts":1600568864000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"By hidden, i mean created implicitly / it's not super obvious","msgtype":"m.text"},"ts":1600569975000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Mdn - yes, i understand. just wanted to get more eyeballs on it and see if i am missing where this is documented. Anyway, no worries","msgtype":"m.text"},"ts":1600570102000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Bakkot: the definitions in \"Hours, Minutes, Second, and Milliseconds\" look a bit odd to me. Do you have time to talk about them?","msgtype":"m.text"},"ts":1600570128000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"bendtherules I think your reading of MDN is right; you fix it!","msgtype":"m.text"},"ts":1600570159000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"jmdyck sure","msgtype":"m.text"},"ts":1600570163000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all of the Date stuff is kind of a mess","msgtype":"m.text"},"ts":1600570179000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"e.g. HourFromTime","msgtype":"m.text"},"ts":1600570192000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"bendtherules er, sorry, that should be \"you could fix it!\"; did not mean that to be an imperative","msgtype":"m.text"},"ts":1600570209000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: üëç","msgtype":"m.text"},"ts":1600570215000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"I think we can assume that _t_ is a Number","msgtype":"m.text"},"ts":1600570225000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup, those should all take and return Numbers","msgtype":"m.text"},"ts":1600570282000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(which was intentional; the idea is to make it clear to implementors that they are expected to be doing floating-point arithmetic here)","msgtype":"m.text"},"ts":1600570331000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah, but II guess HoursPerDay is used as a real, hmm","msgtype":"m.text"},"ts":1600570358000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so the `/` is Number::divide?","msgtype":"m.text"},"ts":1600570368000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600570376000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as per 5.2.5: \"Numeric operators such as +, √ó, =, and ‚â• refer to those operations as determined by the type of the operands. [...] When applied to Numbers, the operators refer to the relevant operations within IEEE 754-2019.\"","msgtype":"m.text"},"ts":1600570404000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so then the other thing was MathReal modulo Number","msgtype":"m.text"},"ts":1600570464000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, looks like HoursPerDay, MinutesPerHour, and SecondsPerMinute have the wrong types","msgtype":"m.text"},"ts":1600570486000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"will change those to reals","msgtype":"m.text"},"ts":1600570490000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not thrilled about this section, in honesty","msgtype":"m.text"},"ts":1600570614000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wasn't happy with any approach we considered","msgtype":"m.text"},"ts":1600570618000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this seemed the least bad, in that is at least (hopefully) extremely clear for implementations","msgtype":"m.text"},"ts":1600570641000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unlike the current spec","msgtype":"m.text"},"ts":1600570645000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600570646000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait, not pushed, one sec","msgtype":"m.text"},"ts":1600570661000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok pushed","msgtype":"m.text"},"ts":1600570675000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is the requirement for FP arithmetic a backwards compat thing","msgtype":"m.text"},"ts":1600570684000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600570692000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I have a topic on the agenda for next week's meeting about this","msgtype":"m.text"},"ts":1600570701000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://docs.google.com/presentation/d/1gePsNmlP2u0pYXm0LWO3d7eM4Q_y5Ozx0qXN1zWOv58/edit#slide=id.g8f7c6b6dbb_0_0","msgtype":"m.text"},"ts":1600570718000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, backwards compat + engines are unlikely to want to do high-precision arithmetic here","msgtype":"m.text"},"ts":1600570746000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"web reality then?","msgtype":"m.text"},"ts":1600570771000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"web reality is a good way to put it, yes","msgtype":"m.text"},"ts":1600570784000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"web reality is that these are all FP arithmetic","msgtype":"m.text"},"ts":1600570797000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it needs to interconvert because floor and modulo are only defined on mathreal","msgtype":"m.text"},"ts":1600570833000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1600570838000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"those operations make sense for the restricted subset of numbers in use here, but we figured it wasn't worth introducing them on Numbers given that a complete definition would need to say what to do about edge cases which don't come up in these uses","msgtype":"m.text"},"ts":1600570944000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600570970000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: TimeZoneString applies 'abs' to Number (twice)","msgtype":"m.text"},"ts":1600572563000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"fun, one sec","msgtype":"m.text"},"ts":1600572620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600572790000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ToIntegerOrInfinity's preamble says it returns a Number, but looks like it returns extendedmath","msgtype":"m.text"},"ts":1600573001000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"nice catch, fixed","msgtype":"m.text"},"ts":1600573069000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also, \"let _integer_ be -_integer_\": \"let\" should be \"set\"","msgtype":"m.text"},"ts":1600573288000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also \"_number_ &lt; 0\" is mixed-type","msgtype":"m.text"},"ts":1600573328000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600573377000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"really want to get ecmarkup to the point where it can warn for the `let` vs `set` error; that shouldn't be that hard","msgtype":"m.text"},"ts":1600573412000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`[Number 10]` vs `Number { 10 }`","msgtype":"m.text"},"ts":1600610821000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"6.2.5.3¬†IsGenericDescriptor returns true in step-2, what does that mean or when does that happen?","msgtype":"m.text"},"ts":1600612769000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: if the descriptor describes enumerability/configurablity but not data or accessors","msgtype":"m.text"},"ts":1600618862000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: without data or accessors what's the point?","msgtype":"m.text"},"ts":1600619031000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"check where it is called from i guess?","msgtype":"m.text"},"ts":1600619068000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Hmm, thinking of use-cases","msgtype":"m.text"},"ts":1600621509000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"it's so you can e.g. change an existing property's enumerability without changing its value","msgtype":"m.text"},"ts":1600622614000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: are you asking about the output display? object-inspect uses `Object(10)`, as another alternative","msgtype":"m.text"},"ts":1600634413000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1600635077000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: msPerDay is Number, so ùîΩ(msPerDay) in MakeDate is redundant.","msgtype":"m.text"},"ts":1600638076000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Bakkot: in MakeDay, _m_ / 12 is mixed-type. ‚Ñù(_m_ / 12) should be ‚Ñù(_m_) / 12?","msgtype":"m.text"},"ts":1600639293000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"In Math.clz32, should \"the unsigned 32-bit binary representation of _n_\" have \"R(_n_)\"?","msgtype":"m.text"},"ts":1600639994000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Number.prototype.toExponential: \"_f_ is *+0*<sub>ùîΩ</sub>\" should be just \"_f_ is 0\"","msgtype":"m.text"},"ts":1600640178000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also: \"Set _x_ to ‚Ñù(_x_).\" is unfortunate","msgtype":"m.text"},"ts":1600640300000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"fixed the first 1, 2, and 4 in that list. for the 3, I don't feel strongly either way; left it alone for now","msgtype":"m.text"},"ts":1600640305000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah, that unfortunateness is what prompted https://github.com/tc39/ecma262/issues/2178 I think","msgtype":"m.text"},"ts":1600640340000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I can clean some of those up now if it's tripping your analysis up","msgtype":"m.text"},"ts":1600640365000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but anyhow,  ‚Ñù(_x_) is redundant thereafter","msgtype":"m.text"},"ts":1600640376000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"my analysis just raises a warning, so not really tripping it up.","msgtype":"m.text"},"ts":1600640427000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"so it is. just the one occurrence in toExponential, or are there others?","msgtype":"m.text"},"ts":1600640427000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i only see one.","msgtype":"m.text"},"ts":1600640447000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I guess two because there's the NOTE after","msgtype":"m.text"},"ts":1600640461000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*three","msgtype":"m.text"},"ts":1600640471000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1600640474000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600640545000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: Date.prototype.setUTCHours has unset alias _newDate_","msgtype":"m.text"},"ts":1600642913000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"should be _date_, looks like. Or vice versa.","msgtype":"m.text"},"ts":1600642980000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"pushed","msgtype":"m.text"},"ts":1600643015000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"copy-paste error for setHours, looks like","msgtype":"m.text"},"ts":1600643029000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"those algorithms are almost identical but have different aliases, for some reason","msgtype":"m.text"},"ts":1600643044000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and are \"is present\" steps and \"is not present\" steps supposed to be separate?","msgtype":"m.text"},"ts":1600643074000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600643099000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the `If _t_ is *NaN*, return *NaN*.` has to happen after the initial coercions (for side-effect order reasons) but before the fallback computations (so that the computations are guarded against _t_ being NaN)","msgtype":"m.text"},"ts":1600643147000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so in status quo, t = NaN leads to NaN-arithmetic.","msgtype":"m.text"},"ts":1600643241000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600643267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and this agrees with web reality?","msgtype":"m.text"},"ts":1600643301000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"there's an earlier PR fixing just this (which I just updated with the semantics from 2007) at https://github.com/tc39/ecma262/pull/2136","msgtype":"m.text"},"ts":1600643305000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"interesting question!","msgtype":"m.text"},"ts":1600643312000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"s/this/what 2007 does/","msgtype":"m.text"},"ts":1600643316000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"no, there is not engine agreement","msgtype":"m.text"},"ts":1600643317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it matches Spidermonkey","msgtype":"m.text"},"ts":1600643326000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"JSC and V8 both do other, distinct things","msgtype":"m.text"},"ts":1600643337000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"see https://github.com/tc39/ecma262/pull/2136#issuecomment-695825659","msgtype":"m.text"},"ts":1600643341000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so that'll be considered at the meeting?","msgtype":"m.text"},"ts":1600643440000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1600643444000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1600643455000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"can't guarantee there be consensus since it's a late addition","msgtype":"m.text"},"ts":1600643460000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but spidermonkey is the party which cares most about that, and I happen to be asking to make the spec match their implementation, so I'm hopeful","msgtype":"m.text"},"ts":1600643494000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"afk a while","msgtype":"m.text"},"ts":1600644268000,"senderName":"jmdyck","senderId":"jmdyck@irc"}
]