[
{"content":{"body":"whoa","msgtype":"m.text"},"ts":1578533862000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"links to `thisTimeValue` in the spec hard-change the domain to tc39.github.io","msgtype":"m.text"},"ts":1578533879000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what on earth","msgtype":"m.text"},"ts":1578541928000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"everything listed in here hard-links to tc39.github.io/ecma262 and everything else keeps the current page","msgtype":"m.text"},"ts":1578541973000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://github.com/bterlson/ecmarkup/blob/master/es6biblio.json","msgtype":"m.text"},"ts":1578541974000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"meaning that clicking `thisTimeValue` or `thisBooleanValue` always reloads the page","msgtype":"m.text"},"ts":1578542044000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but `thisStringValue`, which isn't in there, is just fine","msgtype":"m.text"},"ts":1578542071000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ouch","msgtype":"m.text"},"ts":1578542339000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: i wonder if they're in there for proposals, to link *those* properly","msgtype":"m.text"},"ts":1578542367000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ohhh","msgtype":"m.text"},"ts":1578542423000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which means three things; thisStringValue *should* be in there; the domain needs to be updated for all of them; and also when running on the spec itself, those links should be relative, not absolute","msgtype":"m.text"},"ts":1578542468000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"agreed...","msgtype":"m.text"},"ts":1578542529000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but also i'd suspect that ideally, that \"biblio\" thing shouldn't be embedded in ecmarkup but should be fetched (at publish time if not at runtime) from a build artifact of the spec itself","msgtype":"m.text"},"ts":1578542574000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah :-/","msgtype":"m.text"},"ts":1578542596000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"are there other things in that json that are linked incorrectly in the actual spec?","msgtype":"m.text"},"ts":1578542663000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rkirsling: in terms of a short term fix: if there's any chance ecmarkup can override those biblio things via a CLI flag or something, or disable it, that'd be ideal","msgtype":"m.text"},"ts":1578542670000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, yeah","msgtype":"m.text"},"ts":1578542692000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not sure if there's anything that's like, mispointed, say","msgtype":"m.text"},"ts":1578542715000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well, that has an absolute link but shouldn't","msgtype":"m.text"},"ts":1578542726000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but it's surely possible since the last sync was for es2017","msgtype":"m.text"},"ts":1578542729000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right, but i'm wondering if all the things that were *in* es2017 are linked in this wrong way","msgtype":"m.text"},"ts":1578542744000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"or if not, then why is thisTimeValue special","msgtype":"m.text"},"ts":1578542760000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I believe the answer is no; only those two have aoids","msgtype":"m.text"},"ts":1578542994000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I don't actually know what an aoid is","msgtype":"m.text"},"ts":1578543006000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"abstract operation id","msgtype":"m.text"},"ts":1578543029000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ah cool","msgtype":"m.text"},"ts":1578543052000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"err sorry","msgtype":"m.text"},"ts":1578543068000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that was not specific enough, what I meant to say is","msgtype":"m.text"},"ts":1578543082000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"those are the only two `<dfn>`s with an `aoid`","msgtype":"m.text"},"ts":1578543104000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"other elements are fine somehow(???)","msgtype":"m.text"},"ts":1578543115000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ah, so maybe it's just an ecmarkup bug with dfns that have aoids?","msgtype":"m.text"},"ts":1578543121000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"can you file that on ecmarkup? :-)","msgtype":"m.text"},"ts":1578543129000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thisStringValue also has dfn-with-aoid","msgtype":"m.text"},"ts":1578543244000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: right, but ecmarkup's biblio.json hasn't been updated since es2017, and thisStringValue wasn't moved to be a proper abstract op until es2018 iirc","msgtype":"m.text"},"ts":1578543292000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"this is gonna be hard to know because I don't know how that JSON is generated","msgtype":"m.text"},"ts":1578543315000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"there's like 5 or 6 thisFooValue's, and in es2017 and earlier, i think only thisTimeValue and thisBooleanValue were proper abstract ops, markup-wise","msgtype":"m.text"},"ts":1578543319000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yup, 6","msgtype":"m.text"},"ts":1578543328000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I don't understand why ThisXyxValue ops are special at all","msgtype":"m.text"},"ts":1578543342000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: they shouldn't be anymore","msgtype":"m.text"},"ts":1578543360000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: in es2017 and earlier tho, they were","msgtype":"m.text"},"ts":1578543370000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"they start with a lowercase","msgtype":"m.text"},"ts":1578543371000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like, I think something causes the _links_ to `thisTimeValue` to get \"namespaced\" with tc39.github.io/ecma262","msgtype":"m.text"},"ts":1578543372000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek: true, that's the only thing that's unique","msgtype":"m.text"},"ts":1578543381000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well, they're fairly special in that they don't have their own clause","msgtype":"m.text"},"ts":1578543384000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but presumably the trigger point is not at the reference site but at the definition site","msgtype":"m.text"},"ts":1578543414000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1578543425000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's baffling because by staring at the JSON, it looks like RepeatMatcher should have the exact same problem","msgtype":"m.text"},"ts":1578544055000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hence my thinking that <dfn> is problematic in particular","msgtype":"m.text"},"ts":1578544069000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but if, running locally here, the *only* thing affecting that behavior is the JSON","msgtype":"m.text"},"ts":1578544112000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"then why is the problem not reflected in the JSON...","msgtype":"m.text"},"ts":1578544130000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1578548338000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"strangely enough, if I run `ecmarkup` with `--biblio` to produce the new copy, then drag that over to node_modules/ecmarkup and rebuild using it","msgtype":"m.text"},"ts":1578548407000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"then (1) the JSON is up-to-date and has tc39.es in it, of course, but (2) instead of *more* things hard-linking to tc39.es, everything seems to just use my local copy","msgtype":"m.text"},"ts":1578548480000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"no idea why that is but maybe we can just update ecmarkup then","msgtype":"m.text"},"ts":1578548496000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: updating the build process in 262 is, atm, much easier than updating ecmarkup","msgtype":"m.text"},"ts":1578549679000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: that's understandable, but there isn't a way to ignore node_modules/ecmarkup/es6biblio.json","msgtype":"m.text"},"ts":1578550049000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: the build script could `mv` the new copy into node_modules and then rerun it","msgtype":"m.text"},"ts":1578550078000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that is true but I think it would double the build time","msgtype":"m.text"},"ts":1578550148000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"¯\\_(ツ)_/¯ it happens in ci","msgtype":"m.text"},"ts":1578550221000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and it's a temporary workaround anyways","msgtype":"m.text"},"ts":1578550233000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hrm, I'll pick this up again tomorrow","msgtype":"m.text"},"ts":1578552477000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: sorry for answering your question late, but those unexpected getSeconds() results derive from the fact that the time zone database has fractional-hour offsets for so-called \"local mean time\" of time zones before their official introduction. US time zones were introduced in 1883 (https://www.timeanddate.com/time/zone/usa#the ), so any dates before that will have offsets that are not necessarily an integer number of quarter-hours","msgtype":"m.text"},"ts":1578553364000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"gibson042: wow ok, so that behavior is *correct*?","msgtype":"m.text"},"ts":1578553487000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yep, continget upon tzdata","msgtype":"m.text"},"ts":1578553512000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"woof, ok","msgtype":"m.text"},"ts":1578553528000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"a kind soul has exposed 2019c as npm packages, so you can actually explore it fairly conveniently: https://runkit.com/embed/dv5lqhvkipy7","msgtype":"m.text"},"ts":1578553593000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"e.g., America/Los_Angeles was +07:52:58 until 1883-11-18T12:07:02.000 local time","msgtype":"m.text"},"ts":1578553648000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"so it sounds like probably not having those fractional offsets is compliant with 262, but 402 requires applying them?","msgtype":"m.text"},"ts":1578553660000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it should be independent of 402","msgtype":"m.text"},"ts":1578553682000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"so in 262, it's hand-wavy \"implementation-dependent\" stuff, or is there an explicit part about it?","msgtype":"m.text"},"ts":1578553714000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the former: https://tc39.es/ecma262/#sec-local-time-zone-adjustment","msgtype":"m.text"},"ts":1578553745000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"\"offset of the local time zone from UTC measured in milliseconds at time represented by...\"","msgtype":"m.text"},"ts":1578553773000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"in reality, that's a tzdb consultation","msgtype":"m.text"},"ts":1578553815000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"thanks, that makes sense","msgtype":"m.text"},"ts":1578553883000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh wow, as soon as my head hit the pillow the situation with that biblio thing clicked","msgtype":"m.text"},"ts":1578554026000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ljharb: if it's literally a \"bibliography\" for use in something that's *not* 262 (i.e. a spec proposal), then the current issue we're seeing I think amount to viewing the current spec as \"not 262\" by virtue of it not being ES2017","msgtype":"m.text"},"ts":1578554115000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hence up-to-date JSON and empty JSON should have the same effect","msgtype":"m.text"},"ts":1578554156000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: aha","msgtype":"m.text"},"ts":1578554191000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"so we should be able to do your \"skip biblio for 262 itself\" by `echo \"{}\" > node_modules/ecmarkup/es6biblio.json`","msgtype":"m.text"},"ts":1578554201000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"awesoe","msgtype":"m.text"},"ts":1578554205000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"let's do that in 262 as a workaround","msgtype":"m.text"},"ts":1578554209000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"👍 will PR tomorrow","msgtype":"m.text"},"ts":1578554222000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"woot, ty","msgtype":"m.text"},"ts":1578554240000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"is there a particularly good reason that bigint literals are allowed as property names in object literals?","msgtype":"m.text"},"ts":1578601204000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I guess all numeric literals were already allowed (not just decimal)","msgtype":"m.text"},"ts":1578601276000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"feels like mostly gratuitous implementer pain, tho","msgtype":"m.text"},"ts":1578601293000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"is it that difficult to implement? bigint literals are a distinct token so it should be straightforward","msgtype":"m.text"},"ts":1578602399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not absolutely terrible, but we're having to do some extra effort to handle it now","msgtype":"m.text"},"ts":1578603982000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I'm not sure if that extra effort is from careless oversight or what, not following the bug closely enough","msgtype":"m.text"},"ts":1578604004000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"my guess is that the good reason would have been needed to deviate from the precedent, but no idea","msgtype":"m.text"},"ts":1578604192000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"They aren’t a distinct token — NumericLiteral is the token and it’s the static semantics of NumericValue that make the distinction","msgtype":"m.text"},"ts":1578604235000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"bathos: i mean in implementations","msgtype":"m.text"},"ts":1578604259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"implementations can and likely do realize it as a distinct token, yeah","msgtype":"m.text"},"ts":1578604270000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"what makes it undesirable for them to be legal there, though?","msgtype":"m.text"},"ts":1578604346000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"they already have three forms","msgtype":"m.text"},"ts":1578604376000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"identifier, numeric literal, and computed","msgtype":"m.text"},"ts":1578604391000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh and functions","msgtype":"m.text"},"ts":1578604466000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"functions?","msgtype":"m.text"},"ts":1578604475000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"`({ f() {} })`","msgtype":"m.text"},"ts":1578604503000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"methods i guess","msgtype":"m.text"},"ts":1578604511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"isn’t that just identifier?","msgtype":"m.text"},"ts":1578604521000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"e.g. `({ 1() {} })` is also legit","msgtype":"m.text"},"ts":1578604554000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"1 isn't an identifier","msgtype":"m.text"},"ts":1578604561000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, I mean both are just uses of LiteralPropertyName","msgtype":"m.text"},"ts":1578604589000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"(iirc)","msgtype":"m.text"},"ts":1578604612000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"anyway my point is that there's already a lot of stuff ther","msgtype":"m.text"},"ts":1578604675000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there*","msgtype":"m.text"},"ts":1578604677000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i.e. in `({ XXX() {}, XXX: 1 })`, the XXX part is the property name bit which is common to both productions","msgtype":"m.text"},"ts":1578604691000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"yeah, I suppose I’d have thought disallowing one of the forms of numeric literal is ‘more’ rather than ‘less’ stuff to account for","msgtype":"m.text"},"ts":1578604718000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"it looks like both V8 and Spidermonkey don’t allow bigint property names actually","msgtype":"m.text"},"ts":1578604838000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"so changing it in the spec to match that ought to be safe at least","msgtype":"m.text"},"ts":1578604924000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"SpiderMonkey does allow it as of a super-recent (i.e. measured in hours) bugfix","msgtype":"m.text"},"ts":1578606380000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I was just trying to do the step back and consider whether this is sensible thing, that it does not appear anyone else had done","msgtype":"m.text"},"ts":1578606410000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"given all the existing silliness that is accepted -- prefixes, fractional parts, separators, yadda yadda -- excluding just bigints is probably not obviously justified","msgtype":"m.text"},"ts":1578606468000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I would feel surprised as a user if it threw, that's for sure","msgtype":"m.text"},"ts":1578606902000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`({ 0x20000000000001: 1, 0x20000000000001n: 2 })` :)","msgtype":"m.text"},"ts":1578606918000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"the \"n\" is for \"no\"","msgtype":"m.text"},"ts":1578606944000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I smell an eslint rule","msgtype":"m.text"},"ts":1578606978000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"jmdyck: can you write a proxy such that it behaves exactly like an array","msgtype":"m.text"},"ts":1578607241000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm pretty sure you can","msgtype":"m.text"},"ts":1578607259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"setting aside Array.isArray, presumably","msgtype":"m.text"},"ts":1578607262000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"well the argument is about how IsArray works","msgtype":"m.text"},"ts":1578607270000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"if something is behaviourally identical to an array exotic object","msgtype":"m.text"},"ts":1578607283000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is it an array exotic object","msgtype":"m.text"},"ts":1578607287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doesn't IsArray defer to the proxy's target?","msgtype":"m.text"},"ts":1578608196000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"so then, only if the proxy's target is an array","msgtype":"m.text"},"ts":1578608216000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"rickbutton: the question is like, if something behaves exactly like an array","msgtype":"m.text"},"ts":1578608253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"should IsArray be true or false for it","msgtype":"m.text"},"ts":1578608262000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1578608336000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i'd say there's a difference between an array exotic object","msgtype":"m.text"},"ts":1578608439000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and something that happens to behave like one","msgtype":"m.text"},"ts":1578608444000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"formally, all IsArray establishes is a single, useless fact: that the object has a length property which is unconfigurable (though it does not guarantee it is a valid length)","msgtype":"m.text"},"ts":1578610475000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"the proxy-passthrough behavior kills everything else it could have told you","msgtype":"m.text"},"ts":1578610525000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"since that’s the sole thing that a proxy whose target IsArray could not change","msgtype":"m.text"},"ts":1578610550000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"@devsnek the spec agrees with you at least, since IsArray itself requires that distinction to exist","msgtype":"m.text"},"ts":1578610644000,"senderName":"bathos","senderId":"bathos@irc"}
]