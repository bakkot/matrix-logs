[
{"content":{"body":"directives are evaluated right","msgtype":"m.text"},"ts":1586203874000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not that they have any side effects","msgtype":"m.text"},"ts":1586203879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"looks like it.","msgtype":"m.text"},"ts":1586204258000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"For them not to be evaluated, ExpressionStatement would need some kind of exception for directives.","msgtype":"m.text"},"ts":1586204291000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: yep","msgtype":"m.text"},"ts":1586204396000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1586204403000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"only really matters if you get a completion value","msgtype":"m.text"},"ts":1586204407000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"why are for loops so complex :(","msgtype":"m.text"},"ts":1586204416000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there are like nine different variants","msgtype":"m.text"},"ts":1586204442000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because we didn't have iterators / wanted to match other langs in syntax","msgtype":"m.text"},"ts":1586204506000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"i'd be cool with a very stripped down JS spec which I think is what mark was partially asking about with engine262 dogfood coverage","msgtype":"m.text"},"ts":1586204550000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if you run engine262 through babel you can get it pretty low","msgtype":"m.text"},"ts":1586204861000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"replaces for loops with Array.from({length}, why)","msgtype":"m.emote"},"ts":1586204961000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"engine262 uses a lot of iteration ngl","msgtype":"m.text"},"ts":1586204981000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"bradleymeck: +1 to that","msgtype":"m.text"},"ts":1586205076000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Pls no","msgtype":"m.text"},"ts":1586205107000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":":-p","msgtype":"m.text"},"ts":1586205127000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"srsly tho","msgtype":"m.text"},"ts":1586205141000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"reminds me of something i found in babel-parser today","msgtype":"m.text"},"ts":1586205144000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://gc.gy/53910196.png","msgtype":"m.text"},"ts":1586205195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`undefinedPrivateNames` is a Map","msgtype":"m.text"},"ts":1586205206000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1586205225000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"slowly laying out for loop parsing https://gc.gy/53912157.png","msgtype":"m.text"},"ts":1586207164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek don't forget `for (let = 0; let < 10; ++let)` is legal","msgtype":"m.text"},"ts":1586207220000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yo dawg","msgtype":"m.text"},"ts":1586207241000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's one of the ones at the bottom","msgtype":"m.text"},"ts":1586207243000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"still uncategorized","msgtype":"m.text"},"ts":1586207253000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"C-style for loop is totally in my top three most hated programming constructs","msgtype":"m.text"},"ts":1586207356000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i hate how you can't run test262 until you can parse for loops","msgtype":"m.text"},"ts":1586207378000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean it's not altogether unreasonable to expect control flow to work XD","msgtype":"m.text"},"ts":1586207407000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"if your control flow has 12 different productions it might be","msgtype":"m.text"},"ts":1586207440000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't need all of them to run test262","msgtype":"m.text"},"ts":1586207527000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i suppose i could search through the harness for all the ones that are used","msgtype":"m.text"},"ts":1586207548000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but i'll have to write this sooner or later anyway","msgtype":"m.text"},"ts":1586207566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you don't even need most of the harness files most of the time","msgtype":"m.text"},"ts":1586207587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"assert.js doesn't have any I think","msgtype":"m.text"},"ts":1586207593000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my guess would be the array equality ones","msgtype":"m.text"},"ts":1586207599000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"c-style for loops are very fast which is why they are very good","msgtype":"m.text"},"ts":1586207662000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ðŸ”¥","msgtype":"m.text"},"ts":1586207690000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"goodness should be made fast tho, not fastness implying goodness","msgtype":"m.text"},"ts":1586207719000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"prs welcome :P","msgtype":"m.text"},"ts":1586207734000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ya good luck","msgtype":"m.text"},"ts":1586207737000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I'm not objecting to bounded iteration :p","msgtype":"m.text"},"ts":1586207741000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol well v8 did it for iteration methods :-p","msgtype":"m.text"},"ts":1586207775000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"wait till you hear my position on raw pointers and how fast they are","msgtype":"m.text"},"ts":1586207982000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"do tell","msgtype":"m.text"},"ts":1586208000000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"raw pointers are not as fast as they could be because you need to dereference at least once, so they're only mostly good","msgtype":"m.text"},"ts":1586208092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"does anyone here really love writing for statement parsers","msgtype":"m.text"},"ts":1586208608000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"@devsnek yes: https://github.com/shapesecurity/shift-parser-js/blob/6776a563274992579c01dbb53789b1f032c7deed/src/parser.js#L690-L821","msgtype":"m.text"},"ts":1586208654000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i was just reading that","msgtype":"m.text"},"ts":1586208668000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: are for statements locationless in the shift parser","msgtype":"m.text"},"ts":1586208820000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what does \"locationless\" mean","msgtype":"m.text"},"ts":1586208829000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it doesn't register a location anywhere","msgtype":"m.text"},"ts":1586208850000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, that happens in parseStatement","msgtype":"m.text"},"ts":1586208855000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/shapesecurity/shift-parser-js/blob/6776a563274992579c01dbb53789b1f032c7deed/src/parser.js#L546-L548","msgtype":"m.text"},"ts":1586208861000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"recursively?","msgtype":"m.text"},"ts":1586208882000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see nvm","msgtype":"m.text"},"ts":1586208891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's a recursive descent parser, so... yeah I guess recursively?","msgtype":"m.text"},"ts":1586208898000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i forgot that Statement isn't a concrete node type","msgtype":"m.text"},"ts":1586208927000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's a nice simplification","msgtype":"m.text"},"ts":1586208939000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah the types in our AST avoid empty wrappers, mostly, with the exception of ExpressionStatement and VariableDeclarationStatement (IIRC) which need wrappers because the thing they're wrapping can appear in other contexts","msgtype":"m.text"},"ts":1586209197000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah i don't think anyone has a Statement node (hopefully)","msgtype":"m.text"},"ts":1586209242000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"jsexplain might","msgtype":"m.text"},"ts":1586209291000,"senderName":"Bakkot","senderId":"Bakkot@irc"}
]