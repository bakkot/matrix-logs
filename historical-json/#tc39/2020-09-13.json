[
{"content":{"body":"Bakkot: were you planning to PR the removal of overloads? If not, i would.","msgtype":"m.text"},"ts":1599958261000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(though really i should probably be looking at 2007 again)","msgtype":"m.text"},"ts":1599958341000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck I wasn't planning on prioritizing it, no","msgtype":"m.text"},"ts":1599958824000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you make a PR I'll review it","msgtype":"m.text"},"ts":1599958831000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1599958846000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: Math.max is conflicted about # of args: first para says zero or more, second para says at least two.","msgtype":"m.text"},"ts":1600010250000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"then the first para is wrong, it’s length is 2 and signature agrees","msgtype":"m.text"},"ts":1600010310000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hm, but the former text says \"If no arguments are given, the result is *-&infin;*.\"","msgtype":"m.text"},"ts":1600010426000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"goes back to when Math.max was introduced in ES6.","msgtype":"m.text"},"ts":1600010515000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"test262/test/built-ins/Math/max/S15.8.2.11_A1.js tests for it","msgtype":"m.text"},"ts":1600010565000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"also a couple tests for Math.max with a single arg.","msgtype":"m.text"},"ts":1600010691000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Ditto Math.min, of course.","msgtype":"m.text"},"ts":1600010798000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Sorry, not ES6.","msgtype":"m.text"},"ts":1600011020000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Math.max/min go back to ES1, but they took exactly 2 args until ES3","msgtype":"m.text"},"ts":1600011105000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"since ES3, there's been an \"if no arguments\" bullet.","msgtype":"m.text"},"ts":1600011144000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think in cases like this we should do","msgtype":"m.text"},"ts":1600011178000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"In ES3, the heading for max was \"15.8.2.11  max([value1[,value2[,...]]])\", similarly for min.","msgtype":"m.text"},"ts":1600011187000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"`Math.max ( ... args )` and \"The length of Math.max is 2\"","msgtype":"m.text"},"ts":1600011191000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ES5 had all the [], but they're not in ES6 headings: \"20.2.2.24             Math.max ( value1, value2  , …values  )\"","msgtype":"m.text"},"ts":1600011277000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"ljharb: would you like me to make a PR?","msgtype":"m.text"},"ts":1600011552000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the full-bracketing disappeared between draft 22 and 23 of ES6.","msgtype":"m.text"},"ts":1600011703000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Do we still not have an archive for wiki.ecmascript.org?","msgtype":"m.text"},"ts":1600012314000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Didn","msgtype":"m.text"},"ts":1600013091000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I didn't find anything in the bugzilla archive that would explain the loss of full-bracketing. There aren't any margin notes at that point in the 'notes' version of draft 23.","msgtype":"m.text"},"ts":1600013174000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i think it’s better to avoid length overrides","msgtype":"m.text"},"ts":1600013399000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think it's better to avoid \"[value1[,value2[,...]]]\"","msgtype":"m.text"},"ts":1600013435000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in that case they’re all optional and I’d agree","msgtype":"m.text"},"ts":1600013460000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i don’t think your signature suggestion is better.","msgtype":"m.text"},"ts":1600013466000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"presumably it's impossible to avoid a \"length override\", because that would require the heading to have 2 \"normal\" parameters, which misleads the reader.","msgtype":"m.text"},"ts":1600016919000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"s/impossible/misleading/","msgtype":"m.text"},"ts":1600016957000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I'm assuming \"length override\" = \"explicitly specifying a length because it's different from what you'd infer from the heading\"","msgtype":"m.text"},"ts":1600017163000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: yes","msgtype":"m.text"},"ts":1600017395000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"there's a number of methods like this, where we really use varargs but the first N args are explicit","msgtype":"m.text"},"ts":1600017414000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what do you mean by \"really use varargs\"?","msgtype":"m.text"},"ts":1600017533000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"like Math.max - iow, the way they operate is as if the signature is `( ...args )` but they still have a required minimum number of args","msgtype":"m.text"},"ts":1600018077000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but Math.max *doesn't* have a required minimum number of args","msgtype":"m.text"},"ts":1600018236000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah, it doesn't even assume the first two to `undefined`","msgtype":"m.text"},"ts":1600018359000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I still don't get built in modules","msgtype":"m.text"},"ts":1600021884000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like given existing patterns with globals they just seem strictly worse","msgtype":"m.text"},"ts":1600021895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that is my feeling also","msgtype":"m.text"},"ts":1600021902000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if js had started with them, I'd be a fan","msgtype":"m.text"},"ts":1600021915000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"IIRC domenic came to the same conclusion after champion stuff in that space for years","msgtype":"m.text"},"ts":1600021943000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://github.com/w3ctag/design-reviews/issues/421#issuecomment-561705979","msgtype":"m.text"},"ts":1600021971000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"*after championing","msgtype":"m.text"},"ts":1600021976000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah his post in the reflector was pretty clear about it","msgtype":"m.text"},"ts":1600021987000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that said, I do understand the motivation","msgtype":"m.text"},"ts":1600022017000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ya they sound very nice","msgtype":"m.text"},"ts":1600022035000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but just given that we have scripts","msgtype":"m.text"},"ts":1600022040000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmmmm","msgtype":"m.text"},"ts":1600022130000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"given TLA, I wonder if we might just start having globals for stdlib stuff where you have to await the global to get the actual functionality","msgtype":"m.text"},"ts":1600022155000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"with TLA in modules that's not bad","msgtype":"m.text"},"ts":1600022164000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and then you can polyfill asynchronously without needing import maps","msgtype":"m.text"},"ts":1600022185000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sounds bad","msgtype":"m.text"},"ts":1600022195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sorry, await a property on a global object","msgtype":"m.text"},"ts":1600022196000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"what's bad about it?","msgtype":"m.text"},"ts":1600022206000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"having to await a global","msgtype":"m.text"},"ts":1600022218000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait do you mean like","msgtype":"m.text"},"ts":1600022224000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`await GoodMap`","msgtype":"m.text"},"ts":1600022232000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or `await X.doY()`","msgtype":"m.text"},"ts":1600022242000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'd probably phrase it as `await goodMap()` or something","msgtype":"m.text"},"ts":1600022258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`await std.GoodMap()`, I dunno","msgtype":"m.text"},"ts":1600022303000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it's weird to me that async is needed","msgtype":"m.text"},"ts":1600022404000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I agree it's less nice","msgtype":"m.text"},"ts":1600022419000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but it's necessary to meet other design goals","msgtype":"m.text"},"ts":1600022433000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"so there's a tradeoff","msgtype":"m.text"},"ts":1600022439000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is possible the answer is, this is sufficiently unnice that it is not worth achieving those goals","msgtype":"m.text"},"ts":1600022464000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I am inclined to the other side of that","msgtype":"m.text"},"ts":1600022474000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the not-niceness is mostly paid by developers, whereas the other goals (async, as-needed polyfills) are paid by every user","msgtype":"m.text"},"ts":1600022512000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we should come up with feature codes for each thing added","msgtype":"m.text"},"ts":1600022583000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and that can be sent by browsets","msgtype":"m.text"},"ts":1600022588000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"browsers, even","msgtype":"m.text"},"ts":1600022591000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2174","msgtype":"m.text"},"ts":1600025403000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(since we were talking about it here)","msgtype":"m.text"},"ts":1600025471000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: hm, that's true. in that case maybe the length override makes more sense","msgtype":"m.text"},"ts":1600027794000,"senderName":"ljharb","senderId":"ljharb@irc"}
]