[
{"content":{"body":"have read-only arraybuffers ever been discussed? (https://github.com/nodejs/node/issues/27080)","msgtype":"m.text"},"ts":1554340605000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I vaguely remember such discussions from the es-discuss days. Something something too complicated something something create higher-level abstractions on top of SharedArrayBuffer is what I remember.","msgtype":"m.text"},"ts":1554341487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wycats had a gist with a design that proxied a typed array and turned off sets, IIRC","msgtype":"m.text"},"ts":1554341682000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think it would need to be done at the arraybuffer level though to prevent `new TArray(immutable.buffer)`","msgtype":"m.text"},"ts":1554342390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and since the arraybuffer works with slots and not properties, freeze and Proxy won’t really work","msgtype":"m.text"},"ts":1554342885000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"we’d probably need a constructor arg like the rekey proposal","msgtype":"m.text"},"ts":1554342904000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(in general I’m pretty enamored with that pattern for overriding internal operations without adding much to observable operations)","msgtype":"m.text"},"ts":1554342939000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"If you mediate all access to the ArrayBuffer through a proxy it works","msgtype":"m.text"},"ts":1554342945000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"borrowing prototype methods and .calling them?","msgtype":"m.text"},"ts":1554342969000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"You never let them see the ArrayBuffer instance","msgtype":"m.text"},"ts":1554342979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure but the Proxy won’t have the slots","msgtype":"m.text"},"ts":1554342992000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Sure so you can't .call() methods on it, which is the point","msgtype":"m.text"},"ts":1554343002000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah i guess so, seems like it doesn’t achieve the full purpose if it breaks that idiom tho.","msgtype":"m.text"},"ts":1554343027000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ie, all robust code would suddenly break on it, instead of just working more reliably","msgtype":"m.text"},"ts":1554343043000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: just saw your message from yesterday! Definitely understand where you are coming from with the questions. It's super helpful! I'd down for anyone to poke holes in my proposal so I can try and patch them :)","msgtype":"m.text"},"ts":1554405063000,"senderName":"wuz__","senderId":"wuz__@irc"}
]