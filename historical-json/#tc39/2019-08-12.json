[
{"content":{"body":"jmdyck: do you know if this note from built-in function's Call slot is ever relevant? \"When _calleeContext_ is removed from the execution context stack it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.\"","msgtype":"m.text"},"ts":1565575906000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1565580439000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: Sorry, don't know.","msgtype":"m.text"},"ts":1565581010000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"jmdyck: no worries, i couldn't find anything either","msgtype":"m.text"},"ts":1565581025000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it makes me feel better about my pr :)","msgtype":"m.text"},"ts":1565581038000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Does the condition described in the note not convince you?","msgtype":"m.text"},"ts":1565581049000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"convince me of what","msgtype":"m.text"},"ts":1565581066000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"convinceyou of the relevance of the note, i suppose.","msgtype":"m.text"},"ts":1565581100000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i just meant, i couldn't find a condition in the current spec where calleeContext would be suspended and retained by a generator","msgtype":"m.text"},"ts":1565581148000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ah, okay. slightly different question than i thought you meant.","msgtype":"m.text"},"ts":1565581220000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"perhaps its used in the web spec or something","msgtype":"m.text"},"ts":1565581264000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'm wondering if \"suspend\" is ambiguous in that sentence.","msgtype":"m.text"},"ts":1565582533000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"devsnek: So is this what you're saying?: It's common that a generator object would suspend and retain an execution context for later resumption, but what you're wondering is how such a context could be _calleeContext_ in that [[Call]] method?","msgtype":"m.text"},"ts":1565583367000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565583386000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"as far as i know that never occurs","msgtype":"m.text"},"ts":1565583390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well with my pr it will happen, but not in the current spec","msgtype":"m.text"},"ts":1565583399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: I don't think prototype iterators are compatible with generators","msgtype":"m.text"},"ts":1565620764000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: user ones, sure, but why not builtins?","msgtype":"m.text"},"ts":1565621136000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess you could change regexpstringiteratorprototype.next to call GeneratorResume or whatever","msgtype":"m.text"},"ts":1565621195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that seems like complexity","msgtype":"m.text"},"ts":1565621206000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm trying to get rid of complexity","msgtype":"m.text"},"ts":1565621219000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wait, regular generators tho already make an iterator whose next resumes the generator","msgtype":"m.text"},"ts":1565621242000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"literally the only difference here is what kind of object IterationResult or whatever creates","msgtype":"m.text"},"ts":1565621261000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah but regexpstringiteratorprototype has its own next method","msgtype":"m.text"},"ts":1565621263000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i guess I’m not clear on why having it call GenratorResume with the receiver would be more complex than the current state","msgtype":"m.text"},"ts":1565621345000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I dunno","msgtype":"m.text"},"ts":1565621522000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I haven't explored it that much","msgtype":"m.text"},"ts":1565621528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I'll take a look in engine262 and see if it still passes test262","msgtype":"m.text"},"ts":1565621567000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: the prototype needs to implement both RegExpStringIteratorPrototype and GeneratorPrototype","msgtype":"m.text"},"ts":1565624352000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"slots of both, etc","msgtype":"m.text"},"ts":1565624354000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure, resiP could inherit from GP, which inherits from IP?","msgtype":"m.text"},"ts":1565624408000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no i mean you need something that has both [[GeneratorState]] and [[IteratingRegExp]]","msgtype":"m.text"},"ts":1565624479000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"maybe you could put a [[RealGenerator]] slot on RegExpStringIteratorPrototype instances","msgtype":"m.text"},"ts":1565624729000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then next does GeneratorResume(this.[[RealGenerator]])","msgtype":"m.text"},"ts":1565624740000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"this seems really complex though","msgtype":"m.text"},"ts":1565624774000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1565624872000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it just seems like the value of this change is to take all the places that make an iterator, and express them more clearly/closer to js","msgtype":"m.text"},"ts":1565624892000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"and if we can only do that for new cases, it doesn’t seem very compelling","msgtype":"m.text"},"ts":1565624907000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i think its still extremely compelling for new cases","msgtype":"m.text"},"ts":1565624921000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it turns thousands of new steps into tens of steps","msgtype":"m.text"},"ts":1565624932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and it plays nicely with implementations too","msgtype":"m.text"},"ts":1565625001000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"here's what i came up with for matchAll, and it works, but its kinda meh https://gc.gy/33330024.png https://gc.gy/33330074.png https://gc.gy/33330109.png","msgtype":"m.text"},"ts":1565625111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: so is the idea that all the iterator-helper functions would use %GeneratorPrototype%?","msgtype":"m.text"},"ts":1565625429000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Instead of a new prototype for each kind?","msgtype":"m.text"},"ts":1565625436000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes","msgtype":"m.text"},"ts":1565625439000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1565625444000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've asked implementers which they would prefer and they never get back to me","msgtype":"m.text"},"ts":1565625457000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So I'm OK either way","msgtype":"m.text"},"ts":1565625459000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i see it as using less memory, and suspending is a lot easier to lower since you have fewer functions to compare with the state of the prototype","msgtype":"m.text"},"ts":1565625488000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: i could add a third element, \"steps for creating the initial return value of a built-in (async) generator\"","msgtype":"m.text"},"ts":1565625566000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but that seems messy","msgtype":"m.text"},"ts":1565625578000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`Await` calls `! PerformPromiseThen(promise, onFulfilled, onRejected)`, but `PerformPromiseThen` never returns a CompletionRecord in that context, i.e., except `undefined`. Then, why is it prefixed with `!`?","msgtype":"m.text"},"ts":1565627244000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"cpplearner: it's an assertion that PerformPromiseThen never returns an abrupt completion. As you can see, the assertion is correct. Which is good, because incorrect assertions are spec bugs.","msgtype":"m.text"},"ts":1565627295000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, I see. I was a bit worried that I'm missing something. Thanks for the clarification.","msgtype":"m.text"},"ts":1565627373000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"cpplearner: also, every abstract operation gets automatically wrapped in a complen rtcord","msgtype":"m.text"},"ts":1565631648000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"*completion record","msgtype":"m.text"},"ts":1565631664000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh, that I didn't know. 5.2.3.1 certainly states the implicit case. Thanks for the reminder.","msgtype":"m.text"},"ts":1565631931000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"=)","msgtype":"m.text"},"ts":1565631945000,"senderName":"cpplearner","senderId":"cpplearner@irc"},
{"content":{"body":"ljharb: do you still want to try to migrate old methods that return iterators","msgtype":"m.text"},"ts":1565631986000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: to me that's the primary goal","msgtype":"m.text"},"ts":1565632057000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"devsnek: as for having GeneratorPrototype over a bunch of new individual kinds, i like that too, but old ones couldn't do that, as you say","msgtype":"m.text"},"ts":1565632082000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ok so basically","msgtype":"m.text"},"ts":1565632102000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we need some way to override the return value","msgtype":"m.text"},"ts":1565632115000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"with `ObjectCreate(%RegExpStringIteratorPrototype%, [ [[IteratedRegExp]], [[RealGenerator]] ])`","msgtype":"m.text"},"ts":1565632160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then some way to set [[RealGenerator]]","msgtype":"m.text"},"ts":1565632169000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"you could set that slot and use it unconditionally","msgtype":"m.text"},"ts":1565632559000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's just be cyclic for the ones that didn't have their own prototype","msgtype":"m.text"},"ts":1565632569000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"TDZ doesn't guard against early reads in patterns?","msgtype":"m.text"},"ts":1565637522000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"nm, miswrote the code","msgtype":"m.text"},"ts":1565637594000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ok so in `a.b?.c`, `a.b?.c` is an OptionalExpression, and `b?.c` is an OptionalChain, is that right?","msgtype":"m.text"},"ts":1565638870000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: `?.c` is the OptionalChain","msgtype":"m.text"},"ts":1565639349000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what is `b?.c`","msgtype":"m.text"},"ts":1565639400000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing at all, actually","msgtype":"m.text"},"ts":1565639430000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"`a.b` is a MemberExpression","msgtype":"m.text"},"ts":1565639439000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so you're cutting across the tree","msgtype":"m.text"},"ts":1565639457000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so `(a.b)?.c`","msgtype":"m.text"},"ts":1565639489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in terms of tree","msgtype":"m.text"},"ts":1565639495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the spec grammar works for the spec but it doesn't correspond to something implementable, as it turns out :p","msgtype":"m.text"},"ts":1565639500000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565639501000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"well i'm trying to implement it in engine262","msgtype":"m.text"},"ts":1565639516000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"*directly implementable","msgtype":"m.text"},"ts":1565639521000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1565639524000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"which tries to correspond to the actual steps in the spec","msgtype":"m.text"},"ts":1565639530000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1565639547000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"the reason I said that is purely based on not being able to view `.b` as a thing in itself","msgtype":"m.text"},"ts":1565639588000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565639603000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in a.b?.c.d, is that `a.b` member expression, `?.c` and `.d` are optional chains?","msgtype":"m.text"},"ts":1565639615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`?.c.d` is the OptionalChain there; that's actually the motivation of having OptionalChain be a thing","msgtype":"m.text"},"ts":1565639661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh and then `?.c` is an optional chain inside that","msgtype":"m.text"},"ts":1565639675000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1565639689000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this is almost making sense lol","msgtype":"m.text"},"ts":1565639698000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i need to get a whiteboard","msgtype":"m.text"},"ts":1565639709000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because in `a?.b.c?.d.e`, there are two optional chains, is the idea","msgtype":"m.text"},"ts":1565639714000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it works well to achieve the short-circuiting behavior in the spec","msgtype":"m.text"},"ts":1565639733000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but it's a bit mind-boggling on very first read","msgtype":"m.text"},"ts":1565639751000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/33344943.png","msgtype":"m.text"},"ts":1565639945000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"aside from messed up indentation, does this look right?","msgtype":"m.text"},"ts":1565639962000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i messed up three times","msgtype":"m.text"},"ts":1565640017000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oops yeah OptionalChains on the interior of the latter example","msgtype":"m.text"},"ts":1565640058000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://gc.gy/33345106.png","msgtype":"m.text"},"ts":1565640106000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in the third one there's actually a nested OptionalExpression","msgtype":"m.text"},"ts":1565640163000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"where's that","msgtype":"m.text"},"ts":1565640175000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"since an OptionalChain has exactly one ?","msgtype":"m.text"},"ts":1565640189000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"connecting `?.c.d` and `?.e.f`?","msgtype":"m.text"},"ts":1565640195000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah exactly","msgtype":"m.text"},"ts":1565640200000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"is that a sole child of the first OptionalChain","msgtype":"m.text"},"ts":1565640244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or does it replace the first OptionalChain","msgtype":"m.text"},"ts":1565640249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"OptionalExpression","msgtype":"m.text"},"ts":1565640344000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"    OptionalExpression","msgtype":"m.text"},"ts":1565640345000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"        MemberExpression a.b","msgtype":"m.text"},"ts":1565640345000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"        OptionalChain ?.c.d","msgtype":"m.text"},"ts":1565640345000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"    OptionalChain ?.e.f","msgtype":"m.text"},"ts":1565640345000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1565640367000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I don't blame you for finding it confusing though 😓","msgtype":"m.text"},"ts":1565640477000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"its funny to know how optional chaining works well enough to implement it but at the same time have no idea how the spec for it works","msgtype":"m.text"},"ts":1565640504000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1565640509000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I tried to make this note clearer: https://tc39.es/proposal-optional-chaining/#sec-optional-chains","msgtype":"m.text"},"ts":1565640517000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but I don't know if it's enough","msgtype":"m.text"},"ts":1565640525000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i'm writing out a bunch of AST examples to help myself","msgtype":"m.text"},"ts":1565640548000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"seems good","msgtype":"m.text"},"ts":1565640558000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so i could have a parseOptionalChain which is a sub of parsing member expressions that stops when it hits a ?","msgtype":"m.text"},"ts":1565640590000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then the caller calls parseOptionalChain again","msgtype":"m.text"},"ts":1565640599000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"think so","msgtype":"m.text"},"ts":1565641070000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess if you make the refactors for EvaluateStaticPropertyAccess etc. first then it should work out okay","msgtype":"m.text"},"ts":1565641228000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(where by \"it\" I mean \"implementation of the evaluation part as a whole\")","msgtype":"m.text"},"ts":1565641292000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: what's the grammar for ?.x.y.z","msgtype":"m.text"},"ts":1565644462000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh nvm i'm dumb","msgtype":"m.text"},"ts":1565644489000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that's two optional chains","msgtype":"m.text"},"ts":1565644495000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: it's one OptionalChain but nested three levels deep","msgtype":"m.text"},"ts":1565646850000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1565646854000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i just couldn't figure out what production covered the `.z`","msgtype":"m.text"},"ts":1565646874000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its passing all the tests now :)","msgtype":"m.text"},"ts":1565646887000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1565647950000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"> Optional chains are hard okay?","msgtype":"m.text"},"ts":1565647995000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1565647996000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I've not dug through the code in engine262 before but `this.eat` made me laugh","msgtype":"m.text"},"ts":1565648072000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so direct compared to `consume`","msgtype":"m.text"},"ts":1565648081000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"eat comes from acorn","msgtype":"m.text"},"ts":1565648366000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so esprima, babel, etc, all use it","msgtype":"m.text"},"ts":1565648377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that was my guess hehe","msgtype":"m.text"},"ts":1565648837000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"So, question: Is `const a = {def\\u0061ult: 12}` supposed to have a syntax error or not? In chrome and safari it does, while in firefox and chakra it does not.","msgtype":"m.text"},"ts":1565652084000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"Secondary question: is there a test262 test covering a keyword with an escape used as an identifier name?","msgtype":"m.text"},"ts":1565652111000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"in https://tc39.es/ecma262/#sec-source-text it says \"string literals, regular expression literals, template literals and identifiers\"","msgtype":"m.text"},"ts":1565652286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"doesn't explicitly call out keywords","msgtype":"m.text"},"ts":1565652296000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"and then again in https://tc39.es/ecma262/#sec-names-and-keywords","msgtype":"m.text"},"ts":1565652370000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"weswigham: I was just about to reply to your WK bug but note that all engines agree on `const a = {def\\u{61}ult: 12}` being an error","msgtype":"m.text"},"ts":1565652434000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I can't find a test262 case for the object key context","msgtype":"m.text"},"ts":1565652488000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"those are both allowed by my parser, so I assume it's legal :P","msgtype":"m.text"},"ts":1565652489000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"just these for declarations","msgtype":"m.text"},"ts":1565652526000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://test262.report/browse/language/identifiers/val-default-via-escape-hex.js","msgtype":"m.text"},"ts":1565652526000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://test262.report/browse/language/identifiers/val-default-via-escape-hex4.js","msgtype":"m.text"},"ts":1565652526000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"after jumping around the spec, i haven't found anything specifically saying this is allowed or not","msgtype":"m.text"},"ts":1565652537000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"so i would assume its not allowed","msgtype":"m.text"},"ts":1565652552000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's allowed; the relevant production is PropertyName -> LiteralPropertyName -> IdentifierName, which allows both kinds of unicode escape sequences","msgtype":"m.text"},"ts":1565652576000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but then the variable declaration calls out IdentifierName but not ReservedWord and object literals don't?","msgtype":"m.text"},"ts":1565652578000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling all engines don't agree, afaik - edge and firefox (chakra and spidermonkey) both don't error","msgtype":"m.text"},"ts":1565652584000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"oh we're talking about object keys","msgtype":"m.text"},"ts":1565652604000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: \"default\" is not a legal variable name, but is a legal property name (as all engines agree)","msgtype":"m.text"},"ts":1565652622000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"weswigham: they do, I'm looking at it :p Chakra/SM behave differently with the hex4 notation","msgtype":"m.text"},"ts":1565652628000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: yeah I do see that","msgtype":"m.text"},"ts":1565652638000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"in an object key i would expect this to work","msgtype":"m.text"},"ts":1565652643000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it may well be that all engines are wrong if there's no test for it though","msgtype":"m.text"},"ts":1565652667000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ick, irc escaped what I input, but it was supposed to be `\\` `u` `0` `0` `6` `1` - not the extended escape pattern","msgtype":"m.text"},"ts":1565652696000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"though from what I'm seeing, the extended escape style also doesn't cause an error in firefox...","msgtype":"m.text"},"ts":1565652713000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"yeah, I know there's some tests for escape-sequence-in-keywords, but it makes sense that escape-sequence-in-keyword-in-property-name can have been missed","msgtype":"m.text"},"ts":1565652724000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/EAhPZYqO/","msgtype":"m.text"},"ts":1565652725000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"argh","msgtype":"m.text"},"ts":1565652739000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"wrong ne","msgtype":"m.text"},"ts":1565652742000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*one","msgtype":"m.text"},"ts":1565652744000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-reserved-words : \"A code point in a ReservedWord cannot be expressed by a \\ UnicodeEscapeSequence.\"","msgtype":"m.text"},"ts":1565652767000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"rkirsling variable name vs object property key","msgtype":"m.text"},"ts":1565652769000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"object property keys allow `default`","msgtype":"m.text"},"ts":1565652777000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"that part is important","msgtype":"m.text"},"ts":1565652783000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"yeah I understand","msgtype":"m.text"},"ts":1565652802000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"apparently I was off on that though","msgtype":"m.text"},"ts":1565652818000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"checking too many things at once","msgtype":"m.text"},"ts":1565652823000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so `def\\u0061ult` doesn't match ReservedWord, and therefore does match Identifier","msgtype":"m.text"},"ts":1565652830000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Propert names use IdentifierName, though","msgtype":"m.text"},"ts":1565652851000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"which have _no_ ResveredWord restriction","msgtype":"m.text"},"ts":1565652863000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1565652877000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does anyone know why v8 might have an explicit token for \"enum\"","msgtype":"m.text"},"ts":1565652879000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"gibson042: you perhaps meant \"therefore does match IdentifierName\"?","msgtype":"m.text"},"ts":1565652894000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek: because it's future reserved?","msgtype":"m.text"},"ts":1565652896000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Identifier is \"IdentifierNamebut not ReservedWord\"","msgtype":"m.text"},"ts":1565652901000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"so yes to both","msgtype":"m.text"},"ts":1565652906000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"(as opposed to \"... does match Identifier\")","msgtype":"m.text"},"ts":1565652908000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling: it has a category for future reserved, but an explicit separate token for enum","msgtype":"m.text"},"ts":1565652913000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wacky","msgtype":"m.text"},"ts":1565652932000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"weswigham: anyway I think we agree that it is legal per the spec and all the engines you tested just have bugs","msgtype":"m.text"},"ts":1565652962000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"maybe it used to do something","msgtype":"m.text"},"ts":1565652963000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably test262 should get some new tests","msgtype":"m.text"},"ts":1565652973000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah I would start with test262","msgtype":"m.text"},"ts":1565652983000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"because XS is also following JSC/V8","msgtype":"m.text"},"ts":1565652992000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I will open an issue for it","msgtype":"m.text"},"ts":1565653128000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(if no one else is already doing so)","msgtype":"m.text"},"ts":1565653145000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"🙇‍♂️","msgtype":"m.text"},"ts":1565653211000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so `{ def\\u0061ult: 5 }` should be allowed?","msgtype":"m.text"},"ts":1565653243000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yes.","msgtype":"m.text"},"ts":1565653253000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"well, in expression position.","msgtype":"m.text"},"ts":1565653260000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"aye","msgtype":"m.text"},"ts":1565653290000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"I can open the issue if you haven't already","msgtype":"m.text"},"ts":1565653322000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"rkirsling: `({ def\\u{61}ult: 0 })` appears to work in SM, actually","msgtype":"m.text"},"ts":1565653535000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah I was evidently juggling too many cases, sorry","msgtype":"m.text"},"ts":1565653560000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"convinced myself of something that wasn't true","msgtype":"m.text"},"ts":1565653570000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"weswigham: almost don writing it","msgtype":"m.text"},"ts":1565653587000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Too late: https://github.com/tc39/test262/issues/2285","msgtype":"m.text"},"ts":1565653591000,"senderName":"weswigham","senderId":"weswigham@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1565653673000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"opened https://github.com/tc39/test262/issues/2286 before seeing your message","msgtype":"m.text"},"ts":1565653686000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: I don't see the divergence in behavior between Ch/SM that you mentioned","msgtype":"m.text"},"ts":1565654027000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: yeah I can't read","msgtype":"m.text"},"ts":1565654046000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"unless I haven't ran `jsvu` in a while","msgtype":"m.text"},"ts":1565654050000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"*run","msgtype":"m.text"},"ts":1565654059000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay cool","msgtype":"m.text"},"ts":1565654061000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]