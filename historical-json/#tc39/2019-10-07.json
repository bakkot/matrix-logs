[
{"content":{"body":"I don't think I got all the referents there.","msgtype":"m.text"},"ts":1570406598000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"\"do this\" = fix the lack-of-tildes bug, or convert `\"foo\"` to ~foo~ where appropriate?","msgtype":"m.text"},"ts":1570406824000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1570407199000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"do convert-to-tilde as a commit on top of convert-to-value, and then include the fix for lack-of-tildes in there","msgtype":"m.text"},"ts":1570407239000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"re \"why don't we just use strings [for enumerated spec-values]?\": Ultimately, that's a question for the editors. It could be that they like  tilde-values, or they're just a leftover from the Word era that isn't worth the churn of eliminating. Personally, I think ~foo~ is a nice way to convey that we're dealing with a small enumeration of user-invisible values.","msgtype":"m.text"},"ts":1570407468000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1570412572000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"1. If _F_ contains any code unit other than `\"g\"`, `\"i\"`, `\"m\"`, `\"s\"`, `\"u\"`, or `\"y\"` or if it contains the same code unit more than once, throw a *SyntaxError* exception.","msgtype":"m.text"},"ts":1570412572000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"1. If _F_ contains `\"u\"`, let _BMP_ be *false*; else let _BMP_ be *true*.","msgtype":"m.text"},"ts":1570412572000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1570412572000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"that's an interesting case","msgtype":"m.text"},"ts":1570412576000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"_F_ is a string there","msgtype":"m.text"},"ts":1570412582000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"seems like \"contain a code unit\" should be `g`, `i`, ...","msgtype":"m.text"},"ts":1570412599000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but then \"contain\" in the sense of substring should be our *\"u\"*","msgtype":"m.text"},"ts":1570412620000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I believe","msgtype":"m.text"},"ts":1570412623000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ugh maybe there isn't actually precedent for \"contain (a substring)\" and they should all be like `u`","msgtype":"m.text"},"ts":1570413152000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Well, `g` could denote a terminal symbol or a very short piece of ES code. To denote a code unit, we'd normally say something like \"the code unit 0x67 (LATIN SMALL LETTER G)\"","msgtype":"m.text"},"ts":1570413243000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1570413400000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1570413440000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"there are a bunch of cases that I'm separating out for this, regex flags just turns out to be the largest such thing","msgtype":"m.text"},"ts":1570413444000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so we can handle it holistically once I have it up, I guess","msgtype":"m.text"},"ts":1570413487000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"... but it's fairly clear that \"the code unit `\"g\"`\" would mean \"the sole code unit of the String value `\"g\"`\" (or *\"g\"*).","msgtype":"m.text"},"ts":1570413852000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re precedent for \"contain (a substring)\": String.prototype.matchAll recently got \"If ? ToString(_flags_) does not contain *\"g\"*, ...\"","msgtype":"m.text"},"ts":1570414019000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"but I don't think there's any precendent where the substring has more than one code unit.","msgtype":"m.text"},"ts":1570414298000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1570417635000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"what would you be inclined to do with the lines above?","msgtype":"m.text"},"ts":1570417653000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"does 'code unit `\"g\"`' feel different from 'code unit *\"g\"*'?","msgtype":"m.text"},"ts":1570417762000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(either way, I can easily separate that part into its own patch)","msgtype":"m.text"},"ts":1570417789000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(own PR even)","msgtype":"m.text"},"ts":1570417800000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think just changing the backticks to stars would be okay.","msgtype":"m.text"},"ts":1570420695000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"I was just about to submit a PR but maybe I could just have you tell me whether you'd keep any of the changes here: https://github.com/tc39/ecma262/commit/05f1480042e9e69e4c493e5f81f4d45d196e82f6","msgtype":"m.text"},"ts":1570421130000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(looking...)","msgtype":"m.text"},"ts":1570421191000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"the regex flag-related changes are the oddest, probably","msgtype":"m.text"},"ts":1570421218000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I guess my overall worry was just about whether we're being goofy about whether the quote character is a code unit in itself","msgtype":"m.text"},"ts":1570421357000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"SV is weird because it's defined to return a sequence of code units, which is basically indistinguishable from a String, but is meant to not be a String, but should probably just be a string. (See https://github.com/tc39/ecma262/issues/828)","msgtype":"m.text"},"ts":1570421545000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(continuing to look...)","msgtype":"m.text"},"ts":1570421575000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"re line 12999: It's plausible.","msgtype":"m.text"},"ts":1570421832000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"30942 also plausible.","msgtype":"m.text"},"ts":1570422149000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"hmm, I didn't realize the background on SV there...","msgtype":"m.text"},"ts":1570422224000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Other than those two, I'm dubious.","msgtype":"m.text"},"ts":1570422440000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"thanks for looking","msgtype":"m.text"},"ts":1570422486000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I submitted it as https://github.com/tc39/ecma262/pull/1724 after all just 'cause I didn't want to overcomplicate our IRC discussion","msgtype":"m.text"},"ts":1570422550000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"okay, submitted https://github.com/tc39/ecma262/pull/1725 as well","msgtype":"m.text"},"ts":1570425292000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I think after those, we'll be able to literally replace-all on `\"[^\"\\s]+\"`","msgtype":"m.text"},"ts":1570425397000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and now...I am exhausted lol","msgtype":"m.text"},"ts":1570425424000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]