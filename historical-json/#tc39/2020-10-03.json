[
{"content":{"body":"`${Number.prototype}` => '0', but why?","msgtype":"m.text"},"ts":1601708697000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: historically, all the builtin prototypes were exotic, and an instance of themselves","msgtype":"m.text"},"ts":1601708715000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"howdoi: in ES6, many of them were changed to be ordinary, but some couldn't be for web compat. number, function, regex, date, and a few others probably","msgtype":"m.text"},"ts":1601708732000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: ha, so there are few checks for internal slots instead of the primitive directly, for the same reason?","msgtype":"m.text"},"ts":1601708877000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: not sure what you're asking","msgtype":"m.text"},"ts":1601709242000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: https://tc39.es/ecma262/#sec-properties-of-the-number-prototype-object 2.a","msgtype":"m.text"},"ts":1601709541000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: those are boxed primitives","msgtype":"m.text"},"ts":1601709568000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"check ToObject()","msgtype":"m.text"},"ts":1601709572000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"howdoi: right, every `thisNumberValue` either returns the number or unwraps the boxed number, or throws.","msgtype":"m.text"},"ts":1601709720000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess the question is - does the spec have a easy way to check instanceOf within its steps? If yes, then why is it (sort of) duck-type checking about Number instances (using type object and [[NumberDatta]] slot) ?","msgtype":"m.text"},"ts":1601709810000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"Is it for some particular case? Or just the easiest way to check instanceOf Number?","msgtype":"m.text"},"ts":1601709853000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"devsnek: nods","msgtype":"m.text"},"ts":1601709860000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"bendtherules: `thisNumberValue` works no matter what realm","msgtype":"m.text"},"ts":1601709900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"instanceof is limited to checks within a realm","msgtype":"m.text"},"ts":1601709916000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1601709939000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"If Type(value) is Object and value has a [[NumberData]] internal slot, then there is a check for value.[[NumberData]]","msgtype":"m.text"},"ts":1601709950000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"like ljharb said, Assert: Type(n) is Number, throw if not.","msgtype":"m.text"},"ts":1601710011000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Number {value,type,object} hmm...","msgtype":"m.emote"},"ts":1601710242000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"thanks ljharb && devsnek","msgtype":"m.text"},"ts":1601710421000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"bendtherules: slots tell you what the thing is. instanceof is checking something else, something thatâ€™s often useless.","msgtype":"m.text"},"ts":1601710465000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Ok, so how does spec check if something is a array?","msgtype":"m.text"},"ts":1601710562000,"senderName":"bendtherules","senderId":"bendtherules@irc"},
{"content":{"body":"IsArray","msgtype":"m.text"},"ts":1601710589000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"probably the single most cursed operation in the spec lol","msgtype":"m.text"},"ts":1601710611000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1601710648000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"JSC, SM, V8, and also babel, acorn, esprima all accept `(async () => await 1 ** 1)()`","msgtype":"m.text"},"ts":1601713865000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but that's not actually legal, right?","msgtype":"m.text"},"ts":1601713876000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"also engine262","msgtype":"m.text"},"ts":1601713942000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and shift","msgtype":"m.text"},"ts":1601713957000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not xs or chakracore though!","msgtype":"m.text"},"ts":1601713968000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: did we all forget that await expressions are unary expressions?","msgtype":"m.text"},"ts":1601714260000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"apparently!","msgtype":"m.text"},"ts":1601714267000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"everyone except typescript","msgtype":"m.text"},"ts":1601714272000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(came up in https://github.com/microsoft/TypeScript/issues/40916 )","msgtype":"m.text"},"ts":1601714285000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"where even is the early error for **","msgtype":"m.text"},"ts":1601714310000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i can't find it","msgtype":"m.text"},"ts":1601714312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"still possible there isn't one","msgtype":"m.text"},"ts":1601714318000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it simply doesn't match the grammar","msgtype":"m.text"},"ts":1601714324000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"er, sorry, \"still possible\" was the start of a different sentece","msgtype":"m.text"},"ts":1601714336000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"there is no early error, it simply doesn't match the grammar","msgtype":"m.text"},"ts":1601714344000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and, separately, it's still possible I'm misreading the spec and `await 1 ** 1` is legal","msgtype":"m.text"},"ts":1601714364000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hm i have it as an explicit check in parsing a unary expression","msgtype":"m.text"},"ts":1601714368000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1601714399000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh i see","msgtype":"m.text"},"ts":1601714401000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"very interesting","msgtype":"m.text"},"ts":1601714407000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ExponentiationExpression : UnaryExpression","msgtype":"m.text"},"ts":1601714431000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"we need to put a big note on that","msgtype":"m.text"},"ts":1601714434000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i think everyone scans over that assuming everything there is just straight precedence climbing","msgtype":"m.text"},"ts":1601714451000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, people get the -1**1 bit right","msgtype":"m.text"},"ts":1601714513000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"presumably there's coverage though","msgtype":"m.text"},"ts":1601714523000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and also it's well known","msgtype":"m.text"},"ts":1601714528000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"is there any reason AwaitExpression is separated into its own production","msgtype":"m.text"},"ts":1601714615000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"could just be `[+Await] await UnaryExpression` couldn't it?","msgtype":"m.text"},"ts":1601714624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"hm i guess it makes `contains AwaitExpression` cleaner","msgtype":"m.text"},"ts":1601714655000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah, that","msgtype":"m.text"},"ts":1601714659000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i can submit a fix to v8 i suppose","msgtype":"m.text"},"ts":1601714761000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i hope this isn't web reality now","msgtype":"m.text"},"ts":1601714769000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it might well be","msgtype":"m.text"},"ts":1601714846000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`await x ** 2` is a reasonable thing to write","msgtype":"m.text"},"ts":1601714860000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"all the keyword ones are reasonable","msgtype":"m.text"},"ts":1601714924000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"delete/void/typeof/await","msgtype":"m.text"},"ts":1601714936000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"urgh, I hate that that is how it's spec'ed :(","msgtype":"m.text"},"ts":1601714941000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"those are not reasonable","msgtype":"m.text"},"ts":1601714959000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"you would not want to exponentiate the result of delete or void or typeoof","msgtype":"m.text"},"ts":1601714977000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as reasonable as `await x ** 2` anyway","msgtype":"m.text"},"ts":1601714992000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`await x` can reasonably result in a number, which is a thing you might want to square","msgtype":"m.text"},"ts":1601715049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it really is different from the others here","msgtype":"m.text"},"ts":1601715060000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but no one would read it as `(await x) ** 2`","msgtype":"m.text"},"ts":1601715119000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ehhh, depends on how familiar with the rules you are","msgtype":"m.text"},"ts":1601715168000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i mean that argument flies for `-1 ** 1`","msgtype":"m.text"},"ts":1601715179000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"well, right, the point of the `-1 ** 1` thing is that both interpretations were plausible","msgtype":"m.text"},"ts":1601715208000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"my claim is not that the `(await x) ** 2` interpretation is obviously right, just that it's plausible enough that people might have written it in real code","msgtype":"m.text"},"ts":1601715240000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1601715255000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"`await x ** 2` seems way more harmful than `-1 ** 1` to my eyes which did not expect to encounter this","msgtype":"m.text"},"ts":1601715907000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"filed https://github.com/tc39/ecma262/issues/2197","msgtype":"m.text"},"ts":1601715922000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"hopes there is web reality","msgtype":"m.emote"},"ts":1601715944000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: fwiw `await a + b` is definitely legal","msgtype":"m.text"},"ts":1601715946000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1601715956000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1601715961000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1601715964000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"and everybody does the right thing, I assume?","msgtype":"m.text"},"ts":1601715981000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"haven't checked","msgtype":"m.text"},"ts":1601715992000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"presumably","msgtype":"m.text"},"ts":1601715994000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if so then I rescind my whining","msgtype":"m.text"},"ts":1601716013000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this is one of those places prettier will insert parentheses for you","msgtype":"m.text"},"ts":1601716052000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(it does for `await a ** b` as well, funnily enough)","msgtype":"m.text"},"ts":1601716078000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"yeah with a linter there's nothing to worry about it","msgtype":"m.text"},"ts":1601716177000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"er formatter","msgtype":"m.text"},"ts":1601716184000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"https://www.python.org/dev/peps/pep-0638/","msgtype":"m.text"},"ts":1601742045000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"bold of a PEP to contain the phrase \"compile-time\"","msgtype":"m.text"},"ts":1601742070000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i could live with js never having macros","msgtype":"m.text"},"ts":1601742123000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"its dynamic enough to not need them","msgtype":"m.text"},"ts":1601742128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"js has macros; they'","msgtype":"m.text"},"ts":1601742181000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"re called \"babel\"","msgtype":"m.text"},"ts":1601742186000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1601742246000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"mfw engine262 uses babel for macros","msgtype":"m.text"},"ts":1601742265000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"> Currently, all AST nodes are allocated using an arena allocator. Changing to use the standard allocator might slow compilation down a little, but has advantages in terms of maintenance, as much code can be deleted.","msgtype":"m.text"},"ts":1601742802000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"oh to be a cpython dev","msgtype":"m.text"},"ts":1601742817000,"senderName":"devsnek","senderId":"devsnek@irc"}
]