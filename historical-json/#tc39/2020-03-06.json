[
{"content":{"body":"you know how there are some built-in functions whose length is not the obvious thing you would infer from their signature? like the Object constructor has `.length === 1` despite having only an optional parameter. is there a reason we can't just change their signatures to match their lengths?","msgtype":"m.text"},"ts":1583521755000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"changing the signature would be making the parameter required, and `Object()` would stop working","msgtype":"m.text"},"ts":1583521803000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"where does it say that failing to pass a required parameter to a built-in function throws a type error?","msgtype":"m.text"},"ts":1583521839000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"in fact I am pretty sure that is not the case, because e.g. Map.prototype.set requires both arguments, but `(new Map).set()` does not throw","msgtype":"m.text"},"ts":1583521884000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Object.keys ?","msgtype":"m.text"},"ts":1583521936000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"i guess that's fair, \"required\" is a conceptual thing","msgtype":"m.text"},"ts":1583521946000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Bakkot: for Object it might make sense, but it wouldn't make any sense for Date","msgtype":"m.text"},"ts":1583521961000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"1 required parameter doesn't feel \"wrong\" to me for Object, but 7 feels wrong for Date","msgtype":"m.text"},"ts":1583521975000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"rickbutton Object.keys explicitly calls ToObject on its argument, which throws if provided undefined","msgtype":"m.text"},"ts":1583521975000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah tru","msgtype":"m.text"},"ts":1583521981000,"senderName":"rickbutton","senderId":"rickbutton@irc"},
{"content":{"body":"ljharb: sure but what is the benefit of leaving them notationally non-required?","msgtype":"m.text"},"ts":1583522034000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as far as I can tell it is literally just added complexity in the spec","msgtype":"m.text"},"ts":1583522049000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it makes sense?","msgtype":"m.text"},"ts":1583522055000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"since it requires explicitly specifying the length","msgtype":"m.text"},"ts":1583522058000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i find that to be far less complex than making the signature conceptually nonsensical","msgtype":"m.text"},"ts":1583522069000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1583522092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1583522094000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"... what","msgtype":"m.text"},"ts":1583522101000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I, uh, do not share that intuition","msgtype":"m.text"},"ts":1583522114000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"why is an explicit sentence overriding the length on a few legacy functions \"complexity\"?","msgtype":"m.text"},"ts":1583522184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Because now there is another moving part of the spec to understand","msgtype":"m.text"},"ts":1583522250000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"It is not \"You can infer the .length of a builtin from its signature\", it's that \"except...\"","msgtype":"m.text"},"ts":1583522276000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ok, fair. but your suggestion trades getting rid of that \"except\" for \"now the concept of optional or required is meaningless, because you can't rely on it everywhere\"","msgtype":"m.text"},"ts":1583522336000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(because as you noted, \"required\" doesn't consistently mean \"throws when omitted\" or anything else)","msgtype":"m.text"},"ts":1583522355000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Is it currently the case that you can rely on it?","msgtype":"m.text"},"ts":1583522377000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"afaik. the notation matches what's conceptually required","msgtype":"m.text"},"ts":1583522411000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I guess I don't know what \"conceptually required\" means","msgtype":"m.text"},"ts":1583522422000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(there's a few DataView/TypedArray cases where it might not)","msgtype":"m.text"},"ts":1583522425000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"like, the method needs it to meaningfully work","msgtype":"m.text"},"ts":1583522436000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you can call `.set()` on a map but that wouldn't make any sense, even though it doesn't throw","msgtype":"m.text"},"ts":1583522453000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`.set(foo)` does make sense, it sets to `void 0`","msgtype":"m.text"},"ts":1583522467000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i also don't think that makes sense conceptually (altho i understand what it does)","msgtype":"m.text"},"ts":1583522482000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's just shorthand for `.set(foo, undefined)`, trading convenience for clarity","msgtype":"m.text"},"ts":1583522497000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"omitting an argument is (almost) always shorthand for explicitly passing undefined as that argument","msgtype":"m.text"},"ts":1583522529000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"whether it is \"conceptually required\" or not","msgtype":"m.text"},"ts":1583522543000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"that's not universally true, in userland or in the language","msgtype":"m.text"},"ts":1583522556000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lots of things check arguments.length, altho in the spec we've tried to minimize that","msgtype":"m.text"},"ts":1583522568000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes, hence the \"almost\"","msgtype":"m.text"},"ts":1583522584000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"`Number(undefined)` is NaN, `Number(0)` is 0","msgtype":"m.text"},"ts":1583522589000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"right, but \"not always\" means that it's not a reliable shorthand","msgtype":"m.text"},"ts":1583522600000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yes but my point is that its reliability has nothing to do with whether an argument is \"concdeptually required\" or not","msgtype":"m.text"},"ts":1583522620000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"and the way you can know it's reliable for Map set, is that the value is required, so omitting it will either assume undefined or throw","msgtype":"m.text"},"ts":1583522622000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's not what reliable means?","msgtype":"m.text"},"ts":1583522663000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"to me it gives a guarantee","msgtype":"m.text"},"ts":1583522728000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"\"it is either the same, or different\", yes","msgtype":"m.text"},"ts":1583522738000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not the world's best guarantee","msgtype":"m.text"},"ts":1583522744000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"things that check arguments.length ime only do so around optional arguments","msgtype":"m.text"},"ts":1583522744000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"if an argument is optional, omitting it is potentially not the same as passing undefined","msgtype":"m.text"},"ts":1583522766000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"thus, the shorthand is ill-advised there","msgtype":"m.text"},"ts":1583522771000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"also if the argument is required","msgtype":"m.text"},"ts":1583522781000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"i would be very surprised if omitting a required argument was different from passing undefined for it. do you have any examples?","msgtype":"m.text"},"ts":1583522811000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(in the spec, or in reasonably-used userland libs)","msgtype":"m.text"},"ts":1583522821000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`String`","msgtype":"m.text"},"ts":1583522879000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"noted","msgtype":"m.text"},"ts":1583522918000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"(seems like String.length should be 0 then, in my mental model)","msgtype":"m.text"},"ts":1583522943000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"any others?","msgtype":"m.text"},"ts":1583522953000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Not off the top of my head","msgtype":"m.text"},"ts":1583522987000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Oh, looking, `Number` too","msgtype":"m.text"},"ts":1583523062000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but I think that's it among builtins","msgtype":"m.text"},"ts":1583523110000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we're usually pretty good about not surfacing the distinction","msgtype":"m.text"},"ts":1583523123000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"ah right, my own example lol","msgtype":"m.text"},"ts":1583523184000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"function lengths in js are meaningless to me and I ignore them","msgtype":"m.text"},"ts":1583523818000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: I think the distinction between optional and required (for built-in fns) is behaviorally meaningless. I.e., indicating that a parameter is optional or required has zero effect on the behavior of the function. The only effect it has is on the default value of the 'length' property.","msgtype":"m.text"},"ts":1583525073000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"i agree, it's a conceptual thing","msgtype":"m.text"},"ts":1583525480000,"senderName":"ljharb","senderId":"ljharb@irc"}
]