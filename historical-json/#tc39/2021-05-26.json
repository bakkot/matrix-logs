[
{"content":{"body":"What would be the best way, in a spec syntactic production, to require that there is no whitespace between two tokens `'a'` and `'b'`?","msgtype":"m.text"},"ts":1622035138000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Perhaps the best way would rather be to define a third token, `'ab'`, which the lever would longest-match…","msgtype":"m.text"},"ts":1622035193000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"*lexer","msgtype":"m.text"},"ts":1622035201000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"if they had to be tokens, you might have to introduce a new annotation, e.g `a` [no whitespace here] `b`","msgtype":"m.text"},"ts":1622035288000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Ah, so there’s no precedent for such a requirement. Good to know.","msgtype":"m.text"},"ts":1622035314000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"defining `ab` looks a lot simpler.","msgtype":"m.text"},"ts":1622035400000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yeah. For context, this is about the `x |> %==y` problem mentioned in https://github.com/js-choi/proposal-hack-pipes/issues/2#issuecomment-817187897 if `%` were chosen as the topic token. It’s not a big problem, though—we can just defined punctuators for `%==` and `%===`…","msgtype":"m.text"},"ts":1622035722000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"in fact it would be kind of meaningless to prohibit between tokens, since the stated purpose of white space is \"to improve source text readability and to separate tokens... White space code points may occur between any two tokens\". And note also that comments can appear in the same positions.","msgtype":"m.text"},"ts":1622035728000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Yes, such a hypothetical annotation would have to disallow comments too.","msgtype":"m.text"},"ts":1622035781000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"that strike me as ugly, but more importantly brittle","msgtype":"m.text"},"ts":1622036126000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Yeah, definitely. The combined token seems like the way to go.","msgtype":"m.text"},"ts":1622036169000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"no, that's what I'm saying is likely to be brittle","msgtype":"m.text"},"ts":1622036277000,"senderName":"gibson042","senderId":"gibson042@irc"},
{"content":{"body":"Ah, got it.","msgtype":"m.text"},"ts":1622036291000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"A new [must be adjacent] annotation might be more preferable, huh.","msgtype":"m.text"},"ts":1622036362000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"sorry, what are a and b wrt the pipes proposal?","msgtype":"m.text"},"ts":1622036572000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"This is about the Hack-pipes proposal, rather than the F#-pipes proposal. The Hack-pipes proposal has several candidate tokens for its “topic” placeholder, such as `#` and `%`.","msgtype":"m.text"},"ts":1622036624000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"I like `%` because it is relatively rarely used (only modulo) and its analogy to printf.","msgtype":"m.text"},"ts":1622036682000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"But fuchsia pointed out that `%===y` would split into `%=` `=` `y`.","msgtype":"m.text"},"ts":1622036688000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"Er, pretend that was `%==y`. Anyways, similar problem with `%===y`.","msgtype":"m.text"},"ts":1622036709000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"which two tokens would you want to require to be adjacent?","msgtype":"m.text"},"ts":1622036788000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"`%=` and `=`. Also `%=` and `==`. These would go into productions for EqualityExpression.","msgtype":"m.text"},"ts":1622036838000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"ah, so what you have as \"[contiguous]\" there?","msgtype":"m.text"},"ts":1622036879000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Yes, if you mean in my most recent issue comment, that’s right.","msgtype":"m.text"},"ts":1622036911000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"So is the perceived advantage of `%= [contiguous] =` over `%==` that it doesn't require any new tokens?","msgtype":"m.text"},"ts":1622037245000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"Perhaps gibson042 is concerned about how flexible this would be with any future rules that involve the nullary `%`. Although…this really does seem to be a singular problem (since `%=` assignment exists) with a singular patch-up.","msgtype":"m.text"},"ts":1622037394000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"To my thinking, the 'cost' of defining two new punctuators would be way less than the cost of defining a new \"[contiguous]\" annotation.","msgtype":"m.text"},"ts":1622037612000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"(which is not to say that I actually like the new punctuators idea)","msgtype":"m.text"},"ts":1622037633000,"senderName":"jmdyck","senderId":"jmdyck@irc"},
{"content":{"body":"At least for the Babel plugin, I will probably go with punctuators, although all token objects already track their source-text location, so it would also be trivial to check whether two tokens are adjacent in source text.","msgtype":"m.text"},"ts":1622038024000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"From a browser vendor’s perspective…the punctuators are also probably simpler.","msgtype":"m.text"},"ts":1622038025000,"senderName":"jschoi","senderId":"jschoi@irc"},
{"content":{"body":"It’s all equivalent right now anyway.","msgtype":"m.text"},"ts":1622038045000,"senderName":"jschoi","senderId":"jschoi@irc"}
]