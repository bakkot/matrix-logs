[
{"content":{"body":"bterlson: I am planning to attend the november TC39 meeting in december along with Chip, may I please get access to the reflector repo?","msgtype":"m.text"},"ts":1572567235000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"bterlson: my github is also NilSet , the account is in the Evernote github org. let me know if you need any other kind of authentication","msgtype":"m.text"},"ts":1572567383000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"we're gonna need your credit card number and your mother's maiden name","msgtype":"m.text"},"ts":1572567517000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"at least i get to keep my dna to myself","msgtype":"m.text"},"ts":1572567605000,"senderName":"NilSet","senderId":"NilSet@irc"},
{"content":{"body":"for now","msgtype":"m.text"},"ts":1572567641000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why do you think we have in-person meetings ðŸ‘€","msgtype":"m.text"},"ts":1572567649000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: collecting hair samples? ðŸ˜±","msgtype":"m.text"},"ts":1572568714000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"fingerprints","msgtype":"m.text"},"ts":1572568749000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the tc39 stickers harvest your dna as you apply them to your shiny laptop","msgtype":"m.text"},"ts":1572568766000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"saved once more by never putting any decorations on anything","msgtype":"m.text"},"ts":1572569143000,"senderName":"bakkot","senderId":"bakkot@irc"},
{"content":{"body":"except function declarations","msgtype":"m.text"},"ts":1572569164000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the pad functions remind me of ln -ls","msgtype":"m.text"},"ts":1572577584000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"in that i can never remember the arguments of either","msgtype":"m.text"},"ts":1572577591000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Iterator.from() as proposed seems weird to me","msgtype":"m.text"},"ts":1572613139000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"what is weird is that we already have GetIterator in the spec, and that's good enough for every place the spec needs to get an iterator from something","msgtype":"m.text"},"ts":1572613163000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"seems to me Iterator.from() is fine but it should just be steps 1-5 of GetIterator","msgtype":"m.text"},"ts":1572613177000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(i mean it's fine for it to exist)","msgtype":"m.text"},"ts":1572613185000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'll file an issue","msgtype":"m.text"},"ts":1572613338000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"devsnek: What is the rationale for %WrapForValidIteratorPrototype%?","msgtype":"m.text"},"ts":1572618096000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Looks like it was introduced in https://github.com/tc39/proposal-iterator-helpers/commit/49d13bd528e4488084f885a987153179d9452cf9 but the commit message doesn't say what feedback","msgtype":"m.text"},"ts":1572618110000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"filed https://github.com/tc39/proposal-iterator-helpers/issues/61","msgtype":"m.text"},"ts":1572619557000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ljharb: I suppose I'm not required to keep a `ToString` call after a typecheck, am I?","msgtype":"m.text"},"ts":1572637434000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"or maybe I need to cast the string primitive to a `String`?","msgtype":"m.text"},"ts":1572637493000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Okay, wait, this is fun.","msgtype":"m.text"},"ts":1572637594000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"In https://github.com/tc39/proposal-temporal/issues/230#issuecomment-548205490 we discussed adding typechecks, but what if the argument is a `String` object?","msgtype":"m.text"},"ts":1572637625000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Do we need to handle that? Should I let it go through and fail to be coerced and throw?","msgtype":"m.text"},"ts":1572637656000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: if you want a string, just use ToString","msgtype":"m.text"},"ts":1572637878000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or you can throw if it's not a string","msgtype":"m.text"},"ts":1572637895000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeeeah, I'm using `ToString` right now.","msgtype":"m.text"},"ts":1572637900000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"but both is unnecessary","msgtype":"m.text"},"ts":1572637900000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"The fun part is, we decided to merge `from` and `fromString`...","msgtype":"m.text"},"ts":1572637931000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"and now I have this typecheck for `object`s and `string`s.","msgtype":"m.text"},"ts":1572637948000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"But `String`s are `object`s, so it'll throw currently.","msgtype":"m.text"},"ts":1572637963000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"idk if that's something people would be okay with?","msgtype":"m.text"},"ts":1572637978000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"String as in normal string or String as in instance of %String%","msgtype":"m.text"},"ts":1572638128000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yes, capital S String as in instance of `%String%`.","msgtype":"m.text"},"ts":1572638157000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"it goes through typeof object check, but isn't a valid property bag like it's expected to be, so `from` will throw.","msgtype":"m.text"},"ts":1572638210000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"that seems reasonable to me","msgtype":"m.text"},"ts":1572638245000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"That's what I'm going with anyway, feel free to block the PR if anyone wants to discuss this behavior though.","msgtype":"m.text"},"ts":1572638274000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: tbh i don't think we have precedent here","msgtype":"m.text"},"ts":1572640995000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: :/","msgtype":"m.text"},"ts":1572641005000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"What are your opinions?","msgtype":"m.text"},"ts":1572641017000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: iow i think you could make a case for \"check for Type String, else Object\", or, \"is a string or a String object, else Object\"","msgtype":"m.text"},"ts":1572641022000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i, of course, have a package you could use for the polyfill if you go with the latter","msgtype":"m.text"},"ts":1572641039000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Idk, throwing on `String` while accepting `string` feels weird.","msgtype":"m.text"},"ts":1572641056000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1572641061000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah, I'd personally prefer `String || string` too.","msgtype":"m.text"},"ts":1572641070000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"but i think if you want it to be an Object or a string, a String is a big gray area","msgtype":"m.text"},"ts":1572641076000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"lol exactly the problem.","msgtype":"m.text"},"ts":1572641089000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"the biggest problem I'm having is not that it's a different behavior.","msgtype":"m.text"},"ts":1572641107000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"It's that we're straight up throwing.","msgtype":"m.text"},"ts":1572641113000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I'd imagine a lot of people out there in the wild would pass `String`s. A lot. Unlike our test cases which are 100% literals.","msgtype":"m.text"},"ts":1572641151000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i don't imagine that","msgtype":"m.text"},"ts":1572641175000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it's nonzero but i'd guess it's an extreme rarity","msgtype":"m.text"},"ts":1572641182000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"What? Are you sure? I think a lot of people will not have the string as a literal but rather get the value from a library or another thing that returns a `String`.","msgtype":"m.text"},"ts":1572641234000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"Buuuuuut `Temporal.now()`","msgtype":"m.text"},"ts":1572641245000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i'm not aware of any library or thing that uses primitive objects","msgtype":"m.text"},"ts":1572641251000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"it'd be super unergonomic to return a String because typeof would be misleading on it","msgtype":"m.text"},"ts":1572641270000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"They use the `String` class, right?","msgtype":"m.text"},"ts":1572641271000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1572641273000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1572641277000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"or rather, `Object('foo')` is instanceof String, yes","msgtype":"m.text"},"ts":1572641290000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"but `typeof Object('foo') !== 'string'`, so it's generally considered super bad to produce boxed strings","msgtype":"m.text"},"ts":1572641304000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Wait, sorry, anyway, that shouldn't matter much either way though?","msgtype":"m.text"},"ts":1572641312000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"you said \"get the value from a library or another thing that returns a `String`.\"","msgtype":"m.text"},"ts":1572641323000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1572641328000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"My bad.","msgtype":"m.text"},"ts":1572641332000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"i'm saying that i think that virtually nothing in the entire ecosystem will produce a boxed string","msgtype":"m.text"},"ts":1572641333000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"So... `typeof arg === 'string' || arg instanceof String` it is?","msgtype":"m.text"},"ts":1572641420000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"no, `instanceof` is not reliable across realms","msgtype":"m.text"},"ts":1572641428000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"you were talking about a shim of yours...","msgtype":"m.text"},"ts":1572641447000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: you'd have to use https://npmjs.com/is-string","msgtype":"m.text"},"ts":1572641447000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: question is, how would I express this in the spec text? Do we have an abstract op for this?","msgtype":"m.text"},"ts":1572641480000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: i think you can use \"is a String exotic object\", or [[StringData]] internal slot","msgtype":"m.text"},"ts":1572641546000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ryzokuken: but if you want to throw when it's not a string or String, then you can use `thisStringValue`","msgtype":"m.text"},"ts":1572641555000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I want two conditions: `string || String` and `non-String objects`.","msgtype":"m.text"},"ts":1572641599000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"throw a `TypeError` otherwise.","msgtype":"m.text"},"ts":1572641608000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"I think that'll be fairly simple in the polyfill given the module.","msgtype":"m.text"},"ts":1572641631000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1572641636000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"hmm - for the spec text, maybe make a \"HasStringValue\" abstract op, refactor `thisStringValue` to use it, and then use it in Temporal?","msgtype":"m.text"},"ts":1572641666000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: make \"HasStringValue\" in ECMA 262?","msgtype":"m.text"},"ts":1572641705000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"ryzokuken: as part of temporal","msgtype":"m.text"},"ts":1572641819000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"okay, I'll do that.","msgtype":"m.text"},"ts":1572641834000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"will ping you if I hit any roadblocks (which I certainly will, I guess).","msgtype":"m.text"},"ts":1572641856000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1572641894000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"great. have a nice weekend!","msgtype":"m.text"},"ts":1572641908000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"you too","msgtype":"m.text"},"ts":1572641915000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I'd try to fix the whole `from` and `fromString` situation over the weekend so we have something nice to look at next week.","msgtype":"m.text"},"ts":1572641948000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"},
{"content":{"body":"hopefully a rather solid-looking public API.","msgtype":"m.text"},"ts":1572641959000,"senderName":"ryzokuken","senderId":"ryzokuken@irc"}
]