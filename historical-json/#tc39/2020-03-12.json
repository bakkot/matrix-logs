[
{"content":{"body":"wow I never actually stopped to notice that you could pin sections while reading the spec","msgtype":"m.text"},"ts":1583994788000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this changes everything","msgtype":"m.text"},"ts":1583994795000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"every once in a while i accidentally click it while trying to copy a permalink","msgtype":"m.text"},"ts":1583995465000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"that is the entirety of my relationship with pins","msgtype":"m.text"},"ts":1583995475000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ha yeah i never knew about it either","msgtype":"m.text"},"ts":1583995529000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"https://es.discourse.group/t/get-iterator-result-in-for-of-syntax/ ðŸ¤”","msgtype":"m.text"},"ts":1584021197000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"might be interesting to have an expression form but `for` is soo overloaded already","msgtype":"m.text"},"ts":1584021969000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"the completion value differing if it is used as expression vs statement does have precedent with `function`s though","msgtype":"m.text"},"ts":1584022014000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"do expressions could be used to get you the return value","msgtype":"m.text"},"ts":1584024026000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ljharb: for ... of doesn't have the right completion value to do that","msgtype":"m.text"},"ts":1584024150000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ah, whatâ€™s itâ€™s completion value now, the last thing in the last iteration?","msgtype":"m.text"},"ts":1584024189000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"the last completion value of the loop body (if it ran)","msgtype":"m.text"},"ts":1584024248000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ruh roh, is it always undefined if it never ran???","msgtype":"m.text"},"ts":1584024280000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"is it supposed to be undefined or empty....","msgtype":"m.text"},"ts":1584024293000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"> 0; for (let _ of (function* () {yield 1; return 2;})()) { 3; }","msgtype":"m.text"},"ts":1584024315000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"if you don't yield I see undefined instead of 0?","msgtype":"m.text"},"ts":1584024326000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ff => 0, v8 => undefined, jsc => undefined","msgtype":"m.text"},"ts":1584024487000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"a consistency bug, ripe for the picking","msgtype":"m.text"},"ts":1584024495000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset , looks like it is supposed to be fundefined","msgtype":"m.text"},"ts":1584024629000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"interesting to know that I cannot propagate completion values through it","msgtype":"m.text"},"ts":1584024673000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"ðŸ‘€","msgtype":"m.text"},"ts":1584025639000,"senderName":"jackworks","senderId":"jackworks@irc"},
{"content":{"body":"if someone has IE / non-chrome Edge lying around i'd be curious to know what it is there","msgtype":"m.text"},"ts":1584025685000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"I think this is one of the things changed in ES2015","msgtype":"m.text"},"ts":1584030879000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"one of these days I really need to buckle down and figure out Annex B.3.3, but in the meantime, does somebody have a clearer explanation for why this test is valid? https://github.com/tc39/test262/blob/master/test/language/statements/try/early-catch-function.js","msgtype":"m.text"},"ts":1584031891000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"namely:","msgtype":"m.text"},"ts":1584031900000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"â€¢ everyone agrees that `try { JSON.parse() } catch (x) { var x; }` is fine (per Annex B.3.5)","msgtype":"m.text"},"ts":1584031926000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"â€¢ everyone evidently agrees that  `try { JSON.parse() } catch { function x() {} } print(x);` prints `function x() {}` and not `undefined` in sloppy mode","msgtype":"m.text"},"ts":1584032000000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sure, there's no shadowing with that one","msgtype":"m.text"},"ts":1584032023000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"`var` being allowed makes sense because `var x` is a noop in that case, and `x = y` is already allowed","msgtype":"m.text"},"ts":1584032043000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"â€¢ yet somehow `try { JSON.parse() } catch (x) { function x() {} }` does not get the B.3.5 exemption","msgtype":"m.text"},"ts":1584032055000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"i can see an argument to allow `function x() {}` in there, but what's the use case","msgtype":"m.text"},"ts":1584032059000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"no I just want to make sure I get how the spec is saying that this is so","msgtype":"m.text"},"ts":1584032102000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol i'm not going to pretend i can understand grammar + annex b + hoisting, hopefully someone can help :-)","msgtype":"m.text"},"ts":1584032128000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"because it seems like if it's visible after the catch block, then it's not lexical; yet it doesn't get the var redecl exemption","msgtype":"m.text"},"ts":1584032133000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah I was hoping for Bakkot's rescue here ðŸ˜‚","msgtype":"m.text"},"ts":1584032148000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: the reason it's an error is because B.3.3 function declarations act as _both_ a lexical and a var declaration, and `try { } catch (e) { let e; }` is an error","msgtype":"m.text"},"ts":1584032282000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"it is in fact","msgtype":"m.text"},"ts":1584032307000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, mistype","msgtype":"m.text"},"ts":1584032311000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"\"if it's visible after the catch block, then it's not lexical\" is false; it is in fact both","msgtype":"m.text"},"ts":1584032317000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1584032345000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I didn't realize \"both\" was an option due to lack of depth of Annex B.3.3 understanding","msgtype":"m.text"},"ts":1584032363000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"apparently this is the \"clopen\" of the ES spec? :P","msgtype":"m.text"},"ts":1584032375000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it's pretty terrible, yeah","msgtype":"m.text"},"ts":1584032391000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"I guess it would be more precise to say that it creates two bindings","msgtype":"m.text"},"ts":1584032404000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"not that it is both","msgtype":"m.text"},"ts":1584032407000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but rather that it is one of each","msgtype":"m.text"},"ts":1584032412000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"rkirsling: here, just stare at this gist until it makes sense (read: your brain gives up): https://gist.github.com/bakkot/d3bcc42b7938fe2aeebf37eea1ff462d","msgtype":"m.text"},"ts":1584032574000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(editted with a perhaps clearer example0","msgtype":"m.text"},"ts":1584032727000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1584032737000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(whoops got called away there) wow, this is a doozy","msgtype":"m.text"},"ts":1584034517000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1584034518000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"welcome to adventure","msgtype":"m.text"},"ts":1584034559000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and all that just due to a function redecl","msgtype":"m.text"},"ts":1584035672000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"my brain is seriously melting","msgtype":"m.text"},"ts":1584038426000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"ohhhh wait","msgtype":"m.text"},"ts":1584038972000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so like, the function decl ends up creating an IIFE-scope var binding for `a` but doesn't initialize it...  but it's position is still relevant for the `a` binding earlier in the block... ugh, I'm still not there yet","msgtype":"m.text"},"ts":1584039289000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"also *its","msgtype":"m.text"},"ts":1584039296000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: updated the gist again with some more probes","msgtype":"m.text"},"ts":1584039657000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"<3","msgtype":"m.text"},"ts":1584039686000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but to summarize:","msgtype":"m.text"},"ts":1584039701000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"when B.3.3 is allowed to apply to a function declaration named f, it has the following effects:","msgtype":"m.text"},"ts":1584039740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- the function gets a `var f;` at the top of it","msgtype":"m.text"},"ts":1584039740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- the block containing the declaration gets a `let f = function (){}` at the top of it (with the parameters and body of the original declaration, but no name because function expression names are not the same as function declaration names)","msgtype":"m.text"},"ts":1584039740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"- when the declaration itself is reached, it reads from the `let f` (whatever is currently there) and writes to the `var f`","msgtype":"m.text"},"ts":1584039740000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"sorry, that first line should be \"the function (or script) containing the function-declaration-in-a-block [...]\"","msgtype":"m.text"},"ts":1584039771000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"another person inducted to b.3.3 understanding?","msgtype":"m.text"},"ts":1584039858000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"one of us one of us","msgtype":"m.text"},"ts":1584039861000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i tried to get the last bullet of Bakkot changed a while back because the first time i implemented i felt so personally affronted by the semantics","msgtype":"m.text"},"ts":1584039912000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but i have since then matured as a person","msgtype":"m.text"},"ts":1584039968000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"also B.3.3 doesn't actually capture what browsers do yet; see https://github.com/tc39/ecma262/issues/913","msgtype":"m.text"},"ts":1584039986000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh man i wrote that?","msgtype":"m.text"},"ts":1584040051000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no recollection","msgtype":"m.text"},"ts":1584040057000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"counterfactuals in semantics: not a good time","msgtype":"m.text"},"ts":1584040084000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"rkirsling: you'd appreciate the difficulty. the way i learned how to model counterfactuals is possible worlds a la kripke. is it time for modal logic in ecma262?","msgtype":"m.text"},"ts":1584040241000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"=D","msgtype":"m.text"},"ts":1584040651000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hell yeah","msgtype":"m.text"},"ts":1584040731000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"create a successor world and then jettison it after","msgtype":"m.text"},"ts":1584040853000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(admittedly that's a very imperative way to put it but alas)","msgtype":"m.text"},"ts":1584040907000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"Bakkot: thanks for all that; I'll be sure to store this in writing somewhere for myself","msgtype":"m.text"},"ts":1584041003000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"someday I should write it up and publish it somewhere so I can link it instead of reproducing it from memory every time","msgtype":"m.text"},"ts":1584041036000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"actually there ought to be a tales-from-the-ES-crypt blog post about this yeah","msgtype":"m.text"},"ts":1584041047000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"lol, \"ecma's crypt\"","msgtype":"m.text"},"ts":1584041068000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"this needs to be a blog","msgtype":"m.text"},"ts":1584041078000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"a \"wat\" talk only 5 people can appreciate","msgtype":"m.text"},"ts":1584041095000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"ðŸ˜…","msgtype":"m.text"},"ts":1584041103000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I APPRECIATE","msgtype":"m.text"},"ts":1584041120000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"OMG","msgtype":"m.text"},"ts":1584041120000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"ECMA'S CRYPT YES","msgtype":"m.text"},"ts":1584041126000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"my favorite right now is `typeof new Proxy(document.all, {})`","msgtype":"m.text"},"ts":1584041143000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"(it's \"function\", because of course it is)","msgtype":"m.text"},"ts":1584041150000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"stop that's illegal","msgtype":"m.text"},"ts":1584041152000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"http://images4.wikia.nocookie.net/__cb20100602135929/uncyclopedia/images/thumb/c/c4/CryptKeeper.gif/450px-CryptKeeper.gif","msgtype":"m.text"},"ts":1584041153000,"senderName":"akirose","senderId":"akirose@irc"},
{"content":{"body":"how is that function","msgtype":"m.text"},"ts":1584041160000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"document.all is callable","msgtype":"m.text"},"ts":1584041166000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"document.all doesn't have a call slot","msgtype":"m.text"},"ts":1584041166000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1584041168000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"sure does","msgtype":"m.text"},"ts":1584041170000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh and it returns null","msgtype":"m.text"},"ts":1584041182000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"classic","msgtype":"m.text"},"ts":1584041183000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when called with no arguments","msgtype":"m.text"},"ts":1584041196000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#HTMLAllCollection-call","msgtype":"m.text"},"ts":1584041210000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"like i understand why they did the whole falsish thing","msgtype":"m.text"},"ts":1584041278000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but why is it a function too","msgtype":"m.text"},"ts":1584041287000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Bakkot: make it revocable bro","msgtype":"m.text"},"ts":1584041357000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's called `all` for a reason","msgtype":"m.text"},"ts":1584041363000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"devsnek it was already a function in IE","msgtype":"m.text"},"ts":1584041372000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the answer to the question \"what type is document.all?\" is of course \"yes\"","msgtype":"m.text"},"ts":1584041409000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(I guess it's unequivocally not a number though lol)","msgtype":"m.text"},"ts":1584041447000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"could some recommend a CLI js pretty printer?","msgtype":"m.text"},"ts":1584041586000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what is the clang format of js, prettier?","msgtype":"m.text"},"ts":1584041620000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there's no one answer. prettier's probably the fastest out of the box for you","msgtype":"m.text"},"ts":1584041640000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"prettier","msgtype":"m.text"},"ts":1584041660000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"the most common is eslint with airbnb's config, but \"standard\" and \"prettier\" are both pretty frequently used too","msgtype":"m.text"},"ts":1584041672000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"prettier is the most common as a CLI tool by far","msgtype":"m.text"},"ts":1584041689000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"as a standalone one, true","msgtype":"m.text"},"ts":1584041696000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"shu: you can `npx prettier file.js` to pretty-print any JS file without even installing prettier, as long as you have modern node on your computer","msgtype":"m.text"},"ts":1584041762000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"we could make an official tc39 one and destroy the community forever","msgtype":"m.text"},"ts":1584041765000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"though probably you want to install it","msgtype":"m.text"},"ts":1584041777000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"devsnek nah, no one listens to us","msgtype":"m.text"},"ts":1584041799000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"fun trivia","msgtype":"m.text"},"ts":1584041853000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"when jetbrains was making webstorm","msgtype":"m.text"},"ts":1584041858000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"...except when we try to take away their precious ASI","msgtype":"m.text"},"ts":1584041863000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"they made standardjs the default formatter for js","msgtype":"m.text"},"ts":1584041868000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"because they thought it was an actual standard","msgtype":"m.text"},"ts":1584041873000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah I am still mad about feross's decision to name it that","msgtype":"m.text"},"ts":1584041906000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"cool thanks","msgtype":"m.text"},"ts":1584041930000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"still not too late to make StandardsJS","msgtype":"m.text"},"ts":1584042028000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"just sayin'","msgtype":"m.text"},"ts":1584042034000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"StandardizedES","msgtype":"m.text"},"ts":1584042085000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"ljharb: also it looks like prettier gets 3x the number of weekly downloads as eslint-config-airbnb; is there a different number somewhere you're looking at?","msgtype":"m.text"},"ts":1584042225000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"oh, I guess more like 2x for eslint-config-airbnb-base","msgtype":"m.text"},"ts":1584042258000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"Bakkot: ah, i haven't checked in awhile","msgtype":"m.text"},"ts":1584042263000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"tho prettier's also used on \"not just javascript\"","msgtype":"m.text"},"ts":1584042277000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"i wish it weren't :(","msgtype":"m.text"},"ts":1584042291000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"but yes","msgtype":"m.text"},"ts":1584042294000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1584042298000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"ya but just look at that logo","msgtype":"m.text"},"ts":1584042306000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it will make my code as aesthetic as that logo","msgtype":"m.text"},"ts":1584042312000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"nothing like picking a name that directly says that all other options make your code ugly :-p","msgtype":"m.text"},"ts":1584042366000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I believe it's spelled a e s t h e t i c","msgtype":"m.text"},"ts":1584042369000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"so stepping back, even if that function-in-block is \"both\" var and let, what is the original rationale for the let part being hoisted to the top of the block?","msgtype":"m.text"},"ts":1584045145000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"I feel like that might be the weirdest part of it","msgtype":"m.text"},"ts":1584045155000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"let/const is always hoisted to the top of every block","msgtype":"m.text"},"ts":1584045287000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"that's how the TDZ works","msgtype":"m.text"},"ts":1584045291000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1584045372000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1584045384000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"(that's my understanding anyways)","msgtype":"m.text"},"ts":1584045400000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"I found my voice","msgtype":"m.text"},"ts":1584045443000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"rkirsling: the original motivation is that all bindings hoist in that way","msgtype":"m.text"},"ts":1584045474000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the original original motivation was probably implementation","msgtype":"m.text"},"ts":1584045493000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I still feel like this is shocking in the sense that `let a = function () {};` is inserted at the top of the block, so like, it has an accessible value and everything","msgtype":"m.text"},"ts":1584045647000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"not just an uninitialized binding","msgtype":"m.text"},"ts":1584045661000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: you mean how function declarations work?","msgtype":"m.text"},"ts":1584045728000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"evidently I just never thought about hoisting _in_ a block (vs. _through_ a block)","msgtype":"m.text"},"ts":1584045835000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"{ var x; } is easy to understand; it just \"can't see the braces\"","msgtype":"m.text"},"ts":1584045864000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"it sees the function's braces tho","msgtype":"m.text"},"ts":1584045893000,"senderName":"ljharb","senderId":"ljharb@irc"},
{"content":{"body":"yeah true","msgtype":"m.text"},"ts":1584045901000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"hrmm yeah I guess I take that back then","msgtype":"m.text"},"ts":1584046059000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"rkirsling: wait `let a = function () {};` isn't inserted at the top of the block","msgtype":"m.text"},"ts":1584046064000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the binding is hoisted, the initializer isn't","msgtype":"m.text"},"ts":1584046071000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu yes it is","msgtype":"m.text"},"ts":1584046074000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"wait what","msgtype":"m.text"},"ts":1584046079000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the initializer is hoisted?","msgtype":"m.text"},"ts":1584046082000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1584046092000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"see https://gist.github.com/bakkot/d3bcc42b7938fe2aeebf37eea1ff462d","msgtype":"m.text"},"ts":1584046093000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"this was the surprise to me, yeah","msgtype":"m.text"},"ts":1584046095000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"but then tbf","msgtype":"m.text"},"ts":1584046098000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"oh for annex B?","msgtype":"m.text"},"ts":1584046099000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i am so confused what are we talking about","msgtype":"m.text"},"ts":1584046107000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"`'use strict'; { a(); function a() { print(3); } } print(a);` is not surprising, in printing 3 and then hitting a ref error","msgtype":"m.text"},"ts":1584046123000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"either way","msgtype":"m.text"},"ts":1584046130000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"if you actually wrote out `let a = ...` the ... isn't hoisted","msgtype":"m.text"},"ts":1584046134000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the semantics of annex b are not representable via source text JS","msgtype":"m.text"},"ts":1584046147000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"yes, that much is crystal clear","msgtype":"m.text"},"ts":1584046151000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1584046152000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"right, annex b hoists the entire function because function statements are generally hoisted in toto","msgtype":"m.text"},"ts":1584046232000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the thing that gets left in place of the original statement is like \"var_env.a = env.a\"","msgtype":"m.text"},"ts":1584046267000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"which is unutterable","msgtype":"m.text"},"ts":1584046279000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://freenode.logbot.info/tc39/20200312#c3395561-c3395570","msgtype":"m.text"},"ts":1584046332000,"senderName":"Bakkot","senderId":"Bakkot@irc"},
{"content":{"body":"exactly, yes","msgtype":"m.text"},"ts":1584046372000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I think I just got momentarily confused about what exactly I was confused about","msgtype":"m.text"},"ts":1584046463000,"senderName":"rkirsling","senderId":"rkirsling@irc"},
{"content":{"body":"sloppy mode is tears","msgtype":"m.text"},"ts":1584046470000,"senderName":"rkirsling","senderId":"rkirsling@irc"}
]