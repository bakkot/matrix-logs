[
{"content":{"body":"annevk: Do you have any opinions on the last comment of https://github.com/whatwg/fetch/issues/966?","msgtype":"m.text"},"ts":1575521954000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: it seems fine to me, I wonder if we really need 2, but I guess theoretically it could be an attack vector so maybe that's good; I kinda prefer requiring h2 over that, but can live with provided there's solid test coverage","msgtype":"m.text"},"ts":1575533824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thanks. I'm not fully sure about the need for the new header too, but I think the new header is less confusing than requiring h2.","msgtype":"m.text"},"ts":1575534159000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: who suggested the new header? Security team?","msgtype":"m.text"},"ts":1575534405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: are we effectively looking at two new headers or do we only want the preflight response to advertize it, similar to Access-Contor-Allow-Credentials?","msgtype":"m.text"},"ts":1575534453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: Access-Control-Allow-Streams: true?","msgtype":"m.text"},"ts":1575534466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: none. I thought  some participants wanted to restrict the feature for H2, which seemed unfortunate to me.","msgtype":"m.text"},"ts":1575534508000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: If everyone agrees that the secure context restriction is enough, I'm happy to retract the new header.","msgtype":"m.text"},"ts":1575534544000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: I'm fine with both (having one header on response, or having headers on both req and res). Maybe only on response is enough?","msgtype":"m.text"},"ts":1575534667000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: so the main reason to restrict to h2 is to avoid imposing new impl requirements on browsers with regards to chunked encoding","msgtype":"m.text"},"ts":1575534903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: might be sunk cost for Chrome, but not sure that's the case for all involved, I thought it wasn't for Firefox","msgtype":"m.text"},"ts":1575534932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: I hadn't considered that sending chunked encoding itself to a different origin is in effect a new attack vector, but given the required CORS preflight I'm kinda okay with not requiring an additional opt-in for that, especially as it's a normal HTTP request in pretty much all respects, except for not listing Content-Length","msgtype":"m.text"},"ts":1575535008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Does @ddragana know Firefox's status for chunked encoding?","msgtype":"m.text"},"ts":1575535199000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: she would know for sure, yes, I can ask again","msgtype":"m.text"},"ts":1575535449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thank you. I'll add a comment on the thread.","msgtype":"m.text"},"ts":1575536792000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"yhirano: so","msgtype":"m.text"},"ts":1575536806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: we don't have it, but adding it is doable","msgtype":"m.text"},"ts":1575536822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano: secure contexts is a must though","msgtype":"m.text"},"ts":1575536830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: My understanding is:","msgtype":"m.text"},"ts":1575536850000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: secure context is a must-have","msgtype":"m.text"},"ts":1575536861000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: requiring h2 may be good for some user agents from implementation cost PoV, but at least one web dev expressed a concern from usability PoV","msgtype":"m.text"},"ts":1575536910000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"annevk: adding a new header may be good from security PoV","msgtype":"m.text"},"ts":1575536932000,"senderName":"yhirano","senderId":"yhirano@irc"},
{"content":{"body":"nods","msgtype":"m.emote"},"ts":1575536952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Though, I'm okay with saying that the existing CORS preflight is sufficient here","msgtype":"m.text"},"ts":1575536978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: heya, who would be best to ask questions about WebAssembly.Module?","msgtype":"m.text"},"ts":1575546922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can answer some, also Ms2ger and Luke","msgtype":"m.text"},"ts":1575546946000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I don't really understand how it's similar to SharedArrayBuffer, since it always copies the input bytes","msgtype":"m.text"},"ts":1575547007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: and it doesn't even accept SharedArrayBuffer as an argument currently","msgtype":"m.text"},"ts":1575547026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah... I wasn't around when they made that decision. I believe it was so that it can be processed asynchronously, but I don't know why they didn't detach it instead","msgtype":"m.text"},"ts":1575547047000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't see why it couldn't accept a SAB, but I also don't understand the use case. I thought we were adding SAB support on a case-by-case basis when we were confident?","msgtype":"m.text"},"ts":1575547079000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"the copy is created eagerly and then the compilation may happen in the background","msgtype":"m.text"},"ts":1575547100000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"annevk: Are there any issues with the wording of the copy?","msgtype":"m.text"},"ts":1575547115000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: maybe since they don't actually want to recompile?","msgtype":"m.text"},"ts":1575547119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, yeah, if it were a live, changing thing and expected to reflect that, that'd be pretty unworkable...","msgtype":"m.text"},"ts":1575547137000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: the specification is clear, I'm trying to understand the space in light of the changes we're making around SharedArrayBuffer serialization","msgtype":"m.text"},"ts":1575547149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do you have a reference for that?","msgtype":"m.text"},"ts":1575547157000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: no, in a discussion with lth that came up, that maybe folks don't want to compile again and therefore don't want to allow messaging these things out of a process","msgtype":"m.text"},"ts":1575547220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, there was a separate thing about serializing modules","msgtype":"m.text"},"ts":1575547258000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"but some folks were saying they *would* want to recompile","msgtype":"m.text"},"ts":1575547269000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1575547277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Your understanding about allowing SharedArrayBuffer is correct btw, we'll gradually sprinkle [AllowShared] all over the place.)","msgtype":"m.text"},"ts":1575547307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"serializing modules is supported, see https://webassembly.github.io/spec/web-api/index.html#serialization","msgtype":"m.text"},"ts":1575547328000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"not to storage, though (although that was originally planned)","msgtype":"m.text"},"ts":1575547340000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"modules are much nicer than SAB here since the code can't mutate. Also, they've already had an async compile step","msgtype":"m.text"},"ts":1575547354000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I guess the real question is, should serializing these modules only work when serializing SAB works?","msgtype":"m.text"},"ts":1575547389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure what implementations do, whether they actually recompile or not. My memory was that, in the beginning, more folks than I expected were actually just serializing the Wasm bytecode","msgtype":"m.text"},"ts":1575547391000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I'll email you and Luke as a start if that's okay.","msgtype":"m.text"},"ts":1575547449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, I can imagine the reason for this restriction, yes","msgtype":"m.text"},"ts":1575547458000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"if one origin's process is totally hosed, then you might not trust it to compile things","msgtype":"m.text"},"ts":1575547479000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"OTOH, the browser could just decide to fall back to sharing the bytecode when going across sites","msgtype":"m.text"},"ts":1575547499000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this would make it more of a performance cliff than a security hole","msgtype":"m.text"},"ts":1575547522000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(Ms2ger would be a good person to cc in any email)","msgtype":"m.text"},"ts":1575547550000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Going across processes will always be a cliff of sorts I suspect (unless we make everything slower)","msgtype":"m.text"},"ts":1575547557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay","msgtype":"m.text"},"ts":1575547559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll copy Ms2ger on all my emails from now","msgtype":"m.text"},"ts":1575547573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on","msgtype":"m.text"},"ts":1575547575000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, this makes sense. I suspect there's no restriction needed here","msgtype":"m.text"},"ts":1575547576000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1575547579000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"littledan: Ms2ger: ah, I think a thing I was missing is https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#javascript-api-changes","msgtype":"m.text"},"ts":1575547917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: Ms2ger: that would certainly be a type of WebAssembly.Module type that needs similar restrictions","msgtype":"m.text"},"ts":1575547947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't this implicit in WebIDL?","msgtype":"m.text"},"ts":1575547985000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"err sorry I misread","msgtype":"m.text"},"ts":1575548009000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"I don't see why we need this sort of option for WebAssembly.Module","msgtype":"m.text"},"ts":1575548049000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's a bit backwards: Memory actually *creates* a SAB. Whereas Module's constructor consumes one","msgtype":"m.text"},"ts":1575548073000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Oh wait, that's WebAssembly.Memory","msgtype":"m.text"},"ts":1575548100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think we can just rely on WebIDL to check that no SAB is passed in, and then the result is always copied and sharable","msgtype":"m.text"},"ts":1575548101000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Can WebAssembly.Memory be serialized?","msgtype":"m.text"},"ts":1575548115000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and this is the current specified semantics IIRC)","msgtype":"m.text"},"ts":1575548115000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Well currently it's restricted to be shared within an agent cluster","msgtype":"m.text"},"ts":1575548138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And cannot be serialized to disk despite mostly being bytes","msgtype":"m.text"},"ts":1575548153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right, we had a whole debate about serializing WebAssembly.Module to storage. IMO it only makes sense if people will actually store the compilation output, but this has all sorts of cases where it gets invalidated. Better to just store the bytecode and have good caching","msgtype":"m.text"},"ts":1575548220000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(it's a high-level, unreliable API, but IndexedDB support would've been as well, given all the cases where it would disappear)","msgtype":"m.text"},"ts":1575548243000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"also it seemed like some engines were just going to store the bytecode anyway, when you serialize WebAssembly.Module, which defeats the whole purpose","msgtype":"m.text"},"ts":1575548272000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Here's the spec for serializing WebAssembly.Memory. It does what you'd probably expect https://github.com/WebAssembly/threads/blob/master/document/web-api/index.bs#L146","msgtype":"m.text"},"ts":1575548379000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"(looks like I wrote that)","msgtype":"m.text"},"ts":1575548418000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I see, so, you can create Memory from any kind of BufferSource, but you can only serialize if that BufferSource was SAB","msgtype":"m.text"},"ts":1575548558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: and then when you serialize, all SAB serialization restrictions automatically apply","msgtype":"m.text"},"ts":1575548574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you can create a Module from any BufferSource, but the Memory constructor allocates the underlying ArrayBuffer","msgtype":"m.text"},"ts":1575548637000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"when you use the \"shared\" option for Memory, it creates an SAB internally (which you can easily access), and that is subject to those serialization restrictions","msgtype":"m.text"},"ts":1575548705000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"thanks for this review, btw","msgtype":"m.text"},"ts":1575548718000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: okay, so you create Memory and based on options it either creates AB or SAB (I might not call the internal slot BufferSource in that case)","msgtype":"m.text"},"ts":1575548752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess what WebAssembly.Module does doesn't matter so much then, indeed","msgtype":"m.text"},"ts":1575548789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As by itself it's not an attack vector and the process isolation seems to be driven by non-security reasons","msgtype":"m.text"},"ts":1575548830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that's how I see it","msgtype":"m.text"},"ts":1575551886000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"Cool, I'm glad this is layered even better than I expected and I think I mostly misunderstood WebAssembly.Module since I didn't know about the plans around WebAssembly.Memory","msgtype":"m.text"},"ts":1575552006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I'm looking at what's remaining of your script insertion work","msgtype":"m.text"},"ts":1575561545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Remaining?","msgtype":"m.text"},"ts":1575561583000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Parts landed? :O","msgtype":"m.text"},"ts":1575561589000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I think I have a slightly better handle on what I want out of it so maybe I can try to drive it to a conclusion","msgtype":"m.text"},"ts":1575561605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: and also get Apple to weigh in","msgtype":"m.text"},"ts":1575561615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Nice. Sorry for dropping the ball.","msgtype":"m.text"},"ts":1575561620000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I really appreciate all the work you put into it thus far, looking over it again it seems we were extremely close","msgtype":"m.text"},"ts":1575561652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or are, really","msgtype":"m.text"},"ts":1575561660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1575561671000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so yeah, now I'm at what kind of mutation records should normalize() generate","msgtype":"m.text"},"ts":1575564285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: meh","msgtype":"m.text"},"ts":1575564289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but, progress","msgtype":"m.text"},"ts":1575564304000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe it's not quite that bad","msgtype":"m.text"},"ts":1575564592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Famous last words. :P","msgtype":"m.text"},"ts":1575564879000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Took a day off to go protest against pension system reform today, so I'll look at your PR tomorrow. :)","msgtype":"m.text"},"ts":1575565122000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: 👍🏻","msgtype":"m.text"},"ts":1575565141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk / Domenic: by my reading, the `crossorigin` attribute for `<script>` only affects classic scripts, not modules. Does that sound right to you?","msgtype":"m.text"},"ts":1575567036000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"jugglinmike: hmm, doesn't crossorigin=use-credentials have an effect?","msgtype":"m.text"},"ts":1575567070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^ that","msgtype":"m.text"},"ts":1575567131000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh, let's see","msgtype":"m.text"},"ts":1575567210000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"I","msgtype":"m.text"},"ts":1575567212000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"also, not sure empty string counts as a state","msgtype":"m.text"},"ts":1575567312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, I see it now: https://html.spec.whatwg.org/#set-up-the-module-script-request","msgtype":"m.text"},"ts":1575567344000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"sorry, I was thrown off by 'mode is \"cors\"' in https://html.spec.whatwg.org/#fetch-a-single-module-script","msgtype":"m.text"},"ts":1575567397000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"oh, no. \"credentials mode\" is not \"mode\"","msgtype":"m.text"},"ts":1575567527000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Correct, they're distinct","msgtype":"m.text"},"ts":1575567652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, so `crossorigin` affects the \"mode\" of the request for a classic script and the \"credentials mode\" of the request for module scripts","msgtype":"m.text"},"ts":1575567782000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"It affects both for classic scripts","msgtype":"m.text"},"ts":1575567838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It doesn't affect mode for module scripts","msgtype":"m.text"},"ts":1575567861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"via https://html.spec.whatwg.org/#set-up-the-classic-script-request","msgtype":"m.text"},"ts":1575567920000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"I think I get it, now. Thanks for the help :)","msgtype":"m.text"},"ts":1575567931000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1575567958000,"senderName":"annevk","senderId":"annevk@irc"}
]