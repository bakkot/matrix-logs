[
{"content":{"body":"hi,","msgtype":"m.text"},"ts":1346597557000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"how is webvtt supposed to be muxed within webm/mkv?","msgtype":"m.text"},"ts":1346597577000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"i'm a bit concerned about the timing line mixed with the payload","msgtype":"m.text"},"ts":1346597589000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"timing line mixed with the positionning* sorry","msgtype":"m.text"},"ts":1346597601000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"(so what goes in the payload?)","msgtype":"m.text"},"ts":1346597650000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"not sure what you're asking","msgtype":"m.text"},"ts":1346597818000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not to say I can necessarily answer, but I'll try if I can :)","msgtype":"m.text"},"ts":1346597850000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, if you take a common srt file muxed in mkv, an event such as \"01:02:03.04 --> 05:06:07.08\\nfoobar\" will be stored in mkv such as [pts_start][duration][payload=\"foobar\"]","msgtype":"m.text"},"ts":1346597955000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"what happens now when the position information is stored on the timed line, and not as part of the payload","msgtype":"m.text"},"ts":1346597982000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"if you put that information in the payload, how do you differenciate it from the classic text content","msgtype":"m.text"},"ts":1346598011000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"are you asking as a webm developer? i ask because this is a webm/mkv implementation detail--they can do it however they want, it's not something webvtt would define","msgtype":"m.text"},"ts":1346598115000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"for static (non-streaming) videos i'd be inclined to put the whole webvtt file (perhaps preprocessed in some way) at the start of the file, not to interleave it across the video--that's a strategy that doesn't make sense with files small enough to trivially load into memory","msgtype":"m.text"},"ts":1346598167000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but that's entirely up to the file format; they can preparse and store the file however they like, of course","msgtype":"m.text"},"ts":1346598198000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"putting the whole sub content is stupid since the format has capabilities to store subtitles events and an extra header","msgtype":"m.text"},"ts":1346598283000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the thing is, if we want to mux it properly","msgtype":"m.text"},"ts":1346598301000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"stupid? niiice","msgtype":"m.text"},"ts":1346598305000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it doesn't look like possible","msgtype":"m.text"},"ts":1346598306000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"\"can do\" and \"should do\" are not equivalent :)","msgtype":"m.text"},"ts":1346598330000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"except doing the crappy way of dumping the file in it","msgtype":"m.text"},"ts":1346598332000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"you can dump the whole cue text in it, or preprocess it in some way if you like","msgtype":"m.text"},"ts":1346598368000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"let's back up a bit","msgtype":"m.text"},"ts":1346598454000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"media containers are designed to have the split form (for audio, video or subtitles)","msgtype":"m.text"},"ts":1346598469000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"but if we want to split it","msgtype":"m.text"},"ts":1346598474000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"how are we supposed to do it?","msgtype":"m.text"},"ts":1346598479000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"is \"start time/duration/payload\" the basic format mkv has to work with for subtitles, or is that just how it handles srt?","msgtype":"m.text"},"ts":1346598490000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"since if we split the timing line and positionning","msgtype":"m.text"},"ts":1346598491000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the demuxer can't guess if the positionning is part of the text or a positionning info","msgtype":"m.text"},"ts":1346598505000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"(it doesn't really matter, it just affects how we discuss it)","msgtype":"m.text"},"ts":1346598511000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"basis for subtitles","msgtype":"m.text"},"ts":1346598531000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"it's used for ASS/SSA too","msgtype":"m.text"},"ts":1346598535000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the start & end are extracted from the dialogue events","msgtype":"m.text"},"ts":1346598552000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"okay, so start time and duration are straightforward; you'd have to encode the remaining information into the payload","msgtype":"m.text"},"ts":1346598557000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"put into the mkv structures, and rest of the dialog line put into the payload","msgtype":"m.text"},"ts":1346598568000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"for example--not suggesting this is optimal, just a simple quick way--the first byte of \"payload\" is the \"align\" setting (0: start, 1: middle, 2: end), the second byte encodes the size, etc., followed by the cue text","msgtype":"m.text"},"ts":1346598636000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not a very robust or extensible encoding, of course, just illustrating)","msgtype":"m.text"},"ts":1346598683000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"having an obvious way of muxing it in most of the container would be way better","msgtype":"m.text"},"ts":1346598709000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"that is, the \"payload\" is all of the information in the cue block except the timestamps, not just the cue text","msgtype":"m.text"},"ts":1346598715000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or put differently, the payload is the whole cue block, with the *exception* of the timestamps (since you encode those as separate fields)","msgtype":"m.text"},"ts":1346598758000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"my first more serious inclination if I was defining this would be to change the timestamps in the cue to \"0.000 --> 0.000\", and then just copy the entire cue block into the payload, so the parsing of the payload is defined by webvtt and no WebM format changes are needed to support new WebVTT features","msgtype":"m.text"},"ts":1346598847000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(the reason for blanking the timestamp is to make it clearly not redundant with the timestamp/duration encoded in the separate fields, to ensure that nobody accidentally uses them)","msgtype":"m.text"},"ts":1346598873000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(but leaving them in so it still parses in the same way)","msgtype":"m.text"},"ts":1346598893000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: about your proposition, it's a pain if a new fields is added","msgtype":"m.text"},"ts":1346600521000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"(having 1 byte per prop and stuff)","msgtype":"m.text"},"ts":1346600530000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"also if formats implement that differently it will be a pain for demuxers","msgtype":"m.text"},"ts":1346600550000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"ubitux: like I said, that's not an extensible (or even serious) encoding","msgtype":"m.text"},"ts":1346600557000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"since we can't factor code for such trivial thing","msgtype":"m.text"},"ts":1346600561000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the latter is rather more probable","msgtype":"m.text"},"ts":1346600571000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(muxers don't have to know anything at all about new cue features)","msgtype":"m.text"},"ts":1346600614000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well the good thing i see is cutting just after the timing info","msgtype":"m.text"},"ts":1346600621000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"and includes the \\n in the payload","msgtype":"m.text"},"ts":1346600632000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"that's more complex","msgtype":"m.text"},"ts":1346600635000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but it sucks a bit","msgtype":"m.text"},"ts":1346600638000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1346600647000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"we can't have some heuristics on the payload to detect if it's align/size, etc","msgtype":"m.text"},"ts":1346600665000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"because 1: now you have a cue block without a timestamp, meaning you can't just use webvtt's parser, and 2: don't forget about cue identifiers (whether those are often useful or not, better off not dropping them unnecessarily)","msgtype":"m.text"},"ts":1346600687000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"demuxers and decoders are different","msgtype":"m.text"},"ts":1346600709000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"you use a decoder to parse the payload stuff","msgtype":"m.text"},"ts":1346600721000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"basically the markup and stuff","msgtype":"m.text"},"ts":1346600726000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the timing stuff is extracted by the demuxer, splitting the input into chunk","msgtype":"m.text"},"ts":1346600740000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"yes, that's what i suggested :)","msgtype":"m.text"},"ts":1346600749000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so in case of a standalone webvtt, the demuxer will split the file into chunk, removing the timing stuff and send the payload to the decoder","msgtype":"m.text"},"ts":1346600782000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"in case of a muxed file, it's the same, you construct a packet with the timing info from the format","msgtype":"m.text"},"ts":1346600800000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"and send the payload to the webvtt decoder","msgtype":"m.text"},"ts":1346600811000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"yes, that's what i suggested :)","msgtype":"m.text"},"ts":1346600812000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"alright","msgtype":"m.text"},"ts":1346600816000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"well then that's not answering the question","msgtype":"m.text"},"ts":1346600822000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"what happens to the align & size from the timing information?","msgtype":"m.text"},"ts":1346600831000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"i don't know what the question is","msgtype":"m.text"},"ts":1346600831000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"they're not part of the timing information, they just happen to be on the same line","msgtype":"m.text"},"ts":1346600841000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"let me give an example","msgtype":"m.text"},"ts":1346600845000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(one sec)","msgtype":"m.text"},"ts":1346600848000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://pastebin.com/CWA5471e","msgtype":"m.text"},"ts":1346600954000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"then you have the timing information two times","msgtype":"m.text"},"ts":1346600975000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"that sucks.","msgtype":"m.text"},"ts":1346600977000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"no you don't","msgtype":"m.text"},"ts":1346600979000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well you have a kind of weird signature","msgtype":"m.text"},"ts":1346600995000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"there's no timestamp in the payload; just \"0 --> 0\", which is a dummy","msgtype":"m.text"},"ts":1346600996000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(0.000 --> 0.000 is a valid one no?)","msgtype":"m.text"},"ts":1346601021000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"it's there only to avoid having to change the parser (since then you'd run into other issues, like how to distinguish a cue id)","msgtype":"m.text"},"ts":1346601025000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and btw why this one?","msgtype":"m.text"},"ts":1346601026000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"why a so long signature?","msgtype":"m.text"},"ts":1346601035000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"that's not the timestamp; the timestamp is 00:10.000 --> 00:15.000","msgtype":"m.text"},"ts":1346601042000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and couldn't that be standardized?","msgtype":"m.text"},"ts":1346601043000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"it's not a signature, it's just a dummy timestamp so the WebVTT parser can still be used","msgtype":"m.text"},"ts":1346601060000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(eg. step 37 in the WebVTT parser)","msgtype":"m.text"},"ts":1346601125000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"whatever is decided, it would be *really* important to standardize","msgtype":"m.text"},"ts":1346601129000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"or at least a recommendation or something","msgtype":"m.text"},"ts":1346601157000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"because this will likely be an issue for various containers","msgtype":"m.text"},"ts":1346601172000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"not sure it makes sense for webvtt to try to standardize how it's encoded in higher-level formats it knows nothing about, but if the webm/mkv folks want advice on this stuff, they can always come here or post on public-texttracks","msgtype":"m.text"},"ts":1346601249000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well the other way around would be to make obvious how to split that","msgtype":"m.text"},"ts":1346601271000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"basically by separating the align/size stuff from the timing line","msgtype":"m.text"},"ts":1346601287000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"sorry--split what?","msgtype":"m.text"},"ts":1346601287000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that's out of webvtt's scope--it doesn't know anything about that (and as I suggested above, I don't even know if that's a good idea)","msgtype":"m.text"},"ts":1346601316000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"webvtt will be standardized and massively used","msgtype":"m.text"},"ts":1346601332000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"webvtt's parser depends heavily on seeing webvtt timestamps to know what it's looking at","msgtype":"m.text"},"ts":1346601338000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it will have the issue of being muxed","msgtype":"m.text"},"ts":1346601341000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"so it's something you should consider","msgtype":"m.text"},"ts":1346601347000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"zewt: i mean maybe move it do a dedicated line","msgtype":"m.text"},"ts":1346601378000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"but that would change the format and the parser significantly--the approach I suggested above (dummy timestamps) avoids that complexity","msgtype":"m.text"},"ts":1346601404000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not to say it's the only way of doing it, though nothing else comes to mind and it seems very simple, without all the ways trying to eliminate it might bite you)","msgtype":"m.text"},"ts":1346601464000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"just found http://wiki.webmproject.org/webm-metadata/temporal-metadata/webvtt-in-webm","msgtype":"m.text"},"ts":1346601662000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"seems like webm has another field that can be used for that information","msgtype":"m.text"},"ts":1346601675000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"i've seen that page before (it's a bit of a mess, hard to separate actual information from brainstorming)","msgtype":"m.text"},"ts":1346601740000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah that makes up its own vtt-esque format for storing webvtt, which sort of seems like a bad idea","msgtype":"m.text"},"ts":1346601809000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well if the format isn't good you don't have a choice","msgtype":"m.text"},"ts":1346601890000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"nothing wrong with the format; i just gave a decent way to do it :)","msgtype":"m.text"},"ts":1346601903000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and if you raise it on texttracks others may well have better ideas--or find issues with mine, for that matter)","msgtype":"m.text"},"ts":1346601962000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(though if webm's already made up its mind on how to do it, or if they're not paying attention, it won't help)","msgtype":"m.text"},"ts":1346601987000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"meh the specs is missing a lot of examples","msgtype":"m.text"},"ts":1346602082000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"can file bugs if you have specific examples you want: https://www.w3.org/Bugs/Public/ (product: texttracks)","msgtype":"m.text"},"ts":1346602163000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i would like various timing examples :p","msgtype":"m.text"},"ts":1346602189000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"i'll read deeply the text, but not me at first glance it doesn't look obvious if \"12:23:45.123\" is valid","msgtype":"m.text"},"ts":1346602228000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"if \"13245.12345\" is also","msgtype":"m.text"},"ts":1346602234000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"or if \"12\" is as well","msgtype":"m.text"},"ts":1346602239000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"see http://dev.w3.org/html5/webvtt/#webvtt-timestamp for the timestamp format (what's \"valid\") and the parser (http://dev.w3.org/html5/webvtt/#collect-a-webvtt-timestamp) for precisely what happens in a particular case","msgtype":"m.text"},"ts":1346602322000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: thanks :)","msgtype":"m.text"},"ts":1346608093000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"(sorry for the delay)","msgtype":"m.text"},"ts":1346608097000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"and yes i was refering to that part of the spec","msgtype":"m.text"},"ts":1346608106000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"still a list of valid examples would be nice","msgtype":"m.text"},"ts":1346608129000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"the spec really isn't obvious IMO","msgtype":"m.text"},"ts":1346608446000,"senderName":"ubitux","senderId":"ubitux@irc"},
{"content":{"body":"zewt: i do not use chrome for number of tasks because a number of quirks are not that developer friendly :P","msgtype":"m.text"},"ts":1346609394000,"senderName":"jack_tradez","senderId":"jack_tradez@irc"},
{"content":{"body":"heh, context loss is still an open problem for gpu-accelerated 2d canvas? i don't know why, but i thought that was only a problem with webgl","msgtype":"m.text"},"ts":1346609898000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm not sure. I like the vi style incremental search but it certainly doesn't work like vi ;)","msgtype":"m.text"},"ts":1346613822000,"senderName":"jack_tradez","senderId":"jack_tradez@irc"},
{"content":{"body":"vi starts searching where you are, chrome keeps going to the top of the page","msgtype":"m.text"},"ts":1346613867000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"For <base href=http://example.com> without a trailing slash on the URL, getting the href property returns http://example.com/ with the trailing slash in some browsers.","msgtype":"m.text"},"ts":1346624094000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"Reading through http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#dom-base-href I can't spot any step which says to add that trailing slash.","msgtype":"m.text"},"ts":1346624127000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"Am I missing it?","msgtype":"m.text"},"ts":1346624147000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1346624155000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Thanks.","msgtype":"m.text"},"ts":1346624162000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"This page reports that Firefox, Opera, and Safari add the trailing slash, and IE doesn't: http://notes.minty.org/cgi-bin/wiki.pl?Fixing_Base_Href_Javascript_Document.Location_For_Internet_Explorer","msgtype":"m.text"},"ts":1346624184000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"I've only personally checked Firefox, which does add it.","msgtype":"m.text"},"ts":1346624199000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"the absolute URL returned by the \"Resolve\" algorithm always includes that leading slash","msgtype":"m.text"},"ts":1346624202000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(\"leading\" because it's the first one in the path)","msgtype":"m.text"},"ts":1346624211000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Thanks. I'll read it again more carefully.","msgtype":"m.text"},"ts":1346624242000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"i'm not sure you'll find it","msgtype":"m.text"},"ts":1346624248000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the \"resolve\" algorithm is currently pointing at a vague RFC","msgtype":"m.text"},"ts":1346624260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we hope to write a more detailed spec in due course","msgtype":"m.text"},"ts":1346624270000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(i think anne's the one working on that)","msgtype":"m.text"},"ts":1346624277000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah.","msgtype":"m.text"},"ts":1346624425000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"I read that RFC before asking here.","msgtype":"m.text"},"ts":1346624432000,"senderName":"Smylers","senderId":"Smylers@irc"},
{"content":{"body":"I read it as at the Parse step the RFC parses hier-part, picking the path-abempty option, which allows the empty string. So <path> is then set, but empty, and that gets copied across through the rest of the algorithm, still being empty at the end.","msgtype":"m.text"},"ts":1346624695000,"senderName":"Smylers","senderId":"Smylers@irc"}
]