[
{"content":{"body":"wonders if any HTML parser implementors/testers are around","msgtype":"m.emote"},"ts":1436838508000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thinking about https://github.com/inikulin/parse5/issues/26#issuecomment-113298544","msgtype":"m.text"},"ts":1436838520000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm not sure what he means there about \"if an html opening tags is found in the 'in body' insertion mode, its attributes should extend the attributes of the first html element. Doing this would basically buffer the whole document in memory.\"","msgtype":"m.text"},"ts":1436838550000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I am?","msgtype":"m.text"},"ts":1436838592000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1436838596000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I think I know now","msgtype":"m.text"},"ts":1436838637000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"he means specfically the `html` element in the \"in body\" insertion mode","msgtype":"m.text"},"ts":1436838665000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody","msgtype":"m.text"},"ts":1436838667000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the \"Otherwise, for each attribute on the token, check to see if the attribute is already present on the top element of the stack of open elements. If it is not, add the attribute and its corresponding value to that element.\" part","msgtype":"m.text"},"ts":1436838682000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is nuts","msgtype":"m.text"},"ts":1436838687000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah, html start tags do that","msgtype":"m.text"},"ts":1436838732000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1436838737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so he seems right","msgtype":"m.text"},"ts":1436838741000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1436838745000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well I mean, he's right that doing that requires buffering the whole document in memory","msgtype":"m.text"},"ts":1436838766000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"unless I'm missing something","msgtype":"m.text"},"ts":1436838773000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't understand what he means by \"A way to mitigate this could be to send provisional html tags\"","msgtype":"m.text"},"ts":1436838792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"idk, sounds like doing weird shit by special casing the html element","msgtype":"m.text"},"ts":1436838822000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1436838828000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"like sending \"here's the html element\", \"oh wait no here's more for the html element\"","msgtype":"m.text"},"ts":1436838838000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the only practical way to do SAX for HTML is to admit fatal errors","msgtype":"m.text"},"ts":1436838876000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IMO","msgtype":"m.text"},"ts":1436838882000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1436838882000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1436838885000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that's the core of what I've been wondering","msgtype":"m.text"},"ts":1436838893000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you can so easily end up having to buffer so much that I'm never convinced it's worth it","msgtype":"m.text"},"ts":1436838900000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"esp. with AAA","msgtype":"m.text"},"ts":1436838903000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1436838909000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sadly","msgtype":"m.text"},"ts":1436838911000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though I was hoping to hear you say otherwise","msgtype":"m.text"},"ts":1436838928000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the requirement that you fatally error when you first hit a parse error or never means you can't do limited buffering based on allowing n tokens, really","msgtype":"m.text"},"ts":1436838954000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"at least while complying with the spec","msgtype":"m.text"},"ts":1436838963000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"though maybe that's a memory limitation and hence allowable?","msgtype":"m.text"},"ts":1436838979000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm yeah but that would be a lazy way out","msgtype":"m.text"},"ts":1436839006000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"AAA only requires buffering while the list of formatting elements is not empty, no?","msgtype":"m.text"},"ts":1436839010000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but you must always buffer while the list is not empty, right?","msgtype":"m.text"},"ts":1436839022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1436839039000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and you have to buffer all tables entirely","msgtype":"m.text"},"ts":1436839058000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I mean for a fair few documents that's essentially buffering the whole document","msgtype":"m.text"},"ts":1436839071000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sure yeah that's certain","msgtype":"m.text"},"ts":1436839072000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which people probably don't expect of a streaming parser","msgtype":"m.text"},"ts":1436839081000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1436839095000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"again, sadly","msgtype":"m.text"},"ts":1436839100000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think the only sensible way to do a streaming API is buffer everything or admit fatal errors, basically.","msgtype":"m.text"},"ts":1436839112000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah so I guess that's wahy Henri's SAX parser just either buffers the entire document or lets you opt into fatal-error-for-any-non-streaming-case","msgtype":"m.text"},"ts":1436839174000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: if you have time please consider adding a comment at https://github.com/servo/html5ever/issues/149","msgtype":"m.text"},"ts":1436839216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and/or talking to SimonSapin about it here","msgtype":"m.text"},"ts":1436839223000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"try reminding me in a few days","msgtype":"m.text"},"ts":1436839244000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1436839247000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well I'll make a comment right now on that issue and point to the logs here and ping you in the comment","msgtype":"m.text"},"ts":1436839292000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and remind you later if needed","msgtype":"m.text"},"ts":1436839315000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1436839697000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: that's not defined by HTML?","msgtype":"m.text"},"ts":1436859389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks for looking into it MikeSmith, gsnedders","msgtype":"m.text"},"ts":1436861230000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"That didn't take long: https://bugzilla.mozilla.org/show_bug.cgi?id=1182775","msgtype":"m.text"},"ts":1436861415000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin: well Ivan Nikulin (parse5 implementor) is still convinced it's feasible","msgtype":"m.text"},"ts":1436861518000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"he just commented a couple minutes ago to say as much","msgtype":"m.text"},"ts":1436861530000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/inikulin/parse5/issues/26#issuecomment-121160391","msgtype":"m.text"},"ts":1436861539000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I very much hope he's right","msgtype":"m.text"},"ts":1436861549000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: shttps://github.com/inikulin/parse5/issues/26#issuecomment-121160391","msgtype":"m.text"},"ts":1436861568000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oofs","msgtype":"m.text"},"ts":1436861570000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gsnedders: https://github.com/inikulin/parse5/issues/26#issuecomment-121160391","msgtype":"m.text"},"ts":1436861574000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: that means gmail's using invalid linear-gradient syntax?","msgtype":"m.text"},"ts":1436861647000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Maybe he's saying something else? The parser doesn't really have to buffer, but it definitely needs to plug into some DOM...","msgtype":"m.text"},"ts":1436861653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: we removed -moz- gradient syntax","msgtype":"m.text"},"ts":1436861664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah OK","msgtype":"m.text"},"ts":1436861678000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess breaking gmail is a good way to find out if people are paying attention","msgtype":"m.text"},"ts":1436861707000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: streaming parse","msgtype":"m.text"},"ts":1436861723000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*parser","msgtype":"m.text"},"ts":1436861726000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"You can implement <table><p> \"streaming\" as long as the other side can deal with \"you need to modify the tree\"","msgtype":"m.text"},"ts":1436861729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well how does the other side know that ahead of time?","msgtype":"m.text"},"ts":1436861756000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If the other side throws away the tree it's not going to be the correct","msgtype":"m.text"},"ts":1436861757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You don't","msgtype":"m.text"},"ts":1436861768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I wonder if you and him are talking about the same thing. The initial message of inikulin/parse5#26 is about making the input of the tokenizer (bytes or text) be a stream instead of a single string/buffer. I was asking whether the *output* of the tree builder could be like SAX/StAX","msgtype":"m.text"},"ts":1436861786000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yeah, agreed, he's talking about something else","msgtype":"m.text"},"ts":1436861806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1436861818000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1436861822000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks back","msgtype":"m.emote"},"ts":1436861827000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"What annevk said. That last comment also talks about modifying nodes that were already \"emitted\"","msgtype":"m.text"},"ts":1436861841000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"We've known since 2006 or so that a streaming HTML parser requires a different set of rules","msgtype":"m.text"},"ts":1436861843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah I misunderstand what kind of streaming that issue was about","msgtype":"m.text"},"ts":1436861854000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And Hixie has thought of specifying one for search engines, but it never became high enough priority","msgtype":"m.text"},"ts":1436861869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure (about streaming requiring different rules)","msgtype":"m.text"},"ts":1436861889000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: different rules would give different results, right? Isn’t that an interop problem?","msgtype":"m.text"},"ts":1436861915000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: yeah, of sorts","msgtype":"m.text"},"ts":1436861951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah I didn't know that's what you meant","msgtype":"m.text"},"ts":1436861965000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: but you'd opt into that for the perf","msgtype":"m.text"},"ts":1436861968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hum, ok","msgtype":"m.text"},"ts":1436862031000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I mean that was the idea","msgtype":"m.text"},"ts":1436862044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that's not true the rules need to be different. The different rule is that you either need to buffer the whole document, or you need to just fail on any markup cases that need non-streaming behavior","msgtype":"m.text"},"ts":1436862044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Henri's buffered SAX parser is fully conforming","msgtype":"m.text"},"ts":1436862081000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"At the time anyway e.g. Google didn't modify some tree so would have some minor differences from browsers, a tradeoff they thought was worth it","msgtype":"m.text"},"ts":1436862094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Google the search engine)","msgtype":"m.text"},"ts":1436862102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: if you buffer it's not really streaming imo","msgtype":"m.text"},"ts":1436862125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: buffer the whole document is akin to just building a tree","msgtype":"m.text"},"ts":1436862164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I’m ok with the conclusion: it’s only possible with tradeoffs that make it not worth it. (Either not-really-streaming or fatal errors.)","msgtype":"m.text"},"ts":1436862231000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: ok","msgtype":"m.text"},"ts":1436862272000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: well the difference is you're not also building some tree/DOM-like thing from it (which among other things requires a lot more memory than just putting the source into memory)","msgtype":"m.text"},"ts":1436862393000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I agree it's not real streaming","msgtype":"m.text"},"ts":1436862405000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And so far I’m only guessing what the original poster of https://github.com/servo/html5ever/issues/149 is trying to do","msgtype":"m.text"},"ts":1436862508000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"MikeSmith: well even if you buffer the whole document you'll still need to create some tree, no? To be able to modify it and place that <p> before <table>?","msgtype":"m.text"},"ts":1436862512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah but it can just be a much smaller and simpler stack","msgtype":"m.text"},"ts":1436862564000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think Henri's parser keeps a few different stacks for that and other things","msgtype":"m.text"},"ts":1436862606000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it never builds a tree of the entire document, nor needs to","msgtype":"m.text"},"ts":1436862629000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it mostly just passes on the events","msgtype":"m.text"},"ts":1436862653000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well, or in the end that's all the SAX API exposes, just eventsーstartElement, endElement, etc.","msgtype":"m.text"},"ts":1436862719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: Well it seems like it almost is?","msgtype":"m.text"},"ts":1436862920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"now you're making me look","msgtype":"m.text"},"ts":1436862943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean if I have <iframe src=\"someting that causes a network error or CORS error\"></iframe> I *think* you end up in https://html.spec.whatwg.org/#read-ua-inline","msgtype":"m.text"},"ts":1436862996000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But then it's entirely unclear what e.g. iframe.contentDocument should be","msgtype":"m.text"},"ts":1436863033000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"step 22 of navigate seems to leave a bunch of things up to the user agent","msgtype":"m.text"},"ts":1436863071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it includes network errors in \"some sort of processing that will not affect the browsing context\"","msgtype":"m.text"},"ts":1436863106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: so yeah, I guess I don't really know","msgtype":"m.text"},"ts":1436863157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how network errors will \"not affect the browsing context\" given that the normal implementation is to navigate to an error page","msgtype":"m.text"},"ts":1436863251000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1436863283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The context here is SW tests that try to check that a CORS-forbidden resource didn't load","msgtype":"m.text"},"ts":1436863324000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Do you agree that checking that the iframe either has a null contentDocument or has a contentDocument but the contents are not the contents of the resource that was expected to load is reasonable per-spec","msgtype":"m.text"},"ts":1436863370000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1436863375000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm not sure what to tell you. You know better than anyone that navigate is a mess...","msgtype":"m.text"},"ts":1436863378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well yes :)","msgtype":"m.text"},"ts":1436863400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, that seems reasonable, but I would prefer a \"TODO\" comment there that suggests further work is needed to narrow it down to one or the other","msgtype":"m.text"},"ts":1436863435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure, I'll file a spec bug later today and we can link that","msgtype":"m.text"},"ts":1436863484000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: What redirect mode is CSS fetched with? What is it about the CSS fetch that allows relative URLs to work after redirects?","msgtype":"m.text"},"ts":1436866634000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: nothing","msgtype":"m.text"},"ts":1436866658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: as in, it's not defined, or it doesn't need to be defined?","msgtype":"m.text"},"ts":1436866708000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it is defined and changes the default if you use fetch()","msgtype":"m.text"},"ts":1436866722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we discussed this about fetch() vs event.default()","msgtype":"m.text"},"ts":1436866753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It wasn't seen as a problem...","msgtype":"m.text"},"ts":1436866769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not saying it is","msgtype":"m.text"},"ts":1436866782000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Just trying to follow it through the fetch spec","msgtype":"m.text"},"ts":1436866790000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"<link rel=stylesheet href=/x> ends up with /x being the base URL, regardless of what fetch(\"/\") actually results in","msgtype":"m.text"},"ts":1436866826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's no different from <img src=/x>","msgtype":"m.text"},"ts":1436866836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ahh I see, so a normal fetch updates locationURL, which the CSS uses as its base?","msgtype":"m.text"},"ts":1436866898000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no, fetch() doesn't update the URL","msgtype":"m.text"},"ts":1436866925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"actually, I'm not even sure how to parse that sentence","msgtype":"m.text"},"ts":1436866935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"locationURL is not a thing","msgtype":"m.text"},"ts":1436866938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Let locationURL be the result of parsing location with request's current url.\"","msgtype":"m.text"},"ts":1436866985000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ahh, but that's appended to the request's url list","msgtype":"m.text"},"ts":1436867008000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess it's that that CSS uses to get its base url?","msgtype":"m.text"},"ts":1436867015000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Again, if the request from the page is for /x, /x is the base URL even though fetch(\"/x\") may follow many redirects","msgtype":"m.text"},"ts":1436867078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The `locationURL` stuff is completely local to the fetch() happening in the service worker","msgtype":"m.text"},"ts":1436867150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not talking about fetch(), I'm talking about how the part of the spec that requests CSS sets the base url correctly.","msgtype":"m.text"},"ts":1436867160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm talking about without a SW","msgtype":"m.text"},"ts":1436867166000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1436867184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: basically step 10 of \"main fetch\"","msgtype":"m.text"},"ts":1436867238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: https://fetch.spec.whatwg.org/#concept-response-url is the URL eventually used","msgtype":"m.text"},"ts":1436867272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: gotcha, cheers","msgtype":"m.text"},"ts":1436867306000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(That note has a type s/request/response/ which I'll fix.)","msgtype":"m.text"},"ts":1436867362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"typo","msgtype":"m.text"},"ts":1436867364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so are you still figuring out what the complete picture should be for redirects?","msgtype":"m.text"},"ts":1436868910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has nearly fixed https://github.com/whatwg/fetch/issues/70","msgtype":"m.emote"},"ts":1436868925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmh","msgtype":"m.text"},"ts":1436869274000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"https://github.com/ModuleLoader/es6-module-loader","msgtype":"m.text"},"ts":1436869275000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"is some kind of baseurl supported with the es6 module loader?","msgtype":"m.text"},"ts":1436869291000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the docs are only relevant for the 0.16 branch, that is outdated","msgtype":"m.text"},"ts":1436869304000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and the 0.17 does not support System.baseURL. Is this feature present in the spec?","msgtype":"m.text"},"ts":1436869320000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: trying to :) I think between opaque redirects and useFinalUrl (or whatever it gets called) we probably don't need event.default() - but just running it through my head","msgtype":"m.text"},"ts":1436869860000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fyi I just now deployed a somewhat disruptive change to the production W3C validator","msgtype":"m.text"},"ts":1436871839000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if anybody notices that the sky seems to be falling as result please ping me","msgtype":"m.text"},"ts":1436871878000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., rage in the twitter-sphere or wherever about it breaking somebody's thing","msgtype":"m.text"},"ts":1436871940000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the validator is serving at least 9-10 validation requests a second so I'd imagine it will get noticed pretty quickly","msgtype":"m.text"},"ts":1436872019000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: how are you feeling about the security the opaque redirect? Does it need further review? I could try and find someone for that","msgtype":"m.text"},"ts":1436872907000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm pretty confident with my outline","msgtype":"m.text"},"ts":1436872933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the only thing I'm less sure about is exposing \"manual\", but I guess I should just do it","msgtype":"m.text"},"ts":1436872967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As in, I wonder if it's a good enough term and such","msgtype":"m.text"},"ts":1436873006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: would a cross-origin manual-redirect fetch be a network failure?","msgtype":"m.text"},"ts":1436873077000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That's also a good question","msgtype":"m.text"},"ts":1436873134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I shouldn't be able to detect redirects from other origins, and the different type would reveal that","msgtype":"m.text"},"ts":1436873152000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You can already detect them with CSP","msgtype":"m.text"},"ts":1436873165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And now also with fetch(url, {redirect:\"error\"})","msgtype":"m.text"},"ts":1436873177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah, didn't realise CSP exposes that","msgtype":"m.text"},"ts":1436873202000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's kinda suprising","msgtype":"m.text"},"ts":1436873207000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"WebAppSec, despite the name, is not great at SOP","msgtype":"m.text"},"ts":1436873224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or redirects)","msgtype":"m.text"},"ts":1436873245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I guess the other question is whether request /a with a opaque redirect whose url is /test should work","msgtype":"m.text"},"ts":1436873291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Restricting them to only those navigation requests that can handle them in the first place seems kind of nice","msgtype":"m.text"},"ts":1436873360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And further reduces the complexity tax","msgtype":"m.text"},"ts":1436873369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I agree with you on that","msgtype":"m.text"},"ts":1436873436000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I guess I'll add all these restrictions for now, same-URL, same-origin","msgtype":"m.text"},"ts":1436873515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it will handle navigate","msgtype":"m.text"},"ts":1436873531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then we can see from there","msgtype":"m.text"},"ts":1436873536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Just to check we're talking about the same thing, where are you going to make it fail? fetch(url, {redirect: \"manual\"}) should be able to return an opaque redirect, but if the SW returns it & the request isn't a navigation request, it'll fail.","msgtype":"m.text"},"ts":1436873602000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is that what you're thinking?","msgtype":"m.text"},"ts":1436873610000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it would fail if url is not same-origin","msgtype":"m.text"},"ts":1436873638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and it would fail if the response's url field from the SW does not match url","msgtype":"m.text"},"ts":1436873659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"same-origin makes sense","msgtype":"m.text"},"ts":1436873706000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: what badness does the URL check prevent?","msgtype":"m.text"},"ts":1436873747000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It would prevent creating a new code path that doesn't exist today","msgtype":"m.text"},"ts":1436873857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we can always open it out later","msgtype":"m.text"},"ts":1436873900000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If I navigate to \"/x\" and the SW returns a redirect whose url is \"/y\" (redirecting to \"/z\"), the UA would have to redirect from \"/x\" to \"/z\"","msgtype":"m.text"},"ts":1436873917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1436873947000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And not hit \"/y\", which is likely problematic","msgtype":"m.text"},"ts":1436873950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Some potential weirdness with relative urls there too","msgtype":"m.text"},"ts":1436873974000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't know, maybe it's okay","msgtype":"m.text"},"ts":1436873983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We already allow returning a redirect to anywhere","msgtype":"m.text"},"ts":1436874002000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That is true, but user agent code around redirects is even more fragile than I thought, so I'm a bit worried","msgtype":"m.text"},"ts":1436874061000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps the navigate restriction is enough for now. I can't really think of anything bad with that restriction plus the opaqueness","msgtype":"m.text"},"ts":1436874249000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Other than potential impl issues, but impls can raise those separately","msgtype":"m.text"},"ts":1436874270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw looking further at Henri's SAX-API parser code, I realize I was talking out of my hat earlier","msgtype":"m.text"},"ts":1436878690000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as it not building a full tree","msgtype":"m.text"},"ts":1436878700000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/validator/htmlparser/tree/master/src/nu/validator/saxtree","msgtype":"m.text"},"ts":1436878710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's even called \"saxtree\", which should have been a clue to me","msgtype":"m.text"},"ts":1436878745000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"philipj, any news on https://code.google.com/p/chromium/issues/detail?id=310450 ?","msgtype":"m.text"},"ts":1436884626000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: no, I haven't really made any attempt at all since I filed it","msgtype":"m.text"},"ts":1436884719000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"is it a site compat problem?","msgtype":"m.text"},"ts":1436884730000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I presume you've also seen the discussion I and roc are having on the WHATWG mailing list?","msgtype":"m.text"},"ts":1436884752000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"somewhat related, at least","msgtype":"m.text"},"ts":1436884758000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"No, I was just cleaning out old emails","msgtype":"m.text"},"ts":1436884782000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"OK, let me know if you're having trouble with that default in particular, that would be a reason to bump its priority over the other gazillion :)","msgtype":"m.text"},"ts":1436884842000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj, if you have a test in wpt, I can have some newcomer pick it up :)","msgtype":"m.text"},"ts":1436884878000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: The problem with preload and wpt is that the spec just doesn't say much normative at all :/","msgtype":"m.text"},"ts":1436884906000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1436884919000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"We wrote some pretty elaborate buffering tests for preload behavior for Presto, but there's just no justification for it in the spec, so they were removed during upstreaming","msgtype":"m.text"},"ts":1436884948000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"maybe we should have a \"stuff we agree on even though the spec allows for differences\" test suite :)","msgtype":"m.text"},"ts":1436884979000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I think that would make sense","msgtype":"m.text"},"ts":1436885015000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"maybe some way to mark tests as optional in wpt?","msgtype":"m.text"},"ts":1436885058000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"jgraham, ^","msgtype":"m.text"},"ts":1436885070000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess? I mean I don't really like the idea of optional tests","msgtype":"m.text"},"ts":1436886098000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I generally think that more test coverage in CI is nice, even if there's disagreement about whether a FAIL is a failure","msgtype":"m.text"},"ts":1436886204000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"SimonSapin: FWIW, I think admitting fatal errors probably is useful for some uses (mostly when you're dealing with large corpora and trying to do analysis of it, and rejecting some inputs doesn't hurt too much)","msgtype":"m.text"},"ts":1436886439000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"philipj: are thy in t/core?","msgtype":"m.text"},"ts":1436886484000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"philipj: like, the dump of it?","msgtype":"m.text"},"ts":1436886491000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yeah, the tests exist in public","msgtype":"m.text"},"ts":1436886554000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"they were even part of a wpt review that maybe I could dig up if you're very curious","msgtype":"m.text"},"ts":1436886580000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"nah, not really","msgtype":"m.text"},"ts":1436886600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1436886604000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"in any case, they are or have been somewhere in https://github.com/operasoftware/presto-testo/tree/master/core/standards/web-apps/media","msgtype":"m.text"},"ts":1436886639000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Any reason https://terinjokes.github.io/console-spec/ isn't on spec.whatwg.org?","msgtype":"m.text"},"ts":1436892301000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I guess it isn't quite ready yet","msgtype":"m.text"},"ts":1436892567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://twitter.com/domenic/status/620998989144530944 still waiting for whatwggreen","msgtype":"m.text"},"ts":1436892897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"terinjokes: <3 console spec logo","msgtype":"m.text"},"ts":1436893054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Who's working on script type=\"module\"?","msgtype":"m.text"},"ts":1436893179000,"senderName":"giltayar","senderId":"giltayar@irc"},
{"content":{"body":"giltayar: dherman is","msgtype":"m.text"},"ts":1436893275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1436894182000,"senderName":"webzen","senderId":"webzen@irc"},
{"content":{"body":"what's up, webzen","msgtype":"m.text"},"ts":1436894182000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"i'm stuck http://laravel.io/bin/321ne","msgtype":"m.text"},"ts":1436894198000,"senderName":"webzen","senderId":"webzen@irc"},
{"content":{"body":"trying to bundle","msgtype":"m.text"},"ts":1436894202000,"senderName":"webzen","senderId":"webzen@irc"},
{"content":{"body":"please :-)","msgtype":"m.text"},"ts":1436894502000,"senderName":"webzen","senderId":"webzen@irc"},
{"content":{"body":"https://twitter.com/w3cmemes/status/621008028578349056 is pretty excellent trolling on several levels","msgtype":"m.text"},"ts":1436895041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kudos","msgtype":"m.text"},"ts":1436895049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1436896948000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hi, I have a question about CanvasRenderingContext2d.putImageData","msgtype":"m.text"},"ts":1436900507000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"spec says that \"Throws a NotSupportedError exception if any of the arguments are not finite.\"","msgtype":"m.text"},"ts":1436900513000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"https://developers.whatwg.org/the-canvas-element.html#pixel-manipulation","msgtype":"m.text"},"ts":1436900548000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"but idl spec says that \"If x is NaN, +Infinity or −Infinity, then throw a TypeError.\" (when converting to double)","msgtype":"m.text"},"ts":1436900575000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"http://www.w3.org/TR/WebIDL/#idl-double","msgtype":"m.text"},"ts":1436900584000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"this seems conflicting to me. So I'm wondering if that's that a bug in the spec, or if did miss something?","msgtype":"m.text"},"ts":1436900617000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"Hmm that sounds like a bug","msgtype":"m.text"},"ts":1436900663000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"arno_: already fixed in latest spec https://html.spec.whatwg.org/multipage/scripting.html#dom-context-2d-putimagedata","msgtype":"m.text"},"ts":1436900703000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sadly developers.whatwg.org is old :(","msgtype":"m.text"},"ts":1436900710000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I still see it","msgtype":"m.text"},"ts":1436900769000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"Throws a NotSupportedError exception if any of the arguments are not finite.","msgtype":"m.text"},"ts":1436900776000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/scripting.html#pixel-manipulation","msgtype":"m.text"},"ts":1436900783000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"arno_: oh, that's in the non-normative description","msgtype":"m.text"},"ts":1436900789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah i guess that's a bug","msgtype":"m.text"},"ts":1436900793000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mind filing it? should be able to just select the text and click something in the lower-riught","msgtype":"m.text"},"ts":1436900803000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh. It turns out it's already filled","msgtype":"m.text"},"ts":1436900859000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=28327","msgtype":"m.text"},"ts":1436900861000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"Domenic: thanks for the help","msgtype":"m.text"},"ts":1436900870000,"senderName":"arno_","senderId":"arno_@irc"},
{"content":{"body":"Gosh, wouldn't it be nice if HTML was something you could pull request...","msgtype":"m.text"},"ts":1436900940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in chrome's implementation... does response.body.cancel() effectively cancel the backing fetch?","msgtype":"m.text"},"ts":1436904198000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yep","msgtype":"m.text"},"ts":1436904208000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: do we need that cancelable promise thing for fetch then?","msgtype":"m.text"},"ts":1436904223000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yes, if we want to cancel before headers arrive","msgtype":"m.text"},"ts":1436904234000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1436904248000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1436904255000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ms2ger: In wpt's FileAPI tests, there are assertions that e.g. \"te(xt/plain\" is not a valid type - https://github.com/w3c/web-platform-tests/blob/master/FileAPI/blob/Blob-slice.html#L165 -  do you know where that requirement comes from? Assertions fail in Gecko and Blink, doesn't match spec. (I can PR to fix, just wondering about the history)","msgtype":"m.text"},"ts":1436907290000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"in chromium how does one reply to a message event in serviceworker?","msgtype":"m.text"},"ts":1436908272000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"event.source seems to be null there","msgtype":"m.text"},"ts":1436908277000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jsbell, it used to say that at least","msgtype":"m.text"},"ts":1436908545000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jsbell, I'd be glad to see fixes to current spec","msgtype":"m.text"},"ts":1436908569000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hrm, wonder if he meant \"to align with spec\" or \"to align spec with tests\"","msgtype":"m.text"},"ts":1436909064000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I'm pretty sure he means \"so that tests and spec and impementations all align\"","msgtype":"m.text"},"ts":1436909780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jsbell: step 5 https://w3c.github.io/FileAPI/#constructorBlob","msgtype":"m.text"},"ts":1436909829000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"I think it used to do an actual MIME type check... not sure why that got removed again","msgtype":"m.text"},"ts":1436909871000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1436909882000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Implementers are so lazy when it comes to data types","msgtype":"m.text"},"ts":1436909892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Languages, MIME types, encoding labels, ...","msgtype":"m.text"},"ts":1436909930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep => those steps don't ensure it's a \"parsable MIME type\", just that anything non-ASCII => \"\", otherwise just lower-cased","msgtype":"m.text"},"ts":1436909940000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"that spec is a bit of a mess","msgtype":"m.text"},"ts":1436909989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the 2012 version had a bit more verbiage but I think it was normatively the same","msgtype":"m.text"},"ts":1436909992000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"philipj: smaug____: https://github.com/whatwg/dom/issues/54","msgtype":"m.text"},"ts":1436910311000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, maybe","msgtype":"m.text"},"ts":1436910931000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"probably","msgtype":"m.text"},"ts":1436910943000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1436911609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I suspect it'll be easier to add a subclass to Array that has .item(), than to try to deprecate .item() on an API-by-API basis","msgtype":"m.text"},"ts":1436913230000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: fair enough, yeah","msgtype":"m.text"},"ts":1436913240000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i agree that it sucks though.","msgtype":"m.text"},"ts":1436913249000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic: i guess we could even try to add Array.prototype.item... that seems unlikely to work though","msgtype":"m.text"},"ts":1436913277000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: yeah a subclass seems preferable to that. Although I imagine the writers of Web IDL binding code will not be as excited about another custom type :P","msgtype":"m.text"},"ts":1436913368000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"meh, I think that's the least of our problems","msgtype":"m.text"},"ts":1436913390000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I dunno, I got pretty strong pushback trying to make DOMException a custom type (like ES Errors) instead of a WebIDL-defined one.","msgtype":"m.text"},"ts":1436913426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the payoff is higher here","msgtype":"m.text"},"ts":1436913448000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Other than the sadness of the confusion of having some Arrays with .item, and some without .item, Gecko's first problem would be that we don't support subclasses of natives yet","msgtype":"m.text"},"ts":1436913450000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I hear that's almost there...","msgtype":"m.text"},"ts":1436913479000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah. I don't know what \"almost\" means though","msgtype":"m.text"},"ts":1436913496000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but yeah, i've heard that too","msgtype":"m.text"},"ts":1436913504000,"senderName":"sicking","senderId":"sicking@irc"}
]