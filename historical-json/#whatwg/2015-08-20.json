[
{"content":{"body":"nox: eh, location we need some big discussion about with a bunch of us to decide what we actually want to do with it","msgtype":"m.text"},"ts":1440029508000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"nox: I think we've long ago concluded that the error messages are mostly for helping understand the test rather than meaningful at all","msgtype":"m.text"},"ts":1440029542000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"nox: tl;dr: for now you're best treating the errors as documented, i.e., only the number of lines matters","msgtype":"m.text"},"ts":1440029597000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: seems like I probably just that favicon file in my working directory untracked and wound up adding and it committing it by mistake","msgtype":"m.text"},"ts":1440033550000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, deleted now","msgtype":"m.text"},"ts":1440033587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: also deleted whatwg.png","msgtype":"m.text"},"ts":1440034373000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ah ok, takk","msgtype":"m.text"},"ts":1440048660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: servo doesn't seem to render http://smfr.org/misc/css/stacking/css-escher.html correctly","msgtype":"m.text"},"ts":1440051518000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"do you plan to implement that insanity? (i think it's required for web compat, but who knows)","msgtype":"m.text"},"ts":1440051619000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"jamesr___: SimonSapin might be a better target for that question","msgtype":"m.text"},"ts":1440052014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I seem to recall some mention here a while back of somebody working on Navigation Transistions again","msgtype":"m.text"},"ts":1440055185000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but can't remember who","msgtype":"m.text"},"ts":1440055192000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Chris Lord it seems","msgtype":"m.text"},"ts":1440055286000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://cwiiis.github.io/gaia-navigator/","msgtype":"m.text"},"ts":1440055516000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that wasn't very easy to fine","msgtype":"m.text"},"ts":1440055522000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hmm, is there a simple command line tool that checks whether a file is valid JSON?","msgtype":"m.text"},"ts":1440055793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We now publish https://resources.whatwg.org/biblio.json and since it's draconian it's rather easy to mess up","msgtype":"m.text"},"ts":1440055817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, whoever is next with a new standard, please start with an \"A\" or \"G\", \"I\", \"K\", \"O\", \"P\", \"R\", \"T\", \"V\", \"W\", or \"Z\"","msgtype":"m.text"},"ts":1440056214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/zaach/jsonlint maybe","msgtype":"m.text"},"ts":1440056852000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh Zach Carter","msgtype":"m.text"},"ts":1440056909000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If script calls \"input.focus()\", is the generated focusin event a 'trusted' event?","msgtype":"m.text"},"ts":1440057762000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"(background: for writing an automated test, I'm wondering if any way to dispatch 'trusted' event from scripts)","msgtype":"m.text"},"ts":1440057823000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"http://www.w3.org/TR/2015/WD-uievents-20150428/#trusted-events says","msgtype":"m.text"},"ts":1440057833000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"\"Events that are generated by the user agent, either as a result of user interaction, or as a direct result of changes to the DOM, are trusted\"","msgtype":"m.text"},"ts":1440057851000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Chrome hasn't implemented the property so far, anyway","msgtype":"m.text"},"ts":1440058004000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"According to https://developer.mozilla.org/en/docs/Web/API/Event/isTrusted even Firefox and IE are differently implemented","msgtype":"m.text"},"ts":1440058030000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: that mdn page is a bit odd","msgtype":"m.text"},"ts":1440058147000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"events created by scripts in web pages are untrusted","msgtype":"m.text"},"ts":1440058177000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not sure what that comment about IE tries to say","msgtype":"m.text"},"ts":1440058205000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: is click() untrusted as well?","msgtype":"m.text"},"ts":1440058215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or does IE have some bizarre behavior for element.click()","msgtype":"m.text"},"ts":1440058221000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah I guess it better be","msgtype":"m.text"},"ts":1440058222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jamesr___: Interesting. I filed https://github.com/servo/servo/issues/7293","msgtype":"m.text"},"ts":1440058229000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"click() does create untrusted event","msgtype":"m.text"},"ts":1440058231000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, if click() creates untrusted event, it sounds natural to think focus() creates untrusted event.","msgtype":"m.text"},"ts":1440058284000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"well click() just dispatches click event","msgtype":"m.text"},"ts":1440058351000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"focus() focuses something and that ends up dispatching focus event","msgtype":"m.text"},"ts":1440058365000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(what the spec says about click() is IIRC very different to what all the implementations do)","msgtype":"m.text"},"ts":1440058402000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"Fire a click event at the element. If the run synthetic click activation steps algorithm was invoked because the click() method was invoked, then the isTrusted attribute must be initialised to false.\"","msgtype":"m.text"},"ts":1440058503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems about right","msgtype":"m.text"},"ts":1440058507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, implementations trigger the activation steps during event dispatch","msgtype":"m.text"},"ts":1440058619000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which is why manually dispatching untrusted click event should behave as if click() was called","msgtype":"m.text"},"ts":1440058641000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Can a focus event as a result of focus() invocation be though of \"a direct result of changes to the DOM\"?","msgtype":"m.text"},"ts":1440059287000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"I guess this part of the sentence is still ambiguos about \"who\" makes the changes to the DOM, can it be a script?","msgtype":"m.text"},"ts":1440059337000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Context?","msgtype":"m.text"},"ts":1440059463000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hmmm... Context is https://github.com/validator/validator/issues/61","msgtype":"m.text"},"ts":1440059463000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"What","msgtype":"m.text"},"ts":1440059532000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger botie: my context is https://github.com/w3c/webcomponents/issues/293","msgtype":"m.text"},"ts":1440059541000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"I have no idea what \"closed\" even means there","msgtype":"m.text"},"ts":1440059581000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I am trying to make a automated test case, but the spec depends on an event to be \"trusted\", so","msgtype":"m.text"},"ts":1440059589000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"I was wondering any way I can make a trusted event from script.","msgtype":"m.text"},"ts":1440059610000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"\"closed\" means a closed mode shadow root.","msgtype":"m.text"},"ts":1440059618000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"oops, wrong reference","msgtype":"m.text"},"ts":1440059642000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"you can't get trusted from script","msgtype":"m.text"},"ts":1440059647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my context is https://github.com/w3c/web-platform-tests/pull/2099","msgtype":"m.text"},"ts":1440059652000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: you probably want to talk to jgraham but it seems that'd require some kind of web driver test","msgtype":"m.text"},"ts":1440059699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay, so we have to use manual test to generate trusted events?","msgtype":"m.text"},"ts":1440059708000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"or web driver...","msgtype":"m.text"},"ts":1440059751000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"And web driver doesn't really work yet, I don't think :/","msgtype":"m.text"},"ts":1440059775000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____, you know if there's a test for click()'s event being untrusted in wpt?","msgtype":"m.text"},"ts":1440059797000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"no idea","msgtype":"m.text"},"ts":1440059853000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"goes and writes one","msgtype":"m.emote"},"ts":1440059881000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1440059932000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"html/editing/focus/focus-management/focus-events.html seems to assume that focus() generates focus event whose isTrusted is true.","msgtype":"m.text"},"ts":1440059957000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: mind filing a bug on that?","msgtype":"m.text"},"ts":1440059974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1440059984000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: it seems the HTML Standard does say that focus events are always trusted","msgtype":"m.text"},"ts":1440060038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: at least, quickling going through the various algorithms focus() invokes seems to say that","msgtype":"m.text"},"ts":1440060060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: so there might be bug in the HTML Standard too :-/","msgtype":"m.text"},"ts":1440060068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"focus event is trusted if the focus actually moved","msgtype":"m.text"},"ts":1440060106000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"click() and focus() behave quite differently","msgtype":"m.text"},"ts":1440060121000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"When a user agent is required to fire a focus event named e at an element t and with a given related target r, the user agent must create a trusted FocusEvent object\"","msgtype":"m.text"},"ts":1440060122000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1440060164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: o_O","msgtype":"m.text"},"ts":1440060168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: click() dispatches click event which triggers the activation","msgtype":"m.text"},"ts":1440060196000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"okay, kochi, apologies, ignore what I said above, and ask smaug____ instead","msgtype":"m.text"},"ts":1440060197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"focus() tries to focus some element, and focusing that element then dispatches focus event","msgtype":"m.text"},"ts":1440060231000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so the focus event is a result of focus() causing focus change","msgtype":"m.text"},"ts":1440060246000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"So focus event is considered \"a direct result of changes to the DOM\", and it is trusted.","msgtype":"m.text"},"ts":1440060323000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"something like that yes. focus event is fired after some state change","msgtype":"m.text"},"ts":1440060413000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wanderview: I fixed 112, anything else you want me to look at soonish?","msgtype":"m.text"},"ts":1440060437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"r? https://github.com/w3c/web-platform-tests/pull/2100","msgtype":"m.text"},"ts":1440060473000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: r+","msgtype":"m.text"},"ts":1440060669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would have reviewed but didn't know how","msgtype":"m.emote"},"ts":1440060722000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"an IRC comment worked last time","msgtype":"m.text"},"ts":1440060760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For something this small, it doesn't really matter","msgtype":"m.text"},"ts":1440060781000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1440060786000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I can merge now","msgtype":"m.text"},"ts":1440060821000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"mm \"Merge attempt failed\"","msgtype":"m.text"},"ts":1440060849000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"ah, you did yourself","msgtype":"m.text"},"ts":1440060866000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"I did","msgtype":"m.text"},"ts":1440060878000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____ annevk Ms2ger: thanks all, I replied in https://github.com/w3c/web-platform-tests/pull/2099","msgtype":"m.text"},"ts":1440061435000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: I recommend using https://html.spec.whatwg.org/multipage/ as definitive reference","msgtype":"m.text"},"ts":1440062598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: I believe that's what both Google and Mozilla at least attempt to implement","msgtype":"m.text"},"ts":1440062614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed. I wouldn't refer to W3C's HTML5*","msgtype":"m.text"},"ts":1440063095000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: thanks, updated.","msgtype":"m.text"},"ts":1440063382000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"will keep in mind","msgtype":"m.emote"},"ts":1440063481000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"wonders who got the \"great\" idea to try to merge webapps and html wg","msgtype":"m.emote"},"ts":1440063530000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: can you explain what you meant in the issue by \"Otherwise cross-origin to same-origin would not be covered\"?","msgtype":"m.text"},"ts":1440071566000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: as far as railroad diagrams in the URL spec, the plan is that they'd be non-normative, right?","msgtype":"m.text"},"ts":1440071611000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/whatwg/url/issues/67 I mean","msgtype":"m.text"},"ts":1440071617000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm pretty certain that is the plan but I would still like to be reassured","msgtype":"m.text"},"ts":1440071687000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: if its cross-origin, shouldn't all future redirect origins be considered \"cross-origin\" since the request origin is marked as being an opaque value?","msgtype":"m.text"},"ts":1440071849000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I commented in the bug","msgtype":"m.text"},"ts":1440072804000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: say request's origin X and request's current URL's origin is Y","msgtype":"m.text"},"ts":1440073454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: then you get a redirect that also has origin Y for locationURL","msgtype":"m.text"},"ts":1440073471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that scenario would not be covered","msgtype":"m.text"},"ts":1440073479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: yes","msgtype":"m.text"},"ts":1440073493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: normative prose, plus some kind of grammar production thingie to skim through","msgtype":"m.text"},"ts":1440073522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, good to hear","msgtype":"m.text"},"ts":1440073561000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: hmm... I have to step away... but let me think about that... I don't see how CORS flag is set in that case either","msgtype":"m.text"},"ts":1440073601000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: because main fetch would invoke basic fetch with it set because current URL's origin is not same origin with request's origin","msgtype":"m.text"},"ts":1440073768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but what about origin X redirect to Y redirect to X... the second X should be considered cross-origin, right?","msgtype":"m.text"},"ts":1440073822000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"where is CORS flag set in that chain in time to mark the opaque origin?","msgtype":"m.text"},"ts":1440073849000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think CORS flag is set after the first redirect (but too late to set the opaque origin)","msgtype":"m.text"},"ts":1440073958000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but I guess maybe thats ok since the opaque origin is set on next redirect before evaluating main fetch again","msgtype":"m.text"},"ts":1440074095000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Does the generator for that diagram syntax already exist?","msgtype":"m.text"},"ts":1440074294000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, part of Bikeshed","msgtype":"m.text"},"ts":1440077006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Nice.","msgtype":"m.text"},"ts":1440077016000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"wanderview: right","msgtype":"m.text"},"ts":1440077016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA++ for \"poomorphism\"","msgtype":"m.text"},"ts":1440084984000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1440084991000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: ping :)","msgtype":"m.text"},"ts":1440089178000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: hey","msgtype":"m.text"},"ts":1440089316000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#concept-request - seems to be missing frame-src.. is that intentional?","msgtype":"m.text"},"ts":1440089324000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: yeah, the idea is that CSP can look at request's client","msgtype":"m.text"},"ts":1440089355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: it says as much underneath the table","msgtype":"m.text"},"ts":1440089388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, figures. that makes sense - thanks.","msgtype":"m.text"},"ts":1440089457000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"annevk: back to our favorite topic of preload :) ... Looking at this new table, I think I can map preload's \"as\" to {initiator: '', type: as-value, destination: 'subresource'}. that would make preload fetches subject to all the right CSP policies based on specified as type.","msgtype":"m.text"},"ts":1440089715000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"annevk: does that make sense? anything I'm overlooking?","msgtype":"m.text"},"ts":1440089733000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"yes, security","msgtype":"m.text"},"ts":1440089748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"security is, like, still what we have the address bar for, navigating based on hacking the URL space not so much","msgtype":"m.text"},"ts":1440089748000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1440089765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: it needs to be a new thing, but what would be good to see first is preload's processing model in terms of Fetch","msgtype":"m.text"},"ts":1440089801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think we have that yet","msgtype":"m.text"},"ts":1440089814000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst said as much anyway in the issue were we added initiator/destination/type","msgtype":"m.text"},"ts":1440089837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: preload is <link>, the processing model for which is in the HTML spec itself (https://html.spec.whatwg.org/multipage/semantics.html#the-link-element). I've intentionally stayed away from duplicating that..","msgtype":"m.text"},"ts":1440089966000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: I don't understand, HTML doesn't define what preload does","msgtype":"m.text"},"ts":1440090070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: see e.g., what HTML defines for \"stylesheet\"","msgtype":"m.text"},"ts":1440090136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: and how that further defers to \"creating a stylesheet\" etc. which is defined elsewhere","msgtype":"m.text"},"ts":1440090152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right but that's once response is received. by default all of the link's use http://www.w3.org/TR/html5/document-metadata.html#concept-link-obtain to obtain the resource, which is what current preload spec is relying on as well. are you suggesting I pull that out and explicitly define it within preload spec?","msgtype":"m.text"},"ts":1440090758000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"Where is it stated that all use that?","msgtype":"m.text"},"ts":1440090807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, where is it stated that an <img> fetch pulls something out of the preload cache?","msgtype":"m.text"},"ts":1440090833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And where in fetch that cache lookup happens and how?","msgtype":"m.text"},"ts":1440090850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: anyway, as far as I know you do need to have a section similar to the \"stylesheet\" section HTML has","msgtype":"m.text"},"ts":1440091034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: and you need a section that monkey patches Fetch and a section that defines the preload cache","msgtype":"m.text"},"ts":1440091053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: and then you have a feature that's maybe hopefully defined from first principles","msgtype":"m.text"},"ts":1440091088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: perhaps I'm reading it wrong but, the main definition of <link> specifies steps 'to obtain the resource', and none of the other sections (e.g. stylesheet) elaborate further.. e.g. stylesheet specifies 'when to obtain' and what to do 'once obtained'. Hence my comment about all rel's relying on same steps to fetch.","msgtype":"m.text"},"ts":1440091163000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"annevk: re, section: most of that content is already there in the preload spec, perhaps I could shuffle it a bit to make it more clear. the one thing that's unclear to me is whether I now should define my own 'obtain resource' algorithm to work with the new Fetch.. such that I can set initiator/type/destination.","msgtype":"m.text"},"ts":1440091269000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: right, once you define https://html.spec.whatwg.org/multipage/semantics.html#linkTypes you get the obtain the resource for free, but you still need to define what the UA needs to do with the obtained resource, as the \"stylesheet\" rel does, for instance","msgtype":"m.text"},"ts":1440091342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, fair enough. that's where I need to define the 'preload cache' or some such.","msgtype":"m.text"},"ts":1440091406000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: and yeah, since you want something different you might need your own obtain the resource algorithm... (though HTML will be modified to use Fetch in due course, you probably still want something slightly different here)","msgtype":"m.text"},"ts":1440091417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: yup","msgtype":"m.text"},"ts":1440091422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: so preload is in https://w3c.github.io/preload/","msgtype":"m.text"},"ts":1440091479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: where are prefetch/prerender?","msgtype":"m.text"},"ts":1440091485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://w3c.github.io/resource-hints < these are speculative and have different processing model, which is why we split them into separate spec","msgtype":"m.text"},"ts":1440091513000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"igrigorik: ait","msgtype":"m.text"},"ts":1440091548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whoa","msgtype":"m.text"},"ts":1440091573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: without the trailing slash you end up on http://","msgtype":"m.text"},"ts":1440091592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"igrigorik: that seems like a serious GitHub bug","msgtype":"m.text"},"ts":1440091606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh wow, that's a.. fun one =/","msgtype":"m.text"},"ts":1440091633000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"I'll let them know","msgtype":"m.text"},"ts":1440091723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re, preload + obtain the resource: ok, it sounds like I should define my own in preload. Drilling in on that specifically, in there when I initialize the request I'd set the new fetch request properties to {initiator: '', type: as-value, destination: 'subresource'} -- ya?","msgtype":"m.text"},"ts":1440091772000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"annevk: where 'as-value' is one of https://fetch.spec.whatwg.org/#concept-request-type","msgtype":"m.text"},"ts":1440091800000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"yes, except you cannot overwrite type for security reasons","msgtype":"m.text"},"ts":1440091813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"most likely","msgtype":"m.text"},"ts":1440091818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so we'd have to introduce a new axis that's the same as type except not used by CSP","msgtype":"m.text"},"ts":1440091834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gotta go","msgtype":"m.text"},"ts":1440091847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm, but in this case I do want these fetches to be subject to relevant CSP policies. For preload in particular I think it should be fine to set those: fetch initiated by preload is subject to set type+CSP policies, and there is no way to consume the response directly -- that goes into preload cache (to be defined :)). To consume it you need another","msgtype":"m.text"},"ts":1440092084000,"senderName":"igrigorik","senderId":"igrigorik@irc"},
{"content":{"body":"fetch to retrieve it from the cache, which will enforce its CSP rules as well.","msgtype":"m.text"},"ts":1440092084000,"senderName":"igrigorik","senderId":"igrigorik@irc"}
]