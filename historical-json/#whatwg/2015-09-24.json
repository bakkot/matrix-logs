[
{"content":{"body":"Domenic: oh wow are you doing the fixing the line numbers thing?","msgtype":"m.text"},"ts":1443056403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie yeah but it's hackier than you'd think we just re-run with the original source and if it spits out errors we give you those too.","msgtype":"m.text"},"ts":1443056685000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: repo-chooser PR squashed and rebased and repushed to the PR branch","msgtype":"m.text"},"ts":1443060709000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: yeah especially given how fast wattsi is, just doing a second pass with the raw source seemed most practical (rather than say, trying to teach wattsi some magic as far as how to determine the line offset to the raw source so that we could do it in one pass)","msgtype":"m.text"},"ts":1443061074000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: btw about the hgroup example in https://github.com/whatwg/html/issues/115, I think the effect of that is, the OP's second \"List Title 1 Alternative\" heading there (the second of what the OP calls \"equivalent headings\") is that in any outline, that second heading is not going to appear","msgtype":"m.text"},"ts":1443061211000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: I'm not sure the OP realizes it will have that effect, or wants it. I would be wrong but in terms of the outline algorithm there is no such thing as \"equivalent\" headings in hgroup; instead the first heading is document order is the primary heading and all others headings in the hgroup after the first are considered subheadings","msgtype":"m.text"},"ts":1443061371000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not sure my assessment is correct but I am sure that Hixie can say :)","msgtype":"m.text"},"ts":1443061415000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: you might want to respond on https://github.com/whatwg/html/issues/115 when you have tiem","msgtype":"m.text"},"ts":1443061451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think if the OP wants the semantic of \"equivalent headings\", then the way to get that is to not use hgroup at all but just put the headings one after another without any wrapper around them being needed","msgtype":"m.text"},"ts":1443061546000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> However, the only example utilizing the hgroup element in the spec shows how to create a subtitle, and the spec has this confusing text: \"Other elements of heading content in the hgroup element indicate subheadings or subtitles\". The quoted text indicates that the second h1 element might be considered a subtitle of the first h1 element.","msgtype":"m.text"},"ts":1443061628000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(from that issue)","msgtype":"m.text"},"ts":1443061637000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OP needs to s/might be considered/is considered/ in that last sentence","msgtype":"m.text"},"ts":1443061778000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That text in the spec doesn't seem confusing to me at all. It means exactly what it says. I think maybe the OP just wants it to mean something other than what it does mean.","msgtype":"m.text"},"ts":1443061798000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rbyers: IRC can work, though our timezones are a bit off I think","msgtype":"m.text"},"ts":1443069317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: zewt: something something xml document vs html document something","msgtype":"m.text"},"ts":1443071513000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zewt: you probably want CSSSelector(…, translator='html')","msgtype":"m.text"},"ts":1443072207000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"the default is xml","msgtype":"m.text"},"ts":1443072210000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"well that's pretty bogus","msgtype":"m.text"},"ts":1443073795000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wanderview_pto: https://wiki-offline.JakeArchibald.com","msgtype":"m.text"},"ts":1443074542000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ugh, without the caps","msgtype":"m.text"},"ts":1443074556000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I had a think about the CORS thing recently too. The closest I got is opaqueResponse.unlock(md5hash) - where you'd get the hash from another server, and if it matches the content, you can assume it's publically visible … but yeah, the hash could be guessable, and if the server output contains response time or time, it won't match etc etc","msgtype":"m.text"},"ts":1443075898000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, that's not secure","msgtype":"m.text"},"ts":1443076382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: note that this is why integrity=\"\" requires CORS","msgtype":"m.text"},"ts":1443076392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, of course","msgtype":"m.text"},"ts":1443076473000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: hey, so it seems we can start publishing WebVTT","msgtype":"m.text"},"ts":1443076679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: is webvtt.html going to remain DirectoryIndex?","msgtype":"m.text"},"ts":1443076699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: great. i'm in the process of bikeshedding it. yeah","msgtype":"m.text"},"ts":1443076709000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1443076726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm maybe we should blog post the move to whatwg/html now that it's been such a success","msgtype":"m.text"},"ts":1443076773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(And, we should blog post webvtt. And media session?!)","msgtype":"m.text"},"ts":1443076786000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: for HTML would we want to wait til the repo-chooser patch is merged","msgtype":"m.text"},"ts":1443077296000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ah, I knew there was something I wanted to do tonight before going to sleep.","msgtype":"m.text"},"ts":1443077316000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1443077327000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we should also make sure annevk and philipj are OK with behavior of depth=1. I know they weren't super thrilled about that but I think it's still better than making somebody wait 10 minutes to pull the whole revision history","msgtype":"m.text"},"ts":1443077421000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: oh, I think also we should add one more refinement, which is: you should be able to just specify the path to your existing repo (if any) as an argument to the build script","msgtype":"m.text"},"ts":1443077487000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"./build.sh /opt/workspace/html/source","msgtype":"m.text"},"ts":1443077514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: instead of just doing HTML_SOURCE=blah ./build.sh? seems OK I guess.","msgtype":"m.text"},"ts":1443077515000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1443077518000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: can we make the build script remember the path?","msgtype":"m.text"},"ts":1443077525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: OK will add that the branch after your review of what I got there now","msgtype":"m.text"},"ts":1443077566000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: yeah, by setting HTML_SOURCE in your environment; e.g., in your .bashrc","msgtype":"m.text"},"ts":1443077601000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the build script doesn't keep state itself","msgtype":"m.text"},"ts":1443077616000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we could have it work from a .config file as you proposed before","msgtype":"m.text"},"ts":1443077636000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that would be another PR","msgtype":"m.text"},"ts":1443077648000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I","msgtype":"m.text"},"ts":1443077650000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I would be happy to write up a patch for some .config thing if Domenic is also warm to that idea","msgtype":"m.text"},"ts":1443077688000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hmm yeah maybe that is more user friendly than environment variables...","msgtype":"m.text"},"ts":1443077740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: do you know what the bikeshed-correct way is to xref a global attribute? title, class...","msgtype":"m.text"},"ts":1443077751000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: there's quite a few ways unfortunately, if Shepherd indexed the correct term from HTML it could be as simple as <a spec=html>term</a>, if not, you need to create a local xref database in a <pre> element","msgtype":"m.text"},"ts":1443077887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: DOM has one of those","msgtype":"m.text"},"ts":1443077891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: okay, so currently WebVTT doesn't render due to respec being in a folder, I guess I can figure out if we can fix that somehow","msgtype":"m.text"},"ts":1443077919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ignore respec, i'm done bikeshedding soon","msgtype":"m.text"},"ts":1443077954000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"okay, then I'll leave the setup as is","msgtype":"m.text"},"ts":1443077970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it syncs all the root files","msgtype":"m.text"},"ts":1443077977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"excellent, thanks","msgtype":"m.text"},"ts":1443077992000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic: yeah I guess the more-typical thing is to have a .config.default (or whatever) checked into the repo, with instructions to copy it to .config and modify it","msgtype":"m.text"},"ts":1443078349000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah that seems reasonable","msgtype":"m.text"},"ts":1443078406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: there's quite a few folks at Mozilla that think service workers is not ready for CR, it's apparently not just me","msgtype":"m.text"},"ts":1443078718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I don't really care since I think TR/ publication is rather meaningless, but where would we best discuss this?","msgtype":"m.text"},"ts":1443078748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I agree on the meaningless bit. Could discuss on github or hold until TPAC?","msgtype":"m.text"},"ts":1443078816000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it seems reasonable to get all the people that care about CR in a room and let them talk to each other and not impact the people doing work.","msgtype":"m.text"},"ts":1443078959000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"whether that room is a GitHub thread or a TPAC room, dunno.","msgtype":"m.text"},"ts":1443078974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: thanks, suggested that to them","msgtype":"m.text"},"ts":1443079176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: When you have a few minutes, could we poke at the HTTPS state thing again?","msgtype":"m.text"},"ts":1443080623000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: (https://github.com/whatwg/html/pull/178)","msgtype":"m.text"},"ts":1443080666000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: okay, so the issue is figuring out where Window is created","msgtype":"m.text"},"ts":1443080894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Step 1 of \"Initialising a new Document object\"","msgtype":"m.text"},"ts":1443080986000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: so I think what I would find acceptable for now is to have a new step 2 there that sets window's HTTPS state to resource's HTTPS state","msgtype":"m.text"},"ts":1443081165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: that's not ideal, but hopefully suffices for now","msgtype":"m.text"},"ts":1443081188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I have some other quibbles too though","msgtype":"m.text"},"ts":1443081196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: should I make the nits on GitHub?","msgtype":"m.text"},"ts":1443081204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably simpler to follow, but I'll take feedback however you like. :)","msgtype":"m.text"},"ts":1443081234000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"The patch at https://github.com/whatwg/html/pull/178 adds exactly the step 2 I think you want. Line 82235.","msgtype":"m.text"},"ts":1443081303000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Added comments","msgtype":"m.text"},"ts":1443081902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We really need an OmniGlobal mixin","msgtype":"m.text"},"ts":1443081909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Defining distinct slots for Worker and Document seems unnecessary","msgtype":"m.text"},"ts":1443081946000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, that can be future cleanup","msgtype":"m.text"},"ts":1443081954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/webvtt/pull/213","msgtype":"m.text"},"ts":1443082189000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: as part of that PR you should probably also remove all the old stuff","msgtype":"m.text"},"ts":1443082539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm yes","msgtype":"m.text"},"ts":1443082564000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: where do you want depth=1? if it's just in some script to get started, it doesn't matter to me, I know how to get the full history","msgtype":"m.text"},"ts":1443082851000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: yeah just in the script to get started, and only if somebody doesn't have an existing clone they want to point the build to","msgtype":"m.text"},"ts":1443083078000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: wfm","msgtype":"m.text"},"ts":1443083545000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: done","msgtype":"m.text"},"ts":1443083614000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: Thanks. I poked at the PR to add the `about:srcdoc` handling. If you know of other places I should poke at, I'm happy to. Otherwise, I'll squash the patch if you're happy with the changes.","msgtype":"m.text"},"ts":1443084838000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: search for an overridden reload</dfn>","msgtype":"m.text"},"ts":1443084923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: \"an overridden reload</dfn>\"","msgtype":"m.text"},"ts":1443084929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I think that's the only two plus history traversal, but history traversal is still somewhat magic","msgtype":"m.text"},"ts":1443084952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What causes an overridden reload? Is it safe to keep the HTTPS state of the document that's being navigated, or could this be called from a distinct browsing context?","msgtype":"m.text"},"ts":1443085046000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Ah, `document.open` and `document.write`. Ugh.","msgtype":"m.text"},"ts":1443085084000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Can we accidentally remove those from the platform? :)","msgtype":"m.text"},"ts":1443085095000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"philipj: ok","msgtype":"m.text"},"ts":1443085150000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: sounds like an excellent plan to get rid of some of that Chrome market share","msgtype":"m.text"},"ts":1443085273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and also some Google ads, I'm told","msgtype":"m.text"},"ts":1443085287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yup. That's my job. Deprecate stuff that people use wildly in the hopes that they all go use Firefox instead.","msgtype":"m.text"},"ts":1443085320000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Your problem now, suckers!","msgtype":"m.text"},"ts":1443085331000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"don't get rid of document.write :(","msgtype":"m.text"},"ts":1443085350000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ok. Poked at overridden reload in the patch as well.","msgtype":"m.text"},"ts":1443085367000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"caitp: seems unrealistic","msgtype":"m.text"},"ts":1443085375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the world needs document.write to make all of my stupid sites like http://caitp.github.io/commandments/ possible without writing a ton of markup","msgtype":"m.text"},"ts":1443085413000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i know it wasn't serious :p","msgtype":"m.text"},"ts":1443085429000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"mkwst: could you add \"new\" before response in the about:srcdoc bit, okay if you don't want to","msgtype":"m.text"},"ts":1443085493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Drive-by cleanup is fine with me. Done.","msgtype":"m.text"},"ts":1443085564000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: HTTPS State -> HTTPS state","msgtype":"m.text"},"ts":1443085594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, I wasn't very consistent, was I?","msgtype":"m.text"},"ts":1443085672000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Done.","msgtype":"m.text"},"ts":1443085674000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: looks fine for rebase/squash","msgtype":"m.text"},"ts":1443085740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"squishes","msgtype":"m.emote"},"ts":1443085786000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: So, with that merged, what other \"cards\" do I need to put into place to make you happy with https://w3c.github.io/webappsec/specs/powerfulfeatures/ ? :)","msgtype":"m.text"},"ts":1443087102000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: so for that are we going to change the way a SharedWorker is selected?","msgtype":"m.text"},"ts":1443087198000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: is there any reason secure context flag needs to be set and cannot just be a \"Secure Context\" algorithm on environment settings objects that returns the results of these steps?","msgtype":"m.text"},"ts":1443087292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think we decided to set a flag on the Shared Worker in order to determine whether to allow connection from a particular context.","msgtype":"m.text"},"ts":1443087350000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: If we have that flag, it made sense to me to just rewrite the algorithm in terms of flags everywhere.","msgtype":"m.text"},"ts":1443087373000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: There's no reason to walk the ancestor tree every time; it's not changing.","msgtype":"m.text"},"ts":1443087390000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: well then it can be a lazy getter just like the other bits that already exist on environment settings objects","msgtype":"m.text"},"ts":1443087425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: an environment settings object is currently just a collection of algorithms, it doesn't carry state","msgtype":"m.text"},"ts":1443087456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: anyway, most seems fine other apart from these editorial quibbles","msgtype":"m.text"},"ts":1443087565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: would be great to have the worker changes upstreamed too","msgtype":"m.text"},"ts":1443087572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: is the note about service workers correct?","msgtype":"m.text"},"ts":1443087608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yup. Will upstream once we're agreeing on the changes.","msgtype":"m.text"},"ts":1443087619000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I always thought http://example.com/ could embed https://videoservice.com/ and videoservice.com would have its service worker (if installed prior)","msgtype":"m.text"},"ts":1443087641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: if not that seems better though","msgtype":"m.text"},"ts":1443087658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#secure-context","msgtype":"m.text"},"ts":1443087694000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: \"... and the controlled service worker clients should also be secure contexts\"","msgtype":"m.text"},"ts":1443087711000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: no idea if that's what's implemented.","msgtype":"m.text"},"ts":1443087719000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: ok","msgtype":"m.text"},"ts":1443087727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: \"secure document\" seems like an unused term","msgtype":"m.text"},"ts":1443087735000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah. It's there as shorthand for other specs. *shrug* Dropping it wouldn't hurt, I suppose, but keeping it might make someone's life ever so slightly simpler.","msgtype":"m.text"},"ts":1443087823000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: seems better if everyone used setting objects","msgtype":"m.text"},"ts":1443087886000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but okay","msgtype":"m.text"},"ts":1443087889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shrug* Then I can drop it and \"secure worker\". Easy.","msgtype":"m.text"},"ts":1443087903000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"well, I'm not a fan of settings objects either, but for now...","msgtype":"m.text"},"ts":1443087906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What would you like us to use instead?","msgtype":"m.text"},"ts":1443087915000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"hopefully they can be merged with globals","msgtype":"m.text"},"ts":1443087917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I opened an issue against HTML to reduce the number of concepts floating around","msgtype":"m.text"},"ts":1443087935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm. How do you explain folks with JavaScript disables?","msgtype":"m.text"},"ts":1443087937000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: that there's still a global I suppose, just that script doesn't execute","msgtype":"m.text"},"ts":1443087978000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Interesting.","msgtype":"m.text"},"ts":1443087995000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: many algorithms in the spec grab things from global objects already","msgtype":"m.text"},"ts":1443088003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shrug* Probably. You're more familiar with it than I am.","msgtype":"m.text"},"ts":1443088024000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: Ok. So, when you say that the concept can be a lazy getter on the settings object, what do you mean? We need to store a bit of some sort for Shared Workers at creation time.","msgtype":"m.text"},"ts":1443088304000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: I'm currently setting a flag on the settings object in \"set up a worker environement settings object\". I suppose I could set a flag on the global instead.","msgtype":"m.text"},"ts":1443088336000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: ah, above you said it wasn't changing","msgtype":"m.text"},"ts":1443088339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It doesn't change after it's set. But it needs to be set. :)","msgtype":"m.text"},"ts":1443088380000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"That is, for documents, we can just walk the tree whenever, easy. The flag is an optimization for those cases, but not necessary.","msgtype":"m.text"},"ts":1443088417000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"For dedicated workers, same thing.","msgtype":"m.text"},"ts":1443088422000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"For Shared Workers, we can't walk the tree whenever, we need to walk it at creation time and store the result somewhere.","msgtype":"m.text"},"ts":1443088441000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It seems even for shared workers you could first lookup by constructor url/name, and then see if secure context returns the same thing in both places","msgtype":"m.text"},"ts":1443088463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g., is there a SharedWorkerGlobalScope whose constructor url is url, name is name, and secure context is secure context...","msgtype":"m.text"},"ts":1443088508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm. Ok. That could work.","msgtype":"m.text"},"ts":1443088560000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It seems more roundabout than setting a bit on the context.","msgtype":"m.text"},"ts":1443088578000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"But I think you're right, it would be equivalent behavior.","msgtype":"m.text"},"ts":1443088602000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: WDYT about https://github.com/w3c/webappsec/commit/90210b3ae0e70408cb6a8640d3a647f610630502?","msgtype":"m.text"},"ts":1443090727000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"simpler to read at https://w3c.github.io/webappsec/specs/powerfulfeatures/#settings-object","msgtype":"m.text"},"ts":1443090749000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: looks good","msgtype":"m.text"},"ts":1443092182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: 'This covers scenarios such as &lt;iframe sandbox src=\"http://localhost/\"&gt;.' looks wrong","msgtype":"m.text"},"ts":1443092188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm. I'm surprised bikeshed escaped those.","msgtype":"m.text"},"ts":1443092224000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"thanks for catching that.","msgtype":"m.text"},"ts":1443092311000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: Timezone offset isn't that bad (as it is for europe<->california) - I'm UTC-4","msgtype":"m.text"},"ts":1443101814000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: morning","msgtype":"m.text"},"ts":1443101858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Morning.  Have a few minutes to chat?","msgtype":"m.text"},"ts":1443101877000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: not in theory, but in practice it seems like it","msgtype":"m.text"},"ts":1443101892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Heh, ok.  Let's try stepping back for a second, ignore EventListenerOptions....","msgtype":"m.text"},"ts":1443101952000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. Today afaik all browsers observe touch/wheel listeners in order to get an important scroll performance optimization when handlers aren't present (or aren't present at a particular point).","msgtype":"m.text"},"ts":1443102008000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. You can think of it as the UA making some events uncancelable if it sees there are no listener that can possibly cancel it.","msgtype":"m.text"},"ts":1443102036000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. It's not clear to me if that technically violates the spec.  On the one hand the UAs would argue its an impl detail, but on the other it has major impact on performance and so is something UAs really need to be interoperable around and developers need to understand...","msgtype":"m.text"},"ts":1443102093000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. If we take for granted that UAs are not going to give up this optimization (they're not), then should the spec say something about it?","msgtype":"m.text"},"ts":1443102156000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: yeah, generally we've counted that as not violating","msgtype":"m.text"},"ts":1443102165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: UAs do the same with certain sensor APIs","msgtype":"m.text"},"ts":1443102173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: although I do find it sketchy","msgtype":"m.text"},"ts":1443102184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: oh, back in a bit","msgtype":"m.text"},"ts":1443102187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok","msgtype":"m.text"},"ts":1443102199000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"hey there all","msgtype":"m.text"},"ts":1443102379000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"was wondering, is the mediagroup attribute on the video element currently implemented in a browser?","msgtype":"m.text"},"ts":1443102406000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"it might just be that I do not understand the usage of the attribute but, it seems it is not yet implemented","msgtype":"m.text"},"ts":1443102430000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"so, what the spec seems to suggest is that if two media elements share a mediagroup attribute with the same name, they will be linked by the user agent and share the same media controller","msgtype":"m.text"},"ts":1443102469000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"I assume from a UI persepctive this means the controls","msgtype":"m.text"},"ts":1443102481000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"but perhaps I misunderstand","msgtype":"m.text"},"ts":1443102490000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"also, if the two media resources are the same, they will use the same network request irrespective of how many times it is embedded in the same document","msgtype":"m.text"},"ts":1443102522000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"schalkneethling: AFAIK that feature is going nowhere","msgtype":"m.text"},"ts":1443103068000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"rbyers: so, given that Hixie seems okay I guess I can be too","msgtype":"m.text"},"ts":1443103432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: I was mostly trying to hold the fort","msgtype":"m.text"},"ts":1443103455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Cool.  Yeah, understood - but honestly I think we can use this to make the situation you're concerned with BETTER.  I'm with you here!  But it does complicate the spec, but IMHO that mainly comes from trying to better reflect the actual implementations.","msgtype":"m.text"},"ts":1443103517000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"annevk: Eg. should we add some text saying that UAs can use listener presence only in specific ways?","msgtype":"m.text"},"ts":1443103555000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. like to avoid work necessary to generate the events (sensors) or to make events uncanceable?","msgtype":"m.text"},"ts":1443103585000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. we could even specify that UAs cannot use the presence of any mayCancel=false listeners to cause any observable change in behavior (including non-trivial performance differences).","msgtype":"m.text"},"ts":1443103645000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: I think we should only allow observability outside the perf realm if there's a standard for it (e.g., touch events)","msgtype":"m.text"},"ts":1443103648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: and I think we should try to caution any new features to be build that way (and if someone still feels compelled, they should contact public-script-coord or some other review list)","msgtype":"m.text"},"ts":1443103687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: we should probably also add the example Hixie gave as to why observability is bad","msgtype":"m.text"},"ts":1443103706000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That makes sense.","msgtype":"m.text"},"ts":1443103718000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"roc: should it be removed from the spec?","msgtype":"m.text"},"ts":1443103756000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Any suggestion for where this sort of text belongs (and what's normative)?  Or should I try to come up with something then we can discuss concretely on the PR.","msgtype":"m.text"},"ts":1443103767000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"annevk: maybe. I think Apple may have tried to implement it at some point.","msgtype":"m.text"},"ts":1443103793000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I have seen absolutely zero interest in us implementing it, from inside or outside","msgtype":"m.text"},"ts":1443103813000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"rbyers: I think we should add a section after Interface EventTarget called \"Observing event listeners\" that spells this out","msgtype":"m.text"},"ts":1443103853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: since it's mostly advice and examples it would be non-normative","msgtype":"m.text"},"ts":1443103863000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: similar to \"Action versus occurrence\" I suppose","msgtype":"m.text"},"ts":1443103886000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sounds good, I'll take a crack at that.","msgtype":"m.text"},"ts":1443103890000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: my other concerns are the defaulting of the dictionary member and its name","msgtype":"m.text"},"ts":1443103918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, was just going to ask about https://github.com/RByers/EventListenerOptions/issues/17#issuecomment-142341211","msgtype":"m.text"},"ts":1443103928000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: but I haven't developed answers yet","msgtype":"m.text"},"ts":1443103934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can just try flipping it to 'disableCancel' or some such and see what you think - I think the spec will read much better that way.","msgtype":"m.text"},"ts":1443103975000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"I vaguely remember me giving a single word suggestion somewhere","msgtype":"m.text"},"ts":1443104012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".. no practical downside to inverting that I can see.","msgtype":"m.text"},"ts":1443104021000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"Oh?  I don't recall that.","msgtype":"m.text"},"ts":1443104027000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: https://github.com/RByers/EventListenerOptions/issues/22#issuecomment-126031470","msgtype":"m.text"},"ts":1443104114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: although Domenic didn't like my defaulting strategy","msgtype":"m.text"},"ts":1443104127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ahh 'passive' works for me.  I think we can simplify the default strategy.","msgtype":"m.text"},"ts":1443104167000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: yeah if we just default to false, passive works well","msgtype":"m.text"},"ts":1443104189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: another thought","msgtype":"m.text"},"ts":1443104614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: we call it \"fast\"","msgtype":"m.text"},"ts":1443104618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: defaults to false","msgtype":"m.text"},"ts":1443104630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hah, I kind of like that.  Pretty vague though and in many cases (most types of events) it's really a lie.","msgtype":"m.text"},"ts":1443104661000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: bad default is due to bad legacy, but everyone wants fast so they'll deal","msgtype":"m.text"},"ts":1443104670000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll add it to the list (https://github.com/RByers/EventListenerOptions/issues/17#issuecomment-142341211)","msgtype":"m.text"},"ts":1443104693000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"FWIW it's also \"fast\" to have a touch/wheel listener which always calls preventDefault (and so must NOT be passive).","msgtype":"m.text"},"ts":1443104723000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1443104754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Eg. it's not like it's bad for games/maps to let you do something else with touch/wheel other than scrolling.  So I feel like fast is a confusing over-simplification.","msgtype":"m.text"},"ts":1443104755000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"thanks roc","msgtype":"m.text"},"ts":1443104959000,"senderName":"schalkneethling","senderId":"schalkneethling@irc"},
{"content":{"body":"annevk: One other little editorial question: An EventListener is defined to be made up of some variables (https://dom.spec.whatwg.org/#concept-event-listener).  Do you prefer keeping these to be simple types (i.e. \"capture\" and \"passive\" boolean variables), or is it better to talk of there being an \"options\" variable of type EventListenerOptions?","msgtype":"m.text"},"ts":1443106236000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. I think the latter will simplify the text slightly (can just say \"same options\" rather than \"same capture and passive\")","msgtype":"m.text"},"ts":1443106256000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":".. But not sure IDL dictionary types are OK in this context.","msgtype":"m.text"},"ts":1443106271000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: since you'd have to define what \"same options\" means I don't think it would actually end up being shorter","msgtype":"m.text"},"ts":1443106381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, ok- I guess that's not a given","msgtype":"m.text"},"ts":1443106431000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"annevk: Also, any preference for the argument name - I had \"optionsOrCapture\" which is pretty verbose, perhaps just \"options\" is good enough?","msgtype":"m.text"},"ts":1443106452000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: yeah, options or init is fine","msgtype":"m.text"},"ts":1443106588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1443106610000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"botie, inform zcorpan lemme know when you have a few minutes to catch up about wbvtt stuff","msgtype":"m.text"},"ts":1443115388000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1443115388000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"rbyers: if preventDefault() doesn't throw, the canceled flag would be sufficient in principle, no?","msgtype":"m.text"},"ts":1443115480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: that is, no need for the passive flag","msgtype":"m.text"},"ts":1443115490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sorry, I don't follow.  How would the canceled flag be sufficient?","msgtype":"m.text"},"ts":1443115533000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"Something needs to track whether we're in the context of a passive listener or not...","msgtype":"m.text"},"ts":1443115546000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"And I don't think we can re-use the canceled flag for that because we don't want to change Event.defaultPrevented","msgtype":"m.text"},"ts":1443115562000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: oh, I figured the model would be that only if all listeners are passive you'd get a passive event","msgtype":"m.text"},"ts":1443115587000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: I guess you might still want to enforce things per-listener to assist developers","msgtype":"m.text"},"ts":1443115612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: makes sense","msgtype":"m.text"},"ts":1443115619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Exactly, otherwise it can be very brittle for libraries to try to adopt this incrementally.","msgtype":"m.text"},"ts":1443115657000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"This is basically the discussion here: https://github.com/RByers/EventListenerOptions/issues/2","msgtype":"m.text"},"ts":1443115693000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: I think we might want to expose that the event changed fundamentally too, but perhaps the flip from cancelable to non-cancelable is sufficient","msgtype":"m.text"},"ts":1443115707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: I thought mediagroup support was largely motivated by accessibility needs (to be able to play synchronized secondary descriptive audio or sign-language streams)","msgtype":"m.text"},"ts":1443115762000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: You mean when all listeners are passive?  Right - the key thing the dev cares about is whether the event is cancelable.","msgtype":"m.text"},"ts":1443115773000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"annevk: Presumably we don't need to indicate that the event is \"fundamentally\" different somehow just because one (of several) listeners is passive.  That doesn't change the event.","msgtype":"m.text"},"ts":1443115803000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: yeah, when some spec decides to dispatch a different kind of event from the normal one, effectively","msgtype":"m.text"},"ts":1443115815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: agreed","msgtype":"m.text"},"ts":1443115827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"rbyers: that's the distinction I was trying to make sense of","msgtype":"m.text"},"ts":1443115853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right.  One question we debates was whether we should say that ALL events behave that way (sending uncancelable when all listeners are passive) or leave it up to the specific event type to define.  We agreed with smaug on the latter I believe.","msgtype":"m.text"},"ts":1443115858000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: different listeners vs different event","msgtype":"m.text"},"ts":1443115859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, that's confusing but an important distinction.  If you can think of any way for me to clarify in the spec text let me know.  Otherwise I'll just try to summarize in my explainer doc.","msgtype":"m.text"},"ts":1443115897000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: the latter makes sense to me too, due to the observable thing still being suboptimal","msgtype":"m.text"},"ts":1443115907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yep, I'm happy with that.  I'll try to ellaborate a bit on this in the new observability section I'm adding.","msgtype":"m.text"},"ts":1443115971000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"This might affect the service workers discussions too with regards to \"fetch\" listeners being observable or not","msgtype":"m.text"},"ts":1443116079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh interesting, I was unaware of that discussion.","msgtype":"m.text"},"ts":1443116173000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"zcorpan, at 2015-09-24 17:23 UTC, MikeSmith said: lemme know when you have a few minutes to catch up about wbvtt stuff","msgtype":"m.text"},"ts":1443116977000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"I get the double dash for custom media queries, custom selectors, and custom variables, but I was wondering if someone could explain to me why the var() is also needed?","msgtype":"m.text"},"ts":1443126198000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: I bet TabAtkins could","msgtype":"m.text"},"ts":1443126240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Probably the most aggressive tweet in my entire career. https://twitter.com/jon_neal/status/647152310813073408 on the subject of obsfucating all the codes to get past ad block filters.","msgtype":"m.text"},"ts":1443128235000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I don't blame them for trying","msgtype":"m.text"},"ts":1443128565000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in the end it all just helps to make the ad blockers even smarter and better","msgtype":"m.text"},"ts":1443128589000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so it's all win for us","msgtype":"m.text"},"ts":1443128602000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"whatever battle they think they're fighting, they've already lost","msgtype":"m.text"},"ts":1443128639000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JonathanNeal: Because it make the context clear.","msgtype":"m.text"},"ts":1443129676000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What did you find too ambiguis about -- sans the var in scenarios where there is not a fallback?","msgtype":"m.text"},"ts":1443129808000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"s/ambiguis/ambiguous","msgtype":"m.text"},"ts":1443129819000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I found that the bare keyword didn't feel as visible and obvious as the var() function did.","msgtype":"m.text"},"ts":1443130499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, you need the var() function anyway (to provide defaults, at least, and more in the future), and having two syntaxes for the same thing (\"color: --foo;\" if you didn't need any extra functionality, \"color: var(--foo, blue);\" if you did) increases complexity.","msgtype":"m.text"},"ts":1443130551000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, the increases complexity part was the only thing that came to mind for me, due to the manner in which it takes a default (what I was calling a fallback).","msgtype":"m.text"},"ts":1443133565000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I guess I’m glad custom media and custom properties don’t take fallbacks like that. They rely and fallback based on inheritence only, I suspect?","msgtype":"m.text"},"ts":1443133648000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"s/custom properties/custom selectors","msgtype":"m.text"},"ts":1443133660000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"annevk: http://stackoverflow.com/questions/32771832/securing-cors-is-the-a-security-scheme-with-cookies","msgtype":"m.text"},"ts":1443133687000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JonathanNeal: custom media/etc don't have any other options to deal with, and are immediately clear from context.","msgtype":"m.text"},"ts":1443134216000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"This paper is very interesting: https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xap1/t39.2365-6/10935986_985284008163608_743666691_n/Moving_Fast_with_Software_Verification.pdf","msgtype":"m.text"},"ts":1443136448000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"one of the interesting parts is the beginning where they contrast native mobile app development with Web development. In particular, that on the Web you control which version of your code users are running, and with native apps you don't. Which makes a big difference.","msgtype":"m.text"},"ts":1443136456000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"cool use of SVG: http://unifiedpatents.com/1st-half-2015-patent-dispute-report/","msgtype":"m.text"},"ts":1443138042000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"SVGs would be cooler if they were right","msgtype":"m.text"},"ts":1443138689000,"senderName":"gavinc","senderId":"gavinc@irc"},
{"content":{"body":"Delaware had 946 patents cases not 249","msgtype":"m.text"},"ts":1443138712000,"senderName":"gavinc","senderId":"gavinc@irc"}
]