[
{"content":{"body":"annevk: great to hear that. have a safe trip!","msgtype":"m.text"},"ts":1515119877000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"starts working today","msgtype":"m.emote"},"ts":1515119889000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"is there any plan of integrating native private class members?","msgtype":"m.text"},"ts":1515127970000,"senderName":"tkore","senderId":"tkore@irc"},
{"content":{"body":"tkore: you want #tc39 and yes, I think so","msgtype":"m.text"},"ts":1515133944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I keep getting \"curl: (7) Failed to connect to resources.whatwg.org port 443: Connection timed out\"","msgtype":"m.text"},"ts":1515140268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: and similar such error messages","msgtype":"m.text"},"ts":1515140274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I wonder if Travis has some kind of limit on curl calls?","msgtype":"m.text"},"ts":1515140288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: or maybe our server has some kind of limit we're not aware of?","msgtype":"m.text"},"ts":1515140301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: did you end up adding CDNs?","msgtype":"m.text"},"ts":1515140314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no CDN yet, but it also wouldn't help when deploying, stuff still has to go to one place","msgtype":"m.text"},"ts":1515140693000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: you're seeing this in many Travis jobs?","msgtype":"m.text"},"ts":1515140707000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I'm more worried about CDNs adding more uncertainty, so I'd prefer not adding one if we don't need it","msgtype":"m.text"},"ts":1515140746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I have this one whatwg/infra job I can't seem to get a good result from","msgtype":"m.text"},"ts":1515140773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: and it's on master and blocking other PRs","msgtype":"m.text"},"ts":1515140801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"restarts it again","msgtype":"m.emote"},"ts":1515140807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: seems to be either that or an internal server error, but due to the bad debugging messages I'm not sure if the internal server error was for the original curl or another one that build.sh performs","msgtype":"m.text"},"ts":1515140970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is a sharedworker intercepted by a service worker on the scope from which the sharedworker is fetched?","msgtype":"m.text"},"ts":1515143642000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah, that should also be the case for dedicated workers though, iirc, but browsers have issues","msgtype":"m.text"},"ts":1515143697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, I'm writing Request.destination tests, my \"worker\" test works fine, but same test for \"sharedworker\" doesn't (and it seems like SW is not intercepting)","msgtype":"m.text"},"ts":1515143744000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"(but I could be wrong and it's something else entirely)","msgtype":"m.text"},"ts":1515143760000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: it might work fine due to a bug in the test and the impl ðŸ˜ƒ","msgtype":"m.text"},"ts":1515143999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1515144019000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"console.log() from the SW spits out the request for the worker (so the SW sees it)","msgtype":"m.text"},"ts":1515144046000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: see https://github.com/whatwg/html/issues/3112","msgtype":"m.text"},"ts":1515144048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: currently all workers are not subresources and therefore behave the same as documents when it comes to service worker selection","msgtype":"m.text"},"ts":1515144065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so the fact that the document sees the SW is a bug?","msgtype":"m.text"},"ts":1515144086000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: however, implementations might not do this correctly for dedicated workers and we're undecided on what is going to change","msgtype":"m.text"},"ts":1515144099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/SW/dedicated worker/","msgtype":"m.text"},"ts":1515144101000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: that's the status quo, yes","msgtype":"m.text"},"ts":1515144111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so if I'm writing tests, I should use that, right?","msgtype":"m.text"},"ts":1515144122000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"*I should not use that","msgtype":"m.text"},"ts":1515144131000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: right, tests should be against the spec","msgtype":"m.text"},"ts":1515144137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: you can make the test not rely on this aspect though by making the scope encompass both","msgtype":"m.text"},"ts":1515144156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyone around who knows a bit about createImageBitmap?","msgtype":"m.text"},"ts":1515144189000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: ok, thanks! :)","msgtype":"m.text"},"ts":1515144206000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Ms2ger: a bit, yes","msgtype":"m.text"},"ts":1515144252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because that's all you need to review https://github.com/w3c/web-platform-tests/pull/8880 ;)","msgtype":"m.text"},"ts":1515144333000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"very good","msgtype":"m.text"},"ts":1515144385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"junov could maybe help own that","msgtype":"m.text"},"ts":1515144726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: another question, are favicons intercepted?","msgtype":"m.text"},"ts":1515144886000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I assume they are...","msgtype":"m.text"},"ts":1515144916000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: per spec, yes, but it only defines favicon.ico fetching as part of fetching a document","msgtype":"m.text"},"ts":1515144963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: if a UA fetches /favicon.ico early it's not documented","msgtype":"m.text"},"ts":1515144980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, so dynamically loading of favicons based on <link> element is not defined?","msgtype":"m.text"},"ts":1515144994000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: I'm only talking about /favicon.ico; all other icons are defined afaik","msgtype":"m.text"},"ts":1515145024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1515145030000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: and all other icons are intercepted, to be clear","msgtype":"m.text"},"ts":1515145038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1515145057000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk, thanks (and will try to pay more attention to var/let)","msgtype":"m.text"},"ts":1515146077000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: I'm upgrading my Mac and can't easily look now, did restarting it work?","msgtype":"m.text"},"ts":1515147397000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: no, just different errors","msgtype":"m.text"},"ts":1515147469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I guess I should look at the build script and see if I can add some echo statements","msgtype":"m.text"},"ts":1515147487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: https://github.com/whatwg/whatwg.org/pull/159","msgtype":"m.text"},"ts":1515149017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see it was a 500, which is quite surprising, never seen that before. I wonder if it's really nginx that did it or if there's some intermediate thing involved here on Travis's end","msgtype":"m.text"},"ts":1515149046000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I think the 500 came from api.csswg.org","msgtype":"m.text"},"ts":1515149069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I now get a 400 which indicates something is wrong Bikeshed-wise","msgtype":"m.text"},"ts":1515149087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh... I saw curl in the command and curl in the failure, got confused","msgtype":"m.text"},"ts":1515149115000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, I just restarted, now it's 400","msgtype":"m.text"},"ts":1515149135000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I suspect that's because we now have this WHATWG Group template","msgtype":"m.text"},"ts":1515149199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And you can't select an older Bikeshed to build against","msgtype":"m.text"},"ts":1515149221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, so I think it all makes sense and probably requires Domenic to resolve as he has all the pieces in his head","msgtype":"m.text"},"ts":1515149251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We still could do with better error messages if Bikeshed fails","msgtype":"m.text"},"ts":1515149270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't the WHATWG group a new thing in Bikeshed, so the problem is api.csswg.org doesn't have the updated code yet?","msgtype":"m.text"},"ts":1515149278000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I have some ideas","msgtype":"m.text"},"ts":1515149281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I think it now has the updated code and the problem is that whatwg/infra is not using it","msgtype":"m.text"},"ts":1515149307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we could just run Bikeshed on Travis, and have a place that says \"master\" that we could use to pin the version when needed","msgtype":"m.text"},"ts":1515149316000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: since we haven't merged the whatwg/infra PR that uses the new Bikeshed template (as all those PRs also depend on something else)","msgtype":"m.text"},"ts":1515149339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But, that's also stuff to maintain.","msgtype":"m.text"},"ts":1515149340000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: oh I see","msgtype":"m.text"},"ts":1515149351000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I think the current setup is fine","msgtype":"m.text"},"ts":1515149357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, so this wasn't a problem of api.csswg.org doing the wrong thing","msgtype":"m.text"},"ts":1515149378000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"The main thing we need to improve is how the log reads (provide more context) and curl error messages","msgtype":"m.text"},"ts":1515149381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, the 500 was weird","msgtype":"m.text"},"ts":1515149391000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And the timeouts from resources.whatwg.org were weird too","msgtype":"m.text"},"ts":1515149404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, marquee's graphs have been looking very much the same for a week, and not under much load at all","msgtype":"m.text"},"ts":1515149407000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah I doubt it's us really","msgtype":"m.text"},"ts":1515149422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but there could exist bugs of course","msgtype":"m.text"},"ts":1515149424000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I think Travis has some kind of curl limit","msgtype":"m.text"},"ts":1515149430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm trying to parse spec's sequential focusing","msgtype":"m.text"},"ts":1515153504000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm having trouble with https://html.spec.whatwg.org/multipage/interaction.html#sequential-navigation-search-algorithm","msgtype":"m.text"},"ts":1515153526000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean to understand that","msgtype":"m.text"},"ts":1515153535000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"selection mechanism DOM vs sequential","msgtype":"m.text"},"ts":1515153567000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and what actually happens there","msgtype":"m.text"},"ts":1515153580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"perhaps it is https://html.spec.whatwg.org/multipage/interaction.html#suitable-sequentially-focusable-area which I don't understand","msgtype":"m.text"},"ts":1515153714000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"Let candidate be the first suitable sequentially focusable area in the home control group following starting point\" what is that first","msgtype":"m.text"},"ts":1515153782000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hmm, where's Ms2ger","msgtype":"m.text"},"ts":1515156538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can anyone point me to what the root node that MutationObserver is listening on? I'm experiencing document.body but was under the impression that it'd be document.documentElement or something.","msgtype":"m.text"},"ts":1515158634000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"My bad.. I had the wrong target :)","msgtype":"m.text"},"ts":1515158750000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"annevk: nm the sequential focus question. I think I managed collect the needed information scattered around the spec. Focus handling is hard (to spec and implement).","msgtype":"m.text"},"ts":1515159479000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: sorry for totally ignoring that... when folks mention focus I tend to blur","msgtype":"m.text"},"ts":1515159815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(as indeed, it's way hard)","msgtype":"m.text"},"ts":1515159829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Are there incoming references to Selectors besides https://dom.spec.whatwg.org/ in the DOM/JS world?","msgtype":"m.text"},"ts":1515164165000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: HTML","msgtype":"m.text"},"ts":1515164203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: maybe Fullscreen API (it defines new selectors at least)","msgtype":"m.text"},"ts":1515164218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems like Fullscreen does not, but maybe should","msgtype":"m.text"},"ts":1515164250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: https://quirks.spec.whatwg.org/","msgtype":"m.text"},"ts":1515164318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: that's probably it as far as WHATWG goes","msgtype":"m.text"},"ts":1515164340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1515164354000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"annevk: Anything on the W3C side I should be aware of?","msgtype":"m.text"},"ts":1515164366000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"never knows where things live in the scripting world","msgtype":"m.emote"},"ts":1515164374000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: I'm not really sure, nothing really comes to mind though","msgtype":"m.text"},"ts":1515164403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Web components maybe? Do you know where the current \"you should look at this\" spec lives for that? :)","msgtype":"m.text"},"ts":1515164488000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: Web Components is DOM + HTML + some leftover bits yet to be upstreamed, and some new CSS specs","msgtype":"m.text"},"ts":1515164587000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: of those, the HTML and CSS bits reference Selectors (HTML defines a new pseudo-class and the CSS stuff defines more)","msgtype":"m.text"},"ts":1515164610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Afaik the CSS bits are in css-scoping; does anything  else on the CSS side live elsewhere than the CSSWG?","msgtype":"m.text"},"ts":1515164646000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: maybe the Selectors spec should start hosting a registry of pseudo-classes","msgtype":"m.text"},"ts":1515164657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: HTML defines \":defined\"","msgtype":"m.text"},"ts":1515164680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: pretty sure that's it","msgtype":"m.text"},"ts":1515164694000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: https://html.spec.whatwg.org/multipage/semantics-other.html#pseudo-classes","msgtype":"m.text"},"ts":1515164720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: https://github.com/w3c/webcomponents/issues/665 is related","msgtype":"m.text"},"ts":1515164730000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think we've mostly been trying to host the definitions inline in Selectors, with references out to other specs as needed to fully define the semantics.","msgtype":"m.text"},"ts":1515164733000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"Web components has been an exception to that, though","msgtype":"m.text"},"ts":1515164740000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: Fullscreen too","msgtype":"m.text"},"ts":1515164758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: Fullscreen even extends the CSS stacking context business...","msgtype":"m.text"},"ts":1515164769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: (note that I'd be happy for CSS to embrace and extinguish)","msgtype":"m.text"},"ts":1515164791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I vaguely remember discussions about where that stuff should live and there was some non-technical reason for it at the point the spec was written...","msgtype":"m.text"},"ts":1515164809000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"fantasai: maybe nobody has turned Appendix E of CSS 2 into something proper yet?","msgtype":"m.text"},"ts":1515164846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"indeed :)","msgtype":"m.text"},"ts":1515164854000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"Tab and I have that on the to-do list for css-position, but we haven't taken over that spec yet so it's kindof in limbo afaict","msgtype":"m.text"},"ts":1515164881000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"I'm trying to prep a new WD of Selectors, fwiw.","msgtype":"m.text"},"ts":1515164910000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"annevk: can I get a re-approval on https://github.com/whatwg/whatwg.org/pull/158 ?","msgtype":"m.text"},"ts":1515164923000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's preventing all builds","msgtype":"m.text"},"ts":1515164926000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sorry, I'm pretty sure I had approved that","msgtype":"m.text"},"ts":1515165009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, somehow it disappeared.","msgtype":"m.text"},"ts":1515165018000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but need to sort through the churn on the sections that are/were referenced by or written for other specs.. which may or may not still exist","msgtype":"m.text"},"ts":1515165027000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"~_","msgtype":"m.text"},"ts":1515165030000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"Domenic: maybe because I removed the comment? Weird","msgtype":"m.text"},"ts":1515165031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: good times","msgtype":"m.text"},"ts":1515165046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: if you want to create a pseudo-class registry somewhere (maybe in the spec) I can supply PRs now and then","msgtype":"m.text"},"ts":1515165071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fantasai: the current situation with sometimes CSS defining things and sometimes other specs is a bit messy","msgtype":"m.text"},"ts":1515165089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, definitely","msgtype":"m.text"},"ts":1515165096000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"I'll look over the HTML/Fullscreen specs and see what's a good idea to do","msgtype":"m.text"},"ts":1515165108000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"cool cool","msgtype":"m.text"},"ts":1515165116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: do you want me to merge some? e.g. whatwg/url?","msgtype":"m.text"},"ts":1515166284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also, \\o/","msgtype":"m.text"},"ts":1515166294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can handle it. Only encoding is I guess stuck somehow.","msgtype":"m.text"},"ts":1515166300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This also adds service workers to everything.","msgtype":"m.text"},"ts":1515166316000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1515166325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: mobile requires version=\"1.1\" in SVG?","msgtype":"m.text"},"ts":1515169265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, it was just inconsistent","msgtype":"m.text"},"ts":1515169273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Should we remove them from everywhere?","msgtype":"m.text"},"ts":1515169278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes please ðŸ˜ƒ","msgtype":"m.text"},"ts":1515169286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Done","msgtype":"m.text"},"ts":1515169319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/pull/6890 is still in progress right? Several of the tests that fail with my implementation were not changed.","msgtype":"m.text"},"ts":1515169373000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well I thought I fixed those that were wrong","msgtype":"m.text"},"ts":1515169408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All 6 of them were wrong according to the spec","msgtype":"m.text"},"ts":1515169419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: since you didn't implement the base64 semantics of the spec","msgtype":"m.text"},"ts":1515169419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't?","msgtype":"m.text"},"ts":1515169423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: your comments suggested you didn't","msgtype":"m.text"},"ts":1515169437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I also left some questions","msgtype":"m.text"},"ts":1515169452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see them...","msgtype":"m.text"},"ts":1515169462000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I commented on things I thought were spec bugs but you said they were not spec bugs","msgtype":"m.text"},"ts":1515169468000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So in that case they're test bugs","msgtype":"m.text"},"ts":1515169471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Since I implemented the spec","msgtype":"m.text"},"ts":1515169474000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah okay, I didn't look specifically at https://github.com/w3c/web-platform-tests/pull/6890#issuecomment-350530361","msgtype":"m.text"},"ts":1515169499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I thought the next comment summarized but it touched on some other things and some same things","msgtype":"m.text"},"ts":1515169513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"next two comments*","msgtype":"m.text"},"ts":1515169524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The second comment after summarizes that","msgtype":"m.text"},"ts":1515169531000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It explains how the spec gets the result in each case","msgtype":"m.text"},"ts":1515169544000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(the result that mismatches the tests)","msgtype":"m.text"},"ts":1515169553000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks, I misread","msgtype":"m.text"},"ts":1515169572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1515169577000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe I can fix in an hour, otherwise tomorrow","msgtype":"m.text"},"ts":1515169590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sg","msgtype":"m.text"},"ts":1515169594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am rather sick today, just trying to distract myself with something interesting -_-. Will turn to computer games soon, probably.","msgtype":"m.text"},"ts":1515169614000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: good idea; Switch's been a lot of fun","msgtype":"m.text"},"ts":1515169661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Say I was, theoretically, writing up a stage-0 proposal to add seeded random numbers to JS. I feel like the best interface is a Math.seededRandom(seed) generator function, which returns an iterator of random values. Any other reasonable options?","msgtype":"m.text"},"ts":1515177904000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I kinda want to steer away from just having Math.random({seed:0}) update some global seed - far too easy for two applications to clash and mess each other up.","msgtype":"m.text"},"ts":1515177937000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why trust JS devs to properly seed their random numbers?","msgtype":"m.text"},"ts":1515177959000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"I'm not - if you want normal good randomess, you use the normal random APIs. This is for when you specifically need a reproducible string of random numbers.","msgtype":"m.text"},"ts":1515177991000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Without having to explicitly stash them somewhere, because the API I want them for is stateless.)","msgtype":"m.text"},"ts":1515178007000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Specifically, the https://lab.iamvdo.me/houdini/rough-boxes Houdini demo, which currently repaints the rough borders totally differently every time the callback is called.","msgtype":"m.text"},"ts":1515178064000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The only way around that today is to have them handroll a linear congruential generator or something, which is dumb.","msgtype":"m.text"},"ts":1515178083000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm just worried some idiot dev working for a bank ends up using Math.seededRandom(0)","msgtype":"m.text"},"ts":1515178088000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"And decides to roll their own crypto","msgtype":"m.text"},"ts":1515178121000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Or generate user keys with it","msgtype":"m.text"},"ts":1515178145000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"That's always a possibility.","msgtype":"m.text"},"ts":1515178161000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Its a lot harder to pull off if you have to implement your own seeded random algorithms","msgtype":"m.text"},"ts":1515178196000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Given that they have good options (both the bad crypto of Math.random() and the better crypto of the actual crypto API), I don't think it's very important to worry about misuse of an even worse crypto.","msgtype":"m.text"},"ts":1515178197000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what is wrong with https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues?","msgtype":"m.text"},"ts":1515178207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"@annevk What I just said - the Houdini APIs are stateless, so there's no place to stash that array.","msgtype":"m.text"},"ts":1515178239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I guess I don't understand","msgtype":"m.text"},"ts":1515178280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anything that boils down to \"pre-generate a list of random numbers, then re-use that list multiple times\" isn't very good for the Houdini APIs. The invocations have very limited access to state data, and can't reasonably generate their own .","msgtype":"m.text"},"ts":1515178339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Note that gRV() is *not* seeded in the way I mean, where the seed is controllable by the user.","msgtype":"m.text"},"ts":1515178364000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Disclaimer:  Not a JS dev)  Could you just add a default parameter to Math.random like seeded=false and allow providing a seed that way?","msgtype":"m.text"},"ts":1515178399000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"I addressed that up above - that means you'd be fiddling with some global random seed, which means that *two* users of seeded randomess will fight with each other.","msgtype":"m.text"},"ts":1515178425000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And it's not clear that the global seed will actually work as intended with the Houdini APIs, where each invocation of the callback might happen in a different process with a fresh global.)","msgtype":"m.text"},"ts":1515178455000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean like this (in C++):  int getRandom(bool isSeeded=false, int seed=0)","msgtype":"m.text"},"ts":1515178482000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"If isSeeded is false, in this case, it ignores the value of seed","msgtype":"m.text"},"ts":1515178533000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Hm, that might work. (well, JS doesn't need the extra bool, the presence of the seed argument will work fine) The assumption being that you feed your previous result in as the new seed for the next invocation?","msgtype":"m.text"},"ts":1515178602000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1515178631000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Problem is - how is that better than the more convenient seededRandom() returning an iterator of random values starting from that seed?","msgtype":"m.text"},"ts":1515178633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's no new functionality or protection, just an API that requires slightly more manual intervention to pull multiple out.","msgtype":"m.text"},"ts":1515178654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It doesn't call out to idiot developers saying \"Abuse me\" as strongly","msgtype":"m.text"},"ts":1515178670000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"I don't see how that's possible. `Math.random({seed: 0})` vs `Math.seededRandom(0)` seem pretty equivalent in that regard.","msgtype":"m.text"},"ts":1515178699000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess maybe trying to save idiot devs from themselves in JS is somewhat of a fools errand","msgtype":"m.text"},"ts":1515178764000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Math.random({seed: 0}) might require them to read the docs?","msgtype":"m.text"},"ts":1515178801000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"No, it's valid. I just don't see how one is better or worse than the other in this regard, and the second has better ergonomics.","msgtype":"m.text"},"ts":1515178802000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My C++ instincts tell me to just overload Math.random() but IDK what the JS idiomatic approach is.","msgtype":"m.text"},"ts":1515179015000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"C++ instincts are very often wrong when designing idiomatic JS apis. ^_^","msgtype":"m.text"},"ts":1515179031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Those, and Java instincts, are the cause of most of the worst-designed JS APIs, imho.)","msgtype":"m.text"},"ts":1515179048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I see 2 possible benefits to adding a new parameter to Math.random()","msgtype":"m.text"},"ts":1515179106000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"1) No new API","msgtype":"m.text"},"ts":1515179131000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Domenic: no disagreement on step 6/7 being terrible","msgtype":"m.text"},"ts":1515179199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I've been wanting to refactor that, but there's so much tied up into a knot it's rather impossible","msgtype":"m.text"},"ts":1515179215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"2) Since getting a sequence of random values from a seed requires feeding the last value back into the function, it is more unlikely that someone who doesn't understand what the consequences are of fixed seeds will be able to successfully make their code work with the seed parameter.","msgtype":"m.text"},"ts":1515179223000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"Also, is there a good way of generating seeds in JS?","msgtype":"m.text"},"ts":1515179318000,"senderName":"mel00010","senderId":"mel00010@irc"},
{"content":{"body":"TabAtkins: a new method makes sense if the return type is different. And the iterator seems pretty reasonable, although perhaps too clever? Will think on it further.","msgtype":"m.text"},"ts":1515179318000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: not sure if you saw my suggestion at https://github.com/whatwg/html/issues/3327, but that's a quick fix that would have saved me.","msgtype":"m.text"},"ts":1515179387000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: some of that might be doable, but most of it is intertwined and not a good first bug","msgtype":"m.text"},"ts":1515179432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: iirc though","msgtype":"m.text"},"ts":1515179438000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think you can just move stuff until after, there's really no reason why it's defined during step 5.","msgtype":"m.text"},"ts":1515179471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because it references variables and such","msgtype":"m.text"},"ts":1515179492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Please do read it carefully before making changes ðŸ˜ƒ","msgtype":"m.text"},"ts":1515179503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Apple joined the AV1 group \\o/, prolly too soon, but Iâ€™m excited","msgtype":"m.text"},"ts":1515187760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what is the implication of that?","msgtype":"m.text"},"ts":1515187829000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that we might have royalty-free standardized video in the future","msgtype":"m.text"},"ts":1515187896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you plan to rename more wpt directories to match spec shortnames? I would approve, especially for xhr.","msgtype":"m.text"},"ts":1515190774000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: it seems XHR is indeed broken nowâ€¦ Domenic?","msgtype":"m.text"},"ts":1515190900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I guess we can rename, but that one is more risky","msgtype":"m.text"},"ts":1515190926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: and the renames are annoying due to git log not dealing with them well","msgtype":"m.text"},"ts":1515190958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, oops :(","msgtype":"m.text"},"ts":1515191032000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I say we just rename it?","msgtype":"m.text"},"ts":1515191042000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Please grep as other stuff might depend on it","msgtype":"m.text"},"ts":1515191192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And thereâ€™s def incoming README refs","msgtype":"m.text"},"ts":1515191232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyways, nn all ðŸ˜ŠðŸ’¤","msgtype":"m.text"},"ts":1515191273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: #tc39 is a reasonable place to ask ES library design questions","msgtype":"m.text"},"ts":1515192669000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Yeah, I was getting feedback from a different population. ^_^","msgtype":"m.text"},"ts":1515192684000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: understood. just saw your response about C++ and Java instincts though :)","msgtype":"m.text"},"ts":1515192810000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/pull/8937","msgtype":"m.text"},"ts":1515194258000,"senderName":"foolip","senderId":"foolip@irc"}
]