[
{"content":{"body":"every reply i start to write in the zip thread i end up throwing away","msgtype":"m.text"},"ts":1367630947000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there are so many questions everything i try to comment on i end up going \"but there are ten bigger questions than this\"","msgtype":"m.text"},"ts":1367630968000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"like, if you have 50 images and you want to deliver them more efficiently, is zipping them really the right fix? ... and is that the problem that's trying to be solved? i don't even know where to start","msgtype":"m.text"},"ts":1367631004000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1367653326000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"is there a way to access single letters in CSS?","msgtype":"m.text"},"ts":1367653367000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1367653384000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"just no or not yet?","msgtype":"m.text"},"ts":1367653423000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"Definitely not yet; I don't have a crystal ball :)","msgtype":"m.text"},"ts":1367653477000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1367653493000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"But I don't think there's been talk about it recently","msgtype":"m.text"},"ts":1367653494000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"would be nice too add like a foreach(character) or something","msgtype":"m.text"},"ts":1367653524000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"so you can access the single letter in CSS without creating tons o tags in JS :-/","msgtype":"m.text"},"ts":1367653559000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"bye!","msgtype":"m.text"},"ts":1367653763000,"senderName":"whatwg010","senderId":"whatwg010@irc"},
{"content":{"body":"arv, are you guys still planning to try making NodeList [ArrayClass]?","msgtype":"m.text"},"ts":1367655503000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: Do you plan to release html5lib 1.0 anytime soon?","msgtype":"m.text"},"ts":1367656725000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"what do you need to make that happen?","msgtype":"m.text"},"ts":1367656757000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: https://github.com/html5lib/html5lib-python/issues?milestone=1&page=1&state=open","msgtype":"m.text"},"ts":1367666774000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: plus https://sourceforge.net/p/pypi/support-requests/259/ because otherwise we can't upload to PyPiâ€¦","msgtype":"m.text"},"ts":1367666790000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: need a hand?","msgtype":"m.text"},"ts":1367667479000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Well, I sure won't complain. :)","msgtype":"m.text"},"ts":1367667553000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Just assign something to you when you start working on it to avoid duplicating work, but basically just go ahead.","msgtype":"m.text"},"ts":1367667602000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"are all open issues from Google Code moved to GitHub already?","msgtype":"m.text"},"ts":1367667648000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"No, but what's left is mostly stuff with patches which need committed into git and sent as pull requests, which is effort. :)","msgtype":"m.text"},"ts":1367667673000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Anything without a patch is either new or somewhat ambiguous.","msgtype":"m.text"},"ts":1367667736000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Like, is it just a support request, eg.","msgtype":"m.text"},"ts":1367667750000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"OK, so basically 1.0 is those four issues","msgtype":"m.text"},"ts":1367667750000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Yeah, I think so.","msgtype":"m.text"},"ts":1367667758000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm writing a book on Web scraping with Python (focused on 3.3, with support for 2.7) so naturally I need html5lib 1.0 up ASAP","msgtype":"m.text"},"ts":1367667800000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"I'm not sure if https://github.com/html5lib/html5lib-python/pull/34 is the right approach to solving #33","msgtype":"m.text"},"ts":1367667889000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"wonders what annevk did that resulted into his latest tweet","msgtype":"m.emote"},"ts":1367667987000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ambv: It is.","msgtype":"m.text"},"ts":1367668031000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: We handle U+0000 in the states, it just we'll currently read too far and consume it as data accidentally.","msgtype":"m.text"},"ts":1367668056000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: I'll merge it shortly and change the commit message to something shorter and more readable.","msgtype":"m.text"},"ts":1367668085000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I'll prepare a PR for https://github.com/html5lib/html5lib-python/issues/9 shortly","msgtype":"m.text"},"ts":1367668735000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"until then, BRB","msgtype":"m.text"},"ts":1367668742000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"zcorpan: https://github.com/whatwg/html-differences/commit/3b8edc621b9e6c73f9598b79de530d52bc018805 seems wrong; the actual list of changes within any single changelog was in chronological order, at least when I edited it","msgtype":"m.text"},"ts":1367668917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: I cannot assign issues to myself unless I'm a project member","msgtype":"m.text"},"ts":1367669152000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Well, that sucks. :(","msgtype":"m.text"},"ts":1367669166000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: What's your username?","msgtype":"m.text"},"ts":1367669207000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv","msgtype":"m.text"},"ts":1367669214000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Can you now?","msgtype":"m.text"},"ts":1367669239000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: no, but now *you* can assign me.","msgtype":"m.text"},"ts":1367669331000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1367669333000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"wonders what the logic is here","msgtype":"m.emote"},"ts":1367669382000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: And I could before :)","msgtype":"m.text"},"ts":1367669393000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I can assign any issue to anyone)","msgtype":"m.text"},"ts":1367669406000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm not sure, I didn't have the \"Assigned to you\" list on the repo before. Now I do.","msgtype":"m.text"},"ts":1367669413000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Oh well, assigned now.","msgtype":"m.text"},"ts":1367669455000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: what's the idea behind keeping tests as a submodule?","msgtype":"m.text"},"ts":1367669793000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: They're shared by a around half a dozen implementations of the parser, most of which are based in git repo.","msgtype":"m.text"},"ts":1367669828000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"*repos","msgtype":"m.text"},"ts":1367669844000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah, I see, the repo keeps test files, not test cases. good idea, indeed","msgtype":"m.text"},"ts":1367669925000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Right, each impl has its own harness for the tests, but the data itself is external.","msgtype":"m.text"},"ts":1367669950000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: FWIW Kenneth Reitz's requests library uses charade, a six-based fork of chardet -> https://github.com/sigmavirus24/charade","msgtype":"m.text"},"ts":1367670093000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"html5lib could do the same","msgtype":"m.text"},"ts":1367670102000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Ah, awesome.","msgtype":"m.text"},"ts":1367670142000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1367670150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shouldn't we use something that implements http://encoding.spec.whatwg.org/ ?","msgtype":"m.text"},"ts":1367670161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Gecko at least is moving away from sniffing as much as possible","msgtype":"m.text"},"ts":1367670175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's numerous problems with \"universal\" detection","msgtype":"m.text"},"ts":1367670191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, this is a heuristic which often fails. I consider it a matter of last resort","msgtype":"m.text"},"ts":1367670219000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"annevk: For now it's just used as a worse-case fallback, where we have no externally provided data nor can we tell from BOM/pre-parser.","msgtype":"m.text"},"ts":1367670279000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: do you maintain a changelog?","msgtype":"m.text"},"ts":1367670965000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: No.","msgtype":"m.text"},"ts":1367671006000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: It, uh, would be nice. Probably once 1.0 is out.","msgtype":"m.text"},"ts":1367671020000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Though my personal attitude is that the git history should be clean enough to be usable as a changelog.","msgtype":"m.text"},"ts":1367671038000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well, it's a kludge at best","msgtype":"m.text"},"ts":1367671052000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"I find it very reassuring if the PyPI page for a library has a changelog right there","msgtype":"m.text"},"ts":1367671075000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"or at least it's listed as a link to the docs","msgtype":"m.text"},"ts":1367671086000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Whereas we scarcely have docsâ€¦","msgtype":"m.text"},"ts":1367671098000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Basically in the short term releasing something that works on Python 3 and is generally less buggy than are ancient release is the top priority.","msgtype":"m.text"},"ts":1367671122000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Having the git shortlog the same as a changelog isn't ridiculous IMO. Obviously with API incompatible changes you want more documentation, but I think in general it's fine.","msgtype":"m.text"},"ts":1367671157000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sure thing","msgtype":"m.text"},"ts":1367671438000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"if the shortlog is indeed nice, creating a changelog shouldn't be that hard later on","msgtype":"m.text"},"ts":1367671461000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"This is why I tend push people to write nice commit messages. And often don't merge on GitHub bug rather sqash everything down.","msgtype":"m.text"},"ts":1367671494000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: so you'd rather rebase on a per-issue basis?","msgtype":"m.text"},"ts":1367671558000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Basically yeah.","msgtype":"m.text"},"ts":1367671585000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Unless it obviously makes sense as multiple commits, that is","msgtype":"m.text"},"ts":1367671599000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: would you mind me adding tox.ini to make it easier for contributors to locally test on all required releases?","msgtype":"m.text"},"ts":1367671968000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"tox.ini?","msgtype":"m.text"},"ts":1367672052000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh, that tox.","msgtype":"m.text"},"ts":1367672160000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well, I'm moving stuff around a bit anyway so I'll put a PR up in a minute, you'll decide whether you like what you see","msgtype":"m.text"},"ts":1367672224000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"In principle I'm in favour.","msgtype":"m.text"},"ts":1367672251000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: FWIW, the short version of what's currently happening is once we can upload builds to PyPi 1.0b1 will ship pretty much immediately, and then 1.0 will be finished.","msgtype":"m.text"},"ts":1367672499000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well, I bumped Richard Jones to help with the PyPI credentials issue","msgtype":"m.text"},"ts":1367672536000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"is the optional \"datrie\" package comment in README.rst still up-to-date? I see datrie is now bundled with html5lib","msgtype":"m.text"},"ts":1367672741000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"It isn't.","msgtype":"m.text"},"ts":1367672749000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"datrie.py is just a wrapper to provide a consistent API","msgtype":"m.text"},"ts":1367672763000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah, nevermind, now I see","msgtype":"m.text"},"ts":1367672770000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"(I'll likely fork that folder off to be an external lib)","msgtype":"m.text"},"ts":1367673722000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Am heading off, will be back in a few hours.","msgtype":"m.text"},"ts":1367675207000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"haha, I'm just closing up the PR","msgtype":"m.text"},"ts":1367675223000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"but won't keep you waiting","msgtype":"m.text"},"ts":1367675234000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"see you around, the PR will be waiting for you once you get back","msgtype":"m.text"},"ts":1367675246000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1367675248000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: https://github.com/html5lib/html5lib-python/pull/40","msgtype":"m.text"},"ts":1367675691000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Ms2ger: Yeah, still want to make NodeList an [ArrayClass]. This time behind a flag. I don't know when it will happen.","msgtype":"m.text"},"ts":1367682084000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"arv, okay. Is there a bug I can stalk?","msgtype":"m.text"},"ts":1367682120000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Let me check and file a new one if needed","msgtype":"m.text"},"ts":1367682142000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"Ms2ger: http://crbug.com/229398","msgtype":"m.text"},"ts":1367684662000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"arv, thanks","msgtype":"m.text"},"ts":1367684681000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=21566#c10 Charles is going to fork the URL Standard? That'll be fun","msgtype":"m.text"},"ts":1367691032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: Can I add a cumulative commit fixing the review fixes or do you want to rebase every single one? ;)","msgtype":"m.text"},"ts":1367691738000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"s/fixing the review fixes/applying the review fixes/","msgtype":"m.text"},"ts":1367691755000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"He'll find out soon enough that he'd need to do actual work for that","msgtype":"m.text"},"ts":1367692277000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ambv: I'd rather be able to sqash it down to the five logical commits you have","msgtype":"m.text"},"ts":1367692888000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm for all other people doing that, but Charles didn't even manage to finish Progress Events...","msgtype":"m.text"},"ts":1367692890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: should I do that or will you? I'm not a rebase expert","msgtype":"m.text"},"ts":1367692946000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: If you use `git commit --fixup=[commit id]` when fixing up everything, that'll do fine.","msgtype":"m.text"},"ts":1367693136000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: I'm happy to do everything else. :)","msgtype":"m.text"},"ts":1367693146000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: (using --fixup means I can just run `git rebase --autosquash` and it'll do it all by magic)","msgtype":"m.text"},"ts":1367693236000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: But for review purposes it's easier to review the fixes for the issues as separate commits.","msgtype":"m.text"},"ts":1367693257000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"OK, so I will use --fixup, sounds good to me.","msgtype":"m.text"},"ts":1367693501000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: What advantage does using a separate Opera Critic give you?","msgtype":"m.text"},"ts":1367693532000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"is away for 60 minutes, gotta put my 4 year old to sleep","msgtype":"m.emote"},"ts":1367693553000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: It helps with reviews with lots of commits, and it provides a clear list of outstanding issues on the review (whereas on GitHub would have to check every single commit to make sure there were no outstanding comments), but I'm not convinced for such a relatively small project it makes sense really, given most reviews are small.","msgtype":"m.text"},"ts":1367693641000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: html5lib is in the awkward state of being big enough I can see its value sometimes, but small enough that I often can't. :)","msgtype":"m.text"},"ts":1367693718000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"especially that there are negative sides to using a separate tool as well","msgtype":"m.text"},"ts":1367694016000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Well, without the negatives I would always be in favour :)","msgtype":"m.text"},"ts":1367694081000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: bikeshedding time! does that sound good to you? ->","msgtype":"m.text"},"ts":1367696055000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"``charade`` can be used as a fallback when character encoding cannot be determined. Its older brother ``chardet`` works as well on Python 2.","msgtype":"m.text"},"ts":1367696057000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"(with the message I want to emphasize that charade is the better choice for both Python 2 and Python 3, as charade is actively supported by the requests guys)","msgtype":"m.text"},"ts":1367696107000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: I dislike \"its older brother\" in the documentation, seems too informal. How about, \"â€¦determined; ``chardet``, from which it was forked, can also be used on Python 2.\"","msgtype":"m.text"},"ts":1367696151000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Perfect.","msgtype":"m.text"},"ts":1367696171000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: BTW, there's a sentence that says \"as well as Python 3.0 and above are supported\". technically that's 3.2 and above, right?","msgtype":"m.text"},"ts":1367696294000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Officially, for now, we support 3.0/3.1. It's untested on Travis because they don't support 3.0/3.1","msgtype":"m.text"},"ts":1367696468000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: even python-core doesn't support 3.0 and 3.1, and actively discourages any usage of 3.0 at that.","msgtype":"m.text"},"ts":1367696516000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"so I recommend discussing that with jgraham, doesn't really make sense to add yourself the maintenance burden.","msgtype":"m.text"},"ts":1367696567000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: There was a discussion before, to which the answer was neither of us really care. :)","msgtype":"m.text"},"ts":1367696588000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"haha, IMO it doesn't make sense to support 3.0 and 3.1 *unless you really care*.","msgtype":"m.text"},"ts":1367696655000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"same as 2.5 and below","msgtype":"m.text"},"ts":1367696662000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"but that's minor, I'll leave it as is - for now","msgtype":"m.text"},"ts":1367696685000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"I think practically what will happen is we'll support 3.2 and above officially, and practically try and keep Python 3.1 supported as long as it's supported in Debian stable/oldstable, likely for another year.","msgtype":"m.text"},"ts":1367696723000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Can't debian just use 2.3 or whatever they're on?","msgtype":"m.text"},"ts":1367696829000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"2.6","msgtype":"m.text"},"ts":1367696850000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Basically, there's nothing in later 3 verisons also supported in 2.6 that right now gives much gain to us","msgtype":"m.text"},"ts":1367696881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"woohoo! Now I can start fixing the actual bug","msgtype":"m.text"},"ts":1367697868000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: hm. some test cases are plain old unittest.TestCase subclasses. others, like test_tokenizer or test_sanitizer, are somewhat bizarre. tell me all about them ;)","msgtype":"m.text"},"ts":1367698948000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: About the mix, or how test_tokenizer and the like work?","msgtype":"m.text"},"ts":1367698995000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"both, but first how they work because I have to add a case for the failing sanitizer parser= arg","msgtype":"m.text"},"ts":1367699019000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"and I'm confused","msgtype":"m.text"},"ts":1367699023000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: The mix is because we used to use unittest for tests. Everything should just be moved over to using plain asserts for nose.","msgtype":"m.text"},"ts":1367699194000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: test_sanitzer has common test code for almost everything, so just gives nose a bunch of tuples of the test function and various different arguments to run. For parser= I guess you need a separate test (test_parser, I guess).","msgtype":"m.text"},"ts":1367699327000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: test_sanitizer looks quite a mess, tbh :)","msgtype":"m.text"},"ts":1367699360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Stuff like test_tokenizer and test_parser are fairly complicated, overly messy harnesses for the external test data. But they work so there's no real motivation to tidy them. :)","msgtype":"m.text"},"ts":1367699455000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I mean, if those two modules are there to convince me that nose is better than plain old unittest, then I fail to see how ;)","msgtype":"m.text"},"ts":1367699517000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"possibly a failure condition returns a cleaner error message, is that so?","msgtype":"m.text"},"ts":1367699563000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Well, if you look at how test_tokenizer used to work back in history, it basically had to create an empty class then call setattr and create dummy methods for each of several thousand tests.","msgtype":"m.text"},"ts":1367699591000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: tbh, I haven't looked at unittest since unittest2 happened so I don't know what it's like now.","msgtype":"m.text"},"ts":1367699614000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: But stuff like nose's coverage support, escaping to pdb on failure/error all seems nicer than unittest","msgtype":"m.text"},"ts":1367699656000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"does nose rerun or redefine asserts like py.test so it knows how to report a failure there?","msgtype":"m.text"},"ts":1367699747000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1367699758000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If I understand correctly.","msgtype":"m.text"},"ts":1367699767000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Well, it does if run with -d","msgtype":"m.text"},"ts":1367699826000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"OK, I checked out the test generator documentation","msgtype":"m.text"},"ts":1367699855000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: I think there is nothing to fix for #9 (or #183 and #184 on code.google.com). The code path has been fixed by jgraham in f50cb082","msgtype":"m.text"},"ts":1367702076000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"there is a bogus comment on #184 that suggests 0.95 was broken but I guess the user had a custom tokenizer which didn't accept the parser keyword argument","msgtype":"m.text"},"ts":1367702123000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Well, that simplifies life. :)","msgtype":"m.text"},"ts":1367702150000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'll comment on the issue and we can close it.","msgtype":"m.text"},"ts":1367702165000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"GitHub is hilarious. I'm assigned to the issue but I cannot close it on my own.","msgtype":"m.text"},"ts":1367702361000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"And nobody apart from those with push permissions can assign issues to themselves, even when they're part of the project!","msgtype":"m.text"},"ts":1367702398000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yeah, GitHub has some interesting permissions choicesâ€¦","msgtype":"m.text"},"ts":1367702407000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"are you sure https://github.com/html5lib/html5lib-python/issues/37 is required for 1.0?","msgtype":"m.text"},"ts":1367702536000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"seems like a new feature for me, and a tricky one at that","msgtype":"m.text"},"ts":1367702579000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"It's not really, it's just relatively small.","msgtype":"m.text"},"ts":1367702585000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: And in the past ten minutes I've implemented it :)","msgtype":"m.text"},"ts":1367703121000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: how did you overcome arbitrary order in the tree builders?","msgtype":"m.text"},"ts":1367703145000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: I didn't.","msgtype":"m.text"},"ts":1367703179000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: As I hinted at in the comment, that's infeasible. I was treating the issue as a case of reordering even when the order *was* meaningful.","msgtype":"m.text"},"ts":1367703206000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Okay, got it.","msgtype":"m.text"},"ts":1367703288000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"realizes OrderedDict isn't in 2.6, blarf!","msgtype":"m.emote"},"ts":1367703556000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah, requests have it in .compat","msgtype":"m.text"},"ts":1367703739000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: would it make sense to add a test for #33? http://www.bpaste.net/show/o0xqN6TRfFG4qLE56lDA/","msgtype":"m.text"},"ts":1367703755000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: It should just be added to the testdata, like https://github.com/html5lib/html5lib-tests/pull/4","msgtype":"m.text"},"ts":1367703805000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: But I'm not entirely sure whether we're using CTR or RTC for tests, thus it hasn't been merged yet. :)","msgtype":"m.text"},"ts":1367703843000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(commit-then-review or review-then-commit, that is)","msgtype":"m.text"},"ts":1367703856000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I see.","msgtype":"m.text"},"ts":1367703857000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"yeah, got it.","msgtype":"m.text"},"ts":1367703868000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Wait, that's the wrong case.","msgtype":"m.text"},"ts":1367703876000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I thought I had added a test for that. But yeah, it should go in testdata.","msgtype":"m.text"},"ts":1367703888000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Probably to the tokenizer tests.","msgtype":"m.text"},"ts":1367703895000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: https://github.com/gsnedders/html5lib-python/commit/e37cac979534427e2e60239019ad06dda90f18a4 is the entire fix for #37, thus why I think we can get it in in time for 1.0 :)","msgtype":"m.text"},"ts":1367704138000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sure, are you going to add ordereddict as a dependency for 2.6?","msgtype":"m.text"},"ts":1367704197000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"seems like the simplest fix","msgtype":"m.text"},"ts":1367704205000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Yes, once I think of a sane way to include it/document it. Do I have a 2.6-test specific requirements file? Seems ugly.","msgtype":"m.text"},"ts":1367705278000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ignore the fact that it's tests and simply add ordereddict to setup.py for 2.6. this will require moving the install_requires list out of setup() and to build it dynamically","msgtype":"m.text"},"ts":1367705359000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"But it's only required for the testsuite, so that seems inappropriate.","msgtype":"m.text"},"ts":1367705414000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"if you distribute it in the tarball then it's fine. if not, then just wrap the import error to return a meaningful error message","msgtype":"m.text"},"ts":1367705468000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"adding it for Tox is trivial, for Travis just add it to requirements-test.txt","msgtype":"m.text"},"ts":1367705580000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"for Python > 2.6 it's completely useless but it installs alright, harmless","msgtype":"m.text"},"ts":1367705593000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Just a waste of a bit of time, really :)","msgtype":"m.text"},"ts":1367705729000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But, well, small enough that's probably not an issue.","msgtype":"m.text"},"ts":1367705739000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: on an unrelated note, where to put the test for #6?","msgtype":"m.text"},"ts":1367705844000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"I *think* I fixed the issue, want to add the test before PRing","msgtype":"m.text"},"ts":1367705867000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"parser2.py I guess?","msgtype":"m.text"},"ts":1367705942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I dunno, really. :)","msgtype":"m.text"},"ts":1367705947000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"parser2 it is","msgtype":"m.text"},"ts":1367706010000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: For tox, I don't need a separate commands dfn under [testenv:py26], do I?","msgtype":"m.text"},"ts":1367706135000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: no, only specify \"basepython = python2.6\"","msgtype":"m.text"},"ts":1367706177000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"and all deps, it's not cumulative","msgtype":"m.text"},"ts":1367706187000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Does #41 look right to you?","msgtype":"m.text"},"ts":1367706474000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"haha, I was about to tell","msgtype":"m.text"},"ts":1367706644000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"\"apart from the empty line at the end of tox.iniâ€¦\"","msgtype":"m.text"},"ts":1367706653000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1367706656000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"gsnedders: what if people depended on the sorting behaviour that you now remove?","msgtype":"m.text"},"ts":1367706727000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Then oh well. It makes no change to the semantics of the output. And we've frequently changed behaviour in edge-cases in pre-1.0 releases.","msgtype":"m.text"},"ts":1367706783000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Like, the only reason it breaks the tests is because we do a byte-for-byte comparison and not the semantics of the output.","msgtype":"m.text"},"ts":1367706860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm asking more about: how does a person like that restore the previous behaviour?","msgtype":"m.text"},"ts":1367706915000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"for (attr_namespace, attr_name), attr_value in self.reorder_attributes(token[\"data\"].items()):","msgtype":"m.text"},"ts":1367706985000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: What we should probably do, ideally, is add a new filter that reorders them and not do it in JsonWalker.","msgtype":"m.text"},"ts":1367707013000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Then anyone can use the filter.","msgtype":"m.text"},"ts":1367707022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I have to check out filters","msgtype":"m.text"},"ts":1367707044000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"but JsonWalker? Hm?","msgtype":"m.text"},"ts":1367707089000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"In test_serializer.py","msgtype":"m.text"},"ts":1367707135000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah, yes, we could reuse the functionality for tests if we added it, right.","msgtype":"m.text"},"ts":1367707193000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"filters mutate the tree after building it, do I get that right?","msgtype":"m.text"},"ts":1367707248000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"hm, my English sucks. \"filters mutate the tree after it has been built, right?\"","msgtype":"m.text"},"ts":1367707276000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"and a Filter sounds great, solves the issue and frees you from OrderedDict","msgtype":"m.text"},"ts":1367707328000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":":>","msgtype":"m.text"},"ts":1367707329000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Some are designed to be used to process the tree as being built, intercepting tokens from the tokenizer before passing on to the treebuilder, and others while getting tokens from treewalker.","msgtype":"m.text"},"ts":1367707369000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Kinda sucks.","msgtype":"m.text"},"ts":1367707373000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: Still need OrderedDict, though","msgtype":"m.text"},"ts":1367707379000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: more reviewing to do! https://github.com/html5lib/html5lib-python/pull/42","msgtype":"m.text"},"ts":1367709609000,"senderName":"ambv","senderId":"ambv@irc"}
]