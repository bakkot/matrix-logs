[
{"content":{"body":"annevk: https://github.com/whatwg/html/pull/323 LGTM % bz's comments.","msgtype":"m.text"},"ts":1448010084000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I added some tests which verify that the things he suggested actually do match existing Chrome/Firefox behavior.","msgtype":"m.text"},"ts":1448010112000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Cool","msgtype":"m.text"},"ts":1448010928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll do some review of all that now","msgtype":"m.text"},"ts":1448010941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks! I was wondering why substitution wasn't working... ;)","msgtype":"m.text"},"ts":1448012638000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: did you even ran that test? :-P","msgtype":"m.text"},"ts":1448012658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"run*","msgtype":"m.text"},"ts":1448012669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I did! I hard-coded `web-platform.test:8000`.","msgtype":"m.text"},"ts":1448012676000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1448012684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then I just assumed that my server was broken, so I changed it to a {{}} thing and uploaded.","msgtype":"m.text"},"ts":1448012690000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: appreciated that comment on the race condition, it was totally unnecessary to have that","msgtype":"m.text"},"ts":1448012733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Internet high-five!","msgtype":"m.text"},"ts":1448012772000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Ms2ger: jgraham: can https://github.com/w3c/web-platform-tests/pull/2344 be merged?","msgtype":"m.text"},"ts":1448012772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst, you don't have push access?","msgtype":"m.text"},"ts":1448012831000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I do. I can click the button if you like.","msgtype":"m.text"},"ts":1448012844000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"If you think it's good to go, push away","msgtype":"m.text"},"ts":1448012867000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Easy.","msgtype":"m.text"},"ts":1448012870000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Ms2ger: I was mostly wondering about squashing policies and such","msgtype":"m.text"},"ts":1448013076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: but I guess web-platform-tests likes it rather messy","msgtype":"m.text"},"ts":1448013086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Heh","msgtype":"m.text"},"ts":1448013104000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think I would have squashed this one, but I think it was fine like this too","msgtype":"m.text"},"ts":1448013122000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"eh. squashing is for the weak of mind.","msgtype":"m.text"},"ts":1448013469000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: so can https://github.com/w3c/web-platform-tests/pull/2329 be merged now?","msgtype":"m.text"},"ts":1448014755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Other than the fact that your ';' key is apparently broken, LGTM.","msgtype":"m.text"},"ts":1448014797000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: as long as there is no forced coding style I will exercise my rights","msgtype":"m.text"},"ts":1448014880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm sure we can all agree on https://google.github.io/styleguide/javascriptguide.xml without any discussion or argument, right?","msgtype":"m.text"},"ts":1448015123000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1448015246000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: so how do I checkout an old branch to rebase it without running into the tools/ mess?","msgtype":"m.text"},"ts":1448015291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: reminds me of http://w3cmemes.tumblr.com/post/66860522018/jeff-jaffe-tells-robin-berjon-how-it-is","msgtype":"m.text"},"ts":1448015355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thoughts on having DOMTokenList.add() return false in contexts that have no supported tokens?","msgtype":"m.text"},"ts":1448015457000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"this would be to avoid the case where a DOMTokenList attribute is \"upgraded\" from something class-like to something rel-like, even though I don't know if that will ever happen","msgtype":"m.text"},"ts":1448015502000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk, I think maybe it works if you rm -r tools","msgtype":"m.text"},"ts":1448015516000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"philipj: sounds reasonable, might happen for <a rel> I suppose","msgtype":"m.text"},"ts":1448015544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, will file a spec issue!","msgtype":"m.text"},"ts":1448015556000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: make a PR!","msgtype":"m.text"},"ts":1448015917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: uh... :)","msgtype":"m.text"},"ts":1448015961000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"will try, then","msgtype":"m.text"},"ts":1448015964000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Hrm. If a method returns a Promise, should it still throw a TypeError if it's called with the wrong kinds of objects? Or should it reject the promise?","msgtype":"m.text"},"ts":1448017311000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"idlharness seems to expect the former, which surprises ms.","msgtype":"m.text"},"ts":1448017333000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"me.","msgtype":"m.text"},"ts":1448017335000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I'm pretty sure it should reject the promise, but did you check the WebIDL spec?","msgtype":"m.text"},"ts":1448017387000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: y'all are faster. :)","msgtype":"m.text"},"ts":1448017409000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I think it's in http://heycam.github.io/webidl/#es-operations","msgtype":"m.text"},"ts":1448017465000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"The \"If the operation has a return type that is a promise type\" bit","msgtype":"m.text"},"ts":1448017500000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Gotta have lunch, bye!","msgtype":"m.text"},"ts":1448017517000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Right. I think idlharness is wrong. Ha! Take that, testing framework!","msgtype":"m.text"},"ts":1448017520000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"philipj: replied on the issue, but if we're returning false, you would have the opposite problem","msgtype":"m.text"},"ts":1448017743000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"and the algorithm needs to be redefined so that in that case, the token is added to DOMTokenList, even if we returned false","msgtype":"m.text"},"ts":1448017782000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"all in all, I think currently it's better","msgtype":"m.text"},"ts":1448017801000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"philipj: Gotta go, but let's continue on the issue","msgtype":"m.text"},"ts":1448017820000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"mkwst: yeah, stuff that returns a promise never throws, only rejects","msgtype":"m.text"},"ts":1448018001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yup. https://github.com/w3c/testharness.js/issues/164","msgtype":"m.text"},"ts":1448018193000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Does anyone who knows anything at all about webcrypto want to look at https://github.com/w3c/web-platform-tests/pull/2352 ? I really know nothing","msgtype":"m.text"},"ts":1448021417000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Will do it if nobody beats me to it","msgtype":"m.text"},"ts":1448022977000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: Ms2ger: done","msgtype":"m.text"},"ts":1448025078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: you should probably have another look since I missed that it attempted to fix a specific issue","msgtype":"m.text"},"ts":1448025137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ping","msgtype":"m.text"},"ts":1448025808000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or are you recovering from chromedevsummit?","msgtype":"m.text"},"ts":1448025823000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: half awake!","msgtype":"m.text"},"ts":1448025866000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, I have a service worker activating corner case to ask you about...","msgtype":"m.text"},"ts":1448025904000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: are you awake enough for that?","msgtype":"m.text"},"ts":1448025913000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: my question is... while a SW is activating fetch event gets delayed until activate event is done... so you may have a queue of fetch events to service when a SW becomes \"activated\"... but when a SW becomes activated, the next SW in the activation queue may immediately start replacing it... the way the spec is written the delayed fetch events fire on","msgtype":"m.text"},"ts":1448026081000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"the first SW even though its being exited... is this correct?  should FetchEvents instead wait for an activated worker and an empty activation queue?","msgtype":"m.text"},"ts":1448026081000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I can try. If not I can save it for my flight home","msgtype":"m.text"},"ts":1448026088000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thanks... I have to go take my daughter to school... but will be back in 30 minutes or so... I need to implement something around this this morning... if you have time to give me an opinion","msgtype":"m.text"},"ts":1448026127000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks again!","msgtype":"m.text"},"ts":1448026128000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: just to confirm, the situation is: processing a queue of fetches, then a waiting worker calls skipWaiting() and starts activating?","msgtype":"m.text"},"ts":1448026346000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If so, it feels like queue processing should be halted until the new SW activates.","msgtype":"m.text"},"ts":1448026419000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"mkwst: so https://github.com/w3c/web-platform-tests/pull/2354 can land?","msgtype":"m.text"},"ts":1448027788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: what about https://github.com/w3c/web-platform-tests/pull/2356?","msgtype":"m.text"},"ts":1448027798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ok, I'll write a spec issue then... currently the spec get the local activeWorker variable from registrations active worker, then waits, then fires events at activeWorker... sounds like it should reaquire the activeWorker variable and loop there","msgtype":"m.text"},"ts":1448028088000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: https://github.com/w3c/web-platform-tests/pull/2354 LGTM. Looking at the orher one now.","msgtype":"m.text"},"ts":1448028358000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1448028710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: hmm... we don't wait for activate event for other functional events like push AFAICT","msgtype":"m.text"},"ts":1448029003000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: we should","msgtype":"m.text"},"ts":1448029032000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'll write another issue","msgtype":"m.text"},"ts":1448029040000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: cheers. Sorry about that. The only events that shouldn't be queued are those that are directed at a specific worker regardless of state, eg postmessage","msgtype":"m.text"},"ts":1448029130000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: np... thanks for clarifying the waiting behavior for fetch","msgtype":"m.text"},"ts":1448029158000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess the new activating worker does wait for the previous worker to finish handling any in flight events... so maybe it could still fire fetch events on the old worker","msgtype":"m.text"},"ts":1448029347000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/Frame.cpp&rcl=1448007983&l=201 are Chrome's current navigation checks.","msgtype":"m.text"},"ts":1448029375000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Certainly not set in stone, but that's what we're currently doing when failing the test you wrote.","msgtype":"m.text"},"ts":1448029400000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I mostly wrote that test because someone claimed it was a bug in Gecko, but then when I looked into it I couldn't really figure out what Chrome was protecting","msgtype":"m.text"},"ts":1448029493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: since activation involves deleting caches and migrating data, the old SW must be gone before activation starts","msgtype":"m.text"},"ts":1448029497000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: It's protecting my sanity, if nothing else. :)","msgtype":"m.text"},"ts":1448029513000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"JakeA: true... I guess the question is do we want the fetch event to use the new caches or the soon to be deleted old caches?","msgtype":"m.text"},"ts":1448029542000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"mkwst: seems like your sanity might be my insanity then","msgtype":"m.text"},"ts":1448029542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: issue 1: https://github.com/slightlyoff/ServiceWorker/issues/785","msgtype":"m.text"},"ts":1448029553000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't understand why the 1frame can access it's parent's opener in the first place.","msgtype":"m.text"},"ts":1448029561000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: also, I've no idea yet if any of this matches the specification or not :-/","msgtype":"m.text"},"ts":1448029561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shrug* We can worry about the spec later. ;)","msgtype":"m.text"},"ts":1448029576000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"JakeA: issue 2: https://github.com/slightlyoff/ServiceWorker/issues/786","msgtype":"m.text"},"ts":1448029596000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"mkwst: well the <iframe> gets the crossOriginWindow of the parent, and that exposes opener to anyone...","msgtype":"m.text"},"ts":1448029622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: cheers. Will reply when I'm in the office (couple of hours)","msgtype":"m.text"},"ts":1448029623000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: np, thanks for the help","msgtype":"m.text"},"ts":1448029640000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Can we stop doing that? :)","msgtype":"m.text"},"ts":1448029670000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: well, if .parent works, you can then navigate that frame and then grab .opener from something that is same-origin with you and do all the things","msgtype":"m.text"},"ts":1448029720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: it's not clear what you're protecting","msgtype":"m.text"},"ts":1448029736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"1. sandbox would prevent that navigation.","msgtype":"m.text"},"ts":1448029749000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"2. I don't like that we persist `opener` across top-level navigations. That's totally strange.","msgtype":"m.text"},"ts":1448029768000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I was surprised by 2","msgtype":"m.text"},"ts":1448029796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Especially it being persisted across cross-origin navigations","msgtype":"m.text"},"ts":1448029805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure if Gecko does that btw, only tested that in Chrome","msgtype":"m.text"},"ts":1448029828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"3. A frame that navigates the whole window is significantly more visible than a frame that silently navigates it's parent's opener.","msgtype":"m.text"},"ts":1448029858000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Yeah, 3 is a somewhat reasonable reason to block it anyway","msgtype":"m.text"},"ts":1448029885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It looks like firefox does #2.","msgtype":"m.text"},"ts":1448029967000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Which means folks probably rely on it. But it's crazy.","msgtype":"m.text"},"ts":1448029979000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Agreed","msgtype":"m.text"},"ts":1448030126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So blocking the navigation for reason 3 but not the access I guess I can buy","msgtype":"m.text"},"ts":1448030161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure what bz thinks of that though","msgtype":"m.text"},"ts":1448030172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think blocking the navigation is a totally reasonable thing to do. I also think denying `opener` on the cross-origin window objects is a totally reasonable thing to do.","msgtype":"m.text"},"ts":1448030905000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Also also, let's break whoever relies on #2.","msgtype":"m.text"},"ts":1448030920000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: sounds reasonable, but I'm starting to lose track of how we want to change the specification if what we want to implement is still unclear","msgtype":"m.text"},"ts":1448033792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I have attempted to summarize your position","msgtype":"m.text"},"ts":1448034060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: in the issue","msgtype":"m.text"},"ts":1448034064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks! I'll take a look in a second.","msgtype":"m.text"},"ts":1448034075000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mostly for my own understanding","msgtype":"m.text"},"ts":1448034076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, a minute.","msgtype":"m.text"},"ts":1448034079000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Take two!","msgtype":"m.text"},"ts":1448034086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"given a well-formed XHTML document (with no other namespaces, default namespace is XHTML), what changes with HTML parsing? non-void elements?","msgtype":"m.text"},"ts":1448035622000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: if it's only well-formed, lots","msgtype":"m.text"},"ts":1448035661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the CDATA stuff","msgtype":"m.text"},"ts":1448035662000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and valid","msgtype":"m.text"},"ts":1448035673000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: aaah, you didn't say that!","msgtype":"m.text"},"ts":1448035680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"really isn't awake today","msgtype":"m.emote"},"ts":1448035714000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: <br></br> would change","msgtype":"m.text"},"ts":1448035721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whitespace after </body> would change","msgtype":"m.text"},"ts":1448035731000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: whitespace at the start too, maybe?","msgtype":"m.text"},"ts":1448035744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1448035748000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe","msgtype":"m.text"},"ts":1448035749000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"still quite a bit of changes I think","msgtype":"m.text"},"ts":1448035757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but euh, I thought we could stop caring about this?","msgtype":"m.text"},"ts":1448035776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wants to see how he can move over the majority of the CSS testsuite to HTML source files with minimal diffs","msgtype":"m.emote"},"ts":1448035779000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So I kinda want to know if I can just rename the file without changing the content at all.","msgtype":"m.text"},"ts":1448035799000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Because parsing/reserialising causes a lot of churn from removing trailing slashes and the like","msgtype":"m.text"},"ts":1448035906000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Reading MSDN, readyState state names (UNSENT, LOADING, DONE etc) seems to be different in the IE implementation. For example, instead of DONE, they use READYSTATE_COMPLETE. So does this mean that XMLHttpRequest.DONE is not available in IE?","msgtype":"m.text"},"ts":1448041824000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"jsx, I would assume they support XMLHttpRequest.DONE by now","msgtype":"m.text"},"ts":1448045034000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Unfortunately I don't have a windows machine to test it and make sure :/","msgtype":"m.text"},"ts":1448045397000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"wanderview: FYI I'm working to sync up the wpt and blink copies of the cache storage tests. (Just so we don't duplicate efforts)","msgtype":"m.text"},"ts":1448046272000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: sounds good","msgtype":"m.text"},"ts":1448046325000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"jsbell: I don't think we have touched the cachestorage tests in a while... although we have heavily, heavily modified the blink service worker tests we imported","msgtype":"m.text"},"ts":1448046344000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: cool. I just need to dig through why they've diverged (presumably spec changes inconsistently tracked). Don't expect anything 'til after thanksgiving","msgtype":"m.text"},"ts":1448046399000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: np... I'm going on PTO shortly :-)","msgtype":"m.text"},"ts":1448046478000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: what do you think about relaxing the same-object requirment for tee'd stream chunks?  some discussion here: https://github.com/whatwg/streams/issues/401#issuecomment-152176591","msgtype":"m.text"},"ts":1448050061000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: it seems allowing same-object would make some optimizations hard (since chunks are observable across tee branches) and we could optimize out memory penalty of different-object using copy-on-write semantics","msgtype":"m.text"},"ts":1448050115000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I am OK with either as long as we decide on a single strategy for all implementations: structured clone or don't","msgtype":"m.text"},"ts":1448054319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: the current choice is because I have gotten repeated feedback from Chrome and Firefox people that copy on write is not implementable","msgtype":"m.text"},"ts":1448054335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok :-) I'm not a js engine guy... I guess that makes sense","msgtype":"m.text"},"ts":1448054360000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"If we think the other optimizations it might prevent are more important than the memory overhead though, we can change it...","msgtype":"m.text"},"ts":1448054398000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: can I get edit access to https://github.com/w3c/webcomponents/wiki/Custom-Elements:-Contentious-Bits ?","msgtype":"m.text"},"ts":1448057452000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"How does HTML's inline bug tracking actually work? Is it just comments with bugzilla URLs in them?","msgtype":"m.text"},"ts":1448057524000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I can test this theory","msgtype":"m.text"},"ts":1448057530000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: should non-navigations that get respondWith(Response.redirect(url)) trigger service worker interception again?","msgtype":"m.text"},"ts":1448063703000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think so, but would like confirmation","msgtype":"m.text"},"ts":1448063713000,"senderName":"wanderview","senderId":"wanderview@irc"}
]