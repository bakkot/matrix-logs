[
{"content":{"body":"Hixie_: Regarding https://www.w3.org/Bugs/Public/show_bug.cgi?id=20418, I thought the idea was to change non-modals to not be centered, not clipped, not in the initial containing block... and just be regular boxes. Which is different than what was spec'd before.","msgtype":"m.text"},"ts":1391477492000,"senderName":"falken","senderId":"falken@irc"},
{"content":{"body":"is it possible to achieve this: http://dpaste.com/1584387/","msgtype":"m.text"},"ts":1391477917000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1391477920000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"(moving the id attribute up)","msgtype":"m.text"},"ts":1391477931000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: ...yes, it is possible, through any number of means.  What are you trying to do?  Did you mean to ask that question in this room?","msgtype":"m.text"},"ts":1391478314000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, oups sorry","msgtype":"m.text"},"ts":1391478860000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"I meant using html5lib python","msgtype":"m.text"},"ts":1391478869000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"(or lxml since I'm using that too)","msgtype":"m.text"},"ts":1391478914000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"Oh, yeah.  Just remove the id from the first element, move up with .getparent(), and add it back.","msgtype":"m.text"},"ts":1391478943000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, perfect","msgtype":"m.text"},"ts":1391478963000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"LXML is horribly documented. I sympathize.","msgtype":"m.text"},"ts":1391478977000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"something like this? line 11 http://dpaste.com/1584436/","msgtype":"m.text"},"ts":1391479813000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"TabAtkins_,","msgtype":"m.text"},"ts":1391479817000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"That looks approximately right.","msgtype":"m.text"},"ts":1391479872000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, nice","msgtype":"m.text"},"ts":1391481192000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"can I make this code agnostic to the lib I use? ex using dom instead of lxml?","msgtype":"m.text"},"ts":1391481248000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"TabAtkins_: Is it possible to have a flexbox with align items strech, while still extending beyond the container if needed?","msgtype":"m.text"},"ts":1391481272000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"TabAtkins_: http://stackoverflow.com/questions/21515042/scrolling-a-flexbox-with-overflowing-content/21541021","msgtype":"m.text"},"ts":1391481337000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"aleray: Dunno if there's a DOM library on top of lxml.  I wrote some custom stuff for myself that's DOM-like because lxml is crap.","msgtype":"m.text"},"ts":1391481366000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, thanks. Time to sleep, I'll dive into it tommorow","msgtype":"m.text"},"ts":1391481459000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"thanks for helping","msgtype":"m.text"},"ts":1391481465000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"JosephSilber: Yes, just do the normal thing you would do with overflowing and such.","msgtype":"m.text"},"ts":1391481527000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"It works exactly normally.","msgtype":"m.text"},"ts":1391481533000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: It doesn't http://codepen.io/anon/pen/Enjqg","msgtype":"m.text"},"ts":1391481553000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Oops. Wrong link. Here: http://codepen.io/anon/pen/qFbKg","msgtype":"m.text"},"ts":1391481578000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"See the borders there? They don't extend beyond the container's size","msgtype":"m.text"},"ts":1391481681000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"JosephSilber: Ah, indeed.  Sorry, I was looking at a smaller testcase where the flex item itself overflowed, rather than its contents.","msgtype":"m.text"},"ts":1391481726000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I don't *think* there's a way to solve that, but I'll have to look later.  Gotta head home now.","msgtype":"m.text"},"ts":1391481751000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"JosephSilber: Okay, looked into it more.","msgtype":"m.text"},"ts":1391482397000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"JosephSilber: You're right that it won't work by default.","msgtype":"m.text"},"ts":1391482410000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"To make it work, you'll need a min-height: min-content; declaration, from <http://dev.w3.org/csswg/css-sizing/>, which I don't think is supported anywhere yet.","msgtype":"m.text"},"ts":1391482451000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1391482462000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"thanks though","msgtype":"m.text"},"ts":1391482502000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Such is life in today's paucity of sizing controls.","msgtype":"m.text"},"ts":1391482514000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Alternately, setting align-self:flex-start and height:fill-available should probably work (but again, no support).","msgtype":"m.text"},"ts":1391482559000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"No support for fill-available?","msgtype":"m.text"},"ts":1391482579000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"TabAtkins_: There is a way to hack it, if the container has a set height. I can remove the display: flex from the container, then nest another element inside. Make *that* the flex container, and give it a min-height: 100%","msgtype":"m.text"},"ts":1391482632000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Right, fill-available is also from Sizing, and also unsupported iirc.","msgtype":"m.text"},"ts":1391482664000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Interesting hack.","msgtype":"m.text"},"ts":1391482681000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"But the layout I'm dealing with needs the container to be fluid height :(","msgtype":"m.text"},"ts":1391482690000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"JosephSilber: Then yeah, you're screwed until we get more sizing controls.","msgtype":"m.text"},"ts":1391482965000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: seems there is some support: http://caniuse.com/#feat=intrinsic-width","msgtype":"m.text"},"ts":1391482989000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Yup yup, but at least in Chrome, it's only supported for 'width'/etc *I think*.","msgtype":"m.text"},"ts":1391483258000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Well, it kinda works here: http://codepen.io/anon/pen/qFbKg","msgtype":"m.text"},"ts":1391483298000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Just can't figure out why it forces scrollbars, even though I set box-sizing to border-box","msgtype":"m.text"},"ts":1391483328000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Not in Chrome, as far as I can tell.","msgtype":"m.text"},"ts":1391483334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Interesting. I'm looking at it in Chrome.","msgtype":"m.text"},"ts":1391483353000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Hm.  Oh, that pen isn't showing any use of the keywords at all.","msgtype":"m.text"},"ts":1391483384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hadn't saved. Here you go again: http://codepen.io/anon/pen/qFbKg","msgtype":"m.text"},"ts":1391483412000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"That fill-available behavior is a bug.  Mind reporting it?","msgtype":"m.text"},"ts":1391484083000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Yep. I'll build an isolated case.","msgtype":"m.text"},"ts":1391484156000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"If you swap around and use min-height:min-content instead, it works: http://codepen.io/anon/pen/dIlho","msgtype":"m.text"},"ts":1391484211000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unfortunately you have to remove the box-sizing declaration.  The behavior of box-sizing in my example is terrible, but not technically a bug, since that's what the spec actually mandates.","msgtype":"m.text"},"ts":1391484243000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'll have to fix that tomorrow.","msgtype":"m.text"},"ts":1391484247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"min-height:min-content does fix it, but I don't understand why.","msgtype":"m.text"},"ts":1391484326000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"stretch tries to set it to the flexbox's height, unless it's too tall explicitly.  Setting min-height:min-content makes it as tall as its contents, so it triggers the \"too tall\" behavior.","msgtype":"m.text"},"ts":1391484361000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"By default it should anyhow be expanding to it's content's height","msgtype":"m.text"},"ts":1391484362000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Nope, that's not how stretch works.","msgtype":"m.text"},"ts":1391484378000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So steretch doesn't care about the element's intrinsic height","msgtype":"m.text"},"ts":1391484403000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"It does.  An element's contents don't contribute to its intrinsic height.","msgtype":"m.text"},"ts":1391484437000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"intrinsic height\" being a technical term with a specific definition in CSS.","msgtype":"m.text"},"ts":1391484447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh. ok. thanks a million. will play with it.","msgtype":"m.text"},"ts":1391484460000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"No problem! Glad to find out that we did indeed fix 'height'/etc and make the keywords work on those properties.","msgtype":"m.text"},"ts":1391484509000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Now I just need to get that spec out the door so we can unprefix.","msgtype":"m.text"},"ts":1391484533000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I can't reproduce that m fill-available bug","msgtype":"m.text"},"ts":1391484655000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"I'll try to reduce it later.","msgtype":"m.text"},"ts":1391484686000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: using min-height: min-content only stretches the ones whose content are actually taller, but it doesn't affect their siblings. Any flex item whose content doesn't extend beyong the parent's height will still be cut off there: http://codepen.io/anon/pen/ehLFl","msgtype":"m.text"},"ts":1391485725000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"JosephSilber: Hm, you're right.  Try inserting another container around the columns, and make *that* a flexbox with min-height:min-content.","msgtype":"m.text"},"ts":1391486746000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Then the columns should all stretch to the maximum height, I think.","msgtype":"m.text"},"ts":1391486755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Unfortunately you can't just put those properties on .content, because .content has to host the scrollbar.","msgtype":"m.text"},"ts":1391486792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(In the middle of making dinner, or I'd be trying this out myself.)","msgtype":"m.text"},"ts":1391486808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sorry for bothering you. will try","msgtype":"m.text"},"ts":1391486826000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"That does the trick","msgtype":"m.text"},"ts":1391487438000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"I just hate haviong to nest so many containers","msgtype":"m.text"},"ts":1391487487000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Yeah, I know. :/","msgtype":"m.text"},"ts":1391487505000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Grid will help remove most of them.","msgtype":"m.text"},"ts":1391487515000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's still some way out","msgtype":"m.text"},"ts":1391487526000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Not too far out. Chrome's gonna try to ship it early-ish this year.  As soon as I take the spec to CR, which I plan to do Real Soon Now®.","msgtype":"m.text"},"ts":1391487590000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's great news.","msgtype":"m.text"},"ts":1391487651000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"How compatible would that be with what IE has today?","msgtype":"m.text"},"ts":1391487678000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Very close.","msgtype":"m.text"},"ts":1391487690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think property names changed a lot, like Flexbox, but that's it.","msgtype":"m.text"},"ts":1391487715000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And we added the template syntax, but that's not required to use Grid, just very helpful.","msgtype":"m.text"},"ts":1391487728000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: autoprefixer should be able to handle that just fine","msgtype":"m.text"},"ts":1391487734000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1391487742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I love you. Irally adore you. You've brought the most useful stuff to the web in a long time.","msgtype":"m.text"},"ts":1391487776000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1391487792000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Welcome. ^_^","msgtype":"m.text"},"ts":1391487810000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<TabAtkins> JosephSilber: Hm, you're right.  Try inserting another container around the columns, and make *that* a flexbox with min-height:min-content.","msgtype":"m.text"},"ts":1391489460000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Turns out, that *doesn't* work :(","msgtype":"m.text"},"ts":1391489474000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"It removes the stretching from the columns.","msgtype":"m.text"},"ts":1391489496000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"nvm.","msgtype":"m.text"},"ts":1391489564000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"I keep on jumping between the pen and my real project, but I keep on running into issues in my real project.","msgtype":"m.text"},"ts":1391489590000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"Hopefully I'll work it out","msgtype":"m.text"},"ts":1391489603000,"senderName":"JosephSilber","senderId":"JosephSilber@irc"},
{"content":{"body":"zcorpan: PhillipJ beat me to it :)","msgtype":"m.text"},"ts":1391509903000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1391509934000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: can the stable state stuff even work?","msgtype":"m.text"},"ts":1391510893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: iirc there's pages depending on img.src = x; if(img.width == 400) to work","msgtype":"m.text"},"ts":1391510914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: combined with the document image map of course","msgtype":"m.text"},"ts":1391510935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the spec supports that. it's loaded immediately if the image is in cache","msgtype":"m.text"},"ts":1391510947000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I see","msgtype":"m.text"},"ts":1391510958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's up with the new Twitter?","msgtype":"m.text"},"ts":1391510968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Wouldn't such pages be racy even with immediate download?","msgtype":"m.text"},"ts":1391510984000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: ideally normally you'd queue a task before you update attributes","msgtype":"m.text"},"ts":1391511018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: some aspects of that you might want to fix for <picture> btw","msgtype":"m.text"},"ts":1391511063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: <img> being so broken is one of the main reasons lazyload is proposed","msgtype":"m.text"},"ts":1391511079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what would you want changed?","msgtype":"m.text"},"ts":1391511169000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I think I'd prefer the whole thing to queue a task and then do the fetch","msgtype":"m.text"},"ts":1391511213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: and not have the document image cache lookup","msgtype":"m.text"},"ts":1391511249000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: sorry, do have that lookup, but don't have it be sync","msgtype":"m.text"},"ts":1391511263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how can it not be sync if pages depend on it?","msgtype":"m.text"},"ts":1391511280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: you can't change it for <img>","msgtype":"m.text"},"ts":1391511294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lunch","msgtype":"m.text"},"ts":1391511343000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: Do you have an example of such a page? I find it odd that pages would rely on width and get away with it, even today","msgtype":"m.text"},"ts":1391511349000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"see topic","msgtype":"m.text"},"ts":1391511382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The \"sense of logic\" part? :)","msgtype":"m.text"},"ts":1391511493000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"All I'm saying is that I doubt there's lots of contents relying on it, since it's likely to fail to work today, at least when the image is not in cache","msgtype":"m.text"},"ts":1391511619000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"they rely on the special image cache to be there, that's the whole reason the special image cache is defined","msgtype":"m.text"},"ts":1391511679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, expected perf is another I suppose","msgtype":"m.text"},"ts":1391511688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't really have any example pages though","msgtype":"m.text"},"ts":1391511698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm sure you can find some crawling through browser bugs","msgtype":"m.text"},"ts":1391511709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1391511834000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"SimonSapin: is your parser complete?","msgtype":"m.text"},"ts":1391513981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: I like it","msgtype":"m.text"},"ts":1391513986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: picture uses img so it can't not use the image cache","msgtype":"m.text"},"ts":1391515664000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: I think some corner cases with file: are wrong","msgtype":"m.text"},"ts":1391515823000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"but yeah, should be mostly complete","msgtype":"m.text"},"ts":1391515831000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin, wouldn't the while i < input.len() { loops look better with iterators?","msgtype":"m.text"},"ts":1391515876000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: what do you mean uses img?","msgtype":"m.text"},"ts":1391517557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's the <img> element that runs the selection algorithm","msgtype":"m.text"},"ts":1391517597000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: hmm, is there a spec for picture?","msgtype":"m.text"},"ts":1391518095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://picture.responsiveimages.org/","msgtype":"m.text"},"ts":1391518106000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: the thing is, I often want i to outlive the loop","msgtype":"m.text"},"ts":1391518193000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Are we really putting CSS syntax into HTML attributes zcorpan?","msgtype":"m.text"},"ts":1391518294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we did it for media queries...","msgtype":"m.text"},"ts":1391518303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for some value of css syntax","msgtype":"m.text"},"ts":1391518318000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Well now you can use CSS escapes to define the URL","msgtype":"m.text"},"ts":1391518461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the CSS Syntax spec deliberately makes the tokenizer available separately","msgtype":"m.text"},"ts":1391518469000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zcorpan, r? https://critic.hoppipolla.co.uk/r/645","msgtype":"m.text"},"ts":1391518481000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The original srcset did not have that","msgtype":"m.text"},"ts":1391518485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: that's very generous","msgtype":"m.text"},"ts":1391518498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm. not sure that's intentional. TabAtkins?","msgtype":"m.text"},"ts":1391518512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: i'll get to it :-)","msgtype":"m.text"},"ts":1391518570000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1391518575000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hmm Samsung intending to implement context menus in blink","msgtype":"m.text"},"ts":1391519879000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: hey, do you know if Encoding has a test suite?","msgtype":"m.text"},"ts":1391521421000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"no, just adhoc stuff","msgtype":"m.text"},"ts":1391521440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1391521492000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"annevk: do you have that stuff somewhere? I wonder if I could find someone foolish enough to take a stab at this one","msgtype":"m.text"},"ts":1391521777000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"and even ad hoc stuff can help bootstrap","msgtype":"m.text"},"ts":1391521790000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: oh, I actually did write a test for single-byte encodings","msgtype":"m.text"},"ts":1391521859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: http://dump.testsuite.org/encoding/","msgtype":"m.text"},"ts":1391521860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool, ta!","msgtype":"m.text"},"ts":1391521873000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: I have a bunch more scattered locally and some old hard drive that's online somewhere, but it's probably easier to start from scratch for those","msgtype":"m.text"},"ts":1391521888000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"those single byte tests even look pretty sane","msgtype":"m.text"},"ts":1391521908000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Yeah, I forgot about those","msgtype":"m.text"},"ts":1391521932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks, that's useful","msgtype":"m.text"},"ts":1391521950000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I reckon the TS could be bootstrapped with just a port of this to testharness.hs","msgtype":"m.text"},"ts":1391521965000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"*js","msgtype":"m.text"},"ts":1391521967000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"You really just want to write a testharness.hs to generate the testharness.js","msgtype":"m.text"},"ts":1391521987000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"whacks gsnedders behind the ears","msgtype":"m.emote"},"ts":1391522004000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Deep inside, you know you really want to be using Haskell.","msgtype":"m.text"},"ts":1391522037000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"darobin: note that some of that might be out of date a bit","msgtype":"m.text"},"ts":1391522138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: haven't kept it up to date with changes to the spec","msgtype":"m.text"},"ts":1391522147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: an out of date starting place is better than nothing at all","msgtype":"m.text"},"ts":1391522267000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"gsnedders: no, at jgraham's behest I only code in Coq","msgtype":"m.text"},"ts":1391522284000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: But then you can at least programmatically extract Haskell from your theorems!","msgtype":"m.text"},"ts":1391522358000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I don't often programmatically extract from my theorems, but when I do, it's in Haskell","msgtype":"m.text"},"ts":1391522633000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"what's all this Haskell love","msgtype":"m.text"},"ts":1391523039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Haskell :: p -> ♡ p","msgtype":"m.text"},"ts":1391523216000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk-cloud: Dude, I worked on Carakan post-release. Of course I'm a Haskell fanboy.","msgtype":"m.text"},"ts":1391523723000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"notices hsivonen.iki.fi is now hsivonen.fi","msgtype":"m.emote"},"ts":1391524423000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: /test is gone?","msgtype":"m.text"},"ts":1391524522000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh needs trailing slash","msgtype":"m.text"},"ts":1391524538000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=24485 is why ping=\"\" would be nice","msgtype":"m.text"},"ts":1391525166000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"dglazkov: so what is the plan with shipping shadow dom?","msgtype":"m.text"},"ts":1391525216000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I hope we'll get it a bit more stable and spec reviewed before anyone ships it","msgtype":"m.text"},"ts":1391525231000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: there as an intent message on blink-dev yesterday","msgtype":"m.text"},"ts":1391525292000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"intent to ship I guess","msgtype":"m.text"},"ts":1391525296000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is why I ask","msgtype":"m.text"},"ts":1391525344000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"what does that mean in practice","msgtype":"m.text"},"ts":1391525367000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like when","msgtype":"m.text"},"ts":1391525370000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and how major changes they are ok to still make","msgtype":"m.text"},"ts":1391525388000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume Chrome 34 but maybe it's later","msgtype":"m.text"},"ts":1391525416000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"need to be more careful with this kind of major change comparing to some smaller APIs","msgtype":"m.text"},"ts":1391525440000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: you could post a reply to blink-dev","msgtype":"m.text"},"ts":1391525549000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wonders if that requires use of a google account","msgtype":"m.emote"},"ts":1391525660000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1391525710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't think","msgtype":"m.text"},"ts":1391525719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's just a mailing list with a really horrible Web UI dropped on top of it","msgtype":"m.text"},"ts":1391525755000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah shit maybe you actually do need a google account","msgtype":"m.text"},"ts":1391525792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"as far as subscribing","msgtype":"m.text"},"ts":1391525803000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"checks the message headers for a subscribe thingey","msgtype":"m.emote"},"ts":1391525883000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: good catch. Try /test/","msgtype":"m.text"},"ts":1391525890000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah that worked","msgtype":"m.text"},"ts":1391525901000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug____: http://groups.google.com/a/chromium.org/group/blink-dev/subscribe","msgtype":"m.text"},"ts":1391525920000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: blink-dev+subscribe⊙co","msgtype":"m.text"},"ts":1391526010000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: anyway as far as I can tell you can actually subscribe to it using any arbitrary e-mail address you want. They just go out of their way to make it a massive PITA to do it","msgtype":"m.text"},"ts":1391527111000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Everyone uses google, right?","msgtype":"m.text"},"ts":1391527221000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I subscribe using an email address that does not have a Google Account","msgtype":"m.text"},"ts":1391527372000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"MikeSmith: I think I managed to subscribe using my spam-email account","msgtype":"m.text"},"ts":1391527379000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I suspect you need to give some detailed feedback though","msgtype":"m.text"},"ts":1391527422000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"I wonder if they ended up special casing Text nodes","msgtype":"m.text"},"ts":1391527470000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: yeah, that is the problem. Would need to have time to review the stuff again","msgtype":"m.text"},"ts":1391527479000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but I'm actually mostly wondering why they think the spec is stable enough","msgtype":"m.text"},"ts":1391527505000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Seems like a fair question","msgtype":"m.text"},"ts":1391527525000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Also, I recommend making time :)","msgtype":"m.text"},"ts":1391527538000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: sorry about that, see your inbox :/","msgtype":"m.text"},"ts":1391527934000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk-cloud: Regarding what we discussed earlier - I see Gecko returning width when the image is cached, but not Chrome","msgtype":"m.text"},"ts":1391533298000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"http://jsbin.com/OdOqiSO/2","msgtype":"m.text"},"ts":1391533300000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"And even in Gecko it (rightfully) breaks when the page is refreshed (F5, not even ctrl+F5)","msgtype":"m.text"},"ts":1391533367000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"So it seems like a very fragile thing for authors to count on","msgtype":"m.text"},"ts":1391533441000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: interesting, maybe things can be made better","msgtype":"m.text"},"ts":1391535027000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1391540626000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"\"identical elements are replace with a 'use' element; \" ;_; http://libregraphicsworld.org/blog/entry/svg-cleaner-0-6","msgtype":"m.text"},"ts":1391541258000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: what does http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2795 log for you?","msgtype":"m.text"},"ts":1391545363000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"log: 0","msgtype":"m.text"},"ts":1391545451000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"rendering mode: CSS1Compat","msgtype":"m.text"},"ts":1391545451000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"document has no title","msgtype":"m.text"},"ts":1391545451000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"log: 195","msgtype":"m.text"},"ts":1391545451000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"that means it makes the width available immediately when the image is cached","msgtype":"m.text"},"ts":1391545502000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: If I understand correctly, the second log, that shows the width, is printed after onload,so after the image was loaded (regardless of caching)","msgtype":"m.text"},"ts":1391545832000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: in window.onload, test() is run again which creates a new <img> and logs its width","msgtype":"m.text"},"ts":1391545889000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1391545903000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: so at that point the image it points to will be in the cache, because a different <img> loaded it earlier","msgtype":"m.text"},"ts":1391545919000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: if caching was disabled completely, both would log 0","msgtype":"m.text"},"ts":1391545961000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, I get your point","msgtype":"m.text"},"ts":1391545993000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"So, does that mean that the stable state stuff cannot work?","msgtype":"m.text"},"ts":1391546120000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"zcorpan: Or must be simulated, rather than implemented as is?","msgtype":"m.text"},"ts":1391546576000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: the stable state stuff is about waiting to fetch an image that is *not* in the cache","msgtype":"m.text"},"ts":1391546639000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: the spec requires images that are in the cache to be available immediately","msgtype":"m.text"},"ts":1391546652000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: http://www.whatwg.org/specs/web-apps/current-work/multipage/embedded-content-1.html#update-the-image-data step 7 substep 3","msgtype":"m.text"},"ts":1391546699000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yoav: \"A user agent that obtains images immediately must also synchronously update the image data of an img element whenever that element has its src, srcset, or crossorigin attribute set, changed, or removed.\" #the-img-element","msgtype":"m.text"},"ts":1391546781000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Need to dig up and see how this translates to code...","msgtype":"m.text"},"ts":1391546858000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: btw i found https://bugzilla.mozilla.org/show_bug.cgi?id=466586 when searching for bugs in this area. not sure what the bug is there exactly but it seems the page in question expects .width to be available","msgtype":"m.text"},"ts":1391547930000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Basically, it seems like we'd need to split/duplicate ImageLoader::updateFromElement and create an updateFromElementIfCached or something of that sort","msgtype":"m.text"},"ts":1391548027000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: i'm not familiar with the code so i'm not sure what that means :-) maybe foolip does","msgtype":"m.text"},"ts":1391548157000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: :) Basically I'm looking for ways to split out the \"image is already cached\" case, so that all other algos will be activated on stable state","msgtype":"m.text"},"ts":1391548228000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: ok","msgtype":"m.text"},"ts":1391548258000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"The alternative is to start loading the image, and cancel it if something changes, which gets complicated once we have src, srcset,crossorigin and picture to take into consideration","msgtype":"m.text"},"ts":1391548290000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yeah we don't want to do that","msgtype":"m.text"},"ts":1391548324000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"at least if \"start loading\" means we can hit the network before we decide to cancel","msgtype":"m.text"},"ts":1391548397000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Oh, definitely. But even if it doesn't hit the network, it can get really complicated to juggle all that","msgtype":"m.text"},"ts":1391548477000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391548512000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i wonder if it's a good idea to make the sync cache thing unaware of srcset/picture, if that makes the implementation simpler","msgtype":"m.text"},"ts":1391548646000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: for srcset, it shouldn't matter much","msgtype":"m.text"},"ts":1391548875000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"for picture, maybe. I need to think about it","msgtype":"m.text"},"ts":1391548918000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Hixie: why navigator.getLanguages() rather than navigator.languages?","msgtype":"m.text"},"ts":1391552786000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"what would navigator.languages return?","msgtype":"m.text"},"ts":1391552805000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"A frozen Array of string values","msgtype":"m.text"},"ts":1391552827000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"the frozen is part is still being debated","msgtype":"m.text"},"ts":1391552836000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but we'll only remove it if it's what authors actually think is more JSy","msgtype":"m.text"},"ts":1391552858000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"a new one each time?","msgtype":"m.text"},"ts":1391552862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no, same Array until the contents changes","msgtype":"m.text"},"ts":1391552875000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"can the languages change?","msgtype":"m.text"},"ts":1391552876000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"see https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682","msgtype":"m.text"},"ts":1391552880000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ah right hte compromise","msgtype":"m.text"},"ts":1391552882000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"this is use-case B","msgtype":"m.text"},"ts":1391552884000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: heycam should be drafting you and a few others an email about whether to freeze or not","msgtype":"m.text"},"ts":1391552910000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391552917000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"will do that this week","msgtype":"m.text"},"ts":1391552920000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"cool. excited that people are hammering this out.","msgtype":"m.text"},"ts":1391552945000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it seems like freezing is the closest thing we have to the desired behavior that we have. Though I know freezing is frowned upon by a lot of people","msgtype":"m.text"},"ts":1391552948000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: returning a frozen anything seems like a bad idea since it means you can't use it like a normal object (even Node can have expandos, e.g.). returning an Array seems like a bad idea since it means that n.languages !== n.languages sometimes.","msgtype":"m.text"},"ts":1391552953000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: no, n.languages === n.languages will always return true. It only changes value from a task","msgtype":"m.text"},"ts":1391552992000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: I think freezing works really well. I will be sure to give it some thought though when that email comes around.","msgtype":"m.text"},"ts":1391552998000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"sicking: n.languages !== oldnlanguages","msgtype":"m.text"},"ts":1391553007000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: sure, Node.nodeValue !== oldNodeValue too sometimes","msgtype":"m.text"},"ts":1391553026000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: Same thing with Element.innerHTML","msgtype":"m.text"},"ts":1391553042000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: those don't return objects.","msgtype":"m.text"},"ts":1391553051000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so?","msgtype":"m.text"},"ts":1391553061000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: Node.firstChild !== oldNodeFirstChild","msgtype":"m.text"},"ts":1391553079000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: sure but if you change the first child back, then it goes back to its old value","msgtype":"m.text"},"ts":1391553148000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: it doesn't start returning a new object with the same value as the old old object","msgtype":"m.text"},"ts":1391553159000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: true, but if you create a new Node with the same contents then that's not the case","msgtype":"m.text"},"ts":1391553173000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: it's just bad API design to return a non-live array from a property, imho. Causes all kinds of weird behaviour.","msgtype":"m.text"},"ts":1391553177000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"especially a non-live mutable array.","msgtype":"m.text"},"ts":1391553186000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: like?","msgtype":"m.text"},"ts":1391553187000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: As an implementor, I'm more interested in following concentions used elsewhere. I'm happy to wait until we've established a recommended syntax in WebIDL though. But if so, please remove getLanguages() in the meantime","msgtype":"m.text"},"ts":1391553255000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"is there any other API anywhere where we return an array?","msgtype":"m.text"},"ts":1391553286000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hm, i guess there are some","msgtype":"m.text"},"ts":1391553310000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh but those are live and readonly","msgtype":"m.text"},"ts":1391553320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"See the use-cases in the bug","msgtype":"m.text"},"ts":1391553327000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"live and readonly arrays do not exist","msgtype":"m.text"},"ts":1391553334000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"live is generally hated by everyone","msgtype":"m.text"},"ts":1391553340000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it's generally not something i'm willing to implement for anything new","msgtype":"m.text"},"ts":1391553366000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i agree","msgtype":"m.text"},"ts":1391553385000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm just saying if they're _not_ live then we shouldn't return them from an attribute","msgtype":"m.text"},"ts":1391553404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's just wacked","msgtype":"m.text"},"ts":1391553410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you appear to be in minority in that opinion","msgtype":"m.text"},"ts":1391553431000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"e.g. it forces the UA to remember what it last returned","msgtype":"m.text"},"ts":1391553435000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yup, we've already added that ability into our WebIDL code","msgtype":"m.text"},"ts":1391553458000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"we chaned a bunch of APIs specifically to avoid doing this, i'm kinda surprised this is even controversial","msgtype":"m.text"},"ts":1391553474000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with a specific hook for throwing away that cache","msgtype":"m.text"},"ts":1391553478000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"changed","msgtype":"m.text"},"ts":1391553479000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: which APIs were changed? from what to what?","msgtype":"m.text"},"ts":1391553499000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"e.g. this is why PropertyNodeList has .getValues() rather than .values","msgtype":"m.text"},"ts":1391553549000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where is that used?","msgtype":"m.text"},"ts":1391553583000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"is this in the microdata API?","msgtype":"m.text"},"ts":1391553599000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391553604000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1391553608000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i don't know that api well enough to comment","msgtype":"m.text"},"ts":1391553630000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Generally I think property vs. function should be a choise based on what the specific thing is/does. Not what type it returns","msgtype":"m.text"},"ts":1391553680000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"to answer your earlier question, the problems are things like setting an expando on the array, and then it being there until magically one day it isn't because the user happened to tweak the settings","msgtype":"m.text"},"ts":1391553753000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or getting the length of the array, and iterating over it in a timeout loop, and half-way-through it changes length","msgtype":"m.text"},"ts":1391553779000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if it's frozen that won't happen","msgtype":"m.text"},"ts":1391553784000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"being frozen is even worse","msgtype":"m.text"},"ts":1391553792000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since then you can't even _set_ expandos","msgtype":"m.text"},"ts":1391553797000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is unlike everything on the Web","msgtype":"m.text"},"ts":1391553808000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not being able to set them seems like a good thing if you can't reliably get them","msgtype":"m.text"},"ts":1391553816000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"a method gives you a much clearer affordance that what you're getting is a new array","msgtype":"m.text"},"ts":1391553823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then you can set them and get them and it all works","msgtype":"m.text"},"ts":1391553830000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i honestly am quite baffled by wanting a non-method here","msgtype":"m.text"},"ts":1391553839000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not going to get into the frozen vs. non-frozen debate though. I'll leave that to people with more JS experience than me","msgtype":"m.text"},"ts":1391553843000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"why would you want a property to return a (non-live) array?","msgtype":"m.text"},"ts":1391553858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it seems like a property of the navigator. Not a function of it","msgtype":"m.text"},"ts":1391553887000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: would you have made navigator.language a function too?","msgtype":"m.text"},"ts":1391553911000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"can you think of any attribute that returns a non-live array where suddenly the attribute returns a new array?","msgtype":"m.text"},"ts":1391553912000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no, that returns a primitive value","msgtype":"m.text"},"ts":1391553921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right, like I said, i think property vs. function should not be a decision based on return-type","msgtype":"m.text"},"ts":1391553943000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"that answers the why","msgtype":"m.text"},"ts":1391553955000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but i agree it's an opinion","msgtype":"m.text"},"ts":1391553961000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i'm just trying to be consistent with the platform here","msgtype":"m.text"},"ts":1391553986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think the property way will be more consistent with where things are heading","msgtype":"m.text"},"ts":1391554002000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(my _opinion_ is that all of this sucks either way :-) )","msgtype":"m.text"},"ts":1391554006000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"things shouldn't be heading to something different than they already are","msgtype":"m.text"},"ts":1391554016000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because then we'll have an even more multiple-personality platform","msgtype":"m.text"},"ts":1391554025000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's the Web's biggest failing as a platform","msgtype":"m.text"},"ts":1391554040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that every API is idosyncratic in its own way","msgtype":"m.text"},"ts":1391554051000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this is the old \"stick with old suckyness and be consistent vs. create something better even though it breaks with old\" debate","msgtype":"m.text"},"ts":1391554062000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"generally i come down on the \"create something better\" side","msgtype":"m.text"},"ts":1391554086000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but it's a judgement call","msgtype":"m.text"},"ts":1391554098000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"however I'll note that we get a lot of complaints that \"the DOM\" isn't very consistent with other JS APIs","msgtype":"m.text"},"ts":1391554134000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i'm very strongly on the \"be consistent\" side, because if it's inconsistent, it isn't better regardless.","msgtype":"m.text"},"ts":1391554138000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes, our APIs being inconsistent is what i'm saying","msgtype":"m.text"},"ts":1391554162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway. i don't want to be the one to first introduce an attribute that returns a non-live same-object array","msgtype":"m.text"},"ts":1391554210000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"imho that's a mistake, and one we've intentionally avoided before","msgtype":"m.text"},"ts":1391554220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: at least IDBObjectStore.indexNames IDBDatabase.objectStoreNames navigator.gamepads and HTMLInputElement.files will all be doing that soon","msgtype":"m.text"},"ts":1391554588000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: if you don't want to go first then that's fine, but please remove getLanguages in the meantime","msgtype":"m.text"},"ts":1391554605000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"wait, what is happening to HTMLInputElement.files?","msgtype":"m.text"},"ts":1391554629000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we're working on removing the FileList class (since it's icky and live) and just having .files return an Array","msgtype":"m.text"},"ts":1391554662000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"it's unclear if .files should be readonly or not still, but either way it'll return an Array","msgtype":"m.text"},"ts":1391554677000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: (what's with this \"my way or remove it\" thing you've got going recently? can't we instead try to come up with designs we both think are good?)","msgtype":"m.text"},"ts":1391554681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hm, yeah, HTMLInputElement.files does have this behaviour already (not with an array, but the problem is the same either way)","msgtype":"m.text"},"ts":1391554731000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I just don't want features in the spec drafts that implementors don't like. I know you don't think what's in the draft matters and what's in the implementations is the only thing that does. However there's a lot of work trying to convince other people that what's in the spec draft is just a proposal and not to be taken as written in stone","msgtype":"m.text"},"ts":1391554781000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: \"sicking doesn't like\" isn't the same as \"implementors don't like\". i haven't heard any other implementors, including those who wanted this feature, say that getLanguages() is bad.","msgtype":"m.text"},"ts":1391554826000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but in any case you have provided compelling evidence that this is already a pattern, so i'm happy to change to an attribute","msgtype":"m.text"},"ts":1391554846000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: which other implementors have asked for this feature","msgtype":"m.text"},"ts":1391554857000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: it isn't a pattern yet since WebIDL doesn't really support it. But we've spent a lot of time debating how to make WebIDL support this","msgtype":"m.text"},"ts":1391554885000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"arv commented that he wanted it for chrome at some point","msgtype":"m.text"},"ts":1391554891000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nah, HTMLInputElement.files already does this","msgtype":"m.text"},"ts":1391554906000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and has arv said that he prefers getLanguages() over .languages?","msgtype":"m.text"},"ts":1391554910000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"he hasn't said either way","msgtype":"m.text"},"ts":1391554916000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so the only feedback you have is that it's not good? I.e. the one from me?","msgtype":"m.text"},"ts":1391554932000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"getFoo is an anti pattern. I prefer using real getters","msgtype":"m.text"},"ts":1391554950000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"i have feedback that one person didn't like the way it was specced, yes","msgtype":"m.text"},"ts":1391554950000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"two now :-)","msgtype":"m.text"},"ts":1391554957000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was in favor of exposing the capability","msgtype":"m.text"},"ts":1391554985000,"senderName":"arv","senderId":"arv@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1391554999000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: generally, whatever you put in the spec gets a lot of momentum, no matter if you've put it in there as a proposal and have no feedback from the people that asked for the feature or not","msgtype":"m.text"},"ts":1391555051000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i wish","msgtype":"m.text"},"ts":1391555066000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but sure","msgtype":"m.text"},"ts":1391555071000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm not saying the spec should have bad stuff in it","msgtype":"m.text"},"ts":1391555076000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm just saying that one person saying it's bad doesn't mean it's bad :-)","msgtype":"m.text"},"ts":1391555087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and moreover, that rather than removing it, we should just find a better solution","msgtype":"m.text"},"ts":1391555107000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and then replace it","msgtype":"m.text"},"ts":1391555112000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: sure, add navigator.languages which returns sequence<DOMString>","msgtype":"m.text"},"ts":1391555138000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: i'm happy to replace with something better. But until we agree on what's better I prefer to not have bad features in there","msgtype":"m.text"},"ts":1391555168000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you can't have an attribute return sequence<>s. But they can return DOMString[], which is what i'm speccing.","msgtype":"m.text"},"ts":1391555198000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: i think it's worth at least trying to find common ground for a few minutes before demanding that something be removed, is all i'm saying. \"hey, you just did what i wanted, except not quite, so immediately remove it!\" is how it comes across.","msgtype":"m.text"},"ts":1391555243000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: cool. Hopefully DOMString[] will go away when we fix the webidl bug. But using it until then seems fine","msgtype":"m.text"},"ts":1391555245000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: i tried to find common ground first. Which is why I pushed for .languages. But since we couldn't reach agreement I asked that it was removed until there was agreement","msgtype":"m.text"},"ts":1391555299000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"\"i want X\" \"i want Y\" \"remove Y\" is not trying to find common ground.","msgtype":"m.text"},"ts":1391555319000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"i want X\" \"i want Y\" \"how about Z\" would be trying to find common ground.","msgtype":"m.text"},"ts":1391555341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what would the Z be here?","msgtype":"m.text"},"ts":1391555356000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i've no idea","msgtype":"m.text"},"ts":1391555366000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's the \"finding\" part of \"finding common ground\"","msgtype":"m.text"},"ts":1391555374000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"i want X\" \"i want Y because R\" \"R is false because D\" \"ok let's do X\" would be good too","msgtype":"m.text"},"ts":1391555391000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"instead of \"i want X\" \"i want Y because R\" \"remove Y\" \"but R!\" \"R is false because D\" \"ok let's do X\" which is what we did above","msgtype":"m.text"},"ts":1391555420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1391555437000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a lot of this stuff comes down to opinions","msgtype":"m.text"},"ts":1391555448000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you felt that getFoo was an ok pattern, i did not","msgtype":"m.text"},"ts":1391555460000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sure, but the opinions aren't what mattered in the end","msgtype":"m.text"},"ts":1391555480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no?","msgtype":"m.text"},"ts":1391555543000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you showed me a feature that already existed that had the semantics you wanted, disproving my argument regarding lack of precedent.","msgtype":"m.text"},"ts":1391555576000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my strategy was always to do that. Which is why I asked it to be removed until there was precedence","msgtype":"m.text"},"ts":1391555630000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: it felt more like \"you're wrong, i'm right, i'd rather the spec not have this feature than have it be your way, and i'll just wait until i have more specs to point to rather than convince you now\". but whatever.","msgtype":"m.text"},"ts":1391555858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sicking: see new checkin, let me know if it's ok!","msgtype":"m.text"},"ts":1391555867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I generally don't know how to convince you given that a lot API design is not about X being provaly better than Y","msgtype":"m.text"},"ts":1391556160000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: I still don't know how to convince you that .foo is better than .getFoo()","msgtype":"m.text"},"ts":1391556195000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"especially since that's not always the case. I would have done .innerHTML as getInnerHTML() or as serializeToHTML()","msgtype":"m.text"},"ts":1391556244000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i wouldn't have done innerHTML at all :-)","msgtype":"m.text"},"ts":1391556309000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"IMHO attributes are good when you can treat them like variables - cheap to access, unsurprising to reuse","msgtype":"m.text"},"ts":1391556350000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"methods are good when you want the author to consider the call expensive, or when you want them to cache the result and operate on that","msgtype":"m.text"},"ts":1391556372000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: another reason that it's hard to convince you in this case is that we disagree on the \"do the best we can for new APIs vs. do the most consistent we can for new APIs\" issue","msgtype":"m.text"},"ts":1391556377000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391556386000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1391556396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"more to the point, i disagree with that characterisation of the issue","msgtype":"m.text"},"ts":1391556410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: sounds like we do agree on the attributes vs. function thing","msgtype":"m.text"},"ts":1391556421000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i think it's \"do the best we can for new APIs vs keep changing patterns so authors have to know what year the API was invented to know how to use it\"","msgtype":"m.text"},"ts":1391556447000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or more to the point, i don't think it's \"best\" vs something, it's \"consistent\" vs \"using new idioms\"","msgtype":"m.text"},"ts":1391556489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and it's not at all clear to me that using new idioms is automatically better than being consistent","msgtype":"m.text"},"ts":1391556502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"consistency is a huge part of what makes an API usable","msgtype":"m.text"},"ts":1391556517000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Another way to put it would be \"be consistent with popular JS libraries so that the DOM doesn't look like an alien spaceship vs. be self-consistent within the DOM so that people can find their way around the spaceship\"","msgtype":"m.text"},"ts":1391556529000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I think it's a judgement call","msgtype":"m.text"},"ts":1391556554000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"but ultimately I think that I'm more agressive about abandoning existing conventions in the DOM","msgtype":"m.text"},"ts":1391556585000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"well, the problem is that \"popuplar JS libraries\" change every other year","msgtype":"m.text"},"ts":1391556622000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we can't target today's libraries or yesterday's or tomorrow's. We have to design an API for decades.","msgtype":"m.text"},"ts":1391556641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i like the spaceship analogy","msgtype":"m.text"},"ts":1391556671000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(also, i'd argue it's the libraries that are the aliens!)","msgtype":"m.text"},"ts":1391556687000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I've made the same judgement call in the past btw. FileReader was designed to be consistent with XHR. On direct request from authors","msgtype":"m.text"},"ts":1391556725000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: (same judgement call as you made I mean)","msgtype":"m.text"},"ts":1391556741000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"well, you have to be consistent with the right thing :-P","msgtype":"m.text"},"ts":1391556759000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"XHR is a disaster","msgtype":"m.text"},"ts":1391556761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: many people argue that the DOM is a disaster","msgtype":"m.text"},"ts":1391556778000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"including me, sure","msgtype":"m.text"},"ts":1391556786000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wouldn't be consistent with .getElementById() over introducing something like .find(), e.g.","msgtype":"m.text"},"ts":1391556812000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i probably would argue for .getElementsByClassName() rather than .searchClasses()","msgtype":"m.text"},"ts":1391556829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: patch looks good","msgtype":"m.text"},"ts":1391556837000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: like I said, most if this is judgement calls. Which is why I don't know how to convince you","msgtype":"m.text"},"ts":1391556890000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"nor i you","msgtype":"m.text"},"ts":1391556905000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's probably a case-by-case basis thing","msgtype":"m.text"},"ts":1391556981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1391556996000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: re bug 23988","msgtype":"m.text"},"ts":1391557003000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: you need some asynchronousness there","msgtype":"m.text"},"ts":1391557013000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"hm, good point","msgtype":"m.text"},"ts":1391557026000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the iterator should probably be a Stream<File>","msgtype":"m.text"},"ts":1391557027000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"\"authors\" will request everything, since there are a lot of authors, heh","msgtype":"m.text"},"ts":1391557029000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Stream<> ?","msgtype":"m.text"},"ts":1391557037000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"this author sure doesn't care much for \"consistent with xhr\" as a design goal","msgtype":"m.text"},"ts":1391557048000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I.e. a Stream where all the returned objects are Files","msgtype":"m.text"},"ts":1391557059000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie: though...","msgtype":"m.text"},"ts":1391557067000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"(i copy and paste code every time i use xhr since I can never remember it, heh)","msgtype":"m.text"},"ts":1391557078000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i figured Stream<File> was a Stream which returned Files, but what's a Stream?","msgtype":"m.text"},"ts":1391557084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: basically an asynchronous iterator","msgtype":"m.text"},"ts":1391557110000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"is that documented anywhere?","msgtype":"m.text"},"ts":1391557117000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i figured async stuff should use promises","msgtype":"m.text"},"ts":1391557142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's a spec. I don't know how finished it is yet. Nor if it handles objects yet","msgtype":"m.text"},"ts":1391557143000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"do you have a url to this spec? WebIDL doesn't mention it...","msgtype":"m.text"},"ts":1391557160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Domenic_ is editing. He can fill you in on its status","msgtype":"m.text"},"ts":1391557163000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"https://github.com/whatwg/streams. I would not call it finished (and definitely not polished.) But it does handle objects.","msgtype":"m.text"},"ts":1391557170000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aha, i was wondering when that spec would become something i had to read :-)","msgtype":"m.text"},"ts":1391557221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Here is a version that is more readable but omits the crunchy details because I haven't ported them over yet. Click \"this one\" at https://github.com/whatwg/streams/issues/62","msgtype":"m.text"},"ts":1391557268000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(the actual URL is too long for my IRC client)","msgtype":"m.text"},"ts":1391557275000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(the only thing I saw about streams was a bug that said \"this is replacing blob, so ...\", which is silly so I stopped paying attention)","msgtype":"m.text"},"ts":1391557279000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: it's not replacing Blob","msgtype":"m.text"},"ts":1391557305000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i know that :P","msgtype":"m.text"},"ts":1391557311000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"similar but separate use cases","msgtype":"m.text"},"ts":1391557314000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1391557322000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23975 i'm sure there's a context I'm not aware of, all I saw was \"stream will replace most roles of Blob\"","msgtype":"m.text"},"ts":1391557341000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"guess I should look at the actual pre-spec so I at least know what it's about","msgtype":"m.text"},"ts":1391557420000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i don't really understand either of these specs","msgtype":"m.text"},"ts":1391557575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_: so i have a method that returns an object that represents an asynchronously iterated list of File objects","msgtype":"m.text"},"ts":1391557600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_: var list = input.getFileIterator()","msgtype":"m.text"},"ts":1391557620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_: how do i use \"file\", if it's one of these thingies, to pass each File to a method process(file) ?","msgtype":"m.text"},"ts":1391557648000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1391557651000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do i use \"list\"...","msgtype":"m.text"},"ts":1391557655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"<- can't read the examples","msgtype":"m.text"},"ts":1391557717000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'd like something like   function iterate (list) { if (list.done) return; process(list.value); list.moveNext(iterate); }; list.moveNext(iterate);","msgtype":"m.text"},"ts":1391557795000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"promises are the least intuitive api i've seen on the platform in a long time","msgtype":"m.text"},"ts":1391557810000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"though ideally without hte duplicate list.moveNext()","msgtype":"m.text"},"ts":1391557812000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even better would be:","msgtype":"m.text"},"ts":1391557817000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"list.readAll(process);","msgtype":"m.text"},"ts":1391557830000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(where readAll's callback gives you controls to pause the iteration)","msgtype":"m.text"},"ts":1391557851000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(e.g. return false to stop)","msgtype":"m.text"},"ts":1391557858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: search for streamToConsole in the anolis-ified version.","msgtype":"m.text"},"ts":1391558069000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah that seemed pretty long, i was assuming there was some briefer alternative","msgtype":"m.text"},"ts":1391558105000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1391558114000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i am not sure streams are perfect for this use case","msgtype":"m.text"},"ts":1391558120000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1391558123000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the benefit would be that you could integrate with a larger ecosystem of streams, e.g. pipe to a transform stream that transforms files into decoded video data, then another transform that muxes them, then pipe them into a video tag.","msgtype":"m.text"},"ts":1391558163000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but for naive usage something like an iterator of promises would get you closer to your original code","msgtype":"m.text"},"ts":1391558178000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"an iterator of promises would give `function iterate(list) { var entry = list.next(); if (entry.done) { return; } entry.value.then(v => { process(v); iterate(list); }); }`","msgtype":"m.text"},"ts":1391558250000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"anyway got to run","msgtype":"m.text"},"ts":1391558266000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"shouldn't streams be simple enough that you could use them here?","msgtype":"m.text"},"ts":1391558267000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they are meant as a pretty low-level primitive","msgtype":"m.text"},"ts":1391558282000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for e.g. raw file or socket I/O","msgtype":"m.text"},"ts":1391558287000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"low-level doesn't mean they can't be simple...","msgtype":"m.text"},"ts":1391558311000,"senderName":"Hixie","senderId":"Hixie@irc"}
]