[
{"content":{"body":"annevk: We could tweak the UI to make that clearer.","msgtype":"m.text"},"ts":1512950414000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: LMK","msgtype":"m.text"},"ts":1512950418000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"smaug____: internal slots proposal ^","msgtype":"m.text"},"ts":1512950485000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SimonSapin: did you see http://ucsx.org/?","msgtype":"m.text"},"ts":1512966788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I did","msgtype":"m.text"},"ts":1512966807000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: I think it’s interesting as \"solving a math problem\". For character encodings though: I’m not convinced we’re gonna need to go beyond U+10FFFF or a very long time 2. if we do, we should pick one extension not 9","msgtype":"m.text"},"ts":1512966900000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"for* a very long time","msgtype":"m.text"},"ts":1512966910000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1512966928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I want to say \"ever\", but this kind of prediction tends to be wrong)","msgtype":"m.text"},"ts":1512966938000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Gonna need something bigger than a couple emoji each year","msgtype":"m.text"},"ts":1512966972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lol, UCS-∞","msgtype":"m.text"},"ts":1512967175000,"senderName":"othermaciej_","senderId":"othermaciej_@irc"},
{"content":{"body":"the most code-space-consuming thing I imaging we might want to do (regardless of how feasible it is now) is undoing Han unification, but even that is like 3× it most?","msgtype":"m.text"},"ts":1512968282000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"and Unicode 10.0 is at ~8%","msgtype":"m.text"},"ts":1512968294000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"also interesting that in 16-bit variants, UCSX encodes new values as sequences that are unpaired surrogates in UTF-16, so it’s unclear how that would work in WTF-16 systems like JS","msgtype":"m.text"},"ts":1512968620000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"JS would need a new string type basically","msgtype":"m.text"},"ts":1512969254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe the new string type could be one of the UTF-8 based variants, then","msgtype":"m.text"},"ts":1512969724000,"senderName":"othermaciej_","senderId":"othermaciej_@irc"},
{"content":{"body":"This is probably a question I should have the answer to, but where do I find how the object that implements an interface with the [Global] extended attribute is initialized?","msgtype":"m.text"},"ts":1513002917000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Does it simply follow the |steps| defined in the algorithm in https://heycam.github.io/webidl/#interface-object ?","msgtype":"m.text"},"ts":1513003030000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm trying to ES-ify the exposition of attributes, constants and operations (see: https://pr-preview.s3.amazonaws.com/tobie/webidl/pull/494.html#es-constants).","msgtype":"m.text"},"ts":1513003199000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"And I'm having trouble with how to expose those \"on the single object that implements the interface, when an interface is declared with the [Global] extended attribute.\"","msgtype":"m.text"},"ts":1513003261000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic, annevk: ^","msgtype":"m.text"},"ts":1513003271000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie, do you have any algorithm for creating platform objects?","msgtype":"m.text"},"ts":1513005920000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: yes, |steps| in the algorithm found in https://heycam.github.io/webidl/#interface-object is the closest I can think of.","msgtype":"m.text"},"ts":1513006069000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No, that's the interface objects","msgtype":"m.text"},"ts":1513006115000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think it makes most sense to have an algoritm to create instances, and then define the constants and whatever there, depending on its interface being marked with [Global]","msgtype":"m.text"},"ts":1513006165000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I;m talking about the value of the steps variable within that algorithm","msgtype":"m.text"},"ts":1513006361000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, you're right","msgtype":"m.text"},"ts":1513006415000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: maybe it should be it's own algorithm.","msgtype":"m.text"},"ts":1513006443000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1513006445000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"its","msgtype":"m.text"},"ts":1513006451000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or in https://heycam.github.io/webidl/#es-interface ... But you have to make sure that you don't create multiple JS objects for one IDL object...","msgtype":"m.text"},"ts":1513006507000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Not sure","msgtype":"m.text"},"ts":1513006511000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"FYI: https://blog.whatwg.org/working-mode-changes","msgtype":"m.text"},"ts":1513008558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"PogChamp","msgtype":"m.text"},"ts":1513008769000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Wow. There's a part of me amazed it's finally happened.","msgtype":"m.text"},"ts":1513010125000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk++","msgtype":"m.text"},"ts":1513010323000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"The real question is which of our fine individual contributors is going to be the first to sign the new agreement thingy. (And hopefully not break my code.)","msgtype":"m.text"},"ts":1513011758000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sounds like a challenge","msgtype":"m.text"},"ts":1513011811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if anyone even realizes that the blog has a comments feature anymore.","msgtype":"m.text"},"ts":1513013376000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: there was a spammy comment I trashed (since not sure if actually spam)","msgtype":"m.text"},"ts":1513013679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We have a winner! domfarolino in https://github.com/whatwg/participant-data/commit/c3e0d4f4d6d1bbddd406f5ddb8b29928a0ab46ab . Nothing seems to have broken!","msgtype":"m.text"},"ts":1513013846000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Can I do a Philip`?","msgtype":"m.text"},"ts":1513013862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(i.e., try obscure Unicode characters likely to break things)","msgtype":"m.text"},"ts":1513013895000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: hmm, since clearing crap from the database is a bit annoying, let me set up a staging server/data repo for that first. I need to do that anyway to test any changes.","msgtype":"m.text"},"ts":1513013932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was (mostly) joking.","msgtype":"m.text"},"ts":1513014084000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I tend not to do such things with legal forms","msgtype":"m.text"},"ts":1513014099000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's a good idea though.","msgtype":"m.text"},"ts":1513014129000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: \\o/","msgtype":"m.text"},"ts":1513016262000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: annevk: So if I understand this correctly, only the Work Stream editors (editors officially approved/appointed by SG) appear in the WorkStream.md file in whatwg/sg (and are responsible for all Living Standards in a Work Stream), and deputy editors and other contributors to Living Standards appear in the ACKs of said standards?","msgtype":"m.text"},"ts":1513016994000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: that's the idea. Workstream Editors are the ones \"on the hook\" for any process. Whereas there can be many editors or deputy editors or whatever for a given standard.","msgtype":"m.text"},"ts":1513017063000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Workstream Editor is mostly a service role, not necessarily \"senior\" or \"most involved\" or anything.","msgtype":"m.text"},"ts":1513017098000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"after today's announcement, does anything change with how html spec is being edited in both whatwg and w3c?  I've seen some tweet that maybe it has, but it seems like its up to w3c to make that decision","msgtype":"m.text"},"ts":1513017281000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: Excellent thanks!","msgtype":"m.text"},"ts":1513017308000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"wanderview: yeah, that'd be up to the W3C","msgtype":"m.text"},"ts":1513017354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: though I suspect browsers have less incentive to contribute there now","msgtype":"m.text"},"ts":1513017401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was just curious because of discussion at TPAC about moving workers back into w3c html and w3c html spec getting a new editor","msgtype":"m.text"},"ts":1513017431000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"kochi: happy to move to two days if that's better for the F2F","msgtype":"m.text"},"ts":1513019775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kochi: I suspect I'll be around for a few more days though to make it worth the length of the trip","msgtype":"m.text"},"ts":1513019794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I think those are the steps for now. The last paragraph of https://github.com/heycam/webidl/issues/467 seems relevant too.","msgtype":"m.text"},"ts":1513020905000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: basically I need a hook to define props directly on the instance for [Global] and unforgeable.","msgtype":"m.text"},"ts":1513021201000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I see. For [Unforgeable] I guess it's part of \"create an X object\" which is still undefined","msgtype":"m.text"},"ts":1513021232000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For globals maybe we need a separate algorithm for creating the global instances, yeah.","msgtype":"m.text"},"ts":1513021282000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems OK to leave those imprecise with a big TODO/warning in the spec that they are not in the imperative algorithm yet, just to chunk up the work.","msgtype":"m.text"},"ts":1513021300000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oooh, we're gonna define allocating objects? Yay","msgtype":"m.text"},"ts":1513021406000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's always been the plan","msgtype":"m.text"},"ts":1513021423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Now I remember why I wanted typed slots","msgtype":"m.text"},"ts":1513021444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So that when you allocate a Document, IDL could take of allocating the DOMImplementation object","msgtype":"m.text"},"ts":1513021465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"take care*","msgtype":"m.text"},"ts":1513021474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And also take care of the global for that and such","msgtype":"m.text"},"ts":1513021492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Basically for any kind of tear-off setup it's nice when IDL can take over stuff","msgtype":"m.text"},"ts":1513021525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But maybe we should just have something dedicated for that","msgtype":"m.text"},"ts":1513021542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As a matter of fact, slots \"allocation\" also needs to happen somewhere there","msgtype":"m.text"},"ts":1513021550000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah that's nice, that way you can't change slots later on","msgtype":"m.text"},"ts":1513021585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(you can still change their values of course)","msgtype":"m.text"},"ts":1513021601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(but not the object layout)","msgtype":"m.text"},"ts":1513021606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Y'all are gonna want some boilerplate changes for WHATWG stuff, yeah?","msgtype":"m.text"},"ts":1513021613000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: aye, though it need not be completed today and I think mostly depends on us doing some work","msgtype":"m.text"},"ts":1513021665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can at least get y'all's copyright in order, I guess.","msgtype":"m.text"},"ts":1513021680000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well, even that we manage manually today","msgtype":"m.text"},"ts":1513021705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: so would have to be paired with changes against all standards using Bikeshed","msgtype":"m.text"},"ts":1513021737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll leave the Review Drafts boilerplate until someone actually needs one.","msgtype":"m.text"},"ts":1513021738000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Anyway, I should let Domenic coordinate this since I'm about to land","msgtype":"m.text"},"ts":1513021779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: my plan is to give it another go at templating all our stuff now that you added metadata generation and ordering.","msgtype":"m.text"},"ts":1513023430000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1513023437000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Stress test the thing and file issues if anything seems wrong or insufficient, as always.","msgtype":"m.text"},"ts":1513023450000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Alright, added a TL;DR to the slots proposal: https://github.com/heycam/webidl/pull/495","msgtype":"m.text"},"ts":1513025467000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yay, our first post-launch PR for the policy documents (ok, not a very big one, but still glad to be working in the open on this kind of stuff)","msgtype":"m.text"},"ts":1513026104000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"https://github.com/whatwg/sg/pull/43","msgtype":"m.text"},"ts":1513026119000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hehehe","msgtype":"m.text"},"ts":1513032352000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]