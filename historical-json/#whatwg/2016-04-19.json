[
{"content":{"body":"has there been talk to put all the interface objects behind so global property","msgtype":"m.text"},"ts":1461075653000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like platformInterfaces.Animation or such","msgtype":"m.text"},"ts":1461075667000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"kind of namespacing so that commonly used names would be less likely to cause compat issues","msgtype":"m.text"},"ts":1461075707000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: JavaScript modules, basically","msgtype":"m.text"},"ts":1461075983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: until that time we should just pick unique enough names, imo","msgtype":"m.text"},"ts":1461075997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how do modules help with this","msgtype":"m.text"},"ts":1461076026000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: stuff is no longer in the global scope, you have to import it first to use it","msgtype":"m.text"},"ts":1461076054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so what all is in the scope of module by default?","msgtype":"m.text"},"ts":1461076111000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JS stuff, Math, Date and such?","msgtype":"m.text"},"ts":1461076129000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"or nothing?","msgtype":"m.text"},"ts":1461076134000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and how do modules play with event handlers","msgtype":"m.text"},"ts":1461076194000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I meant that you could have built-in modules that you import to add functionality","msgtype":"m.text"},"ts":1461076199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: they don't","msgtype":"m.text"},"ts":1461076205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I believe that when a module script executes in a browser it sees exactly the same stuff as a classic script would (though it executes in strict mode)","msgtype":"m.text"},"ts":1461076256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so module informs that one can import names Foo and Bar out from it to other js to use?","msgtype":"m.text"},"ts":1461076267000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: something like that, you'd have import FancyNewFeature from \"web/fancy\" or some such","msgtype":"m.text"},"ts":1461076308000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what guarantees Foo and Bar won't be used as interface names later?","msgtype":"m.text"},"ts":1461076311000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: those importing get to decide on the names, aiui","msgtype":"m.text"},"ts":1461076356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, I gotta go","msgtype":"m.text"},"ts":1461076377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would love your input on how to design event dispatch with shadow trees","msgtype":"m.text"},"ts":1461076396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"See https://github.com/w3c/webcomponents/issues/485 and https://github.com/w3c/webcomponents/issues/486","msgtype":"m.text"},"ts":1461076408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"still doesn't see how it helps. Whoever is deciding that Foo is imported as Bar, doesn't know whether Bar will be an interface object later","msgtype":"m.emote"},"ts":1461076434000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you can think of module imports as equivalent to `var Bar = platformInterfaces.Bar`","msgtype":"m.text"},"ts":1461076953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you can understand how that helps collisions then you should be able to understand how modules help.","msgtype":"m.text"},"ts":1461076964000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(They're nothing like C++ header files, if that's misleading you.)","msgtype":"m.text"},"ts":1461076994000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that doesn't help. What if there is later interface Bar added to the platform","msgtype":"m.text"},"ts":1461077084000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and some code then tries to do new Bar();","msgtype":"m.text"},"ts":1461077092000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: then the same \"problem\" (I don't think it's a real problem) will occur whether you do platformInterfaces.Bar or a module.","msgtype":"m.text"},"ts":1461077122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but I know forcing to call new platformInterfaces.Bar() would be horrible","msgtype":"m.text"},"ts":1461077133000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It doesn't break back-compat since local bindings always shadow global ones","msgtype":"m.text"},"ts":1461077151000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess we are anticipating some scenario where someone copies and pastes code expecting the new platform Bar() into a scope that has defined a variable named Bar?","msgtype":"m.text"},"ts":1461077174000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1461077177000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm talking about the case where you have some code doing var Bar = module.Bar;","msgtype":"m.text"},"ts":1461077197000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and then some other code doing new Bar(); (but that wants to use the platform object)","msgtype":"m.text"},"ts":1461077214000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so yes, to your last comment","msgtype":"m.text"},"ts":1461077234000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I started to wonder this again while thinking about Animation interface","msgtype":"m.text"},"ts":1461077268000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"per spec it is a normal interface with ctor","msgtype":"m.text"},"ts":1461077290000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but browsers aren't ready to expose it as such","msgtype":"m.text"},"ts":1461077312000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but with NoInterfaceObject","msgtype":"m.text"},"ts":1461077318000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"lunch","msgtype":"m.text"},"ts":1461077477000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Do we need a label for \"problem with standard\" that is more serious than \"clarification\"?","msgtype":"m.text"},"ts":1461085357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g., https://github.com/whatwg/html/issues/1073 is great implementer feedback, but if nobody picks it up it'll get lost","msgtype":"m.text"},"ts":1461085396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought github had something like \"critical\" in the default label set","msgtype":"m.text"},"ts":1461085467000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this is a critical spec bug, it isn't just a missing apostraphe, it's a sentence that ends with a preposition!","msgtype":"m.text"},"ts":1461085510000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: Do you know what the use-case is for \"find flattened slotables\"?","msgtype":"m.text"},"ts":1461088220000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: assignedNodes() and CSS","msgtype":"m.text"},"ts":1461088241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I *think* CSS's use of it only wants to \"find slotables\", with the \"sub in its normal children if nothing is assigned\" behavior.","msgtype":"m.text"},"ts":1461088256000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's not 100% clear to me what node slotables are supposed to inherit from, or what the intended model is for when you give a <slot> a non-contents display value.","msgtype":"m.text"},"ts":1461088290000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh right, CSS does need flattened slotables for ::slotted() still, nm.","msgtype":"m.text"},"ts":1461088316000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ah yes, for the flat tree <slot> elements need to be kept around","msgtype":"m.text"},"ts":1461088336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay cool.","msgtype":"m.text"},"ts":1461088344000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And so I *think* that means that slotables inherit from the first/highest slot they're assigned to, not their light-tree parent or any deeper slots they get flattened into.","msgtype":"m.text"},"ts":1461088379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: seems like we have a bit much ways of looking at this","msgtype":"m.text"},"ts":1461088382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I'm making CSS much more explicit about what it sees at each phase.","msgtype":"m.text"},"ts":1461088407000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At Hayato's urging, I'm sucking the whole flat tree concept into the CSS Scoping spec.","msgtype":"m.text"},"ts":1461088430000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, that makes sense","msgtype":"m.text"},"ts":1461088439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When you and I are done, there might not be anything left in the actual Shadow DOM spec.","msgtype":"m.text"},"ts":1461088441000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That was more or less the goal","msgtype":"m.text"},"ts":1461088449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1461088452000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Glad we both came to the same conclusion","msgtype":"m.text"},"ts":1461088465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, I can handle \"use its real children if nothing is assigned\" by myself.","msgtype":"m.text"},"ts":1461088491000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: btw, I like the use of \"flattened slotables\" better, good change.","msgtype":"m.text"},"ts":1461088933000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Please export your shadow dom definitions - \"find slotables\" is unexported right now","msgtype":"m.text"},"ts":1461091884000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, why does bikeshed not know USVString is a valid type...","msgtype":"m.text"},"ts":1461092184000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: Because it's not defined as such in a spec that Shepherd knows about. Where's it defined?","msgtype":"m.text"},"ts":1461092361000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: http://heycam.github.io/webidl/#idl-USVString probably? DOMString does seem to correctly link to WebIDL","msgtype":"m.text"},"ts":1461092384000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Ah, USVString was marked up right. Checking right now whether it's actually in the db...","msgtype":"m.text"},"ts":1461092453000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, heaidng to lunch now. bbs","msgtype":"m.text"},"ts":1461092459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: With bikeshed at c16b9046 (HEAD), `bikeshed update` returns \"FATAL ERROR: This version of the anchor-data API is no longer supported. Please update Bikeshed.\"","msgtype":"m.text"},"ts":1461092782000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: Yup, just got it myself. Pinging plinss.","msgtype":"m.text"},"ts":1461095672000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Try visiting csswg.org in your browser.","msgtype":"m.text"},"ts":1461095689000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"plinss had me debug and revealed that my DNS is broken, and Bikeshed is just giving a very bad error message.","msgtype":"m.text"},"ts":1461095735000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: ah yes, could you file a reminder? Sorry about that","msgtype":"m.text"},"ts":1461095898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I should really go through all <dfn in DOM","msgtype":"m.text"},"ts":1461095930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mek: Ok, checked on it - USVString *is* defined in Bikeshed (make sure you've run `bikeshed update` recently!), but I forgot to mark it as exported. >_<","msgtype":"m.text"},"ts":1461099025000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I see it in HTML rather than WebIDL.","msgtype":"m.text"},"ts":1461099079000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"can't run bikeshed update until whatever that DNS thing is is fixed...","msgtype":"m.text"},"ts":1461099094000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"jyasskin: ...huh, indeed","msgtype":"m.text"},"ts":1461099101000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mek: Fixed by now for me.","msgtype":"m.text"},"ts":1461099105000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The DNS thing is now fixed.","msgtype":"m.text"},"ts":1461099107000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"ah yeah, seems fixed now","msgtype":"m.text"},"ts":1461099112000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"(It was a linode thing)","msgtype":"m.text"},"ts":1461099114000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It still complains \"LINK ERROR: No 'idl' refs found for 'USVString'.\" though","msgtype":"m.text"},"ts":1461099136000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Yeah, if it's coming from HTML, it'll be read as a dfn-type. :/","msgtype":"m.text"},"ts":1461099160000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I marked it up in WebIDL, so I need to debug and see what's up with it.","msgtype":"m.text"},"ts":1461099174000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and the definition in HTML is just the reference to the WebIDL definition anyway, so not a very useful reference","msgtype":"m.text"},"ts":1461099216000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Uggghhhhh, I see the problem.","msgtype":"m.text"},"ts":1461099372000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Stupid unrunnable XML pipeline for WebIDL.","msgtype":"m.text"},"ts":1461099384000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought HTML data-noexport'ed everything, but also it didn't need to since dfns are not exported","msgtype":"m.text"},"ts":1461099386000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Right, that's not a problem, dont' worry.","msgtype":"m.text"},"ts":1461099396000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok ^_^","msgtype":"m.text"},"ts":1461099426000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Problem is that the XSLT for WebIDL inserts section numbers into the heading text, and doesn't take Bikeshed into account, so the handful of \"heading dfns\" I set up have linking text like \"3.10.7. USVString\"","msgtype":"m.text"},"ts":1461099460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'll fix and send heycam a PR.","msgtype":"m.text"},"ts":1461099471000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1461099620000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"hmm, browsers handle <iframe scrolling=no> quite differently","msgtype":"m.text"},"ts":1461102294000,"senderName":"smaug____","senderId":"smaug____@irc"}
]