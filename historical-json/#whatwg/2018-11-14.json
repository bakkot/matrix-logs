[
{"content":{"body":"anybody have a clue how I can get a URL for whatever the latest version of https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.html is?","msgtype":"m.text"},"ts":1542182134000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., if I just use https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses it redirects to https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.txt","msgtype":"m.text"},"ts":1542182158000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'd use https://tools.ietf.org/html/draft-yasskin-http-origin-signed-responses, but yeah, it'll redirect","msgtype":"m.text"},"ts":1542182208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks yeah but that redirects to the faux-HTML version","msgtype":"m.text"},"ts":1542182299000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is better than the plain text version at least","msgtype":"m.text"},"ts":1542182321000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think I’ll just use https://wicg.github.io/webpackage/draft-yasskin-http-origin-signed-responses.html and ignore all the IETF versions","msgtype":"m.text"},"ts":1542182369000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think the IETF one is likely better as it'll have forward links if the draft gets adopted by an IETF WG and such","msgtype":"m.text"},"ts":1542182412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: unless this moves out of the IETF","msgtype":"m.text"},"ts":1542182421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.html doesn’t have any forward links","msgtype":"m.text"},"ts":1542182567000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I guess you mean it’s best to cite https://tools.ietf.org/html/draft-yasskin-http-origin-signed-responses","msgtype":"m.text"},"ts":1542182584000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: right","msgtype":"m.text"},"ts":1542182619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, yeah will do that","msgtype":"m.text"},"ts":1542182635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: I guess I'm showing my ignorance here, but how would Swift encode U+0000 if strings are terminated by 0x00?","msgtype":"m.text"},"ts":1542192593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: https://forums.swift.org/t/string-s-abi-and-utf-8/17676 doesn't talk about this","msgtype":"m.text"},"ts":1542192612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, I don't know if this is the case, but they may store the length as well, so you could have { length: 3, data: \"a\\0b\\0\" }","msgtype":"m.text"},"ts":1542193293000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: but then it's not a normal C-string is it?","msgtype":"m.text"},"ts":1542193587000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Did they say that it was?","msgtype":"m.text"},"ts":1542193623000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: \"By maintaining nul-termination in our storage, interoperability with C is basically free: we just use our pointer.\"","msgtype":"m.text"},"ts":1542193647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't know that disagrees with my hypothetical implementation, but I know nothing about Swift, so I'm going to stop here :)","msgtype":"m.text"},"ts":1542193708000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mkwst: https://github.com/whatwg/html/issues/4175 is what I was contemplating yesterday, more concretely","msgtype":"m.text"},"ts":1542205440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the way XPCOM strings do it is that if you have U+0000 in the string and try to use C interop, C sees the string only up to the U+0000.","msgtype":"m.text"},"ts":1542214789000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: aka security fun","msgtype":"m.text"},"ts":1542215363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Domenic is there a plan/issue to un-monkey-patch the Feature Policy spec? https://wicg.github.io/feature-policy/#integration-with-html If there’s not already an issue, should I open one?","msgtype":"m.text"},"ts":1542237345000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh I now see https://wicg.github.io/feature-policy/#issue-3778ddf4","msgtype":"m.text"},"ts":1542237437000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":">  Monkey-patching! As soon as we know that this is the direction we wish to pursue, upstream all of this.","msgtype":"m.text"},"ts":1542237444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... but I don’t find any corresponding github issue","msgtype":"m.text"},"ts":1542237466000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: worth opening something. I think a lot of it was already integrated in https://github.com/whatwg/html/pull/3287 , so maybe that section just needs to go away?","msgtype":"m.text"},"ts":1542237564000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: ping on https://github.com/whatwg/html/pull/4105","msgtype":"m.text"},"ts":1542238726000,"senderName":"Domenic","senderId":"Domenic@irc"}
]