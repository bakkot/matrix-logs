[
{"content":{"body":"I want to help, not sure I have the skills to","msgtype":"m.text"},"ts":1534833322000,"senderName":"cluelessperson","senderId":"cluelessperson@irc"},
{"content":{"body":"cluelessperson: welcome, did you look at good first issues on GitHub?","msgtype":"m.text"},"ts":1534835157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: will o","msgtype":"m.text"},"ts":1534837050000,"senderName":"cluelessperson","senderId":"cluelessperson@irc"},
{"content":{"body":"do","msgtype":"m.text"},"ts":1534837053000,"senderName":"cluelessperson","senderId":"cluelessperson@irc"},
{"content":{"body":"annevk: regarding https://github.com/whatwg/fetch/pull/773#discussion_r209604056 what's the best way to tackle the \"code smell\" part? should I create a separate definition of \"same origin request\" and make sure that all places use that instead of defining the algorithm on their own?","msgtype":"m.text"},"ts":1534840871000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"if so, should that be part of that PR or a separate one?","msgtype":"m.text"},"ts":1534840881000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: it depends on what kind of check we really want there","msgtype":"m.text"},"ts":1534840930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: and whether a cross-origin request inbetween \"poisons\" it somehow","msgtype":"m.text"},"ts":1534840941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't *think* it does","msgtype":"m.text"},"ts":1534840968000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: that does allow for some attacks","msgtype":"m.text"},"ts":1534840990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we want to control info leakage on requests and make sure that there isn't one unless the site opts-in to one","msgtype":"m.text"},"ts":1534840997000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: in any event, since this is processing on the response it'd make more sense for it to rely on the existing response filtering setup","msgtype":"m.text"},"ts":1534841018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what do you mean \"processing on the response\"? We're talking about https://whatpr.org/fetch/773.html#concept-fetch step 1.8, right?","msgtype":"m.text"},"ts":1534841184000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: oh hmm, so another problem with that is that we don't run those steps for redirects","msgtype":"m.text"},"ts":1534841442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: these steps are only run once for the entire fetch operation","msgtype":"m.text"},"ts":1534841495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so redirects won't get CH? That could be a problem...","msgtype":"m.text"},"ts":1534841510000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: no, they retain the initial CH, even cross-origin (though depends a bit on safelists and such)","msgtype":"m.text"},"ts":1534841549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1534841569000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"And yeah, that'll be a problem for no-cors cross-origin at least, esp with service workers and the new restrictions on Headers","msgtype":"m.text"},"ts":1534841582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: so if there's origin restrictions I guess we need to redo the whole setup of this","msgtype":"m.text"},"ts":1534841611000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that *might* be fine from a privacy perspective (maybe a redirect would be considered an opt-in), but need to verify that it is","msgtype":"m.text"},"ts":1534841614000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Is there somewhere else where that logic can hang from that can handle redirects?","msgtype":"m.text"},"ts":1534841656000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I don't think so, given open redirectors and such","msgtype":"m.text"},"ts":1534841656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: main fetch","msgtype":"m.text"},"ts":1534841665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, I'll take a look","msgtype":"m.text"},"ts":1534841691000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: though maybe it needs to be even deeper in the stack, near HTTP-network fetch, if it depends on the origin whether or not we'll include the headers","msgtype":"m.text"},"ts":1534841702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm surprised by this github/fetch issue about making setting URL's query easier having lots of interaction and then nobody escalating that to whatwg/fetch over the past two years to suggest that maybe something should change...","msgtype":"m.text"},"ts":1534842143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean by \"depends on the origin\"? It depends on the origin's opt-in","msgtype":"m.text"},"ts":1534842460000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"should the request client-hints set cloning also move somewhere further down?","msgtype":"m.text"},"ts":1534842481000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: for the second question, I don't think so, the global won't change","msgtype":"m.text"},"ts":1534842528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1534842556000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: hmm, with navigation redirects they might, I suppose;","msgtype":"m.text"},"ts":1534842604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, no","msgtype":"m.text"},"ts":1534842627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looking at main fetch, would an extra step on step 2 work for this?","msgtype":"m.text"},"ts":1534842748000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah, I guess that's where it should go if it needs to affect the request","msgtype":"m.text"},"ts":1534842851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and each subsequent request in case of redirects)","msgtype":"m.text"},"ts":1534842868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and regarding the same origin check, should I keep the current language and then clean up to have a single definition somewhere?","msgtype":"m.text"},"ts":1534842931000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"or clean up before this lands?","msgtype":"m.text"},"ts":1534842944000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: so wait, I'm not sure if main fetch step 2 is the place","msgtype":"m.text"},"ts":1534843016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1534843024000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: it really depends on the behavior you want in the face of redirects","msgtype":"m.text"},"ts":1534843031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: and you haven't clarified that yet","msgtype":"m.text"},"ts":1534843036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: it sounds like it vary on a per-origin basis what headers end up being included?","msgtype":"m.text"},"ts":1534843059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can vary*","msgtype":"m.text"},"ts":1534843064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, it can","msgtype":"m.text"},"ts":1534843072000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"okay, so then headers need to be added at the last possible moment","msgtype":"m.text"},"ts":1534843084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because the request, including headers, gets cloned","msgtype":"m.text"},"ts":1534843101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"however, that'll also affect what the service worker sees","msgtype":"m.text"},"ts":1534843124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1534843145000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"so ideally, I want cross-origin redirects to not get CH headers","msgtype":"m.text"},"ts":1534843188000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"but I do want SW to see the headers (and potentially change behavior based on them)","msgtype":"m.text"},"ts":1534843207000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"that combination means you'd have to remove headers, which is something we managed to avoid having to do thus far","msgtype":"m.text"},"ts":1534843232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though we will be adding it for POST -> GET redirects","msgtype":"m.text"},"ts":1534843246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it also makes it hard to distinguish between user-set and UA-set headers, but I think CH already had that problem","msgtype":"m.text"},"ts":1534843286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I'm not sure the current text accounts for it much)","msgtype":"m.text"},"ts":1534843309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does not","msgtype":"m.text"},"ts":1534843322000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"e.g., one problem here is that if you decide to remove CH headers, you'll also remove user-set CH headers","msgtype":"m.text"},"ts":1534843333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"users might expect those headers to survive their cross-origin redirect though, assuming appropriate CORS opt ins along the way","msgtype":"m.text"},"ts":1534843357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but this would make that impossible","msgtype":"m.text"},"ts":1534843366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah...","msgtype":"m.text"},"ts":1534843367000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"so you gotta figure that out","msgtype":"m.text"},"ts":1534843376000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is there a subset we can land right now and start a separate discussion for the redirection/SW handling?","msgtype":"m.text"},"ts":1534843454000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I prefer not to block the pending PRs on figuring this out","msgtype":"m.text"},"ts":1534843493000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"and then we can discuss this and its privacy/ergonomics/use-case implications in isolation and not part of a huge PR","msgtype":"m.text"},"ts":1534843526000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"We could replace all the Client Hints bit with issue markers I suppose?","msgtype":"m.text"},"ts":1534843605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bits*","msgtype":"m.text"},"ts":1534843608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's pretty important for implementers to know the answers to all these questions, esp for security and such","msgtype":"m.text"},"ts":1534843653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I'm not suggesting we'll postpone answering those questions, just that it won't block the pending PRs","msgtype":"m.text"},"ts":1534843706000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: the currently specified situation is that CH are sent on cross-origin requests","msgtype":"m.text"},"ts":1534843745000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"that's also the currently shipped state in Chromium","msgtype":"m.text"},"ts":1534843757000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"although there's intent to fix it, pending on feature-policy opt in","msgtype":"m.text"},"ts":1534843776000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"so, we could drop that check from the current PR, and start an issue summarizing the trade-offs we discussed here","msgtype":"m.text"},"ts":1534843811000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Yeah, I think if we can't figure out a complete solution it'd be best to take it out for now or add issue markers","msgtype":"m.text"},"ts":1534843816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, I'll do that","msgtype":"m.text"},"ts":1534843850000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: uploaded a new patch to https://github.com/whatwg/fetch/pull/773. Can you take a look?","msgtype":"m.text"},"ts":1534845769000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1534846349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks! switched to XXX","msgtype":"m.text"},"ts":1534847192000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"missed the comment about comment message and CORS safelisted headers","msgtype":"m.text"},"ts":1534847281000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: the headers are added to the CORS safelisted list at https://github.com/whatwg/fetch/pull/725","msgtype":"m.text"},"ts":1534847339000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: squashed and added a commit message","msgtype":"m.text"},"ts":1534848318000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"annevk: Regarding https://github.com/whatwg/fetch/pull/773#discussion_r211569017 what other integration is required beyond what we discussed above? Or should I just link to the same issue?","msgtype":"m.text"},"ts":1534854774000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah, I guess the same and maybe the more general one?","msgtype":"m.text"},"ts":1534854820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: just to make it clear client hints is half-finished","msgtype":"m.text"},"ts":1534854834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: or is it client-hints now?","msgtype":"m.text"},"ts":1534854840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"half finished in what way?","msgtype":"m.text"},"ts":1534854856000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: in that there's a lot of open issues?","msgtype":"m.text"},"ts":1534854945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can link to https://github.com/whatwg/fetch/issues/726","msgtype":"m.text"},"ts":1534855044000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"but believe most of what's covered there should be fixed by this PR and the HTML PR that comes with it","msgtype":"m.text"},"ts":1534855069000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"other than the feature policy bits","msgtype":"m.text"},"ts":1534855180000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"And that step 6-7 of fetch is not the place to fix this?","msgtype":"m.text"},"ts":1534855201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I also didn't see the secure context restrictions","msgtype":"m.text"},"ts":1534855214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: basically, what I'm saying is that non-Chromium cannot implement this from looking at Fetch","msgtype":"m.text"},"ts":1534855268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: they'll have to reverse engineer Chromium if they want to ship something today","msgtype":"m.text"},"ts":1534855280000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: that much should be clear if you read Fetch","msgtype":"m.text"},"ts":1534855292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, what should be clear is that Fetch is incomplete","msgtype":"m.text"},"ts":1534855306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you have feedback regarding further things that are missing, I'm happy to take a look","msgtype":"m.text"},"ts":1534855354000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: apart from the above, I also worry about non-Google commitments, tests, and impact on no-cors","msgtype":"m.text"},"ts":1534855605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: and landing incomplete PRs with no guarantees on when the full model will be defined also makes me a bit uncomfortable","msgtype":"m.text"},"ts":1534855667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"at least in software projects where this is done it's usually the maintainer that ends up taking the hit","msgtype":"m.text"},"ts":1534855699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Have you seen https://github.com/whatwg/html/issues/3885?","msgtype":"m.text"},"ts":1534855747000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: I guess I should read it again","msgtype":"m.text"},"ts":1534855771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah the two options are basically not change the URL, or do what replaceState() does","msgtype":"m.text"},"ts":1534855803000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I’m happy to implement the proposed spec in Chrome btw","msgtype":"m.text"},"ts":1534855816000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk: I think tests should be in reasonable shape, given Tarun's latest work (% the redirection case, where we need to better define the behavior first)","msgtype":"m.text"},"ts":1534855914000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"what's the impact on no-cors?","msgtype":"m.text"},"ts":1534855944000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: I'm not sure, but if an origin opted in and then someone makes a no-cors request to that origin, what would/should happen?","msgtype":"m.text"},"ts":1534855981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: adding operator overloading to JavaScript to avoid a convenience thingy in fetch() strikes me as overkill, but who knows","msgtype":"m.text"},"ts":1534856032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: fetch() also already exposes a bunch of convenience features (e.g., types of bodies it accepts)","msgtype":"m.text"},"ts":1534856059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: ah okay, I guess this is good then","msgtype":"m.text"},"ts":1534856080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TimothyGu: updated review comment","msgtype":"m.text"},"ts":1534856121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1534856225000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk: an origin cannot opt-in to receive the hints when it is a 3rd party. The origin delivering the document can opt-in for future navigation requests","msgtype":"m.text"},"ts":1534856345000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"than the document can opt-in for its subresources","msgtype":"m.text"},"ts":1534856387000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"currently it's all of them, but we need to fix it to be for same-origin subresources","msgtype":"m.text"},"ts":1534856406000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"with cross-origin subresources requiring a specific opt-in for their origin (so Feature Policy)","msgtype":"m.text"},"ts":1534856438000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: and secure context?","msgtype":"m.text"},"ts":1534856452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, of course","msgtype":"m.text"},"ts":1534856458000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: yeah so even with feature policy I wouldn't be comfortable adding these headers to no-cors requests and cors without preflight is also somewhat problematic in hindsight","msgtype":"m.text"},"ts":1534856517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: since it's the attacker that determines the feature policy","msgtype":"m.text"},"ts":1534856535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is there a way to make them safelisted if UA added, but not user added?","msgtype":"m.text"},"ts":1534856740000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'd be fine with that, assuming it survives SW fetch events","msgtype":"m.text"},"ts":1534856767000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: that'd require new infrastructure, including in implementations","msgtype":"m.text"},"ts":1534856789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yoav: I doubt anyone wants to go for that though, as you'd need a side table for all your header lists, and make sure it stays accurate, etc.","msgtype":"m.text"},"ts":1534856818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why would you need operator overloading? Just string conversion","msgtype":"m.text"},"ts":1534856927000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: types of bodies isn't a fundamentally new concept, just convenient typing on an existing concept (\"body\")","msgtype":"m.text"},"ts":1534856964000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: with string conversion it's rather fragile if the input URL already contained a query","msgtype":"m.text"},"ts":1534857138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I doubt that's often what people are dealing with, but if it is, there's URL-based conveniences that would make more sense then, e.g. url.withSearchParams(URLSearchParamsInit) -> URL","msgtype":"m.text"},"ts":1534857195000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That ends up being a lot more verbose. And apparently this kind of API is also a common offering among libraries so from that perspective it seems worth elevating","msgtype":"m.text"},"ts":1534862467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(It ends up being verbose if the url variable in your example is a relative URL string.)","msgtype":"m.text"},"ts":1534862518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Adding new query string parameters is something I did often at my former job.","msgtype":"m.text"},"ts":1534868563000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"E.g. adding pagination parameters to an URL with search filters.","msgtype":"m.text"},"ts":1534868618000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, me too. (Or adding query params to a URL that already has a hash on it.) Relying on string-concat to work here is no good.","msgtype":"m.text"},"ts":1534868853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Perhaps URL.withSearch(url, searchParamsInit) that uses the current global object to find a base URL","msgtype":"m.text"},"ts":1534869839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As Krinkle argued on Twitter that'd allow reuse across APIs rather than have something specific for fetch()","msgtype":"m.text"},"ts":1534869894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(hi)","msgtype":"m.text"},"ts":1534869920000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"It's still hard to hit the sweet spot with that kind of API though as it gets kinda verbose","msgtype":"m.text"},"ts":1534869935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it'd be fine for the method to return URL, but I guess people would prefer it take string, which means it'd have to be static.  That way you'd have fetch(URL.withParams(url, {..})) rather than var x = new URL(url); fetch(x.withParams({..}));.","msgtype":"m.text"},"ts":1534870054000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"we'll want to be careful with regards to whether it means merge or replace for search","msgtype":"m.text"},"ts":1534870091000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah, alternate constructor sounds fine to me.","msgtype":"m.text"},"ts":1534870104000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: https://github.com/whatwg/participant-data/pull/7 could use a quick look too","msgtype":"m.text"},"ts":1534871252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: two takeaways there, perhaps we should validate it's an actual user name and perhaps communicate more clearly what string we want to have?","msgtype":"m.text"},"ts":1534871293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, agreed...","msgtype":"m.text"},"ts":1534871302000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I can file an issue against p.w.o and land this?","msgtype":"m.text"},"ts":1534871337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: would like to unblock the new contributor","msgtype":"m.text"},"ts":1534871353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I'll file the issues, I have some thoughts.  Please do land though.","msgtype":"m.text"},"ts":1534871360000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah great, thanks","msgtype":"m.text"},"ts":1534871371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess https://github.com/whatwg/participate.whatwg.org/issues/8 is already open","msgtype":"m.text"},"ts":1534871378000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sent https://github.com/whatwg/participate.whatwg.org/pull/32 as well","msgtype":"m.text"},"ts":1534871917000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: That link-defaults issue we just ran into this morning is fixed now. Your manual fix isn't wrong tho, so no need to remove it. It'll just work properly in the future.","msgtype":"m.text"},"ts":1534880629000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what about throw()","msgtype":"m.text"},"ts":1534882847000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: do you need to implement throw?","msgtype":"m.text"},"ts":1534882887000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"no idea","msgtype":"m.text"},"ts":1534882891000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"thats why i'm asking lol","msgtype":"m.text"},"ts":1534882894000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I guess you should","msgtype":"m.text"},"ts":1534882903000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1534882918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure what it gives us","msgtype":"m.text"},"ts":1534882921000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think if you implement it it will just do the same as if it doensn't exist","msgtype":"m.text"},"ts":1534882951000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"return() is worthwhile since it releases the lock","msgtype":"m.text"},"ts":1534882956000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh wait","msgtype":"m.text"},"ts":1534882958000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe throw() should too?","msgtype":"m.text"},"ts":1534882961000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1534882989000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Hmm throw() is only used by yield*","msgtype":"m.text"},"ts":1534882993000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm unsure when throw() would be called in a streams scenario","msgtype":"m.text"},"ts":1534883012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Someone should write some code that would trigger it and we could turn that into a test if it turns out to be useful","msgtype":"m.text"},"ts":1534883030000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so it seems like yield* in async generator will fallback to return() if throw() doesn't exist","msgtype":"m.text"},"ts":1534883276000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Heh right","msgtype":"m.text"},"ts":1534883363000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"> NOTE: If iterator does not have a throw method, this throw is going to terminate the yield* loop. But first we need to give iterator a chance to clean up.","msgtype":"m.text"},"ts":1534883370000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"throw could be used to revive an async iterator after it has thrown an error","msgtype":"m.text"},"ts":1534883394000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"but why","msgtype":"m.text"},"ts":1534883413000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but I assume once stream errors, it errors forever?","msgtype":"m.text"},"ts":1534883417000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"so doesn't seem like `throw()` is necessary after all","msgtype":"m.text"},"ts":1534883439000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Domenic: weren't you the champion of the proposal","msgtype":"m.text"},"ts":1534883447000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1534883459000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"A lot of the esoteric protocol stuff I just did by analogy","msgtype":"m.text"},"ts":1534883510000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I feel like we should have a \"language feature equality day\"","msgtype":"m.text"},"ts":1534883635000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"all language features are created equal and deserves equal usage, rights, and protection","msgtype":"m.text"},"ts":1534883664000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Nooooo","msgtype":"m.text"},"ts":1534883758000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1534883762000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"e.g., just because the mismatched end tag is historically discriminated against doesn't mean it should continue being such – and indeed now the HTML parser treats it as a first-class citizen","msgtype":"m.text"},"ts":1534883768000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"with, @@species, stop the madness.","msgtype":"m.text"},"ts":1534883786000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is this validish? https://gc.gy/2597346.png","msgtype":"m.text"},"ts":1534892377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"not quite sure how to make %Promise_reject% link either","msgtype":"m.text"},"ts":1534892390000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: so you should just do what the rest of the doc does and use higher-level stuff like \"reject the promise\" or \"resolve the promise\"","msgtype":"m.text"},"ts":1534892512000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But, note that next() must return a promise for { value, done }, not a { value: promise, done }","msgtype":"m.text"},"ts":1534892528000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"actually in an error condition","msgtype":"m.text"},"ts":1534892555000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"wouldn't it just be a rejected promise with the error","msgtype":"m.text"},"ts":1534892564000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"So it should just be \"If _read_ is an abrupt completion, return a promise rejected with _read_.[[Value]]\"","msgtype":"m.text"},"ts":1534892592000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ye","msgtype":"m.text"},"ts":1534892595000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"yeah exactly","msgtype":"m.text"},"ts":1534892595000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think we already have a helper for this?","msgtype":"m.text"},"ts":1534892613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://streams.spec.whatwg.org/#promise-call","msgtype":"m.text"},"ts":1534892620000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No not quite","msgtype":"m.text"},"ts":1534892632000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"a promise rejected with x\" is used all over the place","msgtype":"m.text"},"ts":1534892651000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1534892655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ReturnRejectedIfAbrupt would be a nice thing to have","msgtype":"m.text"},"ts":1534892680000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but oh well","msgtype":"m.text"},"ts":1534892687000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Eh, a bit too macro-ey","msgtype":"m.text"},"ts":1534892690000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh and the object literals thing is okay?","msgtype":"m.text"},"ts":1534892714000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: I’m wondering, when you thumbs-up a comment like https://github.com/w3c/svgwg/issues/529#issuecomment-414762241 is it because you haven’t taken time to consider that a comment like that might end up really bumming somebody else out, or is it instead because you just don’t care","msgtype":"m.text"},"ts":1534892719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Oh, no, it is not. Use https://streams.spec.whatwg.org/#readable-stream-create-read-result","msgtype":"m.text"},"ts":1534892742000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i was afraid of that haha","msgtype":"m.text"},"ts":1534892789000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"MikeSmith: I've been vocal in the past with my annoyance for putting the CSS validator in the way of publishing, for exactly the reasons Chris cites.","msgtype":"m.text"},"ts":1534892837000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"devsnek: also nit: put a colon after \"If …, then\"","msgtype":"m.text"},"ts":1534892940000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"i need syntax highlighting for bs","msgtype":"m.text"},"ts":1534892964000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":":set syntax=html","msgtype":"m.text"},"ts":1534892973000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"that won't highlight the algorithms","msgtype":"m.text"},"ts":1534892989000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"even if some of it is prose","msgtype":"m.text"},"ts":1534892996000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"TabAtkins: are there syntax highlighters for bikeshed?","msgtype":"m.text"},"ts":1534893025000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TabAtkins: my question wasn’t as much about the substance of Chris’s comment as it was about whether in general you actually take time think about how somebody else might feel when you thumbs-up a comment like that, or make a comment like that yourself","msgtype":"m.text"},"ts":1534893088000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because you seem like a better person that somebody who would do that wilfully","msgtype":"m.text"},"ts":1534893110000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I can tell you've taken it far more personally than I expected, and I'm very sorry that I've made you feel like this; that absolutely wasn't my intent and I would have done differently if I'd known. Apologies.","msgtype":"m.text"},"ts":1534893272000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TimothyGu: In the repo there's a tmLanguage file","msgtype":"m.text"},"ts":1534893333000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It highlights a couple useful bits; PRs accepted.","msgtype":"m.text"},"ts":1534893349000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah, no .vim I assume?","msgtype":"m.text"},"ts":1534893357000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"PRs. Accepted.","msgtype":"m.text"},"ts":1534893368000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1534893380000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"annevk: tomorrow can you take a look at my counter-review of https://github.com/whatwg/html/pull/3677 and let us know which parts you think are important despite my protestations? Also I know there are some things I didn't disagree with that fserb should still fix. Maybe just thumbs up/down would be fine.","msgtype":"m.text"},"ts":1534893950000,"senderName":"Domenic","senderId":"Domenic@irc"}
]