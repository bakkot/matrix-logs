[
{"content":{"body":"so I am planning to spend some time next week doing an experimental implementation of a language-detection feature for the HTML checker","msgtype":"m.text"},"ts":1466741847000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I am wondering what methodology to use for getting the best sample of text from a document to check in the normal case","msgtype":"m.text"},"ts":1466741914000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"general case","msgtype":"m.text"},"ts":1466741953000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems clear I want to begin but only looking at some text from some point in the body","msgtype":"m.text"},"ts":1466741963000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ignoring the head","msgtype":"m.text"},"ts":1466741999000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and ignoring any text nodes from <script>","msgtype":"m.text"},"ts":1466742021000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but if I do the naive thing of just looking at the first couple thousand characters of a given document, it many cases that is just going to amount to looking at at Table of Contents or some such","msgtype":"m.text"},"ts":1466742082000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which will actually probably work fine in practice as far as identifying the language of the document, but then my implementation amounts to being a more specific language-identification-by-only-looking-at-front-matter tool","msgtype":"m.text"},"ts":1466742183000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I am wondering if there are better heuristics for detecting when I have hit the actual main text flow of a document","msgtype":"m.text"},"ts":1466742261000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"btw this needs to not introduce a requirement significantly increasing the amount of memory the checker uses, so I canâ€™t do the really simple thing of just sucking the whole document and running the language detector on the whole doc","msgtype":"m.text"},"ts":1466742382000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"one simple idea is just to not start collecting any characters to check until I hit the first <p>","msgtype":"m.text"},"ts":1466742514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"another is to not do it until I hit the first h2 or h3 or h4","msgtype":"m.text"},"ts":1466742713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wasup with Array.prototype.values?","msgtype":"m.text"},"ts":1466762967000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"String.prototype.contains also had issues right?","msgtype":"m.text"},"ts":1466762982000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: yeah, so it was renamed to `includes`","msgtype":"m.text"},"ts":1466763039000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: reason being?","msgtype":"m.text"},"ts":1466763054000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"not a security thinge right?","msgtype":"m.text"},"ts":1466763064000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: not web-compatible https://esdiscuss.org/topic/having-a-non-enumerable-array-prototype-contains-may-not-be-web-compatible","msgtype":"m.text"},"ts":1466763066000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"it broke some other code AFAIR","msgtype":"m.text"},"ts":1466763071000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"MooTools! Thanks I remember reading that mathiasbynens","msgtype":"m.text"},"ts":1466763108000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"that was fast!","msgtype":"m.text"},"ts":1466763111000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"and with values, what's the issue?","msgtype":"m.text"},"ts":1466763120000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"we don't even need .values(), for-in does a good job","msgtype":"m.text"},"ts":1466763169000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"or even Symbol.iterator","msgtype":"m.text"},"ts":1466763180000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: see https://bugs.chromium.org/p/v8/issues/detail?id=4247#c12 which points to https://bugs.chromium.org/p/chromium/issues/detail?id=615873","msgtype":"m.text"},"ts":1466763188000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: Array.values would have been better?","msgtype":"m.text"},"ts":1466763369000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: who knows","msgtype":"m.text"},"ts":1466764454000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":":{","msgtype":"m.text"},"ts":1466764497000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Hello","msgtype":"m.text"},"ts":1466771345000,"senderName":"Greg_","senderId":"Greg_@irc"},
{"content":{"body":"annevk: is there a list of idl attributes that are not element attributes anywhere?","msgtype":"m.text"},"ts":1466784179000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"\"all of them\"? :)(","msgtype":"m.text"},"ts":1466784504000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"AutomatedTester: assuming you mean \"IDL attributes that don't reflect element attributes\", there's not yet, but you could get reasonably close by excluding those with [CEReactions]","msgtype":"m.text"},"ts":1466784569000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That will exclude some that should be included, since [CEReactions] really means \"can modify the DOM in certain ways\". But everything that is a reflected attribute will have [CEReactions].","msgtype":"m.text"},"ts":1466784620000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ahh cool","msgtype":"m.text"},"ts":1466784683000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"Domenic: I can see those in the html spec","msgtype":"m.text"},"ts":1466784713000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"I will make a list","msgtype":"m.text"},"ts":1466784716000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"One day we will spec [Reflect]","msgtype":"m.text"},"ts":1466784733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wrt to WebComponents, how would Reflect work","msgtype":"m.text"},"ts":1466784756000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: what do you mean exactly","msgtype":"m.text"},"ts":1466784764000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"[Reflect] would just be a way of expressing in IDL the spec's current \"The target IDL attribute must reflect the content attribute of the same name.\"","msgtype":"m.text"},"ts":1466784783000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: normal reflective attributes do not need to be reflective in web components iirc","msgtype":"m.text"},"ts":1466784786000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"It's fairly unrelated to web components","msgtype":"m.text"},"ts":1466784789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Web components can create whatever API they want","msgtype":"m.text"},"ts":1466784799000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Good ones will, IMO, have APIs that reflect their valid attributes","msgtype":"m.text"},"ts":1466784811000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but that'd be done manually","msgtype":"m.text"},"ts":1466784828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Mek: Looks like the problem should be fixed? Domenic, you too.","msgtype":"m.text"},"ts":1466799235000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"lmk if there are still refs missing.","msgtype":"m.text"},"ts":1466799240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, looks fixed","msgtype":"m.text"},"ts":1466800797000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"love the broken emoji in this tweet https://twitter.com/webkit/status/746441587811508227","msgtype":"m.text"},"ts":1466803340000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"at least on my machine/platform","msgtype":"m.text"},"ts":1466803346000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It works on Apple computer, it's a private use code point.","msgtype":"m.text"},"ts":1466803387000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"wanderview: It's Apple's logo.","msgtype":"m.text"},"ts":1466803391000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yea, thats what I was guessing","msgtype":"m.text"},"ts":1466803401000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"just drives the point home, I guess","msgtype":"m.text"},"ts":1466803418000,"senderName":"wanderview","senderId":"wanderview@irc"}
]