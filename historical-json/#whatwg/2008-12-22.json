[
{"content":{"body":"Hooray, now my OCaml code passes all of the tokeniser tests (excluding the content model / escape flag ones)","msgtype":"m.text"},"ts":1229906520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It's sometimes horrendously inefficient, e.g. every time it consumes an entity it sorts the whole entity list by length and then iterates through to find the first match, but that's okay because efficient is a non-goal","msgtype":"m.text"},"ts":1229906521000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/efficient/efficiency/","msgtype":"m.text"},"ts":1229906580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"eh","msgtype":"m.text"},"ts":1229906581000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"simplicity>consistency>efficiency","msgtype":"m.text"},"ts":1229906640000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"except, say, when writing parsers that need to be time-efficient, when efficiencey is a pretty important thing","msgtype":"m.text"},"ts":1229906641000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria ","msgtype":"m.text"},"ts":1229906642000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"repeat after me: \"Premature optimization is the root of all evil\"","msgtype":"m.text"},"ts":1229906643000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"I'm not talking about premature optimisation :)","msgtype":"m.text"},"ts":1229906700000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"Overly late optimisation is a problem too - you have to be careful to get it just right :-)","msgtype":"m.text"},"ts":1229906701000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"philip: You mean like mozilla firefox?","msgtype":"m.text"},"ts":1229906760000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"which is  apiece of bloat","msgtype":"m.text"},"ts":1229906761000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"it crashed when i tried to open 109 bookmarks at the same time","msgtype":"m.text"},"ts":1229906762000,"senderName":"famicom","senderId":"famicom@irc"},
{"content":{"body":"(My OCaml thing is meant to act as a flexible reference implementation rather than as a usable parser, but the idea is to be able to compile that implementation into efficient code in other languages)","msgtype":"m.text"},"ts":1229906820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://philip.html5.org/misc/tokeniser_states.png","msgtype":"m.text"},"ts":1229907120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: that's the entire state-transition diagram for HTML5, I take it?  beats out ECMA-262 for simplicity as I recall","msgtype":"m.text"},"ts":1229917080000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"The advantage of having window for global scope is that otherwise you would not be able to differentiate between local and global.","msgtype":"m.text"},"ts":1229935320000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It does not cover all identifiers, e.g. it does not apply to constants and class names, but it is useful nevertheless.","msgtype":"m.text"},"ts":1229935440000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Modern blogs and wikis allow users to embed images in editable content.","msgtype":"m.text"},"ts":1229935920000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"jwalden: That's just for the tokeniser","msgtype":"m.text"},"ts":1229938200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"okay, I *think* that's analogous","msgtype":"m.text"},"ts":1229938201000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"tries to check in changes to html5lib gets caught by merge errors, cries","msgtype":"m.emote"},"ts":1229938320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jwalden: (The tree constructor algorithm is more like http://philip.html5.org/misc/insertion-modes-4.svg but that's about nine months out of date)","msgtype":"m.text"},"ts":1229938321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"tables","msgtype":"m.text"},"ts":1229938380000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"bleh, let's just get rid of 'em","msgtype":"m.text"},"ts":1229938440000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1229938441000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"remembers he used to have something that split out the content model flags like http://canvex.lazyilluminati.com/misc/states10.png but can't find the code anywhere :-(","msgtype":"m.emote"},"ts":1229939760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Have you looked in /dev/null?","msgtype":"m.text"},"ts":1229944560000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yes, but I couldn't find anything in there","msgtype":"m.text"},"ts":1229947980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://canvas.quaese.de/ looks like a handy canvas tutorial, if you speak German","msgtype":"m.text"},"ts":1229948220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"it should be in /dev/random along with the works of Shakespeare","msgtype":"m.text"},"ts":1229948340000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: Any good ideas about how to implement the character encoding reparsing stuff in html5lib?","msgtype":"m.text"},"ts":1229949060000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/encoding/encoding switching/","msgtype":"m.text"},"ts":1229949061000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I know almost entirely nothing about how character encoding works in HTML5 or html5lib or Python, so I have no ideas :-(","msgtype":"m.text"},"ts":1229949240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: What I know: If we hit a meta element we need to either be sure that all the characters consumed so far have the same encoding as the previous characters or restart the parsing. The underlying file-like object may not natively support reseeking to the beginning so we either have to reread it or buffer the whole thing ourselves. ","msgtype":"m.text"},"ts":1229950320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We already try to buffer the first 10KB of the stream as soon as you start parsing it","msgtype":"m.text"},"ts":1229950380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: We don't want to re-read it if it's a urllib object of a POST request, for example","msgtype":"m.text"},"ts":1229950440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: So we probably need to buffer it","msgtype":"m.text"},"ts":1229950441000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I _think_ we need to buffer the raw character data before replacment characters are inserted and line breaks are normalised","msgtype":"m.text"},"ts":1229950442000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Oh, that sounds true, and we only buffer the post-preprocessed input stream","msgtype":"m.text"},"ts":1229950500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Is there some fixed limit on how much would need to be buffered?","msgtype":"m.text"},"ts":1229950501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: AFAIK, no","msgtype":"m.text"},"ts":1229950560000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So maybe we should make a BufferedStream type that adds a .tell() and .seek() method to non-buffered streams","msgtype":"m.text"},"ts":1229950561000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"By storing all the read data in a buffer","msgtype":"m.text"},"ts":1229950562000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(there is something like this already but it is not quite what we want)","msgtype":"m.text"},"ts":1229950563000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So for a document that never confidently declares a character encoding, the entire thing will be buffered in memory?","msgtype":"m.text"},"ts":1229950620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"In that case, we could just slurp the entire stream into a single string at the start, and then parse that","msgtype":"m.text"},"ts":1229950621000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh but then there is another problem because when we hit the <meta> element we don't know where in the unprocessed stream we are","msgtype":"m.text"},"ts":1229950622000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(assuming we want to read that in chunks for the sake of efficiency)","msgtype":"m.text"},"ts":1229950680000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Why does it matter where we are in the unprocessed stream?","msgtype":"m.text"},"ts":1229950681000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If the encoding changes incompatibly, it would just have to seek to 0 and start again, and it wouldn't matter where it had changed","msgtype":"m.text"},"ts":1229950740000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1229950741000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It matters if we want to continue without reparisng if the encoding is compatible","msgtype":"m.text"},"ts":1229950800000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but it needs to work out whether anything has changed incompatibly, up to the end of the meta charset element","msgtype":"m.text"},"ts":1229950801000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"which means it needs to know where it's read up to","msgtype":"m.text"},"ts":1229950802000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, and that too","msgtype":"m.text"},"ts":1229950803000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It'd be easier if html5lib decided not to be a \"user agent [that] supports changing the converter on the fly\"","msgtype":"m.text"},"ts":1229950860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yeah, we could ignore that for now","msgtype":"m.text"},"ts":1229950861000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(but it would be a perf. in if we supported it)","msgtype":"m.text"},"ts":1229950862000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"/in/win/","msgtype":"m.text"},"ts":1229950863000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(assuming supporting it didn't place an undue burden on the implementation)","msgtype":"m.text"},"ts":1229950920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: (Probably not much of one, since meta charset will typically be near the start of the document and it wouldn't have to reparse much at all)","msgtype":"m.text"},"ts":1229950921000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hubbub doesn't allow changing the convertor on the fly, it just reparses","msgtype":"m.text"},"ts":1229950922000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria: Is its input a stream or a string or something?","msgtype":"m.text"},"ts":1229950923000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yes, a string, so not a particularly useful comment from me there. :)","msgtype":"m.text"},"ts":1229950980000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"jgraham: Is there a reason why html5lib should use streams rather than slurping everything into a string?","msgtype":"m.text"},"ts":1229951040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Memory is cheap, after all :-)","msgtype":"m.text"},"ts":1229951041000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: It seems nicer? (especially for long strings). Also, we could, in principle, throw the buffer away once the encoding confidence was certian","msgtype":"m.text"},"ts":1229951100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"more properly, what hubbub actually does is call a \"character encoding change\" hook, which then can set a flag on the tokeniser so that it stops parsing and returns the new character encoding","msgtype":"m.text"},"ts":1229951160000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"and then the app that's using hubbub has to send the data in again","msgtype":"m.text"},"ts":1229951161000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"mostly just wants to reduce the overhead of calling char(), to make things much faster, but that seems independent of the encoding-related buffering/reparsing issue since it's on the opposite side of the decoder","msgtype":"m.emote"},"ts":1229951340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"BufferedStream with .seek_to_zero() (and reparse when the encoding changes, don't do the complex changing-on-the-fly thing) sounds like the sanest approach, I guess","msgtype":"m.text"},"ts":1229951520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders if hsivonen solved this issue","msgtype":"m.emote"},"ts":1229951580000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: OK, I will look at that at some point soon","msgtype":"m.text"},"ts":1229951581000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(like maybe this evening)","msgtype":"m.text"},"ts":1229951640000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"for Java, I figured that it happens too often that the buffering in the character decoder causes non-ASCII to be buffered by the time of changing encodings","msgtype":"m.text"},"ts":1229951760000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so I decided to remove support for changing decoders in place","msgtype":"m.text"},"ts":1229951761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"instead, the java.io-based driver restarts the parse unconditionally when changing encodings","msgtype":"m.text"},"ts":1229951820000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I intend to implement the same strategy for Gecko, but the current Gecko behavior is different, so I'm not sure if the spec as currently written is completely Web-compatible here","msgtype":"m.text"},"ts":1229951880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"We'll see","msgtype":"m.text"},"ts":1229951881000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: What does GEcko do?","msgtype":"m.text"},"ts":1229951882000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I don't understand what it does.","msgtype":"m.text"},"ts":1229951940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: my hypothesis is that it reparses if scripts haven't run and changes decoders in place if scripts have run","msgtype":"m.text"},"ts":1229951941000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip` or someone - let me know if I just horribly broke html5lib in some way and I'll back out the change (I checked in more than I intended to anyway)","msgtype":"m.text"},"ts":1229955360000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: It already fails enough test cases that I probably wouldn't notice if all the rest started breaking too :-)","msgtype":"m.text"},"ts":1229955420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: BTW, I think it should be a little faster now","msgtype":"m.text"},"ts":1229956620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sees ihatexml.py","msgtype":"m.emote"},"ts":1229956680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"generates twelve thousand tokeniser test cases, and finds one bug in html5lib","msgtype":"m.emote"},"ts":1229964180000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Then you don't have enough test cases","msgtype":"m.text"},"ts":1229964360000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I can't think of any more test cases to add, since I have one case for each interesting character that can occur from every tokeniser state","msgtype":"m.text"},"ts":1229964480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Do you test every possible unicode character in every state?","msgtype":"m.text"},"ts":1229964720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"No, you don't.","msgtype":"m.text"},"ts":1229964780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: No, because those aren't interesting characters","msgtype":"m.text"},"ts":1229964781000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: That doesn't mean there aren't interesting bugs","msgtype":"m.text"},"ts":1229964782000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It means it's very unlikely that there will be bugs, because I test all the characters that a sane tokeniser would depend on, and every other character is equivalent and has no special processing","msgtype":"m.text"},"ts":1229964840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: You are assuming tokenizers are sane, which is very naïve","msgtype":"m.text"},"ts":1229964900000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: please do make those testcases public. :)","msgtype":"m.text"},"ts":1229966340000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"Philip`: i bet you'd find more bugs by fuzzing than by trying to be exhaustive wrt one aspect of parsing","msgtype":"m.text"},"ts":1229966700000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"takkaria: I think it'd be a bad idea to add them all into html5lib, but I could just upload them to the web somewhere","msgtype":"m.text"},"ts":1229970240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Add them all into html5lib, please.","msgtype":"m.text"},"ts":1229970241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jruderman_: This seems like a case where exhaustiveness is relatively feasible, since there's an algorithm with a well-defined series of states and state transitions, and most implementations are pretty close to that definition, so it works at providing decent coverage of the implementations","msgtype":"m.text"},"ts":1229970360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: Why?","msgtype":"m.text"},"ts":1229970361000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: Also: No","msgtype":"m.text"},"ts":1229970362000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Because then we have test cases located in one place","msgtype":"m.text"},"ts":1229970840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: But if there's twelve thousand tokeniser tests, and it takes ages to run them all, people will run the tests less often, which is detrimental","msgtype":"m.text"},"ts":1229970960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: But if they aren't there then they won't be wrong, which is detrimental","msgtype":"m.text"},"ts":1229971020000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/wrong/run/","msgtype":"m.text"},"ts":1229971021000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Interesting typo.","msgtype":"m.text"},"ts":1229971022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It's only detrimental if they would have caught a bug that the remaining tests would have missed","msgtype":"m.text"},"ts":1229971080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and most of these tests are very redundant)","msgtype":"m.text"},"ts":1229971140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(e.g. there are tests for \"<!DOCTYPEa\", \"<!DOCTYPEb\", \"<!DOCTYPEy\", \"<!DOCTYPEz\", \"<!DOCTYPEA\", ...)","msgtype":"m.text"},"ts":1229971200000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Also, if I did check in all these tests, and then the spec changed, someone would find hundreds of errors and get really annoyed trying to manually fix all the test cases","msgtype":"m.text"},"ts":1229971201000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oops, there's only actually about one thousand tests, since I didn't sufficiently uniquify them","msgtype":"m.text"},"ts":1229971320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That certainly isn't too many.","msgtype":"m.text"},"ts":1229972100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ergh. This is going to be horrible. Having the same @cite over and over again.","msgtype":"m.text"},"ts":1229972760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Meh.","msgtype":"m.text"},"ts":1229972761000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://html5lib.googlecode.com/svn/trunk/testdata/tokenizer/test3.test","msgtype":"m.text"},"ts":1229973240000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Happy now? :-p","msgtype":"m.text"},"ts":1229973241000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(That's about 1500, after I stopped stupidly failing to remove duplicates)","msgtype":"m.text"},"ts":1229973300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"takkaria: There's some new tests for you to run if you fancy it :-)","msgtype":"m.text"},"ts":1229973301000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: :)","msgtype":"m.text"},"ts":1229973420000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Are the tests sorted in order of relevance? :)","msgtype":"m.text"},"ts":1229975160000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I don't have a way to quantitatively determine relevance, so they're just sorted on the input strings :-p","msgtype":"m.text"},"ts":1229975400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Is it reasonable to write notes for English in HTML?","msgtype":"m.text"},"ts":1229977620000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"for English\"? as in classroom lecture notes?","msgtype":"m.text"},"ts":1229977800000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"jruderman_: Well, not lecture notes, but for my final year of school (in the en-gb meaning of school)","msgtype":"m.text"},"ts":1229977801000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i used HTML for a few papers in college","msgtype":"m.text"},"ts":1229977860000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"and TeX for others","msgtype":"m.text"},"ts":1229977861000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"These are notes for my dissertation: I intend on doing the dissertation itself using XeTeX","msgtype":"m.text"},"ts":1229977862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i liked using HTML because i could easily tweak styles across an entire document. wysiwyg word processors usually don't do that well.","msgtype":"m.text"},"ts":1229977920000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"for example, if i needed to pad my paper a little, it was a simple matter of p { line-height: 1.05em; }","msgtype":"m.text"},"ts":1229977980000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"slightly less obvious than changing the font size ;)","msgtype":"m.text"},"ts":1229977981000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"For notes that isn't so needed :)","msgtype":"m.text"},"ts":1229977982000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1229977983000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"still useful to be able to change the styles of all the headings at once, though","msgtype":"m.text"},"ts":1229978040000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"another advantage of HTML is that you can put the notes on your web site and not worry about what software viewers have; )","msgtype":"m.text"},"ts":1229978041000,"senderName":"jruderman_","senderId":"jruderman_@irc"},
{"content":{"body":"Is text/plain inadequate for notes?","msgtype":"m.text"},"ts":1229978220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Yes","msgtype":"m.text"},"ts":1229978221000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Why?","msgtype":"m.text"},"ts":1229978222000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Can't so easily build TOCs for text/plain :)","msgtype":"m.text"},"ts":1229978223000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Why do notes need a TOC?","msgtype":"m.text"},"ts":1229978280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Just use your editor's 'find' feature if you want to go to a certain section :-)","msgtype":"m.text"},"ts":1229978281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"now has a header element","msgtype":"m.emote"},"ts":1229978282000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I need automatic indexing in anolis","msgtype":"m.text"},"ts":1229978520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I do like how I mention that then someone who asked for it comes along","msgtype":"m.text"},"ts":1229978521000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Anyone have views on how to mark up a bilbiography?","msgtype":"m.text"},"ts":1229979180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I suggest putting it in <cite>","msgtype":"m.text"},"ts":1229979420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: \"The cite element represents the title of a work\"","msgtype":"m.text"},"ts":1229979480000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Who cares what specs say?","msgtype":"m.text"},"ts":1229979481000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"You're citing stuff, so use <cite> - it makes perfect sense","msgtype":"m.text"},"ts":1229979482000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It does, but Hixie's stupid.","msgtype":"m.text"},"ts":1229979483000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what classes of products is http://www.w3.org/TR/2008/WD-XForms-for-HTML-20081219/ supposed to be normative on?","msgtype":"m.text"},"ts":1229979660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: my view about marking up a bibliography: http://hsivonen.iki.fi/thesis/html5-conformance-checker#references","msgtype":"m.text"},"ts":1229979720000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: That doesn't conform to ISO 690, though","msgtype":"m.text"},"ts":1229979780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I mean, sure, I can use classes, but what do I gain?","msgtype":"m.text"},"ts":1229979781000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: you probably don't gain anything","msgtype":"m.text"},"ts":1229979840000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"links urn:isbn:0-330-29666-3","msgtype":"m.emote"},"ts":1229979841000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: bibliography formats that don't show the first name of the authors in full suck","msgtype":"m.text"},"ts":1229979900000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: they are bad for googling and disapproved by feminists","msgtype":"m.text"},"ts":1229979901000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: also, emphasizing author names over titles of works sucks when you are mostly referencing specs and technical documents some of which conceal their authors/editors","msgtype":"m.text"},"ts":1229979960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: I'm referencing a book for English work, so that isn't relevant :)","msgtype":"m.text"},"ts":1229980020000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: you could still make the argument that in cultural contexts where the surname of the author is the surname of the spouse, abbreviating the first name of the author diminishes the personal identifier of the author to one letter, which is uncool","msgtype":"m.text"},"ts":1229980080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"gsnedders: besides, I suggest making references in a way that you can GET without paying CHF 72","msgtype":"m.text"},"ts":1229980260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1229980261000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"realises that efficiently cutting wrapping paper for varyingly-sized presents is probably a bin packing problem and therefore NP-hard, which is totally unfair","msgtype":"m.emote"},"ts":1229980320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"tries to follow the Oxford Guide to Style","msgtype":"m.emote"},"ts":1229980980000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"comes up with the probably stupid, \"Vladimir Nabokov, The Enchanter [En. trans. of Volshebnik] (trans. Dmitri Nabokov) (London: Pan Books Ltd, 1987) (ISBN 0-330-29666-3).\"","msgtype":"m.emote"},"ts":1229981040000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"suggests focussing on the parts of the dissertation that are likely to result in marks :-)","msgtype":"m.emote"},"ts":1229981220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: at least it's positive that they approve of listing the ISBN","msgtype":"m.text"},"ts":1229981280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: They don't, I ignored that part.","msgtype":"m.text"},"ts":1229981281000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1229981282000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1229981283000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: They do however, as with most of the style guide, give a lot more flexibility than almost anything else","msgtype":"m.text"},"ts":1229981284000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: Yeah, I should :)","msgtype":"m.text"},"ts":1229981340000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: \"A person's name is not the title of a work \"","msgtype":"m.text"},"ts":1229981460000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: Lolita's name is the title of the book about her!","msgtype":"m.text"},"ts":1229981520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Only if you do a plain string comparison and ignore the context and semantics","msgtype":"m.text"},"ts":1229981760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Oh, sure. :P","msgtype":"m.text"},"ts":1229981761000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(and yes, I am doing my dissertation on such books)","msgtype":"m.text"},"ts":1229981762000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JohnResig: you around? You have a few broken links on http://docs.jquery.com/UI","msgtype":"m.text"},"ts":1229982420000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"(namely, all linked examples)","msgtype":"m.text"},"ts":1229982421000,"senderName":"virtuelv","senderId":"virtuelv@irc"},
{"content":{"body":"it depends an awful lot on your citation style","msgtype":"m.text"},"ts":1229988780000,"senderName":"takkaria","senderId":"takkaria@irc"}
]