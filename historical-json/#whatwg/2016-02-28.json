[
{"content":{"body":"Domenic: would Construct(%Array% instrinsic object of targetRealm, <<inputLength>>) be roughly the right way to create an Array?","msgtype":"m.text"},"ts":1456646346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the current setup looks a bit wonky","msgtype":"m.text"},"ts":1456646354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I also need to carefully document how the length property is read on the input array","msgtype":"m.text"},"ts":1456646407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I want to make this more precise than it was originally","msgtype":"m.text"},"ts":1456646417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe later today","msgtype":"m.text"},"ts":1456646489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think that would work, although it feels a bit cleaner to go directly for ArrayCreate(0, %ArrayPrototype% intrinsic object of targetRealm). But, if you're going to be precise about Array, then you probably also want to be precise about Boolean/Number/Map/Set/etc...","msgtype":"m.text"},"ts":1456646932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: especially since a lot of other places in the ES spec use ArrayCreate","msgtype":"m.text"},"ts":1456646969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ArrayCreate is problematic since it assumes the current Realm in some places","msgtype":"m.text"},"ts":1456647011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess it is probably another internal factoring thing, where Allen pulled out ArrayCreate but had no need to pull out BooleanCreate","msgtype":"m.text"},"ts":1456647014000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Only if you don't pass a second argument","msgtype":"m.text"},"ts":1456647027000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"Let A be a newly created Array exotic object.\"","msgtype":"m.text"},"ts":1456647049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That is invariant across realms","msgtype":"m.text"},"ts":1456647061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Construct delegates to ArrayCreate anyway","msgtype":"m.text"},"ts":1456647068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interesting, okay, maybe I can use ArrayCreate","msgtype":"m.text"},"ts":1456647109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Construct just also lets you muck with NewTarget and pass non-numbers for `len`","msgtype":"m.text"},"ts":1456647110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it makes sense that only the prototype really varies per Realm","msgtype":"m.text"},"ts":1456647121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, later today or tomorrow","msgtype":"m.text"},"ts":1456647152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1456647152000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Hmm Construct also does a Set on the length; that's strange...)","msgtype":"m.text"},"ts":1456647180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I want to be precise because of length, mostly, btw","msgtype":"m.text"},"ts":1456648072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: the others have simple internal slots","msgtype":"m.text"},"ts":1456648104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Getting length from input and setting it on output leaves things undefined atm","msgtype":"m.text"},"ts":1456648180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: could object-fit be made to work on any element's contents? I imagine it's been discussed before","msgtype":"m.text"},"ts":1456648335000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: non-object contents seems quite a bit harder (especially as there are no intrinsic sizes, so some stuff would not work I suspect)","msgtype":"m.text"},"ts":1456651393000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we know the box of the parent & the boxes of the children","msgtype":"m.text"},"ts":1456651488000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"TabAtkins: I updated bikeshed to see if the reference issue was fixed for DOM as you said and now I get \"FATAL ERROR: No 'dfn' refs found for '\"insanity-wolf\" alt'.\"","msgtype":"m.text"},"ts":1456654375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I thought you ran regression tests against DOM now?","msgtype":"m.text"},"ts":1456654387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The reliability of bikeshed leaves a lot to be desired, perhaps everything should just use Wattsi or some such instead","msgtype":"m.text"},"ts":1456654440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FATAL ERROR: No 'dfn' refs found for '\"insanity-wolf\" alt'.","msgtype":"m.text"},"ts":1456667232000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk, TabAtkins: ^","msgtype":"m.text"},"ts":1456667499000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, see little earlier today","msgtype":"m.text"},"ts":1456667899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1456667919000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: \"If the [LegacyUnenumerableNamedProperties] extended attribute is specified on an interface, then it applies to all its derived interfaces and must not be specified on any of them.\"?","msgtype":"m.text"},"ts":1456667941000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: seems reasonable","msgtype":"m.text"},"ts":1456667983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: As for my bikeshed error, this is because I'm trying to add a new step after 2.7 in https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke.","msgtype":"m.text"},"ts":1456667986000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm no IDL expert","msgtype":"m.text"},"ts":1456668000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Seems like we don't abort the steps if event's stop immediate propagation flag is set at that point.","msgtype":"m.text"},"ts":1456668003000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I think that's the intent of invoke's step 1, but it is misplaced. What do you think?","msgtype":"m.text"},"ts":1456668046000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I think you're correct, my fault","msgtype":"m.text"},"ts":1456668069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: No problem. :)","msgtype":"m.text"},"ts":1456668083000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I have various improvements I want to make to dispatch/invoke/inner invoke. Would that be a good thing?","msgtype":"m.text"},"ts":1456668104000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"More short-circuits, no more target in eventPath, etc.","msgtype":"m.text"},"ts":1456668118000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Target needs to be in path for API","msgtype":"m.text"},"ts":1456668204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"event.getDeepPath or some such","msgtype":"m.text"},"ts":1456668229000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Mmmh.","msgtype":"m.text"},"ts":1456668245000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Invoke step 1 should become inner invoke 2.1 or so I think","msgtype":"m.text"},"ts":1456668263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean the local variable eventPath in dispatch.","msgtype":"m.text"},"ts":1456668277000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That used to be the setup until I messed it up recently","msgtype":"m.text"},"ts":1456668285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We put target in eventPath, but then never do anything with it.","msgtype":"m.text"},"ts":1456668300000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, that'll be exposed at some point","msgtype":"m.text"},"ts":1456668307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh ok. :)","msgtype":"m.text"},"ts":1456668312000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Any idea for the wolf?","msgtype":"m.text"},"ts":1456668330000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I don't think it can be step 2.1 with the \"found\" mess.","msgtype":"m.text"},"ts":1456668363000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"No idea","msgtype":"m.text"},"ts":1456668403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Invoke is never called if stop propagation is set,","msgtype":"m.text"},"ts":1456668415000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: sure it can, just return false","msgtype":"m.text"},"ts":1456668419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so step 1 in invoke is useless.","msgtype":"m.text"},"ts":1456668421000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: But it should return true.","msgtype":"m.text"},"ts":1456668430000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ah okay, then do that","msgtype":"m.text"},"ts":1456668456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Should I put a note in place of invoke's step 1?","msgtype":"m.text"},"ts":1456668486000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Like \"this is never called when event's stop propagation is set\" or something.","msgtype":"m.text"},"ts":1456668500000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Nah","msgtype":"m.text"},"ts":1456668563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Do I remove that step?","msgtype":"m.text"},"ts":1456668576000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1456668632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Should be 2.1","msgtype":"m.text"},"ts":1456668641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Of inner*","msgtype":"m.text"},"ts":1456668685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why 2.1?","msgtype":"m.text"},"ts":1456668803000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: You can't reach 2.1 if stop propagation is set, and we know it is, so I planned to put it as 2.8.","msgtype":"m.text"},"ts":1456668855000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"we know it isn't*","msgtype":"m.text"},"ts":1456668862000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ah right","msgtype":"m.text"},"ts":1456668917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you really want it to be before the actual call, it should be 2.3, but I don't really see the point.","msgtype":"m.text"},"ts":1456668930000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Agreed","msgtype":"m.text"},"ts":1456668941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: can you create your own branches yet?","msgtype":"m.text"},"ts":1456668989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: On upstream's repos you mean","msgtype":"m.text"},"ts":1456669072000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1456669073000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, whatwg/dom","msgtype":"m.text"},"ts":1456669103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes. Do you prefer me to push stuff there?","msgtype":"m.text"},"ts":1456669113000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: makes it easier to get purple PRs","msgtype":"m.text"},"ts":1456669140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh?","msgtype":"m.text"},"ts":1456669156000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Should I recreate the PR?","msgtype":"m.text"},"ts":1456669166000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: oh no, it's fine for now","msgtype":"m.text"},"ts":1456669183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok. :)","msgtype":"m.text"},"ts":1456669189000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: let me look into this tomorrow and explain then","msgtype":"m.text"},"ts":1456669209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Explain?","msgtype":"m.text"},"ts":1456669219000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Even if it is exposed one day, we could still set eventPath to everything but its first element, and then remove the redundant \"and object is not target\" that is repeated twice.","msgtype":"m.text"},"ts":1456669489000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://twitter.com/JustRogDigiTec/status/704013991522111488 is sad","msgtype":"m.text"},"ts":1456685139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"we should have web-platform-tests that test that non-standard features aren't implemented","msgtype":"m.text"},"ts":1456686317000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"annevk: Is it known that wpt and the spec disagree with regard to Range.insertNode?","msgtype":"m.text"},"ts":1456686649000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/pull/2065","msgtype":"m.text"},"ts":1456686730000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Never mind I think my code is just incorrect.","msgtype":"m.text"},"ts":1456686847000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I think there are some such tests for Attr","msgtype":"m.text"},"ts":1456689489000,"senderName":"Domenic","senderId":"Domenic@irc"}
]