[
{"content":{"body":"TabAtkins: CSS needs to define somewhere \"origin of style sheet\" (which is the origin of the document that included the style sheet)","msgtype":"m.text"},"ts":1369015593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: then CSS Fonts and such can just use that","msgtype":"m.text"},"ts":1369015608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: your \"Sync cssom specs\" commit to xref broke stuff","msgtype":"m.text"},"ts":1369016181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: e.g. it doesn't seem like there's separate references for the getclientrects methods anymore","msgtype":"m.text"},"ts":1369016199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: kk, can do.  Looks like Cascade might be the best place to put it.","msgtype":"m.text"},"ts":1369030591000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Since it defined @import","msgtype":"m.text"},"ts":1369030610000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what are the normal working hours for #sysreq? Boston office hours on weekdays?","msgtype":"m.text"},"ts":1369030768000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Likely.","msgtype":"m.text"},"ts":1369030984000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hsivonen: also France","msgtype":"m.text"},"ts":1369031647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thoughts on issue 2 at <http://dev.w3.org/csswg/css-syntax/#the-input-byte-stream>?","msgtype":"m.text"},"ts":1369032770000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: fwiw, TC39 crowd dislikes CSSVariablesDeclaration-type interfaces","msgtype":"m.text"},"ts":1369033424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: because of Object.prototype","msgtype":"m.text"},"ts":1369033453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks at issue 2","msgtype":"m.emote"},"ts":1369033460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I think hsivonen might have a better informed opinion on that","msgtype":"m.text"},"ts":1369033545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it's not entirely clear to me that restriction would make things safer","msgtype":"m.text"},"ts":1369033564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, serialization of arbitrary CSS token streams as required by CSS Variables also seems interesting","msgtype":"m.text"},"ts":1369034911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, I think that's all, then. Want to fix the other bug too? :)","msgtype":"m.text"},"ts":1369036075000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: that one requires more thinking from what I remember","msgtype":"m.text"},"ts":1369037382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam seems to be suck in some superposition of states","msgtype":"m.text"},"ts":1369037384000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In other news, http://lists.w3.org/Archives/Public/public-texttracks/2013May/0016.html makes me sad. \"it might inform a discussion of TTML profiles\" is like a double red flag.","msgtype":"m.text"},"ts":1369037413000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TTML is bad. Profiles also bad. Combined, ...","msgtype":"m.text"},"ts":1369037432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: he's here","msgtype":"m.text"},"ts":1369037593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wavefunction must have collapsed","msgtype":"m.text"},"ts":1369037668000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I got some feedback during the conference. First of all, it seems people expect html5lib to provide a custom tree format. I directed them towards bs4 for a straightforward querying API.","msgtype":"m.text"},"ts":1369038267000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Ms2ger: so yeah, the idea was that HTML would invoke the \"set parser\"","msgtype":"m.text"},"ts":1369038277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: e.g. \"Either when an element is created that has a class attribute or when an element's class attribute is set to a value other than the empty string, set the element's classes to the new value, parsed.\" is what DOM uses itself","msgtype":"m.text"},"ts":1369038291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: if that is missing anything or is not convenient enough, that'd be good to know","msgtype":"m.text"},"ts":1369038309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ambv: Interesting. I mean that doesn't make much sense, but I see why people would think that","msgtype":"m.text"},"ts":1369038426000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Because it's traditional for libs to tightly couple parsing and representation","msgtype":"m.text"},"ts":1369038465000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yes, I share your view that it's great to have those decoupled.","msgtype":"m.text"},"ts":1369038482000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"jgraham: Another thing, it seems we're currently very slow compared to other parsers and this makes for some poor PR, aka FUD.","msgtype":"m.text"},"ts":1369038505000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"So increasing performance would be a good target for post-1.0 releases.","msgtype":"m.text"},"ts":1369038530000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Well it's no secret that we're slow. Not sure it's possible to squeeze that much more performance out of pure python","msgtype":"m.text"},"ts":1369040065000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or at least, we have spent non-trivial effort benchmarking it in the past","msgtype":"m.text"},"ts":1369040085000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Reading through one character at a time just isn't very efficient. But that's needed for a compliant implementation.","msgtype":"m.text"},"ts":1369040156000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Really I think the effort would be better spent on writing a C implementation in libxml2","msgtype":"m.text"},"ts":1369040180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Then lxml.html would be fast and non-sucky","msgtype":"m.text"},"ts":1369040194000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We can at least work with the PyPy guys to make it JIT compile better.","msgtype":"m.text"},"ts":1369040198000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"Yeah, that makes sense","msgtype":"m.text"},"ts":1369040208000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Especially since lxml on PyPy doesn't seem to work so well","msgtype":"m.text"},"ts":1369040231000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Currently for huge documents it's 5x faster than CPython but for typical documents it's 2x â€¦ slower.","msgtype":"m.text"},"ts":1369040234000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"jgraham: lxml still is 30x faster than html5lib on PyPy ;) but I guess there's much potential in improving html5lib performance. it would be big news for both html5lib and PyPy if we got the performance on par with lxml.","msgtype":"m.text"},"ts":1369040285000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"jgraham: https://github.com/ambv/html5lib-microbench","msgtype":"m.text"},"ts":1369040310000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"jgraham: in libxml2, do you mean incremental conformance improvements on the existing parser, or a brand new implementation?","msgtype":"m.text"},"ts":1369040339000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Yes :p","msgtype":"m.text"},"ts":1369040426000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yes to which?","msgtype":"m.text"},"ts":1369040449000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"One of those. It was a non-exclusive or, right? ;)","msgtype":"m.text"},"ts":1369040477000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I haven't looked at the existing parser well enough to know if \"incremental improvements\" are likely to end up with something conformant","msgtype":"m.text"},"ts":1369040517000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I had in mind, which do you think would be the way to go?","msgtype":"m.text"},"ts":1369040523000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"If they would, that would be the low risk option, but my general feeling is that unless you started with the right architecture you won't end up with something conformant","msgtype":"m.text"},"ts":1369040576000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And so far only WebKit were close to having the right architecture","msgtype":"m.text"},"ts":1369040601000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and taht was because the spec was based on more on webkit than on anyone else","msgtype":"m.text"},"ts":1369040632000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"kicks his connection","msgtype":"m.emote"},"ts":1369040978000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, do we have a bug on Hixie to invoke the set parser, then?","msgtype":"m.text"},"ts":1369041015000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"marcosc: you don't want \"Call resolver's reject(value) method with error as value argument.\"; you want to call the internal resolve algorithm","msgtype":"m.text"},"ts":1369043576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: that could be that bug I suppose","msgtype":"m.text"},"ts":1369043589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wfm","msgtype":"m.text"},"ts":1369043598000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: bit slow today","msgtype":"m.text"},"ts":1369043602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: makes sense","msgtype":"m.text"},"ts":1369043652000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"(I din't write the text, fwiw)","msgtype":"m.text"},"ts":1369043666000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc: k","msgtype":"m.text"},"ts":1369043671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"marcosc: also needs to say something about running the remaining steps asynchronously and not terminating when you return","msgtype":"m.text"},"ts":1369043706000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"marcosc: looks okay otherwise","msgtype":"m.text"},"ts":1369043726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks :)","msgtype":"m.text"},"ts":1369043735000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"annevk: will update the corresponding bug on the sysapps repo","msgtype":"m.text"},"ts":1369043763000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"TabAtkins: \"When errors occur in CSS, the parser attempts to recover gracefully, throwing away only the minimum amount of content before returning to parsing as normal.\" isn't quite true. for instance, a broken selector throws away the entire ruleset rather than just the selector","msgtype":"m.text"},"ts":1369046469000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or maybe i misunderstood. it talks about the parser, while throwing away rulesets happens later","msgtype":"m.text"},"ts":1369046583000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: http://pypi-externals.caremad.io/help/what/","msgtype":"m.text"},"ts":1369046640000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Context?","msgtype":"m.text"},"ts":1369046917000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: distutils is very very very slow when it scrapes websites to find downloadable links. Disable this functionality by explicitly listing that we only publish packages on PyPI","msgtype":"m.text"},"ts":1369046964000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"this makes downloading packages significantly faster","msgtype":"m.text"},"ts":1369046991000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Yeah, I saw that a few days ago.","msgtype":"m.text"},"ts":1369047212000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ambv: But I thought it was in setup.py that changed the metadata, not just on PyPI","msgtype":"m.text"},"ts":1369047234000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: the newest distribute and setuptools are smarter than that but the default is still spurious scraping unless you opt-in on PyPI to the faster method","msgtype":"m.text"},"ts":1369047293000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"ambv: Does this have to be done per-version?","msgtype":"m.text"},"ts":1369047384000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Le sigh.","msgtype":"m.text"},"ts":1369047385000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"No, doing it once seems enough.","msgtype":"m.text"},"ts":1369047424000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well, okay.","msgtype":"m.text"},"ts":1369047425000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1369048106000,"senderName":"ambv","senderId":"ambv@irc"},
{"content":{"body":"TabAtkins: isn't the specced bad-url behavior bad for future compat if we want to add expressions in url()?","msgtype":"m.text"},"ts":1369056028000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I don't think we ever can.","msgtype":"m.text"},"ts":1369064430000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Apparently document.all.tags has been broken in Gecko since Fx3.0","msgtype":"m.text"},"ts":1369064436000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":'(","msgtype":"m.text"},"ts":1369064461000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"quit breaking my sweet dhtml site guys","msgtype":"m.text"},"ts":1369064475000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Should tell sicking :)","msgtype":"m.text"},"ts":1369064538000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: Can you explain what the Object.prototype problem is?  Keys set on Object.prototype showing up as non-own properties on all objects?  I don't know why that's a problem for this kind of interface, or what I could do about it.","msgtype":"m.text"},"ts":1369066177000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Maybe expose it as a JS Map?","msgtype":"m.text"},"ts":1369066186000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Also, Syntax + CSSOM mandate how to serialize arbitrary token streams.","msgtype":"m.text"},"ts":1369066208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or rather, will, once CSSOM finishes serialization stuff.)","msgtype":"m.text"},"ts":1369066230000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Text about error-recovery is of course approximate and non-normative.  But throwing away \"just the selector\" on a ruleset wouldn't help much - you'd be left with a ruleset with no selector, which doesn't match anything.","msgtype":"m.text"},"ts":1369066372000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But anyway, I have compat constraints to operate under with error recovery.","msgtype":"m.text"},"ts":1369066405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I think the point was about |foo, #broken# { ... }| not applying anything to foo","msgtype":"m.text"},"ts":1369066495000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hm, exposing Variables as a JS Map seems like a much better idea anyway.  Wonder why I didn't think about that?","msgtype":"m.text"},"ts":1369066501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ms2ger: Ah, perhaps.  That was unclear.  Regardless, we know that was a mistake, but not one we can fix.","msgtype":"m.text"},"ts":1369066531000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":";_;","msgtype":"m.text"},"ts":1369066538000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"heycam|away|away: Your username is weird.  Also, there any IDL magic necessary to make something be a JS Map?","msgtype":"m.text"},"ts":1369066586000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, you guys might want to drop document.all.tags too","msgtype":"m.text"},"ts":1369066644000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1369068668000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Ms2ger: I'll send an email.","msgtype":"m.text"},"ts":1369068681000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ta","msgtype":"m.text"},"ts":1369068693000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Got a bug or something I can ref?","msgtype":"m.text"},"ts":1369068749000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ICYMI: The Open Source (read: GitHub) Report Card: http://osrc.dfm.io/","msgtype":"m.text"},"ts":1369072507000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"\"It seemsâ€”from their activity streamsâ€”that jgraham and w3c are probably friends\"","msgtype":"m.text"},"ts":1369072724000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1369072728000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1369072736000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins, er, thought I'd replied: https://bugzilla.mozilla.org/show_bug.cgi?id=874084","msgtype":"m.text"},"ts":1369072776000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Ms2ger is a trend setting Javascripter\"","msgtype":"m.text"},"ts":1369072812000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, that sure is news to me","msgtype":"m.text"},"ts":1369072819000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe writing testharness.js is a trend?","msgtype":"m.text"},"ts":1369072891000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"+tests","msgtype":"m.text"},"ts":1369072896000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Still one you set, then","msgtype":"m.text"},"ts":1369072909000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also, apparently I do my work at 3am","msgtype":"m.text"},"ts":1369072928000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, I'm not convinced by its timezone corrections (and neither is it, to be fair)","msgtype":"m.text"},"ts":1369072964000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's kinda revealing about how much work one does on GitHub vs. off it","msgtype":"m.text"},"ts":1369073025000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"like, GitHub has no idea about my PHP stuff because it's not really on GitHub","msgtype":"m.text"},"ts":1369073081000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(and GitHub thinks mimesniff is Tcl, for some reason)","msgtype":"m.text"},"ts":1369073095000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"kicks document.all some more","msgtype":"m.emote"},"ts":1369073263000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Violence is the last refuge of the incompetent","msgtype":"m.text"},"ts":1369073305000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"On the other hand document.all deserves it","msgtype":"m.text"},"ts":1369073317000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So please continue","msgtype":"m.text"},"ts":1369073321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"document.all[\"2\"]","msgtype":"m.text"},"ts":1369073345000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What gives?","msgtype":"m.text"},"ts":1369073348000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"How about (\"2\"), item(\"2\"), namedItem(\"2\")?","msgtype":"m.text"},"ts":1369073364000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The answer is obvious","msgtype":"m.text"},"ts":1369073522000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"depends on the browser\"","msgtype":"m.text"},"ts":1369073526000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wwied?","msgtype":"m.text"},"ts":1369073674000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or really wdied?","msgtype":"m.text"},"ts":1369073683000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1369073728000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what does IE do?","msgtype":"m.text"},"ts":1369073750000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1369073783000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"getElementsByTagName(\"*\")[2] for [], () and item(), and the thing with name \"2\" for namedItem()","msgtype":"m.text"},"ts":1369073868000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh wait","msgtype":"m.text"},"ts":1369073990000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"should look at the right lines","msgtype":"m.emote"},"ts":1369073996000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"getElementsByTagName(\"*\")[2] for [] and (), and the thing with name \"2\" for item() and namedItem()","msgtype":"m.text"},"ts":1369074036000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah, so presto got it \"right\" then","msgtype":"m.text"},"ts":1369074264000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No surprise there :)","msgtype":"m.text"},"ts":1369074270000,"senderName":"jgraham","senderId":"jgraham@irc"}
]