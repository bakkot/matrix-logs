[
{"content":{"body":"MikeSmith: TabAtkins: it seems like the solution would be to accumulate text/language pairs, then send some mega-JSON to the python process to get it all highlighted in one go, then go back and update the nodes?","msgtype":"m.text"},"ts":1529374099000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah I guess so, if we wanted to optimize for speed. But that would amount to a major rewrite of what the wattsi code has now","msgtype":"m.text"},"ts":1529388768000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and it’d feel sad to have to move yet more of the cost of it into the wattsi code to make up for limitiations in the desing of the Python VM","msgtype":"m.text"},"ts":1529388880000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"especially given we started out on doing it this way, with needing to write a JSON serializer in the wattsi code to make up for the poor performance of HTML parsing in Python","msgtype":"m.text"},"ts":1529389004000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"to make the rewrite work, I guess we’d have to make wattsi generate a unique ID for each <pre> node (be making a hash for it whatever), then until we get to the end of the spec source document, collecting/holding all the JSON for the <pre>s of each class into memory with the JSON including their IDs, and pass those bundles (three I guess -) along to the highlighter as an attribute so that it gets","msgtype":"m.text"},"ts":1529389539000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"included in the generated","msgtype":"m.text"},"ts":1529389545000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...output for the highlighter","msgtype":"m.text"},"ts":1529389584000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but then we’d need to go back and do another pass through the HTML source to do a lookup of each <pre> against the giant output we get back from the highlighter to looko for the corresponding node","msgtype":"m.text"},"ts":1529389703000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but we need HTML output from the highlighter, not JSON, so if we did that lookup against the HTML contents we get back, then we’re gonna need to (re)parse it in wattsi","msgtype":"m.text"},"ts":1529389779000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so actually given all that I don’t even see a way to make it work in practice in wattsi ー no practical way to bundle up all the <pre>s","msgtype":"m.text"},"ts":1529389855000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean, the way the current wattsi code is overall, we need to write each modified <pre> node to the spec output right after we read the unmodified source for it","msgtype":"m.text"},"ts":1529390029000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and that’s also why we need to do that 4 times for each <pre> instead of once for each","msgtype":"m.text"},"ts":1529390084000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because we are writing/building 4 different spec versions","msgtype":"m.text"},"ts":1529390138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: https://github.com/whatwg/html/issues/2806 seems to contain a proposal for doing range requests for images","msgtype":"m.text"},"ts":1529401463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and also some confusion about whether that needs to be standardized","msgtype":"m.text"},"ts":1529401477000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: will jump in, cheers!","msgtype":"m.text"},"ts":1529401510000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"MikeSmith: hmm I thought there would be a way to keep references to all pre nodes in memory, with no IDs or lookups or second pass.","msgtype":"m.text"},"ts":1529403827000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Then correlate them by index-in-pre-array <-> index-in-HTML-output-array)","msgtype":"m.text"},"ts":1529403868000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the problem with doing it that way is, there’s content that gets added to the pre nodes by wattsi","msgtype":"m.text"},"ts":1529413064000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so the highlighter needs to operate not on the raw source by instead on the wattsi-modified/preprocessed versions","msgtype":"m.text"},"ts":1529413127000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I have to admit that at this point, I have a somewhat vague recollection of why it needed to be implemented the way I did","msgtype":"m.text"},"ts":1529413188000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...because I implemented the basis of it 7 or 8 months ago and had a much clearer idea of why then","msgtype":"m.text"},"ts":1529413240000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but in the mean time it sat for all those months","msgtype":"m.text"},"ts":1529413265000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway as far as the highlighter, it’s not clear to me if there’s something that would prevent the highlighter from being wrapped in a simple web server so that it could run persistently and we avoid repeating the VM startup costs 1121 x 4 times","msgtype":"m.text"},"ts":1529413746000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"similar to teh Bikeshed http service or to wptserve or whatever","msgtype":"m.text"},"ts":1529415130000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hello","msgtype":"m.text"},"ts":1529415939000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"I'm trying to use HTML's maxlength attribute to limit character input. This works as expected with English character, but when I enter Japanese character, it allows me to enter any number of characters, but once the input field is blurred, the text is automatically truncated to fit the maxlength limit.","msgtype":"m.text"},"ts":1529415944000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"The issue is found only when entering Japanese, Chinese and Korean characters.","msgtype":"m.text"},"ts":1529415957000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"Is this the expected behavior for maxlength for these characters?","msgtype":"m.text"},"ts":1529415978000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"https://jsbin.com/?html,js,output (works for English chars)","msgtype":"m.text"},"ts":1529416002000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"sry, wrong link","msgtype":"m.text"},"ts":1529416020000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"https://jsfiddle.net/bwtf4ake/","msgtype":"m.text"},"ts":1529416021000,"senderName":"jsx","senderId":"jsx@irc"},
{"content":{"body":"Any setTimeout experts here? Is there any reason setTimeout(cb, 10) would call cb in less than 10ms, according to Date.now()? It seems to happen in everything but Safari","msgtype":"m.text"},"ts":1529416710000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://static-misc.glitch.me/set-timeout-delay","msgtype":"m.text"},"ts":1529416719000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe they \"cheat\" to get better score on some benchmark? dunno","msgtype":"m.text"},"ts":1529418120000,"senderName":"zcorpan__","senderId":"zcorpan__@irc"},
{"content":{"body":"or it takes a while for the first task to be surfaced","msgtype":"m.text"},"ts":1529418206000,"senderName":"zcorpan__","senderId":"zcorpan__@irc"},
{"content":{"body":"Either would be against the spec I think","msgtype":"m.text"},"ts":1529418246000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how much earlier than 10ms?","msgtype":"m.text"},"ts":1529418256000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"jsx: I suspect that's a bug due to usage of an IME, or are you not using that to enter those characters?","msgtype":"m.text"},"ts":1529418259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: Seems like 9 in Chrome & Firefox. Edge seems to go lower. Saw 5.","msgtype":"m.text"},"ts":1529418278000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: at one point I tried to make firefox never fire early and I believe it caused some interop issues or made things skew too late on average","msgtype":"m.text"},"ts":1529418288000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"innnnnteresting","msgtype":"m.text"},"ts":1529418299000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in my tests edge seems to be doing much more aggressive coalescing of timers to 5ms boundaries... probably a big win for battery","msgtype":"m.text"},"ts":1529418320000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"also interesting!","msgtype":"m.text"},"ts":1529418379000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: hmm, now I wonder whether timers can be used as a sidechannel","msgtype":"m.text"},"ts":1529418382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: at least in firefox we have primitives that only allow sleeping at milliseconds boundary, but you can time things at sub-millisecond level with performance.now() (and internal timing APIs)","msgtype":"m.text"},"ts":1529418452000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: so we have to decide to round-up or round-down at some point","msgtype":"m.text"},"ts":1529418463000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1529418634000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"anyway, we could always round up... but then all the error will be biased to be late and things will be more likely to drift","msgtype":"m.text"},"ts":1529418660000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: for setInterval() chrome actually has drift correction code that will purposely fire early if the last interval was late... there is a spec issue somewhere to standardize that","msgtype":"m.text"},"ts":1529418692000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, it makes a lot more sense for setInterval, although yeah it isn't spec'd","msgtype":"m.text"},"ts":1529418722000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: its hard to say for the sidechannel... this could get more precise in the future (or not as edge is doing)...  I do think it would be hard to rely on precise setTimeout() firing in a cross-browser way","msgtype":"m.text"},"ts":1529418778000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: here is the spec issue... I think we have some amount of agreement to do the drift correction: https://github.com/whatwg/html/issues/3151#issuecomment-339000314","msgtype":"m.text"},"ts":1529418823000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I was thinking that if they are coalesced you might be able to determine what other timers are running","msgtype":"m.text"},"ts":1529419040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure I understand","msgtype":"m.text"},"ts":1529419197000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it seemed a little similar to the things described in chapter 6 of https://tom.vg/papers/cross-browser-tracking_woot17.pdf","msgtype":"m.text"},"ts":1529419433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll have to read that a little later","msgtype":"m.text"},"ts":1529419567000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: coalescing timers is observable, though... like if you use postMessage() you can see that coallescing re-orders setTimeout(0) in relation to the postMessage","msgtype":"m.text"},"ts":1529419605000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"env() sounds really bizarre \"user agents may define additional undocumented environment variable\"","msgtype":"m.text"},"ts":1529422600000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is surprised one even proposes such thing to the web","msgtype":"m.emote"},"ts":1529422659000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/variable/variables/","msgtype":"m.text"},"ts":1529422665000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"We were wondering if there's an existing \"write to file\" API for a ReadableStream in browsers... or something planned?","msgtype":"m.text"},"ts":1529422798000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: what does \"file\" mean?","msgtype":"m.text"},"ts":1529424316000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Basically, the use case we had in mind was about downloading a stream to a file. So, you get the download \"save to disk\" dialog thingy and then stream the data into it.","msgtype":"m.text"},"ts":1529424562000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"I believe you can do that with a service worker and content-disposition header","msgtype":"m.text"},"ts":1529424638000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Is there an example for this?","msgtype":"m.text"},"ts":1529424683000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: I think JakeA had an example of service-worker content-disposition to download an .epub file or something... then it would just be normal fetch API body stream support","msgtype":"m.text"},"ts":1529424725000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry, I don't have anything handy at the moment","msgtype":"m.text"},"ts":1529424738000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I have to step away","msgtype":"m.text"},"ts":1529424741000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"fwiw I do also plan to start looking into more explicit writable file type APIs (again, since it's not like we haven't had many attempts at that already)... although downloading a stream to a file isn't quite a use case I had in mind for that work...","msgtype":"m.text"},"ts":1529424853000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Since we have high hopes that we'll get streams into data channels, this would be really good to have, since one of the core use cases is P2P file sharing.","msgtype":"m.text"},"ts":1529424981000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"So far, the only example we can bring up is \"pipe an HTTP response into a data channel\" which is... interesting but a rather rare use case. :)","msgtype":"m.text"},"ts":1529425061000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Unless of course there are other APIs using (byte) streams I'm not aware of.","msgtype":"m.text"},"ts":1529425237000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: I assume you've checked that you're using the right account on crbug.com? Still not working now?","msgtype":"m.text"},"ts":1529429376000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I'm still using the same account as before and no, it's not","msgtype":"m.text"},"ts":1529429484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: that is, I only see a comment field, not the giant list of options I got before","msgtype":"m.text"},"ts":1529429506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I checked with my Mozilla account and that has the same non-privileges; don't think I've got more accounts","msgtype":"m.text"},"ts":1529429561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: am I missing something, or does https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-upgrade end up upgrading already-upgraded elements again?","msgtype":"m.text"},"ts":1529437322000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean, if one for example call the method twice with same param, elements are upgraded twice","msgtype":"m.text"},"ts":1529437345000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah, no, https://html.spec.whatwg.org/multipage/custom-elements.html#upgrades will return early","msgtype":"m.text"},"ts":1529437593000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Heh, I guess it makes the example in step 1 kinda funny though, since you can now trigger it much more easily.","msgtype":"m.text"},"ts":1529446505000,"senderName":"Domenic","senderId":"Domenic@irc"}
]