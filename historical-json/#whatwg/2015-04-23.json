[
{"content":{"body":"Domenic: I don't understand your comment on https://www.w3.org/Bugs/Public/show_bug.cgi?id=28544 at all","msgtype":"m.text"},"ts":1429748419000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: import { myClass } from 'mymodule';","msgtype":"m.text"},"ts":1429748426000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"var a = new myClass;","msgtype":"m.text"},"ts":1429748426000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: wouldn't result in a ReferenceError of any sort","msgtype":"m.text"},"ts":1429748449000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"my understanding is that module imports are resolved before evaluation starts","msgtype":"m.text"},"ts":1429748547000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"too lazy to confirm","msgtype":"m.text"},"ts":1429748554000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"tdz of some sort i'm sure, but still","msgtype":"m.text"},"ts":1429748586000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: Right.","msgtype":"m.text"},"ts":1429748828000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"caitp-: the fact it blows up in the case of a circular dependency is an orthogonal issue","msgtype":"m.text"},"ts":1429748845000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"iirc there's language to solve that, too","msgtype":"m.text"},"ts":1429748870000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"at the very least direct circular imports are ignored","msgtype":"m.text"},"ts":1429748897000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"oh, s/ignored/throws a syntax error","msgtype":"m.text"},"ts":1429749004000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: I think we did solve that issue by throwing ReferenceError","msgtype":"m.text"},"ts":1429749145000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"yes, ResolveExport returns null, and in response all callers throw a SyntaxError","msgtype":"m.text"},"ts":1429749178000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"so, maybe not quite as nice","msgtype":"m.text"},"ts":1429749187000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"caitp-: well, circular dependency usually implies a programming error though","msgtype":"m.text"},"ts":1429749400000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"so that might be okay","msgtype":"m.text"},"ts":1429749402000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"although there are legitimate use cases...","msgtype":"m.text"},"ts":1429749412000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"in any case it's not a reference error or type error to touch an import \"before it's loaded\", because you can't (with the exception of dynamic module imports)","msgtype":"m.text"},"ts":1429749717000,"senderName":"caitp-","senderId":"caitp-@irc"},
{"content":{"body":"TabAtkins: can't omit </p> there, as it happens","msgtype":"m.text"},"ts":1429769557000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: help http://dev.w3.org/csswg/bikeshed/cssom-view/","msgtype":"m.text"},"ts":1429772691000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: also when i remove open() from Ignored Terms i get this:","msgtype":"m.text"},"ts":1429772807000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"WARNING: Multiple possible 'idl' refs for 'open()'.","msgtype":"m.text"},"ts":1429772811000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Arbitrarily chose the one in html.","msgtype":"m.text"},"ts":1429772812000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"If this is wrong, insert one of the following lines into a <pre class=link-defaults> block:","msgtype":"m.text"},"ts":1429772812000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"spec:html; type:method; for:Window; text:open()","msgtype":"m.text"},"ts":1429772813000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"spec:html; type:method; for:Window; text:open()","msgtype":"m.text"},"ts":1429772815000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"/win/win 2","msgtype":"m.text"},"ts":1429792423000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"win-win!","msgtype":"m.text"},"ts":1429793858000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"zcorpan: Specs that aren't Bikeshedded sometimes define things twice, and I don't know how to avoid that.  That's why it was in Ignored Terms. ^_^","msgtype":"m.text"},"ts":1429805677000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mmmmm","msgtype":"m.text"},"ts":1429805732000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"maybe this should be in the pubrules validator","msgtype":"m.text"},"ts":1429805740000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"don't define thing twice","msgtype":"m.text"},"ts":1429805749000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"the tool could do a lot more linting","msgtype":"m.text"},"ts":1429805765000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: That would be nice! In this case, though, it's HTML, which I don't think is really PubRules checked. ^_^","msgtype":"m.text"},"ts":1429805829000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wonders if he should just make Bikeshed ignore it when it ends up with two identical definitions, and just silently choose one for you.","msgtype":"m.emote"},"ts":1429805862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well, if it's a part that is kept on the W3C side it gets pubrules checked every time it changes :)","msgtype":"m.text"},"ts":1429805865000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"and we could add support for linting WHATWG specs to specberus","msgtype":"m.text"},"ts":1429805880000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"spec:html refers to WHATWG, yeah.","msgtype":"m.text"},"ts":1429805885000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: I'll fix the stacktrace, though.","msgtype":"m.text"},"ts":1429805949000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Apple's feedback reads pretty well to me","msgtype":"m.text"},"ts":1429806648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: you read it?","msgtype":"m.text"},"ts":1429806654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well...","msgtype":"m.text"},"ts":1429806801000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it feels odd that you effectively say from outside the component where your child nodes should be distributed","msgtype":"m.text"},"ts":1429806857000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that hasn't been the idea with XBL and such","msgtype":"m.text"},"ts":1429806885000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but perhaps the slots + imperative API is enough","msgtype":"m.text"},"ts":1429806923000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh that bit, yeah, I'm not a 100% sold on slots yet, though I kind of like it","msgtype":"m.text"},"ts":1429806952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems somewhat nice to have an opinionated public API contract","msgtype":"m.text"},"ts":1429806963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It worries me that it means shadow DOM isn't useful for explaining <details> or <select> or similar.","msgtype":"m.text"},"ts":1429807351000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"shadow DOM  (or shadow + custom) isn't enough to explain various behaviors of native elements","msgtype":"m.text"},"ts":1429807513000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but the slots approach does seem to take us even farther(sp?) away","msgtype":"m.text"},"ts":1429807544000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"long ago when there was xforms (yes yes, I know) addon for Firefox, XBL, which has roughly the same capabilities as shadow dom + custom, wasn't enough to implement the new elements.","msgtype":"m.text"},"ts":1429807627000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"XTF + XBL was enough","msgtype":"m.text"},"ts":1429807637000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"XBL was used mainly as a presentation layer, and XTF was the lower level thing","msgtype":"m.text"},"ts":1429807660000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but XTF was so low level, that only privileged scripts could use it to implement new stuff","msgtype":"m.text"},"ts":1429807690000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"For sure, it isn't enough, it's part of the puzzle. Or at least it would be, if we didn't have this slots thing.","msgtype":"m.text"},"ts":1429807839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith dglazkov: dumb github question. How do I get write access to the w3c/webcomponents.wiki repo (i'm trying to add a wiki page)","msgtype":"m.text"},"ts":1429814853000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: I have to add you","msgtype":"m.text"},"ts":1429814876000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith dglazkov: normally i'd send a pull request but github doesn't do pull requests for gh wikis","msgtype":"m.text"},"ts":1429814887000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"because of asshatted github ACLs setup","msgtype":"m.text"},"ts":1429814888000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1429814892000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ahh ok","msgtype":"m.text"},"ts":1429814895000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1429814897000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"Domenic: would there be some es6 class magic that would allow an inherited static method change a property on the inherited class? probably doesn't make sense. i'll write up some code.","msgtype":"m.text"},"ts":1429814960000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"hober: you should be good to go now","msgtype":"m.text"},"ts":1429815020000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"awesome, it worked. thanks!","msgtype":"m.text"},"ts":1429815037000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"MikeSmith: can I be added to so I can edit what hober just uploaded?","msgtype":"m.text"},"ts":1429815082000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"MikeSmith: I have a github account as “othermaciej”","msgtype":"m.text"},"ts":1429815095000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Domenic: here's using both 5 and 6. https://gist.github.com/trevnorris/e3144f66dfa0aac6ff27","msgtype":"m.text"},"ts":1429815267000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"othermaciej: hai, just added you","msgtype":"m.text"},"ts":1429815440000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1429815496000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Domenic: actually, can es6 classes have static members that aren't methods?","msgtype":"m.text"},"ts":1429815660000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"trevnorris: sure, MyClass.x = \"whatever\" (or use static get/static set for accessors)","msgtype":"m.text"},"ts":1429816580000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: though that really gimps \"use strong\" for v8.","msgtype":"m.text"},"ts":1429816627000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"Yes well if you wanna program in JS program in JS if you wanna program in a V8 dialect program in that","msgtype":"m.text"},"ts":1429816659000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"trevnorris: the two things in your gist look equivalent","msgtype":"m.text"},"ts":1429816678000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I just updated the es6 example with a more full implementation to show the required code duplication.","msgtype":"m.text"},"ts":1429816705000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"Note that `this` inside static methods is the class itself","msgtype":"m.text"},"ts":1429816715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: even if it's inherited?","msgtype":"m.text"},"ts":1429816729000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"FREAK YES!","msgtype":"m.text"},"ts":1429816771000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"None of the stuff you just added to that gist is necessary","msgtype":"m.text"},"ts":1429816778000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"awesome. so I can use this._onreadable inside the static method and the inheritance will work.","msgtype":"m.text"},"ts":1429816805000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"Yep yep. ES6 classes do class-side inheritance","msgtype":"m.text"},"ts":1429816831000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"okay. i'm actually a little excited for es6 class syntax (still hate the class keyword since it's technically prototype, but whatever)","msgtype":"m.text"},"ts":1429816841000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"sweet, sweet. extends even makes sure to extend the static stuff after the fact. alright. this is legitimately good sugar. :)","msgtype":"m.text"},"ts":1429816958000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"In ES5 terms, Derived.__proto__ = Base in addition to Derived.prototype.__proto__ = Base.prototype","msgtype":"m.text"},"ts":1429816992000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Haha yay :)","msgtype":"m.text"},"ts":1429817003000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jgraham: do you have thoughts on how Reviewable compares with Critic?","msgtype":"m.text"},"ts":1429817388000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: __proto__ isn't an ES5 term! *hides*","msgtype":"m.text"},"ts":1429817396000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: hm. was getting ahead of myself and didn't think through the implementation impact. e.g. https://gist.github.com/trevnorris/e3144f66dfa0aac6ff27#file-inheritence-stuff-es6-js","msgtype":"m.text"},"ts":1429817533000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"Domenic: how do I get the _onreadable value from the specific class calling the constructor in Readable?","msgtype":"m.text"},"ts":1429817611000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"because it is changing the value on the inherited class properly, but not sure how to get it from the Readable constructor().","msgtype":"m.text"},"ts":1429817682000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"Domenic: nm. got it figured out. didn't know you could reference this.constructor.","msgtype":"m.text"},"ts":1429818801000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"gsnedders: They managed to make the UI even more confusing","msgtype":"m.text"},"ts":1429823448000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: impressive.","msgtype":"m.text"},"ts":1429823515000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: sounds like it integrates better with GH, though","msgtype":"m.text"},"ts":1429823525000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"does anybody ever try to run blame on the HTML spec","msgtype":"m.text"},"ts":1429824682000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1429824699000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"was just taking a lot longer than I remembered it taking","msgtype":"m.text"},"ts":1429824715000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: is there a spec somewhere for \"new.target\" within a class constructor?","msgtype":"m.text"},"ts":1429825917000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"trevnorris, what do you mean?","msgtype":"m.text"},"ts":1429826664000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: posted something on the \"use strong\" mailing list and someone told me that you can't use \"this.constructor\" in a constructor() callback. instead should use \"new.target\"","msgtype":"m.text"},"ts":1429826705000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"caitp: never heard of it before.","msgtype":"m.text"},"ts":1429826713000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"it's a new thing","msgtype":"m.text"},"ts":1429826720000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"as of like january, iirc","msgtype":"m.text"},"ts":1429826726000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"ah, okay. is there a spec out for it, or has it just been discussed?","msgtype":"m.text"},"ts":1429826756000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"if \"new.target\" is undefined, it means that the function was not called with `new`","msgtype":"m.text"},"ts":1429826757000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah, it's all in the ES spec --- search for [[NewTarget]]","msgtype":"m.text"},"ts":1429826771000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"thanks.","msgtype":"m.text"},"ts":1429826776000,"senderName":"trevnorris","senderId":"trevnorris@irc"},
{"content":{"body":"if it's not undefined, it's the target constructor (eg, the one which was the operand of `new`)","msgtype":"m.text"},"ts":1429826805000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"MikeSmith: yes","msgtype":"m.text"},"ts":1429827224000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yes, the github integration is better in the sense that rebases are more seamless and it seems to not randomly fail to sync occasionally","msgtype":"m.text"},"ts":1429828743000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"uh, so idlharness requires ES6 arrow functions now?","msgtype":"m.text"},"ts":1429828751000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: That's a bug, fixes welcome","msgtype":"m.text"},"ts":1429828770000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I thought someone already fixed it but apparently not","msgtype":"m.text"},"ts":1429828782000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(people have been using them in Mozilla code for years, so it's easy to forget they don't work everywhere yet)","msgtype":"m.text"},"ts":1429828819000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: https://critic.hoppipolla.co.uk/r/4777","msgtype":"m.text"},"ts":1429829133000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"\"works on my machine\"","msgtype":"m.text"},"ts":1429829150000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: r+ and merged","msgtype":"m.text"},"ts":1429829373000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yay","msgtype":"m.text"},"ts":1429829479000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: Thanks for the fix and sorry for the inconvenience","msgtype":"m.text"},"ts":1429829499000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"np; now to figure out if I should add allow_uncaught_exception sprinkles to some tests...","msgtype":"m.text"},"ts":1429829695000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"zcorpan: Okay, stacktrace fixed. That one was tricky!","msgtype":"m.text"},"ts":1429832881000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]