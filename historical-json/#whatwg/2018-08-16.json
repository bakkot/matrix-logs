[
{"content":{"body":"Domenic: is there a plan to have ReadableStreamDefaultReader be an async iterable in the future?","msgtype":"m.text"},"ts":1534388888000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yep, just need to do the work. https://github.com/whatwg/streams/issues/778","msgtype":"m.text"},"ts":1534391924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i've never felt so jaded as seeing a series of promises resolve with { value, done } but not be an iterator lol","msgtype":"m.text"},"ts":1534391959000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"does this just need spec work?","msgtype":"m.text"},"ts":1534391981000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah and tests","msgtype":"m.text"},"ts":1534392007000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Happy to mentor if you have the time :)","msgtype":"m.text"},"ts":1534392038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sounds fun, just nervous about doing tests","msgtype":"m.text"},"ts":1534392369000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i'm not good at tests","msgtype":"m.text"},"ts":1534392372000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"We can make it work :). Maybe collaborate on a test plan (~ list of tests) first?","msgtype":"m.text"},"ts":1534392425000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But, for now, sleep time","msgtype":"m.text"},"ts":1534392472000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ðŸ‘‹","msgtype":"m.text"},"ts":1534392528000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Can someone give me editbugs for bugs.webkit.org? hober?","msgtype":"m.text"},"ts":1534407197000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or maybe I have that already","msgtype":"m.text"},"ts":1534407631000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I lost mine for Chromium somehow","msgtype":"m.text"},"ts":1534408491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wow great stuff on fieldset, zcorpan. What a mess.","msgtype":"m.text"},"ts":1534433619000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sometimes I feel the single biggest thing we could do to make HTML contribution easier would be an auto-reformatter.","msgtype":"m.text"},"ts":1534436498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, not having to worry about code formatting would be nice","msgtype":"m.text"},"ts":1534436755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can i use abstract ops from ecma262 in whatwg spec","msgtype":"m.text"},"ts":1534436812000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"like IteratorComplete","msgtype":"m.text"},"ts":1534436816000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: yeah, but you gotta declare them ahead of time","msgtype":"m.text"},"ts":1534436849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also how do i build this","msgtype":"m.text"},"ts":1534436863000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"local-watch just errors that index.bs is missing","msgtype":"m.text"},"ts":1534436881000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: which spec?","msgtype":"m.text"},"ts":1534436915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"streams","msgtype":"m.text"},"ts":1534436920000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: make remote","msgtype":"m.text"},"ts":1534436949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: assuming you have node modules","msgtype":"m.text"},"ts":1534436954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh hey a makefile","msgtype":"m.text"},"ts":1534436982000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: if you have bikeshed installed you can also do make local","msgtype":"m.text"},"ts":1534436983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lol curl: (22) The requested URL returned error: 400 Bad Request","msgtype":"m.text"},"ts":1534436998000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"is my spec that bad","msgtype":"m.text"},"ts":1534437006000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: make deploy might give more detailed feedback","msgtype":"m.text"},"ts":1534437034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nope just 400","msgtype":"m.text"},"ts":1534437056000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: really? huh, it should also poke at bikeshed and print errors from bikeshed","msgtype":"m.text"},"ts":1534437082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bikeshed is giving 400","msgtype":"m.text"},"ts":1534437094000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"here's what i did so far https://www.irccloud.com/pastebin/yssMUcXA/broken.diff","msgtype":"m.text"},"ts":1534437111000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: streams is special","msgtype":"m.text"},"ts":1534437129000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1534437132000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Let me help","msgtype":"m.text"},"ts":1534437137000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's special in a way that makes things easier","msgtype":"m.text"},"ts":1534437142000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"easy would be `make` making the spec >.>","msgtype":"m.text"},"ts":1534437155000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It does!","msgtype":"m.text"},"ts":1534437168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/streams/blob/master/Makefile","msgtype":"m.text"},"ts":1534437183000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you use \"local\" it'll probably give better error messages","msgtype":"m.text"},"ts":1534437198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But my guess from source inspection is that Bikeshed doesn't like \"method names\" that have brackets in them","msgtype":"m.text"},"ts":1534437208000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's weird though that make deploy doesn't give useful error messages","msgtype":"m.text"},"ts":1534437217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Since api.csswg.org does seem to be up","msgtype":"m.text"},"ts":1534437224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how do i specify Symbol.asyncIterator","msgtype":"m.text"},"ts":1534437226000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: so I think just remove `method` for now and we can file a Bikeshed bug about this later","msgtype":"m.text"},"ts":1534437237000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Assuming that's the fix","msgtype":"m.text"},"ts":1534437241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1534437244000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: I think this is a known issue","msgtype":"m.text"},"ts":1534437246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh i should also do @@ right","msgtype":"m.text"},"ts":1534437249000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: also, FWIW, if you're stuck you should feel free to upload a PR","msgtype":"m.text"},"ts":1534437281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ey it built","msgtype":"m.text"},"ts":1534437286000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: oh, no, you fixed this in https://github.com/whatwg/whatwg.org/pull/160, hrm","msgtype":"m.text"},"ts":1534437290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what's still \"broken\" is that we don't fail on it happening, but you should get console messages","msgtype":"m.text"},"ts":1534437321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1534437322000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm, is there anything spec-wise for asking an HTTP server to return the response in reverse?","msgtype":"m.text"},"ts":1534437323000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: what does that even mean :)","msgtype":"m.text"},"ts":1534437333000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I know it sounds weird lol, let's say I have a file that contains \"12345\", I'd want it to return \"54321\"","msgtype":"m.text"},"ts":1534437353000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: if you know the length you can ask it byte for byte using ranges...","msgtype":"m.text"},"ts":1534437362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so reading that issue","msgtype":"m.text"},"ts":1534437374000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the one about async iterators","msgtype":"m.text"},"ts":1534437377000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"benjamingr_: otherwise, I don't think so","msgtype":"m.text"},"ts":1534437379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do we still want iterator(options)","msgtype":"m.text"},"ts":1534437380000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Yeah - though that's a bit quirky compared to it - basically I wanted to know if there is a way to \"race\" two HTTP servers (with streaming fetch). I didn't guess there was a way but I thought it was worth asking about.","msgtype":"m.text"},"ts":1534437406000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"On another similar note - is there a security-related reason that range requests trigger preflight checks? (If so, can I read about it?)","msgtype":"m.text"},"ts":1534437437000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"devsnek: are you adding `[Symbol.asyncIterator]` to whatwg streams :D ?","msgtype":"m.text"},"ts":1534437480000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: https://github.com/whatwg/fetch/pull/560","msgtype":"m.text"},"ts":1534437516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and pointers from there)","msgtype":"m.text"},"ts":1534437525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"benjamingr_: thats my intention","msgtype":"m.text"},"ts":1534437531000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: awesome <3 let me know if you want ergonomics - I use whatwg streams as async iterators at work very often.","msgtype":"m.text"},"ts":1534437596000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"devsnek: I think it'd be good to add iterator(options), but you could do it as a follow-up. The benefit of doing them together is that they'll probably get implemented together. But if you do them in quick sequence after each other that'll likely also happen.","msgtype":"m.text"},"ts":1534437609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i don't see much of a reason not to do them together","msgtype":"m.text"},"ts":1534437624000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: thanks, that's very helpful.","msgtype":"m.text"},"ts":1534437624000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"devsnek: just to save you some work.","msgtype":"m.text"},"ts":1534437636000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"am i allowed to use Await and Yield in random productions","msgtype":"m.text"},"ts":1534437656000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: also IMO it should auto-close and auto-release, I'll say that on the thread.","msgtype":"m.text"},"ts":1534437657000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah i agree with that","msgtype":"m.text"},"ts":1534437664000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"common case will definitely be that","msgtype":"m.text"},"ts":1534437674000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Can I have a link to the said thread?","msgtype":"m.text"},"ts":1534437682000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"devsnek: we haven't so far, and I think those are a bit ill-founded. You should be able to get away with just promise stuff.","msgtype":"m.text"},"ts":1534437689000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/whatwg/streams/issues/778","msgtype":"m.text"},"ts":1534437695000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"benjamingr_: your thoughts would be much appreciated","msgtype":"m.text"},"ts":1534437704000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"devsnek: really cool youâ€™re working on this, please consider blogging about it on blog.whatwg.org once done","msgtype":"m.text"},"ts":1534438298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'll tweet it about it","msgtype":"m.text"},"ts":1534438321000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: whats wrong with yield","msgtype":"m.text"},"ts":1534438328000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: well both Await() and Yield() in specs seem to not cause their containing functions to return the right thing, like they do in JS. But I haven't looked closely.","msgtype":"m.text"},"ts":1534438375000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think it should be possible to just spec them to return the result of ReadableStreamDefaultReaderRead() or whatever though, and not need any of that?","msgtype":"m.text"},"ts":1534438395000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wdym return the right thing","msgtype":"m.text"},"ts":1534438412000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"A certain concern with AsyncIterators for streams is how to do BYOB. In my opinion the simplest option is to simply not support it given the alternatives. It's totally doable and I recently explored it but I don't think it's particularly worth it.","msgtype":"m.text"},"ts":1534438458000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"maybe we can just do what 262 does and say \"the algorithm is implementation defined but it should behave like this block of javascript code\" ðŸ˜†","msgtype":"m.text"},"ts":1534438647000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"It does that?","msgtype":"m.text"},"ts":1534439041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://tc39.github.io/ecma262/#sec-enumerate-object-properties","msgtype":"m.text"},"ts":1534439256000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Thatâ€™s a lil different, but okay","msgtype":"m.text"},"ts":1534439323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no implementation of 262 follows that though so its kinda a moot point","msgtype":"m.text"},"ts":1534439350000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: so instead of doing await/yield should i do like a ReadableStreamDefaultControllerAsyncIteratorPrototype design?","msgtype":"m.text"},"ts":1534439720000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: thanks :)","msgtype":"m.text"},"ts":1534442054000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"devsnek: right, that's what I was thinking, a new class","msgtype":"m.text"},"ts":1534443594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"devsnek: (sorry to disappear, had a block of meetings)","msgtype":"m.text"},"ts":1534443613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"right thing\" = promise or generator. At least for Await(), it's pretty magic in the spec, and you can use it inside just normal sync functions and it'll suspend your execution context, which is tricky.","msgtype":"m.text"},"ts":1534443647000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"isn't the only difference between functions in the spec the grammar that is allowed","msgtype":"m.text"},"ts":1534443693000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I mean depending on how you deifne \"only\", I suppose so","msgtype":"m.text"},"ts":1534444538000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ugh, embed is non-interoperable. But will anyone actually care about fixing it?","msgtype":"m.text"},"ts":1534447029000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm it's a bit sad that if you use shadow DOM fragment navigation breaks. Expected I guess since IDs are not unique any more. Still, I wonder if there's anything we can do...","msgtype":"m.text"},"ts":1534454870000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah nevermind, as long as you reproject content into the light DOM it's OK. https://plum-earth.glitch.me/","msgtype":"m.text"},"ts":1534455228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: mkwst: have you seen https://github.com/WebAssembly/content-security-policy/blob/master/proposals/CSP.md#proposed-origin-bound-permission  ? This proposal seems a little strange to me, but I'm not sure why. I guess I'm confused as to whether things like CSP and SRI are supposed to protect fetches, or executing, or what.","msgtype":"m.text"},"ts":1534462441000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Basically, we have models already for how CSP and SRI affect HTML elements like <script>, and how they affect APIs that execute scripts from URLs like importScripts() or import(), and how they affect APIs that execute scripts from strings like eval() and setTimeout()","msgtype":"m.text"},"ts":1534462497000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But WebAssembly.instantiateStreaming/compileStreaming accept neither URLs nor strings; they accept Responses, which are sort of in between.","msgtype":"m.text"},"ts":1534462520000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not sure what the right way to apply the model is, but the proposal seems to be trying to treat them more like URL-accepting APIs I guess, by maintaining the relevant data with the response?","msgtype":"m.text"},"ts":1534462556000,"senderName":"Domenic","senderId":"Domenic@irc"}
]