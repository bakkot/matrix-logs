[
{"content":{"body":"jugglinmike: https://github.com/web-platform-tests/wpt/issues/18354 might help, though it hasn't been maintained so maybe it's not that useful...","msgtype":"m.text"},"ts":1593069429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan: Looking at https://html.spec.whatwg.org/#fetch-a-single-module-script the logical place to enforce the type is before you create a module script. What HTML PR 5658 seems to do is to always respect the server in terms of what to create, which creates the problem that if I import something as JSON and it declares itself as JavaScript, it'll get to fetch further subresources. Or am I misunderstanding something?","msgtype":"m.text"},"ts":1593079529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah no, I guess the further fetching doesn't happen","msgtype":"m.text"},"ts":1593079711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But the parsing did, which seems weird","msgtype":"m.text"},"ts":1593079730000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, I guess since the failure is in \"fetch a single module script\", it won't recurse until that succeeds. the intention was to be equivalent to just caching the result of the first fetch without interpreting it (so that it wouldn't be retried if the first type supplied was wrong); I agree that we shouldn't let subresources to be fetched in this case.","msgtype":"m.text"},"ts":1593080620000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, no subresource fetching or linking happens until the right type is provided","msgtype":"m.text"},"ts":1593080636000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"The parse itself seems concerning as well though","msgtype":"m.text"},"ts":1593080655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"another way to word this would be to just cache the MIME type and response body, but it turned out that that was observably equivalent to parsing it and storing it in the map eagerly","msgtype":"m.text"},"ts":1593080660000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we could rephrase it that other way. i was thinking it might be enough to just write a note explaining that engines could delay the parse if they want to","msgtype":"m.text"},"ts":1593080679000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"or maybe this is observable because you can see the difference between a parse error and a type check error?","msgtype":"m.text"},"ts":1593080729000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"It's a little hard to tell for me what the various observable bits are today and also what they might become as add more parsers into the mix","msgtype":"m.text"},"ts":1593080817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as we add*","msgtype":"m.text"},"ts":1593080846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: looking into the PR Preview issue.","msgtype":"m.text"},"ts":1593080846000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: seems to be some authentification issue between the app and GitHub.","msgtype":"m.text"},"ts":1593080865000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I tried looking into it myself, but I couldn't really find any recent change that might have done this","msgtype":"m.text"},"ts":1593080877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, it's something that change for an auth perspective.","msgtype":"m.text"},"ts":1593080901000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that makes sense as it basically doesn't seem to be picking up anything, despite being authorized in the WHATWG org","msgtype":"m.text"},"ts":1593080911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I'm getting bad credentials all over the place.","msgtype":"m.text"},"ts":1593080936000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: That makes sense ,thanks for raising this issue","msgtype":"m.text"},"ts":1593080947000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"annevk: a bug in the logger hasn't logged those as errors, which is why I didn't hear about them.","msgtype":"m.text"},"ts":1593080961000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: a beautiful cascade","msgtype":"m.text"},"ts":1593081009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right?","msgtype":"m.text"},"ts":1593081019000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: https://developer.github.com/changes/2020-04-15-replacing-create-installation-access-token-endpoint/","msgtype":"m.text"},"ts":1593081107000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This might be the issue.","msgtype":"m.text"},"ts":1593081116000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: but they're way ahead of their plans if that's the case","msgtype":"m.text"},"ts":1593081137000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, that'd be weird","msgtype":"m.text"},"ts":1593081262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's what the error I'm getting points to, though.","msgtype":"m.text"},"ts":1593081299000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I guess update and maybe let GitHub know? Though you'd think they have a working log themselves","msgtype":"m.text"},"ts":1593081347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, testing first to see if this fixes it.","msgtype":"m.text"},"ts":1593081371000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: so I'm clearly onto something here.","msgtype":"m.text"},"ts":1593081490000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: can you give it a spin?","msgtype":"m.text"},"ts":1593081596000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: please?","msgtype":"m.text"},"ts":1593081603000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: seems like it's working for me here.","msgtype":"m.text"},"ts":1593081633000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: will do","msgtype":"m.text"},"ts":1593081858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ty","msgtype":"m.text"},"ts":1593081865000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: will it pick up PRs without PR Preview annotations if I edit OP?","msgtype":"m.text"},"ts":1593081925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I made an edit to https://github.com/whatwg/html/pull/5668 just now","msgtype":"m.text"},"ts":1593081937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1593081942000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah, there it is","msgtype":"m.text"},"ts":1593081945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"üòä","msgtype":"m.text"},"ts":1593081955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"‚ù§Ô∏è","msgtype":"m.text"},"ts":1593081959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks tobie!","msgtype":"m.text"},"ts":1593081972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://twitter.com/tobie/status/1276103795940958209","msgtype":"m.text"},"ts":1593081992000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: np","msgtype":"m.text"},"ts":1593082009000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: filing a couple of bugs to improve the logging for this.","msgtype":"m.text"},"ts":1593082024000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: and also automate pr-preview going over failed updates when such a problem occurs.","msgtype":"m.text"},"ts":1593082073000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: https://github.com/tobie/pr-preview/issues/74 and https://github.com/tobie/pr-preview/issues/75","msgtype":"m.text"},"ts":1593082406000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"littledan: note that if you don't cache the parse, you end up parsing redundantly","msgtype":"m.text"},"ts":1593082469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, the idea is that, if the type mismatches, you cache the response body + MIME type, and the first time it's imported with the type matching, then you replace the cache entry with the parsed module","msgtype":"m.text"},"ts":1593087298000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: I suppose that might work, even if it's a bit complex; what's the reason to reject Domenic's idea?","msgtype":"m.text"},"ts":1593087465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The core reason is, we've heard from some JS developers that it'd be confusing to \"clone\" a module just because it's imported with different attributes; some people have the intuition that there's a 1:1 mapping module specifier <-> module.","msgtype":"m.text"},"ts":1593087600000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"in the case of `type`, we in fact have no reason to \"clone\". So it makes sense to use an import condition, which is just a check.","msgtype":"m.text"},"ts":1593087628000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"so, the intuitions are directly opposite; we just have to choose whether we consider the import conditions to be part of the extended module specifier or not. TC39 got to Stage 2 based on the explicit agreement that they're not part of it, but we could revisit that if needed.","msgtype":"m.text"},"ts":1593087746000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"you can see the concerns expressed, e.g., in this thread https://github.com/openjs-foundation/standards/issues/91","msgtype":"m.text"},"ts":1593088449000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"as well as this one https://github.com/tc39/proposal-import-attributes/issues/30","msgtype":"m.text"},"ts":1593088479000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"we're open to a separate proposal which would provide attributes which *do* form part of the extended specifier; it just seems like a semantically separate feature, and not one that we'd use for non-JS module types","msgtype":"m.text"},"ts":1593088516000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"to me it seems weird to do multiple fetches that are exactly the same, just because the condition applied differs","msgtype":"m.text"},"ts":1593089098000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: are they exactly the same or do we use Accept in some way?","msgtype":"m.text"},"ts":1593089209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the current PR doesn't use Accept in any way. Should we use it?","msgtype":"m.text"},"ts":1593089233000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this was something I wanted to ask to people who know more about fetch than me","msgtype":"m.text"},"ts":1593089245000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"in various issue threads, people proposed various HTTP headers that would be affected","msgtype":"m.text"},"ts":1593089255000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: it seems like it might be useful for the server, although on the other hand now that it's effectively managed client-side anyway there's not much need for negotiation","msgtype":"m.text"},"ts":1593089287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can see that that would be a reason to consider it part of the specifier. But I don't see how it's motivated by the initial security issue.","msgtype":"m.text"},"ts":1593089294000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"it's not","msgtype":"m.text"},"ts":1593089305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it's more something we hadn't really considered about modules in general","msgtype":"m.text"},"ts":1593089335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Since it's only fairly recently that we decided to go beyond JS","msgtype":"m.text"},"ts":1593089348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if we passed in an Accept header, it would seem important to consider the type part of the specifier, since the server may override the URL to support multiple different module types, and you wouldn't want caching to block access to that.","msgtype":"m.text"},"ts":1593089367000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"however, this may be confusing to JS developers, if they expect the same specifier to always point to the same module","msgtype":"m.text"},"ts":1593089393000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"There's https://wiki.whatwg.org/wiki/Why_not_conneg to not do it","msgtype":"m.text"},"ts":1593089447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh I wasn't aware of that, thanks for the reference","msgtype":"m.text"},"ts":1593089477000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"this is also interesting with respect to the ideas about passing more locale information to the server...","msgtype":"m.text"},"ts":1593089504000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"But there's a lot of push from CDNs around various other formats to do something with conneg... E.g., all of client hints","msgtype":"m.text"},"ts":1593089526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not necessarily Accept though","msgtype":"m.text"},"ts":1593089534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: https://github.com/w3c/webappsec-referrer-policy/pull/137","msgtype":"m.text"},"ts":1593094431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: commented","msgtype":"m.text"},"ts":1593095888000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: thanks","msgtype":"m.text"},"ts":1593095968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: so maybe the problem is that document.referrer isn't currently defined as following Referrer Policy, which seems like a bug","msgtype":"m.text"},"ts":1593095988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or, hmm","msgtype":"m.text"},"ts":1593096010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, me and Domenic had a discussion about this recently..i think we determined it's not a problem?","msgtype":"m.text"},"ts":1593096025000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I have vague memories of this...","msgtype":"m.text"},"ts":1593096054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"domfarolino: for initial about:blank we copy the creator URL: \"If browsingContext's creator URL is non-null, then set document's referrer to the serialization of it.\"","msgtype":"m.text"},"ts":1593096137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For navigation it does seem to account for it","msgtype":"m.text"},"ts":1593096189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think from the follow-up section in this doc (https://docs.google.com/document/d/18qOHKpUJ1N1GBxfls4XoBfeen09fxrCW0XV4Zs_FWiE/edit?ts=5ea75424#heading=h.hiccz7joqxl0) I determined about:blank iframes should inherit their creator doc's referrer policy too? memory is a bit fuzzy here though","msgtype":"m.text"},"ts":1593096285000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Or no, the spec apparently says they should, but maybe they don't?","msgtype":"m.text"},"ts":1593096321000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: document.referrer is not the policy, but something else; but in browsers it does seem to align with Referer more than it does in the spec","msgtype":"m.text"},"ts":1593096522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g., if I open an about:blank popup with no-referrer, then document.referrer reflects that whereas the spec says something else","msgtype":"m.text"},"ts":1593096558000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"files https://github.com/whatwg/html/issues/5677","msgtype":"m.emote"},"ts":1593096704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So the issue is that the referrer is the creating document's creator URL, but not censored by its referrer policy?","msgtype":"m.text"},"ts":1593096839000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah","msgtype":"m.text"},"ts":1593096919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: FWIW I added https://github.com/web-platform-tests/wpt/blob/master/referrer-policy/generic/inheritance/iframe-inheritance-about-blank.html","msgtype":"m.text"},"ts":1593096983000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"As a result of filing https://crbug.com.1075729","msgtype":"m.text"},"ts":1593097014000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"sorry, \".\" should be \"/\"","msgtype":"m.text"},"ts":1593097029000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"that's good to test too, yes; I think the spec handles that reasonably well, except for the part where our policy inheritance is a big mess","msgtype":"m.text"},"ts":1593097035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, so if we make any changes to the spec here to censor document.referrer by the creator document's referrer policy, we'll need to change the expectation here https://github.com/web-platform-tests/wpt/blob/master/referrer-policy/generic/inheritance/iframe-inheritance-about-blank.html#L48-L54","msgtype":"m.text"},"ts":1593097182000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"but yeah, referrer policy inheritance would be cool","msgtype":"m.text"},"ts":1593097271000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: isn't it censored though? It seems to be in Fx at least","msgtype":"m.text"},"ts":1593097607000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think impls censor it, but the test expects it to not be","msgtype":"m.text"},"ts":1593097636000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: So if we change the spec to match impls, we'll need to change that test","msgtype":"m.text"},"ts":1593097654000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I see, add a comment to the issue I filed?","msgtype":"m.text"},"ts":1593097671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The chrome bug I filed basically says \"Chrome censors document.referrer for about:blank iframes, but it shouldn't\"","msgtype":"m.text"},"ts":1593097674000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Just did","msgtype":"m.text"},"ts":1593097677000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I also found out today that Chrome and Safari have a \"site\"-like referrer policy for anti-tracking purposes","msgtype":"m.text"},"ts":1593100872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: whereby https://test.example.com/test?page becomes https://example.com/","msgtype":"m.text"},"ts":1593100900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: How is this RP triggered / used? surely it isn't exposed as a real value for use in `referrerpolicy=...` etc","msgtype":"m.text"},"ts":1593100935000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah, there's no public API, but maybe there should be","msgtype":"m.text"},"ts":1593100986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: When do you see this referrer policy getting used?","msgtype":"m.text"},"ts":1593101030000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: https://webkit.org/blog/9521/intelligent-tracking-prevention-2-3/","msgtype":"m.text"},"ts":1593101055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: it might be useful for sensitive-343242.registrable-domain.com","msgtype":"m.text"},"ts":1593101114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if an abort controller is signaled after a request finishes successfully but before the promise resolves","msgtype":"m.text"},"ts":1593101136000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"fetch rejects right","msgtype":"m.text"},"ts":1593101149000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: Do you see chrome mentioned in that or something?","msgtype":"m.text"},"ts":1593101197000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I'm not sure I understand","msgtype":"m.text"},"ts":1593101213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"devsnek: https://fetch.spec.whatwg.org/#dom-global-fetch","msgtype":"m.text"},"ts":1593101230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: You said \"Chrome and Safari have a...\", and pointed me to the Safari release notes, but I don't see a mention of Chrome anywhere in that article","msgtype":"m.text"},"ts":1593101264000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: oops, Fx and Safari üôÇ","msgtype":"m.text"},"ts":1593101278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see. For Fx at least, is that policy only used for document.referrer redaction, or elsewhere too?","msgtype":"m.text"},"ts":1593101312000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I'm not sure, though I did just suggest internally that we should be consistent across .referrer and Referer","msgtype":"m.text"},"ts":1593101358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Gotcha, makes sense","msgtype":"m.text"},"ts":1593101370000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"(ideally)","msgtype":"m.text"},"ts":1593101373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Alright, let's merge COEP!","msgtype":"m.text"},"ts":1593104111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I suspect I won't get to cross-origin isolated this week, but maybe","msgtype":"m.text"},"ts":1593104585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/WICG/origin-isolation/issues/31 would also be appreciated","msgtype":"m.text"},"ts":1593105976000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I have no strong opinions","msgtype":"m.text"},"ts":1593106009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: me neither. Charlie's seem pretty strong, so I guess maybe we should move back to (1)","msgtype":"m.text"},"ts":1593106033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: seems fine, also no good ideas on naming","msgtype":"m.text"},"ts":1593106066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gotta go","msgtype":"m.text"},"ts":1593106079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm.. is OI (or COI) another addition to the list of origin-related accronyms? (CORS, COEP, COOP)","msgtype":"m.text"},"ts":1593108029000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"(or COPI, for cross-origina process isolation)","msgtype":"m.text"},"ts":1593108049000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"(or COACI, given the term agent cluster is used in spec language)","msgtype":"m.text"},"ts":1593108111000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"maybe the specs can be merged into larger one, we can call it Big O.","msgtype":"m.text"},"ts":1593108211000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"If you feel a need to abbreviate \"origin isolation\", I would suggest \"OI\"","msgtype":"m.text"},"ts":1593109047000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: r? on https://github.com/tabatkins/bikeshed/pull/1711 when you got time","msgtype":"m.text"},"ts":1593127071000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]