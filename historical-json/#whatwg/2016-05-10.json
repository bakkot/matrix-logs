[
{"content":{"body":"goes to bed early too","msgtype":"m.emote"},"ts":1462862410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: does the change to DOM to go from scoped to composed look okay?","msgtype":"m.text"},"ts":1462863991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Let me take a look..","msgtype":"m.text"},"ts":1462864162000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"annevk: LGTM-ed in https://github.com/whatwg/dom/pull/244 :)","msgtype":"m.text"},"ts":1462864205000,"senderName":"hayato","senderId":"hayato@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1462864402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't quite understand what https://github.com/w3c/webcomponents/issues/432 is about, but aren't we still mixing Nodes and other event targets since Window object is in the path","msgtype":"m.text"},"ts":1462871380000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: the problem is only when we start with a non-node event target I think","msgtype":"m.text"},"ts":1462871534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: https://github.com/whatwg/dom/pull/247","msgtype":"m.text"},"ts":1462872947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I tried to explain the reasoning why we can revert it in https://github.com/whatwg/dom/pull/247","msgtype":"m.text"},"ts":1462872959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has anyone reviewed PerformanceObserver API?","msgtype":"m.text"},"ts":1462873987000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Small aspects of it","msgtype":"m.text"},"ts":1462874153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1462874157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: Want to review https://github.com/w3c/web-platform-tests/pull/2920 ?","msgtype":"m.text"},"ts":1462874704000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(should be v quick I think, and you made the other test changes in the gecko repo)","msgtype":"m.text"},"ts":1462874739000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I'm trying to understand the vulnerability in content addressable caching (https://github.com/whatwg/fetch/issues/301#event-654674683). So, I can do a timing attack by measuring the response time of an asset based on it's integrity hash to check if this asset is already in the cache. First of all, timing attacks usually require multiple roundtrips, and after the first try the asset would ba cached, so the attack only gets one reliable data point.","msgtype":"m.text"},"ts":1462876713000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"And is it really a problem at all? With content addressable caching the asset could come from anywhere. It's not nessesarily possible to relate that back to a specific domain. Or am I wrong here?","msgtype":"m.text"},"ts":1462876780000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"Munter: that might be enough","msgtype":"m.text"},"ts":1462876780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Munter: if the content is widespread it's not necessarily possible, but if it's not it is","msgtype":"m.text"},"ts":1462876829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Munter: and I think you could do multiple attempts if your version ends up erroring somehow or doesn't permit itself being cached","msgtype":"m.text"},"ts":1462876992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But I'm not really getting a lot of information from this. It this much different that checking Element.matches(':visited') for an anchor to the same asset?","msgtype":"m.text"},"ts":1462877011000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"Munter: some browsers go out of their way to protect the :visited leak","msgtype":"m.text"},"ts":1462877045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So content addresable caching could potentially be used to detect users browsing habits?","msgtype":"m.text"},"ts":1462877167000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"Munter: yeah","msgtype":"m.text"},"ts":1462877185000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1462877194000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"Munter: https://lists.w3.org/Archives/Public/public-webappsec/2014Oct/thread.html#msg0 has a bit of past ramblings, not all coherent","msgtype":"m.text"},"ts":1462877746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1462878638000,"senderName":"Munter","senderId":"Munter@irc"},
{"content":{"body":"JakeA: ping","msgtype":"m.text"},"ts":1462894434000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hey!","msgtype":"m.text"},"ts":1462894444000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hi!  so how strongly do you feel about throwing in the fetch event handler not triggering a network error?","msgtype":"m.text"},"ts":1462894474000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"was that a carefully planned spec detail?","msgtype":"m.text"},"ts":1462894482000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I can't remember how carefully planned it was, but it feels platform consistent. If an error is thrown in a click listener, it doesn't prevent the default click action","msgtype":"m.text"},"ts":1462894626000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but we do fail the sw install if the install event handler throws","msgtype":"m.text"},"ts":1462894671000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess I don't have strong feeling... just trying to figure out if I should fix gecko to not fail the network request while we figure out our long term navigation handling questions","msgtype":"m.text"},"ts":1462894734000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: good point. I'm leaning towards not breaking navigations that error (unless say, devtools are open), so I think it's worth fixing","msgtype":"m.text"},"ts":1462894792000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok... what about if evt.respondWith() is called and then it throws?","msgtype":"m.text"},"ts":1462894826000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: then it's down to whatever respondWith resolves with I think","msgtype":"m.text"},"ts":1462894856000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but if the throwing code results in the respondWith() promise never resolving (maybe its IDB code or something), then you hang the network request for a long time","msgtype":"m.text"},"ts":1462894888000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess I can just make it ignore thrown exceptions in fetch event for now","msgtype":"m.text"},"ts":1462894973000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: my hunch is that'd be rare. respondWith seems to be the last thing called in fetch listeners","msgtype":"m.text"},"ts":1462894983000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well, it might do some waitUntil() background caching... but that would not break the respondWith() I guess","msgtype":"m.text"},"ts":1462895022000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I'll do that... and write a spec issue since I think spec currently says to fail the network request if you respondWith() is called and the handler throws","msgtype":"m.text"},"ts":1462895153000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Munter: imo (I've discussed this with others in security), the history leak from content-hashes is minimal and ignorable. As you say, it's a *destructive* timing leak; after the first attempt (by *anyone*), it's ruined for everyone until it drops from cache.  And anyone conducting a history attack pollutes the cache for any subsequent history attacks.","msgtype":"m.text"},"ts":1462895182000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Cheers!","msgtype":"m.text"},"ts":1462895202000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks for clarifying for me... sometimes I can't tell whats intentional or not in the spec :-)","msgtype":"m.text"},"ts":1462895229000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"And a single-attempt timing attack is mostly useless anyway; timing attacks are rarely reliable in a single hit; you have to repeat the attack to minimize noise.","msgtype":"m.text"},"ts":1462895240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"botie, ask heycam|away to ping me about webidl and sequences","msgtype":"m.text"},"ts":1462895549000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1462895549000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"halindrome, what's up?","msgtype":"m.text"},"ts":1462895590000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Tab asked me to ping about expressing sdequences in WebIDL","msgtype":"m.text"},"ts":1462895647000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"'cause I dont know how and someone here does","msgtype":"m.text"},"ts":1462895657000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"Ask away","msgtype":"m.text"},"ts":1462895679000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"lets say I have an attribute foo.  and foo is a sequence of DOMStrings...","msgtype":"m.text"},"ts":1462895735000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"an array","msgtype":"m.text"},"ts":1462895749000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"what is the proper WebIDL syntax for that, and will ReSpec grok it","msgtype":"m.text"},"ts":1462895762000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1462895772000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Attributes can't be sequences","msgtype":"m.text"},"ts":1462895785000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah... read that in the WebIDL spec.","msgtype":"m.text"},"ts":1462895800000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"More likely, you want https://heycam.github.io/webidl/#idl-frozen-array","msgtype":"m.text"},"ts":1462895826000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"but.... the data structure in question works that way.  I think the real answer is \"dont use webidl\" for this","msgtype":"m.text"},"ts":1462895827000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"That's not the answer","msgtype":"m.text"},"ts":1462895836000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If you have a data structure where you have to return a new array object on every access, you should make it a method, not an attribute","msgtype":"m.text"},"ts":1462895875000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I appreciate that if there were any interface.  This is literally a data structure.  There will never be any \"API\" to it.  At least, thats what I think.","msgtype":"m.text"},"ts":1462895979000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"I don't know what that means","msgtype":"m.text"},"ts":1462896005000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Think JS. It's just an Object.","msgtype":"m.text"},"ts":1462896027000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"part of a message that gets passed around between methods.  also in JS.  Sometimes among different systems, but if so via JSON.","msgtype":"m.text"},"ts":1462896080000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"anywya - thansk for the FrozenArray pointer.  I will see about adding FrozenArray to respec","msgtype":"m.text"},"ts":1462896135000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"JakeA: https://github.com/slightlyoff/ServiceWorker/issues/896","msgtype":"m.text"},"ts":1462896567000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ohh, good detail, cheers","msgtype":"m.text"},"ts":1462896606000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"halindrome: I strongly suggest you run this stuff thru implementors. We describe everything on the platform in WebIDL. Something being passed between methods means it's a data structure that can get checked.","msgtype":"m.text"},"ts":1462896742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At the bare minimum you can just WebIDL it as an \"object\" and do every operation in prose, but that's fragile and silly and you'll get things wrong.","msgtype":"m.text"},"ts":1462896783000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks.","msgtype":"m.text"},"ts":1462896889000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"also, fwiw, this is nothing I would ever envision a browser implementor putting in an api.  but I digress.","msgtype":"m.text"},"ts":1462897158000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"wonders why service workers uses [Unforgeable] so much","msgtype":"m.emote"},"ts":1462898106000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Woah, that is bizarre","msgtype":"m.text"},"ts":1462898290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: filed https://github.com/slightlyoff/ServiceWorker/issues/897","msgtype":"m.text"},"ts":1462898410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: Google's security team said something else last time around","msgtype":"m.text"},"ts":1462899988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We disagree internally.","msgtype":"m.text"},"ts":1462899999000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I see","msgtype":"m.text"},"ts":1462900020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: How are you managing to get such weird markup in your PR messages?","msgtype":"m.text"},"ts":1462902758000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1462902765000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1462902770000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I forgot to edit the commit message","msgtype":"m.text"},"ts":1462902775000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"GitHub gets confused by <style> elements","msgtype":"m.text"},"ts":1462902801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how bizarre","msgtype":"m.text"},"ts":1462902836000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"any hints where tests for table.rows might be in https://github.com/w3c/web-platform-tests/tree/master/html","msgtype":"m.text"},"ts":1462908658000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nm, https://github.com/w3c/web-platform-tests/blob/master/html/semantics/tabular-data/the-table-element/table-rows.html","msgtype":"m.text"},"ts":1462908705000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"jgraham: I lost the link how to run wpt tests easily","msgtype":"m.text"},"ts":1462909941000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm, but now I found another way. http://w3c-test.org/*","msgtype":"m.text"},"ts":1462910080000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there's some magic runner in a subdirectory there","msgtype":"m.text"},"ts":1462910278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"can't find it","msgtype":"m.text"},"ts":1462910352000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, there was some web app -like runner somewhere","msgtype":"m.text"},"ts":1462910362000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: tools/runner/index.html","msgtype":"m.text"},"ts":1462912870000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"smaug____: But also |mach web-platform-tests| if you just want to run ones that are in a gecko tree","msgtype":"m.text"},"ts":1462912889000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sure, but I was comparing different browsers","msgtype":"m.text"},"ts":1462912913000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and thanks","msgtype":"m.text"},"ts":1462912929000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah, unfortunately other browsers aren't quite sophisicated enough ;)","msgtype":"m.text"},"ts":1462912942000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: thanks... sorry for messing those script references up","msgtype":"m.text"},"ts":1462913376000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no problem. running the real web platform tests against the reference impl now so should be able to catch things :)","msgtype":"m.text"},"ts":1462913416000,"senderName":"Domenic","senderId":"Domenic@irc"}
]