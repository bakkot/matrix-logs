[
{"content":{"body":"Domenic: Seems like Gecko's WebIDL parser got ExceptionClass already.","msgtype":"m.text"},"ts":1455668481000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: html5lib is still not part of the standard Python library, right?","msgtype":"m.text"},"ts":1455673447000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it needs to be installed separately?","msgtype":"m.text"},"ts":1455673463000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Dunno if it is or not, but yeah, I install it separately.","msgtype":"m.text"},"ts":1455673470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1455673475000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the default lxml.html parser seems to be more conforming than it was in the past","msgtype":"m.text"},"ts":1455673530000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: have you run into any specific problems just using the lxml.html parser rather than html5lib?","msgtype":"m.text"},"ts":1455673577000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Haven't tried.","msgtype":"m.text"},"ts":1455673619000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1455673624000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well the main reason I use html5lib is not because I’ve had any specific problems with the lxml.html parser but instead because I don’t trust it without being able to know what it’s actually doing","msgtype":"m.text"},"ts":1455673712000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: OK fwiw, some quick testing reveals that the lxml.html parser fails to conform in some very basic ways; for example, if the input lacks a <head> start tag, it doesn’t put a `head` element into the tree","msgtype":"m.text"},"ts":1455674486000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":" Heh, cool.","msgtype":"m.text"},"ts":1455674734000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ugh, UI Events apparently still tries to redefine the event architecture","msgtype":"m.text"},"ts":1455702237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: after resolving some more errors i am getting this as the output to wattsi https://paste.kde.org/pqrs9qnvj is this correct?","msgtype":"m.text"},"ts":1455702324000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: because the build script works the same as not giving the line numbers","msgtype":"m.text"},"ts":1455702355000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: that seems like you successfully compiled wattsi yes","msgtype":"m.text"},"ts":1455702677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: and there's no error on that line?","msgtype":"m.text"},"ts":1455702905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no it doesn't show up the line, the error is given like this https://paste.kde.org/pnwe0pi5f","msgtype":"m.text"},"ts":1455702974000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: oh that looks correct","msgtype":"m.text"},"ts":1455703069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ritsyy: you missed an end tag somewhere","msgtype":"m.text"},"ts":1455703079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh didn't it shows up the line number?","msgtype":"m.text"},"ts":1455703118000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"annevk: oh then i will look into the changes","msgtype":"m.text"},"ts":1455703147000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"it cannot really tell until it sees </body> that you didn't close your tag","msgtype":"m.text"},"ts":1455703158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm assuming the line that it gives you is </body>","msgtype":"m.text"},"ts":1455703170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh okay, i am looking into it, thanks","msgtype":"m.text"},"ts":1455703283000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"Unprefixed fullscreen api in Firefox 47, finally","msgtype":"m.text"},"ts":1455716620000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____: so conceptually we'd have \"dispatch\" invoke something like while(target = target.getParent(event)) path.append(target) and node and document implement this getParent function slightly differently","msgtype":"m.text"},"ts":1455724137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: as would IDB objects","msgtype":"m.text"},"ts":1455724163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: and then when Shadow DOM gets integrated properly we'd change the implementation of nodes a bit further","msgtype":"m.text"},"ts":1455724181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hayato: ^^","msgtype":"m.text"},"ts":1455724188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1455725553000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think that should be quite clear for the spec","msgtype":"m.text"},"ts":1455725586000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think in new Shadow DOM the propagation would be close to XBL: http://mxr.mozilla.org/mozilla-central/source/dom/base/FragmentOrElement.cpp#890","msgtype":"m.text"},"ts":1455725680000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it's somewhat shitty that getParent needs that event argument for the Window case, but what can you do...","msgtype":"m.text"},"ts":1455725964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"'load' is horrible special case","msgtype":"m.text"},"ts":1455725999000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"This new webkit stuff is pretty horrible too though, geez","msgtype":"m.text"},"ts":1455726041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: any reason Gecko passes the whole event to getParent and not just the type?","msgtype":"m.text"},"ts":1455726129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: or even just a boolean whether it's a load or not","msgtype":"m.text"},"ts":1455726146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, Gecko passes a visitor object. And that has pointers to various things. And event.type is used also in HTMLInputElement for example when click event on checkbox before dispatch needs to switch the state, and if event is cancelled, the state is reverted back","msgtype":"m.text"},"ts":1455726326000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"this is because there is then PostHandleEvent on each event target called","msgtype":"m.text"},"ts":1455726358000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"after the normal DOM event handling","msgtype":"m.text"},"ts":1455726372000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"visitor object has also a pointer to the eventtarget in case there is retargetting happening (this is XBL stuff mostly)","msgtype":"m.text"},"ts":1455726435000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"aah, this is how the <input> stuff works","msgtype":"m.text"},"ts":1455726475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so we could finally define that more clearly if I add these hooks","msgtype":"m.text"},"ts":1455726486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"great","msgtype":"m.text"},"ts":1455726490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/dom/events/EventDispatcher.h#50 There is the generic visitor which is then extended by pre and post visitors","msgtype":"m.text"},"ts":1455726500000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: well, the setup is against the current spec","msgtype":"m.text"},"ts":1455726548000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: oh, after event dispatch we need to cycle through the parents too?","msgtype":"m.text"},"ts":1455726556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like, dispatching mouseevent 'click' manually needs to trigger links per web compatibility, but IIRC per spec it shouldn't","msgtype":"m.text"},"ts":1455726587000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and click() just dispatches event, and if the event wasn't cancelled, then trigger link","msgtype":"m.text"},"ts":1455726613000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ah yes, but that is different from click on checkbox stuff iirc","msgtype":"m.text"},"ts":1455726624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, this setup does iterate the chain again for post phase","msgtype":"m.text"},"ts":1455726646000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"okay, so I'll first define this setup purely for getting the event path and then we can go from there","msgtype":"m.text"},"ts":1455726733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks, this is really helpful","msgtype":"m.text"},"ts":1455726778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm rather subjective here, but the setup Gecko has (has had since 2006), has proved to be very flexible and still fast.  That IDB case for example was trivial to implement.","msgtype":"m.text"},"ts":1455726892000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: something else: do you recall if we have cases where some property or interface is hidden based on some state","msgtype":"m.text"},"ts":1455727381000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I don't think we do that","msgtype":"m.text"},"ts":1455727435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: at least, not that I'm aware of","msgtype":"m.text"},"ts":1455727445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not even with this all secure context stuff","msgtype":"m.text"},"ts":1455727454000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: there's a proposal to hide APIs for insecure contexts, yes","msgtype":"m.text"},"ts":1455727465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: but in that case the state would be immutable","msgtype":"m.text"},"ts":1455727479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure if I like that though","msgtype":"m.text"},"ts":1455727491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just commented in the bug, but I was just thinking the possibility to hide .history and History in shadow-iframes","msgtype":"m.text"},"ts":1455727509000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"could be a silly idea","msgtype":"m.text"},"ts":1455727514000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'd think pages end up throwing on that too","msgtype":"m.text"},"ts":1455727774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can do DOM if you want but HTML scares me.","msgtype":"m.text"},"ts":1455741495000,"senderName":"nox_","senderId":"nox_@irc"},
{"content":{"body":"nox_: dive right in, HTML loves you and just wants to give you a big, big ... big ... hug","msgtype":"m.text"},"ts":1455744358000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: how should i xref a global attribute in html in another spec with bikeshed? e.g. title=\"\" attribute","msgtype":"m.text"},"ts":1455745349000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"The same way you'd ref anything else, based on whatever linking data HTML's definition exposes.  `bikeshed refs` can help.","msgtype":"m.text"},"ts":1455745397000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: what i did in webvtt stopped working recently. see https://github.com/w3c/webvtt/commit/37cfd8bdb67972221aa6434b77bcf8a09a2177cf","msgtype":"m.text"},"ts":1455745465000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It doesn't look like HTML provides a global title definition, at least from a quick look at `bikeshed refs --spec=html --text=title`?","msgtype":"m.text"},"ts":1455745483000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, I see what's happening.","msgtype":"m.text"},"ts":1455745578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So I can explain both what went wrong, and what the correct thing to do is.","msgtype":"m.text"},"ts":1455745677000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"First, correct thing:","msgtype":"m.text"},"ts":1455745683000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The global dfn *is* actually in the linking db, I just missed it.","msgtype":"m.text"},"ts":1455745702000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<a element-attr for=/>title</a> will grab it.","msgtype":"m.text"},"ts":1455745714000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Run `bikeshed refs --spec=html --text=title --type=element-attr` to find it - it's the first one.","msgtype":"m.text"},"ts":1455745775000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Second, what went wrong:","msgtype":"m.text"},"ts":1455745802000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You have title defined in your anchors block, so your autolinks were picking it up from there.","msgtype":"m.text"},"ts":1455745843000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I recently changed things, at Anne's request (and because it made sense) so that if you specify `spec` on an autolink, it ignores any local links, because you're *very explicitly* indicating that you want a foreign link.","msgtype":"m.text"},"ts":1455745906000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And things specified in the anchors block count as \"local\", so now they're skipped. ^_^","msgtype":"m.text"},"ts":1455745943000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So another way you could fix this is just to remove the `spec` attribute from your title autolinks so they can grab from your anchors block again, but that's not the best method. Do what I said above.","msgtype":"m.text"},"ts":1455746035000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ok, i removed these from the block and removed spec=html and added for=/, which seems to work (though it says there are multiple possibilities for lang, but only lists one)... but class gives a fatal error","msgtype":"m.text"},"ts":1455746091000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Interesting!","msgtype":"m.text"},"ts":1455746107000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh wait, not a crash, just an error. What's it giving?","msgtype":"m.text"},"ts":1455746133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"FATAL ERROR: No 'element-attr' refs found for 'class' with for='/'.","msgtype":"m.text"},"ts":1455746144000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for <a element-attr for=/>class</a>","msgtype":"m.text"},"ts":1455746183000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, run `bikeshed refs --spec=html --text=class --type=element-attr` and you'll see Bikeshed doesn't see anything like that.","msgtype":"m.text"},"ts":1455746198000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mang where the hell is it defined? I spot only one definition of \"class\" of any type in HTML, and it's for microdata.","msgtype":"m.text"},"ts":1455746249000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/dom.html#classes","msgtype":"m.text"},"ts":1455746279000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the id doesn't follow the same pattern as the other attributes... is that the problem?","msgtype":"m.text"},"ts":1455746363000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if so, could fix it in html","msgtype":"m.text"},"ts":1455746429000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but need to sleep now","msgtype":"m.text"},"ts":1455746437000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"will read #whatwg logs tomorrow","msgtype":"m.text"},"ts":1455746444000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"igrigorik: ping","msgtype":"m.text"},"ts":1455746534000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"igrigorik: are prefetch etc really supposed to work in any document","msgtype":"m.text"},"ts":1455746565000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and not only in documents which have browsing context","msgtype":"m.text"},"ts":1455746585000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"zcorpan: Yeah, the <dfn>class</dfn> doesn't have an ID on it, so it's not an anchor, and the heading doesn't have the right ID pattern for Shepherd to auto-detect what it's about either.","msgtype":"m.text"},"ts":1455746654000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Just add id=\"attr-class\" to the <dfn>class</dfn>.","msgtype":"m.text"},"ts":1455746675000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Doing the same to \"style\", in the next section, would be great too.","msgtype":"m.text"},"ts":1455746734000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]