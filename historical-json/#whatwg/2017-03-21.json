[
{"content":{"body":"help on MessagePort?","msgtype":"m.text"},"ts":1490075111000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: what do you mean by disabled? close() is called?","msgtype":"m.text"},"ts":1490075903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, its initial state when it was created","msgtype":"m.text"},"ts":1490075928000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"the spec says it's initially disabled","msgtype":"m.text"},"ts":1490075933000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: it doesn't say that about the port, it says that about its message queue","msgtype":"m.text"},"ts":1490075958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so in other words, if i queue a message task before start() is called, what happens?","msgtype":"m.text"},"ts":1490075965000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"does the port buffer the task?","msgtype":"m.text"},"ts":1490075980000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: the queue does","msgtype":"m.text"},"ts":1490075990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and when the queue itself is enabled, it would then fire the tasks off to their targets?","msgtype":"m.text"},"ts":1490076052000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: yeah, that's the intent, I have to say I've a hard time reading the spec as well","msgtype":"m.text"},"ts":1490076074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does the same happen for the has_been_shipped flag as well?","msgtype":"m.text"},"ts":1490076091000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: it could use some more refactoring maybe, though Domenic just improved some parts of this by redoing transfering and such","msgtype":"m.text"},"ts":1490076099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as in, the tasks also get buffered if the has_been_shipped flag is unset, and they would only be fired when it's set?","msgtype":"m.text"},"ts":1490076199000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"in which case, that would sound like enabling/disabling and the has_been_shipped flag does the exact same thing","msgtype":"m.text"},"ts":1490076228000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: I'm sorry, I don't think I understand the standard from a quick read","msgtype":"m.text"},"ts":1490076396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"KiChjang: as I said, this might be worthy of some refactoring","msgtype":"m.text"},"ts":1490076422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, ah ok, good thing i brought it up","msgtype":"m.text"},"ts":1490076529000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"shall i file an issue?","msgtype":"m.text"},"ts":1490076535000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: yeah","msgtype":"m.text"},"ts":1490076544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"KiChjang: did you look for tests already?","msgtype":"m.text"},"ts":1490076549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"KiChjang: might be handy to link any available tests too","msgtype":"m.text"},"ts":1490076557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, yeah, that might clarify the behaviour a bit as well","msgtype":"m.text"},"ts":1490076573000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"i was purely looking to implement it","msgtype":"m.text"},"ts":1490076586000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"MikeSmith: https://github.com/validator/validator/pull/477","msgtype":"m.text"},"ts":1490085981000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: looking at https://github.com/whatwg/infra/issues/13","msgtype":"m.text"},"ts":1490087074000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: and just to make sure I understand the context clearly—","msgtype":"m.text"},"ts":1490087098000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what you're looking for is an underlying data structure, not something that would end up in WebIDL, right?","msgtype":"m.text"},"ts":1490087146000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: just a convention I guess","msgtype":"m.text"},"ts":1490087171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so you could say something like: \"a URL that has an origin example.com\" ?","msgtype":"m.text"},"ts":1490087306000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I'm basically trying to figure out whether this intersects with having a syntax for slots","msgtype":"m.text"},"ts":1490087361000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: just so that URL records and such are grounded somehow","msgtype":"m.text"},"ts":1490087609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: slots are only for objects","msgtype":"m.text"},"ts":1490087655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: a slot could hold such a tuple though I suppose","msgtype":"m.text"},"ts":1490087683000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"An example is fetch","msgtype":"m.text"},"ts":1490088004000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A Response holds a response which is probably a tuple","msgtype":"m.text"},"ts":1490088012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(sometimes known as a \"concept-response\" after it's #anchor)","msgtype":"m.text"},"ts":1490088022000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"looking","msgtype":"m.text"},"ts":1490088327000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Mmm. In 1 <=> 1 relationships between concepts and WebIDL interfaces, I think I've been merging the two things and using slots as concept fields.","msgtype":"m.text"},"ts":1490088581000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This might be a bad idea?","msgtype":"m.text"},"ts":1490088610000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^ Domenic, annevk","msgtype":"m.text"},"ts":1490088669000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no seems good for same instance","msgtype":"m.text"},"ts":1490089372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: maybe not if not merged into one","msgtype":"m.text"},"ts":1490089398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: out for a couple hours now","msgtype":"m.text"},"ts":1490089422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: (when you're back—no hurry) how is this different for URL or response? Don't you have a 1:1 mapping?","msgtype":"m.text"},"ts":1490090269000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This seems kinda confused to me... an object has a slot which stores a concept. The concept then has lots of fields. This is useful when the concept is an independently useful entity like a response or URL.","msgtype":"m.text"},"ts":1490091295000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In other cases where there is no independently useful concept an object can have many slots","msgtype":"m.text"},"ts":1490091308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wasn't suggesting absence of confusion. Quite the opposite actually. :)","msgtype":"m.text"},"ts":1490091541000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: I guess what I was poking at was whether concepts would still exist if we had a good story for slots.","msgtype":"m.text"},"ts":1490091590000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: sounds like the answer is yes.","msgtype":"m.text"},"ts":1490091602000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, they're what you store in the slots","msgtype":"m.text"},"ts":1490091605000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: s/what/one of the things/ right?","msgtype":"m.text"},"ts":1490091671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"right :)","msgtype":"m.text"},"ts":1490091678000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: not being pedantic, just making sure we're in agreement. :)","msgtype":"m.text"},"ts":1490091712000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: so fields are slots for concepts, right?","msgtype":"m.text"},"ts":1490091753000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, or for tuples at least. Although i'm not sure we've settled on the name \"fields\".","msgtype":"m.text"},"ts":1490091814000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Basically these are all different names for \"properties\" that are intentionally different so as to be less confusing. But maybe it is making it more confusing :P","msgtype":"m.text"},"ts":1490091848000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the main reason \"internal slot\" and \"property\" are different is because they can live on the same thing, a JS/Web IDL object. (Although Web IDL calls them \"attributes\" instead of properties for... reasons.)","msgtype":"m.text"},"ts":1490091903000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes, the distinction in WebIDL makes sorta sense","msgtype":"m.text"},"ts":1490091945000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What I don't understand from infra issues 13 and 21 is why do we want to give this abstract structure for concepts concrete qualities such as a fixed sized.","msgtype":"m.text"},"ts":1490092319000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I mean... would you rather them have an unfixed size?","msgtype":"m.text"},"ts":1490092671000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":" :D","msgtype":"m.text"},"ts":1490093290000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"No, I'm basically just wondering why we need an extra structure if maps are otherwise a good solution to map concepts.","msgtype":"m.text"},"ts":1490093336000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(pun not intended)","msgtype":"m.text"},"ts":1490093387000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Well, it's the same reason that in languages we have classes/structs and not just hash maps","msgtype":"m.text"},"ts":1490094304000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sure you can represent everything as a hash map. But it's important to give names to certain types, to say their shape is always a certain way, that they can be treated as a class, that their keys are always strings, that certain operations operate on them....","msgtype":"m.text"},"ts":1490094350000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just tell tobie that hashmaps-everywhere are basically what Python does. I imagine he will find that convincing ;)","msgtype":"m.text"},"ts":1490095273000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(but ofc python does actually provide syntax over the hashmaps for the reasons that Domenic explains)","msgtype":"m.text"},"ts":1490095313000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: the only thing I truly dislike about python is significant whitespace","msgtype":"m.text"},"ts":1490095332000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"feels gimmicky","msgtype":"m.text"},"ts":1490095348000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Coming from JS (and before that, Ruby), hashmaps everywhere has a distinct homeland flavor","msgtype":"m.text"},"ts":1490095482000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"To come back to the issue at hand—I guess I'm sort of concerned that we're basically adding an lower-level type system to something that's already a lower-level type system to JS","msgtype":"m.text"},"ts":1490095610000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"do shared workers and service workers expose the exact same things as normal workers?","msgtype":"m.text"},"ts":1490099148000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: no, you can use Exposed=SharedWorker or ServiceWorker or similar.","msgtype":"m.text"},"ts":1490099253000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And people do, especially for service","msgtype":"m.text"},"ts":1490099268000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thx","msgtype":"m.text"},"ts":1490099330000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: but everything exposed on Worker is exposed in Shared/ServiceWorker? Where is that defined?","msgtype":"m.text"},"ts":1490099482000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan: yeah saw that validator PRーthanks. I just need to check out the branch and test it before merging. Will try to do that by tomorrow","msgtype":"m.text"},"ts":1490099504000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok cool. i have tested it locally, fwiw","msgtype":"m.text"},"ts":1490099658000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I see that /websockets/interfaces/WebSocket/close/close-connecting.html doesn't pass in both Firefox and Safari, should I report that?","msgtype":"m.text"},"ts":1490099738000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah probably","msgtype":"m.text"},"ts":1490102259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1490103767000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"tobie: sorry for short answers earlier, was trying to answer while walking around","msgtype":"m.text"},"ts":1490105633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no worries. :)","msgtype":"m.text"},"ts":1490105674000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: we basically invent new data structures for ease of notation or clarity on scope","msgtype":"m.text"},"ts":1490105681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure what you mean by clarity on scope, here.","msgtype":"m.text"},"ts":1490105714000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: both of those seem worthwhile and it also seems okay to have more types than JavaScript does at the moment, since JavaScript is still evolving as well","msgtype":"m.text"},"ts":1490105719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: basically what can happen to the data structure, how it can be manipulated, which aspects can change, etc.","msgtype":"m.text"},"ts":1490105754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1490105768000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Isn't what you need a struct?","msgtype":"m.text"},"ts":1490105969000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: maybe if that's like a tuple without order that'd be good, but that's also what JavaScript's Record type is I believe","msgtype":"m.text"},"ts":1490106033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: maybe JavaScript's Record type is all we really need and we should just give up on tuples, although Records are oddly flexible sometimes in that they get extra fields","msgtype":"m.text"},"ts":1490106104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: tuples don't have a key-value concept, though, do they?","msgtype":"m.text"},"ts":1490106124000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: they do in Infra's PR","msgtype":"m.text"},"ts":1490106148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so they're not *really* tuples, then","msgtype":"m.text"},"ts":1490106189000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Python has named tuples","msgtype":"m.text"},"ts":1490109126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wat","msgtype":"m.text"},"ts":1490109144000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: from collections import namedtuple","msgtype":"m.text"},"ts":1490109966000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's a type that has ordered fields","msgtype":"m.text"},"ts":1490109978000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean it's a bit weird but not that weird because python allows destructuring tuples but not objects","msgtype":"m.text"},"ts":1490110006000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/objects/other classes/ I guess","msgtype":"m.text"},"ts":1490110019000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also it's the only immutable collection type","msgtype":"m.text"},"ts":1490110059000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I guess you could say it is weird but only in the sense that Python was already weird here and we should all be using Standard ML or something","msgtype":"m.text"},"ts":1490110094000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That wouldn't be normal either!","msgtype":"m.text"},"ts":1490110601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can someone help me walk through /websockets/cookies/007.html?","msgtype":"m.text"},"ts":1490112433000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: probably zcorpan's test originally, fwiw","msgtype":"m.text"},"ts":1490113739000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"been watching Blink on 7","msgtype":"m.text"},"ts":1490113918000,"senderName":"Younder","senderId":"Younder@irc"},
{"content":{"body":"nice to see you are focusing on function instead of feature. No 1990 repeat. (worse is better)","msgtype":"m.text"},"ts":1490114000000,"senderName":"Younder","senderId":"Younder@irc"},
{"content":{"body":"The \"current settings object\" is the \"relevant settings object\" of the function that's currently executing, right?","msgtype":"m.text"},"ts":1490132085000,"senderName":"jyasskin","senderId":"jyasskin@irc"}
]