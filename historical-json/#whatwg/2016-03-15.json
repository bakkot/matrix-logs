[
{"content":{"body":"Domenic: okay","msgtype":"m.text"},"ts":1458000432000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: let me know how that goes","msgtype":"m.text"},"ts":1458000439000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"TabAtkins: is it bikeshed or specref that causes {{DOMString}} to link to http:// rather than https://?","msgtype":"m.text"},"ts":1458030617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, https://github.com/w3c/web-platform-tests/pull/2667 really is unspecified?","msgtype":"m.text"},"ts":1458031798000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: there's a number of mistakes there","msgtype":"m.text"},"ts":1458031953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: status should be 200 for a data URL, statusText \"OK\"","msgtype":"m.text"},"ts":1458031994000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: ooh wait, non-GET","msgtype":"m.text"},"ts":1458032007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: commented","msgtype":"m.text"},"ts":1458032323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1458032330000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: but yes, we need a data URL spec","msgtype":"m.text"},"ts":1458032334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Added it to https://wiki.whatwg.org/wiki/Specs/todo","msgtype":"m.text"},"ts":1458032683000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://twitter.com/mrphs/status/708548201800982528 is neat","msgtype":"m.text"},"ts":1458032788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if that should be in Fetch","msgtype":"m.text"},"ts":1458032804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which spec are you having the DOMstring issue in?","msgtype":"m.text"},"ts":1458034360000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: DOM","msgtype":"m.text"},"ts":1458034368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: https://dom.spec.whatwg.org/#dom-core-changes","msgtype":"m.text"},"ts":1458034384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: seems to be a bikeshed issue: http://www.specref.org/?q=webidl","msgtype":"m.text"},"ts":1458034444000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: afaik, bikeshed doesn't use Specref for x-spec references.","msgtype":"m.text"},"ts":1458034804000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, it uses Shepherd, sorry","msgtype":"m.text"},"ts":1458034840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is always a little confused about the whole setup","msgtype":"m.emote"},"ts":1458034854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: np","msgtype":"m.text"},"ts":1458034855000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: yeah, it's complicated is an understatement.","msgtype":"m.text"},"ts":1458034871000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: that's what you get when you have crappy data sources.","msgtype":"m.text"},"ts":1458034906000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hi all, I was wondering where I can see what the state of innerText is in terms of standardization","msgtype":"m.text"},"ts":1458035066000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: https://github.com/whatwg/html/issues/465","msgtype":"m.text"},"ts":1458035754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what does it need to get incorporated into a spec?","msgtype":"m.text"},"ts":1458035807000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"Bikeshed's unhappy with the following WebIDL:   Promise<void> start();","msgtype":"m.text"},"ts":1458035849000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Any idea why?","msgtype":"m.text"},"ts":1458035853000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(it spits out: FATAL ERROR: IDL SYNTAX ERROR LINE: 5 - skipped: \"Promise start()\")","msgtype":"m.text"},"ts":1458035874000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: perhaps it needs to be &lt;void>?","msgtype":"m.text"},"ts":1458035891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: do the <> need escaping?","msgtype":"m.text"},"ts":1458035904000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: someone needs to write formal prose","msgtype":"m.text"},"ts":1458035911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AutomatedTester: I suspect another hurdle might be lack of agreement between implementations","msgtype":"m.text"},"ts":1458035930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AutomatedTester: but I'm not sure if that should block having any spec at all","msgtype":"m.text"},"ts":1458035939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok cool","msgtype":"m.text"},"ts":1458035958000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"annevk, AutomatedTester: tried that but forgot to save before running bikeshed. #facepalm","msgtype":"m.text"},"ts":1458036019000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: :D","msgtype":"m.text"},"ts":1458036026000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1458036064000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: roc's spec describes the end state that I want, and I want to reference it in WebDriver","msgtype":"m.text"},"ts":1458036083000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"well... it's the closest thing to what I want","msgtype":"m.text"},"ts":1458036093000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"whats the best way to reference it?","msgtype":"m.text"},"ts":1458036116000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"direct to Roc's version? To the html issue?","msgtype":"m.text"},"ts":1458036139000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: both, I guess","msgtype":"m.text"},"ts":1458036570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"awesome, thanks","msgtype":"m.text"},"ts":1458036615000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"Is there a standard way to define enum members? annevk, you seem to just do: <code>\"foo\"</code>, I'm seeing slightlyoff do <em>foo</em> instead, etc.","msgtype":"m.text"},"ts":1458038632000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I use \"<code>foo</code>\" in prose","msgtype":"m.text"},"ts":1458038760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I don't see why <em> makes sense to denote a string","msgtype":"m.text"},"ts":1458038772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think slightlyoff uses it to denote the concept behind the string.","msgtype":"m.text"},"ts":1458038807000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Example?","msgtype":"m.text"},"ts":1458038824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-state-attribute","msgtype":"m.text"},"ts":1458038847000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That spec is written by JakeA and jungkees","msgtype":"m.text"},"ts":1458038866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#dfn-state","msgtype":"m.text"},"ts":1458038893000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, sorry, the original editor was slightlyoff","msgtype":"m.text"},"ts":1458038917000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That looks loosely copied from what I used to, see e.g., https://xhr.spec.whatwg.org/#dom-xmlhttprequest-readystate","msgtype":"m.text"},"ts":1458038923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I no longer think that's useful","msgtype":"m.text"},"ts":1458038936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cargo-culted I guess","msgtype":"m.text"},"ts":1458038954000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok, so you just do <code>\"foo\"</code>","msgtype":"m.text"},"ts":1458038965000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Fetch also used to format enums as <i>value</i>","msgtype":"m.text"},"ts":1458038969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I recently decided on \"<code>value</code>\"","msgtype":"m.text"},"ts":1458038979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: quotes are not part of the value","msgtype":"m.text"},"ts":1458038985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh. interesting.","msgtype":"m.text"},"ts":1458039008000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: they only illustrate it's a string, and not a byte sequence","msgtype":"m.text"},"ts":1458039010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or something else altogether, although I'm not sure what that would be)","msgtype":"m.text"},"ts":1458039024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. `<code>value</code>` is what I use for HTTP header values","msgtype":"m.text"},"ts":1458039044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure such typographical nuance is the clearest way to convey that, but I don't think it matters either.","msgtype":"m.text"},"ts":1458039060000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"since those cannot be represented by strings, but it's still nice to represent them as strings...","msgtype":"m.text"},"ts":1458039069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, there's an explainer of sorts upfront","msgtype":"m.text"},"ts":1458039087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Should we document that on the wiki?","msgtype":"m.text"},"ts":1458039087000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I hope to at some point document the styles in IDL and basically mandate them","msgtype":"m.text"},"ts":1458039121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: that might be useful","msgtype":"m.text"},"ts":1458039125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was working off of those so far: https://github.com/tabatkins/bikeshed/blob/master/docs/markup.md#autolink-shortcuts","msgtype":"m.text"},"ts":1458039167000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"+ using <var> for variables.","msgtype":"m.text"},"ts":1458039182000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"There's need to be some spec at the top of the chain that defines these low-level things in excruciating detail","msgtype":"m.text"},"ts":1458039211000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think IDL is likely the best fit, but it could be separate I suppose","msgtype":"m.text"},"ts":1458039228000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, having consistency across specs for those would be amazing (and actually allows to do a bunch of cool things on top of specs).","msgtype":"m.text"},"ts":1458039283000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It would be interesting to have some of the HTML infrastructure stuff (like \"in parallel\") there too.","msgtype":"m.text"},"ts":1458039317000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, and the math operators from Encoding (and a bunch of other things from Encoding)","msgtype":"m.text"},"ts":1458039350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And things like \"ASCII case-insensitive\"","msgtype":"m.text"},"ts":1458039372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's a long list","msgtype":"m.text"},"ts":1458039380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Going back to those enums, you don't make each member linkable, do you?","msgtype":"m.text"},"ts":1458039711000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no, though in the HTML standard that's sometimes done","msgtype":"m.text"},"ts":1458039829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, because why should things be consistant.","msgtype":"m.text"},"ts":1458039852000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1458039858000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: there's not often a clear place where you define enums, so I think stylistically it's better to not do it","msgtype":"m.text"},"ts":1458039885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I guess you could make IDL the source... dunno","msgtype":"m.text"},"ts":1458039927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: IDL wouldn't work well for Fetch, which sometimes has values outside of the range defined by IDL","msgtype":"m.text"},"ts":1458039952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm often struggling with which one should be the source.","msgtype":"m.text"},"ts":1458039954000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, I think that's why I haven't bothered to make it work","msgtype":"m.text"},"ts":1458039991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1458040001000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I would like to allow fullscreen to be requested on orientation change (screen orientation api), would you take a pull request that adds this to the spec?","msgtype":"m.text"},"ts":1458041210000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: if that's what needs to be implemented, yes","msgtype":"m.text"},"ts":1458041272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir: though a proper fix might be a change to the \"user gesture\" concept, no?","msgtype":"m.text"},"ts":1458041293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: user gesture would still make sense for stuff like autoplay, or starting a WebRTC session, etc.","msgtype":"m.text"},"ts":1458041356000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"annevk: basically, Chrome Security approved going fullscreen on orientation change but they want orientation to be a signal for some stuff, not everything","msgtype":"m.text"},"ts":1458041403000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1458041421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, please provide a PR, I guess we'll want to ask at least one other implementer to chime in, but sounds reasonable","msgtype":"m.text"},"ts":1458041455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Touch events have made the \"user gesture\" thing a bit of a nonsense","msgtype":"m.text"},"ts":1458042712000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh, why?","msgtype":"m.text"},"ts":1458042739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yes, but that's only on mobile and that's something we are looking into fixing","msgtype":"m.text"},"ts":1458042759000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"annevk: touch counts as a gesture, so you can do what you want as soon as scroll happens","msgtype":"m.text"},"ts":1458042781000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh, that's not distinguished? Hmm","msgtype":"m.text"},"ts":1458042799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure how it can be","msgtype":"m.text"},"ts":1458042813000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"mounir: ohh, what are the plans?","msgtype":"m.text"},"ts":1458042823000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is that why Apple had touch delay?","msgtype":"m.text"},"ts":1458042832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nah, that was for double-tap-to-zoom","msgtype":"m.text"},"ts":1458042845000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"touchstart was still instantly a user gesture","msgtype":"m.text"},"ts":1458042889000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I've used touchstart to make videos autoplay on mobile, which is annoying as it adds jank to the initial scroll. But it was either that or replace a 400k video with a 5mb gif","msgtype":"m.text"},"ts":1458042945000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But I believe both Chrome & WebKit are going to fix this and just allow videos to autoplay","msgtype":"m.text"},"ts":1458042981000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"<video autoplay> does not work?","msgtype":"m.text"},"ts":1458042996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I knew that","msgtype":"m.text"},"ts":1458043004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not on mobile","msgtype":"m.text"},"ts":1458043005000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: this isn't really an issue for autoplay, never heard of websites using it on the wild but it's certainly something we should fix before it becomes a problem","msgtype":"m.text"},"ts":1458043053000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Quite interesting how standards sort of theorized about an eventual smaller screen and different input handlers, but didn't address it sufficiently that it actually ended up being the model when mobile became a thing","msgtype":"m.text"},"ts":1458043086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir: true, the preferred solution is h264 decoders written in JS :(","msgtype":"m.text"},"ts":1458043094000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we have plans for that","msgtype":"m.text"},"ts":1458043108000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"And now it's nine years or so since the first iPhone and it's still a mess","msgtype":"m.text"},"ts":1458043110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not super impressive","msgtype":"m.text"},"ts":1458043121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: does it work (on mobile) to use an animated gif in <video poster>? http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4000","msgtype":"m.text"},"ts":1458045102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I hadn't considered that, but what does it buy you?","msgtype":"m.text"},"ts":1458045132000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Works on Chrome android fwiw","msgtype":"m.text"},"ts":1458045168000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"seems like a possible workaround to use a reasonably small subset of the video as a poster animated gif on an autoplaying video, to have it start the gif before the user scrolls","msgtype":"m.text"},"ts":1458045173000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and touchstart autostarts the actual video","msgtype":"m.text"},"ts":1458045190000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: looking at https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-registration-update","msgtype":"m.text"},"ts":1458049111000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: doesn't step 4 effectively prevent the promise from being returned?","msgtype":"m.text"},"ts":1458049149000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"zcorpan: maybe, but autoplay would still be better","msgtype":"m.text"},"ts":1458049150000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes for sure","msgtype":"m.text"},"ts":1458049167000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: haha, yes I think you're right","msgtype":"m.text"},"ts":1458049179000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: if memory serves, I think IDL does the right thing and converts throws to promise rejections, we should be doing that","msgtype":"m.text"},"ts":1458049220000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh, you would just throw and not care about returning anything in that case?","msgtype":"m.text"},"ts":1458049279000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Sounds harder for an implementor to get right, no?","msgtype":"m.text"},"ts":1458049298000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: maybe I just made that up https://www.w3.org/2001/tag/doc/promises-guide#example-validated-delay","msgtype":"m.text"},"ts":1458049337000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Asking because I'm in the middle of writing a similar algorithm.","msgtype":"m.text"},"ts":1458049353000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh wait, I'm right https://www.w3.org/2001/tag/doc/promises-guide#always-return-promises","msgtype":"m.text"},"ts":1458049385000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"If ms is less than zero, return a promise rejected with a RangeError.\"","msgtype":"m.text"},"ts":1458049387000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"first time in 2016","msgtype":"m.text"},"ts":1458049393000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#es-operations \"f the operation has a return type that is a promise type, then…\"","msgtype":"m.text"},"ts":1458049511000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Well, checking that would involve reading some of the prose that's in WebIDL, which my doctor strictly forbids, so no luck.","msgtype":"m.text"},"ts":1458049520000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: in short, if your algo throws and your return type is a promise, it auto-wraps the error in Promise.reject(err) and returns that","msgtype":"m.text"},"ts":1458049568000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If as an implementer you do not read IDL you are also out of luck though","msgtype":"m.text"},"ts":1458049576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, I'll just throw stuff around.","msgtype":"m.text"},"ts":1458049615000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1458049619000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We should have made IDL establish some kind of convention though since I think specifications now do both","msgtype":"m.text"},"ts":1458049630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Some reject the promise, otherwise happily throw","msgtype":"m.text"},"ts":1458049640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"others*","msgtype":"m.text"},"ts":1458049644000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That seems like a recurring theme.","msgtype":"m.text"},"ts":1458049773000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Someone needs to find some time","msgtype":"m.text"},"ts":1458049986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I've been trying to sell documenting these things to a bunch of clients in the past. Have been unsuccessful so far.","msgtype":"m.text"},"ts":1458050229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: bah","msgtype":"m.text"},"ts":1458050268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if https://drafts.csswg.org/cssom-view/#the-html-body-element should consider frameset","msgtype":"m.emote"},"ts":1458050580000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Trying to define \"shadow-host-including tree order\" is no fun","msgtype":"m.text"},"ts":1458050802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shadow-root-including, even","msgtype":"m.text"},"ts":1458051130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone recall where rniwa's tests for rootNode are","msgtype":"m.text"},"ts":1458051491000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"some pr in github I think","msgtype":"m.text"},"ts":1458051502000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: obvious place would be web-platform-tests, and indeed, https://github.com/w3c/web-platform-tests/pull/2665","msgtype":"m.text"},"ts":1458051540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1458051552000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Oops, didn't see that rniwa had updated that.","msgtype":"m.text"},"ts":1458051699000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Would be nice to get it squashed before merging","msgtype":"m.text"},"ts":1458051731000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"botie where are you","msgtype":"m.text"},"ts":1458054232000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"When do you decide to name an algorithm and reference it from a method? All the time, or just when you call said algorithm all the time?","msgtype":"m.text"},"ts":1458054235000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith ^","msgtype":"m.text"},"ts":1458054236000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I'll wait until we have [[PlatformBrand]] and then fix that issue","msgtype":"m.text"},"ts":1458054248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sounds good","msgtype":"m.text"},"ts":1458054258000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hey Domenic -- tried to fix your Specref woes to no avail.","msgtype":"m.text"},"ts":1458054267000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: when it has more than one caller, including in other specs, generally.","msgtype":"m.text"},"ts":1458054267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: yeah, I saw :(","msgtype":"m.text"},"ts":1458054276000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, the codebase is dreadful.","msgtype":"m.text"},"ts":1458054290000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"which I'm to blame for.","msgtype":"m.text"},"ts":1458054327000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: ty, had forgotten about the \"other specs\" aspect which is critical for the sensor work.","msgtype":"m.text"},"ts":1458054387000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, you know if there's a reason for language to be nullable at https://html.spec.whatwg.org/multipage/#navigatorlanguage ?","msgtype":"m.text"},"ts":1458054480000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: fascinating...","msgtype":"m.text"},"ts":1458054554000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"remembers how Web IDL return values are useless and redundant","msgtype":"m.emote"},"ts":1458054591000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ms2ger: no","msgtype":"m.text"},"ts":1458054624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They're pretty damn useful","msgtype":"m.text"},"ts":1458054629000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, want an issue?","msgtype":"m.text"},"ts":1458054640000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I guess, would be nice if we could change that","msgtype":"m.text"},"ts":1458054668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/881","msgtype":"m.text"},"ts":1458054713000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"These interfaces are defined separately so that other specifications can re-use parts of the Navigator interface.\"","msgtype":"m.text"},"ts":1458054816000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"like what?","msgtype":"m.text"},"ts":1458054819000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably WorkerNavigator","msgtype":"m.text"},"ts":1458054836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But that's the same specification","msgtype":"m.text"},"ts":1458054840000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Used not to be","msgtype":"m.text"},"ts":1458054947000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: maybe a leftover from when Hixie_ used to split workers out","msgtype":"m.text"},"ts":1458054949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I would somewhat prefer a single Navigator interface with better use of [Exposed] for individual members","msgtype":"m.text"},"ts":1458054980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But self.WorkerNavigator","msgtype":"m.text"},"ts":1458054994000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, that kinda kills it","msgtype":"m.text"},"ts":1458055015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we could just do interface WorkerNavigator {}; WorkerNavigator implements Navigator; and not expose Navigator in Worker, just its members...","msgtype":"m.text"},"ts":1458055064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1458055119000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Interfaces on the rhs of implements? Meh","msgtype":"m.text"},"ts":1458055142000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess I'll stop caring","msgtype":"m.text"},"ts":1458055163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I have a dfn of sensor which is the underlying sensor (https://w3c.github.io/sensors/#sensor) and I have a WebIDL Sensor Interface. Now when I have an algorithm that talks about an instance of Sensor, it seems natural to use <var>sensor</var> for it which is confusing. How should I go about that?","msgtype":"m.text"},"ts":1458055324000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/for it which/for it, which/","msgtype":"m.text"},"ts":1458055433000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I ran into this yesterday and decided to merge the concepts so that I can just talk about the Sensor object.","msgtype":"m.text"},"ts":1458055460000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Commas are kind of useful.","msgtype":"m.text"},"ts":1458055468000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(In my case it was CustomElementsRegistry objects. HTML also does this for Window and Document objects.)","msgtype":"m.text"},"ts":1458055478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Alternatively, concept-sensor","msgtype":"m.text"},"ts":1458055485000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"On the other hand annevk does things like URL objects having a url, which is fine.","msgtype":"m.text"},"ts":1458055498000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The problem is I have one underlying sensor which can have many associated sensor objects","msgtype":"m.text"},"ts":1458055505000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In my case I just found that I was constantly doing \"the CustomElementRegistry's custom element registry\"","msgtype":"m.text"},"ts":1458055512000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sounds like a useful distinction then yeah","msgtype":"m.text"},"ts":1458055520000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: I'd only disambiguate the variable name if it was important","msgtype":"m.text"},"ts":1458055559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: e.g., actualSensor and sensorInstance","msgtype":"m.text"},"ts":1458055571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so like \"s\"?","msgtype":"m.text"},"ts":1458055572000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"oh, better. :)","msgtype":"m.text"},"ts":1458055580000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Thanks folks, that's super helpful.","msgtype":"m.text"},"ts":1458055621000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: often though in an algorithm you would just reference \"this\" (aka context object until we rename that)","msgtype":"m.text"},"ts":1458055641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1458055651000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"do you have examples of that handy?","msgtype":"m.text"},"ts":1458055664000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: and then context object's sensor would be unambiguous, since context object is the instance, and sensor is the shared sensor","msgtype":"m.text"},"ts":1458055674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: https://dom.spec.whatwg.org/#dom-element-shadowroot","msgtype":"m.text"},"ts":1458055692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: (lots of specifications reuse the \"context object\" concept from DOM)","msgtype":"m.text"},"ts":1458055707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think using sensorInstance or the like will make the whole thing more readable. Anyway, easy to change later on as long as I'm using two distinct words.","msgtype":"m.text"},"ts":1458055900000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We've been using \"this `Sensor` object\" in new specs","msgtype":"m.text"},"ts":1458055967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"True, I don't really like that either since it's too long","msgtype":"m.text"},"ts":1458056000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We should just be able to use this or a variable that we get to name since IDL invokes the specification-defined algorithm directly with this as the first argument (this is what I really want)","msgtype":"m.text"},"ts":1458056044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if anyone knows much about BitTorrent here","msgtype":"m.emote"},"ts":1458056324000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Does the DHT contain everything that the torrent metadata file does?","msgtype":"m.text"},"ts":1458056466000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Doing Fullscreen's shadow DOM integration today is too much... but I'll drop utf-16's encoders, much more satisfying way to end the day too","msgtype":"m.text"},"ts":1458056710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone who likes security and privacy sections pls see https://www.w3.org/Bugs/Public/show_bug.cgi?id=29533 (for cssom-view)","msgtype":"m.text"},"ts":1458057987000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"*poff*","msgtype":"m.emote"},"ts":1458058003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: It was bikeshed. SpecRef is only for biblio references, not autolinks.  Fixed it for you.","msgtype":"m.text"},"ts":1458058807000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: enum values are now dfn'd by Bikeshed too, so they can be autolinked.","msgtype":"m.text"},"ts":1458058862000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Style is like <a enum-value>\"foo\"</a>.","msgtype":"m.text"},"ts":1458058891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://twitter.com/FirefoxNightly/status/709760092648841216 Fetch is still very misunderstood by some 😟","msgtype":"m.text"},"ts":1458061332000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(In this case the writer of that tweet.)","msgtype":"m.text"},"ts":1458061350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe you should tweet about it to market it better","msgtype":"m.text"},"ts":1458061634000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"with gretchen from Mean Girls as the mascot","msgtype":"m.text"},"ts":1458061686000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1458061693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"catch phrase \"That's so fetch!\"","msgtype":"m.text"},"ts":1458061703000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: wow","msgtype":"m.text"},"ts":1458062229000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I replied per caitp's advice","msgtype":"m.text"},"ts":1458062285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the only thing missing is a lacey chabert gif with a silly caption","msgtype":"m.text"},"ts":1458062398000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"smaug____: have you reviewed https://w3c.github.io/webcomponents/spec/shadow/#extensions-to-event-interface?","msgtype":"m.text"},"ts":1458063926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I was wondering whether putting those flags on event objects was the way to go, or whether they should be parameters for the dispatch algorithm","msgtype":"m.text"},"ts":1458063959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: I guess putting them on event objects is more consistent with how event objects work today","msgtype":"m.text"},"ts":1458063973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I haven't reviewed that","msgtype":"m.text"},"ts":1458064037000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"those flags feel a bit odd","msgtype":"m.text"},"ts":1458064069000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why would JS need to know about them","msgtype":"m.text"},"ts":1458064075000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think when I proposed this to hayato I suggested flags that the dispatcher would pass to dispatch","msgtype":"m.text"},"ts":1458064105000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it seems he went with a different design","msgtype":"m.text"},"ts":1458064120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder why","msgtype":"m.text"},"ts":1458064300000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is there some use case where those flags are needed in JS","msgtype":"m.text"},"ts":1458064324000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so far I haven't heard of anyone needing them with XBL stuff","msgtype":"m.text"},"ts":1458064350000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: does Gecko store them on the event object or pass them as part of dispatch?","msgtype":"m.text"},"ts":1458064399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so this scoped is for example for mouseout/over events?","msgtype":"m.text"},"ts":1458064449000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it's not defined very well at the moment, but see https://w3c.github.io/webcomponents/spec/shadow/#event-paths","msgtype":"m.text"},"ts":1458064520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I sorta thought everything Shadow DOM was reviewed at this point","msgtype":"m.text"},"ts":1458064545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1458064578000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1458064591000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"abort, error, select, change, load, loadedmetadata, reset, resize, scroll and selectstart.\"","msgtype":"m.text"},"ts":1458064619000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well yeah, guess I'm glad I haven't landed the event stuff in DOM yet","msgtype":"m.text"},"ts":1458064622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so that is missing stuff like mouseover/out within shadow DOM. or perhaps that happens in dispatch.","msgtype":"m.text"},"ts":1458064649000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looking","msgtype":"m.text"},"ts":1458064651000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"They don't define dispatch, nobody does","msgtype":"m.text"},"ts":1458064675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"😟","msgtype":"m.text"},"ts":1458064684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, meeting","msgtype":"m.text"},"ts":1458064701000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"anyhow, in XBL mouseover/out are handled during event path creation","msgtype":"m.text"},"ts":1458064713000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: interesting...","msgtype":"m.text"},"ts":1458064744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and some other stuff use very internal flags so that the event is still dispatched to chrome","msgtype":"m.text"},"ts":1458064747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but nothing of that is exposed to JS","msgtype":"m.text"},"ts":1458064757000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: file github.com/w3c/webcomponents/issues/new maybe on exposing these properties and such?","msgtype":"m.text"},"ts":1458064760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1458064770000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'll triage tomorrow / maybe figure something out","msgtype":"m.text"},"ts":1458064792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: thanks.","msgtype":"m.text"},"ts":1458065988000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: for the enum values.","msgtype":"m.text"},"ts":1458066002000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: filed. silly bug title. oh well","msgtype":"m.text"},"ts":1458067961000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: botie is back","msgtype":"m.text"},"ts":1458083449000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"WebIDL help: given the OrderedMap example in it, how would map.apple ever return undefined? shouldn't it just return null? where does the null from the get() become an undefined?","msgtype":"m.text"},"ts":1458084878000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]