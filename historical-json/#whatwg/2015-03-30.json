[
{"content":{"body":"anybody know if there's a WebKit implementation bug open for datalist","msgtype":"m.text"},"ts":1427678066000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=27247","msgtype":"m.text"},"ts":1427678139000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It seems","msgtype":"m.text"},"ts":1427678145000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now myquestion is, what's blocking it","msgtype":"m.text"},"ts":1427678328000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: probably just someone to work on it","msgtype":"m.text"},"ts":1427699738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, seems so","msgtype":"m.text"},"ts":1427699991000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tkent points out that the interactive form validation stuff is in the same state","msgtype":"m.text"},"ts":1427700059000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: when is the right time to make response/request.body a ReadableStream in the fetch spec?","msgtype":"m.text"},"ts":1427704558000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I was waiting for \"tee\" to be defined","msgtype":"m.text"},"ts":1427706329000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems to be the only issue left: https://github.com/yutakahirano/fetch-with-streams/issues","msgtype":"m.text"},"ts":1427706338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: gotcha, cheers","msgtype":"m.text"},"ts":1427706349000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, and also, I'm waiting for some confirmation that this design is okay","msgtype":"m.text"},"ts":1427706357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I wish there was a second implementation","msgtype":"m.text"},"ts":1427706394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: If I tweak the TLS config for the validator, do you have a preference whether I should set properties procedurally in Main.java or via external files and command line switches managed by build.py?","msgtype":"m.text"},"ts":1427706778000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm leaning towards Main.java, because the command line is pretty crazy already","msgtype":"m.text"},"ts":1427706808000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah, in Main.java sounds better to me as well","msgtype":"m.text"},"ts":1427706837000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: OK. thanks","msgtype":"m.text"},"ts":1427706846000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1427706853000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"am I correct that per webidl, if I want a dictionary parameters with values depending on other parameters, i need to have a base dictionary in the method parameter type?","msgtype":"m.text"},"ts":1427711241000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"What","msgtype":"m.text"},"ts":1427711558000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: I have navigator.permissions.query(name, options)","msgtype":"m.text"},"ts":1427711592000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"options will depend on \"name\"","msgtype":"m.text"},"ts":1427711600000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"You mean like canvas.getContext()?","msgtype":"m.text"},"ts":1427711616000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I thought we decided that wasn't a pattern we wanted to repeat","msgtype":"m.text"},"ts":1427711632000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: except that \"name\" is part of an enum","msgtype":"m.text"},"ts":1427711730000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"and it's only used to know a permission state, not to get a feature","msgtype":"m.text"},"ts":1427711754000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic: let me know when you're free to drown in the lands of cancellable promises","msgtype":"m.text"},"ts":1427717228000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"why is there no TouchEvent constructor?","msgtype":"m.text"},"ts":1427719783000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"roc ping","msgtype":"m.text"},"ts":1427720163000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"wanderview: hey, where are we at with https://github.com/yutakahirano/fetch-with-streams/issues/25 and streams in general?","msgtype":"m.text"},"ts":1427720472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: do you know if Chromium has an origin associated with the global?","msgtype":"m.text"},"ts":1427722143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: don't know","msgtype":"m.text"},"ts":1427722402000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: at this point I do not feel comfortable implementing that... I'm planning to talk to sicking in a couple weeks to try to iron out our differences","msgtype":"m.text"},"ts":1427722761000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: given wanderview's statement and not hearing anything from Apple/Microsoft I'm inclined to hold off on integrating streams for now","msgtype":"m.text"},"ts":1427722944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: makes sense, wasn't aware of wanderview's concerns","msgtype":"m.text"},"ts":1427723058000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess to clarify, I'm personally ok with implementing the fetch body stream bit... but I need to address sicking's concerns first... and it feels like we're further away from agreement than I thought before","msgtype":"m.text"},"ts":1427723066000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: not my personal concerns... we need some internal consensus before moving forward, though","msgtype":"m.text"},"ts":1427723156000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"if that makes sense","msgtype":"m.text"},"ts":1427723167000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Anyone know of a version of something like jsfiddle or the live dom viewer with support for multiple origins?","msgtype":"m.text"},"ts":1427725192000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: let's do this","msgtype":"m.text"},"ts":1427729126000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wow that thread really got overrun","msgtype":"m.text"},"ts":1427729134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah. Where's the best place to do this, here?","msgtype":"m.text"},"ts":1427729177000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"seems reasonable","msgtype":"m.text"},"ts":1427729186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unless you want VC or something for higher bandwidth","msgtype":"m.text"},"ts":1427729194000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We'll try here and if that isn't good enough (or annoys people here) we'll go VC","msgtype":"m.text"},"ts":1427729319000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Will be back in a min","msgtype":"m.text"},"ts":1427729324000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: so, I get the feeling you've been around the ref-counting idea before, and every other cancellable-promise proposal, and you don't think it's possible outside of a token-based system. Is that true?","msgtype":"m.text"},"ts":1427729532000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think ref-counting is tricky business with lots of edge cases and potential usability hazards. I'd want to see it worked out in excruciating detail before saying it's workable.","msgtype":"m.text"},"ts":1427729650000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm also sympathetic to the argument that it's philosophically \"wrong\", i.e. cancellation should be a property of the operation and not of the result.","msgtype":"m.text"},"ts":1427729686000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: as an example I'd wonder if Promise.prototype.then.call(cancelablePromise, f, r) increases the ref count, or even works at all.","msgtype":"m.text"},"ts":1427729717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think it would increase ref count. I initially thought otherwise, that the parent should only count cancellable children, but I think all children is more consistent","msgtype":"m.text"},"ts":1427729810000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: OK, so this would involve modifying the spec for Promise to be aware of CancelablePromise?","msgtype":"m.text"},"ts":1427729840000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: does a promise have a link to its children? (eg, a way to iterative over the and look at their state?)","msgtype":"m.text"},"ts":1427729983000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: only before it gets fulfilled or rejected; after that it aggressively cuts off references in order to avoid memory \"leaks\".","msgtype":"m.text"},"ts":1427730041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that seems ok then, since a settled promise cannot cancel. Promise.prototype.then.call(cancelablePromise, f, r) would still create a cancellable promise","msgtype":"m.text"},"ts":1427730125000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hmm OK, so @@species is still CancelablePromise","msgtype":"m.text"},"ts":1427730157000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Promise.resolve(cancellablePromise) will create a child plain Promise","msgtype":"m.text"},"ts":1427730177000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1427730180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So you can't use this to just cancel a fetch operation then, if the headers have already been received","msgtype":"m.text"},"ts":1427730196000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You need to do the chaining thing","msgtype":"m.text"},"ts":1427730206000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But you can't e.g. create a token, do some fetches (which shar ethe token), then when people navigate the page, cancel the token and thus destroy all chained processing","msgtype":"m.text"},"ts":1427730228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"instead you have to keep track of all child promises","msgtype":"m.text"},"ts":1427730241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and cancel them, when people navigate the page","msgtype":"m.text"},"ts":1427730250000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(\"navigate the page\" = within a single-page app, not browser navigation)","msgtype":"m.text"},"ts":1427730262000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fetch(url).then(r => r.json()) - both fetch() and r.json() are cancellable","msgtype":"m.text"},"ts":1427730263000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right, but","msgtype":"m.text"},"ts":1427730269000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"compare with:","msgtype":"m.text"},"ts":1427730273000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"var canceller = new Canceller(); var p1 = fetch(url1, { canceller }); var p2 = fetch(url2, { canceler }); doStuffWith(p1, p2); doMoreStuffWith(p1, p2); /* later */ canceller.cancel();","msgtype":"m.text"},"ts":1427730316000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tokens allow you, as the initiator of fetch, to decide when to stop","msgtype":"m.text"},"ts":1427730345000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"instead of depending on your consumers to coordinate and say \"oh, we'd better all cancel at the same time\"","msgtype":"m.text"},"ts":1427730362000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess you could build that on top of promise.cancel() though","msgtype":"m.text"},"ts":1427730407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, but not for after-headers-have-arrived...","msgtype":"m.text"},"ts":1427730434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"unsure","msgtype":"m.text"},"ts":1427730444000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: var p1 = fetch(url); /* pass p1 to some other code which does whatever it wants */ p1.cancel(); /* kill the downward chain */","msgtype":"m.text"},"ts":1427730450000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right but you don't actually kill the downward chain because of ref-counting","msgtype":"m.text"},"ts":1427730477000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if \"whatever it wants\" includes a .then, you lose.","msgtype":"m.text"},"ts":1427730490000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess you could Promise.resolve() it first","msgtype":"m.text"},"ts":1427730515000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Can we turn things around for a bit? Why do you find the ref-counting solution more attractive? It seems less flexible and harder to reason about, to me.","msgtype":"m.text"},"ts":1427730557000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ref-counting isn't used on the promise you call .cancel on, it stops straight away & cancels all children. Ref counting is used to decide if the parent should now be cancelled","msgtype":"m.text"},"ts":1427730558000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh interesting... so cancel flows in both directions","msgtype":"m.text"},"ts":1427730597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"down like rejection, but also up to parents","msgtype":"m.text"},"ts":1427730604000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you call p.cancel() this promise will always cancel as long as it hasn't settled, as will all its children and so on. p's parent may cancel, if p was its only child or all its children have cancelled","msgtype":"m.text"},"ts":1427730617000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That's what I was thinking","msgtype":"m.text"},"ts":1427730622000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1427730628000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm ok back to the modifying-Promise-spec","msgtype":"m.text"},"ts":1427730658000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"because there's no linkage from child to parent right now","msgtype":"m.text"},"ts":1427730666000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i guess it's only necessary for CancelablePromises","msgtype":"m.text"},"ts":1427730691000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I worry a bit about the implicit reference causing memory leaks","msgtype":"m.text"},"ts":1427730701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: once the promise settles it can kill its parent link","msgtype":"m.text"},"ts":1427730727000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"as it can no longer be cancelled","msgtype":"m.text"},"ts":1427730735000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"var q = cancelablePromise.then(x).then(y).then(z).then(w) keeps 5 promises alive whereas for normal promises it'd be just 1","msgtype":"m.text"},"ts":1427730738000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm right ok so maybe it's the same then","msgtype":"m.text"},"ts":1427730761000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"probably","msgtype":"m.text"},"ts":1427730779000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So when p.cancel() is called, it walks up the chain to find the highest promise that can be cancelled. That promise gets its cancel callback called, then the others get [rejected/hung/something else]","msgtype":"m.text"},"ts":1427730871000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the others?","msgtype":"m.text"},"ts":1427730907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sorry, down the chain from the one that gets cancelled","msgtype":"m.text"},"ts":1427730931000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right, ok","msgtype":"m.text"},"ts":1427730940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so unwinding the stack a bit ... why do you like this design?","msgtype":"m.text"},"ts":1427730959000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: var p1 = fetch(url); var child1 = p1.then(r => consumeStream(r)); var child11 = child1.then(doSomethingElse); child11.cancel();","msgtype":"m.text"},"ts":1427731088000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Taking that example:","msgtype":"m.text"},"ts":1427731116000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If there's another p1.then(…), the child11 will appear cancelled, but the underlying fetch will not, so the branch is safe","msgtype":"m.text"},"ts":1427731177000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yep, i got that","msgtype":"m.text"},"ts":1427731221000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not sure why you think it's a good experience though, in comparison to the initiator of the fetch being in control","msgtype":"m.text"},"ts":1427731244000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If there's no branch, then either the fetch or the stream read will be cancelled. If they've both finished, doSomethingElse will appear cancelled even if it carries on its work (because it returns a normal promise)","msgtype":"m.text"},"ts":1427731245000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"what does \"doSomethingElse will appear cancelled\" mean?","msgtype":"m.text"},"ts":1427731286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: its call to resolve/reject will not do anything, because the promise has been cancelled. What happens on promise cancel is still up for grabs, perhaps reject with undefined or an AbortError","msgtype":"m.text"},"ts":1427731358000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"whose call to resolve/reject?! I thought doSomethingElse was just a function? Maybe write out its body...","msgtype":"m.text"},"ts":1427731382000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Sorry, yeah, that would be more helpful: .then(r => setTimeout(_ => r(\"Hello\"), 1000))","msgtype":"m.text"},"ts":1427731460000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hang on","msgtype":"m.text"},"ts":1427731472000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that's wrong","msgtype":"m.text"},"ts":1427731473000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thta's... not how .then works...","msgtype":"m.text"},"ts":1427731474000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah sorry, brain break","msgtype":"m.text"},"ts":1427731484000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1427731488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":".then(_ => new Promise(r => setTimeout(_ => r(\"Hello\"), 1000)))","msgtype":"m.text"},"ts":1427731522000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Basically, doSomethingElse resolves in 1 second with \"Hello\"","msgtype":"m.text"},"ts":1427731545000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Does anyone remember who was involved in thinking / making -o-double-rainbow() ?","msgtype":"m.text"},"ts":1427731619000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"thinks about the token solution some more","msgtype":"m.emote"},"ts":1427731629000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"frivoal: I think I suggested that to whoever was implementing gradients at the time","msgtype":"m.text"},"ts":1427731666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, so I think what you meant was \"doSomethingElse isn't even called\"","msgtype":"m.text"},"ts":1427731671000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: thanks, I suspected you might be the one to thank for that.","msgtype":"m.text"},"ts":1427731713000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"Domenic: if it's called, but the second hasn't passed, .cancel() would still \"work\" in that the promise won't resolve with \"Hello\"","msgtype":"m.text"},"ts":1427731719000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"r(\"Hello\") will be called, but since the promise is in a cancelled state (which could just mean rejected) it's ignored","msgtype":"m.text"},"ts":1427731745000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"oh hmm that's weird","msgtype":"m.text"},"ts":1427731758000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so child11 is resolved already but you un-resolve it when you cancel","msgtype":"m.text"},"ts":1427731773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or change its resolution or something","msgtype":"m.text"},"ts":1427731778000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: Would I be wrong to attribute this work of art to Bruce Lawson: http://media.opera.com/media/press/2011/unicorn/ ?","msgtype":"m.text"},"ts":1427731788000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"(child1 is pending-but-resolved in your example)","msgtype":"m.text"},"ts":1427731789000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that doesn't sound right…","msgtype":"m.text"},"ts":1427731802000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: child11 is pending, since doSomethingElse returns a promise that is still pending-for-a-second. But it's resolved to that pending-for-a-second promise.","msgtype":"m.text"},"ts":1427731844000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"normally that would mean it's locked in to follow that pending-for-a-second promise without fail.","msgtype":"m.text"},"ts":1427731863000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"frivoal: not sure","msgtype":"m.text"},"ts":1427731904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"frivoal: was it Leif Arne who should get the credit?","msgtype":"m.text"},"ts":1427731923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"forgot :-(","msgtype":"m.emote"},"ts":1427731925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: possibly","msgtype":"m.text"},"ts":1427731950000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"Domenic: child11 is pending, calling .cancel() makes it (let's say) reject, the timeout hits, resolve is called, it's ignored","msgtype":"m.text"},"ts":1427731995000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: let's break this down. `var p = new Promise(r => setTimeout(() => r(\"Hello\"), 1000))`","msgtype":"m.text"},"ts":1427732068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"function doSomethingElse() { return p; }","msgtype":"m.text"},"ts":1427732079000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"var child11 = child1.then(doSomethingElse)","msgtype":"m.text"},"ts":1427732086000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This immediately does PromiseResolve(child11, p)","msgtype":"m.text"},"ts":1427732097000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if we make fetch() return an extended promise with a fetch-specific cancel... can we later switch to a CancellablePromise once we see that it works out?","msgtype":"m.text"},"ts":1427732107000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Yep, it seems to be Leif Arne: https://twitter.com/rchl2k/status/135129843170947072","msgtype":"m.text"},"ts":1427732110000,"senderName":"frivoal","senderId":"frivoal@irc"},
{"content":{"body":"You cannot reject a resolved promise","msgtype":"m.text"},"ts":1427732111000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"frivoal: nice find","msgtype":"m.text"},"ts":1427732136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: similar example: var q = new Promise((res, rej) => res(p); rej(new Error(\"foo\"))); q will be pending for 1 second then fulfilled with \"Hello\"","msgtype":"m.text"},"ts":1427732161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: that's the terminate() proposal, and yeah, I think there's agreement that can work, though there's still the open question there whether to do forever-pending or reject or allow for both","msgtype":"m.text"},"ts":1427732216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: hmm, yeah, I see *thinks*","msgtype":"m.text"},"ts":1427732276000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess the problem with that is it just breaks the Promise API niceness.. you can't really chain off the fetch() any more","msgtype":"m.text"},"ts":1427732305000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yup, though if you want to do complicated things you can't really chain anyway I think","msgtype":"m.text"},"ts":1427732349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm still not sure keeping terminate-ability through a chain is desirable","msgtype":"m.text"},"ts":1427732352000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i kind of feel it should only belong to the initiator","msgtype":"m.text"},"ts":1427732361000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's a key difference here I think","msgtype":"m.text"},"ts":1427732371000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I could be convinced otherwise but that's my conservative position","msgtype":"m.text"},"ts":1427732390000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I wonder if we could so something like fetch(req).control(function(controller) { .. }).then(function (response) { });","msgtype":"m.text"},"ts":1427732404000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and controller.cancel()","msgtype":"m.text"},"ts":1427732410000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: why .control?","msgtype":"m.text"},"ts":1427732437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the idea being fetch() returns an extended promise with a .control()... letting you get a handle to the controller for later use... because the decision to cancel will be async most likely","msgtype":"m.text"},"ts":1427732482000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: if there was an established API pattern that would be an easy sell","msgtype":"m.text"},"ts":1427732491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and .control() returns a Promise for the response","msgtype":"m.text"},"ts":1427732495000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: why not just make control an argument to fetch()?","msgtype":"m.text"},"ts":1427732513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that works for me too","msgtype":"m.text"},"ts":1427732523000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"pretty sure we've discussed this before... I think I just like that approach from a \"how I would want to use it in code\" point of view","msgtype":"m.text"},"ts":1427732554000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I guess .control() seems slightly nicer than a fetch arg because then it fits into the chaining pattern nicely","msgtype":"m.text"},"ts":1427732602000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"shrugs","msgtype":"m.emote"},"ts":1427732608000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"fetch(url, control: c => c.abort()) just seems rather ugly","msgtype":"m.text"},"ts":1427732620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fetch(url).control(c => c.abort()) doesn't seem too different","msgtype":"m.text"},"ts":1427732641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it would really be fetch(url).control(c => savedControl = c).then(response => ...);","msgtype":"m.text"},"ts":1427732735000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I still like `var c = new FetchController()`; fetch(url, { controller })` or similar.","msgtype":"m.text"},"ts":1427732781000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thats nice","msgtype":"m.text"},"ts":1427732794000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"the upside being you can hand out the same controller to multiple fetches","msgtype":"m.text"},"ts":1427732797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yea... and if we make individual Promises cancellable... then the page has to rebuild a controller for themself by aggregating a promise for each fetch() in the place where the \"cancel now\" event happens","msgtype":"m.text"},"ts":1427732945000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: right, that was kind of my worry... although you could probably build a wrapper that implements either on top of the other","msgtype":"m.text"},"ts":1427732993000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just can't think of a use case where you want to stick .cancel() at the end of a Promise chain... and Promise chain syntax does not lend itself to getting a reference to the promise itself, except at the end of the chain","msgtype":"m.text"},"ts":1427733115000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Well, I dunno, it's fairly believable for non-branching chains","msgtype":"m.text"},"ts":1427733207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: fetch(url).then(r => r.json())","msgtype":"m.text"},"ts":1427733243000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"var result = fetch(url).then(r => r.json()).then(parseJSONIntoModel).then(updateUI); router.on(\"hashchange\", () => result.cancel())","msgtype":"m.text"},"ts":1427733270000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1427733288000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"not much different from `var canceller = new Canceller(); fetch(url, { canceller }).then(...).then(...).then(...); router.on(\"hashchange\", () => canceller.cancel())` admittedly.","msgtype":"m.text"},"ts":1427733315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1427733353000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but less work if the router.on(...) code is located somewhere else; becomes an issue of passing it a { promise, canceller } pair vs. a promise by itself","msgtype":"m.text"},"ts":1427733360000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"unsure though, this example is kind of unrealistic","msgtype":"m.text"},"ts":1427733374000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess the Canceller example is more clear it only effects fetch()... the first example suggests you can cancel parseJSONIntoModel, etc","msgtype":"m.text"},"ts":1427733383000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ah yeah hmm i guess that's actually a downside though...","msgtype":"m.text"},"ts":1427733409000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so, going back to what you said earlier, var p = fetch(url).then(r => r.json()) - calling .cancel() wouldn't work if we had headers, since the .then is immediately resolved with the r.json() promise.","msgtype":"m.text"},"ts":1427733423000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: downside for the controller approach?  how so?","msgtype":"m.text"},"ts":1427733432000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"that's a pretty bad downside really","msgtype":"m.text"},"ts":1427733435000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: because you want an easy way to stop parsing or updating the UI too","msgtype":"m.text"},"ts":1427733453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: they may not be cancellable, though... for example if the parse is synchronous (which is probably is)","msgtype":"m.text"},"ts":1427733505000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so it becomes fetch(url, { canceller }).then(r => r.json({ canceller })).then(j => parseJSONIntoModel(j, { canceller })).then(m => updateUI(m, { canceller }))","msgtype":"m.text"},"ts":1427733512000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: yeah true","msgtype":"m.text"},"ts":1427733519000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: hmm yes that's true -_-","msgtype":"m.text"},"ts":1427733606000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: So the resolved value needs to be treated as a chain too","msgtype":"m.text"},"ts":1427733633000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: if you want a cancellable parse, use a Stream? :-)","msgtype":"m.text"},"ts":1427733637000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: haha true.","msgtype":"m.text"},"ts":1427733663000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: not sure what the implications of that are.","msgtype":"m.text"},"ts":1427733685000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: me neither","msgtype":"m.text"},"ts":1427733694000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I feel we're getting closer to fetch() returning a FetchPromise with an abort() methods with a @@species of Promise","msgtype":"m.text"},"ts":1427733744000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the terminate() solution, you mean?","msgtype":"m.text"},"ts":1427733762000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, terminate()","msgtype":"m.text"},"ts":1427733771000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"why is that better than canceller?","msgtype":"m.text"},"ts":1427733778000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Canceller seems ugly to me, maybe I'll get used to it","msgtype":"m.text"},"ts":1427733811000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the weight of minting a new promise subclass, especially one of such limited use, makes me hesitant.","msgtype":"m.text"},"ts":1427733838000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll probably get used to it","msgtype":"m.text"},"ts":1427733838000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if we had more methods to put on it then i'd feel better","msgtype":"m.text"},"ts":1427733851000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. http2 priority-adjuster?","msgtype":"m.text"},"ts":1427733857000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how do cancel response.json?","msgtype":"m.text"},"ts":1427733903000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"response.body.cancel(), doesn't work right?","msgtype":"m.text"},"ts":1427733913000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: JakeA: ^^^","msgtype":"m.text"},"ts":1427733928000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it would have to take a canceller or similar","msgtype":"m.text"},"ts":1427733929000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, that","msgtype":"m.text"},"ts":1427733941000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: or have response.cancel()","msgtype":"m.text"},"ts":1427733946000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"do we really want to give that authority to anyone though?","msgtype":"m.text"},"ts":1427733966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how does one get a handle to the same Response object without being the same code that sets up the cancel?","msgtype":"m.text"},"ts":1427734005000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"i dunno the ergonomics argument is making me want to reconsider JakeA's ideas... if we can make them work somehow...","msgtype":"m.text"},"ts":1427734009000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: doSomethingWith(response) :)","msgtype":"m.text"},"ts":1427734023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: it's a matter of, when you give someone a response, are you also giving them ability to blow up the response? or just to read it (if it's not locked)?","msgtype":"m.text"},"ts":1427734042000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think we made res.headers immutable for similar reasons?","msgtype":"m.text"},"ts":1427734066000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if you don't trust the code you can call doSomethingWith(response.clone())","msgtype":"m.text"},"ts":1427734105000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: true true.","msgtype":"m.text"},"ts":1427734118000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: because they could drain the body and \"blow up\" the Response as well","msgtype":"m.text"},"ts":1427734119000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: not if it's locked though.","msgtype":"m.text"},"ts":1427734128000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I find the lock blocking cancel very unexpected, to be honest","msgtype":"m.text"},"ts":1427734158000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: https://github.com/slightlyoff/ServiceWorker/issues/592#issuecomment-68853209 - here I say \"If the user hits X (or even closes the tab) while /whatever.json is fetching, I don't think we can simply cancel the request\", this is because the tab isn't consuming the stream at this point. With a chaining cancellable promise, this is no longer an issue","msgtype":"m.text"},"ts":1427734170000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":":-S","msgtype":"m.text"},"ts":1427734171000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is a case where you want the party you give the promise to to be able to cancel, rather than the initiator","msgtype":"m.text"},"ts":1427734194000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: simultaneous reads is good to block with a lock... but having some async thing cancel a stream while another bit of code is reading seems pretty commonplace to me","msgtype":"m.text"},"ts":1427734208000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: is \"we\" the browser or author code in that sentence?","msgtype":"m.text"},"ts":1427734214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the browser","msgtype":"m.text"},"ts":1427734233000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: this is kind of just a principle of least authority thing I think","msgtype":"m.text"},"ts":1427734236000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I think the stream becomes errored if it's prematurely terminated.","msgtype":"m.text"},"ts":1427734246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we'd use a promise-subclass for other things too","msgtype":"m.text"},"ts":1427734268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: e.g. postMessage() with the SW","msgtype":"m.text"},"ts":1427734276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: this forces Response.json(canceller) as the only solution then","msgtype":"m.text"},"ts":1427734281000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: or changing priority of the fetch","msgtype":"m.text"},"ts":1427734285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which is fine I guess","msgtype":"m.text"},"ts":1427734306000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: right, or a CancelablePromise solution that I've been arguing is complicated.","msgtype":"m.text"},"ts":1427734308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess, keep in mind that everything with the body stream effects Cache produced Responses as well...  but canceling \"before the headers\" is fetch only","msgtype":"m.text"},"ts":1427734345000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"unless Cache grows something similar to fetch","msgtype":"m.text"},"ts":1427734354000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"doesn't want to allow canceling Cache.match(), etc.","msgtype":"m.emote"},"ts":1427734374000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: the only reason headers is immutable at the moment is because that's the easiest","msgtype":"m.text"},"ts":1427734383000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but we'll make it mutable together with request's headers","msgtype":"m.text"},"ts":1427734397000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm ok","msgtype":"m.text"},"ts":1427734405000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: just needs some careful consideration of all the implications","msgtype":"m.text"},"ts":1427734408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how much pain here is due to separating \"we have headers\" event from the body stream its parsed from","msgtype":"m.text"},"ts":1427734421000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"^body stream^data stream","msgtype":"m.text"},"ts":1427734441000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: now I'm curious if you can make CancelablePromise work generally. I think you need: 1) compelling ergonomics examples vs. canceller; 2) work through the semantics and edge cases in detail.","msgtype":"m.text"},"ts":1427734446000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I can try to help with 2)...","msgtype":"m.text"},"ts":1427734476000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: having headers also means no more redirects, it's a rather important milestone","msgtype":"m.text"},"ts":1427734478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes... but treating them as separate cancelable things when really there is one underlying stream supplying both","msgtype":"m.text"},"ts":1427734507000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I think the case for CancelablePromise is indeed primarily ergonomics","msgtype":"m.text"},"ts":1427734514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: annevk: yeah, the have-headers milestone being separable is quite nice in practice, I think. Certainly can be a leaky abstraction in some cases though.","msgtype":"m.text"},"ts":1427734522000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: having to construct a controller is awkward","msgtype":"m.text"},"ts":1427734535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: to me that's not the awkward part, the awkward part is lack of propagation","msgtype":"m.text"},"ts":1427734547000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: when would it be a leaky abstraction?","msgtype":"m.text"},"ts":1427734568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: this is exactly as atomic as implementations are","msgtype":"m.text"},"ts":1427734582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well it's leaky here because an implementation could cancel the underlying TCP stream at any point, but here we have this two-stage thing => potentially two cancel mechanisms","msgtype":"m.text"},"ts":1427734611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lunchtime...","msgtype":"m.text"},"ts":1427734690000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it does fit Cache better.... load meta-data separate from body data stream","msgtype":"m.text"},"ts":1427734700000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I'll do as much of 1 as I can tomorrow","msgtype":"m.text"},"ts":1427734787000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: has there been any further discussion on window.onerror alternatives for promises? onpromiseerror and onpromiseerrorhandled perhaps?","msgtype":"m.text"},"ts":1427737037000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Where the former would fire if a promise rejects without a reject handler, and the latter fires if it's later handled","msgtype":"m.text"},"ts":1427737091000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: ohh, how are you cancelling those fetching in Gecko (from the promises thread)","msgtype":"m.text"},"ts":1427737194000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: all network requests in gecko have an associated \"LoadGroup\"... right now we call LoadGroup.cancel() when the ServiceWorker is shutdown","msgtype":"m.text"},"ts":1427737269000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: people liked it, nobody said \"yeah let's implement it\"","msgtype":"m.text"},"ts":1427737281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: non-SW cases share the LoadGroup with the document and the LoadGroup.cancel() is triggered by navigation, etc","msgtype":"m.text"},"ts":1427737293000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: we also have a way of cancelling things when the worker thread is shutting down","msgtype":"m.text"},"ts":1427737323000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ahh yeah, but that doesn't work if the SW stays alive, eg if the page is navigated within scope it's likely to stay alive","msgtype":"m.text"},"ts":1427737326000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: its poorly defined in the spec, I think :-(","msgtype":"m.text"},"ts":1427737341000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: for example... does the SW stay alive until respondWith() resolves a Response?","msgtype":"m.text"},"ts":1427737354000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or until the underlying Response body completes?","msgtype":"m.text"},"ts":1427737366000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"what if there is an outstanding Cache.put() in operation?  do we cancel that?","msgtype":"m.text"},"ts":1427737391000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: receives a response should be enough. We may need a fetchEvent.waitUntil for further tasks","msgtype":"m.text"},"ts":1427737395000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah, exactly","msgtype":"m.text"},"ts":1427737403000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right... I think we may actually have to keep the worker thread alive until body is fully copied in... but that could just be our implementation","msgtype":"m.text"},"ts":1427737447000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right now we don't explicitly do that... probably a bug","msgtype":"m.text"},"ts":1427737457000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I guess my point, though... is the browser can cancel this stuff regardless of what script does (without script using something like waitUntil() )","msgtype":"m.text"},"ts":1427737487000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: welllll it's not really a bug. The browser is allowed to keep the SW alive as long as it wants","msgtype":"m.text"},"ts":1427737493000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: those requests can only be cancelled if the promise has resolved, or if the browser can shut the SW down","msgtype":"m.text"},"ts":1427737549000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think we may stop the SW too soon in gecko right now","msgtype":"m.text"},"ts":1427737550000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I haven't looked, but if navigation caused the FetchEvent to no longer be valid... we should be able to stop the SW and cancel those operations","msgtype":"m.text"},"ts":1427737603000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"FetchEvent holds SW alive... Document should hold FetchEvent","msgtype":"m.text"},"ts":1427737613000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'd have to check, though","msgtype":"m.text"},"ts":1427737617000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: but if the navigation is to another page in scope, the SW needs to be alive for that new page and its resources","msgtype":"m.text"},"ts":1427737633000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: true... these mechanisms will not cancel in that case","msgtype":"m.text"},"ts":1427737672000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: maybe an edge case though","msgtype":"m.text"},"ts":1427737708000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: canceling per FetchEvent seems reasonable... if the FetchEvent is going nowhere","msgtype":"m.text"},"ts":1427737729000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: will design fetchEvent.waitUntil tomorrow","msgtype":"m.text"},"ts":1427737753000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I suppose the FetchEvent could be for a window.fetch() that gets canceled too :-)","msgtype":"m.text"},"ts":1427737756000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"FetchEvent cancellation I mean","msgtype":"m.text"},"ts":1427737773000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1427737773000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: ping","msgtype":"m.text"},"ts":1427742184000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"marcosc: ping","msgtype":"m.text"},"ts":1427742230000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"pong","msgtype":"m.text"},"ts":1427742267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"here","msgtype":"m.emote"},"ts":1427742303000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"marcosc: Domenic suggests to remove the base interface","msgtype":"m.text"},"ts":1427742313000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"or maybe use \"implements\"","msgtype":"m.text"},"ts":1427742317000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"I don't mind both, FWIW","msgtype":"m.text"},"ts":1427742324000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"https://gist.github.com/domenic/db44ae9dd73534d63e46","msgtype":"m.text"},"ts":1427742334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"my main concern now is to figure out which way to go: strong types or strings","msgtype":"m.text"},"ts":1427742341000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"JakeA: can we just remove VARY headers completely and make Cache key-value? :-)","msgtype":"m.text"},"ts":1427742362000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"mounir: I think hanging methods off of types (instead of having a string-param to a generic method) is OK; not much preference either way. But, a strong preference *against* passing those types around.","msgtype":"m.text"},"ts":1427742406000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: then we should try to see how we could add a .request() on top of that","msgtype":"m.text"},"ts":1427742441000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic: I want the design to allow .request() to take multiple permissions","msgtype":"m.text"},"ts":1427742459000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"the string based solution would allow that fairly easily","msgtype":"m.text"},"ts":1427742472000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"yeah. .request([\"midi\", \"geolocation\"]), etc. seems fine. They are keys into Permissions.prototype.","msgtype":"m.text"},"ts":1427742475000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: except that you would need to pass some options","msgtype":"m.text"},"ts":1427742586000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"sorry, was chatting to other people at moz about the API at the same time","msgtype":"m.text"},"ts":1427742590000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"Oh, interesting","msgtype":"m.text"},"ts":1427742594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I suppose you guys have already explored and rejected coalescing separate requests?","msgtype":"m.text"},"ts":1427742611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So e.g. the natural Promise.all([n.p.midi.request({ sysex: true }), n.p.geolocation.request()]) is not good enough?","msgtype":"m.text"},"ts":1427742638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's what we would want, yes","msgtype":"m.text"},"ts":1427742689000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"oh, then, seems good...","msgtype":"m.text"},"ts":1427742712000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't have a strong preference about the strings vs the attributes","msgtype":"m.text"},"ts":1427742754000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"for .request(), I'm not sure Promise.all() is the right solution","msgtype":"m.text"},"ts":1427742768000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"People will do it, even if you don't think they should","msgtype":"m.text"},"ts":1427742786000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you can handle individual rejects as needed, so what's the problem?","msgtype":"m.text"},"ts":1427742813000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"\"Oh, without Camera you are going to have a bad time... but ok...\"","msgtype":"m.text"},"ts":1427742842000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"or UI coallescing, it's better if it's clear that the permission requests have to be bundled","msgtype":"m.text"},"ts":1427742877000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"instead of guessing","msgtype":"m.text"},"ts":1427742890000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic: the more I think about it, the more I prefer the original design with only a dictionary passed to .query()","msgtype":"m.text"},"ts":1427743469000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"no name + options","msgtype":"m.text"},"ts":1427743473000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"oh interesting","msgtype":"m.text"},"ts":1427743478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: a permission isn't defined by it's name but by the name and the options even if some doesn't","msgtype":"m.text"},"ts":1427743505000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"hmmmm that makes sense","msgtype":"m.text"},"ts":1427743525000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: you can't query() 'midi' or 'push', it's more a side effect that some options will have a default value","msgtype":"m.text"},"ts":1427743539000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic: how terrible is navigator.permissions.query({'name': 'foo'}); to you?","msgtype":"m.text"},"ts":1427743617000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"knowing that sometimes there would be other values?","msgtype":"m.text"},"ts":1427743624000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: not so bad now that you explain the conceptual backing","msgtype":"m.text"},"ts":1427743634000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i wonder if it's coherent to have an overload that takes a string and converts it to { name: s } though","msgtype":"m.text"},"ts":1427743668000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just for pure convenience","msgtype":"m.text"},"ts":1427743684000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that's exactly what I had, but slightlyoff hated it","msgtype":"m.text"},"ts":1427743693000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"-_-","msgtype":"m.text"},"ts":1427743699000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1427743729000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"{ name: 'foo' } it is then!","msgtype":"m.text"},"ts":1427743731000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: fwiw, w3c ip block issue turned out to be quite the mystery. something was hammering the svg blog, but we couldn't identify what. now it doesn't happen anymore. issue closed, mystery prevails","msgtype":"m.text"},"ts":1427743736000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that happened at my office, we tracked it down to someone having a misbehaved Chrome extension that kept hitting a bunch of W3C pages for no reason","msgtype":"m.text"},"ts":1427744717000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"probably dtds","msgtype":"m.text"},"ts":1427744856000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: nope, it was weirder","msgtype":"m.text"},"ts":1427745487000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I *think* that it was somehow trying to refresh an RSS feed that it autodetected from a page but getting it very wrong","msgtype":"m.text"},"ts":1427745543000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"the url here involved something about rss in the query string (but it didn't point to the svg blog's feed). also the request had no User-Agent.","msgtype":"m.text"},"ts":1427745589000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"know which extension?","msgtype":"m.text"},"ts":1427745624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"does anyone have an opinion on delivering visibilitychange events to iframes when they enter and exit the viewport?","msgtype":"m.text"},"ts":1427748363000,"senderName":"[swift]","senderId":"[swift]@irc"},
{"content":{"body":"ack, znc keeps changing my nick","msgtype":"m.text"},"ts":1427748384000,"senderName":"[swift]","senderId":"[swift]@irc"},
{"content":{"body":"(or perhaps nickserv)","msgtype":"m.text"},"ts":1427748415000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"at any rate, the idea here would be to allow iframes to take actions to throttle themselves if they're not currently visible. think for example HTML5 ads - they may be performing a variety of kinds of work when visible that they may want to throttle down when the user has scrolled them off the page","msgtype":"m.text"},"ts":1427748494000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"sethf: seems like it could be useful. send a mail to the list?","msgtype":"m.text"},"ts":1427748974000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that was step two =)","msgtype":"m.text"},"ts":1427749178000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"it's definitely come up","msgtype":"m.text"},"ts":1427749190000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"jamesr___: i looked around for previous discussions but didn't have much luck finding any","msgtype":"m.text"},"ts":1427749286000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"i may well be using the wrong keywords to search, though","msgtype":"m.text"},"ts":1427749304000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"Someone killed irc.w3.org?","msgtype":"m.text"},"ts":1427750629000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So it appears. It wasn't me, though, honest!","msgtype":"m.text"},"ts":1427750653000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"blames gsnedders ","msgtype":"m.emote"},"ts":1427750861000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Nah, I'm way too busy cursing SCSS to care.","msgtype":"m.text"},"ts":1427750896000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Should have called it CUSS","msgtype":"m.text"},"ts":1427750989000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Did I already spam this channel with https://docs.google.com/document/d/1K-mKOqiUiSjgZTEscBLjtjd6E67oiK8H2ztOiq5tigk/pub ?","msgtype":"m.text"},"ts":1427751041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"A most interesting look at web perf problems","msgtype":"m.text"},"ts":1427751054000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tl;dr: JS makes everything slow?","msgtype":"m.text"},"ts":1427751359000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: tldr for web authors is \"if you want good perf you have to be super-careful about the code you actually run, rather than carelessly slinging about high level abstractions\"","msgtype":"m.text"},"ts":1427752052000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: wow, great doc","msgtype":"m.text"},"ts":1427752071000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"But there are also messages for platform engineers and people working on tools","msgtype":"m.text"},"ts":1427752079000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'd say tl;dr is \"ads will kill your perf\"","msgtype":"m.text"},"ts":1427752088000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Well that was certainly the most egregious thing","msgtype":"m.text"},"ts":1427752110000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"a loading spinner, that’s a canvas element, is rotated with css transforms every 42ms, via setInterval.\"","msgtype":"m.text"},"ts":1427752123000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"that's, like, wat?","msgtype":"m.text"},"ts":1427752135000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"hey gifs are so 90s","msgtype":"m.text"},"ts":1427752147000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"LIKE THIS GIF IF YOU'RE A 90S KID","msgtype":"m.text"},"ts":1427752158000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I was particularly horrified by the adsense script running in a scroll handler and taking 25ms","msgtype":"m.text"},"ts":1427752176000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: sure, I mean, why not. but do you need to replace the gif by using setInterval to animate a CSS transform that CSS could animate itself, to rotate a fucking canvas that could rotate itself?","msgtype":"m.text"},"ts":1427752196000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"lol adsense. NoScript. block adsense everywhere.","msgtype":"m.text"},"ts":1427752198000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: this is for performance for real users","msgtype":"m.text"},"ts":1427752210000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: yes","msgtype":"m.text"},"ts":1427752230000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"darobin: in that case, just install NoScript. if a site doesn't work, use a different one.","msgtype":"m.text"},"ts":1427752238000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"ok, you have a point gsnedders","msgtype":"m.text"},"ts":1427752241000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"tantek: I think a better solution is the one they advocate \"Tell Google Adsense this is unacceptable\"","msgtype":"m.text"},"ts":1427752262000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"AdSense is basically using 30ms of JS every second","msgtype":"m.text"},"ts":1427752277000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"times the number of tabs in the world this is run on, that's a lot of energy","msgtype":"m.text"},"ts":1427752294000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"where do you think all that distributed computing was going to come from? their own compute farms? nah. why bother with a compute cloud when you can hijack 30ms of user browser time every 1s?","msgtype":"m.text"},"ts":1427752313000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Well in this case I think it's more than that","msgtype":"m.text"},"ts":1427752345000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the cloud … it's made of users!","msgtype":"m.text"},"ts":1427752348000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(it was 25ms on a phone, so probably less on a desktop, but still)","msgtype":"m.text"},"ts":1427752359000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1427752365000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"SoylentCloud™","msgtype":"m.text"},"ts":1427752373000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"To be fair, doing compute on the client is totally legitimate. Running any ad related script in scroll handlers isn't","msgtype":"m.text"},"ts":1427752398000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"are there any UAs people actually use that use anything except screen or print media types?","msgtype":"m.text"},"ts":1427752407000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But the impression I get is that for the (biased) sample of sites they looked at, people had *no idea* what was actually running","msgtype":"m.text"},"ts":1427752438000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, darobin: IIRC AdSense have stats on how often the ads scroll into view, I presume that's what it's there for… and that involves touching CSSOM and that's dear","msgtype":"m.text"},"ts":1427752443000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yeah, well they clearly can't do that the way they are doing it without killing performance of the platform","msgtype":"m.text"},"ts":1427752513000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh hurrah, roc posted this to dev.platform","msgtype":"m.text"},"ts":1427752552000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"Any flash ad that’s being transpiled to HTML5 clientside is more costly than it should be.\" — wait, you are doing *what* on the client?","msgtype":"m.text"},"ts":1427752680000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Yeah, I mean I understand shumway, but are people really producing new content like that?","msgtype":"m.text"},"ts":1427752717000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"You blocked flash? Let me work around that\"","msgtype":"m.text"},"ts":1427752726000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I suspect this means that HTML authoring environments are still terrible","msgtype":"m.text"},"ts":1427752731000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: But they could just write HTML in the first place","msgtype":"m.text"},"ts":1427752752000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: that's not how we roll, though","msgtype":"m.text"},"ts":1427752755000,"senderName":"tschneidereit","senderId":"tschneidereit@irc"},
{"content":{"body":"anyway, it seems like one message here is \"the more third-party code you run, the less likely you are to win at perf\"","msgtype":"m.text"},"ts":1427752785000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Shumway won't run for ads if you have Flash disabled","msgtype":"m.text"},"ts":1427752788000,"senderName":"tschneidereit","senderId":"tschneidereit@irc"},
{"content":{"body":"And since ads are all third-party code…","msgtype":"m.text"},"ts":1427752810000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tschneidereit, no, I mean that the ad would do that itself","msgtype":"m.text"},"ts":1427752812000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: oh, ok. Yeah, obviously ads will move to html/js more and more","msgtype":"m.text"},"ts":1427752851000,"senderName":"tschneidereit","senderId":"tschneidereit@irc"},
{"content":{"body":"tschneidereit: In this case it seems like the ads had been compiled from flash to html or something","msgtype":"m.text"},"ts":1427752882000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Presumably using something shumway-like","msgtype":"m.text"},"ts":1427752894000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: doesn't google have something like that? swiffy? thought it was server-side, though","msgtype":"m.text"},"ts":1427752923000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"That could be it. But presumably it emits js that runs on the client","msgtype":"m.text"},"ts":1427752995000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh yeah, sure, the js runs on the client","msgtype":"m.text"},"ts":1427753031000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"jgraham: almost certainly Swiffy, yes. Do you have a URL?","msgtype":"m.text"},"ts":1427753036000,"senderName":"tschneidereit","senderId":"tschneidereit@irc"},
{"content":{"body":"Oh, yeah it says that in the screenshot","msgtype":"m.text"},"ts":1427753056000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1427753063000,"senderName":"tschneidereit","senderId":"tschneidereit@irc"},
{"content":{"body":"Search for flash in the document I linked above","msgtype":"m.text"},"ts":1427753083000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I guess a cynical takeaway is that Google is an enabler for bad web perf :)","msgtype":"m.text"},"ts":1427753277000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wow that google doc is amazing","msgtype":"m.text"},"ts":1427753405000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"had no idea so much overengineering was going on in webpages. no wonder the silo web keeps getting slower.","msgtype":"m.text"},"ts":1427753435000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'm not sure it's over-engineering as such","msgtype":"m.text"},"ts":1427753462000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think that there are two related dev-side problems","msgtype":"m.text"},"ts":1427753482000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think you only get to code messes / overengineering like that by having massive engineering staffs that divide up everything, and everyone has to deliver some code, so it becomes an n-layers mess of inefficient crap","msgtype":"m.text"},"ts":1427753538000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"or, don't understand this layer? add a layer!","msgtype":"m.text"},"ts":1427753554000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"1) A culture of just throwing random scripts onto a page without much clue what they're doing (e.g. ad scripts, analytics scripts). This unfortunately is lots of the revenue-providing stuff.","msgtype":"m.text"},"ts":1427753563000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yes that big time","msgtype":"m.text"},"ts":1427753571000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"2) A culture of favouring high levels of abstraction rather than optimising perf. This is partially because it's historically been needed to use jQuery or whatever to smooth over browser differences, but that's less true now","msgtype":"m.text"},"ts":1427753658000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also, we haven't given great tools for people to identify jank","msgtype":"m.text"},"ts":1427753677000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(the wikipedia example is instructive for point 2 because they are using apparently simple jQuery methods in favour of simple DOM manipulations without realising that the jQuery methods bury lots of expensive calls)","msgtype":"m.text"},"ts":1427753773000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"a lack of \"good examples\" to copy from is also a problem","msgtype":"m.text"},"ts":1427753778000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"good *running* examples that is. that you can view source on and figure out \"how did they do that?\"","msgtype":"m.text"},"ts":1427753795000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"With perf it's often more about what you *didn't* do","msgtype":"m.text"},"ts":1427753815000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's harder to get the idea of \"I didn't call any layout-computing functions\" from an example","msgtype":"m.text"},"ts":1427753841000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if you start with something performant, at least you can measure regressions when stuff gets added and like the doctor says, don't do that.","msgtype":"m.text"},"ts":1427753843000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"also when you have big engineering staffs, you're biased towards adding more crap code, and thus anti-performant by default.","msgtype":"m.text"},"ts":1427753902000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"it becomes hard to cut code for political reasons","msgtype":"m.text"},"ts":1427753921000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I think blaming this on \"big engineering staff\" is an over-simplification","msgtype":"m.text"},"ts":1427753926000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"people's managers feelings getting hurt etc.","msgtype":"m.text"},"ts":1427753932000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"companies with lots of staff can produce performant code","msgtype":"m.text"},"ts":1427753945000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can but rarely do","msgtype":"m.text"},"ts":1427753952000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Is that not more a problem with too many managers? :)","msgtype":"m.text"},"ts":1427753960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That seems hugely [citation needed]","msgtype":"m.text"},"ts":1427753972000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"citation was provided with that google doc - orgs with big-ish engineering staffs. Wikipedia was perhaps the exception.","msgtype":"m.text"},"ts":1427754013000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"That's so clearly not valid","msgtype":"m.text"},"ts":1427754039000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"to provide a counter-point of anecdata, FB has a big engineering staff yet seems to be quite good at web perf, desktop or mobile","msgtype":"m.text"},"ts":1427754052000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"so yes, it is possible to have a big engineering staff and be performant, it's just rare.","msgtype":"m.text"},"ts":1427754071000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Since \"slow and well-known\" were presumably the defining features of the sample it seems much more reasonable to assume that well-known sites are produced by larger companies with more engineers","msgtype":"m.text"},"ts":1427754102000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"from what i understand, they have a smallish group dedicated to ensuring the rest of the org is performant on the web","msgtype":"m.text"},"ts":1427754112000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"jgraham - this is just a specific instance of http://en.wikipedia.org/wiki/Conway%27s_Law","msgtype":"m.text"},"ts":1427754173000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"jgraham: change /pub to /view to get the full comment thread along the side. good discussion in there","msgtype":"m.text"},"ts":1427754208000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"In CSS, can I have a variable written only if it has not already been declared? In other words, do CSS variables allow for something like !default in Sass?","msgtype":"m.text"},"ts":1427754209000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"tantek: This whole sub-discussion is just a projection of biases about the merits of different organisational structure","msgtype":"m.text"},"ts":1427754240000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"paul_irish: Oooh!","msgtype":"m.text"},"ts":1427754272000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"paul_irish: Did I already mention this is awesome btw?","msgtype":"m.text"},"ts":1427754283000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":":) thanks! it was fun to write up","msgtype":"m.text"},"ts":1427754314000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"We're now talking to some folks in adsense. But I didnt want to gate publishing this on resolving those issues.","msgtype":"m.text"},"ts":1427754334000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"one of the big challenges for all ads/analytics is Viewability, which is now in the IAB mandatory guidelines for Ad Platform providers.","msgtype":"m.text"},"ts":1427754375000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"http://www.iab.net/iablog/2014/03/viewability-has-arrived-what-you-need-to-know-to-see-through-this-sea-change.html","msgtype":"m.text"},"ts":1427754375000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"tl;dr: ads need to know if they are at least 50%  visible to the user for 1 continuous second.","msgtype":"m.text"},"ts":1427754431000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"paul_irish: Not sure I can see the comments","msgtype":"m.text"},"ts":1427754448000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ah. you're right. flipped off commenting to address trolls deleting content. one sec.","msgtype":"m.emote"},"ts":1427754496000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"paul_irish: on that URL, scripts currently forbidden: <script>: 42","msgtype":"m.text"},"ts":1427754501000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"of course 42","msgtype":"m.text"},"ts":1427754503000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"turns out that the web platform is totally lacking performant APIs to evaluate those visibility concerns","msgtype":"m.text"},"ts":1427754515000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"which is why you see so many things binding to touch handlers and/or polling","msgtype":"m.text"},"ts":1427754531000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"What's the status of idlharness.js nowadays?","msgtype":"m.text"},"ts":1427754549000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"paul_irish: do they provide any guidance for how to performantly implement measuring that 50% visible for 1s+? or is this just an unfunded IAB mandate?","msgtype":"m.text"},"ts":1427754591000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"jgraham: https://docs.google.com/document/d/1K-mKOqiUiSjgZTEscBLjtjd6E67oiK8H2ztOiq5tigk/view is comment-enabled now.","msgtype":"m.text"},"ts":1427754596000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"gsnedders: It works. It occasionally gets patches","msgtype":"m.text"},"ts":1427754605000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: are we using it for most things now? last I knew there were concerns over the noisiness of results from it?","msgtype":"m.text"},"ts":1427754647000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"tantek: there is some text around \"you need to poll every 100ms for 10+ times to confirm its a continuous second.\"  beyond that, there is no suggestion on how one would acquire those metrics.","msgtype":"m.text"},"ts":1427754653000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"paul_irish: THanks","msgtype":"m.text"},"ts":1427754668000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: It's being used. I'm not sure what the noise concerns are/were but it's largely stable on gecko","msgtype":"m.text"},"ts":1427754694000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tantek: http://www.mediaratingcouncil.org/063014%20Viewable%20Ad%20Impression%20Guideline_Final.pdf","msgtype":"m.text"},"ts":1427754769000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"jgraham: just so many fails because of people not using WebIDL for everything","msgtype":"m.text"},"ts":1427754771000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: so it being unclear what fails are significant","msgtype":"m.text"},"ts":1427754778000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: like, what failures are subtle parts of WebIDL, what failures are fundemental bugs in the implementation of the API","msgtype":"m.text"},"ts":1427754800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham, tantek: http://www.sfgate.com/ was what kicked off this series. the amount of external script slowing down that site is just mind-blowing. and publishers are the web's bread and butter. :/","msgtype":"m.text"},"ts":1427754995000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"gsnedders: Oh, in that sense. Well yes, sometimes browsers don't implement the WebIDL spec correctly and so fail tests. I'm not sure that's a problem for anything other than artifical things like progressing specs","msgtype":"m.text"},"ts":1427755093000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So if you mean \"do they get used for CR transitions\" then no, I think they are typically ignored","msgtype":"m.text"},"ts":1427755123000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yep; we had that debate for IDB for example since all the fails were in idl tests","msgtype":"m.text"},"ts":1427755148000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"paul_irish: perhaps it is time for faster independent publishers to displace the inefficient ones.","msgtype":"m.text"},"ts":1427755152000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"\"It would be nice if...\" testharness/report could group errors somehow, e.g. \"39 failures because [[Class]] is wrong on your prototypes\".","msgtype":"m.text"},"ts":1427755169000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"paul_irish: going to www.sfgate.com without loading scripts results in empty page content body. so at some point they already killed themselves.","msgtype":"m.text"},"ts":1427755260000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"my point being more that monetizing free content on the web conflicts with delivering a fast (and good) user experience","msgtype":"m.text"},"ts":1427755261000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"wanderview: hah you want to make that change now you've implemented it all? :D","msgtype":"m.text"},"ts":1427755267000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: you around?","msgtype":"m.text"},"ts":1427755290000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"viewing source on sfgate.com...","msgtype":"m.text"},"ts":1427755456000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"paul_irish: this is hilarious. sfgate is doing the exact *opposite* of the minimum of what you should put in the HTML. they are rendering all the \"furniture\" (heading, sidebar) nav / boxes statically, and leaving out the article body itself.","msgtype":"m.text"},"ts":1427755470000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"in ~420k of just the page HTML. Because it's not like adding the article inline would have added much size to 420k of JS, nav, sidebar crap.","msgtype":"m.text"},"ts":1427755522000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah. it's a trainwreck.","msgtype":"m.text"},"ts":1427755580000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"because of course you need 33 static copies of <div class=\"social-links \" social-url=\"..\" social-hashId=\"\" social-blurb=\"> instead of the thing you might actually be sharing.","msgtype":"m.text"},"ts":1427755653000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"correction: article permalinks are more viewable","msgtype":"m.text"},"ts":1427755760000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"jgraham: I just mean in terms of seeing how interoperable support for things is. \"Can I use feature [x] in general and expect it to work?\"","msgtype":"m.text"},"ts":1427755770000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the home page is the total disaster","msgtype":"m.text"},"ts":1427755771000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"gsnedders: Well I wouldn't load interfaces.html for a feature and expect all the failures to mean \"this feature doesn't work\" without understanding what the tests are","msgtype":"m.text"},"ts":1427755908000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I wouldn't recommend doing that with any test","msgtype":"m.text"},"ts":1427755973000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"paul_irish: e.g. this page shows article text without needing JS: http://www.sfgate.com/news/article/California-drought-Sour-water-a-new-normal-6168768.php","msgtype":"m.text"},"ts":1427756011000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"ad visibility detection is a great use-case for async geometry APIs","msgtype":"m.text"},"ts":1427756239000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20246 seems like a good idea","msgtype":"m.text"},"ts":1427756506000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"karlcow: I don't understand your point","msgtype":"m.text"},"ts":1427756532000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: well yes, but it just seems worse than the general case :P","msgtype":"m.text"},"ts":1427756547000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: seems like not quite the right thing to me","msgtype":"m.text"},"ts":1427756573000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"jgraham: hmm? did I send anything on whatwg list?","msgtype":"m.text"},"ts":1427756601000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"I'll comment in the bug","msgtype":"m.text"},"ts":1427756602000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"karlcow: dev.platform","msgtype":"m.text"},"ts":1427756610000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gsnedders: Well perhaps? I mean it's clearer *what*'s being tested here. The tests are rather simple. OTOH some complex tests might need a lot of study to work out if they're edge cases or major parts of the functionality","msgtype":"m.text"},"ts":1427756654000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: aye, I guess","msgtype":"m.text"},"ts":1427756720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"roc: is there a proposal for an async geometry api?","msgtype":"m.text"},"ts":1427756751000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"not exactly","msgtype":"m.text"},"ts":1427756769000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"googling didn't find me anything concrete","msgtype":"m.text"},"ts":1427756769000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"there has been some discussion","msgtype":"m.text"},"ts":1427756772000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"F2F","msgtype":"m.text"},"ts":1427756774000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1427756780000,"senderName":"sethf","senderId":"sethf@irc"},
{"content":{"body":"I didn't make a point. Or at least I thought so. :) I gave context. It was on dev.platform. Mozilla Brain Parser Activation. Reading the email at first I have read \"audit perf\" then see the URI, click and then understood. CLICK. Ah it's BLINK. OK. Not what I was expected. it was in the context of Blink rendering engine. Some of these sites behave differently in Firefox.","msgtype":"m.text"},"ts":1427756820000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"So if there are other people as brain dead as me, I have context. That's all.","msgtype":"m.text"},"ts":1427756821000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"I guess I confused you more.","msgtype":"m.text"},"ts":1427756828000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":" /expected/expecting/","msgtype":"m.text"},"ts":1427756871000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"gsnedders/jgraham: other than Chrome (which I'm intimately familiar with...), at this point how badly do the other browsers tend to fail idlharness tests for nitpicky IDL reasons vs actual feature reasons?","msgtype":"m.text"},"ts":1427756994000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: Gecko does pretty well I think","msgtype":"m.text"},"ts":1427757218000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We have quite reasonable WebIDL conformance these days, although it's surely not perfect","msgtype":"m.text"},"ts":1427757235000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah, I got IndexedDB/interfaces.html to 100% on gecko","msgtype":"m.text"},"ts":1427757246000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"karlcow: Oh, OK","msgtype":"m.text"},"ts":1427757264000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"karlcow: Then my reply probably isn't as useful as I would like :)","msgtype":"m.text"},"ts":1427757306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"heh. Poetry!","msgtype":"m.text"},"ts":1427757331000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"jgraham: I thought it depended on which binding API Gecko was using for that API?","msgtype":"m.text"},"ts":1427757723000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ok jgraham I tried to make it more confusing :p ;) replied.","msgtype":"m.text"},"ts":1427757784000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"gsnedders: I think the WebIDL bindings are used ~everywhere now, but ask bz or Ms2ger if you actually want to know","msgtype":"m.text"},"ts":1427757866000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"-> sleep","msgtype":"m.emote"},"ts":1427757876000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I could just well be out of touch with what's happened :)","msgtype":"m.text"},"ts":1427757943000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: I don't exactly pay much attention to \"how is Gecko implementing it's DOM bindings?\"","msgtype":"m.text"},"ts":1427757971000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]