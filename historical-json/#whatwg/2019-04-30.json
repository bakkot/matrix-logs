[
{"content":{"body":"annevk: FYI https://stackoverflow.com/questions/55914486/issue-making-range-requests-in-some-browsers","msgtype":"m.text"},"ts":1556616234000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: also https://stackoverflow.com/questions/55913537/does-server-302-redirect-take-precedence-over-other-xhr-callbacks","msgtype":"m.text"},"ts":1556617321000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: answered second, first has an adequate answer","msgtype":"m.text"},"ts":1556617854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1556617896000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"A) \"Let X be 1 if Y, or 2 otherwise.\" B) \"Let X be 1 if Y, and 2 otherwise.\"","msgtype":"m.text"},"ts":1556629783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: gsnedders: jgraham: ^^","msgtype":"m.text"},"ts":1556629792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"please vote","msgtype":"m.text"},"ts":1556629798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: B, I think. Though I think both are grammatical.","msgtype":"m.text"},"ts":1556630331000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: interesting, Domenic quite strongly prefers A and I was about to change things around","msgtype":"m.text"},"ts":1556630433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't really have a particularly storng preference.","msgtype":"m.text"},"ts":1556630458000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's very hard to find some kind of reference for it too","msgtype":"m.text"},"ts":1556630511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Whatever you do, put it in infra.s.w.o","msgtype":"m.text"},"ts":1556630782000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, I might make it a Twitter poll after all, kinda curious","msgtype":"m.text"},"ts":1556631158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://twitter.com/annevk/status/1123219698198482944","msgtype":"m.text"},"ts":1556631430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the iWeb corpus has way more hits for 'and false|true otherwise' than 'or false|true otherwise'","msgtype":"m.text"},"ts":1556631517000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: iWeb?","msgtype":"m.text"},"ts":1556631560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: ^^","msgtype":"m.text"},"ts":1556631563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's the largest corpora at https://www.english-corpora.org nowadays","msgtype":"m.text"},"ts":1556631654000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"padenot suggests \"Let V be true if C, false otherwise\"","msgtype":"m.text"},"ts":1556631705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Let V be C coerced as a boolean\"","msgtype":"m.text"},"ts":1556631773000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hides.","msgtype":"m.emote"},"ts":1556631775000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hi! Is there any particular reason why parsed CSS and the CSSOM don't use DOM as a standard? Is there anything preventing building a DOM interface to parsed CSS stylesheets and rules?","msgtype":"m.text"},"ts":1556632813000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"innovati_: CSS is not composed of elements, attributes, comments, CDATA sections, and text nodes, so it wouldn't be a very good fit.","msgtype":"m.text"},"ts":1556632981000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's a tree structure of stylesheet lists, stylesheets that have properties and content, and css rules that have properties and content","msgtype":"m.text"},"ts":1556633071000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"Yep, that's very different.","msgtype":"m.text"},"ts":1556633093000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Also I don't think the stylesheet lists are a tree.)","msgtype":"m.text"},"ts":1556633102000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(They're a list.)","msgtype":"m.text"},"ts":1556633110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've been experimenting with converting CSSOM -> DOM and it does seem useful to get at it and access it that way, I guess I just didn't understand why it wasn't more like that already","msgtype":"m.text"},"ts":1556633116000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"well you have 1 document.styleSheets just like you have 1 document.documentElement, and all other content is a child of that. Tree structure.","msgtype":"m.text"},"ts":1556633145000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"You can always convert arbitrary data structures into other arbitrary data structures. If the converted-to data structure is flexible enough, then you can do so in a structure-preserving way, so that any arbitrary data can be put in that data structure. But that doesn't mean the converted-to data structure is the most useful one.","msgtype":"m.text"},"ts":1556633163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"After looking at them both I'm at a loss to understand why DOM can't work for it I guess?","msgtype":"m.text"},"ts":1556633228000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"The thing that makes document.documentElement interesting, and part of a tree structure, is that it's an _element_. Its children are of the same type as it. document.styleSheets is a list (CSSStyleSheetList IIRC), but its children are stylesheets (CSSStyleSheet IIRC). Quite different.","msgtype":"m.text"},"ts":1556633229000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"DOM can work for anything, is my point. It just doesn't work well.","msgtype":"m.text"},"ts":1556633242000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes there are a few different types of things in CSSOM, but those can be represented by different types of nodes","msgtype":"m.text"},"ts":1556633254000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"Yes, but for example, I could represent x76 assembly as a DOM tree. Or I could represent a dog as a DOM tree. You can come up with mappings from anything to a DOM tree. It's just not very useful.","msgtype":"m.text"},"ts":1556633317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As long as you're flexible and say \"oh, each part of the dog is just a type of DOM node\", then you can easily map.","msgtype":"m.text"},"ts":1556633337000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What is it about DOM that makes it not work well for parsed CSS objects? It seems beneficial enough to bother converting CSSOM -> DOM to get at it with better tools. There are already a lot more DOM-capable tools than CSSOM-capable tools out there, I'm wondering why CSS needs its own separate Object Model and can't re-use the DOM standard, or why DOM can't be adapted to handle things like CSS while keeping it all standardized","msgtype":"m.text"},"ts":1556633365000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"Well, DOM is very specific: one document, which contains 0-1 DOCTYPEs, 0-n processing instructions, and 1 element. That element contains children, which are elements, comments, text nodes. Elements have attributes and children; other node types do not.","msgtype":"m.text"},"ts":1556633423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If something doesn't meet that exact structure, then it's not a good fit for the DOM.","msgtype":"m.text"},"ts":1556633431000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"CSS has a very different structure: no tree, just a flat list of rules.","msgtype":"m.text"},"ts":1556633456000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There is no counterpart to \"element\" which can be infinitely nested","msgtype":"m.text"},"ts":1556633467000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"CSS also has special rules like @media, etc., which can have one single level of nesting of other types of things inside them. There's nothing like that in DOM land.","msgtype":"m.text"},"ts":1556633491000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's no text nodes; there's only rules and declarations","msgtype":"m.text"},"ts":1556633501000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's no attributes.","msgtype":"m.text"},"ts":1556633504000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's namespaces, but they work differently.","msgtype":"m.text"},"ts":1556633515000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It's best to come up with a data structure (CSSOM) which captures all these CSS-specific structures and constraints.","msgtype":"m.text"},"ts":1556633534000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's all I have time for for now :). Hope it helps.","msgtype":"m.text"},"ts":1556633552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"there's a stylesheet list with stylesheet objects. There are properties on these stylesheet objects that seem like they could be attributes. Inside the stylesheets there are CSS rules that also have properties","msgtype":"m.text"},"ts":1556633581000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"some CSS rules can contain other CSS rules, like @media, but it's not limited to a depth of 1","msgtype":"m.text"},"ts":1556633583000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"it's a true tree structure","msgtype":"m.text"},"ts":1556633583000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"rules can contain rules can contain rules, etc","msgtype":"m.text"},"ts":1556633585000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"I wonder how native selector nesting will be represented in CSSOM, maybe things are about to get a lot more nested","msgtype":"m.text"},"ts":1556633644000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"innovati_: if you can rewrite the existing CSS stuff on top https://dom.spec.whatwg.org/#concept-tree and reduce complexity I think that'd demonstrate that there might be something there","msgtype":"m.text"},"ts":1556634078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"innovati_: when we're talking about more concrete objects though it makes a lot less sense to me","msgtype":"m.text"},"ts":1556634099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"innovati_: but there is something to be said for generic operations on trees to work on both, similar to how Array operations work on typed arrays and such, to some extent","msgtype":"m.text"},"ts":1556634154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This is rough - it only supports 3 CSS rule types, but it converts CSSOM to a data structure (MicroXML) which can easily be converted into DOM. Once you have it in DOM suddenly you can inspect that structure in dev tools, JS has a bajillion built-in methods for analyzing and even working with DOM that it lacks for CSSOM: https://codepen.io/tomhodgins/pen/wZNVYo","msgtype":"m.text"},"ts":1556634233000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"I've been doing a lot of experiments with parsing and I was thinking the other day - what if that AST you parse stuff to was DOM instead of just something custom. Is that a step up from arrays and objects in JS? You get a standardized set of tools to work with it, and if you did that every time, I imagine you'd have a lot more interoperability between tools","msgtype":"m.text"},"ts":1556634301000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"If DOM isn't that standard or isn't flexible enough, maybe it's worth there being something that can represent tree structures of data with a standard set of operations on them for that purpose instead","msgtype":"m.text"},"ts":1556634329000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"I suppose one could have a @@treewalker protocol similar to @@iterator, but I'm not sure what that would be like and for which things it would work and how","msgtype":"m.text"},"ts":1556634404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what ordering would it even use?","msgtype":"m.text"},"ts":1556634646000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: as long as they all use concept-tree as underlying primitive that's defined right there","msgtype":"m.text"},"ts":1556634715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have a function I use sometimes when I want to touch every rule in the tree and operate on it with a JS callback function: https://github.com/tomhodgins/cssomtools/blob/master/index.js#L20&L40 is that the sort of thing you're talking about?","msgtype":"m.text"},"ts":1556634781000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"it has to be a recursive solution to get infinitely nested rules","msgtype":"m.text"},"ts":1556634793000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"well, not infinite but deeply nested","msgtype":"m.text"},"ts":1556634811000,"senderName":"innovati_","senderId":"innovati_@irc"},
{"content":{"body":"yes (but you left)","msgtype":"m.text"},"ts":1556635302000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm I guess I'll read more of the DOM spec and keep digging :D Are there other good resources for learning DOM apart from the spec itself?","msgtype":"m.text"},"ts":1556636216000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"littledan: I'm not seeing ClearKeptObjects defined anymore?","msgtype":"m.text"},"ts":1556638445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It's defined in https://github.com/tc39/proposal-weakrefs/pull/86/files#diff-d9d881ee65a07bfc860db6062acc5e68R162","msgtype":"m.text"},"ts":1556640344000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"and used in https://github.com/whatwg/html/pull/4571/files#diff-36cd38f49b9afa08222c0dc9ebfe35ebR89634","msgtype":"m.text"},"ts":1556640384000,"senderName":"littledan","senderId":"littledan@irc"},
{"content":{"body":"littledan: ah had not looked at PRs","msgtype":"m.text"},"ts":1556641196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you remember why it's AbortSignal? signal for fetch? Instead of just using undefined to mean not present?","msgtype":"m.text"},"ts":1556641260000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Request#signal iirc","msgtype":"m.text"},"ts":1556641298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm I see","msgtype":"m.text"},"ts":1556641309000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if there’s an interface and dictionary you run into that quickly unfortunately","msgtype":"m.text"},"ts":1556641356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: interface could return undefined I suppose, but might also be confusing, esp. given long tradition to not do that","msgtype":"m.text"},"ts":1556641407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah. Just means that the pattern is going to spread to other APIs I think.","msgtype":"m.text"},"ts":1556641421000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if passing the interface as dictionary makes sense that seems okay","msgtype":"m.text"},"ts":1556641574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can we get any sort of process for submitting feature requests?","msgtype":"m.text"},"ts":1556647882000,"senderName":"Soni","senderId":"Soni@irc"},
{"content":{"body":"https://discourse.wicg.io/t/meta-tag-for-protocol-handlers-default/3525","msgtype":"m.text"},"ts":1556647893000,"senderName":"Soni","senderId":"Soni@irc"},
{"content":{"body":"hm...","msgtype":"m.text"},"ts":1556648038000,"senderName":"Soni","senderId":"Soni@irc"},
{"content":{"body":"wait let me try something","msgtype":"m.text"},"ts":1556648047000,"senderName":"Soni","senderId":"Soni@irc"}
]