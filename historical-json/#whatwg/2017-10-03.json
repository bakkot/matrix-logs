[
{"content":{"body":"domfarolino: that sounds great to me. One for each class, I think","msgtype":"m.text"},"ts":1506995980000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: if the fields on the instances never change, then it's OK, although perhaps it's a bit trickier for the reader to know that ahead of time. (Although, indirecting through more abstraction might also be trickier for the reader.)","msgtype":"m.text"},"ts":1506996057000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: I think Fetch does this pretty well with its `Response`-has-an-associated-response-struct separation?","msgtype":"m.text"},"ts":1506996081000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Perfect. Also...I was considering submitting a PR to wpt removing https://github.com/w3c/web-platform-tests/blob/master/fetch/api/request/request-idl.html#L40 and some other lines that use the `type` parameter since https://github.com/whatwg/fetch/pull/582 has been merged, does this sound OK, as correct implementations incorrectly fail a couple tests now?","msgtype":"m.text"},"ts":1506996174000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Or would we want to take it a step further and assert that `type` does not exist as an attribute or something (less confident in this option)","msgtype":"m.text"},"ts":1506996200000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Oh, yeah, so updating the IDL tests is always good. foolip has been looking into centralizing all of those into https://github.com/w3c/web-platform-tests/tree/master/interfaces .","msgtype":"m.text"},"ts":1506996270000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Adding a -historical.html test that asserts that something is gone is a nice bonus","msgtype":"m.text"},"ts":1506996282000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Example https://github.com/w3c/web-platform-tests/blob/master/html/semantics/tabular-data/historical.html (but there are lots of different styles if you Ctrl+F for historical.html)","msgtype":"m.text"},"ts":1506996335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks!","msgtype":"m.text"},"ts":1506996629000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: https://fetch.spec.whatwg.org/#concept-response-response does kind of exemplify the problem: since fields of the response struct change, it's not really any safer to use in parallel than the interface that it's associated with.","msgtype":"m.text"},"ts":1507005426000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: they can change but not always","msgtype":"m.text"},"ts":1507006240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: we discussed this here recently","msgtype":"m.text"},"ts":1507006259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: my suggestion was that we ensure things are safe via review and try to uplift as we learn","msgtype":"m.text"},"ts":1507006299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: our type system is still incomplete too; suspect when that is better and we have more common operations defined we can suitably restrict in parallel","msgtype":"m.text"},"ts":1507006378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, reviewing for actual races seems reasonable. Are we also avoiding use of interfaces from parallel sections, or just avoiding races on their fields?","msgtype":"m.text"},"ts":1507006562000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(In particular, readonly fields and internal slots could be safe.)","msgtype":"m.text"},"ts":1507006586000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: only internal slots could be safe","msgtype":"m.text"},"ts":1507006620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: it seems okayish to do that, maybe with a note explaining why you need not be alarmed","msgtype":"m.text"},"ts":1507006662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"... because readonly fields' getters use something from the current global?","msgtype":"m.text"},"ts":1507006664000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah, and because we donâ€™t know if it still holds the same getter","msgtype":"m.text"},"ts":1507006719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"'k, thanks.","msgtype":"m.text"},"ts":1507006734000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"annevk: Is it possible to observe anything besides \"about:client\" or \"\" when looking at Request.referrer? My understanding is that the fetch algorithm may set the Request's referrer to a URL, but this will be on a copy of the passed in Request object...so can you ever observe this URL in application code?","msgtype":"m.text"},"ts":1507015142000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: in a service worker, but you can also set it to a same-origin URL","msgtype":"m.text"},"ts":1507016483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah ok how do","msgtype":"m.text"},"ts":1507016915000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: you set it?","msgtype":"m.text"},"ts":1507016930000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: fetch(url, { referrer: \"/hi\" })","msgtype":"m.text"},"ts":1507016990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: think you can take a look at: https://github.com/whatwg/infra/pull/155#issuecomment-332964862 at some point?","msgtype":"m.text"},"ts":1507033849000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: oh sorry, I thought that landed already","msgtype":"m.text"},"ts":1507033997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: np","msgtype":"m.text"},"ts":1507034006000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: squashed and merged","msgtype":"m.text"},"ts":1507034181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ta","msgtype":"m.text"},"ts":1507034190000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: feel free to ping sooner next time","msgtype":"m.text"},"ts":1507034206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: if I haven't replied within a day or two it's highly likely I missed something","msgtype":"m.text"},"ts":1507034223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the pr that needs it is far from being ready","msgtype":"m.text"},"ts":1507034226000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: so there was no reason to stress anyone out. :)","msgtype":"m.text"},"ts":1507034247000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk thanks for the confirmation","msgtype":"m.text"},"ts":1507038039000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"rwaldron: I hope you can find some joy in working on this, since there's a lot of sad things in that algorithm","msgtype":"m.text"},"ts":1507038186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I cannot lie, it's been a slog getting to where I am now. I have a WIP branch that includes informative prose that describes \"what this test file is actually doing, and what spec parts are relevant to that end\".","msgtype":"m.text"},"ts":1507038307000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Coupled with reverse engineering browsers it can indeed be rather painful","msgtype":"m.text"},"ts":1507038381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Each file has a special multiline comment area that contains meta data (I'm using yaml, because it's easy to type)","msgtype":"m.text"},"ts":1507038385000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"Yes, I've been carrying around two computers for the last month","msgtype":"m.text"},"ts":1507038396000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"A MBP and Surface Book","msgtype":"m.text"},"ts":1507038416000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"What I personally enjoy about is that once I've solved some gnarly task like that hopefully nobody else will have to","msgtype":"m.text"},"ts":1507038424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's definitely the silver lining","msgtype":"m.text"},"ts":1507038441000,"senderName":"rwaldron","senderId":"rwaldron@irc"},
{"content":{"body":"mkwst: Does `new A().foo()` throw a SecurityError in this context: [SecureContext, Constructor] interface A : B {}; interface B { void foo(); }; The spec says no. Can you confirm?","msgtype":"m.text"},"ts":1507042104000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Shouldn't new A() throw?","msgtype":"m.text"},"ts":1507042220000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"didn't check","msgtype":"m.emote"},"ts":1507042226000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: oh, yes, of course.","msgtype":"m.text"},"ts":1507042462000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"And I would hope new B() too, if it has a ctro","msgtype":"m.text"},"ts":1507042500000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Duh. Thanks","msgtype":"m.text"},"ts":1507042501000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Np :)","msgtype":"m.text"},"ts":1507042505000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No, B wouldn't","msgtype":"m.text"},"ts":1507042523000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(Why would it?)","msgtype":"m.text"},"ts":1507042537000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1507042550000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I read B : A, not A : B","msgtype":"m.text"},"ts":1507042557000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The fact that [Exposed] and [SecureContext] cater to both the interface and its members is confusing, imho","msgtype":"m.text"},"ts":1507043222000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Especially once you have partials (and now mixins involved)","msgtype":"m.text"},"ts":1507043263000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/now/soon/","msgtype":"m.text"},"ts":1507043278000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: partials and mixin just inherit (unless they are specifically restricted I suppose)","msgtype":"m.text"},"ts":1507046095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: but specific restrictions should prolly only work for members","msgtype":"m.text"},"ts":1507046135000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: please look at https://github.com/whatwg/html/pull/3091 if you have the chance (requiring UTF-8 throughout HTML)","msgtype":"m.text"},"ts":1507046428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: Is there a way to attach an [algorithm] attribute to a ### header, or do I need to convert back to <h3 algorithm>?","msgtype":"m.text"},"ts":1507051866000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Currently no, you have to use HTML markup. Happy to accept patches to the markdown processor to add attr/class support alongside the id support.","msgtype":"m.text"},"ts":1507051914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thx","msgtype":"m.text"},"ts":1507051937000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic: JakeA: do you think its fair to write a WPT test that does a respondWith() a ReadableStream, provides a single chunk but does not close, and then tests if the window see the data from the intercepted fetch() Response.body?","msgtype":"m.text"},"ts":1507062346000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: JakeA: I think this should work, but in theory the spec could allow some re-buffering that might delay some/all of the data if only a single chunk is sent","msgtype":"m.text"},"ts":1507062378000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ehhhhh maybe with an appropriate comment saying that you could still fail this and be spec-conformant, and that if a browser has problems with the test they should file an issue to discuss","msgtype":"m.text"},"ts":1507062411000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I could write this as a firefox specific test instead of a WPT if we think that test is too strict","msgtype":"m.text"},"ts":1507062413000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Why not just close the stream?","msgtype":"m.text"},"ts":1507062414000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: because I specifically want to test that streaming works... for example, today chrome and firefox behavior differently on this test: https://html-sw-stream.glitch.me/","msgtype":"m.text"},"ts":1507062453000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: firefox won't send any data to the outer window until the body is closed today","msgtype":"m.text"},"ts":1507062468000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm fixing that","msgtype":"m.text"},"ts":1507062488000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Hmmm","msgtype":"m.text"},"ts":1507062490000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I see your point","msgtype":"m.text"},"ts":1507062496000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"As long as it has appropriately liberal timeouts (e.g. the default WPT timeout)","msgtype":"m.text"},"ts":1507062511000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i.e. it's just like chunk received, then t.done()","msgtype":"m.text"},"ts":1507062527000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was planning to receive chunk, then postMessage() the SW to close the stream, cleanup and done","msgtype":"m.text"},"ts":1507062554000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh, why?","msgtype":"m.text"},"ts":1507062565000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: to allow the service worker to gracefully cleanup instead of timing out","msgtype":"m.text"},"ts":1507062583000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess I don't understand enough about service workers to know why that would matter","msgtype":"m.text"},"ts":1507062602000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you can't unregister the service worker fully until its done processing any outstanding events... so if you only partially provide the body to respondWith() then the worker may live for a few minutes... that could screw up later tests","msgtype":"m.text"},"ts":1507062654000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess I have to waitUntil() to hold the worker alive since we haven't done any magic respondWith()+ReadableStream lifetime stuff","msgtype":"m.text"},"ts":1507062691000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: JakeA: FWIW this is the test I came up with: https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=1204254&attachment=8914930","msgtype":"m.text"},"ts":1507066532000,"senderName":"wanderview","senderId":"wanderview@irc"}
]