[
{"content":{"body":"https://news.ycombinator.com/item?id=4629698","msgtype":"m.text"},"ts":1350101262000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"zewt: you around?","msgtype":"m.text"},"ts":1350115627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: There are some photos of you I took at Fronteers 2012, http://www.flickr.com/photos/seddy/sets/72157631731160840/","msgtype":"m.text"},"ts":1350117752000,"senderName":"sedovsek","senderId":"sedovsek@irc"},
{"content":{"body":"sedovsek: heh, thanks","msgtype":"m.text"},"ts":1350117780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"must be a pretty nice camera","msgtype":"m.text"},"ts":1350117860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This is like complimenting a cook with \"you must have some nice cans and pots\", but yea… i guess it is. :P","msgtype":"m.text"},"ts":1350117976000,"senderName":"sedovsek","senderId":"sedovsek@irc"},
{"content":{"body":"sedovsek: :-)","msgtype":"m.text"},"ts":1350118383000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"huh? for .ch, you'd guess windows-1252. what's hard about that?","msgtype":"m.text"},"ts":1350119283000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"there is no .zh TLD, is there?","msgtype":"m.text"},"ts":1350119385000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I think I'm interested in developing a Gecko feature that with the flip of a boolean about:config pref would replace guessing based on the Firefox localization with guessing based on the content TLD","msgtype":"m.text"},"ts":1350119884000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"it would be a hard fight to change the default though","msgtype":"m.text"},"ts":1350119911000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"apparently WebKit has almost no sniffing algorithm btw and is not planning on changing that","msgtype":"m.text"},"ts":1350120648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's why I kinda gave up on defining encoding sniffing for now","msgtype":"m.text"},"ts":1350120657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ap argued that what Gecko had was not needed","msgtype":"m.text"},"ts":1350120681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(there's no .zh)","msgtype":"m.text"},"ts":1350120693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just found out they're gonna delete even more ccTLDs","msgtype":"m.text"},"ts":1350120817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\".an .su .tp\" are next","msgtype":"m.text"},"ts":1350120829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"makes sense","msgtype":"m.text"},"ts":1350120918000,"senderName":"j_wright","senderId":"j_wright@irc"},
{"content":{"body":"not really http://www.w3.org/Provider/Style/URI.html","msgtype":"m.text"},"ts":1350120992000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".nl is one of the largest ccTLD; just imagine if a couple of decades from now we're no longer independent but part of the EU, would kinda suck imo if all my links broke","msgtype":"m.text"},"ts":1350121451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".ax is not independent but they have a \"country\" TLD","msgtype":"m.text"},"ts":1350121971000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm more worried about US agencies seizing domain under generic TLDs than about European TLDs going away because of the EU turning into a federal state","msgtype":"m.text"},"ts":1350122491000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so if Firefox, Chrome and Opera support SPDY, what good can come out of the IETF making something incompatible?","msgtype":"m.text"},"ts":1350123878000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"IETF crowning it as \"theirs\"?","msgtype":"m.text"},"ts":1350125290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how likeöy is it that IETF would just crown SPDY? the IETF has stakeholders whose products SPDY treats as adversaries","msgtype":"m.text"},"ts":1350125824000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i.e. products that are in the intercept business","msgtype":"m.text"},"ts":1350125850000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"s/likeöy/likely/","msgtype":"m.text"},"ts":1350125877000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"There's also the upgrade mechanism if it will get used. -- Many features has not been implemented either, so when Opera did implementation it didn't implement those not seen on the general web.","msgtype":"m.text"},"ts":1350126845000,"senderName":"Velmont","senderId":"Velmont@irc"},
{"content":{"body":"hsivonen: I guess we'll see; I'm not too interested in getting involved though, WebSocket was hell","msgtype":"m.text"},"ts":1350127146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bmo produces a *huge* amount of mail per bug","msgtype":"m.text"},"ts":1350134818000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"email preferences","msgtype":"m.text"},"ts":1350134917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, but there's no email pref that can distinguish between interesting comments and we-use-the-bug-tracker-as-a-code-review-tool comments","msgtype":"m.text"},"ts":1350134956000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: we can have iteration later","msgtype":"m.text"},"ts":1350144790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i just mean iteration can't follow Map since it doesn't do it (so either we wait until they do, or do something that probably won't match)","msgtype":"m.text"},"ts":1350144827000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"just a minor point","msgtype":"m.text"},"ts":1350144841000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"as for following Map, I guess I meant the ability to use it directly in some sense","msgtype":"m.text"},"ts":1350144856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"obviously we can make our own using setter/getter/creator/deleter","msgtype":"m.text"},"ts":1350144869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i figured it was just expose the same interface","msgtype":"m.text"},"ts":1350144871000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I guess \"has\" follows from indexed names","msgtype":"m.text"},"ts":1350144939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does dataset have has?","msgtype":"m.text"},"ts":1350144950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you mean 'x' in elem.dataset?","msgtype":"m.text"},"ts":1350144990000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1350144995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(i mean, it has that, not sure if you're asking something else)","msgtype":"m.text"},"ts":1350145062000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"fwiw i'm not dead set against a functional api or anything and boris might be right; i just wanted to examine it more closely since the arguments from the irc log didn't seem convincing","msgtype":"m.text"},"ts":1350145142000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(uh, not \"functional api\", but you know what i mean)","msgtype":"m.text"},"ts":1350145160000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"on the other hand the prototype-less-sub-interface thing may also be fine","msgtype":"m.text"},"ts":1350145192000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess url.query.values.foo is sort of ugly, though url.query.get(\"foo\") isn't actually less typing or anything","msgtype":"m.text"},"ts":1350145495000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: sydfunctional api? :p","msgtype":"m.text"},"ts":1350145529000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Argh","msgtype":"m.text"},"ts":1350145533000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*dysfunctional","msgtype":"m.text"},"ts":1350145539000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"dyslexics untie","msgtype":"m.text"},"ts":1350145541000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Or sydlexics, as I call them","msgtype":"m.text"},"ts":1350145562000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"url.query[\"foo\"] would be less typing","msgtype":"m.text"},"ts":1350145705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or url.query.foo","msgtype":"m.text"},"ts":1350145712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would allow for things like url.query.delete(\"x\", \"x\") though (only delete x where its value is x)","msgtype":"m.text"},"ts":1350145738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but then you wouldn't want getAll on url.query","msgtype":"m.text"},"ts":1350145739000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"would not*","msgtype":"m.text"},"ts":1350145744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right, getter would always return a list","msgtype":"m.text"},"ts":1350145752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't think i like that","msgtype":"m.text"},"ts":1350145763000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"because you end up having to write things like if(url.query.foo && url.query.foo[0] == \"bar\") all the time","msgtype":"m.text"},"ts":1350145776000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hmm yeah","msgtype":"m.text"},"ts":1350145794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess maybe method-based approach is not too bad","msgtype":"m.text"},"ts":1350145806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean, one-item-per-key is by far the common case, even though we do want to handle the multiple-items case when needed","msgtype":"m.text"},"ts":1350145807000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what happens if we have both methods and named getters and such?","msgtype":"m.text"},"ts":1350145826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well if you have url.query.getAll() and the query is ?getAll=1 ...","msgtype":"m.text"},"ts":1350145852000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"localStorage has that","msgtype":"m.text"},"ts":1350145859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I guess TC39 doesn't like it, but on the other hand it already exists","msgtype":"m.text"},"ts":1350145879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, with localStorage you're usually constructing what you're storing around the api, so you just don't store things like \"toString\"","msgtype":"m.text"},"ts":1350145889000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"a query api might be parsing any arbitrary url","msgtype":"m.text"},"ts":1350145903000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you might want to store something like \"length\" though","msgtype":"m.text"},"ts":1350145926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think having the explicit methods is probably better","msgtype":"m.text"},"ts":1350145945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean you'd just call it something else, or wrap it in a sub-object","msgtype":"m.text"},"ts":1350145955000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"also allows for some things http://medialize.github.com/URI.js/ offers","msgtype":"m.text"},"ts":1350145969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you usually don't take arbitrary external data and dump it straight into localStorage","msgtype":"m.text"},"ts":1350145975000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"am I the only person that cringes at this \"how do you like\" silliness heh","msgtype":"m.text"},"ts":1350146006000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"we definitely will want to support operations outside of simple getter/setter/iterate/contains, and i think that just either means 1: methods or 2: a sub-object for the subset of dictionary-like operations","msgtype":"m.text"},"ts":1350146090000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if those are the choices I'm going with 1","msgtype":"m.text"},"ts":1350146125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which means nothing much has to change, teehee","msgtype":"m.text"},"ts":1350146160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the first thing i'd probably do is monkey patch in values :P","msgtype":"m.text"},"ts":1350146314000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(all of my query-handling code just converts to an object anyway)","msgtype":"m.text"},"ts":1350146340000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"bleh, one api we really need to unscrew: cookies","msgtype":"m.text"},"ts":1350146406000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"document.cookie has got to be the single worst (non-dead) API on the whole platform","msgtype":"m.text"},"ts":1350146427000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hey look some class action lawyer got rich as hell and i get $.40","msgtype":"m.text"},"ts":1350146548000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hachette, Harper Collins, and Simon & Schuster have settled an antitrust lawsuit about e-book prices.","msgtype":"m.text"},"ts":1350146567000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the Attorneys General estimate that it will range from $0.30 to $1.32 for every eligible Kindle book that you purchased between April 2010 and May 2012.","msgtype":"m.text"},"ts":1350146570000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"didn't actually mean that in this channel, but sure why not","msgtype":"m.text"},"ts":1350146590000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"FWIW I think a method based API is the only sane thing in js","msgtype":"m.text"},"ts":1350146860000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"document.cookie was supposed to be obsoleted by localStorage","msgtype":"m.text"},"ts":1350146879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Even in better languages, handling one vs many nicely is difficult","msgtype":"m.text"},"ts":1350146881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"of course localStorage made it somewhat worse, in hindsight","msgtype":"m.text"},"ts":1350146894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"localStorage and cookies serve completely different use cases","msgtype":"m.text"},"ts":1350146897000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1350146936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean, yeah, before localStorage the \"store data for client-side access\" use case was done with cookies, which was bad, but the \"sending session info to the server\" set of cases is still mostly cookies","msgtype":"m.text"},"ts":1350146981000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The web has an exciting selection of storage APIs","msgtype":"m.text"},"ts":1350146988000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"All broken","msgtype":"m.text"},"ts":1350146991000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"and the next time I end up with a mystery duplicate cookie that I can't delete because I don't know its path and document.cookie doesn't tell me I'm going to something something","msgtype":"m.text"},"ts":1350147033000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so on Storage Hixie_ is using \"setter creator\" on one line but on the dataset one he's not","msgtype":"m.text"},"ts":1350147267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what's the difference?","msgtype":"m.text"},"ts":1350147573000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"between \"setter\" and \"creator\"","msgtype":"m.text"},"ts":1350147591000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess in javascript there isn't one","msgtype":"m.text"},"ts":1350147634000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"seems like there inherently can't be a new one with things like dataset, since you don't know in advance of running the algorithm whether the item exists or not","msgtype":"m.text"},"ts":1350147680000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well you do I think per Web IDL","msgtype":"m.text"},"ts":1350148040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since it wouldn't be an indexed name","msgtype":"m.text"},"ts":1350148090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"webidl itself doesn't keep track of what names are actually set, right? (since that's algorithmic for things like this)","msgtype":"m.text"},"ts":1350148168000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(it has no idea that the set of names in classList changes because you messed with className)","msgtype":"m.text"},"ts":1350148194000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(array, rather, same difference)","msgtype":"m.text"},"ts":1350148204000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(guess I should stick to dataset for examples and not mix up the discussion heh)","msgtype":"m.text"},"ts":1350148286000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so, it doesn't know that setAttribute might change the names you can retrieve with dataset","msgtype":"m.text"},"ts":1350148332000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Web IDL has these concept of supported property names and such","msgtype":"m.text"},"ts":1350148461000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"concepts*","msgtype":"m.text"},"ts":1350148467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and they are defined for DOMStringMap too","msgtype":"m.text"},"ts":1350148474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but it's indeed algorithmic there, but it still exists for stuff like dataset.x","msgtype":"m.text"},"ts":1350148503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, I cannot really think of a case where you'd want setter/creator to be different","msgtype":"m.text"},"ts":1350148545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, the end behavior might be different, but still i'd put that all within a single algorithm, not making webidl part of that","msgtype":"m.text"},"ts":1350148613000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"eg. setting a query key should probably be a bit different depending on whether the key already exists (replace it in the same place) or not (append it), but webidl doesn't need to be involved in that","msgtype":"m.text"},"ts":1350148656000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: in encoding, given a DOMString with unpaired surrogates, \"preprocessed\" to unicode characters with http://dev.w3.org/2006/webapi/WebIDL/#dfn-obtain-unicode (giving having U+FFFDs), is the intended result that you get an encoder error with most encodings, but not with UTF-8 (which passes it through)?","msgtype":"m.text"},"ts":1350151779000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"giving having giving","msgtype":"m.text"},"ts":1350151785000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"on one hand it makes sense (unicode encodings have the replacement character, but most other encodings don't have any equivalent), but it might be unexpected for algorithms: what's really a UTF-16 error causing different results (encoder error or no encoder error) depending on the output","msgtype":"m.text"},"ts":1350151875000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(just something that came to mind while reminding myself what https://www.w3.org/Bugs/Public/show_bug.cgi?id=16219 was about)","msgtype":"m.text"},"ts":1350151926000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"guess it doesn't really matter, since it's not like it's exposing code paths that otherwise wouldn't be","msgtype":"m.text"},"ts":1350152465000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"utf-16 would work too","msgtype":"m.text"},"ts":1350152554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, any unicode encoding","msgtype":"m.text"},"ts":1350152575000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so WebKit always uses &#{digits}; for the non-Unicode encodings","msgtype":"m.text"},"ts":1350152618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"some browsers sometimes emit ? depending on the context","msgtype":"m.text"},"ts":1350152629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Gecko emits the utf-8 byte sequence...","msgtype":"m.text"},"ts":1350152643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, different users of the algorithms will want to do different things in those cases, i imagine","msgtype":"m.text"},"ts":1350152652000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(also depends on the context)","msgtype":"m.text"},"ts":1350152655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if we leave the encoding API alone there's only two users","msgtype":"m.text"},"ts":1350152677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<form> and URL","msgtype":"m.text"},"ts":1350152681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<form> everyone does &#...;","msgtype":"m.text"},"ts":1350152701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"URL is &#...; / ? / utf-8 byte sequence","msgtype":"m.text"},"ts":1350152718000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"encoding api wants to be able to have nonfatal encoding, right?","msgtype":"m.text"},"ts":1350152719000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1350152720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I kinda think we should try to go with &#...; and fatal","msgtype":"m.text"},"ts":1350152751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't remember offhand whether that api currently allows non-unicode encoding or if they're trying to limit that to unicode (that's flipped back and forth a couple times)","msgtype":"m.text"},"ts":1350152753000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"given that this is legacy","msgtype":"m.text"},"ts":1350152754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then we can keep the behavior in the Encoding spec","msgtype":"m.text"},"ts":1350152770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(well we could do that anyway, but you know)","msgtype":"m.text"},"ts":1350152779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, once it supports &#1234; (meaning \"encoder error\" is being passed the codepoint), adding a parameter to say \"use ?\" later would be trivial","msgtype":"m.text"},"ts":1350152841000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The main problem is that people are not happy with aligning on legacy stuff","msgtype":"m.text"},"ts":1350152842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: right","msgtype":"m.text"},"ts":1350152870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If the internal fatal flag of the decoder object is set, then a decoder error causes an DOMException of type EncodingError to be thrown rather than emitting a fallback code point.","msgtype":"m.text"},"ts":1350152950000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in other news, URLQuery.delete cannot work, it's a reserved word","msgtype":"m.text"},"ts":1350152957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has to be remove like I named it earlier on","msgtype":"m.text"},"ts":1350152966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's not really good, sort of a monkey-patch","msgtype":"m.text"},"ts":1350152975000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: i thought about that but when i tested \"delete\" as a method name it seemed to work","msgtype":"m.text"},"ts":1350152994000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"though it's probably good to avoid anyway, if only to not make syntax highlighting weird, heh","msgtype":"m.text"},"ts":1350153012000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what's wrong with the exception stuff?","msgtype":"m.text"},"ts":1350153039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's hard to follow algorithms when one spec is saying \"run this other spec's algorithm, except when this sub-algorithm is run do this other thing\"","msgtype":"m.text"},"ts":1350153066000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"delete can work as a method name","msgtype":"m.text"},"ts":1350153108000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"not really sure what would be a better way","msgtype":"m.text"},"ts":1350153117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although I think it might not be ideal style","msgtype":"m.text"},"ts":1350153119000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"have an input flag that means \"errors are fatal\" and define the behavior branch within the encoding spec","msgtype":"m.text"},"ts":1350153145000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(reserved words don't apply to propery names)","msgtype":"m.text"},"ts":1350153147000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: cannot define behavior for e.g. XML parsers within the encoding spec","msgtype":"m.text"},"ts":1350153303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: I guess it could be a \"run these steps defined in some applicable spec\" kinda thing","msgtype":"m.text"},"ts":1350153340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure I care too much about that right now","msgtype":"m.text"},"ts":1350153362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arv argued for  delete","msgtype":"m.text"},"ts":1350153559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but most other APIs use remove so I guess I'll go with remove","msgtype":"m.text"},"ts":1350153571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't really care either way, but fwiw apparently Map uses delete","msgtype":"m.text"},"ts":1350153599000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(at least, at the moment)","msgtype":"m.text"},"ts":1350153632000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"grr... validator.nu doesn't seem to build with Java 1.5 :-(","msgtype":"m.text"},"ts":1350154180000,"senderName":"SamB_MacG5","senderId":"SamB_MacG5@irc"},
{"content":{"body":"java: \"heh\"","msgtype":"m.text"},"ts":1350154213000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: sure, and in JavaScript you'd do delete x[y]","msgtype":"m.text"},"ts":1350154314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not x.delete(y)","msgtype":"m.text"},"ts":1350154326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh well, time for other stuff","msgtype":"m.text"},"ts":1350154340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: from https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Map it looks like x.delete(y)","msgtype":"m.text"},"ts":1350154361000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"doesn't look like it uses any native syntax at all","msgtype":"m.text"},"ts":1350154374000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"whoa weird","msgtype":"m.text"},"ts":1350154399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well then lets keep delete","msgtype":"m.text"},"ts":1350154427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"goes back to watching Homeland","msgtype":"m.emote"},"ts":1350154439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(also no idea if that's up to date or how close to stable the spec is, this is about the first time i've even looked at Map)","msgtype":"m.text"},"ts":1350154449000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh TabAtkins, I was faster than you, but you gave a better answer","msgtype":"m.text"},"ts":1350162897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also, felt good to rant a little on URLs","msgtype":"m.text"},"ts":1350162939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but this is stackoverflow, only the first answer is right","msgtype":"m.text"},"ts":1350162940000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"then Opera wins","msgtype":"m.text"},"ts":1350162948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh, one reason i got tired of that site, it encourages fast answers instead of good ones","msgtype":"m.text"},"ts":1350162956000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"123","msgtype":"m.text"},"ts":1350163904000,"senderName":"teear","senderId":"teear@irc"},
{"content":{"body":"heh https://www.w3.org/Bugs/Public/show_bug.cgi?id=19528","msgtype":"m.text"},"ts":1350164692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<adobe> i hope you don't mind if we try to block fixing problems by filing bugs and demanding multiple in-person meetings","msgtype":"m.text"},"ts":1350165076000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"lets not attribute this to Adobe","msgtype":"m.text"},"ts":1350165154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"he's posting from @adobe, so that's what I'm inclined to do","msgtype":"m.text"},"ts":1350165183000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if he doesn't mean what he says to be attributed to adobe, and to have the weight (whatever that may actually be) of adobe's w3c membership behind it, he should be posting from a personal address (at least re: the webapps post)","msgtype":"m.text"},"ts":1350165312000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that seems way silly","msgtype":"m.text"},"ts":1350165338000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"company can have lots of opinions","msgtype":"m.text"},"ts":1350165351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in any event, retrofitting how URLs work into how the IETF specs think URLs work seems like a rather uninteresting task","msgtype":"m.text"},"ts":1350165389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems like trying to do anything with the IETF is a rather uninteresting task :)","msgtype":"m.text"},"ts":1350165428000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and not obviously a useful one)","msgtype":"m.text"},"ts":1350165506000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the collection spec is up to date","msgtype":"m.text"},"ts":1350168555000,"senderName":"Benvie","senderId":"Benvie@irc"},
{"content":{"body":"and it's already implemented in V8 and Spidermonkey (for a while)","msgtype":"m.text"},"ts":1350168582000,"senderName":"Benvie","senderId":"Benvie@irc"},
{"content":{"body":"unlikely to change much at this point","msgtype":"m.text"},"ts":1350168589000,"senderName":"Benvie","senderId":"Benvie@irc"},
{"content":{"body":"https://twitter.com/algermissen/status/257229931338137600 is why you don't go to the IETF","msgtype":"m.text"},"ts":1350169977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"even though they could know from stuff like curl that their specs are broken, they still think the problem is with the implementations","msgtype":"m.text"},"ts":1350170001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bizarro world","msgtype":"m.text"},"ts":1350170012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"party time","msgtype":"m.text"},"ts":1350170191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: just because something is an individuals professional opinion doesn't mean they want to claim that the entire company would agree with them ...","msgtype":"m.text"},"ts":1350170280000,"senderName":"SamB_MacG5","senderId":"SamB_MacG5@irc"},
{"content":{"body":"SamB_MacG5: and i didn't say anything like that","msgtype":"m.text"},"ts":1350171043000,"senderName":"zewt","senderId":"zewt@irc"}
]