[
{"content":{"body":"penguin-breeder.org, really jochen__??","msgtype":"m.text"},"ts":1435803049000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"... huh ok it's a real thing","msgtype":"m.text"},"ts":1435803070000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(I was surprised that your email in bugzilla was at a ... strange ... domain name)","msgtype":"m.text"},"ts":1435803090000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: yeah... I am also feeling discouraged about custom elements now...","msgtype":"m.text"},"ts":1435808467000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This site-wide heading thread is a bit sad","msgtype":"m.text"},"ts":1435811792000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought those usually ended up on public-html","msgtype":"m.text"},"ts":1435811797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"philipj: Fullscreen: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27865 does this proposal seem reasonable to you?","msgtype":"m.text"},"ts":1435819943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: xidorn is asking me to fix that to unblock unprefixing efforts in Gecko","msgtype":"m.text"},"ts":1435819960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"say we have promise, which has a timeout in it, if we reject the promise,  the timeout will not get rejected, which is the best way to handle this?","msgtype":"m.text"},"ts":1435822957000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Domenic's new proposal solves this?","msgtype":"m.text"},"ts":1435822960000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: wrap the rejection?","msgtype":"m.text"},"ts":1435825543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"howdoi: so that you can also cancel the timeout?","msgtype":"m.text"},"ts":1435825551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, something like canellable promise","msgtype":"m.text"},"ts":1435825567000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1435825568000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: I don't see why that would handle timeouts automatically","msgtype":"m.text"},"ts":1435825583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1435825637000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"it won't, but on cancelation clearing timeout will be done","msgtype":"m.text"},"ts":1435825661000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"JakeA: https://github.com/slightlyoff/ServiceWorker/issues/718","msgtype":"m.text"},"ts":1435826158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: might have helped if some design input from Mozilla was taken","msgtype":"m.text"},"ts":1435826180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: still believe that SW without fetch is a rarity. Question is how much we should bend over backwards for the math.random case","msgtype":"m.text"},"ts":1435826260000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: are you there? I'm a bit confused about something you took from https://github.com/inexorabletash/polyfill/commit/a9f17a7bacc588de674832b47241e22ebf40a676","msgtype":"m.text"},"ts":1435827754000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: okay","msgtype":"m.text"},"ts":1435827775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in the https://dom.spec.whatwg.org/#dom-childnode-replacewith steps, how can the parent change between step 1 and 5?","msgtype":"m.text"},"ts":1435827792000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"JakeA: it's not exactly bending over backward to make it opt-in","msgtype":"m.text"},"ts":1435827794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just like every other service worker feature is","msgtype":"m.text"},"ts":1435827804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bluebird had cancellable promises","msgtype":"m.text"},"ts":1435827825000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"annevk: Paritosh says something about mutation events, but the steps in between don't seem to do anything that could fire mutation events","msgtype":"m.text"},"ts":1435827835000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: if parent is in nodes","msgtype":"m.text"},"ts":1435827844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1435827882000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1435827883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh right, the convert step appends to a fragment, but does can that fire an event on any node you already had a reference to?","msgtype":"m.text"},"ts":1435827912000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: context object might have been inserted into the DocumentFragment","msgtype":"m.text"},"ts":1435827913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, right","msgtype":"m.text"},"ts":1435827925000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"this is not taking into account mutation events","msgtype":"m.text"},"ts":1435827940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mutation events are dead to the DOM spec","msgtype":"m.text"},"ts":1435827945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"an assumption we might have to revisit at some point I guess","msgtype":"m.text"},"ts":1435827952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, can you maybe add a note in the spec for this not-so-obvious check?","msgtype":"m.text"},"ts":1435827959000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I can file an issue if this is not a good time","msgtype":"m.text"},"ts":1435827992000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"\"Note: context object might have been inserted into /node/.\"?","msgtype":"m.text"},"ts":1435828010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, sounds good","msgtype":"m.text"},"ts":1435828034000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"s/might/may/ I guess, but I'm no jgraham","msgtype":"m.text"},"ts":1435828052000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I'll make it could","msgtype":"m.text"},"ts":1435828068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"may is normative","msgtype":"m.text"},"ts":1435828070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh right","msgtype":"m.text"},"ts":1435828089000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"i could imagine synchronous mutation observation would be very useful for custom elements","msgtype":"m.text"},"ts":1435828191000,"senderName":"JoWie","senderId":"JoWie@irc"},
{"content":{"body":"Hmm, DOM is hitting bikeshed errors again","msgtype":"m.text"},"ts":1435828288000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FATAL ERROR: No 'argument' refs found for 'title'.","msgtype":"m.text"},"ts":1435828312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"FATAL ERROR: No 'argument' refs found for 'deep' with for='Node/cloneNode(deep)'.","msgtype":"m.text"},"ts":1435828317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I \"fixed\" the second one, though it seems like a bug in bikeshed, not sure about the first","msgtype":"m.text"},"ts":1435828337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When can we expect streams in the browser ?","msgtype":"m.text"},"ts":1435828771000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"Domenic has a proposal from a very long time, right?","msgtype":"m.text"},"ts":1435828784000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: they're shipping in Chrome 43+","msgtype":"m.text"},"ts":1435828843000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and Mozilla announced they will be working on it","msgtype":"m.text"},"ts":1435828852000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: I need your help","msgtype":"m.text"},"ts":1435828863000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wow! \\o/ that's some good news! Thanks Domenic","msgtype":"m.text"},"ts":1435828872000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"TabAtkins: something seems screwy around optional arguments","msgtype":"m.text"},"ts":1435828873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: tracked adding a note in https://github.com/whatwg/dom/issues/48","msgtype":"m.text"},"ts":1435828962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1435828968000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Domenic: I'm on Version 43.0.2357.130, can I check streams out in canary?","msgtype":"m.text"},"ts":1435829269000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: no need for canary, but it will work there too. See https://googlechrome.github.io/samples/fetch-api/fetch-response-stream.html for a sample.","msgtype":"m.text"},"ts":1435829341000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"res.body.getReader()","msgtype":"m.text"},"ts":1435829927000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"was looking for readableStream.pipeTo(writableStream)","msgtype":"m.text"},"ts":1435831305000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"davve: I wonder how you end up with 40l30 as path values there","msgtype":"m.text"},"ts":1435835435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"davve: would have assumed three set of coordinates in the range 0-100","msgtype":"m.text"},"ts":1435835449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"davve: for a triangle","msgtype":"m.text"},"ts":1435835452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm probably way too nitpicky about these logos though","msgtype":"m.text"},"ts":1435835499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: :) I'll try to grab the design savvy guy around before I optimize it too far.","msgtype":"m.text"},"ts":1435835597000,"senderName":"davve","senderId":"davve@irc"},
{"content":{"body":"Oh wait, now I paste it here I see that 1 is actually an l","msgtype":"m.text"},"ts":1435835623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fonts...","msgtype":"m.text"},"ts":1435835625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Though still a couple coordinates too many","msgtype":"m.text"},"ts":1435835676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: if we give elements a \"fullscreen flag\", would that not be enough to merge the two stacks?","msgtype":"m.text"},"ts":1435836506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: probably, I'm just wondering if the existing constraints should stay or not","msgtype":"m.text"},"ts":1435837104000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"making it exactly as forgiving as the top layer rules sounds good to me, unless iframes make that somehow complicated","msgtype":"m.text"},"ts":1435837186000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: in #content, Mozilla, xidorn is suggesting we just invent a new value for z-index, \"topmost\" or some such, and drop ::backdrop for fullscreen...","msgtype":"m.text"},"ts":1435837214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: xidorn will email the WHATWG list with that proposal","msgtype":"m.text"},"ts":1435837246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't see the connection between those things, the backdrop is to make the background black is it not?","msgtype":"m.text"},"ts":1435837806000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: well you could style ::backdrop in any number of ways","msgtype":"m.text"},"ts":1435838087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: apparently Chrome and Gecko currently abuse z-index to implement the top layer","msgtype":"m.text"},"ts":1435838117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: so there's not actually a top layer thing, except for <dialog> in Chrome","msgtype":"m.text"},"ts":1435838130000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I was thinking a bit about the day when IDL is more formalized","msgtype":"m.text"},"ts":1435838216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: presumably for IDL-defined methods it would have to invoke some kind of algorithm with a predictable name","msgtype":"m.text"},"ts":1435838236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so you'd get something like the IDL specification \"generating text\" that ends up invoking NodeBaseURIGetter(this) for interface Node { readonly attribute DOMString baseURI };","msgtype":"m.text"},"ts":1435838336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or maybe @NodeBaseURIGetter(this) since we'd want it to be internal","msgtype":"m.text"},"ts":1435838374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: ^^","msgtype":"m.text"},"ts":1435838404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that's roughly where we want to go. It would also make specifications a lot more predictable in how they are structured and such...","msgtype":"m.text"},"ts":1435838447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so anyway, establishing some conventions for all this stuff would be great","msgtype":"m.text"},"ts":1435838765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also, if we do this we'd no longer have the problem of people just invoking methods that could be prototyped over by JavaScript, since they'd just refer to the internal algorithms directly","msgtype":"m.text"},"ts":1435838827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: which incidentally matches what implementations are doing, so makes that clearer too","msgtype":"m.text"},"ts":1435838849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so many wins","msgtype":"m.text"},"ts":1435838852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hmm, I'd always thought we'd handle that by saying Node instances have a [[baseURI]] internal slot, and baseURI returns that","msgtype":"m.text"},"ts":1435839048000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then specs would say that they look at node@[[baseURI]]","msgtype":"m.text"},"ts":1435839060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: correct, moving Fullscreen to the top layer in Blink is blocking shipping in Blink too","msgtype":"m.text"},"ts":1435839470000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Domenic: so that's the default algorithm for such a thing","msgtype":"m.text"},"ts":1435841938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so IDL would probably say if \"<var>Class</var><var>Property</var>PropertyGetter\" is defined, invoke that, otherwise, return <var>Class</var>@[[<var>Property</var>]].","msgtype":"m.text"},"ts":1435841997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: because we have more complicated getters, setters, and method definitions that IDL can't predict","msgtype":"m.text"},"ts":1435842015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I might be alone in finding that all somewhat nice...","msgtype":"m.text"},"ts":1435842152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's been kind of a nuisance to me that the interaction between IDL and the rest of the platform is handwavy","msgtype":"m.text"},"ts":1435842173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: so discard what I said earlier about xidorn; he discovered IE is already shipping this so we'll go ahead","msgtype":"m.text"},"ts":1435843060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I'll make a pass through the spec replacing stack checks with top layer + fullscreen flag checks","msgtype":"m.text"},"ts":1435843079000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: I'm a bit sad how much synchronous layout this is, but I guess we had that already anyway","msgtype":"m.text"},"ts":1435843106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean? adding and removing things to the top layer doesn't require sync layout does it?","msgtype":"m.text"},"ts":1435844408000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"it invalidates the layout, sure","msgtype":"m.text"},"ts":1435844416000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"it seems as long as the spec never says getBoundingClientRect() or some such there shouldn't be a problem?","msgtype":"m.text"},"ts":1435844439000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: I guess it depends on where the top layer is","msgtype":"m.text"},"ts":1435844496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: fair","msgtype":"m.text"},"ts":1435844499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if xidorn says it requires looking at the layout tree in Gecko I'm sure that's correct, it would just be very surprising to me","msgtype":"m.text"},"ts":1435844534000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"I haven't been talking to xidorn about this, was just considering top layer a layout thing myself","msgtype":"m.text"},"ts":1435844561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which is probably wrong","msgtype":"m.text"},"ts":1435844620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: https://github.com/domenic/cancelable-promise/issues/2","msgtype":"m.text"},"ts":1435846349000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if I do a cache.addAll(urlList) and one of the url's results in a 404... what do you think cache should do?","msgtype":"m.text"},"ts":1435854049000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"the spec seems to say it should stick the 404 in the cache","msgtype":"m.text"},"ts":1435854066000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is that expected?","msgtype":"m.text"},"ts":1435854088000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yes, else it becomes a mechanism to detect 404s on other origins","msgtype":"m.text"},"ts":1435854090000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so evt.waitUntil(cache.addAll(urls)) is not really adequate for installing an app then?","msgtype":"m.text"},"ts":1435854131000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"since you might not have actually gotten all of them installed if one hit a 503 or something","msgtype":"m.text"},"ts":1435854150000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I agree it's tricky, but you may want to cache a 404 to present to the user while offline","msgtype":"m.text"},"ts":1435854199000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: I'd have liked it to fail on 404, but security says no (lemmie dig up the ticket)","msgtype":"m.text"},"ts":1435854215000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ok... I'm willing to accept it... the WPT test case that verifies success for a non-existent resource just looked weird to me","msgtype":"m.text"},"ts":1435854230000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I recommend reading the topic :p","msgtype":"m.text"},"ts":1435854282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems like just always accepting opaque responses and checking status code for other types might be safe?","msgtype":"m.text"},"ts":1435854311000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but whatever","msgtype":"m.text"},"ts":1435854317000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I've been thinking about an option to add/addAll that would reject on 404 or any opaque response","msgtype":"m.text"},"ts":1435854343000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"please make it reject on any non-2xx response in that case","msgtype":"m.text"},"ts":1435854375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that would at least somewhat be founded in primitives","msgtype":"m.text"},"ts":1435854387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or make it an option of sorts","msgtype":"m.text"},"ts":1435854395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1435854407000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"in fact, wanderview, here's me & you talking about it https://github.com/slightlyoff/ServiceWorker/issues/407#issuecomment-92341768","msgtype":"m.text"},"ts":1435854418000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: looks like it uses response.ok","msgtype":"m.text"},"ts":1435854428000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"seems alright","msgtype":"m.text"},"ts":1435854449000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yeah, as I was saying there it should be an option for request, but I guess addAll could overwrite requests...","msgtype":"m.text"},"ts":1435854499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if we hit a cached resource, do we not get a 304?","msgtype":"m.text"},"ts":1435854536000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or is that supposed to be silently converted to 200 using the cached value","msgtype":"m.text"},"ts":1435854556000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: fetch handles that internally and returns the cached resource","msgtype":"m.text"},"ts":1435854562000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"right, ok","msgtype":"m.text"},"ts":1435854568000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(unless you have some specific settings)","msgtype":"m.text"},"ts":1435854578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it seems my response on that thread is pretty close to me current \"but whatever\"","msgtype":"m.text"},"ts":1435854585000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I agree its a bit weird for devs, though","msgtype":"m.text"},"ts":1435854602000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, I tried to get the appcache behaviour through, but I think that was seen as a security error that they want to undo","msgtype":"m.text"},"ts":1435854789000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: annevk: btw, I ran into something in chrome that I was curious if it was spec'd or unique to implementation... I tried to do intercept https://foo.com with http://bar.com and chrome gave me a mixed content warning (should be blocked anyway for opaque navigation)","msgtype":"m.text"},"ts":1435854873000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"was just curious about the mixed content thing, though","msgtype":"m.text"},"ts":1435854880000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think that's because the SW fetched mixed content","msgtype":"m.text"},"ts":1435854940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: we should do that too","msgtype":"m.text"},"ts":1435854949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but I don't see where that is blocked in the fetch","msgtype":"m.text"},"ts":1435854951000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: shouldn't it just be blocked?","msgtype":"m.text"},"ts":1435854954000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"blocked in the spec","msgtype":"m.text"},"ts":1435854956000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"well before it's blocked it's mixed content","msgtype":"m.text"},"ts":1435854969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean... if it does a cors request to a http... it should work","msgtype":"m.text"},"ts":1435854987000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I thought the request would be blocked, so no mixed content happens","msgtype":"m.text"},"ts":1435854988000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"why would the request be blocked?","msgtype":"m.text"},"ts":1435854998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because it's an http request from an https environment","msgtype":"m.text"},"ts":1435855013000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"in https://fetch.spec.whatwg.org/#http-fetch step 2.2 a network error is returned for that response","msgtype":"m.text"},"ts":1435855017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we allow that because of your podcast thing","msgtype":"m.text"},"ts":1435855032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thats just for an opaque response, right?  if I do a cors mode request to untrusted, it should work right?","msgtype":"m.text"},"ts":1435855054000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: 'request is a client request and response's type is neither \"basic\" nor \"default\". '","msgtype":"m.text"},"ts":1435855069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: oh CORS","msgtype":"m.text"},"ts":1435855095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that is blocked due to mixed content","msgtype":"m.text"},"ts":1435855104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: in step 4 of https://fetch.spec.whatwg.org/#concept-main-fetch","msgtype":"m.text"},"ts":1435855123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ahh ok, so no-cors requests are let through?","msgtype":"m.text"},"ts":1435855127000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes, because of you","msgtype":"m.text"},"ts":1435855133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was kind of hoping we would block those too...","msgtype":"m.text"},"ts":1435855139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and I guess because it would make upgrading existing sites to use SW even harder)","msgtype":"m.text"},"ts":1435855154000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1435855160000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(but now we're there I'm not quite sure it was worth it)","msgtype":"m.text"},"ts":1435855164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That you don't even remember how that went down suggests we should maybe reconsider that decision, since it was somewhat controversial at least with some people...","msgtype":"m.text"},"ts":1435855217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I do remember","msgtype":"m.text"},"ts":1435855233000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Being able to make a mixed request without a window to show the warning in feels wrong though","msgtype":"m.text"},"ts":1435855390000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sorry, didn't mean for this exchange to happen this way","msgtype":"m.text"},"ts":1435855394000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah, I think we are disallowing that","msgtype":"m.text"},"ts":1435855416000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: although we haven't specified it yet","msgtype":"m.text"},"ts":1435855432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: this is making me think of event.client.fetch() again","msgtype":"m.text"},"ts":1435855482000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm just gonna hide in a corner now","msgtype":"m.text"},"ts":1435855501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1435855505000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I do actually have to go, it seems like you're in the better set of timezones again so we can discuss it tomorrow","msgtype":"m.text"},"ts":1435855538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I'm in UK, will be in the office early tomorrow","msgtype":"m.text"},"ts":1435855564000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Anyone have an explanation of why Postel's Law is a disaster handy?","msgtype":"m.text"},"ts":1435865864000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: http://cacm.acm.org/magazines/2011/8/114933-the-robustness-principle-reconsidered/fulltext sees sane","msgtype":"m.text"},"ts":1435866138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ekr already pointed at http://datatracker.ietf.org/doc/draft-thomson-postel-was-wrong/","msgtype":"m.text"},"ts":1435867108000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1435867793000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1435867815000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1435867816000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Martin Thomson","msgtype":"m.text"},"ts":1435867823000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: I'll look into the Bikeshed errors.  Erroring on arguments is *very likely* a Bikeshed bug.  On vacation now and gonna head to friends' soon, but I'll get it by tomorrow.","msgtype":"m.text"},"ts":1435871408000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I was thinking a bit about the await and async keywords. Can you use them on getters and setters? What if you await a function that doesn't return a promise/thenable (is synchronous)?","msgtype":"m.text"},"ts":1435880605000,"senderName":"Mateon1","senderId":"Mateon1@irc"}
]