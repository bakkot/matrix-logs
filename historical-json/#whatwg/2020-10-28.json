[
{"content":{"body":"When I put licenses on my code, I use my username instead of my legal name. I really hope that never comes back to hunt me","msgtype":"m.text"},"ts":1603846913000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"Morning zcorpan and annevk, I'm trying to dig into an old irritating issue called MouseEvent.offsetX... thought you might be able to shed some light on it.","msgtype":"m.text"},"ts":1603869318000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"... seems like Blink/WebKit are doing something different from Gecko, which matches the spec, especially in terms of inline elements. Trying to see how to remedy this without causing major compatibility issues","msgtype":"m.text"},"ts":1603869434000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: I only recall that I thought we should define those directly in UI events","msgtype":"m.text"},"ts":1603870388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: other steps that come to mind: looking if there are existing bug reports against browsers, spec issues, and tests, and organize all that a bit (and complete test coverage if incomplete)","msgtype":"m.text"},"ts":1603870464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's what I've done so far, annevk. The response I got from both WebKit & Blink folks is caution due to backwards compatibility","msgtype":"m.text"},"ts":1603870680000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: and Gecko has no existing bugs due to this?","msgtype":"m.text"},"ts":1603870785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: if that's the case I guess for Gecko to change we'd want some telemetry and perhaps look at some usage in HTTP Archive or GitHub (code search) to see what the results might be; then if that looks okay roll it out to Nightly/Beta for a bit and then Release","msgtype":"m.text"},"ts":1603870858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk you mean roll out something like conforming Gecko to the Blink/WebKit behavior?","msgtype":"m.text"},"ts":1603870938000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: yeah","msgtype":"m.text"},"ts":1603870958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I actually think the Gecko/spec behavior makes a lot more sense, but consistency would be better than what we have now... let me see what I can dig in terms of http archive etc. thanks for now annevk","msgtype":"m.text"},"ts":1603871091000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"It might be worth seeing what their requirements are for changing this to get past the unease, but without might insight into this particular situation it seems more challenging to get them to change","msgtype":"m.text"},"ts":1603871194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it's similar requirements... to see how it's used in the wild. apparently the strange behavior in inline elements is an inheritance from IE","msgtype":"m.text"},"ts":1603872926000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: what is the behavior difference?","msgtype":"m.text"},"ts":1603878091000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: the main one is with inline elements. In Gecko & the spec, offsetX is the offset from the target (inline) element. In WebKit/Blink/previously-in-IE, offsetX is the offset from the nearest block ancestor","msgtype":"m.text"},"ts":1603878155000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: does offsetParent play a role on this?","msgtype":"m.text"},"ts":1603878264000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the CSSOM has a lot of somewhat sad APIs :-(","msgtype":"m.text"},"ts":1603878292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No. offsetParent is the nearest positioned ancestor, while the behvior is the nearest block ancestor","msgtype":"m.text"},"ts":1603878294000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: ok. it might be hard to find interesting cases through code search. But you could maybe add a use counter in chromium. It's possible to query for use counter matches in httparchive (but you'll need to wait until it's in stable + the next httparchive run)","msgtype":"m.text"},"ts":1603878335000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes, which later creates even sadder performance problems as devs use getBoundingClientRect() as a solution and cause layout-thrashing","msgtype":"m.text"},"ts":1603878339000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I think a UseCounter for using offsetX/offsetY on an inline element would be an interesting one","msgtype":"m.text"},"ts":1603878378000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Another more subtle difference is that Firefox computes offsetXY when the even is dispatched, and Blink/WebKit compute it when it's first requested, which could be after additional layouts have happened. But I think that can be fixed without a big effect on compatibility","msgtype":"m.text"},"ts":1603878696000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: so right, another thing to test is the values of those properties for synthetic events","msgtype":"m.text"},"ts":1603878815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: I think the current spec might not really account for those","msgtype":"m.text"},"ts":1603878829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Actually it does! synthetic events get offsetX/offsetY = 0","msgtype":"m.text"},"ts":1603879052000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: but that's wrong, right? https://software.hixie.ch/utilities/js/live-dom-viewer/saved/8635","msgtype":"m.text"},"ts":1603879648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Possibly. Will add that to my research","msgtype":"m.text"},"ts":1603879898000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"I mean, that logs -8 in all browsers for me","msgtype":"m.text"},"ts":1603880403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Another interesting test might be moving the element and then checking the property again; it kinda seems like it's just computed on the fly","msgtype":"m.text"},"ts":1603880475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: I found https://www.w3.org/Bugs/Public/show_bug.cgi?id=16673","msgtype":"m.text"},"ts":1603880665000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: It's computed on the fly, but cached after the first time. unintuitive IMO","msgtype":"m.text"},"ts":1603883102000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"oh wow, that's pretty bad","msgtype":"m.text"},"ts":1603883183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's for \"performance\" but can actually create performance bottlenecks by creating unexpected layout thrashing","msgtype":"m.text"},"ts":1603883642000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"annevk: re. the synthetic test event, clientX/clientY are 0, and offsetX is derived from that (in this case it's 8 due to the body margin)","msgtype":"m.text"},"ts":1603891203000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: so it seems there are Gecko bugs btw, such as https://bugzilla.mozilla.org/show_bug.cgi?id=1359440","msgtype":"m.text"},"ts":1603891408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's also various open issues at https://github.com/w3c/csswg-drafts/issues?q=is%3Aissue+is%3Aopen+offsetX","msgtype":"m.text"},"ts":1603891422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I've recently opened one of them, I think the SVG one is similar, and there is another issue there that I've mentioned before (re. timing of the event)","msgtype":"m.text"},"ts":1603891519000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"Ah, https://github.com/w3c/uievents/issues/24 is a continuation of a bug I filed in 2014","msgtype":"m.text"},"ts":1603891630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: where is the whatbot code?","msgtype":"m.text"},"ts":1603908307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/participate.whatwg.org","msgtype":"m.text"},"ts":1603908322000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: mostly https://github.com/whatwg/participate.whatwg.org/blob/master/lib/pr-webhook.js","msgtype":"m.text"},"ts":1603908344000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh so I was looking there but grepping for whatbot yielded nothing","msgtype":"m.text"},"ts":1603908363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1603908367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it logs in using https://github.com/whatwg/participate.whatwg.org/blob/master/lib/helpers/github.js#L6-L8","msgtype":"m.text"},"ts":1603908369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can see that using the argument as a function is preferred over using the argument's `handleEvent` as a function. Where exactly is this precedence defined? The spec only says `It can be implemented by any object, as described`, I can't find where it defines the precedence. https://usercontent.irccloud-cdn.com/file/4wekvbW2/image.png","msgtype":"m.text"},"ts":1603912406000,"senderName":"EveryOS","senderId":"EveryOS@irc"},
{"content":{"body":"EveryOS: https://heycam.github.io/webidl/#call-a-user-objects-operation","msgtype":"m.text"},"ts":1603912492000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks, I had been looking at section 2.4, which has the same name as section 3.11. Didn't realize it was specified further down.","msgtype":"m.text"},"ts":1603912629000,"senderName":"EveryOS","senderId":"EveryOS@irc"}
]