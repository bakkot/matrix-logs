[
{"content":{"body":"annevk: back from vacation?","msgtype":"m.text"},"ts":1406537180000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: yeah, trying to catch up with stuff I didn't get done on vacation","msgtype":"m.text"},"ts":1406537200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"welcome back!","msgtype":"m.text"},"ts":1406537211000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1406537239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: reading some xkcd, will do Fullscreen next","msgtype":"m.text"},"ts":1406537362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk knows his priorities","msgtype":"m.text"},"ts":1406537380000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: basically, move step 7.1 to 4.0 in http://fullscreen.spec.whatwg.org/#dom-document-exitfullscreen plus some rewording so it still makes sense","msgtype":"m.text"},"ts":1406538341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: to fix https://www.w3.org/Bugs/Public/show_bug.cgi?id=26379","msgtype":"m.text"},"ts":1406538349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: maybe, also have a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=26440 to see how you think that'll change things","msgtype":"m.text"},"ts":1406538480000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: that bug makes a lot of sense, added some people that can hopefully sort out how we ought to define it","msgtype":"m.text"},"ts":1406538834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: great, let's do it!","msgtype":"m.text"},"ts":1406539020000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: you didn't tweet about your fullscreen post","msgtype":"m.text"},"ts":1406541600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanted to RT from @WHATWG","msgtype":"m.emote"},"ts":1406541608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"finds https://twitter.com/KrisBytes/status/491989665772474368 and https://twitter.com/KrisBytes/status/492268405240909824","msgtype":"m.emote"},"ts":1406541671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can't please some of the people any of the time","msgtype":"m.text"},"ts":1406541779000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mounir_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26440 is relevant for screen orientation as well","msgtype":"m.text"},"ts":1406542781000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir_: all needs to be synchronized somehow","msgtype":"m.text"},"ts":1406542788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how is it relevant?","msgtype":"m.text"},"ts":1406542985000,"senderName":"mounir_","senderId":"mounir_@irc"},
{"content":{"body":"annevk: for the part where screen orientation is using fs?","msgtype":"m.text"},"ts":1406542994000,"senderName":"mounir_","senderId":"mounir_@irc"},
{"content":{"body":"mounir_: the relevant bit is that changes to orientation need to be synchronized with whenever animate frames happen","msgtype":"m.text"},"ts":1406543026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mounir_: and ordered somehow relative to all the other things that happen at that point","msgtype":"m.text"},"ts":1406543045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Unrelatedly, what's the status of https://www.w3.org/Bugs/Public/show_bug.cgi?id=20976 ? I might implement base URL support in servo at some point when it's clear what that should be","msgtype":"m.text"},"ts":1406543180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: comment 6 is still the plan of action","msgtype":"m.text"},"ts":1406543220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: there's no proposals that I know of that will make base URLs more complicated for now","msgtype":"m.text"},"ts":1406543260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So compared to the spec what's different? Ignore <xml:base> and otherwise it's the same?","msgtype":"m.text"},"ts":1406543321000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: HTML ties the base URL to nodes at the moment, so the difference would be that it would be tied to documents","msgtype":"m.text"},"ts":1406543402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: also yes, I guess, if you don't care about the difference in model it implies","msgtype":"m.text"},"ts":1406543439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well I guess I care to the extent that I want the implementation to follow the spec without being unnecessarily complex","msgtype":"m.text"},"ts":1406543500000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So yeah, comment 6","msgtype":"m.text"},"ts":1406543643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm waiting for implementations to remove xml:base support to align all the things","msgtype":"m.text"},"ts":1406543659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I actually kind of hate this background updating feature of apps on my phone. I open the app, I see something interesting. And within a second it's replaced by new content and I can no longer find it.","msgtype":"m.text"},"ts":1406543766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I didn't have the password handy when I wrote it and then I forgot :/","msgtype":"m.text"},"ts":1406545696000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"let me fix that","msgtype":"m.text"},"ts":1406545707000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: https://twitter.com/foolip/status/493715626821955584","msgtype":"m.text"},"ts":1406545968000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: thanks for cleaning it up","msgtype":"m.text"},"ts":1406546004000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I hope the unprefixing works out :/","msgtype":"m.text"},"ts":1406546044000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"me too","msgtype":"m.text"},"ts":1406546068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the biggest risk of breakage is the event target","msgtype":"m.text"},"ts":1406546086000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"yeah, we can change that back I guess including the bubbling stuff, bit weird, but would not be the end of the world","msgtype":"m.text"},"ts":1406546138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and just falling back to document if the fullscreen stack is empty","msgtype":"m.text"},"ts":1406546153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, it would be tolerable, but a bit weird, so I'll try per spec first","msgtype":"m.text"},"ts":1406546179000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the spec was written shortly after things started shipping, but nobody ever updated :/","msgtype":"m.text"},"ts":1406546187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1406546193000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the biggest surprise to me was that WebKit's \"Mozilla version\" doesn't actually match anything that ever shipped in Firefox","msgtype":"m.text"},"ts":1406546219000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"anyway, along with some CSS stuff this is basically one of the last major pieces that went out with the broken prefix policy","msgtype":"m.text"},"ts":1406546222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which is the positive bit of this whole thing","msgtype":"m.text"},"ts":1406546234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1406546247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"-> shopping","msgtype":"m.emote"},"ts":1406546261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"have fun!","msgtype":"m.text"},"ts":1406546269000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26366","msgtype":"m.text"},"ts":1406550015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: if requestFullscreen unsets the pending element from its task","msgtype":"m.text"},"ts":1406550028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: and the task does the animation","msgtype":"m.text"},"ts":1406550040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: and exitFullscreen simply unsets it and otherwise does its own task thing, that should work, no?","msgtype":"m.text"},"ts":1406550098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just replied","msgtype":"m.text"},"ts":1406554272000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but other than that it seems sound that both functions should set some state and then queue a task (or await a stable state?) to check what to do","msgtype":"m.text"},"ts":1406554324000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I'm honestly not sure how animation is supposed to work","msgtype":"m.text"},"ts":1406554341000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"is the assumption that implementations can animate *before* scripts have had a change to paint a fullscreen frame?","msgtype":"m.text"},"ts":1406554370000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if so one can't blend between the two or anything like that","msgtype":"m.text"},"ts":1406554383000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I think the idea was that the events would fire after the animation happened","msgtype":"m.text"},"ts":1406554424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does any implementation actually animate the transition?","msgtype":"m.text"},"ts":1406554461000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well, maybe not, what matters is that the moment we change various observable things and dispatch the event, the state exposed to script is \"fullscreen\"","msgtype":"m.text"},"ts":1406554491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it doesn't actually have to be fullscreen at that point...","msgtype":"m.text"},"ts":1406554505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1406554506000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"It seems to me that the spec saying \"you can animate here\" doesn't help much","msgtype":"m.text"},"ts":1406554534000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if one wants to animate it ought to be possible without being observable to scripts","msgtype":"m.text"},"ts":1406554549000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"... I think","msgtype":"m.text"},"ts":1406554564000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I removed a redundant animate bit https://github.com/whatwg/fullscreen/commit/a567c6c723797cbc5116d558af39af42a59ea9e1","msgtype":"m.text"},"ts":1406554599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, the one in exitFullscreen() isn't redundant then?","msgtype":"m.text"},"ts":1406554640000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Well, the resizing mentioned in the tasks is important","msgtype":"m.text"},"ts":1406554661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1406554668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: yeah, that should go as well","msgtype":"m.text"},"ts":1406554680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think that the basic model could be something like this:","msgtype":"m.text"},"ts":1406554717000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"requestFullscreen() sets some script-invisible state, queues a (micro?)task and immediately returns","msgtype":"m.text"},"ts":1406554758000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"when that task runs, all the checks are run on that invisible state, and if they pass, resizing begins","msgtype":"m.text"},"ts":1406554795000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"once resize is complete, a task is made to run before the next animation frame, which sets the script-visible state and dispatches all the events","msgtype":"m.text"},"ts":1406554822000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"similar for exitFullscreen(), I haven't been able to understand why that currently cues multiple tasks TBH","msgtype":"m.text"},"ts":1406554857000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"The reason we have a task per document is that documents can be cross-origin and we don't want to create synchronous access hazards","msgtype":"m.text"},"ts":1406554898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah yes","msgtype":"m.text"},"ts":1406554910000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"so I guess each document could await the next frame independently","msgtype":"m.text"},"ts":1406554936000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the hazard then is that the order is not dependable and yet observable for same-origin frames","msgtype":"m.text"},"ts":1406554955000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"We could define those to be in the same task I suppose... I wonder what happens for a nesting of origins A -> O -> A","msgtype":"m.text"},"ts":1406555013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I've tried to understand how animation frames are work across frames but failed","msgtype":"m.text"},"ts":1406555015000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"another problem that'll come up is the scheduling of the fullscreenerror event","msgtype":"m.text"},"ts":1406555079000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"it ought to also be synchronized with animation frames since otherwise the order of events could change I think","msgtype":"m.text"},"ts":1406555107000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I don't quite get the purpose of the script-invisible state above","msgtype":"m.text"},"ts":1406555191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's the pending element","msgtype":"m.text"},"ts":1406555205000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Okay","msgtype":"m.text"},"ts":1406555211000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So you propose two tasks, but inbetween those tasks anything could still happen","msgtype":"m.text"},"ts":1406555243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, between the task that does the checking + starts resize and the task that fires the events after resize?","msgtype":"m.text"},"ts":1406555311000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1406555324000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So what Blink actually does is to request the resize synchronously in requestFullscreen()","msgtype":"m.text"},"ts":1406555345000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but it also updates the fullscreen element stack there, which is how I noticed all of this","msgtype":"m.text"},"ts":1406555365000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"that's observable immediately by scripts :/","msgtype":"m.text"},"ts":1406555376000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if something could be made to work where the resize is initiated synchronously and there's only a single task once the resize is done, that'd be pretty close to what's implemented","msgtype":"m.text"},"ts":1406555410000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"it's possibly a smaller change to the spec as well, since some checks are currently sync","msgtype":"m.text"},"ts":1406555470000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Why can't the task that does the resizing not also manipulate the stack? That was a bit unclear to me","msgtype":"m.text"},"ts":1406555480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there is no such task, not in the same sense at least","msgtype":"m.text"},"ts":1406555514000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Blink just tells Chromium to go fullscreen, some things happen out-of-process and then Blink is told that it's been resized","msgtype":"m.text"},"ts":1406555536000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"there's no task that runs and waits for the resize to complete or anything like that","msgtype":"m.text"},"ts":1406555551000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Okay, so you want to go fullscreen asynchronously, and then queue a task once that is done?","msgtype":"m.text"},"ts":1406555624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps the specification should separate putting the top-level browsing context fullscreen from the rest?","msgtype":"m.text"},"ts":1406555646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"queue a task that runs immediately before the next animation frame, yes","msgtype":"m.text"},"ts":1406555651000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"it already has the top-level document flag, do you mean something additional?","msgtype":"m.text"},"ts":1406555683000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, it seems perhaps that bit should happen earlier in an asynchronous algorithm","msgtype":"m.text"},"ts":1406555750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The resizing of the viewport","msgtype":"m.text"},"ts":1406555760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then the per document/element resizing happen can happen afterwards","msgtype":"m.text"},"ts":1406555772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, a \"wait for the viewport to match the dimensions of the screen\" step seems like it should be somewhere after \"Return, and run the remaining steps asynchronously.\" and followed by the queuing of a task that's synchronized with animation frames","msgtype":"m.text"},"ts":1406555841000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"in the case of nested fullscreen, that condition would already be true without any waiting, so maybe not much special casing is needed","msgtype":"m.text"},"ts":1406555876000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah, this is only for the top-level browsing context, same for exitFullscreen()","msgtype":"m.text"},"ts":1406555908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Given we do that, does my model then make sense?","msgtype":"m.text"},"ts":1406555956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It sounds like we're on the same page, but can you outline again the steps of requestFullscreen() and exitFullscreen() in your model?","msgtype":"m.text"},"ts":1406556040000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"or just make the spec change and I can read that","msgtype":"m.text"},"ts":1406556049000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26366#c6","msgtype":"m.text"},"ts":1406556107000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so 1) sets pending element and does some checks sync) 2) resizes async 3) queues a task once resize is complete to do various bits","msgtype":"m.text"},"ts":1406556146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, that sounds right","msgtype":"m.text"},"ts":1406556168000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"and some of the checks that now involve the fullscreen element stack would also have to look at the pending element, unless there's always an early return for that case","msgtype":"m.text"},"ts":1406556205000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I believe you'll have the choice of either making the first or the last requested element be the one that wins, not sure if it matters which it is","msgtype":"m.text"},"ts":1406556279000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Ah yeah, we could either terminate early or just overwrite and not queue new tasks","msgtype":"m.text"},"ts":1406556316000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1406556330000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I think I don't have an opinion, and there's likely no compat situation for that to care about","msgtype":"m.text"},"ts":1406556353000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I guess it would be nicer to overwrite in case there's various buttons and the user changes his mind... Not sure if that'd go fast enough though","msgtype":"m.text"},"ts":1406556378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the more likely scenario is that there are multiple frameworks competing I think","msgtype":"m.text"},"ts":1406556408000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"in which case success is not a possible outcome","msgtype":"m.text"},"ts":1406556424000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Early fail might be better than, plus encouraging a message to the console","msgtype":"m.text"},"ts":1406556441000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so what about requestFullscreen() and exitFullscreen() in the same script?","msgtype":"m.text"},"ts":1406556500000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"does exitFullscreen() clear the pending element, so that when the resize is done, one exits immediately?","msgtype":"m.text"},"ts":1406556542000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the only way to not have to deal with this is to have two tasks I think","msgtype":"m.text"},"ts":1406556561000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"but that's less nice in other ways","msgtype":"m.text"},"ts":1406556569000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"or is the exitFullscreen() just ignored? that'd be easy to implement at least...","msgtype":"m.text"},"ts":1406556596000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Ignoring exitFullscreen() as long as there's an async operation ongoing?","msgtype":"m.text"},"ts":1406556627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think that works as that would be bad for navigation","msgtype":"m.text"},"ts":1406556643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, yeah","msgtype":"m.text"},"ts":1406556651000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I think exitFullscreen() should detect if an asynchronous operation is ongoing, and if so, reverse it","msgtype":"m.text"},"ts":1406556671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and have no events fired at all?","msgtype":"m.text"},"ts":1406556683000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Yeah I guess","msgtype":"m.text"},"ts":1406556691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nothing really happened except perhaps some flickering depending on timing of the UA","msgtype":"m.text"},"ts":1406556727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm... I don't know if it's possible to guarantee that scripts won't see the intermediate state","msgtype":"m.text"},"ts":1406556734000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"it'd be pretty easy to allow the request to finish and then immediately exit, though","msgtype":"m.text"},"ts":1406556753000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Okay, perhaps exit should always dispatch events","msgtype":"m.text"},"ts":1406556773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But early exit cancels the requestFullscreen events","msgtype":"m.text"},"ts":1406556784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are you thinking about an \"exit fullscreen pending\" flag to do this?","msgtype":"m.text"},"ts":1406556830000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"request sets pending, exit simply unsets pending","msgtype":"m.text"},"ts":1406556869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then once the task from request runs, pending is unset which terminates the task","msgtype":"m.text"},"ts":1406556892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, ok, I think this could work","msgtype":"m.text"},"ts":1406556936000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"will have to look closely at the spec text to know for sure","msgtype":"m.text"},"ts":1406556969000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"we could also make exitFullscreen a no-op while pending is set but have the navigate variant always exit, not sure what is nicer","msgtype":"m.text"},"ts":1406557024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, might require another day of iterating and some more review","msgtype":"m.text"},"ts":1406557037000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not easy","msgtype":"m.text"},"ts":1406557042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not entirely, no","msgtype":"m.text"},"ts":1406557054000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"some feedback from roc and cpearce would be nice too, Gecko might have completely different issues around resizing","msgtype":"m.text"},"ts":1406557095000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"it's about time implementations and the spec started to agreeing on the details here :)","msgtype":"m.text"},"ts":1406557137000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"On something like Firefox OS you might not have these constraints of having to do some OS-level resize","msgtype":"m.text"},"ts":1406558614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Having the IPv4-in-URLs discussion in two places is not great. (Even though it’s my fault for filing both.) Let’s switch to just one, which do you prefer?","msgtype":"m.text"},"ts":1406558776000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Bugzilla","msgtype":"m.text"},"ts":1406558791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: the synchronous checks from requestFullscreen are broken as they potentially cross origin boundaries","msgtype":"m.text"},"ts":1406559632000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cries a little bit","msgtype":"m.emote"},"ts":1406559653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oops, I guess you'll need to fix that :)","msgtype":"m.text"},"ts":1406559799000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: what does Chrome do at the moment? Just go fullscreen?","msgtype":"m.text"},"ts":1406559835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the checks need to enter a cross-origin iframe?","msgtype":"m.text"},"ts":1406559862000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1406559874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it just uses does the checks as per spec, with a cute little assert that I think will break without out-of-process iframes","msgtype":"m.text"},"ts":1406559922000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"so this looks like something that needs to be resolved sooner or later","msgtype":"m.text"},"ts":1406559934000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"s/without/with/","msgtype":"m.text"},"ts":1406559957000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: to prevent race conditions you need a global request fullscreen in process flag","msgtype":"m.text"},"ts":1406562437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not even sure if that works :-(","msgtype":"m.text"},"ts":1406562467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not the easiest day after vacation","msgtype":"m.text"},"ts":1406562481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: I posted this thing as a question to the WHATWG list for now","msgtype":"m.text"},"ts":1406563431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: gimme your parser and tell me what I need to build it and how to run it","msgtype":"m.text"},"ts":1406563542000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: parser.log is both pretty useless and includes what phase we're in twice","msgtype":"m.text"},"ts":1406565750000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: also totally untested","msgtype":"m.text"},"ts":1406565760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: in other news, why does it take two months to be able to push a typo fix in a string to master? code review requirement utterly fails if nothing ever reaches master…","msgtype":"m.text"},"ts":1406566064000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, feel free to r? me for things that simple :)","msgtype":"m.text"},"ts":1406566206000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: It's not that useless since I wrote it to find a bug that I then fixed. It's not intended to be public-facing code so I don't see why you care about test coverage","msgtype":"m.text"},"ts":1406566225000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I agree that the review situation isn't working out","msgtype":"m.text"},"ts":1406566236000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: it also has a very significant effect on perf under PyPy","msgtype":"m.text"},"ts":1406566264000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Even when not in use?","msgtype":"m.text"},"ts":1406566297000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: It's all the metaclass magic and indirection that's the cost, so yes","msgtype":"m.text"},"ts":1406566316000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: i.e., any change of parsing phase is a hash table lookup when it could be a direct reference","msgtype":"m.text"},"ts":1406566339000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It isn't clear to my where the cost comes from since it sets the metaclass to \"type\"","msgtype":"m.text"},"ts":1406566433000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: it's the fact we're doing self.phases[\"text\"] everywhere instead of TextPhase","msgtype":"m.text"},"ts":1406566466000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1406566485000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It strikes me that PyPy should be able to optimise constant dicts","msgtype":"m.text"},"ts":1406566518000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Can it optimise named tuples?","msgtype":"m.text"},"ts":1406566558000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"PyPy's view is that dicts are hashtables and should be treated as hashtables. You don't expect magic from C++ hashtables, so don't expect magic there. classes on the other hand are quicker.","msgtype":"m.text"},"ts":1406566568000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If you took that view writing a js engine you would have one slow js engine","msgtype":"m.text"},"ts":1406566592000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but JS doesn't have any separate object type","msgtype":"m.text"},"ts":1406566608000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or class type","msgtype":"m.text"},"ts":1406566612000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or what have you","msgtype":"m.text"},"ts":1406566615000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"attribute accesses are fast in PyPy","msgtype":"m.text"},"ts":1406566621000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Saying \"we aren't going to optimise a very common case that we could optimise\" still doesn't seem like a reasonable way to end up with a fast implementation","msgtype":"m.text"},"ts":1406566657000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Are you sure parser.log is private? It's exposed in parse.py, which I thought in theory just used public APIs…","msgtype":"m.text"},"ts":1406566683000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: go argue in #pypy if you care","msgtype":"m.text"},"ts":1406566692000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"What gave to the idea that parse.py is only public apis?","msgtype":"m.text"},"ts":1406566747000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well it seems like an example application to me","msgtype":"m.text"},"ts":1406566767000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's only useful to debug the implementation, it's not aimed at end users at all","msgtype":"m.text"},"ts":1406566771000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No, it's a debugging tool","msgtype":"m.text"},"ts":1406566787000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that's not at all clear","msgtype":"m.text"},"ts":1406566821000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It's certainly not \"clear\" it's an example application","msgtype":"m.text"},"ts":1406566886000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's not in the documentation or an examples/ directory","msgtype":"m.text"},"ts":1406566901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: then why do we ship it with releases?","msgtype":"m.text"},"ts":1406567151000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: I'd assume anything bundled with the release at the top level is there for example reasons","msgtype":"m.text"},"ts":1406567284000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That seems like a properly strange assumption. It doesn't get installed anywhere other than the library directory","msgtype":"m.text"},"ts":1406567478000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Anyway, this conversation is not going to get us anywhere","msgtype":"m.text"},"ts":1406567501000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What are you trying to achieve?","msgtype":"m.text"},"ts":1406567508000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I was planning on adding tests and totally refactoring how HTMLParser.__init__(debug=True/False) works.","msgtype":"m.text"},"ts":1406567735000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think adding tests is harmful","msgtype":"m.text"},"ts":1406567810000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For small values of \"harm\"","msgtype":"m.text"},"ts":1406567825000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so you want me to totally redesign how it works without testing it? ;P","msgtype":"m.text"},"ts":1406567851000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1406567857000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean I'm happy for you to totally redesign how it works and produce any output you like that has a broadly comparable feature set","msgtype":"m.text"},"ts":1406567893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If you want to do something more dramatic e.g. remove it entirely, we should talk more","msgtype":"m.text"},"ts":1406567912000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't think that adding yet more code in the form of tests is worthwhile; I think it will add to the maintainace burden rather than reduce it","msgtype":"m.text"},"ts":1406567953000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think it's useful. I think it should be there. I'm not entirely convinced it should be private.","msgtype":"m.text"},"ts":1406567981000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Having a private argument on a function seems… dubious API design, though.","msgtype":"m.text"},"ts":1406567999000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"It could be a global variable","msgtype":"m.text"},"ts":1406568131000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'd like at least one test for it. If we're having it in parse.py, I'd rather it be tested. AFAIK.","msgtype":"m.text"},"ts":1406568134000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://launchpad.net/ubuntu/+source/html5lib/0.9-2 makes it look like I'm not the only person believing it an example.","msgtype":"m.text"},"ts":1406568149000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Well I'm not exactly going to stop you writing a test for it. But I still don't think the tradeoffs are likely to make sense","msgtype":"m.text"},"ts":1406568390000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I've already written one. It's not exactly hard to do.","msgtype":"m.text"},"ts":1406568408000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And if you want to move parse.py to a debug directory or something, feel free to do so","msgtype":"m.text"},"ts":1406568448000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: but you're a reviewer on html5lib-tests and haven't even reviewed all my open PRs there!","msgtype":"m.text"},"ts":1406568777000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, there's too much on my critic dashboard to make it useful for me, so I only review things I'm pinged about :)","msgtype":"m.text"},"ts":1406568835000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"seems to have > 200 things on his critic dashboard :(","msgtype":"m.emote"},"ts":1406568945000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I still think it's terrible that you can't cause a form control to suffer from bad input by programmatically changing its value, this really sucks for testability =(","msgtype":"m.text"},"ts":1406579882000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"isn't there a testing api","msgtype":"m.text"},"ts":1406580004000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"web driver or some such","msgtype":"m.text"},"ts":1406580008000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"webdriver has a huge suite of problems along with it","msgtype":"m.text"},"ts":1406580024000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"when the choices are \"enable special privileges in the browser\" or \"use the flake-maker\", things are pretty unfortunate","msgtype":"m.text"},"ts":1406580371000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"zcorpan: The other thread was titled \"[cssom-view] Allowing scrollIntoView() to only scroll the nearest scroll container\"","msgtype":"m.text"},"ts":1406585745000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how are we doing in terms of dropping mutation events?","msgtype":"m.text"},"ts":1406591443000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Heh","msgtype":"m.text"},"ts":1406591827000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"where are proposals for new input-related DOM events specced these days?","msgtype":"m.text"},"ts":1406591876000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: the premise of your question is flawed, sadly","msgtype":"m.text"},"ts":1406591976000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh wait, you mean new ones","msgtype":"m.text"},"ts":1406591984000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not the implemented ones","msgtype":"m.text"},"ts":1406591987000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"elucidate?","msgtype":"m.text"},"ts":1406591988000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1406591994000,"senderName":"roc","senderId":"roc@irc"}
]