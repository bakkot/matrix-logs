[
{"content":{"body":"Bterlson made the same point at the meeting about grapheme breaks being locale-independent","msgtype":"m.text"},"ts":1475110073000,"senderName":"littledan__","senderId":"littledan__@irc"},
{"content":{"body":"wind 10","msgtype":"m.text"},"ts":1475118569000,"senderName":"duper","senderId":"duper@irc"},
{"content":{"body":"jyasskin: guess you're asleep?","msgtype":"m.text"},"ts":1475133343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: actually, I thought I had a comment on your proposal, but I don't think I do anymore","msgtype":"m.text"},"ts":1475133540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: re OpenEndedDictionary, what's the requirement around keys being unique?","msgtype":"m.text"},"ts":1475134448000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: how would you create one where they are not?","msgtype":"m.text"},"ts":1475134484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah. Let me rephrase that: given you're targeting URL params and HTTP headers, which both allow for multiple values per key, why is a dictionary the right construct?","msgtype":"m.text"},"ts":1475134679000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: or are you planning something like: dictionary<DOMString or sequence<DOMString>>?","msgtype":"m.text"},"ts":1475134780000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: the common case is key-value","msgtype":"m.text"},"ts":1475134850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: for the uncommon case there's sequence<sequence<ByteString>>","msgtype":"m.text"},"ts":1475134864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I guess we could maybe do (x or sequence<x>), hmm, or for Headers we could allow \",\" in the value, which we probably need to allow anyway","msgtype":"m.text"},"ts":1475134939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: so many options","msgtype":"m.text"},"ts":1475134943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so {\"foo\": \"bar\"} or [[\"foo\", \"bar\"], [\"foo\", \"baz\"]] but not {\"foo\" : [\"bar\", \"baz\"]}?","msgtype":"m.text"},"ts":1475134956000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: that's the status quo","msgtype":"m.text"},"ts":1475134983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: although I'm not sure how many implemented sequence<sequence<x>> here","msgtype":"m.text"},"ts":1475135007000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think Gecko does","msgtype":"m.text"},"ts":1475135039000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: It's interesting to see what common JS libraries tend to do here.","msgtype":"m.text"},"ts":1475135226000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: unsurprisingly, they're super lenient in what they accept.","msgtype":"m.text"},"ts":1475135248000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: So they'll even accept things like: [{foo: \"bar\"}, {foo: \"baz\"}]","msgtype":"m.text"},"ts":1475135305000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what's your take on how Web APIs should handle options like that? Does leniency belong in the Web APIs themselves or in JS libraries built on top?","msgtype":"m.text"},"ts":1475135424000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I would argue for the former, but—","msgtype":"m.text"},"ts":1475135441000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it depends a bit on the tradeoffs involved I suppose","msgtype":"m.text"},"ts":1475136506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: in general I'm not opposed, but perf, complexity, extensibility, etc. are also things we need to take into account","msgtype":"m.text"},"ts":1475136610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure.","msgtype":"m.text"},"ts":1475137026000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"astearns: I looked, and it's filed btw: https://github.com/w3c/uievents/issues/23","msgtype":"m.text"},"ts":1475144062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"astearns: just ignored for 2+ years","msgtype":"m.text"},"ts":1475144069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is Gary not actually working on the UI Events spec any more?","msgtype":"m.text"},"ts":1475145614000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Has anyone ever really worked on the UI events spec?","msgtype":"m.text"},"ts":1475145803000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I thought Gary K was working on it at one time actually","msgtype":"m.text"},"ts":1475146066000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and he was at TPAC so it’s not like he isn’t around","msgtype":"m.text"},"ts":1475146093000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"We discussed UI events at TPAC","msgtype":"m.text"},"ts":1475146216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This exact issue even","msgtype":"m.text"},"ts":1475146220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It still seemed as new to those involved as it was two years ago","msgtype":"m.text"},"ts":1475146239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not really getting my hopes up","msgtype":"m.text"},"ts":1475146244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I so totally don't understand SVG paths.","msgtype":"m.text"},"ts":1475153754000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"aren't they rather similar to canvas paths?","msgtype":"m.text"},"ts":1475154601000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I don't know. I'm pretty sure I've never used canvas paths :)","msgtype":"m.text"},"ts":1475154679000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: study the WHATWG logos","msgtype":"m.text"},"ts":1475154797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: it's relatively straightforward once you play around with it a bit","msgtype":"m.text"},"ts":1475154839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agrees","msgtype":"m.emote"},"ts":1475154850000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I think I'm just not understanding how arcs are computed, more than anything else","msgtype":"m.text"},"ts":1475154963000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"arcs are indeed the most complex part of it","msgtype":"m.text"},"ts":1475154998000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and are, sadly, what I need :(","msgtype":"m.text"},"ts":1475155004000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: seen https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#Arcto ?","msgtype":"m.text"},"ts":1475155049000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: yeah","msgtype":"m.text"},"ts":1475155114000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: generally speaking, you define the ellipse whose arc is to be drawn.","msgtype":"m.text"},"ts":1475155122000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"gsnedders: so you have an ellipse, an implied starting point and an end point. an arc is drawn from the starting point to the end point.","msgtype":"m.text"},"ts":1475155171000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and then it's closed by the implied straight line from the starting point to the end point?","msgtype":"m.text"},"ts":1475155192000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"no, no closing","msgtype":"m.text"},"ts":1475155236000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the \"A\" command just draws an arc segment","msgtype":"m.text"},"ts":1475155245000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"sorry, the fill area is bounded by that line","msgtype":"m.text"},"ts":1475155275000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"has no idea what the proper terminology is here :)","msgtype":"m.emote"},"ts":1475155299000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well if you fill that shape, than yeah, but I suppose no straight stroke line is drawn?","msgtype":"m.text"},"ts":1475155344000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1475155371000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what decides the intrinsic width and height of an inline SVG element?","msgtype":"m.text"},"ts":1475155549000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: when inside HTML? CSS","msgtype":"m.text"},"ts":1475155604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess I mean what does width/height: auto compute to when there's no width/height attributes on the SVG element","msgtype":"m.text"},"ts":1475155645000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I think it tries to go for widest these days? max-content or so. But best to try","msgtype":"m.text"},"ts":1475155727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Used to follow the 300x150 rule","msgtype":"m.text"},"ts":1475155737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"where does the 300x150 rule come from tho?","msgtype":"m.text"},"ts":1475155782000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Some UAs seem to still do this","msgtype":"m.text"},"ts":1475155797000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: replaced elements","msgtype":"m.text"},"ts":1475155932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: maybe that's still what you have to do if there's no aspect ratio either","msgtype":"m.text"},"ts":1475155947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: (aspect ratio is derived from viewBox)","msgtype":"m.text"},"ts":1475155955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: that's very plausible; as you can tell, it's been a while since I played with this","msgtype":"m.text"},"ts":1475155976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1475156078000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You still have more idea than I!","msgtype":"m.text"},"ts":1475156083000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jyasskin: https://github.com/whatwg/html/pull/1831#issuecomment-250490825","msgtype":"m.text"},"ts":1475160972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: that comment might also be interesting to you, although we should probably not make that part of IDL for now","msgtype":"m.text"},"ts":1475161003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I remember you were thinking about this problem","msgtype":"m.text"},"ts":1475161022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I was wondering if you had any further thoughts","msgtype":"m.text"},"ts":1475161029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: it might be time to start an issue for it in whatwg/html or somewhere else and maybe sketch a few things","msgtype":"m.text"},"ts":1475161048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes. I'd been thinking in terms of named parallel threads, but named parallel event loops make equal sense. The wrinkle I found was that I wanted certain steps to complete totally asynchronously (generally because they're calls out to the OS or another device), while other steps should run on the event loop, so we'll need a way to say that.","msgtype":"m.text"},"ts":1475161148000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"HTML seems to have our threading model, so there seems fine for the issue. I'll try to file it today.","msgtype":"m.text"},"ts":1475161178000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: it might actually be beneficial to introduce new terminology for this such as \"thread\" and \"job\" (hey JavaScript!)","msgtype":"m.text"},"ts":1475161336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: that way nobody will get it confused with stuff observable from JavaScript (tasks / microtasks)","msgtype":"m.text"},"ts":1475161369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Worklets also live in a similar construct, so maybe they have some terminology we can use.","msgtype":"m.text"},"ts":1475161383000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: so yeah, not \"job\" 😊","msgtype":"m.text"},"ts":1475161387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: worklets don't really have a concept of a queue I think","msgtype":"m.text"},"ts":1475161412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://drafts.css-houdini.org/worklets/#the-event-loop","msgtype":"m.text"},"ts":1475161471000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: that looks a little weird","msgtype":"m.text"},"ts":1475161557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: also, microtask is only mentioned once in the document, right there","msgtype":"m.text"},"ts":1475161609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"One of the worklet specs actually has postMessage, but I don't remember which. But yeah, the worklet specs aren't necessarily the right inspiration, just another place to look.","msgtype":"m.text"},"ts":1475161720000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"https://github.com/WebAudio/web-audio-api/wiki/AudioWorklet-IDL-Proposal maybe.","msgtype":"m.text"},"ts":1475161803000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, Paul mentioned that they wanted postMessage","msgtype":"m.text"},"ts":1475161954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But he could never explain how that would work","msgtype":"m.text"},"ts":1475161961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe they figured it out by now","msgtype":"m.text"},"ts":1475161971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although that looks like the typical approach of IDL-first-model-later-maybe-never","msgtype":"m.text"},"ts":1475162045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: anyway, agreed that we should look there too","msgtype":"m.text"},"ts":1475162137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, I might have introduced raciness in the sensor spec because of \"in parallel.\" Here again, some non-normative help section would be useful.","msgtype":"m.text"},"ts":1475162139000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: and maybe tell them to fix a few things","msgtype":"m.text"},"ts":1475162146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: makes sense, once there is something to write something non-normative about 😊","msgtype":"m.text"},"ts":1475162234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: heh","msgtype":"m.text"},"ts":1475162251000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: but yeah, named threads with a message queue, message passing between those and the event loop world, system calls that return promises?","msgtype":"m.text"},"ts":1475162428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: and message passing between named threads of course","msgtype":"m.text"},"ts":1475162443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: can we assume threads last for the lifetime of the system from a spec perspective or do we need to define that too?","msgtype":"m.text"},"ts":1475162516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep, that sounds about right. I might have the system calls be \"Asynchronously\" blocks, which the main thread waits for, but I'll have to think more about it.","msgtype":"m.text"},"ts":1475162533000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: the system calls could even be sync as long as they're called from a named thread (and you could use a new named thread to make them async from your perspective...)","msgtype":"m.text"},"ts":1475162595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We might need a way to identify a collection of algorithms, and wait for that collection to complete. I think we don't want folks creating new threads in their algorithms.","msgtype":"m.text"},"ts":1475162598000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I'm not sure I quite follow that yet, but the names for the threads need to be reserved somehow","msgtype":"m.text"},"ts":1475162657000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: the main way I view this concept of \"threads\" is a mechanism for us to state invariants","msgtype":"m.text"},"ts":1475162796000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as a*","msgtype":"m.text"},"ts":1475162803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: so using many of them is okay, if many if your things can run in parallel","msgtype":"m.text"},"ts":1475162823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: a UA doesn't have to use as many threads (or threads at all) to implement your algorithm","msgtype":"m.text"},"ts":1475162843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We could have my \"asynchronously\" blocks be \"Start a thread to run the following steps, resolving |promise|.\"","msgtype":"m.text"},"ts":1475162948000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah, having shorthands sounds good","msgtype":"m.text"},"ts":1475163026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I'm excited now, this might not even be that hard to define","msgtype":"m.text"},"ts":1475163071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, it's sounding coherent.","msgtype":"m.text"},"ts":1475163091000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/infrastructure.html#dom-event-istrusted seems to have lost its data-noexport=\"\", even though that appears in `source`. Did something change in the generation script?","msgtype":"m.text"},"ts":1475164826000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: Domenic dropped noexport from some things recently","msgtype":"m.text"},"ts":1475164897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: maybe you need to run git pull?","msgtype":"m.text"},"ts":1475164915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This isn't one of them; the <dfn> in HTML just says that DOM defines it.","msgtype":"m.text"},"ts":1475164931000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: rationale was that noexport was the default","msgtype":"m.text"},"ts":1475164953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: I think it might have been, but cannot check at the moment","msgtype":"m.text"},"ts":1475164983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"NM, it is one of them. Somehow that's causing Shepherd to think it's exported. TabAtkins","msgtype":"m.text"},"ts":1475164997000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I'm surprised {{Event/isTrusted}} could get confused,","msgtype":"m.text"},"ts":1475165312000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"HTML does not have the appropriate  dfn type or for","msgtype":"m.text"},"ts":1475165336000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe logic based on ID?","msgtype":"m.text"},"ts":1475165379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: ^^","msgtype":"m.text"},"ts":1475165660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: jyasskin: https://heycam.github.io/webidl/#Exposed has an explanation","msgtype":"m.text"},"ts":1475166036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Still a bit confused","msgtype":"m.text"},"ts":1475166049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I intentionally didn't mention the exact issue in my first tweet because it wasn't about that issue in particular: we should just always make sure it's clear how to fix any error message. Tab wasn't sure from the bugzilla discussion what fix to link to, so he pushed back. \"https://heycam.github.io/webidl/#example-eafd180b\" is probably sufficient","msgtype":"m.text"},"ts":1475166255000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(with a better id) because it explains to a spec-writer how to decide what to put in the attribute.","msgtype":"m.text"},"ts":1475166255000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I don't disagree, just unclear why #whatwg was even mentioned or why it was unclear what to suggest","msgtype":"m.text"},"ts":1475166372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought of it as flattering. When you have a spec question, this is the place to go ^_^","msgtype":"m.text"},"ts":1475169042000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"even when it's an ecma262 question?","msgtype":"m.text"},"ts":1475169893000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's normally someone who has a clue here","msgtype":"m.text"},"ts":1475169984000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"usually my questions are actually implementation related, and there isn't anywhere good to ask :(","msgtype":"m.text"},"ts":1475170130000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"is mostly too far out of the ES game nowadays to be be much use :\\","msgtype":"m.emote"},"ts":1475170164000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: heh","msgtype":"m.text"},"ts":1475170398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"evening gents. is there any difference in behavior between Node.textContent and CharacterData.data ?","msgtype":"m.text"},"ts":1475173891000,"senderName":"Wes666","senderId":"Wes666@irc"},
{"content":{"body":"called on a CharacterData object, of course","msgtype":"m.text"},"ts":1475173999000,"senderName":"Wes666","senderId":"Wes666@irc"},
{"content":{"body":"Wes666: https://dom.spec.whatwg.org/#dom-node-textcontent says no.","msgtype":"m.text"},"ts":1475174356000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Wes666: Also, note that not everyone here is a \"gent\".","msgtype":"m.text"},"ts":1475174376000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I recommend \"folks\" instead. :)","msgtype":"m.text"},"ts":1475174402000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"ah right, it's 2016","msgtype":"m.text"},"ts":1475174424000,"senderName":"Wes666","senderId":"Wes666@irc"},
{"content":{"body":"forgive me :P","msgtype":"m.text"},"ts":1475174433000,"senderName":"Wes666","senderId":"Wes666@irc"},
{"content":{"body":"thank you very much for the help","msgtype":"m.text"},"ts":1475174461000,"senderName":"Wes666","senderId":"Wes666@irc"},
{"content":{"body":"annevk: Yeah, it's flattering. ^_^ My problem is that, if an error message says \"interfaces need to have an [Exposed=...] extended attribute\", spec authors not intimately clued into this subject won't know what to put in there.","msgtype":"m.text"},"ts":1475174595000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Even that example in WebIDL isn't great - it explains how to interpret different values, but not *why* a given interface is exposed in Window vs Worker.  How should a spec author decide what to put there?","msgtype":"m.text"},"ts":1475174674000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right now the answer is \"go ask in #whatwg, they'll help you figure it out\".","msgtype":"m.text"},"ts":1475174685000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: This probably belongs in a spec design guideline, rather than WebIDL.","msgtype":"m.text"},"ts":1475174715000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"So a paragraph or two of guidance for what kinds of APIs should be exposed in Window vs Worker vs Worklets  would be useful.","msgtype":"m.text"},"ts":1475174717000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: Yes, that's exactly what it is. I don't care if it lives in WebIDL or elsewhere, I just want it somewhere public that I can point to, before I start dropping fatal errors on innocent spec authors.","msgtype":"m.text"},"ts":1475174747000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://w3ctag.github.io/design-principles/","msgtype":"m.text"},"ts":1475174838000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(Doesn't have it yet, but it's probably the right place.)","msgtype":"m.text"},"ts":1475174855000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yeah, that seems appropriate.","msgtype":"m.text"},"ts":1475174910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Did something change in Bikeshed that might be causing <h3 dfn-type=interface> to lose the dfn-type when it's generated?","msgtype":"m.text"},"ts":1475178434000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: https://github.com/WebBluetoothCG/web-bluetooth/blob/master/index.bs#L2176 has it, but https://api.csswg.org/bikeshed/?url=https://raw.githubusercontent.com/WebBluetoothCG/web-bluetooth/master/index.bs#bluetoothdevice doesn't.","msgtype":"m.text"},"ts":1475178509000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: jyasskin: ❤️","msgtype":"m.text"},"ts":1475178932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: Yes, accidental change where I was assuming a list of selectors was a list of tagnames. Should be fixed now.","msgtype":"m.text"},"ts":1475184065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thx","msgtype":"m.text"},"ts":1475184095000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Turns out W3C HTML is an amazing stress-test for Bikeshed, and I'm trying to cut down on the biggest slow points for them. Did a big refactor of the cleanupHTML function from being 20 or so different applications of \"run a selector, loop over results\" to just being a single tree-walk that tests each element to see if the cleanup applies.","msgtype":"m.text"},"ts":1475184158000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: If Bikeshed renders W3C HTML in less time than my browser renders html.spec.whatwg.org, you've won. ;)","msgtype":"m.text"},"ts":1475184315000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1475184423000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]