[
{"content":{"body":"TabAtkins: you around?","msgtype":"m.text"},"ts":1479259721000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"So W3C needs to fix this shortname-level trend. Look at https://www.w3.org/TR/service-workers/ and https://www.w3.org/TR/service-workers-1/. This is completely broken.","msgtype":"m.text"},"ts":1479282495000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Not to mention level-1 points to a dedicated ED and not the real ED which only the old /service-workers/ WD points to.","msgtype":"m.text"},"ts":1479282557000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: happy b-day!","msgtype":"m.text"},"ts":1479283260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: oh wow, happy birthday!","msgtype":"m.text"},"ts":1479283740000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: Domenic: any updates on canceling fetch()?","msgtype":"m.text"},"ts":1479291974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Domenic: marcosc told me that the payments API might need something similar, but I guess it's already too late there and they'll have something ugly instead","msgtype":"m.text"},"ts":1479292001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cancelable promises are still making their way through tc39. If that takes too long we can do some rewiring and make request.error() a thing (which rejects the promise)","msgtype":"m.text"},"ts":1479292827000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Although that won't work for .json() etc","msgtype":"m.text"},"ts":1479292836000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you suggested that before and I countered with the fact that request is cloned once passed to fetch()","msgtype":"m.text"},"ts":1479292894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: radio silence after that on that issue (which was closed before that)","msgtype":"m.text"},"ts":1479292912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, the clone would have to be linked to the original for error() to work","msgtype":"m.text"},"ts":1479292963000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: and yeah, I still have the concern that even with a cancel token, we might want to have something higher-level too to cancel both","msgtype":"m.text"},"ts":1479292976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so whenever you do new Request(request) we now need to set up linking and maintain some kind of relationship?","msgtype":"m.text"},"ts":1479293011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if we wanted cancel() to work, yeah","msgtype":"m.text"},"ts":1479293031000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: for previously static objects that seems like a major surge in complexity","msgtype":"m.text"},"ts":1479293038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We'd have to do the same with the tokens right?","msgtype":"m.text"},"ts":1479293041000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Maybe surge is not the right word","msgtype":"m.text"},"ts":1479293056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For tokens to work the copy would have to take the token","msgtype":"m.text"},"ts":1479293078000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the token could be copied, just like all kinds of stuff is copied today","msgtype":"m.text"},"ts":1479293093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: no need to maintain a link","msgtype":"m.text"},"ts":1479293098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we could make error() work the same way","msgtype":"m.text"},"ts":1479293145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Use a token under the hood","msgtype":"m.text"},"ts":1479293158000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that'd be like using json() on the old request object having an effect on the new one","msgtype":"m.text"},"ts":1479293202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm","msgtype":"m.text"},"ts":1479293243000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I don't think we should go with that kind of design unless we really embrace requests is more of an ongoing thing and maybe figure out if we can change the way fetch() works","msgtype":"m.text"},"ts":1479293244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if the blocker is cancelable promises, we could look at getting token support in earlier","msgtype":"m.text"},"ts":1479293275000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But it could be an error token rather than a cancel token","msgtype":"m.text"},"ts":1479293293000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1479293295000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Why is </> special in XML 5?","msgtype":"m.text"},"ts":1479295313000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: tribute to Hixie","msgtype":"m.text"},"ts":1479295342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was trying to unify html5ever and xml5ever and this is the only thing I can't work around I think.","msgtype":"m.text"},"ts":1479295381000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: also, it's XML5 sans space","msgtype":"m.text"},"ts":1479295392000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1479295398000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: really? Huh","msgtype":"m.text"},"ts":1479295408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I can work around the absence or processing instructions in the former, but the short end tag in the latter makes my unification quite impossible.","msgtype":"m.text"},"ts":1479295413000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: It changes the type that represents tokens.","msgtype":"m.text"},"ts":1479295421000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: can't you just re-interpret the </> token in html5ever?","msgtype":"m.text"},"ts":1479295448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What do you mean?","msgtype":"m.text"},"ts":1479295457000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: do whatever HTML says to do for it","msgtype":"m.text"},"ts":1479295473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Aside: is it meant to be read as \"fever\"?","msgtype":"m.text"},"ts":1479295496000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"goes back to the HTML spec and squints trying to find where it is.","msgtype":"m.emote"},"ts":1479295500000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Maybe, the pun is mostly about html4ever-but-for-html5.","msgtype":"m.text"},"ts":1479295513000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: there's an html4ever?","msgtype":"m.text"},"ts":1479295525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: No but that's something you can say, and it fits the previous version of HTML.","msgtype":"m.text"},"ts":1479295546000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I see","msgtype":"m.text"},"ts":1479295559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm still a little sad we didn't have the foresight with html5lib to leave versioning out of the name","msgtype":"m.text"},"ts":1479295574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://html.spec.whatwg.org/multipage/syntax.html#end-tag-open-state \"Anything else\" Yeah I guess I could do that.","msgtype":"m.text"},"ts":1479295606000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: So in HTML syntax, </> == <!--/-->?","msgtype":"m.text"},"ts":1479295648000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: to be clear, it's not just Hixie, it also happens to be quite useful","msgtype":"m.text"},"ts":1479295661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1479295669000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: hmm, are you making me read the parser spec?","msgtype":"m.text"},"ts":1479295674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: since you don't have to write out the closing tag","msgtype":"m.text"},"ts":1479295684000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah ah, nah, I'm confident in my reading don't force yourself.","msgtype":"m.text"},"ts":1479295692000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: It behaves completely different than HTML,","msgtype":"m.text"},"ts":1479295698000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and it isn't needed for webcompat,","msgtype":"m.text"},"ts":1479295704000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so I would say it was a bad thing.","msgtype":"m.text"},"ts":1479295713000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: afaict it's <!----> without the /","msgtype":"m.text"},"ts":1479295725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"Parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.\"","msgtype":"m.text"},"ts":1479295740000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And in bogus comment state: \"Anything else: Append the current input character to the comment token's data.\"","msgtype":"m.text"},"ts":1479295760000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: actually, I think it's just ignored","msgtype":"m.text"},"ts":1479295781000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: </ brings you into end tag open state","msgtype":"m.text"},"ts":1479295790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh right, silly me.","msgtype":"m.text"},"ts":1479295802000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: > brings you back to data state with the token ignored","msgtype":"m.text"},"ts":1479295803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: so it should be very easy to support in both","msgtype":"m.text"},"ts":1479295823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So anyway, I'm not sure XML5 should include novelty convenience stuff that behaves quite differently from HTML5.","msgtype":"m.text"},"ts":1479295829000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: in HTML you ignore, in XML you pop","msgtype":"m.text"},"ts":1479295833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If we're going to do XML5 at all, why would we not add something nice","msgtype":"m.text"},"ts":1479295884000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: But more than Hixie tribute, it's also a syntax in E4X no?","msgtype":"m.text"},"ts":1479295885000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't think E4X has </>","msgtype":"m.text"},"ts":1479295898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SGML might","msgtype":"m.text"},"ts":1479295902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's no HTML parity anyway","msgtype":"m.text"},"ts":1479295942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"By default you don't get namespaces, you can create arbitrary trees, etc.","msgtype":"m.text"},"ts":1479295970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I wanted to check...","msgtype":"m.text"},"ts":1479295972000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: http://www.ecma-international.org/publications/standards/Ecma-357.htm","msgtype":"m.text"},"ts":1479295973000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"click on the PDF link.","msgtype":"m.text"},"ts":1479295977000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"facepalms.","msgtype":"m.emote"},"ts":1479295980000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: heh, www.ecma-international.org/publications/files/ECMA-ST/ECMA-357.pdf even redirects it seems","msgtype":"m.text"},"ts":1479296069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah ah ah.","msgtype":"m.text"},"ts":1479296087000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"JakeA: :focusring vs :focus:not(:active) gives?","msgtype":"m.text"},"ts":1479297775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think active happens on buttons, or it happens but even after activation via keyboard","msgtype":"m.text"},"ts":1479297921000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's definitely something I've struggled with in the past, and usually end up calling blur() after clicks, which isn't great","msgtype":"m.text"},"ts":1479297990000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1479298063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: per http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=4670 it seems like the </> gets totally eaten, not turned into a comment","msgtype":"m.text"},"ts":1479308672000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yeah I figured that out afterwards,","msgtype":"m.text"},"ts":1479308688000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"was misreading the spec,","msgtype":"m.text"},"ts":1479308692000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"AS USUAL","msgtype":"m.text"},"ts":1479308694000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"i see, that's what i get for typing as i read the backscroll","msgtype":"m.text"},"ts":1479308701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Can't blame you for replying me, hah, thanks anyway. :)","msgtype":"m.text"},"ts":1479308718000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"quick question - ImageData.data is Transferrable, e.g. can i efficiently move it to a web worker?","msgtype":"m.text"},"ts":1479316735000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: what is the question?","msgtype":"m.text"},"ts":1479316840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: https://infra.spec.whatwg.org/","msgtype":"m.text"},"ts":1479317545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can I transfer canvas ImageData to a Worker without copying?","msgtype":"m.text"},"ts":1479318202000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: You should have named it utils or misc, come on. :P","msgtype":"m.text"},"ts":1479318334000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: sure, just pass imageData.data.buffer to the transfer map","msgtype":"m.text"},"ts":1479318399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I'm hoping this is not going to be a thing where everyone has opinions about the name...","msgtype":"m.text"},"ts":1479318479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sorry, kidding, I like the name you chose. :P","msgtype":"m.text"},"ts":1479318509000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I hate the utils module in Servo with a passion.","msgtype":"m.text"},"ts":1479318516000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1479318947000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I'm trying to understand how browsers work (or are supposed to) with regards to event handling and the event loop. For example, is it true that attaching an event handler earlier in the same function will make any difference (however small and unlikely?). E.g. document.addEventListener('visibilitychange', ..) as first line or last line of a long function.","msgtype":"m.text"},"ts":1479320004000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I always thought that events would be queued after the current execution so it will get triggered either way","msgtype":"m.text"},"ts":1479320022000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"but then I realised that maybe browsers disregard events if there are no listeners bound","msgtype":"m.text"},"ts":1479320033000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Do you know if the spec prescribes anything on this point? Or is it up to user agents to decide?","msgtype":"m.text"},"ts":1479320055000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: most events get queued but not all","msgtype":"m.text"},"ts":1479321532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: depends on whether they dispatch from a new task","msgtype":"m.text"},"ts":1479321562000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Krinkle: for your sample event it should not matter","msgtype":"m.text"},"ts":1479321587000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm curious in general, but for this particular example it's about whether or not it is possible to miss information if you do: if (document.hidden){ yup(); } and then doc.addEventListener(visibilitychange, yup); or that in theory hidden can happen in between but not dispatched","msgtype":"m.text"},"ts":1479321636000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Interesting.","msgtype":"m.text"},"ts":1479321643000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: So the spec says whether or not to dispatch from a task? Or is that implementation detail?","msgtype":"m.text"},"ts":1479321657000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: specs need to","msgtype":"m.text"},"ts":1479321677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I assume you mean that some events queue event handlers directly as individual tasks, and others queue a task to do the dispatching?","msgtype":"m.text"},"ts":1479321678000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: some operations dispatch directly","msgtype":"m.text"},"ts":1479321709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ah you mean synchronously","msgtype":"m.text"},"ts":1479321720000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: others queue a task to dispatch","msgtype":"m.text"},"ts":1479321724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1479321728000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: indeed","msgtype":"m.text"},"ts":1479321731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So if it's queued , then it will always defer the entire thing, which means new handlers will be seen still.","msgtype":"m.text"},"ts":1479321747000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: Thanks :)","msgtype":"m.text"},"ts":1479321770000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"annevk: I imagine there may be some exceptions with regards to optimizing for there not being any handlers, but maybe that optimization is also deferred. I'm thinking about scroll events and such perf hurdles for mobile.","msgtype":"m.text"},"ts":1479321804000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: oh yes","msgtype":"m.text"},"ts":1479321829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I imagine it would be able to natively see if there are handlers without requiring JS execution to be interupted.","msgtype":"m.text"},"ts":1479321838000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: impls optimize alll kinds of things","msgtype":"m.text"},"ts":1479321844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which would allow for races.","msgtype":"m.text"},"ts":1479321844000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"JakeA: ping","msgtype":"m.text"},"ts":1479325551000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"have you survived Chrome Dev Summit?","msgtype":"m.text"},"ts":1479325569000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm... nm","msgtype":"m.text"},"ts":1479325861000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: back in the office tomorrow!","msgtype":"m.text"},"ts":1479325898000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ah, ok","msgtype":"m.text"},"ts":1479325911000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1479325920000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"speaking of which, I'm in London from, uh, 40 minutes from now","msgtype":"m.text"},"ts":1479325956000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/40/30/","msgtype":"m.text"},"ts":1479325968000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/30/29/","msgtype":"m.text"},"ts":1479326029000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well, we're running late, but there's enough pathing allowances that we could make up some of it","msgtype":"m.text"},"ts":1479326060000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so I dunno when we'll get in","msgtype":"m.text"},"ts":1479326064000,"senderName":"gsnedders","senderId":"gsnedders@irc"}
]