[
{"content":{"body":"for “trailing commas” in JavaScript syntax, is there any specific fragment ID in the EcmaScript spec I can point to?","msgtype":"m.text"},"ts":1541476838000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas for the context","msgtype":"m.text"},"ts":1541476847000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is that what Elision<sub>opt</sub> indicates?","msgtype":"m.text"},"ts":1541477719000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"when I look at a proposal in https://github.com/tc39/proposal-* space, how can I tell if it’s already been adopted into the current https://tc39.github.io/ecma262/ standard? (short of actually checking the current spec text)","msgtype":"m.text"},"ts":1541479467000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., looking at https://github.com/tc39/proposal-trailing-function-commas I cannot tell if it’s been adopted or not from just looking at that","msgtype":"m.text"},"ts":1541479511000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it has been, but there’s no statement there to indicate that","msgtype":"m.text"},"ts":1541479534000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK looking at https://github.com/tc39/proposals I see it’s not listed there, so I guess the process is that I see a proposal in https://github.com/tc39/proposal-*, I need to check https://github.com/tc39/proposals and see if it’s listed there ー but if it’s not, then I need to assume it’s already been adopted","msgtype":"m.text"},"ts":1541479844000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1541479923000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now I find https://github.com/tc39/proposals/blob/master/finished-proposals.md","msgtype":"m.text"},"ts":1541479931000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"filed https://github.com/tc39/proposals/issues/162","msgtype":"m.text"},"ts":1541480931000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so per spec HTMLAllCollection shouldn't have a @@iterator, right?","msgtype":"m.text"},"ts":1541513786000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because it does in FF/Ch, at least","msgtype":"m.text"},"ts":1541513814000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But I can't see any justification for that in the spec.","msgtype":"m.text"},"ts":1541513823000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"‘allo ‘allo","msgtype":"m.text"},"ts":1541514349000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"I heard there was a discussion about document.all[Symbol.iterator].","msgtype":"m.text"},"ts":1541514368000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Is that a thing that only exists in Gecko?","msgtype":"m.text"},"ts":1541514390000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"14:16 < gsnedders> so per spec HTMLAllCollection shouldn't have a @@iterator, right?","msgtype":"m.text"},"ts":1541514414000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"14:16 < gsnedders> because it does in FF/Ch, at least","msgtype":"m.text"},"ts":1541514417000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"14:17 < gsnedders> But I can't see any justification for that in the spec.","msgtype":"m.text"},"ts":1541514419000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh interesting find.","msgtype":"m.text"},"ts":1541514536000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"I'm wondering if I've misread the spec here","msgtype":"m.text"},"ts":1541514594000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I've misread WebIDL, I think.","msgtype":"m.text"},"ts":1541514709000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"an indexed property getter and an integer-typed length attribute\"","msgtype":"m.text"},"ts":1541514744000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which they do, hence they have a @@iterator","msgtype":"m.text"},"ts":1541514751000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"okay, ignore me","msgtype":"m.text"},"ts":1541514754000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"stupid question about DOM. If we have a document element the assumption is that it includes all the mixins that come with document?","msgtype":"m.text"},"ts":1541515810000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"the document has them, the document elmenet is the root element","msgtype":"m.text"},"ts":1541515917000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"AutomatedTester: I don't really understand the question","msgtype":"m.text"},"ts":1541515922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"unless you're not asking what I think you are?","msgtype":"m.text"},"ts":1541515930000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I might not be asking it properly...","msgtype":"m.text"},"ts":1541515947000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"so my question is do I need to explicitly call out document or shadowRoot for knowing where items should start from. E.g. in webdriver we have the start node for finding elements as the document element but if I want to search a shadow dom I need to use the shadowRoot","msgtype":"m.text"},"ts":1541516040000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"so is having it as the document fine or do I need to explicitly say document or shadowRoot","msgtype":"m.text"},"ts":1541516080000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: what are you using to find things? I presume you just do it by reference to Selectors or XPath?","msgtype":"m.text"},"ts":1541516195000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://w3c.github.io/webdriver/#find-element step 7 to be exact","msgtype":"m.text"},"ts":1541516207000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"gsnedders: yes","msgtype":"m.text"},"ts":1541516214000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"since there is no way to pierce a shadow dom otherwise we break encapsulation we need to set the start node to the shadowRoot and then search which is the equivalent of shadowRoot.querySelector(...)","msgtype":"m.text"},"ts":1541516296000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: hmm, doesn't WebDriver have super powers anyway? Why not break encapsulation?","msgtype":"m.text"},"ts":1541516635000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we could but then we need to build our own selectors for starting at the top level and descending into a shadow dom","msgtype":"m.text"},"ts":1541516681000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: anyway, if you want to go through shadow trees, you need to say so, and define how","msgtype":"m.text"},"ts":1541516710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AutomatedTester: there's no freebies","msgtype":"m.text"},"ts":1541516717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I am not sure we can guarantee a view into closed shadow dom's","msgtype":"m.text"},"ts":1541516727000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"annevk: thats what I thought and just wanted to check","msgtype":"m.text"},"ts":1541516747000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: WebDriver should be able to do that I think, but it might require the browser to provide ways","msgtype":"m.text"},"ts":1541516800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what was the plan for testing this for end users or was this \"webdriver will solve this... probably\"","msgtype":"m.text"},"ts":1541517024000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: end users being?","msgtype":"m.text"},"ts":1541517365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: website QA folk","msgtype":"m.text"},"ts":1541517386000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: I think the idea there was that WebDriver would indeed provide hooks","msgtype":"m.text"},"ts":1541517415000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: I think [...collection] does some magic because for-of doesn’t work.","msgtype":"m.text"},"ts":1541517427000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"AutomatedTester: but there wasn't a lot of discussion about that, for sure","msgtype":"m.text"},"ts":1541517429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: I think reading ECMAScript might reveal some clues.","msgtype":"m.text"},"ts":1541517442000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: both should just call the iterator, no?","msgtype":"m.text"},"ts":1541517524000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: my worry is that since deep selectors were dropped its going to be non-trivial to allow people to call from the document down into a shadow dom","msgtype":"m.text"},"ts":1541517544000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"feels like there are a lot of dragons down there","msgtype":"m.text"},"ts":1541517554000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"ato: for (let x of document.all) console.log(x);","msgtype":"m.text"},"ts":1541517670000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ato: that wfm?","msgtype":"m.text"},"ts":1541517673000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: OK, maybe HTMLAllCollection is not the problematic one here.","msgtype":"m.text"},"ts":1541517690000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/source/testing/web-platform/tests/webdriver/tests/execute_script/collections.py for reference.","msgtype":"m.text"},"ts":1541517713000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"HTMLFormControlsCollection works with for-of.","msgtype":"m.text"},"ts":1541517783000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"And HTMLOptionsCollection.","msgtype":"m.text"},"ts":1541517816000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"AutomatedTester: I don't really know what folks are looking for, but you could offer things that basically iterate over the document and all its shadow roots and and match the selectors given","msgtype":"m.text"},"ts":1541517833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And NodeList.","msgtype":"m.text"},"ts":1541517846000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"AutomatedTester: it's just that we don't want to expose those kind of things directly to web pages","msgtype":"m.text"},"ts":1541517857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And HTMLCollection.","msgtype":"m.text"},"ts":1541517880000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"annevk: I think people want /deep/","msgtype":"m.text"},"ts":1541517887000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: I guess I'm saying is that if they say that, we need to dig a little deeper since a) it doesn't work for closed trees and b) we don't want a different selector parser for WebDriver","msgtype":"m.text"},"ts":1541517933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed!","msgtype":"m.text"},"ts":1541517952000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"if I can offload to the webapi's then I can somewhat guarantee interop","msgtype":"m.text"},"ts":1541517983000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: we can offer utilities that do some kind of query on all shadow roots associated with a document and return nodes in some manner, but if we can't move the conversation past /deep/ I'd just let it slide for now...","msgtype":"m.text"},"ts":1541517996000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(note that this APIs would have to be WebDriver only)","msgtype":"m.text"},"ts":1541518016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"these*","msgtype":"m.text"},"ts":1541518023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As does Arguments.","msgtype":"m.text"},"ts":1541518035000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"at the moment I can get around most cases (excluding closed shadow doms) using document or shadowRoot","msgtype":"m.text"},"ts":1541518046000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"and then base things off that","msgtype":"m.text"},"ts":1541518053000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"annevk: if I were to start a conversation about the searchability where is the best place to do that?","msgtype":"m.text"},"ts":1541518111000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: the WebDriver repo?","msgtype":"m.text"},"ts":1541518136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AutomatedTester: as I said, we don't want these to be web-exposed APIs","msgtype":"m.text"},"ts":1541518153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1541518157000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"I will just @ the relevant people like you to discuss things further","msgtype":"m.text"},"ts":1541518176000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"we have a thread there at the moment","msgtype":"m.text"},"ts":1541518185000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: it's reasonable to start a WebDriver-specific thread on w3c/webcomponents though to point folks at that","msgtype":"m.text"},"ts":1541518189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: What. Even FileList works with for-of.","msgtype":"m.text"},"ts":1541518196000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"annevk: thats what more what I was after :)","msgtype":"m.text"},"ts":1541518211000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"AutomatedTester: okay, yeah, please do that","msgtype":"m.text"},"ts":1541518225000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1541518230000,"senderName":"AutomatedTester","senderId":"AutomatedTester@irc"},
{"content":{"body":"gsnedders: OK, so am I right reading that the conclusion here is that it’s OK for the spec to rely on the collection implementing the Iterable interface?","msgtype":"m.text"},"ts":1541518237000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"gsnedders: I mean the language I used is clearly wrong, but that we can use the normal iterator protocol?","msgtype":"m.text"},"ts":1541518257000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: it's a feature of IDL","msgtype":"m.text"},"ts":1541518261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ato: IDL added it to reduce the amount of specifying we'd have to do to support it all over the place","msgtype":"m.text"},"ts":1541518287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Let me point you to the actual bit of spec we’re discussing.","msgtype":"m.text"},"ts":1541518331000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"annevk: In https://w3c.github.io/webdriver/#dfn-internal-json-clone-algorithm, under the “a collection” variant we say “For each item of value, …”.","msgtype":"m.text"},"ts":1541518393000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"And collection is not quite the same as in DOM/HTML: https://w3c.github.io/webdriver/#dfn-collection","msgtype":"m.text"},"ts":1541518418000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"(Here “type” should be “interface” I think.)","msgtype":"m.text"},"ts":1541518429000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"But the effect we want to achieve is to rely on the each of these objects’ iterator protocols to run some JSON serialisation steps and add them to a JSON Array.","msgtype":"m.text"},"ts":1541518456000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: no, we want something like \"instance of\" except we need it to work cross-origin","msgtype":"m.text"},"ts":1541518462000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and I can't remember what the right way to define that","msgtype":"m.text"},"ts":1541518471000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yes, I meant that actually!","msgtype":"m.text"},"ts":1541518472000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"the right way today is what you did","msgtype":"m.text"},"ts":1541518489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"is X\" is the way to do that until we have [[PlatformBrand]] or equiv","msgtype":"m.text"},"ts":1541518503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"now actually invoking the iterator protocol I don't know, that has all kinds of potential side effects that I'm not sure you want here?","msgtype":"m.text"},"ts":1541518540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in any event, simply saying \"for of\" doesn't cut it if you want to call JS operations","msgtype":"m.text"},"ts":1541518563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We don’t particularly care how implementations do it, as long as the result of the algorithm is that you end up with a JSON Array with the objects passed through a serialisation step.","msgtype":"m.text"},"ts":1541518746000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"So when you talk about side effects of invoking the iterator protocol and JS operations, I have a hard time understanding exactly what you mean.","msgtype":"m.text"},"ts":1541518778000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"iterators can execute arbitrary code","msgtype":"m.text"},"ts":1541518802000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and throw exceptions, etc.","msgtype":"m.text"},"ts":1541518807000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Right, because they are custom?","msgtype":"m.text"},"ts":1541518836000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Or can be if the prototype has been replaced?","msgtype":"m.text"},"ts":1541518842000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Various things, once you run JavaScript stuff can throw","msgtype":"m.text"},"ts":1541518860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, so I don’t think the intention here is to run JS.","msgtype":"m.text"},"ts":1541518875000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"(and you'll also have to define other things, like what globals are in use and such)","msgtype":"m.text"},"ts":1541518878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, and we do this for the actual script execution.","msgtype":"m.text"},"ts":1541518895000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"(Where you receive a script string and inject it into the runtime.)","msgtype":"m.text"},"ts":1541518913000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: e.g., if I set document.all[Symbol.iterator], the iterator is no longer the default","msgtype":"m.text"},"ts":1541518948000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Got it.","msgtype":"m.text"},"ts":1541518967000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Words are hard (-:","msgtype":"m.text"},"ts":1541518987000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"So when we say “for item of value” here, that doesn’t invoke the JS Symbol.iterator or the iterator protocol. What does it do?","msgtype":"m.text"},"ts":1541519042000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Is it inferred as an exercise for the reader to understand that you want to achieve the effect of looking at a DOM/HTML collections items in sequence without going down the same path as JS?","msgtype":"m.text"},"ts":1541519078000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Not trying to be nitpicky here by the way.  Just trying to understand how this works.","msgtype":"m.text"},"ts":1541519125000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: it's not clear what it does since it's not defined","msgtype":"m.text"},"ts":1541519127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the Gecko implementation, what we do specifically is call what I guess is the initial value of the iterator protocol by doing [...collection] in XPCOM.","msgtype":"m.text"},"ts":1541519178000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: it does invoke the iterator protocol?","msgtype":"m.text"},"ts":1541519193000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Doesn’t the JS spread operator do that?","msgtype":"m.text"},"ts":1541519208000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"https://searchfox.org/mozilla-central/rev/b096dcf0ea226af628fe03f7e7acb56a25853533/testing/marionette/evaluate.js#250-253","msgtype":"m.text"},"ts":1541519231000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1541519231000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"both do that","msgtype":"m.text"},"ts":1541519235000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ato: I think you want to convert from JS into Infra or Web IDL data structures as soon as possible. Then you can operate without running JS side effects.","msgtype":"m.text"},"ts":1541520726000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although, I guess that conversion will itself have JS side effects","msgtype":"m.text"},"ts":1541520780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So you need to go deeper -_-","msgtype":"m.text"},"ts":1541520787000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so nobody working on Chrome's service worker implementation was considering this or they actively ruled out preloading one already somehow?","msgtype":"m.text"},"ts":1541520791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: from what they've told me there are engineering challenges with first-run service worker that they have no plans on solving","msgtype":"m.text"},"ts":1541520824000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For Firefox it's only the former as far as I know, the latter is to be seen","msgtype":"m.text"},"ts":1541520847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: are those documented somewhere?","msgtype":"m.text"},"ts":1541520853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not that I know of","msgtype":"m.text"},"ts":1541520869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: who would I ask?","msgtype":"m.text"},"ts":1541520880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Other implemenations are in Rust and C++, so we don’t want to tie the spec to JS if we can avoid it.","msgtype":"m.text"},"ts":1541520881000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"But their vibe was that it was kind of common knowledge, so I dunno, maybe?","msgtype":"m.text"},"ts":1541520882000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: But I don’t really understand what you’re proposing…","msgtype":"m.text"},"ts":1541520901000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: My best guess so far is something like \"for each supported property index (https://heycam.github.io/webidl/#dfn-supported-property-indices), run the algorithm specified for the collection's indexed property getter (https://heycam.github.io/webidl/#dfn-indexed-property-getter)\" and collect all those into a list (https://infra.spec.whatwg.org/#lists)","msgtype":"m.text"},"ts":1541520968000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: kinuko and matto","msgtype":"m.text"},"ts":1541520997000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1541521031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ato: for Arrays you're totally screwed though, you'll have to run JS with side effects. E.g if someone does `new Array(3); Object.defineProperty(Array.prototype, \"1\", { get () { throw new Error(\"foo\"); } })` there's no way to avoid hitting that exception","msgtype":"m.text"},"ts":1541521071000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ato: It appears you're also screwed for Arguments objects in a very similar way","msgtype":"m.text"},"ts":1541521178000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"By \"screwed\" I mean \"you'll run JS\", not \"unimplementable in Rust and C++\"","msgtype":"m.text"},"ts":1541521233000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Rust and C++ implementations just need to use the JS API","msgtype":"m.text"},"ts":1541521241000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/JS API/JS engine API","msgtype":"m.text"},"ts":1541521268000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks for explaining that, very useful!","msgtype":"m.text"},"ts":1541521807000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Domenic: So we are aware of the pitfalls that we can’t trust the input data to the algorithm, and I don’t think we particularly care that we fail in this case.","msgtype":"m.text"},"ts":1541521839000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Domenic: If a website makes an array throw an error on iteration and you try to return that array using an injected script, you would expect that behaviour.","msgtype":"m.text"},"ts":1541521881000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"ato: but we do need to define well the failure case","msgtype":"m.text"},"ts":1541521888000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yes, that sounds like what is missing here.","msgtype":"m.text"},"ts":1541521899000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Or, I mean, generally throughout the spec.","msgtype":"m.text"},"ts":1541521909000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"+1. Ideally with tests ;)","msgtype":"m.text"},"ts":1541521913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For the other commands in the specification, we expect them to work irregardless of prototype overrides.","msgtype":"m.text"},"ts":1541521945000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"So it would be funny to see what happens if you inject a script replacing querySelectorAll or whatever and then you try using the Find Elements WebDriver command.","msgtype":"m.text"},"ts":1541521966000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"My guess is that hillarity would ensue depending on the implementation.","msgtype":"m.text"},"ts":1541521979000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Domenic: How does jsdom cope with such Array.prototype shenanigans btw?","msgtype":"m.text"},"ts":1541521992000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It’s not entirely clear to me how to define these error scenarios, but I’ll file a bug and we can take it from there.","msgtype":"m.text"},"ts":1541522010000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"It sounds like “define error scenarios” is orthogonal from s/type/instance of/ and indeed how to say “for item of value”.","msgtype":"m.text"},"ts":1541522054000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"nox: it doesn't, yet. We haven't tried to harden it. But it could via the various techniques discussed here: https://github.com/domenic/get-originals/blob/master/Sample%20conversion.md#array-manipulation-analysis . (That doc uses a hypothetical \"get originals\" API, but jsdom has access to the originals via other means, so that part isn't necessary.)","msgtype":"m.text"},"ts":1541522067000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Thanks for the link.","msgtype":"m.text"},"ts":1541522089000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ato: I think \"define error semantics\" is not orthogonal to \"for item of value\" because how you iterate is what generates or hides errors.","msgtype":"m.text"},"ts":1541522090000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You’re right. But maybe we can do it in steps.","msgtype":"m.text"},"ts":1541522114000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Would you say “for item of value” is the right terminology here?","msgtype":"m.text"},"ts":1541522124000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1541522173000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Because it's not defined","msgtype":"m.text"},"ts":1541522188000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://github.com/w3c/webdriver/issues/1349","msgtype":"m.text"},"ts":1541522879000,"senderName":"ato","senderId":"ato@irc"},
{"content":{"body":"Domenic: For Array, could we wrap them in a Proxy that uses the original Object.defineProperty in its set method?","msgtype":"m.text"},"ts":1541534927000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"To be able to still do a[i] = x","msgtype":"m.text"},"ts":1541534948000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: hmm yeah that seems pretty good, +1","msgtype":"m.text"},"ts":1541535416000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: And is there any way to use Array.values and Array.of to copy an array avoiding holes and stuff like that?","msgtype":"m.text"},"ts":1541535659000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: not sure what you mean","msgtype":"m.text"},"ts":1541535674000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is this for the input, i.e. implementing the sequence<> -> list conversion?","msgtype":"m.text"},"ts":1541535689000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In that case the per-spec thing is to just use the iterator protocol, for-of","msgtype":"m.text"},"ts":1541535698000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1541535698000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Oh right.","msgtype":"m.text"},"ts":1541535709000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: With such an Array proxy, couldn't we also allow array method calls with the certainty that we are calling the original ones from Array.prototype?","msgtype":"m.text"},"ts":1541539143000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm not sure exactly how to write it, but it's definitely true that with a proxy you could make myProxy.map() always do the right thing.","msgtype":"m.text"},"ts":1541539183000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was thinking something way more generic than that, like makeAProxyHandlerThatWillCallExactlyTheCurrentMethodsOfThatGivenPrototype(Array.prototype).","msgtype":"m.text"},"ts":1541539223000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, I mean, that seems doable. Writing proxies is such an art though.","msgtype":"m.text"},"ts":1541539240000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Also you'd need to save each method you're interested in, to avoid people deleting Array.prototype.map at runtime and thus messing you up","msgtype":"m.text"},"ts":1541539267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Array methods are not a real big deal though. If you're saving them anyway, you can just do arrayMap(myProxy, mapper) which is almost as nice.","msgtype":"m.text"},"ts":1541539326000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Hence why a proxy handler constructed from the prototype.","msgtype":"m.text"},"ts":1541539331000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I wonder if anybody has any clue why every time I now try to do a Google search in Canary, I only instead get a generated error page from Canary about an Origin Policy violation","msgtype":"m.text"},"ts":1541545409000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, well, well. What do we have here? An Origin Policy violation.","msgtype":"m.text"},"ts":1541545422000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And what do we not have? A page!","msgtype":"m.text"},"ts":1541545422000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"You're trying to go to: https://www.google.co.jp/search?q=foo&oq=foo&aqs=chrome..69i57j69i60j69i61j69i60j0l2.776j0j9&sourceid=chrome&ie=UTF-8","msgtype":"m.text"},"ts":1541545422000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"The policy applies to: https://www.google.co.jp","msgtype":"m.text"},"ts":1541545425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"You must be in some experiment group","msgtype":"m.text"},"ts":1541546705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or with a flag flipped","msgtype":"m.text"},"ts":1541546717000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And google.co.jp implemented something wrong","msgtype":"m.text"},"ts":1541546724000,"senderName":"Domenic","senderId":"Domenic@irc"}
]