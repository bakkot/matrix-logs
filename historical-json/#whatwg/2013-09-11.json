[
{"content":{"body":"zewt: you consider macbooks to be 'mobile' instead of 'desktop'?","msgtype":"m.text"},"ts":1378863593000,"senderName":"jamesr_`","senderId":"jamesr_`@irc"},
{"content":{"body":"Interestingly, Acid3 itself renders differently in real IE7 and IE8 in IE7 standards mode.","msgtype":"m.text"},"ts":1378868520000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"Interestingly, Acid3 itself renders differently between real IE7 and IE8 in IE7 standards mode.","msgtype":"m.text"},"ts":1378868782000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"Using IE developer toolbar in IE7 with Acid3 open I was able to easily crash IE7 with a null pointer.","msgtype":"m.text"},"ts":1378868947000,"senderName":"Yuhong","senderId":"Yuhong@irc"},
{"content":{"body":"odinho: thanks, but I don't understand what you mean","msgtype":"m.text"},"ts":1378877502000,"senderName":"slartsa","senderId":"slartsa@irc"},
{"content":{"body":"annevk: ok i reviewed https://critic.hoppipolla.co.uk/r/300","msgtype":"m.text"},"ts":1378885352000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I don't find a definition of \"whitespace\" in http://dev.w3.org/csswg/mediaqueries4/","msgtype":"m.text"},"ts":1378887737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: ↑","msgtype":"m.text"},"ts":1378887751000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: look in css-syntax","msgtype":"m.text"},"ts":1378887777000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok","msgtype":"m.text"},"ts":1378887802000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but media queries should probably define its whitespace since they don't always come from a css file","msgtype":"m.text"},"ts":1378887813000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well it should also normatively reference some definition of whatever it means by it","msgtype":"m.text"},"ts":1378887884000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I find http://dev.w3.org/csswg/css-syntax/#whitespace-diagram","msgtype":"m.text"},"ts":1378887895000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and http://dev.w3.org/csswg/css-syntax/#newline-diagram","msgtype":"m.text"},"ts":1378887903000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"space, tabl","msgtype":"m.text"},"ts":1378887914000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1378887916000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"space, tab, \\n, \\r\\n, \\r, \\f","msgtype":"m.text"},"ts":1378887958000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: which matches the definition in the HTML spec of whitespace, right?","msgtype":"m.text"},"ts":1378887978000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I find that the current media-queries checker in the validator doesn't allow \\f","msgtype":"m.text"},"ts":1378888027000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh wait","msgtype":"m.text"},"ts":1378888052000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://dev.w3.org/csswg/css-syntax/#whitespace","msgtype":"m.text"},"ts":1378888060000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah that's the same","msgtype":"m.text"},"ts":1378888074000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.","msgtype":"m.text"},"ts":1378888075000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm, sorta","msgtype":"m.text"},"ts":1378888093000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://dev.w3.org/csswg/css-syntax/#newline","msgtype":"m.text"},"ts":1378888098000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition, as they are converted to U+000A LINE FEED during preprocessing.\"","msgtype":"m.text"},"ts":1378888108000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"question is what should happen with \\f when the string comes from CSSOM","msgtype":"m.text"},"ts":1378888122000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i'll file a bug on MQ","msgtype":"m.text"},"ts":1378888138000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1378888155000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MQ currently refers to CSS21 for its grammar","msgtype":"m.text"},"ts":1378888169000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1378888181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"S\t[ \\t\\r\\n\\f]+","msgtype":"m.text"},"ts":1378888211000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so i guess that makes it unambiguous","msgtype":"m.text"},"ts":1378888292000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I like that a lot better actually","msgtype":"m.text"},"ts":1378888306000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but this is something to keep in mind when css specs move to being defined in terms of css-syntax","msgtype":"m.text"},"ts":1378888553000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: I suppose it could link to http://www.w3.org/TR/CSS21/syndata.html#whitespace directly","msgtype":"m.text"},"ts":1378888632000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zcorpan: css-syntax-3’s pre-processing also applies to strings that come from CSSOM","msgtype":"m.text"},"ts":1378888665000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: cssom refers to MQ for parsing a MQ, which in turn doesn't mention css-syntax, so that's not clear","msgtype":"m.text"},"ts":1378889042000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"we also have the case of HTML's media=\"\" attribute","msgtype":"m.text"},"ts":1378889054000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#matches-the-environment also refers directly to MQ","msgtype":"m.text"},"ts":1378889117000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I mean if you’re using the tokenizer as defined in Level 3, the pre-processing always applies","msgtype":"m.text"},"ts":1378889402000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yeah sure","msgtype":"m.text"},"ts":1378889437000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hober, FYI https://wiki.mozilla.org/Standards/license","msgtype":"m.text"},"ts":1378890906000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Lots of things refer to 2.1 for grammar right now, because Syntax is just now hitting WD.","msgtype":"m.text"},"ts":1378891401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"slartsa: It works in Opera 12. The presto-based line of Opera :)","msgtype":"m.text"},"ts":1378891412000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"But you should interpret everything as if it was using Syntax, because that's what we're actually basing it all on.","msgtype":"m.text"},"ts":1378891416000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ok, good to know","msgtype":"m.text"},"ts":1378891490000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: so I have a minor issue in trying to automate testing of the validator, which is that if I test for U+000c being handled as whitespace, then we emit a warning saying, \"This document is not mappable to XML 1.0 without data loss due to U+000c which is not a legal XML 1.0 character.\"","msgtype":"m.text"},"ts":1378891744000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and I can suppress that by telling my test runner to ignore warnings, but then it ignores all warnings","msgtype":"m.text"},"ts":1378891808000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the warnings are something I want to test for too","msgtype":"m.text"},"ts":1378891829000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: this is checkin-needed right? https://bugzilla.mozilla.org/show_bug.cgi?id=910588","msgtype":"m.text"},"ts":1378891946000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I guess we need to add another class of test case, \"has warning\", along with \"not valid\" (has error) and \"valid\" (has no errors)","msgtype":"m.text"},"ts":1378892044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hsivonen: yes , checkin needed","msgtype":"m.text"},"ts":1378892082000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok","msgtype":"m.text"},"ts":1378892182000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"\"Some comments I made a long time ago:\" points to message between April and June this year :-)","msgtype":"m.text"},"ts":1378892870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I had realized that was going to affect View Source. I guess I should have noted it in the bug report. I wonder if there's anybody actually testing the View Source behavior.","msgtype":"m.text"},"ts":1378893150000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: OK to use your hg  user line for the generated C++ patch?","msgtype":"m.text"},"ts":1378896027000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yep, fine by me","msgtype":"m.text"},"ts":1378896128000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ok","msgtype":"m.text"},"ts":1378896152000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hmm, should URL.username and URL.password actually be settable?","msgtype":"m.text"},"ts":1378897979000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"abarth: ^^","msgtype":"m.text"},"ts":1378898009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it's fine","msgtype":"m.text"},"ts":1378898298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: maybe the validator could be configured to not whine about XML-mappability?","msgtype":"m.text"},"ts":1378898624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I thought I already had the test runner configured that way, actually. So I'm not sure why I'm seeing them.","msgtype":"m.text"},"ts":1378898993000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, I guess I will probably make the change to have the test runner recognize some files as being expected to cause warnings to be emitted intead of errors. Because it's useful to distinguish the diference.","msgtype":"m.text"},"ts":1378899070000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: you should really get some more sleep ;)","msgtype":"m.text"},"ts":1378902576000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: oooh wait, you're in Paris","msgtype":"m.text"},"ts":1378902581000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'm running into that problem you always seem to run into, how do I use http://dev.w3.org/csswg/selectors/ to do what I need?","msgtype":"m.text"},"ts":1378903097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: :-)","msgtype":"m.text"},"ts":1378903097000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which problem is that?","msgtype":"m.text"},"ts":1378903175000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I have a string, what parsing algorithm do I pass it to to get a selector object out? The algorithm needs to return failures for unresolved namespaces and other parsing errors.","msgtype":"m.text"},"ts":1378903218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: The next step is then using that selector object to match against a set of nodes. It's not clear what algorithm to use for that either, although the spec does seem to suggest to use \"scope-filtered selectors\" in that in some way because of the example I just read...","msgtype":"m.text"},"ts":1378903274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: that next step also needs to take the context object into account and discard it if it's not an Element, I guess","msgtype":"m.text"},"ts":1378903336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there is no explicit algorithms","msgtype":"m.text"},"ts":1378903342000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: so I just need to monkey patch my way out of this mess?","msgtype":"m.text"},"ts":1378903363000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but the first step is parse per the grammar http://dev.w3.org/csswg/selectors/#grammar and check that the result is not invalid http://dev.w3.org/csswg/selectors/#invalid","msgtype":"m.text"},"ts":1378903369000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"MikeSmith: what OS do you deploy the Nu Validator on?","msgtype":"m.text"},"ts":1378903396000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: do you deploy on Java 7?","msgtype":"m.text"},"ts":1378903409000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: how does that deal with namespaces?","msgtype":"m.text"},"ts":1378903412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: and why is there no algorithm for parsing? that's kinda fundamental, no?","msgtype":"m.text"},"ts":1378903450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: we have lots of contexts that need selector parsing...","msgtype":"m.text"},"ts":1378903473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there is a grammar","msgtype":"m.text"},"ts":1378903540000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"orly?","msgtype":"m.text"},"ts":1378903555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://dev.w3.org/csswg/selectors/#grammar","msgtype":"m.text"},"ts":1378903566000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yeah you already gave that link","msgtype":"m.text"},"ts":1378903573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1378903577000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Again, that's not parsing, doesn't return anything, doesn't describe what it means what you get back when you follow it, etc.","msgtype":"m.text"},"ts":1378903600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doesn't deal with resolving namespaces","msgtype":"m.text"},"ts":1378903605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, the \"invalid\" concept includes undeclared namespace prefixes","msgtype":"m.text"},"ts":1378903621000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"You  can't say \"grammar\" and expect magic","msgtype":"m.text"},"ts":1378903629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not everything has to be written in imperative style","msgtype":"m.text"},"ts":1378903683000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: yes, but it doesn't define if the namespace prefixes need to be declared ahead of parse time or not, etc.","msgtype":"m.text"},"ts":1378903691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: but you need clear hooks between specs, I don't really care how you define what gets implemented as an algorithm","msgtype":"m.text"},"ts":1378903735000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: but if you don't define an algorithm, you need to be clear on how things work","msgtype":"m.text"},"ts":1378903747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: you can't just say, \"there a grammar\" and there's rules for \"invalid\" and you can derive the parsing algorithm from that","msgtype":"m.text"},"ts":1378903766000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, this spec should have better-defined hooks for other specs","msgtype":"m.text"},"ts":1378903798000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"beyond that, I don’t see what’s the problem","msgtype":"m.text"},"ts":1378903819000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Well, does parsing a selector fail if namespaces are not (yet) declared?","msgtype":"m.text"},"ts":1378903836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I.e. does parsing need a map of namespace declarations, or is that an after the fact thing on top of the output. That affects the implementation and affects designs around selectors.","msgtype":"m.text"},"ts":1378903892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://dev.w3.org/csswg/selectors/#namespaces says that you need a (possibly empty) set of namespace prefix declarations","msgtype":"m.text"},"ts":1378903898000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yes, but it doesn't say when.","msgtype":"m.text"},"ts":1378903906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that depends on what uses selectors. For stylesheets, http://www.w3.org/TR/css3-namespace/ defines that @namespace rules must be before style rules","msgtype":"m.text"},"ts":1378903984000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"because having to go back and change the meaning of previous rules would suck","msgtype":"m.text"},"ts":1378903998000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"So you're saying the parse operation itself is independent of namespaces?","msgtype":"m.text"},"ts":1378904017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Selectors APIs defines that the set is always empty, I believe","msgtype":"m.text"},"ts":1378904025000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"in practice, you get namespace prefix declarations before parsing","msgtype":"m.text"},"ts":1378904057000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Well that depends on what API I design","msgtype":"m.text"},"ts":1378904075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The specification doesn't seem to constrain me either way","msgtype":"m.text"},"ts":1378904090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean http://www.w3.org/TR/selectors-api/","msgtype":"m.text"},"ts":1378904091000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I don't","msgtype":"m.text"},"ts":1378904104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so if you’re making a new thing that uses selectors, you need to define what ns declarations apply to any given selector","msgtype":"m.text"},"ts":1378904134000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Again, I could do that after parse has completed it seems...","msgtype":"m.text"},"ts":1378904149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because you don't define what parsing means, it's up to me","msgtype":"m.text"},"ts":1378904157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I think that would be a problem for implementations, which is why I bring this up...","msgtype":"m.text"},"ts":1378904189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, if you want to separate the parsing into a concrete syntax tree per the grammar and then replace ns prefixes with URLs in a later step, you could do that","msgtype":"m.text"},"ts":1378904220000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I believe that’s an implementation detail","msgtype":"m.text"},"ts":1378904228000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":":-(","msgtype":"m.text"},"ts":1378904308000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there is no model of \"what you get\" after parsing a selector because they’re basically black boxes. On the platform you can only observe their string serialization","msgtype":"m.text"},"ts":1378904329000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"That sounds like really bad systems design. I wonder if TabAtkins agrees with this...","msgtype":"m.text"},"ts":1378904330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we’re in the middle in the F2F and he’s talking about gradient interpolation, but I’ll point him to this later","msgtype":"m.text"},"ts":1378904390000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"If you define a syntax, whether the result object is a black box you can do things with or not, defining \"parse X using namespace map Y\" seems like a good thing to do.","msgtype":"m.text"},"ts":1378904462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And then you can ask the opaque object to query /tree/ using /scope/ or some such...","msgtype":"m.text"},"ts":1378904498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, we could do that","msgtype":"m.text"},"ts":1378904511000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"We might even want to expose a Selector as a thing in script at some point I suppose... Hmm","msgtype":"m.text"},"ts":1378904604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe","msgtype":"m.text"},"ts":1378904616000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"for now all you get is .selectorText","msgtype":"m.text"},"ts":1378904623000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"In my experience when implementing Selectors, the data structure you want to represent them varies *a lot* based on the matching strategy","msgtype":"m.text"},"ts":1378904676000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: I can add algo hooks for converting string to selector, and matching selector against a set of nodes in a tree.","msgtype":"m.text"},"ts":1378904709000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sweet","msgtype":"m.text"},"ts":1378904725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: interesting","msgtype":"m.text"},"ts":1378904738000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: I wasn't thinking of exposing the data structure anymore than an opaque Selector object, perhaps with serialization","msgtype":"m.text"},"ts":1378904758000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: but if it depends on matching, that might not be good","msgtype":"m.text"},"ts":1378904767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I'll add something to the DOM standard for querySelector / querySelectorAll for now and then you can fill in the boxes I leave open and then we patch 'm up","msgtype":"m.text"},"ts":1378904821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, all you need is a \"selector\" thinger, no internal structure.  That's perfectly fine to expose.","msgtype":"m.text"},"ts":1378904878000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If I set up a new VM for running Validator.nu, which Ubuntu version should I use? The latest are the LTS?","msgtype":"m.text"},"ts":1378904889000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"But there is still an internal structure insofar as it's a complex selector list or whatever.","msgtype":"m.text"},"ts":1378904895000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, exposing a Selector object that does do anything but its serialization is not very useful","msgtype":"m.text"},"ts":1378904899000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"The canonical supported version of OpenJDK in the LTS 6. in the latest, it's 7.","msgtype":"m.text"},"ts":1378904918000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: It's used by the \"match a selector against some nodes\" algo that Anne will be doing","msgtype":"m.text"},"ts":1378904962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do you mean a spec concept, or a JS object?","msgtype":"m.text"},"ts":1378904983000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"It's just convenient to have a spec concept for \"selector\" rather than having to cart around a string and constantly say \"interpret as a selector...\".","msgtype":"m.text"},"ts":1378905001000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Spec concept only.","msgtype":"m.text"},"ts":1378905005000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I suspect.","msgtype":"m.text"},"ts":1378905015000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: ?","msgtype":"m.text"},"ts":1378905017000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"then yes, +1 on spec concepts","msgtype":"m.text"},"ts":1378905036000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"TabAtkins: spec concept for sure, I was thinking maybe a JS object at some point","msgtype":"m.text"},"ts":1378905043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, if you can find a use for it, I'm not against a JS object for it.","msgtype":"m.text"},"ts":1378905060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: we've had requests for that too, but if as SimonSapin says you want different data structures that might not be good to have","msgtype":"m.text"},"ts":1378905062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"requests for what exactly?","msgtype":"m.text"},"ts":1378905079000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"hsivonen: w3c vnu backends I deploy on are all running java7","msgtype":"m.text"},"ts":1378905092000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: but yeah, for most specs with a syntax having string -> object and object -> string is nice :)","msgtype":"m.text"},"ts":1378905096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: compile a string into a selector and then use it; similar to regular expressions","msgtype":"m.text"},"ts":1378905125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: selector.test(node) or some such","msgtype":"m.text"},"ts":1378905141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: ok. thanks","msgtype":"m.text"},"ts":1378905150000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: we're adding the opposite now, which is okay I suppose, but somewhat ugly","msgtype":"m.text"},"ts":1378905158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(node.matches())","msgtype":"m.text"},"ts":1378905169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if that JS object can be used in Selectors APIs, then yes it’s useful","msgtype":"m.text"},"ts":1378905177000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Selectors API is going away","msgtype":"m.text"},"ts":1378905188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"uh, ok","msgtype":"m.text"},"ts":1378905249000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: but what about your point about wanting to parse it into different structures depending on usage?","msgtype":"m.text"},"ts":1378905270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or whatever its replacement is","msgtype":"m.text"},"ts":1378905274000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(I would totally prefer selector.matches(node) to node.matches(selector) fwiw)","msgtype":"m.text"},"ts":1378905306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: noted","msgtype":"m.text"},"ts":1378905317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: OS on all is Debian stable, 64 bit Intel","msgtype":"m.text"},"ts":1378905321000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Only for aesthetic reasons though","msgtype":"m.text"},"ts":1378905334000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: depending on SimonSapin's answer to that question I might propose that on public-webapps","msgtype":"m.text"},"ts":1378905335000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if you want to expose the parts of a selector such as combinators, pseudo-classes, etc","msgtype":"m.text"},"ts":1378905389000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"there are many ways to organize these in data structures","msgtype":"m.text"},"ts":1378905431000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: the point is that if you parse it into an object, you lose context of what it might be used for","msgtype":"m.text"},"ts":1378905434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: OK.","msgtype":"m.text"},"ts":1378905461000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: does Debian already have OpenJDK 7 as a system package?","msgtype":"m.text"},"ts":1378905482000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: in particular, you remark was \"In my experience when implementing Selectors, the data structure you want to represent them varies *a lot* based on the matching strategy\"","msgtype":"m.text"},"ts":1378905483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1378905497000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: if you have a single object without context, it seems that is still a problem","msgtype":"m.text"},"ts":1378905508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"when adding an optimization to make matching faster, you may want to change the internal representation of selectors to make that easier","msgtype":"m.text"},"ts":1378905537000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But is \"strategy\" a constant for a given implementation?","msgtype":"m.text"},"ts":1378905550000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"SimonSapin: that's a different comment","msgtype":"m.text"},"ts":1378905560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or is it something that varies between e.g. CSS and qSA","msgtype":"m.text"},"ts":1378905568000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that’s a more specific example of what you quoted","msgtype":"m.text"},"ts":1378905583000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"*sigh*","msgtype":"m.text"},"ts":1378905596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think annevk is worried about the latter but not the former","msgtype":"m.text"},"ts":1378905601000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or, maybe that's not a good example of the latter","msgtype":"m.text"},"ts":1378905626000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Changing the data structure overall is indeed fine. That's why you have it as opaque object.","msgtype":"m.text"},"ts":1378905630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so we agree on that much","msgtype":"m.text"},"ts":1378905656000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But if the data structure needs to be different between sel.matches(node) and sel.matchAgainst(tree), there's a problem","msgtype":"m.text"},"ts":1378905661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doh","msgtype":"m.text"},"ts":1378905668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but then if that object is opaque, why is it useful?","msgtype":"m.text"},"ts":1378905672000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: regular expression objects are opaque too...","msgtype":"m.text"},"ts":1378905688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, you have a matching API on it","msgtype":"m.text"},"ts":1378905691000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I was missing that part","msgtype":"m.text"},"ts":1378905699000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"So I think the idea is that it would be like re.compile in python","msgtype":"m.text"},"ts":1378905742000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"var s = new Selector(\".foo > bar\")","msgtype":"m.text"},"ts":1378905766000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Why else would you have an object...","msgtype":"m.text"},"ts":1378905774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s.matches(node)","msgtype":"m.text"},"ts":1378905778000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"-> bool","msgtype":"m.text"},"ts":1378905783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I believe Debian does have Java 7 as a package, but not sure. I did not do the Java installs on those hosts. I think Yves did, so I'll ask him.","msgtype":"m.text"},"ts":1378905942000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so, yeah, a matching API with \"pre-compiled\" objects would be good","msgtype":"m.text"},"ts":1378905954000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"though I don’t know how much it really affects performance in practice","msgtype":"m.text"},"ts":1378905971000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"MikeSmith: no need. I'll go with the latest non-LTS Ubuntu","msgtype":"m.text"},"ts":1378906298000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"SimonSapin: Well it's not just a performance thing","msgtype":"m.text"},"ts":1378906335000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I quite like the idea of inverting the API so that instead of everything hanging off node you have a selector that you can run against various objects","msgtype":"m.text"},"ts":1378906381000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: what’s the difference with using strings, other than perf?","msgtype":"m.text"},"ts":1378906398000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Others probably disagree though","msgtype":"m.text"},"ts":1378906408000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"SimonSapin: YOu can't have the API this way around and strings","msgtype":"m.text"},"ts":1378906436000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: you're now my default-cc for a bunch of things, I'm gonna assume you'll let me know when it gets annoying","msgtype":"m.text"},"ts":1378906448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\".foo > bar\".matches(node) seems like all kind of wrong","msgtype":"m.text"},"ts":1378906472000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: does cssom view define when an element establishes a scrolling box?","msgtype":"m.text"},"ts":1378906499000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"jgraham: making selectors first-class citizens makes a lot of sense to me","msgtype":"m.text"},"ts":1378906514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hober: no. known bug","msgtype":"m.text"},"ts":1378906517000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1378906525000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"jgraham: it's also less work for me :)","msgtype":"m.text"},"ts":1378906527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hober: zcorpan: CSS ought to define that...","msgtype":"m.text"},"ts":1378906555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hober: zcorpan: CSSOM is just there to expose the properties of the box and manipulate it, not to define when it exists","msgtype":"m.text"},"ts":1378906577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, i don't really care where the definition is so long as there's one i can xref","msgtype":"m.text"},"ts":1378906647000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: dude, you're on the CSS WG, it's your job to care, and I shouldn't have to :)","msgtype":"m.text"},"ts":1378906677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: Selector(\"foo\").match(node) vs. Selector.match(\"foo\", node), meh.","msgtype":"m.text"},"ts":1378906714000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"i mean, i do care from a \"specs should be well organized\" perspective, but i care less about that than that it gets written down somewhere. we can always move the definition to somewhere more appropriate","msgtype":"m.text"},"ts":1378906717000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"I once had a proposal to be able to construct new slectors like that, though it was being considered for some other reason.","msgtype":"m.text"},"ts":1378906734000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"zcorpan: looks like you can reference \"flow root\" in css-box","msgtype":"m.text"},"ts":1378906985000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: ? i don't edit css-box","msgtype":"m.text"},"ts":1378907025000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh do you mean for scrolling box?","msgtype":"m.text"},"ts":1378907050000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: i mean the term \"scrolling box\" in cssom-view can reference that","msgtype":"m.text"},"ts":1378907058000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1378907064000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"although it looks like the definition could use a lot of love","msgtype":"m.text"},"ts":1378907077000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"it's not clear that it's the same as scrolling box","msgtype":"m.text"},"ts":1378907152000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"float:left causes flow root but not scrolling box","msgtype":"m.text"},"ts":1378907176000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"you need overflow:auto or something","msgtype":"m.text"},"ts":1378907201000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: time to chat for a bit?","msgtype":"m.text"},"ts":1378907534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in a few minutes","msgtype":"m.text"},"ts":1378907552000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: element.querySelector(): tree is element's node document, subject is element; document.querySelector(); tree is document, subject is document; documentfragment.querySelector(); tree is documentfragment, subject is documentfragment?","msgtype":"m.text"},"ts":1378907617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: and where I said subject, I meant scoping root","msgtype":"m.text"},"ts":1378907704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hober: http://dev.w3.org/csswg/css-box/#scrolling-mechanism looks closer","msgtype":"m.text"},"ts":1378907817000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Actually, element's node document is wrong if element's ancestor is not document.","msgtype":"m.text"},"ts":1378907997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah yeah, you want element's root","msgtype":"m.text"},"ts":1378908009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And root also works for Document and DocumentFragment","msgtype":"m.text"},"ts":1378908022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"brilliant","msgtype":"m.text"},"ts":1378908026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: yeah, that doesn't handle overflow:hidden (which can be scrolled by script but has no scrolling mechanism)","msgtype":"m.text"},"ts":1378908867000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: good point","msgtype":"m.text"},"ts":1378908901000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk, I'm back","msgtype":"m.text"},"ts":1378908935000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hober: so has overflow and either overflow:hidden or has a scrolling mechanism","msgtype":"m.text"},"ts":1378908969000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: TabAtkins: http://dom.spec.whatwg.org/#evaluate-a-selectors-string","msgtype":"m.text"},"ts":1378909124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ms^^","msgtype":"m.text"},"ts":1378909137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, meant that for Ms2ger, who is MIA","msgtype":"m.text"},"ts":1378909146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: also question, the idea with find/select is that instead of the tree being the context object's root, it's the context object itself, and the selector is a relative selector, right?","msgtype":"m.text"},"ts":1378909459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tree is always the root element. It has to be since find can match elements anywhere in the document. Find basically just has an implied :scope that matches the context object.","msgtype":"m.text"},"ts":1378909642000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"oh okay, so tree is still the same, it's just that parsing is different?","msgtype":"m.text"},"ts":1378909707000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"From memory, I think it works like this. element.find(\"+p\") implies :scope+p","msgtype":"m.text"},"ts":1378909741000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"yes, parsing is different. I will review what I'd written in here. I can take a look later tonight. I have to leave in about 2 minutes. https://github.com/lachlanhunt/dom/blob/master/dom-core.html","msgtype":"m.text"},"ts":1378909819000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: it's fine I guess, I'll figure it out, seems like a few things are gonna change anyway per public-webapps discussion","msgtype":"m.text"},"ts":1378909868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1378909939000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I should catch up with that stuff. Feel free to do whatever you think is best.","msgtype":"m.text"},"ts":1378909954000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1378909974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, btw, the name select isn't usable. It clashes with an existing method. I'll check which one it is later.","msgtype":"m.text"},"ts":1378910392000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"bye","msgtype":"m.text"},"ts":1378910397000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"annevk: Difference between find and querySelector is solely:","msgtype":"m.text"},"ts":1378911492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"a) find allows relative selectors (starts with a combinator)","msgtype":"m.text"},"ts":1378911505000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right, that's parsing","msgtype":"m.text"},"ts":1378911538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd appreciate review of http://dom.spec.whatwg.org/#evaluate-a-selectors-string btw","msgtype":"m.text"},"ts":1378911564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"b) find doesn't do any scoping, while qSA does scope-filtering.  (But the effect of relative selectors means that it kinda looks like scoping.)","msgtype":"m.text"},"ts":1378911573000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah interesting. And c) has a much better return value...","msgtype":"m.text"},"ts":1378911598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1378911605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And yeah, i'll review in a bit.  I'm still minuting...","msgtype":"m.text"},"ts":1378911620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"poor TabAtkins","msgtype":"m.text"},"ts":1378911629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ugh these stream proposals are getting out of hand","msgtype":"m.text"},"ts":1378911668000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: a decade ago someone would have just shipped something and we'd be stuck with that","msgtype":"m.text"},"ts":1378911777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: count your blessings","msgtype":"m.text"},"ts":1378911784000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Now we will spend a year iterating the design, someone will just ship something, it will turn out to be crappy, and we will be stuck with that","msgtype":"m.text"},"ts":1378911814000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: was more a comment on quality than quantity, but yeah, i know what you mean","msgtype":"m.text"},"ts":1378911844000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"going to have to just take isaacs's proposed minimal API, slap one or two promise-returning sugar methods on top of it, and see how that goes over","msgtype":"m.text"},"ts":1378911874000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"will write up after i finish these damn jsconf eu slides","msgtype":"m.text"},"ts":1378911881000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Man, everyone is going to Berlin?","msgtype":"m.text"},"ts":1378911895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe next year...","msgtype":"m.text"},"ts":1378911912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: for some reason your matchesSelector email doesn't show up in my inbox, I guess there's delayed delivery for you too :/","msgtype":"m.text"},"ts":1378911965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"darobin: but seems like there'd be transition cost either way","msgtype":"m.text"},"ts":1378911989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, it seems there's some weirdness","msgtype":"m.text"},"ts":1378911993000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"oh I'm not against the idea, I think I like it — I was just pointing out that there are implementations","msgtype":"m.text"},"ts":1378912019000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"while it seems cool conceptually, i am not sure I would ever use a Selectors object...","msgtype":"m.text"},"ts":1378912073000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: hence my \"I think I like it\"","msgtype":"m.text"},"ts":1378912090000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I'm still thinking about which contexts I'd actually use it in","msgtype":"m.text"},"ts":1378912100000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"If you wouldn't use that, would you use matches()?","msgtype":"m.text"},"ts":1378912327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They're identical, except one has less parsing over time...","msgtype":"m.text"},"ts":1378912340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And puts less cruft on Element","msgtype":"m.text"},"ts":1378912354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah I use the jQuery equivalent (.is) all the time","msgtype":"m.text"},"ts":1378912377000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I meant, in a world where both were available, I can never see myself doing `(new Selectors(\"x\")).matches(el)` over `el.matches(\"x\")`, so I need to think of cases where caching the selector is important, and I can't think of any right now.","msgtype":"m.text"},"ts":1378912477000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah understood. Hmm...","msgtype":"m.text"},"ts":1378912497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".matches() takes relative selectors too?","msgtype":"m.text"},"ts":1378912572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So <input> has select(), but it doesn't take an argument...","msgtype":"m.text"},"ts":1378913244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh boy :P","msgtype":"m.text"},"ts":1378913256000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i humbly put forth query/queryAll, which are not as good, but no such issues i would hope","msgtype":"m.text"},"ts":1378913277000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That might work","msgtype":"m.text"},"ts":1378913303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm did the ascii-art get dropped from grid layout?","msgtype":"m.text"},"ts":1378913806000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: No, of course not.  Why would you think so?","msgtype":"m.text"},"ts":1378914631000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: was reading some links tweeted by @CSSWG and saw a different syntax being used. Probably additive then, not instead of.","msgtype":"m.text"},"ts":1378914678000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah, grid-template-areas is the ascii-art property.","msgtype":"m.text"},"ts":1378914704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wishes it were just called \"ascii-art\"","msgtype":"m.emote"},"ts":1378914995000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"jgraham: Can you rebase r/287?","msgtype":"m.text"},"ts":1378919126000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Should be in-place to ca4041f2e005748559189af27c92c1db73e76159","msgtype":"m.text"},"ts":1378919146000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Okay, managed to do the rebase, now can't enable tracking","msgtype":"m.text"},"ts":1378919318000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: And now it's working again suddenly. Weird.","msgtype":"m.text"},"ts":1378919342000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic_: in 'promises-unwrapping', the .race() method in inspired by what? A+? previous DOM spec?","msgtype":"m.text"},"ts":1378921049000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"Domenic_: ... I wonder why it is designed to reject if one of the promises is rejected","msgtype":"m.text"},"ts":1378921139000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"http://larry.masinter.net/1307multipart-form-data.pdf https://www.w3.org/Bugs/Public/show_bug.cgi?id=16909#c8","msgtype":"m.text"},"ts":1378924723000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"do we really still not have a cross-browser mousewheel story?","msgtype":"m.text"},"ts":1378934913000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: my chrome passes http://www.hixie.ch/tests/adhoc/dom/level0/window/security/001.html","msgtype":"m.text"},"ts":1378934934000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yes? are we expecting otherwise?","msgtype":"m.text"},"ts":1378934981000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: you claimed otherwise in https://www.w3.org/Bugs/Public/show_bug.cgi?id=23218#c1","msgtype":"m.text"},"ts":1378935048000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh the pass condition is backwards","msgtype":"m.text"},"ts":1378935111000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that test is checking something else","msgtype":"m.text"},"ts":1378935135000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"my bad","msgtype":"m.text"},"ts":1378935136000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i changed it after filign the bug","msgtype":"m.text"},"ts":1378935140000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"forgot i'd mentioned it in the bug","msgtype":"m.text"},"ts":1378935144000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1378935158000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"gsnedders: Yeah, I think the caching gets screwed up or something","msgtype":"m.text"},"ts":1378935215000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie_: it's not even interoperable across browser versions, heh","msgtype":"m.text"},"ts":1378935351000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(iirc event.detail is the amount of the scroll, and since mousewheels snap to lines it's some constant N times the number of lines--but that constant isn't very constant)","msgtype":"m.text"},"ts":1378935583000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wheelDelta, not detail, but yeah","msgtype":"m.text"},"ts":1378935600000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's event.detail somewhere, or at least I have code that tries both","msgtype":"m.text"},"ts":1378935761000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh yeah it's .detail on DOMMouseScroll (firefox), .wheelDelta on mousewheel (webkit)","msgtype":"m.text"},"ts":1378935937000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and for added fun, not only are their scales completely different--their signs are opposite","msgtype":"m.text"},"ts":1378935972000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Just call it \"natural scrolling\" and sell it as a feature","msgtype":"m.text"},"ts":1378936096000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zing","msgtype":"m.text"},"ts":1378936258000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: i'm confused by \"fetch\" step 7, the one that queues tasks. what are the tasks? are these the same as the tasks to process the data as it is downloaded from HTML?","msgtype":"m.text"},"ts":1378942277000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"are they fired for incomplete headers? just data?","msgtype":"m.text"},"ts":1378942290000,"senderName":"Hixie_","senderId":"Hixie_@irc"}
]