[
{"content":{"body":"what means sandbox attribute with value of ?","msgtype":"m.text"},"ts":1376353770000,"senderName":"Igor^","senderId":"Igor^@irc"},
{"content":{"body":"man we still haven't figured out html parsing? I thought that was the grand triumph of the 00s!","msgtype":"m.text"},"ts":1376356284000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"some browsers does not have user agent?","msgtype":"m.text"},"ts":1376356671000,"senderName":"Igor^^^","senderId":"Igor^^^@irc"},
{"content":{"body":"external css reduce page open time?","msgtype":"m.text"},"ts":1376369344000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"Man, why are we suddenly getting so many people asking basic webdev questions lately?","msgtype":"m.text"},"ts":1376370341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins - insufficiently googleable FAQs? E.g. on wikis?","msgtype":"m.text"},"ts":1376370611000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: A lot of these are things you can look up or learn yourself.","msgtype":"m.text"},"ts":1376370633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"like LMGTFY style?","msgtype":"m.text"},"ts":1376370641000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"maybe this channel is advertised as a support forum somewhere ;)","msgtype":"m.text"},"ts":1376370660000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"That actually seems halfway likely - several of the people that have showed up seem to have similar varieties of poor English.","msgtype":"m.text"},"ts":1376370695000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: maybe you didn't do anything special for title, but the patch that was written to bring Gecko up to spec had new code for <title>","msgtype":"m.text"},"ts":1376373622000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"odd","msgtype":"m.text"},"ts":1376373661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wonder why","msgtype":"m.text"},"ts":1376373666000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'm not in any way objecting to not supporting <frame>, FWIW","msgtype":"m.text"},"ts":1376373669000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"ok good :-)","msgtype":"m.text"},"ts":1376373675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, <title> is special","msgtype":"m.text"},"ts":1376373695000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i don't recall it being particularly special for <template> purposes, though","msgtype":"m.text"},"ts":1376373710000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: parses like in \"in head\", so you at least have to notice and do the \"in head\" stuff","msgtype":"m.text"},"ts":1376373745000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"is there new code for all the other in-head elements too?","msgtype":"m.text"},"ts":1376373888000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the other \"in head\" elements were already covered","msgtype":"m.text"},"ts":1376379335000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-style/2013Aug/0168.html is this something that css filters can do?","msgtype":"m.text"},"ts":1376382010000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: re: surrogates, anything in particular you’re working on?","msgtype":"m.text"},"ts":1376382809000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: we've been having some office debates about Servo and Rust, strings in CSS, how Unicode 2.0 fucked it all up, and then JavaScript some more by copying Java and not fixing it in time","msgtype":"m.text"},"ts":1376382927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Basically, I don't see a way out of the array of sixteen-bit integers madness...","msgtype":"m.text"},"ts":1376382973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1376382982000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"has horrible http://mathiasbynens.be/notes/css-escapes#other flashbacks","msgtype":"m.emote"},"ts":1376383001000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: yeah, SimonSapin will fix that, presumably by not letting in surrogates via escapes, but you can still get them in CSS via JavaScript, so CSS' backend will have the sixteen-bit integers regardless","msgtype":"m.text"},"ts":1376383099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(And having a different backend for CSS and its DOM doesn't seem all that beneficial anyway, so just as well.)","msgtype":"m.text"},"ts":1376383135000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: \"Since there is currently no way to escape non-BMP symbols in a cross-browser fashion…\" this is also fixed now","msgtype":"m.text"},"ts":1376384314000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"now that webkit supports a single hex number above FFFF","msgtype":"m.text"},"ts":1376384347000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: you can always encode codepoints (not scalar values) in whatever way","msgtype":"m.text"},"ts":1376384438000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: anything else seems unlikely to have good perf","msgtype":"m.text"},"ts":1376385190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: also, code points*","msgtype":"m.text"},"ts":1376385204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: I know, I was the one who discovered and filed that bug","msgtype":"m.text"},"ts":1376387054000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"SimonSapin: point is, on mobile a lot of older WebKits are in use, which still have the issue","msgtype":"m.text"},"ts":1376387071000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Hmm, I wonder how hard https://bugzilla.mozilla.org/show_bug.cgi?id=888093 would be to implement. They'd be extremely useful.","msgtype":"m.text"},"ts":1376387673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Depends how intrinsically difficult they are, I guess. There seems to be a fair amount of accidential complexity in fromCharCode, but not an unmanageable amount","msgtype":"m.text"},"ts":1376388222000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: there are already polyfills for these written in ES5","msgtype":"m.text"},"ts":1376388469000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: sure","msgtype":"m.text"},"ts":1376388482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: not a fan of polyfills","msgtype":"m.text"},"ts":1376388490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: I thought I reviewed some file api tests?","msgtype":"m.text"},"ts":1376392046000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh, right","msgtype":"m.text"},"ts":1376392068000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Someone needs to fix your comments","msgtype":"m.text"},"ts":1376392079000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1376392085000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which I guess means me","msgtype":"m.text"},"ts":1376392096000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well for the Moz. submission at least","msgtype":"m.text"},"ts":1376392108000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And the ms2ger submission","msgtype":"m.text"},"ts":1376392126000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Maybe zcorpan has time to fix https://critic.hoppipolla.co.uk/r/32 ?","msgtype":"m.text"},"ts":1376392148000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't think there's anything big there","msgtype":"m.text"},"ts":1376392158000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm, writing a parser for this URL test format is more complicated than anticipated","msgtype":"m.text"},"ts":1376392217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://critic.hoppipolla.co.uk/r/238 still needs review though","msgtype":"m.text"},"ts":1376392235000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"maybe I should've taken more shortcuts","msgtype":"m.text"},"ts":1376392235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Which language?","msgtype":"m.text"},"ts":1376392246000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Javascript?","msgtype":"m.text"},"ts":1376392254000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1376392256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what's complicating?","msgtype":"m.text"},"ts":1376392369000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Well if you have specific questions, I am happy to help","msgtype":"m.text"},"ts":1376392379000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it's gonna be fine, it's just more work than I thought it'd be","msgtype":"m.text"},"ts":1376392399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not that I will necessarily be much help :)","msgtype":"m.text"},"ts":1376392400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"was mostly curious","msgtype":"m.emote"},"ts":1376392430000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: just the sheer number of states needed to do it on a per-character basis","msgtype":"m.text"},"ts":1376392486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: and thinking of all the implications","msgtype":"m.text"},"ts":1376392495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, isn't it relatively simple?","msgtype":"m.text"},"ts":1376392555000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You split on whitespace","msgtype":"m.text"},"ts":1376392588000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"that's cheating :)","msgtype":"m.text"},"ts":1376392606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then for each token containing a \":\", split on that","msgtype":"m.text"},"ts":1376392609000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Then replace escapes","msgtype":"m.text"},"ts":1376392615000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"but okay, maybe I should do that","msgtype":"m.text"},"ts":1376392622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then pass the resulting tokens to a parser","msgtype":"m.text"},"ts":1376392629000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I was trying to write something that didn't do double or triple passes","msgtype":"m.text"},"ts":1376392641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well you could do it one character at a time ofc, but I think in real life people usually reach for regexps for tokenisation","msgtype":"m.text"},"ts":1376392664000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"dude what is this?","msgtype":"m.text"},"ts":1376392678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unreal life?","msgtype":"m.text"},"ts":1376392698000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Mario Kart?","msgtype":"m.text"},"ts":1376392699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1376392704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"trololol: \"XML 1.1 may have issues, but it's definitely not DOA.\"","msgtype":"m.text"},"ts":1376392712000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Well I mean your local neighborhood js engine probably has a fancy hand-written parser that works one character at a time","msgtype":"m.text"},"ts":1376392744000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is it DBA? :-)","msgtype":"m.text"},"ts":1376392750000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and HTML requires it","msgtype":"m.text"},"ts":1376392754000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But lots of other things don't and don't","msgtype":"m.text"},"ts":1376392762000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hsivonen: dude that bug... I don't even","msgtype":"m.text"},"ts":1376392776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fortunately dbaron was there to save the day","msgtype":"m.text"},"ts":1376392797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think DOA might imply that it ever A","msgtype":"m.text"},"ts":1376392807000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I succumbed into 386 and explained why 5th ed doesn't make sense","msgtype":"m.text"},"ts":1376393419000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I ran across https://blog.mozilla.org/dherman/2011/12/01/now-thats-a-nice-stache/","msgtype":"m.text"},"ts":1376395058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is that still happening?","msgtype":"m.text"},"ts":1376395062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nsid?","msgtype":"m.text"},"ts":1376395175000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1376395179000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Looks like it might obsolete the whole \"return this\" drive...","msgtype":"m.text"},"ts":1376395210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably not harmonious","msgtype":"m.text"},"ts":1376395211000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What is nsid?","msgtype":"m.text"},"ts":1376395233000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nvm that :)","msgtype":"m.text"},"ts":1376395268000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen: congrats on killing the old parser","msgtype":"m.text"},"ts":1376397262000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I thought it still did about:blank","msgtype":"m.text"},"ts":1376397401000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: thanks, but mrbkap wrote the latest patch","msgtype":"m.text"},"ts":1376397444000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: it still does","msgtype":"m.text"},"ts":1376397449000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: now with less code","msgtype":"m.text"},"ts":1376397454000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: so yeah, this is not very fast","msgtype":"m.text"},"ts":1376397535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and I'm only splitting at this point","msgtype":"m.text"},"ts":1376397560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: oh, so it's not completely dead yet?","msgtype":"m.text"},"ts":1376397761000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: not completely dead. like a zombie.","msgtype":"m.text"},"ts":1376397822000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't think I like the idea of page-defined JSON.parse getting used by XHR","msgtype":"m.text"},"ts":1376397894000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: that's not the intent","msgtype":"m.text"},"ts":1376398265000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: there's an open bug on this","msgtype":"m.text"},"ts":1376398271000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1376398284000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"When iterating over a string in JavaScript. Is there an easier way to do this:","msgtype":"m.text"},"ts":1376399102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"String.fromCharCode(Number.parseInt([input[++i], input[++i], input[++i], input[++i]].join(\"\"), 16))","msgtype":"m.text"},"ts":1376399103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"input[++i] + input[++i] + input[++i] + input[++i]? :)","msgtype":"m.text"},"ts":1376399140000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wonders if we should reference XML 4th ed explicitly in specs","msgtype":"m.emote"},"ts":1376399172000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"XML is kinda like IDNA. Nobody really wants to make a decision...","msgtype":"m.text"},"ts":1376399296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: good point, not sure why I did the array thing","msgtype":"m.text"},"ts":1376399337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems like hsivonen does want to make a decision :)","msgtype":"m.text"},"ts":1376399401000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hmm, those lines look different to me","msgtype":"m.text"},"ts":1376399704000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What am I missing?","msgtype":"m.text"},"ts":1376399710000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I have a hard time imagining that str.split(\" \") is slow","msgtype":"m.text"},"ts":1376399756000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is it ok to put aside inside section and give it float right?","msgtype":"m.text"},"ts":1376400190000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"accessPoint, yes. Why wouldn't it be?","msgtype":"m.text"},"ts":1376400317000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"annevk, is the input variable in your code a string or an array? Surely, you could use input.substr(i, 4) if it's a string, or input.slice(i, i+4) if input is an array","msgtype":"m.text"},"ts":1376400563000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1376400696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"made it","msgtype":"m.text"},"ts":1376400698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"String.fromCharCode(Number.parseInt(input.substr(++i, i += 3), 16))","msgtype":"m.text"},"ts":1376400699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But why...","msgtype":"m.text"},"ts":1376400730000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1376400736000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"Ms2ger: slightly shorter line and presumably faster?","msgtype":"m.text"},"ts":1376400750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Don't presume before profiling :)","msgtype":"m.text"},"ts":1376400772000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Also somewhat less readable","msgtype":"m.text"},"ts":1376400780000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I wouldn't assume that's faster","msgtype":"m.text"},"ts":1376400783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I think it's more readable :p","msgtype":"m.text"},"ts":1376400797000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, compared to String.fromCharCode(Number.parseInt(input.substr(i, i + 4), 16)); i += 4?","msgtype":"m.text"},"ts":1376400847000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"that's not the same","msgtype":"m.text"},"ts":1376400873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's pre-increment, not post","msgtype":"m.text"},"ts":1376400905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yet another reason to write it out","msgtype":"m.text"},"ts":1376400907000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nah","msgtype":"m.text"},"ts":1376400911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, it's your code, but don't expect me to read it :)","msgtype":"m.text"},"ts":1376400931000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"using Ms2ger's method, it has to increment i, lookup the character at the index of the array, a new string and repeat 3 more times, and then finally concatenate each of the 4 strings into one. That seems far less efficient and less readable than simply using the native substr() method and incrementing i twice.","msgtype":"m.text"},"ts":1376401021000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"also, annevk note that substr takes a (start, length) as parameters, not (indexA, indexB), so your i+=3 will grow larger depending on what i is. If you want to do it that way, use substring()","msgtype":"m.text"},"ts":1376401165000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ooh","msgtype":"m.text"},"ts":1376401191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder how that even worked for me then","msgtype":"m.text"},"ts":1376401203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ooh, because parseInt() is presumably silly","msgtype":"m.text"},"ts":1376401229000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Lachy: Looking up the method could be slow, or calling could be slow, depending on the implementation. Incrementing is fast, so the tradeoff is possible method call overhead vs possible extra allocations","msgtype":"m.text"},"ts":1376401648000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I agree the allocations might lose, but I would profile before I asserted it with confidence","msgtype":"m.text"},"ts":1376401718000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"heycam|away: why can't [NewObject] be used on attributes? is it bad API design? CSSOM does that for element.usedStyle et al","msgtype":"m.text"},"ts":1376401798000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yes it is","msgtype":"m.text"},"ts":1376401813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: you don't want obj.prop != obj.prop","msgtype":"m.text"},"ts":1376401845000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1376401857000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, had to write","msgtype":"m.text"},"ts":1376402012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"output += String.fromCharCode(Number.parseInt(input.substring(++i, (i += 3) + 1), 16))","msgtype":"m.text"},"ts":1376402013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it becomes less readable by the minute","msgtype":"m.text"},"ts":1376402019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll go back to what I had before :)","msgtype":"m.text"},"ts":1376402040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Clearly you need a wrapper around your strings","msgtype":"m.text"},"ts":1376402162000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"String.fromCharCode(Number.parseInt(input.pop(4)))","msgtype":"m.text"},"ts":1376402182000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You need a wrapper around your wrapper input.pop(4).int_to_string()","msgtype":"m.text"},"ts":1376402232000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/int/hex/","msgtype":"m.text"},"ts":1376402245000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1376402252000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1376402772000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you need a wrapper factory factory","msgtype":"m.text"},"ts":1376402873000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=22939 - opinions on naming of the methods? can they be the same? element.usedStyle()","msgtype":"m.text"},"ts":1376403431000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: isn't CSSStyleDeclaration live? Or are you introducing a static variant?","msgtype":"m.text"},"ts":1376404561000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's not live for getComputedStyle or the GetStyleUtils variants","msgtype":"m.text"},"ts":1376404606000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: it's live for element.style","msgtype":"m.text"},"ts":1376404614000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1376404625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTML typically uses get*","msgtype":"m.text"},"ts":1376404648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"getRawComputedStyle is a bit long","msgtype":"m.text"},"ts":1376404769000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham, want to merge https://github.com/w3c/web-platform-tests/pull/133 ?","msgtype":"m.text"},"ts":1376404865000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Done","msgtype":"m.text"},"ts":1376404914000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I always mis it when people review stuff on github","msgtype":"m.text"},"ts":1376404930000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1376404933000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: when iterating over the string, do you need UTF-16 code units, or code points?","msgtype":"m.text"},"ts":1376405456000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: former, it's input to JavaScript","msgtype":"m.text"},"ts":1376405473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: that is, we hand these tests to <a>.href, <area>.href, new URL, etc.","msgtype":"m.text"},"ts":1376405721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"once I've written all that out :-)","msgtype":"m.text"},"ts":1376405729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Quick parsing question: When a <!-- is encountered within a <script>, are the \"<!--\" chars consumed as script content or does exit the script block & become an html comment?","msgtype":"m.text"},"ts":1376406671000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or does it exit*","msgtype":"m.text"},"ts":1376406687000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the behaviour of <!-- in script is... complex","msgtype":"m.text"},"ts":1376406736000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, I couldn't get my head around the tokenizer","msgtype":"m.text"},"ts":1376406877000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Essentially it's not a HTML comment","msgtype":"m.text"},"ts":1376407016000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But <!-- acts like a line comment in ECMAScript","msgtype":"m.text"},"ts":1376407031000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For HTML it has a special purpose in that it makes </script> not exit <script>, right?","msgtype":"m.text"},"ts":1376407057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But there is some extra sublety I have apparently erased from my memory","msgtype":"m.text"},"ts":1376407066000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is not sure that's up-to-date","msgtype":"m.emote"},"ts":1376407076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: test e.g. <script><!--<script></script>--></script> in http://software.hixie.ch/utilities/js/live-dom-viewer/","msgtype":"m.text"},"ts":1376407144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah, right","msgtype":"m.text"},"ts":1376407173000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The --> is not required though... I should read the parser again...","msgtype":"m.text"},"ts":1376407216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"iirc, the problem was that people would document.write(\"<!--<script></script>\") or something","msgtype":"m.text"},"ts":1376407225000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The live DOM viewer is what the browser does though, right, not what the spec says","msgtype":"m.text"},"ts":1376407265000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"or does it use its own parser?","msgtype":"m.text"},"ts":1376407272000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What the browser does","msgtype":"m.text"},"ts":1376407287000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But browsers are pretty close to the spec","msgtype":"m.text"},"ts":1376407299000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(If you find discrepancies, file bugs :))","msgtype":"m.text"},"ts":1376407318000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Found a difference, but it looks like it's down to the resource scanner rather than the actual parser. No worries.","msgtype":"m.text"},"ts":1376407468000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"holy shit there's many script data states","msgtype":"m.text"},"ts":1376407493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There'd better be","msgtype":"m.text"},"ts":1376407502000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm not gonna study that","msgtype":"m.text"},"ts":1376407646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: so uh... according to my performance.now() comparison, running the URLTestParser only takes up to 7ms...","msgtype":"m.text"},"ts":1376409041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doesn't sound very slow :)","msgtype":"m.text"},"ts":1376409067000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"maybe I should test it again with substring","msgtype":"m.text"},"ts":1376409068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but it feels like a second","msgtype":"m.text"},"ts":1376409074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe the js console is slow","msgtype":"m.text"},"ts":1376409082000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"maybe it's the rest of Gecko that's lagging behind","msgtype":"m.text"},"ts":1376409083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: when nobody else is making a decision, just make one and see what happens :-)","msgtype":"m.text"},"ts":1376409196000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not seeing the difference with substring(), not really surprising I guess given how fast it goes overall","msgtype":"m.text"},"ts":1376409197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I've sort of made one, IDNA 2003 is the way to go I think (changing from that is not compatible), but registrars are not doing that (they are breaking compat sometimes, and sometimes just do something)","msgtype":"m.text"},"ts":1376409285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"registrars are likely to follow the IETF, which broke compat as well (although they have various interesting ways of claiming they didn't)","msgtype":"m.text"},"ts":1376409324000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"->FUCKED<-","msgtype":"m.text"},"ts":1376409348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well people aren't going to buy names that don't work, so i wouldn't worry about the registrars so much","msgtype":"m.text"},"ts":1376409969000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Guess I can do that after this test suite stuff is sorted","msgtype":"m.text"},"ts":1376410430000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"seems like something that'd need solving anyway for a fresh implementation (I've been thinking of writing the URL parser for Servo)","msgtype":"m.text"},"ts":1376410489000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would suggest getting it into rust-the-language directly","msgtype":"m.emote"},"ts":1376410556000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: you mean standard library?","msgtype":"m.text"},"ts":1376410645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1376410650000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Sounds reasonable","msgtype":"m.text"},"ts":1376410656000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mentioned it in passing in #rust a while back and there didn't seem strong objections at the time","msgtype":"m.text"},"ts":1376410677000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mkay, I guess I'll try sort that out when I get to it","msgtype":"m.text"},"ts":1376410702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: Hixie: hmm so yeah, should it be [Global=Window,Worker] or [Exposed=Window]","msgtype":"m.text"},"ts":1376410732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: Hixie: maybe having both makes the most sense, [Global] for use by global objects and setting names you can use to refer to them and [Exposed] for non-global objects that are exposed on them","msgtype":"m.text"},"ts":1376410767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"[Global=Window,Worker] seems rather confusing with [Global] meaning \"this is a global object\"","msgtype":"m.text"},"ts":1376410777000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heycam|away: Hixie: so e.g. [Global=Worker,SharedWorker] interface SharedWorkerGlobalScope {} or some such","msgtype":"m.text"},"ts":1376410828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: Hixie: and [Global=Worker,DedicatedWorker] for the other one","msgtype":"m.text"},"ts":1376410857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: yeah","msgtype":"m.text"},"ts":1376410873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Doing assignments inside of a function's arguments is the devil.","msgtype":"m.text"},"ts":1376410916000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: heh, I was just toying around with the language","msgtype":"m.text"},"ts":1376410957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"I'm working on exposing Chrome's paint events to the DOM so that sites can report visual metrics back as part of their RUM.  I know there is a lot of controversy around paint events but it would be great if we could at least define how they could be exposed should a browser vendor decide to expose them.\"","msgtype":"m.text"},"ts":1376414230000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":" /sigh","msgtype":"m.text"},"ts":1376414444000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"heycam|away: annevk: I'm fine with just [Global] on the global interface and naming them by interface name on the other objects, fwiw","msgtype":"m.text"},"ts":1376414575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: is that for srs?","msgtype":"m.text"},"ts":1376415218000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: Yes","msgtype":"m.text"},"ts":1376415255000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"egad","msgtype":"m.text"},"ts":1376415265000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"idly wonders what RUM means","msgtype":"m.emote"},"ts":1376415283000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-web-perf/2013Aug/0040.html","msgtype":"m.text"},"ts":1376415307000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Runtime U-something Metrics, perhaps","msgtype":"m.text"},"ts":1376415347000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"UA?","msgtype":"m.text"},"ts":1376415352000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: With the caveat that I know nothing about that particular effort, I can sympathize. For IndexedDB there are lots of questions we want to ask about performance and behavior. We can get aggregated, anonymized stats via opt-in mechanisms, but we know site developers who use dev tools to get fine grained detail like event timing want to get that same sort of data en masse from \"the field\", even though it's not data we should expose via an","msgtype":"m.text"},"ts":1376416770000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"y APIs. We're brainstorming how without exposing any web surface area (optional site-specific extension, maybe?)","msgtype":"m.text"},"ts":1376416770000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ms2ger: maybe point whoever was talking about those paint events my way?","msgtype":"m.text"},"ts":1376416839000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"seems like devtools in the browser should serve the need just as well, to me","msgtype":"m.text"},"ts":1376417166000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"how can I align img to center without using align attribute and without text-align center?","msgtype":"m.text"},"ts":1376417215000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"Abspos?","msgtype":"m.text"},"ts":1376417268000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Flexbox?","msgtype":"m.text"},"ts":1376417271000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jwalden: RUM is real user metrics.. so it's all about collecting data from the field, where things are a bit more wild than in a CI setup using some devtools APIs","msgtype":"m.text"},"ts":1376417470000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"that said, i don't think that exposing individual paint events may be useful for RUM. some of the metrics like what's exposed in https://twitter.com/ChromiumDev/status/357914389132746752/photo/1 may be better","msgtype":"m.text"},"ts":1376417552000,"senderName":"paul_irish","senderId":"paul_irish@irc"},
{"content":{"body":"where can I put html comments and where I can't - this isn't written in the w3c html spec","msgtype":"m.text"},"ts":1376418695000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"accessPoint: in the whatwg spec, it's in the syntax section near the end","msgtype":"m.text"},"ts":1376420049000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"accessPoint: basic answer is that you can put them between other elements","msgtype":"m.text"},"ts":1376420063000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"accessPoint: with exceptions for elements that only accept text like <textarea>, <title>, <script>, <style>","msgtype":"m.text"},"ts":1376420081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, can I put it inside elements and before doctype and before html element and in the head element and in the title element?","msgtype":"m.text"},"ts":1376420509000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"wait I will check the WHATWG spec","msgtype":"m.text"},"ts":1376420524000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"sorry for annoying I was reading W3C nighty spec","msgtype":"m.text"},"ts":1376420536000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"Hixie, there isn't answer in the web dev spec edition :S","msgtype":"m.text"},"ts":1376421033000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"can you or someone answer me please I didn't got help elsewhere I think noone knows for sure","msgtype":"m.text"},"ts":1376421049000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"uh, getComputedStyle *is* live","msgtype":"m.text"},"ts":1376421190000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"accessPoint: http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#writing","msgtype":"m.text"},"ts":1376422308000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"accessPoint: http://developers.whatwg.org/syntax.html#syntax has that also","msgtype":"m.text"},"ts":1376422389000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"accessPoint: so, inside elements: depends on the element, before doctype: yes, before html: yes, in the head: yes, in the title: no","msgtype":"m.text"},"ts":1376422569000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"accessPoint: sorry, was out to lunch","msgtype":"m.text"},"ts":1376422586000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"accessPoint: what zcorpan said","msgtype":"m.text"},"ts":1376422590000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan, thanks Hixie no problem man thank yo utoo thank you guys keep up the good work appreciate everything!","msgtype":"m.text"},"ts":1376422989000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"accessPoint: <title><!----></title> isn't invalid, but it doesn't contain a comment, it just contains text. similarly to how it works in <script>","msgtype":"m.text"},"ts":1376423064000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok thanks zcorpan","msgtype":"m.text"},"ts":1376423121000,"senderName":"accessPoint","senderId":"accessPoint@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1376423150000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: do we need to differentiate between dedicated and shared workers for [Exposed]?","msgtype":"m.text"},"ts":1376425618000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"only rarely","msgtype":"m.text"},"ts":1376425858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but yes","msgtype":"m.text"},"ts":1376425859000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. you can't get a DedicatedWorkerGlobalScope in a shared worker","msgtype":"m.text"},"ts":1376425869000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but DedicatedWorkerGlobalScope is the global, so it doesn't make sense for it to use [Exposed] i think","msgtype":"m.text"},"ts":1376426793000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.webkit.org/blog/2910/improved-support-for-high-resolution-displays-with-the-srcset-image-attribute/","msgtype":"m.text"},"ts":1376426798000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: oh you're saying anything with [Global] should just not be exposed unless it's the global? lgtm","msgtype":"m.text"},"ts":1376426829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: in that case yeah, we should have Global name its kind","msgtype":"m.text"},"ts":1376426836000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: i didn't say that :-) i'm wondering if it makes sense for an API not defined in the Worker spec itself to expose something only in dedicated workers or only in shared workers","msgtype":"m.text"},"ts":1376426936000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i don't know of any so far, off-hand","msgtype":"m.text"},"ts":1376426962000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok. so then we probably don't need to provide that ability in the idl syntax","msgtype":"m.text"},"ts":1376427079000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i can't believe i didn't provide an event for <details> and nobody has made a case for adding one","msgtype":"m.text"},"ts":1376427192000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"onopen/onclose event, i mean","msgtype":"m.text"},"ts":1376427199000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(onclick is useless since it fires before it opens, so you don't know the state)","msgtype":"m.text"},"ts":1376427227000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"also, firefox doesn't yet support <details>?!","msgtype":"m.text"},"ts":1376427396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so if [Global] uses the name of the interface, and we put it on WorkerGlobalScope and Window, specs can use [Exposed=Window,WorkerGlobalScope]. which is longer than [Exposed=Window,Worker]. so it might be worth it to use [Global=Worker] on WorkerGlobalScope instead","msgtype":"m.text"},"ts":1376427479000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: iirc, there were various things about <details> that made it hard to implement in a sane way, at least in presto, so it was punted. i'm not sure what the situation is for gecko. but maybe we should look into the issues and possibly change the spec","msgtype":"m.text"},"ts":1376427721000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i wasn't involved in that myself so i'm not sure what the issues were exactly","msgtype":"m.text"},"ts":1376427756000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Lachy: ^","msgtype":"m.text"},"ts":1376427788000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what's the difference between w3c-srcset and whatwg-srcset?","msgtype":"m.text"},"ts":1376427895000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"This is an automated redaction of the relevant portions of that document.\" http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/ says","msgtype":"m.text"},"ts":1376428027000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"whatwg-srcset is one step closer to what has been proofread.","msgtype":"m.text"},"ts":1376428240000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wouldn't the [Global] go on SharedWorkerGlobalScope and DedicatedWorkerGlobalScope?","msgtype":"m.text"},"ts":1376428269000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"busy busy busy","msgtype":"m.text"},"ts":1376429419000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Hixie: why?","msgtype":"m.text"},"ts":1376429551000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"because they're the globals","msgtype":"m.text"},"ts":1376429570000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they inherit from WorkerGlobalScope","msgtype":"m.text"},"ts":1376429631000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"HTMLElement.prototype instanceof Node == true? o_O","msgtype":"m.text"},"ts":1376431195000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that entire thread is baffling","msgtype":"m.text"},"ts":1376431441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's pretty standard... HTMLElement.prototype = Object.create(Element.prototype); Element.prototype = Object.create(Node.prototype); ... that's how JS inheritance works...","msgtype":"m.text"},"ts":1376432605000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah, your prototype won't be instanceof your leaf class, but it should be instanceof any superclasses.","msgtype":"m.text"},"ts":1376433569000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"interesting definition of \"instanceof\"","msgtype":"m.text"},"ts":1376435490000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The definition is \"take the prototype of the RHS, then walk the prototype chain of the LHS until you either find a match or hit null/cycle\"","msgtype":"m.text"},"ts":1376435599000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Prototypal inheritance is different from classical inheritance.","msgtype":"m.text"},"ts":1376435626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i would expect \"instanceof\" to tell me if something is an instance of something, and it's not clear to me that a prototype of an element is an instance of Node","msgtype":"m.text"},"ts":1376436155000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's because you don't intuitively understand what prototypal inheritance does.  It's very natural that your prototype is an instance of your superclass.","msgtype":"m.text"},"ts":1376437146000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The two basic patterns are very similar - one's the \"examplar\" pattern, where the prototype is some \"typical\" instance of the superclass.","msgtype":"m.text"},"ts":1376437207000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The other is where the prototype chains are actually separate objects from the instances, and so don't have any per-instance state.","msgtype":"m.text"},"ts":1376437227000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But regardless, yes, you are instanceof your class, your prototype is instanceof your superclass, etc.","msgtype":"m.text"},"ts":1376437258000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Domenic's example was the second type - using Object.create to just make fresh objects with the right prototype, rather than going through the constructor to achieve the same thing and possibly getting per-instance state added to you.)","msgtype":"m.text"},"ts":1376437326000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You really *shouldn't* be type-checking your prototypes (it doesn't make sense if you're not using examplars, and even then doesn't make very much sense), but if you do, that's the answer you get.","msgtype":"m.text"},"ts":1376437402000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]