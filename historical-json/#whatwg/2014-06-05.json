[
{"content":{"body":"what happens to those?","msgtype":"m.text"},"ts":1401926877000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"ah, generate parse errors","msgtype":"m.text"},"ts":1401926933000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"shouldn't be too bad if you're already in the error handling state to check back for what the error was","msgtype":"m.text"},"ts":1401926953000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"handwaves wildly","msgtype":"m.emote"},"ts":1401926972000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"jamesr_: But you need to know you're parsing for document.write","msgtype":"m.text"},"ts":1401927888000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jamesr_: On the other hand, they can only occur when you're in the document.write case…","msgtype":"m.text"},"ts":1401927908000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmmm…","msgtype":"m.text"},"ts":1401927911000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"maybe this can be done more reasonably than I thought…","msgtype":"m.text"},"ts":1401927916000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"do you mean real lone surrogates, or temporary lone surrogates that get completed with the next document.write() call (which I thought worked, though I don't think I've tested it myself)","msgtype":"m.text"},"ts":1401928112000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"They do work. Really I want stats for both, but if nothing has lone surrogates, then there aren't temporary lone surrogates.","msgtype":"m.text"},"ts":1401928339000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wonders if there's any code out there that works in chunks and would have temporary lone surrogates more-or-less at random","msgtype":"m.emote"},"ts":1401928905000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that's been the theory","msgtype":"m.text"},"ts":1401928921000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wonders what sort of thinking would motivate the sort of code that might split surrogate pairs across chunks on the client-side ...","msgtype":"m.emote"},"ts":1401929042000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"pretty easy if you're getting data over the network in fixed-sized blocks, i just don't know why you'd do that with document.write","msgtype":"m.text"},"ts":1401929079000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yeah, I thought of that possible motivation","msgtype":"m.text"},"ts":1401929260000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"wrong test? or bug? http://www.w3c-test.org/html/webappapis/scripting/processing-model-2/compile-error-data-url.html","msgtype":"m.text"},"ts":1401933940000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"probably both","msgtype":"m.text"},"ts":1401933986000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well nightly comes closer to passing it than chrome stable","msgtype":"m.text"},"ts":1401934171000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the answers to your questions lie in the specification :-)","msgtype":"m.text"},"ts":1401934348000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"the specification\"","msgtype":"m.text"},"ts":1401934495000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"the\"","msgtype":"m.text"},"ts":1401934501000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but, for what it's worth, the DOM specs on the w3c don't seem to cover onerror in any significant detail, and neither the webapps spec nor fetch seem to say anything about the \"content\" of a data-url being url encoded","msgtype":"m.text"},"ts":1401934636000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hm might have found a bug in a test. jgraham where is the best place to report a bug.","msgtype":"m.text"},"ts":1401934697000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"the whatwg html standard defines onerror.","msgtype":"m.text"},"ts":1401934723000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://www.w3c-test.org/html/semantics/grouping-content/the-blockquote-element/grouping-blockquote.sub.html","msgtype":"m.text"},"ts":1401934734000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"second test","msgtype":"m.text"},"ts":1401934739000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"i guess the url spec says to percent encode things, maybe","msgtype":"m.text"},"ts":1401934766000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"{actual: \"blehblah\", resolved: document.location.protocol + \"//\" + document.location.host + \"/blehblah\"},","msgtype":"m.text"},"ts":1401934772000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"the document.location.path is missing.","msgtype":"m.text"},"ts":1401934784000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"s/path/pathname/","msgtype":"m.text"},"ts":1401934993000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"the definition in the html spec seems idetical to the webapps definition, which doesn't specify whether or not source should be urlencoded","msgtype":"m.text"},"ts":1401935003000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the webapps definition includes how to process a <script> element?!","msgtype":"m.text"},"ts":1401936427000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"holy cow, i got a tree constructor test all the way through my parser to \"stop parsing\"","msgtype":"m.text"},"ts":1401937785000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"of course it promptly crashed because the output verifier isn't implemented yet...","msgtype":"m.text"},"ts":1401937802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1401939252000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what order are the attributes in tree constructor tests?","msgtype":"m.text"},"ts":1401939260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, it does say \"sorted lexicographically\"","msgtype":"m.text"},"ts":1401939458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good good","msgtype":"m.text"},"ts":1401939460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I forgot what reason you're implementing a parse for","msgtype":"m.text"},"ts":1401941819000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*parser","msgtype":"m.text"},"ts":1401941824000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for my new pipeline","msgtype":"m.text"},"ts":1401941919000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pretends to imagine trying to parse HTML in silicon","msgtype":"m.emote"},"ts":1401941956000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"woot, my parser passes one tree constructor test!","msgtype":"m.text"},"ts":1401942509000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"html5 parsing <font face…><form…> markup </form></font> https://github.com/webcompat/web-bugs/issues/74","msgtype":"m.text"},"ts":1401946319000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"intredasting. commented","msgtype":"m.text"},"ts":1401948586000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(\"<font face…><form…> markup </form></font>\" by itself is fine)","msgtype":"m.text"},"ts":1401948624000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: AAA disassociating form controls broke the above site","msgtype":"m.text"},"ts":1401948658000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thanks for the comment","msgtype":"m.text"},"ts":1401949970000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"I tried with any inline elements and indeed it kicks in every time.","msgtype":"m.text"},"ts":1401950019000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"karlcow: my knee-jerk reaction is that this is probably uncommon enough (since it hasn't come up until now) that it's not worth fixing in the spec","msgtype":"m.text"},"ts":1401950051000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"karlcow: similar to \"<table><form><tr><td><input>\" in innerHTML (which has come up but not so often)","msgtype":"m.text"},"ts":1401950074000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah… I wonder if it's worth fixing instead of trying to convince the Webmaster to fix his Web site.","msgtype":"m.text"},"ts":1401950110000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"Specifically when it will soon not work anywhere","msgtype":"m.text"},"ts":1401950122000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"they maintained the site enough to notice that there was a problem and add big fat warnings about it","msgtype":"m.text"},"ts":1401950153000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"they could have fixed the markup instead","msgtype":"m.text"},"ts":1401950169000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(note that AAA doesn't trigger for any inline, just a handful of elements)","msgtype":"m.text"},"ts":1401950211000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"karlcow: On the web-platform-test github page, perhaps? I'm not really sure","msgtype":"m.text"},"ts":1401956038000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I have some plans on merging XMLHttpRequest into Fetch as they are intertwined. Is there some way to put all of XMLHttpRequest's history into Fetch whenever I get around to that?","msgtype":"m.text"},"ts":1401956190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes","msgtype":"m.text"},"ts":1401956419000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: do you intend for the fetch API to replace xhr in devs' toolboxes?","msgtype":"m.text"},"ts":1401956502000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah I guess","msgtype":"m.text"},"ts":1401956530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: at some point I'll stop adding features to XHR","msgtype":"m.text"},"ts":1401956552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: great","msgtype":"m.text"},"ts":1401956662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so I understand the editorial reason for merging the two specs, but my gut reaction is that it's sending the wrong message wrt to the above.","msgtype":"m.text"},"ts":1401956673000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I don't think that's going to be a problem","msgtype":"m.text"},"ts":1401956786000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: we define legacy features in tandem with new features all the time","msgtype":"m.text"},"ts":1401956799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: thanks. https://github.com/w3c/web-platform-tests/issues/1042","msgtype":"m.text"},"ts":1401956814000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"annevk: yeah, I guess if those are marked clearly.","msgtype":"m.text"},"ts":1401956923000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I'd just name the section \"Legacy XMLHttpRequest API\"","msgtype":"m.text"},"ts":1401958197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: <3","msgtype":"m.text"},"ts":1401958214000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: how polyfillable is fetch?","msgtype":"m.text"},"ts":1401958244000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: large parts can be polyfilled, but without proxy server you can't do \"No CORS\"","msgtype":"m.text"},"ts":1401958309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: been chatting to abarth. Seems like we used to still render an <img crossorigin> that failed its CORS check, but it couldn't be used on a canvas. This sounds sensible and the same behaviour we'd want for the SW cache. Apparently Jonas fought for <img crossorigin> to break on CORS failure, any idea why?","msgtype":"m.text"},"ts":1401960461000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: dunno","msgtype":"m.text"},"ts":1401960462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no worries, will bug him about it later","msgtype":"m.text"},"ts":1401960478000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: did he say anything about CORS without opt-in?","msgtype":"m.text"},"ts":1401962943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: he said it was a stupid idea and I should be ashamed of myself","msgtype":"m.text"},"ts":1401962968000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(he didn't quite put it like that)","msgtype":"m.text"},"ts":1401962977000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1401963078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so the remaining issues are Response.prototype.type; a better definition of multipart/form-data so we can go both ways (not high priority for me at the moment); finding out the best representation of headers both close-to-the-metal and high-level API-wise; and actually defining all the various things","msgtype":"m.text"},"ts":1401963223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and then for service workers we need to figure out what we need to do with Response objects (or their corresponding responses) coming from service workers","msgtype":"m.text"},"ts":1401963291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm still keen on .type reflecting the filtering. So \"basic\", \"cors\", \"opaque\" \"error\"","msgtype":"m.text"},"ts":1401964455000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah I think it makes sense to expose that. Hopefully the security guys are paying attention","msgtype":"m.text"},"ts":1401964488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we already expose the difference between \"opaque\" and \"error\" though the promise resolve/reject","msgtype":"m.text"},"ts":1401964572000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I guess image load events do the same, although only for images","msgtype":"m.text"},"ts":1401964600000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah and also through load/onerror in <img> and such","msgtype":"m.text"},"ts":1401964603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SNAP","msgtype":"m.text"},"ts":1401964608000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I win","msgtype":"m.text"},"ts":1401964609000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: heh","msgtype":"m.text"},"ts":1401964616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if SW declines to handle a request and that request ends up doing HTTP auth (due to 401) the subsequent request will also not go through SW","msgtype":"m.text"},"ts":1401964674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: see the text under 401 in HTTP fetch","msgtype":"m.text"},"ts":1401964681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that seems like the right thing","msgtype":"m.text"},"ts":1401964692000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, that feels right","msgtype":"m.text"},"ts":1401964985000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I would have liked if the people working on HTTP were a bit more opinionated on what a good header representation makes","msgtype":"m.text"},"ts":1401965255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You'd think that if you worked on HTTP for a good decade you'd know what you want","msgtype":"m.text"},"ts":1401965278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ask ChrisMorgan in ircmo #rust","msgtype":"m.text"},"ts":1401965452000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: he's not around","msgtype":"m.text"},"ts":1401965885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, right","msgtype":"m.text"},"ts":1401965902000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"He's somewhere in Australia, IIRC","msgtype":"m.text"},"ts":1401965911000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Just like mnot, that doesn't work","msgtype":"m.text"},"ts":1401965983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lost the conversation about making data url handling inconsistent","msgtype":"m.emote"},"ts":1401966072000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think it was in webapps","msgtype":"m.text"},"ts":1401966079000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I moved it to WHATWG","msgtype":"m.text"},"ts":1401966094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, there it is","msgtype":"m.text"},"ts":1401966112000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ms2ger: is he just working on an HTTP library or he has extensive knowledge about the compat issues and why browser and potentially proxy implementations are weird?","msgtype":"m.text"},"ts":1401966434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi people. Who can help with adding a meta tag in http://wiki.whatwg.org/wiki/MetaExtensions","msgtype":"m.text"},"ts":1401968769000,"senderName":"Witget","senderId":"Witget@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1401968772000,"senderName":"Witget","senderId":"Witget@irc"},
{"content":{"body":"Witget: pm me a desired username and email","msgtype":"m.text"},"ts":1401970344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: https://critic.hoppipolla.co.uk/r/1739","msgtype":"m.text"},"ts":1401971783000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"JakeA: I guess if you do Response.redirect() the resulting Response object should have a type that's \"redirect\"? Seems fine to me","msgtype":"m.text"},"ts":1401974830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just not if it's a network redirect","msgtype":"m.text"},"ts":1401974842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think it needs it. It'd just be \"basic\"","msgtype":"m.text"},"ts":1401975444000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: it's just a factory that sets the headers","msgtype":"m.text"},"ts":1401975481000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hmm, I guess it would be a bit annoying to define it accurately","msgtype":"m.text"},"ts":1401975646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll kill redirect for now","msgtype":"m.text"},"ts":1401975704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/287 makes me want to kill the * thing again","msgtype":"m.text"},"ts":1401975790000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: exact match should win I think","msgtype":"m.text"},"ts":1401975849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it is somewhat confusing though","msgtype":"m.text"},"ts":1401975863000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so /foo beats /fo* and /foo*? I agree it makes most sense. I just don't know how useful single path matches are vs the complication they bring","msgtype":"m.text"},"ts":1401975932000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I've tried to get Alex to drop them in the past","msgtype":"m.text"},"ts":1401975991000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1401976069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was in favor of starting out with origin-only","msgtype":"m.text"},"ts":1401976077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I like scope, it's been useful in github pages during my testing","msgtype":"m.text"},"ts":1401976130000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: do you make sure to make a copy of Request/Response when you store them in the database?","msgtype":"m.text"},"ts":1401976629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems like we need to support structured clones","msgtype":"m.text"},"ts":1401976638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, they should be structured cloneable","msgtype":"m.text"},"ts":1401976700000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"darobin: what specs manipulate JSON?","msgtype":"m.text"},"ts":1401977482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JSON forms, JSON-LD, manifest","msgtype":"m.text"},"ts":1401977503000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"just off the top of my head","msgtype":"m.text"},"ts":1401977508000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"I wouldn't be surprised if we saw more showing up now and then","msgtype":"m.text"},"ts":1401977525000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: oh, mostly vaporware :p","msgtype":"m.text"},"ts":1401977527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"huhu","msgtype":"m.text"},"ts":1401977531000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"darobin: that bug was about a parsed representation btw, not serialized","msgtype":"m.text"},"ts":1401977547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: precisely","msgtype":"m.text"},"ts":1401977555000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"JakeA: defined redirect(), except for one thing, the url of the new object","msgtype":"m.text"},"ts":1401978574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we haven't really discussed how to handle urls for synthetic responses yet","msgtype":"m.text"},"ts":1401978595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, once we use a parsed URL for scheme data, is the current string-based origin extraction sufficient? It’s what implementations do right now.","msgtype":"m.text"},"ts":1401978636000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: is it? afaik Chrome uses a tuple for origin","msgtype":"m.text"},"ts":1401978661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: not a single string","msgtype":"m.text"},"ts":1401978665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: e.g. to determine if something is a secure origin we'd look at the scheme of the origin only, for that you'd need to parse it","msgtype":"m.text"},"ts":1401978696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, but you can extract scheme from the string.","msgtype":"m.text"},"ts":1401978720000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Chrome’s implementation seems to “tag” a blob URL with an origin, serialized as a string.","msgtype":"m.text"},"ts":1401978740000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: there's an alternative way of doing this of course, which is that I check that windows's associated document's origin serialized + \"/\" is a substring for the blob URL thingie","msgtype":"m.text"},"ts":1401978746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: then you don't have to extract","msgtype":"m.text"},"ts":1401978757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What is response.url used for when it comes to constructed responses?","msgtype":"m.text"},"ts":1401978758000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: dunno","msgtype":"m.text"},"ts":1401978770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think it's redundant so can be null","msgtype":"m.text"},"ts":1401978784000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so I fetch an image with CORS from http://www.google.com/spoofinggoogle","msgtype":"m.text"},"ts":1401978818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the SW replies with a custom response","msgtype":"m.text"},"ts":1401978834000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: is that URL now associated with a safe response somehow? might be bad?","msgtype":"m.text"},"ts":1401978857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't really sure","msgtype":"m.emote"},"ts":1401978861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, Chrome uses a string, but tuples are themselves extractable from it: blob:http%3A//www.w3.org/3fb1659b-1352-40b0-a029-ce91536696ea","msgtype":"m.text"},"ts":1401978924000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk: I think it's fine. The SW could also respondWith(fetch('/local.png'))","msgtype":"m.text"},"ts":1401978937000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"^ the “/“ separates a UUID from the origin","msgtype":"m.text"},"ts":1401978941000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: how do you know it uses a string?","msgtype":"m.text"},"ts":1401978958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So it isn’t quite a tuple.","msgtype":"m.text"},"ts":1401978958000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk: You can shoot yourself in the foot if you want, but I don't think it's harmful to anyone else","msgtype":"m.text"},"ts":1401978961000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Blob URLs *are* strings; seems like origins were implicit but we’ve now made them explicit by appending them to a string.","msgtype":"m.text"},"ts":1401979483000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: I understand that you have a string representation of an origin, we were talking about extracting the origin for internal use","msgtype":"m.text"},"ts":1401979525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: what is the origin of a blob URL you navigate to?","msgtype":"m.text"},"ts":1401979568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: would extracting a string (generated by the Origin Spec’s Unicode Serialization of an Origin algo.) be insufficient? Internally tuples can be generated from the string.","msgtype":"m.text"},"ts":1401979591000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk: I’m sorry to say that I don’t have much experience in the practical nastinesses of how proxies and such behave. My background—not a terribly long one either, by the way, I’m only 22, though I’ve worked with the web for just on half my life now—is more in web application development.","msgtype":"m.text"},"ts":1401979619000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"hey ChrisMorgan","msgtype":"m.text"},"ts":1401979651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: the relevant issue is tracked here https://github.com/slightlyoff/ServiceWorker/issues/300","msgtype":"m.text"},"ts":1401979663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just had strong opinions on things like header representation, which led me to working in Rust for the past year or so, doing strongly typed HTTP and such.","msgtype":"m.text"},"ts":1401979665000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: please be sure to read the referenced Gecko code as it might put some constrains on us","msgtype":"m.text"},"ts":1401979698000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, the Unicode Serialized Origin is what’s nested in the blob: URL. Extracting it is a matter of string parsing. Tuple generation, if necessary for same origin comparision, can be done safely, since the emiter methods emit a safe string.","msgtype":"m.text"},"ts":1401979723000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"So I’m not sure recursive parsing is useful.","msgtype":"m.text"},"ts":1401979745000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: if \"an origin\" is a tuple, you can't just set it to a string","msgtype":"m.text"},"ts":1401979769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I know of Guile and intarweb, two Scheme things that use strongly typed headers, and Spray for Scala.","msgtype":"m.text"},"ts":1401979784000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"annevk, would you prefer to do recursive pasing?","msgtype":"m.text"},"ts":1401979807000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Which is to parse the blob: URL recursively for an origin?","msgtype":"m.text"},"ts":1401979833000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: I'm not sure I fully understand all the implications yet of this","msgtype":"m.text"},"ts":1401979837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: of a blob having an embedded origin that is","msgtype":"m.text"},"ts":1401979844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: we can't do much strong typing, this is a JS API","msgtype":"m.text"},"ts":1401979866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: it's mostly about whether this should be a map or a list, ...","msgtype":"m.text"},"ts":1401979878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: my intent with Teepee is to largely implement the specs as they are and adjust the parsing et al. as necessary, doing large-scale analysis of real life, covering things like the Common Crawl.","msgtype":"m.text"},"ts":1401979890000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"annevk: what's the functional difference?  the origin being anything but a simple string is new to me","msgtype":"m.text"},"ts":1401979908000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Thing is, the origin is already that of the incumbent settings object. Fx’s single process means that we never needed to make it explicit. Multi-process UAs can parse strings for sanity checks; not sure why we need to keep the tuple around, but we could.","msgtype":"m.text"},"ts":1401979909000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"zewt: e.g. to see if something is a secure origin you check the scheme","msgtype":"m.text"},"ts":1401979933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: see https://w3c.github.io/webappsec/specs/mixedcontent/","msgtype":"m.text"},"ts":1401979942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then parse the origin to get the scheme from it","msgtype":"m.text"},"ts":1401979947000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yes, either that or origin is already a tuple and setting it to a string is wrong","msgtype":"m.text"},"ts":1401979973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Go deals with headers as a mapping of header name strings to an array of strings.","msgtype":"m.text"},"ts":1401979992000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"if they're functionally interchangeable than neither is wrong","msgtype":"m.text"},"ts":1401979992000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk, actually, one thing we can do is parse the origin string and extract a scheme, host, port tuple","msgtype":"m.text"},"ts":1401979993000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: i just said that :P","msgtype":"m.text"},"ts":1401980003000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: just depends on what the model is","msgtype":"m.text"},"ts":1401980022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt :) annevk, I’m not sure where the tuple would live.","msgtype":"m.text"},"ts":1401980024000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"if neither is wrong, having the origin mbe a string to line up with document.location.origin seems most natural, at least at first glance","msgtype":"m.text"},"ts":1401980031000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: which is what I asked","msgtype":"m.text"},"ts":1401980032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Other than being parsed for extraction","msgtype":"m.text"},"ts":1401980033000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk: seems to me that getting sense out of HTTP headers without a strongly typed interface is a futile endeavour…","msgtype":"m.text"},"ts":1401980040000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"(Alas.)","msgtype":"m.text"},"ts":1401980045000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: the way you described Go does not like super strongly typed, that level of detail works","msgtype":"m.text"},"ts":1401980080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: although it also depends a bit on how they parse incoming values I guess","msgtype":"m.text"},"ts":1401980096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed, Go is typically pretty weakly typed.","msgtype":"m.text"},"ts":1401980097000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"indeed.","msgtype":"m.text"},"ts":1401980157000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I’m not certain how it handles things like `Accept: foo, bar\\r\\nAccept: baz`, whether ['foo', 'bar', 'baz'] or ['foo, bar', 'baz'], but I would expect the latter.","msgtype":"m.text"},"ts":1401980158000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1401980188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Without knowledge of the grammar of the header, it is impossible to do anything at all.","msgtype":"m.text"},"ts":1401980193000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Because you need to know whether it’s a list type or not.","msgtype":"m.text"},"ts":1401980210000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Well clearly it is possible to do something hence everyone having a generic abstraction","msgtype":"m.text"},"ts":1401980227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In RFC 2616-speak, it’s the difference between #(…) and anything else.","msgtype":"m.text"},"ts":1401980229000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"If it is a list, then that earlier example would be foo, bar, baz. If it is not a list, the behaviour is undefined. I’m not certain what the typical behaviour is.","msgtype":"m.text"},"ts":1401980276000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"is not pleased with any HTTP specs, including HTTP/2; they leave *so* much undefined","msgtype":"m.emote"},"ts":1401980307000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Yeah okay, seems you got about as far as I did with this","msgtype":"m.text"},"ts":1401980334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"HTTP/2 even inserts *deliberate* ambiguity of behaviour in a couple of places!","msgtype":"m.text"},"ts":1401980337000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"hopes mnot wakes up","msgtype":"m.emote"},"ts":1401980345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: typically the underlying model is more complex, and the APIs return something serialized","msgtype":"m.text"},"ts":1401980393000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: I'm not sure why origin would be any different","msgtype":"m.text"},"ts":1401980404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Header fields `Foo: bar` and `Foo: baz` should NOT be treated as equivalent to `Foo: bar, baz`; only if it is a list is that correect…","msgtype":"m.text"},"ts":1401980458000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"And then of course there’s Set-Cookie… *sigh*","msgtype":"m.text"},"ts":1401980502000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"it's gonna be okay dude, we can still get hadfield's tweets to the space station","msgtype":"m.text"},"ts":1401980561000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: sometimes I’d prefer it if it *didn’t* work, because then we’d need to fix it. As it is, “if it ain’t broke, don’t fix it” prevails ☹","msgtype":"m.text"},"ts":1401980662000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"agrees with the Varnish author on some of the things he’s saying about HTTP/2 and wishing it would break more","msgtype":"m.emote"},"ts":1401980686000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"annevk, seems like you’re right: Fetch should totally shoulder request/response pieces. The fact that File APi does it at all is actually a legacy issue.","msgtype":"m.text"},"ts":1401980766000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, but I’m unclear on the bit about URL Parse, namely https://www.w3.org/Bugs/Public/show_bug.cgi?id=25987. Is it assigned to me? If so, what am I missing?","msgtype":"m.text"},"ts":1401980820000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Oh, by the way, I don’t like CORS much. Especially the way that preflight requests hate 3xx, that I really don’t understand (it says to treat it as a network error!). Working around that has cost several days’ work for a team that I was working with a few weeks ago, changing a thing in the API to use a 2xx status code with a Location header, the JS client manually following the redirect… ☹","msgtype":"m.text"},"ts":1401980908000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: seems like you forgot to give feedback somewhere","msgtype":"m.text"},"ts":1401980962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: at least, I didn't see it","msgtype":"m.text"},"ts":1401980967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: having said that, not sure how we can do that sanely","msgtype":"m.text"},"ts":1401980981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: it's not clear to me if the current story we have is correct","msgtype":"m.text"},"ts":1401981012000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: research has shown quite a few people really fed up by that. I wasn’t sure who I should complain to when I discovered this 278 inthe code…","msgtype":"m.text"},"ts":1401981023000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: is that research published?","msgtype":"m.text"},"ts":1401981037000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ChrisMorgan: for starters you can file bugs on the standard: http://fetch.spec.whatwg.org/","msgtype":"m.text"},"ts":1401981062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: I have somewhat limited time now","msgtype":"m.text"},"ts":1401981078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: “research” == Google, Stack Overflow, Chrome bug tracker, &c.","msgtype":"m.text"},"ts":1401981095000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Most people seem to figure it a browser bug, but I tracked it through the specs and W3C and WHATWG agree that 3xx is treated as network error :-(","msgtype":"m.text"},"ts":1401981135000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"ChrisMorgan: pointers welcome if you file a bug","msgtype":"m.text"},"ts":1401981138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes I know, I wrote the spec","msgtype":"m.text"},"ts":1401981153000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(both of them)","msgtype":"m.text"},"ts":1401981157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see that it’s not the easiest problem, but I was wondering about something like just doing another preflight request if necessary.","msgtype":"m.text"},"ts":1401981188000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Certainly I haven’t thought all the implications through.","msgtype":"m.text"},"ts":1401981204000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"annevk: fwiw, the \"implicit\" blob origin approach seems to sidestep this stuff, since the \"real\" origin stays internal","msgtype":"m.text"},"ts":1401981211000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"But it is a very annoying limitation.","msgtype":"m.text"},"ts":1401981214000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"CORS as a whole is annoying… but I understand why it is necessary and so there isn’t anything that could obviously be better.","msgtype":"m.text"},"ts":1401981241000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"one case i noticed where it was visible was when creating a blob URL from inside a file: origin, UAs don't expose the origin, so Chrome gives a bogus \"blob:null/uuid\" url, but Firefox's \"blob:uuid\" doesn't care","msgtype":"m.text"},"ts":1401981276000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: you’ve convinced me, I’ll see about filing a bug about trying to get 3xx to work with preflight requests.","msgtype":"m.text"},"ts":1401981313000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"Probably take a day or two.","msgtype":"m.text"},"ts":1401981324000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"(the \"implicit\" approach has its own weirdnesses, like how new URL(blobURL).origin would give different results depending on whether the URL was revoked or not)","msgtype":"m.text"},"ts":1401981364000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Now, I should go to sleep.","msgtype":"m.text"},"ts":1401981404000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"zewt: blob:null would be correct as the serialization of a unique ID origin is null","msgtype":"m.text"},"ts":1401981494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: which is another argument as to why origin is not a string","msgtype":"m.text"},"ts":1401981504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry I can’t help you more.","msgtype":"m.text"},"ts":1401981564000,"senderName":"ChrisMorgan","senderId":"ChrisMorgan@irc"},
{"content":{"body":"annevk: if you can't parse the actual origin back out of the blob URL, i think the reasons for the \"explicit\" origin approach go away","msgtype":"m.text"},"ts":1401981604000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"maybe not completely, since the URL API would be the same...","msgtype":"m.text"},"ts":1401981627000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess it means that taking a blob URL and returning its origin would have to dig into the blob URL store (since eg. for file URLs the origin isn't actually in the URL), but the script-visible resulting .origin string would be identical both ways (\"null\"), only the internal origin would be different","msgtype":"m.text"},"ts":1401981752000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess that's ugly but not horrible","msgtype":"m.text"},"ts":1401981790000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ChrisMorgan: thanks for your thoughts, have a good night","msgtype":"m.text"},"ts":1401981797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though it would become script-visible again if there was something like url.isSameOrigin(url2)","msgtype":"m.text"},"ts":1401981867000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: so is that bug a placeholder bug for tweaking the Fetch story for Blob URLs? I’m not 100% sure what action to take on it, but I can leave what’s currently in http://dev.w3.org/2006/webapi/FileAPI/#requestResponseModel to Fetch.","msgtype":"m.text"},"ts":1401982155000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"(by “that bug” I mean Bug 25987)","msgtype":"m.text"},"ts":1401982217000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: it's a bug about what the overall model should be","msgtype":"m.text"},"ts":1401985299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if we want to be able to figure out same-origin for file urls (maybe data too? not following that thread), seems like simple string parsing is out, at least","msgtype":"m.text"},"ts":1401985677000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Did I just get an email with an attachment w3c-standard-....docx?","msgtype":"m.text"},"ts":1401987931000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: people are crazy sometimes ...","msgtype":"m.text"},"ts":1401987955000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Ms2ger: I don't know, did you?","msgtype":"m.text"},"ts":1401988156000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Either I did or I'm hallucinating about public-web-perf","msgtype":"m.text"},"ts":1401988188000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I like to pretend that public-web-perf is all hallucination","msgtype":"m.text"},"ts":1401988211000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"checks a few recent emails, finds that it is still bz suggesting that specs should actually define things, closes the folder again","msgtype":"m.emote"},"ts":1401988300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"crazytalk","msgtype":"m.text"},"ts":1401990486000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: Hi. Minory typo. In the Forms section the example of the Pizza form and the example of server query string contains different phone numbers. ;-)","msgtype":"m.text"},"ts":1401992083000,"senderName":"IZh_","senderId":"IZh_@irc"},
{"content":{"body":"please file all the bugs using the form on the page","msgtype":"m.text"},"ts":1401992104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can't track bugs reported on irc :-)","msgtype":"m.text"},"ts":1401992109000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'll try. At this moment I'm on the phone with very bad internet connection in a subway. :-)","msgtype":"m.text"},"ts":1401992214000,"senderName":"IZh_","senderId":"IZh_@irc"},
{"content":{"body":"tries and work out how the sanest way to parse the parser spec is…","msgtype":"m.emote"},"ts":1401992231000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Bootstrapping","msgtype":"m.text"},"ts":1401992397000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1401992403000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I should probably start off by just creating a list of all sentences in the tokenizer spec","msgtype":"m.text"},"ts":1401992425000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zewt: not sure why we'd want to","msgtype":"m.text"},"ts":1401992520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure either, wasn't able to construct a test case (postMessage won't post to a file: iframe)","msgtype":"m.text"},"ts":1401992731000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, you should be able to use a blob url created in a file: url within that page","msgtype":"m.text"},"ts":1401992815000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and if you're getting the origin by parsing the string, you can't check that since all you have is \"null\"","msgtype":"m.text"},"ts":1401992857000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm not too concerned about file URL compat","msgtype":"m.text"},"ts":1401992945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, it works in browsers today","msgtype":"m.text"},"ts":1401993055000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(at least Chrome, on a quick test)","msgtype":"m.text"},"ts":1401993069000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"same for data: urls, which also give blob:null/uuid urls","msgtype":"m.text"},"ts":1401993268000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"making blob urls not work inside anything with a unique origin doesn't seem good","msgtype":"m.text"},"ts":1401993319000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I guess they always compare against the serialized origin in which case it would always work","msgtype":"m.text"},"ts":1401993487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As I suggested earlier, just serialize the origin and append \"/\" and see if it's a substring","msgtype":"m.text"},"ts":1401993505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but the serialized origin is just \"null\", so it wouldn't be comparing that they're the same origin, it'd consider two different \"unique origins\" as being the same origin since they serialize the same","msgtype":"m.text"},"ts":1401993590000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"so i guess you could define that to work, but i'd imagine that'd just be defeating the check","msgtype":"m.text"},"ts":1401993669000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I don't think it would combined with the fact that the blob URL store is unique per environment","msgtype":"m.text"},"ts":1401993972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As document.domain only works for HTTP URLs","msgtype":"m.text"},"ts":1401993991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i guess it just seems like asking for trouble that if you create a blob URL in two different unique origins, you end up with two URLs that are same-origin with each other","msgtype":"m.text"},"ts":1401994169000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no idea what the side-effects would be, just that it seems like unexpected behavior in a security-sensitive value","msgtype":"m.text"},"ts":1401994224000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"gsnedders: I tried parsing the parser spec once, and gave up and decided it was way easier and more reliable to just transcribe it into a declarative language by hand","msgtype":"m.text"},"ts":1401994753000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ok well my attempt to define how the JS loader works has kinda run aground before getting started. I guess es-discuss isn't going to be getting much traffic during the f2f.","msgtype":"m.text"},"ts":1401995042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"firefox does such a great job of actually rendering the HTML spec once it's loaded","msgtype":"m.text"},"ts":1401995502000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wish i had a browser with chrome's load-time behaviour and firefox's render-time behaviour, on the spec...","msgtype":"m.text"},"ts":1401995531000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"remembers about that ghost of an idea he had to implement chunking in JS using display:none ...","msgtype":"m.emote"},"ts":1401995639000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Philip`: I know. I cited your mailing list post about that in my BSci thesis ;P","msgtype":"m.text"},"ts":1401995729000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I wonder if the same is true of, say, the Relax NG or Relax NG Compact spec ...","msgtype":"m.text"},"ts":1401995813000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I remember seeing something that looked suspiciously like a formal semantics in one or both of those ...","msgtype":"m.text"},"ts":1401995856000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"So my attempt to directly translate the spec into a declarative language led to bugs in the transcription","msgtype":"m.text"},"ts":1401995893000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So I'm unsure about any property proven of that model","msgtype":"m.text"},"ts":1401995903000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Because I don't trust it models the spec.","msgtype":"m.text"},"ts":1401995908000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"bugs in the transcription?","msgtype":"m.text"},"ts":1401995989000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The transcribed, formal, declarative copy didn't match the spec.","msgtype":"m.text"},"ts":1401996019000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"was it an automated transcription?","msgtype":"m.text"},"ts":1401996095000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"No. By hand.","msgtype":"m.text"},"ts":1401996116000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1401996124000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Unrelated: how is my desk such a mess?","msgtype":"m.text"},"ts":1401996171000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"/Why/ do I have year old train tickets? When am I going to need them?","msgtype":"m.text"},"ts":1401996345000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: You should just run it against the test suite until it passes","msgtype":"m.text"},"ts":1401996462000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"You'll have to do that anyway, because there's no way to tell your automatic translation thing isn't full of bugs","msgtype":"m.text"},"ts":1401996489000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I get a crash in html5lib==1.0b3 with '<z\\uFFFD>' -> ValueError: chr() arg not in range(256) -- is this a known bug?","msgtype":"m.text"},"ts":1401996507000,"senderName":"Huvet","senderId":"Huvet@irc"},
{"content":{"body":"foolip: ping","msgtype":"m.text"},"ts":1401996577000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gsnedders: and it's much easier to notice and fix bugs in a manual translation, than in a script that's full of regexps that try to pattern-match all the dozens of ways Hixie can phrase the same concept","msgtype":"m.text"},"ts":1401996588000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1401996601000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Huvet: using lxml?","msgtype":"m.text"},"ts":1401996654000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Huvet: probably a known bug","msgtype":"m.text"},"ts":1401996662000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yes","msgtype":"m.text"},"ts":1401996665000,"senderName":"Huvet","senderId":"Huvet@irc"},
{"content":{"body":"qr/Act as if an end tag (?:token )?with (?:the )?tag name \"(\\S+)\" had been seen, (?:and )?then, if that token wasn't ignored, reprocess the current token\\./","msgtype":"m.text"},"ts":1401996680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Why there are no term \"positive integer\"? There are lots of \"non-negative integer greater than zero\".","msgtype":"m.text"},"ts":1401996683000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24684","msgtype":"m.text"},"ts":1401996688000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(from my old attempt at a translator)","msgtype":"m.text"},"ts":1401996688000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I was hoping from my brief experiment to do stuff a bit better than that","msgtype":"m.text"},"ts":1401996697000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IZh: because people get into arguments about what a positive integer is","msgtype":"m.text"},"ts":1401996710000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i recommend just using an NLP library","msgtype":"m.text"},"ts":1401996714000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: my plan.","msgtype":"m.text"},"ts":1401996720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ducks and runs","msgtype":"m.emote"},"ts":1401996720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Not actually using a full parser, because that';ll never work","msgtype":"m.text"},"ts":1401996733000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: But can likely get somewhere","msgtype":"m.text"},"ts":1401996755000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Hmm... Is there any another meaning of what positive integer could be?","msgtype":"m.text"},"ts":1401996767000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"(Your grammar is weird in places in the spec. :))","msgtype":"m.text"},"ts":1401996780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IZh: Some include 0.","msgtype":"m.text"},"ts":1401996788000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zewt: they wouldn't be able to reach each other since each would have its own unique blob URL store","msgtype":"m.text"},"ts":1401996793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: the additional origin check is only relevant for document.domain purposes afaict","msgtype":"m.text"},"ts":1401996812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: I would send them back to school. Zero is not a positive.","msgtype":"m.text"},"ts":1401996832000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"gsnedders: i meant some mythical library that literally just understands the spec :-)","msgtype":"m.text"},"ts":1401996856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"foolip: wanna cleanup https://code.google.com/p/chromium/issues/detail?id=341854 ?","msgtype":"m.text"},"ts":1401996914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wish someone on Gecko's end would drop xml:base already","msgtype":"m.text"},"ts":1401996933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not it","msgtype":"m.text"},"ts":1401996964000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"is URLUtils.searchParams actually implemented anywhere?","msgtype":"m.text"},"ts":1401997078000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: When ACID4 will be ready?","msgtype":"m.text"},"ts":1401997088000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"Never","msgtype":"m.text"},"ts":1401997121000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The Acid tests have been increasingly bad for the web, so we stopped doing them","msgtype":"m.text"},"ts":1401997140000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"caitp: Gecko","msgtype":"m.text"},"ts":1401997156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1401997162000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ms2ger: why bad?","msgtype":"m.text"},"ts":1401997169000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"that's too bad, it would be really convenient to use them :( I guess that will give me something to hack into blink then","msgtype":"m.text"},"ts":1401997185000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Acid2 caused the only quirks-mode / standards-mode difference in the HTML parser","msgtype":"m.text"},"ts":1401997188000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And it caused years of confusion about -- in comments","msgtype":"m.text"},"ts":1401997206000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I wonder why window.location.searchParams is not a thing","msgtype":"m.text"},"ts":1401997212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Acid3... *sigh*","msgtype":"m.text"},"ts":1401997220000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: it sounds like you need more macros ;-P","msgtype":"m.text"},"ts":1401997236000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk can give you some examples of what acid3 did... I'm off for today","msgtype":"m.text"},"ts":1401997260000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"IZh: probably not until browsers stop caring about standards again","msgtype":"m.text"},"ts":1401997267000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ms2ger: isn't there enough written about that?","msgtype":"m.text"},"ts":1401997282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: i think the acid tests did lots of good stuff, but for sure they also had some negative side-effects.","msgtype":"m.text"},"ts":1401997283000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1401997311000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yes, it's grey again, not white or black","msgtype":"m.text"},"ts":1401997317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I feel like the good stuff/bad stuff ratio decreased over time, though","msgtype":"m.text"},"ts":1401997334000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hmm, I guess writing to searchParams in gecko has no effect, darn.","msgtype":"m.text"},"ts":1401997348000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Never thought that tests may harm...","msgtype":"m.text"},"ts":1401997355000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"If passing them is a goal by itself, regardless of what behaviour it tests for...","msgtype":"m.text"},"ts":1401997389000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Looks like I'm very ancient and out-of-dated. ;-)","msgtype":"m.text"},"ts":1401997479000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"they have surgery to fix that these days, it worked wonders for pete burns","msgtype":"m.text"},"ts":1401997524000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: bah, all NLP libraries are terrible, they are pretty much all done based on Chomsky's generative grammars, which is an utterly stupid idea.","msgtype":"m.text"},"ts":1401997672000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But I'm not getting on that soapbox. :)","msgtype":"m.text"},"ts":1401997691000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IZh: The problem with the Acid tests is they mostly force people to implement specs that nobody actually cares about and everyone has interoperably broken for years.","msgtype":"m.text"},"ts":1401997720000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I see...","msgtype":"m.text"},"ts":1401997825000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"actually the acid tests were pretty carefully written to not do that, by and large","msgtype":"m.text"},"ts":1401997863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"still, a few pretty notable cases (like the comment parsing stuff)","msgtype":"m.text"},"ts":1401997883000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think everyone parsed <p><table> the same as well?","msgtype":"m.text"},"ts":1401997906000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well the two things you said are differnet issues","msgtype":"m.text"},"ts":1401997996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"acid2 dates back to the days where we were trying to get browsers to do the right thing in standards mode, rather than fixing the specs.","msgtype":"m.text"},"ts":1401998013000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"back before we (I, at least) understand that specs were not stone tablets handed down from on high","msgtype":"m.text"},"ts":1401998041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"understood","msgtype":"m.text"},"ts":1401998052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: basically, when you were young and naive?","msgtype":"m.text"},"ts":1401998084000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well, naive, anyway","msgtype":"m.text"},"ts":1401998093000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Off the topic: I'm waiting for wildcards in css-properties. I don't like to see series of -x-moz, -x-ie, -x-opera, -x-webkit... doing the same things under similar names. Why not use -x-*-something or -x-anyvendor-something?","msgtype":"m.text"},"ts":1401998166000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"what problem would that solve other than making experimental properties less cumbersome to use in css?","msgtype":"m.text"},"ts":1401998267000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"IZh: I thought the trend was to just drop the prefixes?","msgtype":"m.text"},"ts":1401998279000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and use other mechanisms to discourage use way too early","msgtype":"m.text"},"ts":1401998346000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hahahahaha","msgtype":"m.text"},"ts":1401998451000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"In total, 3190 tests fail to pass in two implementations.\" \"We contend that the specification being proposed for advancement through the process has demonstrated interoperability.\"","msgtype":"m.text"},"ts":1401998466000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how many tests did they have?","msgtype":"m.text"},"ts":1401998511000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"3190","msgtype":"m.text"},"ts":1401998520000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(no idea heh)","msgtype":"m.text"},"ts":1401998539000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if zewt is right, can we exile the perpetrators","msgtype":"m.text"},"ts":1401998562000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"they have about 1000 tests, with about 100 assertions in each test on average","msgtype":"m.text"},"ts":1401998567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SamB: the trend is good.","msgtype":"m.text"},"ts":1401998627000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"number of assertions beyond the first to fail in a test tends to be meaningless, at least in my tests","msgtype":"m.text"},"ts":1401998629000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"is a bit confused at the idea of the test continuing past failed asserts","msgtype":"m.emote"},"ts":1401998673000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"guesses asserts mean something strange in JS ...","msgtype":"m.emote"},"ts":1401998683000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Is it saying there are two implementations which the tests do not pass in, or that there are not two implementations which the tests pass in?","msgtype":"m.text"},"ts":1401998684000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the coverage is pretty anemic. There's some areas that have good coverage, e.g. the canvas features (though not new ones), <video>, and parsing","msgtype":"m.text"},"ts":1401998690000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: lol","msgtype":"m.text"},"ts":1401998696000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Philip`: the latter","msgtype":"m.text"},"ts":1401998697000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for contrast, there are 3539 occurances of the word \"must\" in the HTML spec","msgtype":"m.text"},"ts":1401998739000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(very few of which are in the parser section)","msgtype":"m.text"},"ts":1401998772000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what about in the *real* HTML spec","msgtype":"m.text"},"ts":1401998805000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that's the one i was talking about","msgtype":"m.text"},"ts":1401998828000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1401998833000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i guess their fork is missing some sections so they'll have fewer","msgtype":"m.text"},"ts":1401998837000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm kind of surprised by \"very few of which are in the parser section\"","msgtype":"m.text"},"ts":1401998864000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the parser section is: \"you MUST use the following state machine: [insert thousands of lines of state machine]\"","msgtype":"m.text"},"ts":1401998926000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: that on public-html?","msgtype":"m.text"},"ts":1401998944000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1401998949000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SamB: what gsnedders said","msgtype":"m.text"},"ts":1401998957000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, well, okay","msgtype":"m.text"},"ts":1401998961000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I figured it was something like that ...","msgtype":"m.text"},"ts":1401998971000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hidden/factored-out musts ...","msgtype":"m.text"},"ts":1401998991000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: where? I see no reference to the word \"advancement\" since 2012?","msgtype":"m.text"},"ts":1401999028000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it was in the -details.html file robin linked to","msgtype":"m.text"},"ts":1401999045000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1401999047000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The fun part is the whole sections of the spec with no tests.","msgtype":"m.text"},"ts":1401999206000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Like #loading","msgtype":"m.text"},"ts":1401999209000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"that does sound like fun","msgtype":"m.text"},"ts":1401999233000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"exhilarating","msgtype":"m.text"},"ts":1401999255000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: is this the HTML spec?","msgtype":"m.text"},"ts":1402000241000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"is what the HTML spec?","msgtype":"m.text"},"ts":1402000266000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think it makes a lot more sense to do that than to hold the spec up until implementors fix all the tests, which they won't","msgtype":"m.text"},"ts":1402000292000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/tests/bugs/","msgtype":"m.text"},"ts":1402000302000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The thing about testing","msgtype":"m.text"},"ts":1402000311000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i think it makes perfect sense to publish a patent policy snapshot, for sure","msgtype":"m.text"},"ts":1402000323000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if they want to do that, why pretend they have a real test suite yet","msgtype":"m.text"},"ts":1402000356000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: and your assertion that there are 1000 tests with 100 asserts each is just wrong","msgtype":"m.text"},"ts":1402000415000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, i later found http://www.w3c-test.org/html/dom/reflection-embedded.html which alone is 17% of the test suite","msgtype":"m.text"},"ts":1402000443000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so the 100 is more a mean than a median","msgtype":"m.text"},"ts":1402000467000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Counting files just doesn't make any sense","msgtype":"m.text"},"ts":1402000489000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You could put the same 100 tests in 100 files and 100 tests in 1 file","msgtype":"m.text"},"ts":1402000519000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It would be the same amount of testing","msgtype":"m.text"},"ts":1402000536000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1402000558000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"sure. i was saying this in the context of robin comparing to the svg and css test suites, where he was citing test file numbers.","msgtype":"m.text"},"ts":1402000572000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"svg had ~300 tests, but since each one tested a few hundred thousand pixels, it's more like 300,000,000 test assertions","msgtype":"m.text"},"ts":1402000596000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think that's an absurd way to look at it","msgtype":"m.text"},"ts":1402000615000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1402000621000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it's not clear to me that numbers are a useful way to look at it at all","msgtype":"m.text"},"ts":1402000629000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what matters is coverage","msgtype":"m.text"},"ts":1402000632000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"many of those pixels aren't even all that important","msgtype":"m.text"},"ts":1402000634000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: many of the test assertions aren't even all that important too :-)","msgtype":"m.text"},"ts":1402000647000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not important in a different way","msgtype":"m.text"},"ts":1402000660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean, you know, it's not the end of the world if we don't get a byte-for-byte identical rasterization on every renderer","msgtype":"m.text"},"ts":1402000706000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I agree that counting tests isn't a very useful exercise","msgtype":"m.text"},"ts":1402000719000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I also think that intentionally blocking progress on something we agree is useful for technical reasons is more stupid","msgtype":"m.text"},"ts":1402000757000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well sure. that the process is dumb is something i believe in so strongly that i quit the w3c.","msgtype":"m.text"},"ts":1402000789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my complaint was in the context of robin saying this test suite was more useful than previous test suites, and trying to justify a huge error rate that way.","msgtype":"m.text"},"ts":1402000796000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, lintian actually has lots of tests that test many checks each","msgtype":"m.text"},"ts":1402000804000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(i posted my rant on public-html, fwiw)","msgtype":"m.text"},"ts":1402000819000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I saw","msgtype":"m.text"},"ts":1402000865000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I strongly suspect it is better than past testsuites","msgtype":"m.text"},"ts":1402000879000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, somehow I doubt the SVG testsuite outright fails at a single pixel component being off by one ...","msgtype":"m.text"},"ts":1402000880000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the CSS2.1 test suite isn't bad either","msgtype":"m.text"},"ts":1402000967000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't have a good handle on the coverage of either the CSS2.1 test suite or the HTML test suite, but the HTML test suite sure has some large holes","msgtype":"m.text"},"ts":1402000986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(which isn't a criticism of the effort, it's obviously an on-going effort)","msgtype":"m.text"},"ts":1402000998000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(it's only a criticism of an attempt to use it as a proxy for something that has full coverage)","msgtype":"m.text"},"ts":1402001010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"basically, I guess what I mean is that having tests fail when there is actually nothing wrong is BAD BAD BAD","msgtype":"m.text"},"ts":1402001086000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"where are tests failing when there's nothing wrong?","msgtype":"m.text"},"ts":1402001161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: well, either there are loads HTML5 tests that are improperly failing, OR interop is actually fairly bad for the tested stuff","msgtype":"m.text"},"ts":1402001263000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"interop is actually fairly bad for the tested stuff.","msgtype":"m.text"},"ts":1402001280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you don't just get to hand-wave away the failing tests","msgtype":"m.text"},"ts":1402001296000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the tested stuff that fails, anyway","msgtype":"m.text"},"ts":1402001296000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"couldn't agree more","msgtype":"m.text"},"ts":1402001307000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"even if GDB's test suite *is* a gross offender here","msgtype":"m.text"},"ts":1402001324000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(that's why i predicted REC in 2022, not 2014, back when i cared about this)","msgtype":"m.text"},"ts":1402001332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the fundamental problem is that the w3c is trying to use a broken process. They want patent coverage, which is a good thing to get ASAP, but their process says they can only get it once they have Proved Interoperability.","msgtype":"m.text"},"ts":1402001380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's just no reason they should gate the former on the latter.","msgtype":"m.text"},"ts":1402001394000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it basically never goes green, so consequently it's not easy to catch new/reintroduced problems in the bud","msgtype":"m.text"},"ts":1402001402000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: indeed","msgtype":"m.text"},"ts":1402001416000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"that's insane","msgtype":"m.text"},"ts":1402001421000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"they should demand the patent stuff ASAP","msgtype":"m.text"},"ts":1402001456000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: i know nothing about the details, but maybe the agreements with people giving patent licenses depend on that, and they're afraid that asking everyone to change that could harm them somehow? (eg. \"licenseholders review patent contract and someone decides they're better off keeping their landmines\")","msgtype":"m.text"},"ts":1402001991000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"not clear on what they could be concerned about","msgtype":"m.text"},"ts":1402002075000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a patent license is always against a specific piece of text","msgtype":"m.text"},"ts":1402002084000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(not saying that'd be a good or bad reason, but it'd be a reason that I could parse)","msgtype":"m.text"},"ts":1402002091000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's not the patent license that would change, it's the process for giving the license","msgtype":"m.text"},"ts":1402002231000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"has the Process(r) for receiving patent licensing changed in recent memory (say, a couple years)?","msgtype":"m.text"},"ts":1402002300000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(not an important question, just wondering if changing this would be opening an old box that nobody's modified in a decade, or if it's been dusted off periodically for something or other)","msgtype":"m.text"},"ts":1402002332000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1402002333000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a decade+ old","msgtype":"m.text"},"ts":1402002342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, if the compiler for changing the process (getting w3c members to agree to the change, possibly bringing Executives into the picture) hasn't been invoked in a decade, i could at least follow why they'd be uneasy about doing so","msgtype":"m.text"},"ts":1402002414000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"krit: http://lists.w3.org/Archives/Public/public-webappsec/2014Jun/0093.html reads a bit like STFU","msgtype":"m.text"},"ts":1402002471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(in any case i'd hope that the people who would initiate such a change would at least be willing to say in broad terms why they won't do it, so I guess there's not much point in my guessing)","msgtype":"m.text"},"ts":1402002491000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hand waving away the failing stuff *for the purposes of the Process* is the only pragmatic way to get W3C to put some text under their patent policy and stop focussing on a out of date draft","msgtype":"m.text"},"ts":1402002536000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"SamB: You can effectively use a testsuite where tests fail. You just have to know which tests fail","msgtype":"m.text"},"ts":1402002620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: okay, yeah, that can work too","msgtype":"m.text"},"ts":1402002638000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"but AFAICT we haven't got that either","msgtype":"m.text"},"ts":1402002660000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"jgraham: yeah, i guess the \"50000 tests are failing, interop success!\" silliness is ignorable if the only purpose is to invoke patent agreements (so long as BS'ing the test results like that doesn't jeopardize the license, which I'd hope it doesn't)","msgtype":"m.text"},"ts":1402002728000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SamB: We (Mozilla) do. It's not quite stable enough for production yet, but it works","msgtype":"m.text"},"ts":1402002751000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(and the code we use is open source and can be adapted for other browsers)","msgtype":"m.text"},"ts":1402002790000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: the opposite is the case. I would like to see progress. You are right that the WG didn't spend a hell of time on fetching and security yet. Especially I didn't have much time.","msgtype":"m.text"},"ts":1402002914000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"jgraham: I was referring to GDB, in case that wasn't clear","msgtype":"m.text"},"ts":1402002962000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: I really welcome help on this topic. I added some content so that people feel more encouraged to add stuff to the Wiki. It is less likely that people contribute to an empty Wiki.","msgtype":"m.text"},"ts":1402002978000,"senderName":"krit","senderId":"krit@irc"},
{"content":{"body":"where it'd tend to be at LEAST arch-dependent","msgtype":"m.text"},"ts":1402002991000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and, hmm, I guess some of them depend on e.g. whether libc or gcc was built with \"systemtap\" probes","msgtype":"m.text"},"ts":1402003074000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(not actually intended for use with systemtap, but using its sys/sdt.h and thus its probe ABI)","msgtype":"m.text"},"ts":1402003168000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: thanks for the events vs. microtasks answer. Exactly what I was hoping for.","msgtype":"m.text"},"ts":1402003211000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: np. it's got lots of rough edges still, unfortunately.","msgtype":"m.text"},"ts":1402003676000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SamB: Oh, it wasn't","msgtype":"m.text"},"ts":1402004121000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"where do i file bugs to suggest something for the html test suite to test, again?","msgtype":"m.text"},"ts":1402004845000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://github.com/w3c/web-platform-tests/issues ?","msgtype":"m.text"},"ts":1402004870000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like yes","msgtype":"m.text"},"ts":1402004934000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25504","msgtype":"m.text"},"ts":1402005143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"JakeA: I don't know why you want a \"soft fail\" behavior for crossorigin stylesheets there.","msgtype":"m.text"},"ts":1402007120000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: I don't have any ideas for https://www.w3.org/Bugs/Public/show_bug.cgi?id=24684#c22 I'm afraid","msgtype":"m.text"},"ts":1402008584000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"annevk: I've starred it for when I need to procrastinate","msgtype":"m.text"},"ts":1402008655000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"can anyone explain what \"should\" happen in a case like this? http://jsfiddle.net/Wz59M/1/","msgtype":"m.text"},"ts":1402009307000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"other than crashing FF nightly, that probably isn't supposed to happen","msgtype":"m.text"},"ts":1402009331000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"basically, from angular's POV, chrome is doing the \"wrong thing\" here, and firefox is doing the \"right thing\", but I just want to get a feel for \"why\" one or the other is the right thing","msgtype":"m.text"},"ts":1402009380000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"half-way through the script, there's no options at all","msgtype":"m.text"},"ts":1402009467000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then you insert one","msgtype":"m.text"},"ts":1402009469000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so it's selected","msgtype":"m.text"},"ts":1402009473000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"then you insert another","msgtype":"m.text"},"ts":1402009476000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and, well, there's already a selected one","msgtype":"m.text"},"ts":1402009491000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I would expect “don’t show me” to show","msgtype":"m.text"},"ts":1402009540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"this is why the insertd one is selected: \"If nodes are inserted or nodes are removed causing the list of options to gain or lose one or more option elements, or if an option element in the list of options asks for a reset, then, if the select element's multiple attribute is absent, the select element's display size is 1, and no option elements in the select element's list of options have their selectedness set to true, the user agent must set the selectedness","msgtype":"m.text"},"ts":1402009591000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think the issue is that, `x` does already have a selected option","msgtype":"m.text"},"ts":1402009602000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you add another option which isn't selected, but chrome decides that it is selected","msgtype":"m.text"},"ts":1402009615000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"oh, we are removing the selected option","msgtype":"m.text"},"ts":1402009654000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"yeah, the selected option is removed before a new one is added","msgtype":"m.text"},"ts":1402009666000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i don't see anything in the spec that says what should happen when you add a second selected one...","msgtype":"m.text"},"ts":1402009679000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"okay, so inserting an option into a select with no options should select that option","msgtype":"m.text"},"ts":1402009680000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's probably a bug...","msgtype":"m.text"},"ts":1402009684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: yeah, that part is clear","msgtype":"m.text"},"ts":1402009693000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: it's the next insertion that's unclear to me","msgtype":"m.text"},"ts":1402009699000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"file a bug? i gotta run, meeting","msgtype":"m.text"},"ts":1402009703000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"have fun :>","msgtype":"m.text"},"ts":1402009710000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"oh, right, it’s dynamically inserting an <option> with the selected attribute","msgtype":"m.text"},"ts":1402009737000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23574 seems related, although i'm not familiar enough with that section of the spec to really explain it","msgtype":"m.text"},"ts":1402010217000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at least, it's related to the bug on angular, not the underlying \"insertion of option[selected]\" I guess","msgtype":"m.text"},"ts":1402010253000,"senderName":"caitp","senderId":"caitp@irc"}
]