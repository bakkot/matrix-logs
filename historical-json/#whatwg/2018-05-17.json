[
{"content":{"body":"Domenic: what is the benefit of having the ‘crossOrigin’ IDL attribute nullable?","msgtype":"m.text"},"ts":1526518971000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: it allows removing the content attribute by setting the IDL atrribute to nill.","msgtype":"m.text"},"ts":1526519624000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"does w3c have an irc channel besides the dead irc server","msgtype":"m.text"},"ts":1526528245000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"Domenic: is the \"last script tag of WPT are tests\" a convention? I am thinking about putting the tests that apply to browsers in a previous script tag, and tests that can be run by Node.js to the last tag, so it will be easier to automate any WPT updates in Node.js","msgtype":"m.text"},"ts":1526529048000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"joyee: I don't think people would generally accept tests that don't run in browsers into the WPT project","msgtype":"m.text"},"ts":1526529089000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I mean to split the test cases into script tags","msgtype":"m.text"},"ts":1526529116000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"multiple tags","msgtype":"m.text"},"ts":1526529120000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"In general WPT is a superset","msgtype":"m.text"},"ts":1526529139000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1526529145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And we can update the union that can be run in both in the last script tag","msgtype":"m.text"},"ts":1526529171000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"That should work fine, although it'd need heavy commenting to hopefully prevent people from messing it up over time, since most contributors (including CI) won't be aware of this division","msgtype":"m.text"},"ts":1526529191000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like, most contributors have no idea what works or doesn't work in Node.js","msgtype":"m.text"},"ts":1526529225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think right now only the URL tests are kept somewhat in sync","msgtype":"m.text"},"ts":1526529255000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"I've been told that browsers can automatically upstream their tests into WPT, so I am thinking about doing the same thing in Node.js, but it would be tricky to comment out stuff that don't work in browsers","msgtype":"m.text"},"ts":1526529300000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"My understanding is right now the URL tests are maintained for browsers but other projects like node or jsdom will do their own stuff with those files","msgtype":"m.text"},"ts":1526529308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh interesting","msgtype":"m.text"},"ts":1526529317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The blocking part is finding a way to denote the union of two sets","msgtype":"m.text"},"ts":1526529348000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"I mean separate script tags will work for now I'm just saying that future contributors might not understand the division and put stuff in the \"wrong\" script tags (since for browsers both script tags will work).","msgtype":"m.text"},"ts":1526529446000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you were able to divide by file and API that'd work better e.g. isolate all URL constructor tests into one file and insist that all future URL constructor tests also go there","msgtype":"m.text"},"ts":1526529503000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: isn't that `url-constructor.html` is? Or that name just implies \"the the constructor is tested here\", not that \"all constructor tests go here\"","msgtype":"m.text"},"ts":1526529695000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"I think the former, e.g. failure.html tests the constructor too I believe.","msgtype":"m.text"},"ts":1526529755000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm curious what file you're looking at right now that is mixed?","msgtype":"m.text"},"ts":1526529776000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"For example, this one https://github.com/w3c/web-platform-tests/blob/master/url/toascii.window.js there is `XMLHttpRequest`","msgtype":"m.text"},"ts":1526529849000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"I was working on a tool to automatically update WPT in Node.js, but I found tests that were commented out","msgtype":"m.text"},"ts":1526529872000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"Technically we can run the tests in a vm with browser globals that are just noops but it may not be enough","msgtype":"m.text"},"ts":1526529929000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"Basically grepping for `//` in `test/parallel/test-whatwg-url-*` would yield the results (with legit comments)","msgtype":"m.text"},"ts":1526530060000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"Domenic: I can work on splitting the tests that can't be run in Node.js into different files in WPT first as well, and focus on automating the process of updating tests that work into Node.js. If any updates come back breaking Node.js, we can just fix it and update again","msgtype":"m.text"},"ts":1526530331000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"Awesome, sounds pretty reasonable to me! We should also check with annevk, who should be waking up soon I think.","msgtype":"m.text"},"ts":1526530572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Great! Yeah now come to think of it, splitting into different files should make things simpler than splitting them into tags","msgtype":"m.text"},"ts":1526530684000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"joyee: wfm","msgtype":"m.text"},"ts":1526534666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"joyee: note https://github.com/w3c/web-platform-tests/issues/10918 though","msgtype":"m.text"},"ts":1526534685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thanks for the heads up. I don't think we have the two .js there since they involve `XMLHttpRequest` and `<a>`. The JSON fixtures are now manually being copy-pasted into our own fixtures directory with some comments added, I plan to move all the WPT files into a separate fixtures directory of the same layout in Node.js anyway so it should be fine.","msgtype":"m.text"},"ts":1526535056000,"senderName":"joyee","senderId":"joyee@irc"},
{"content":{"body":"annevk: I'm having brain fade. How do I reference https://html.spec.whatwg.org/multipage/links.html#downloading-hyperlinks in Bikeshed? Or is it not exported?","msgtype":"m.text"},"ts":1526563090000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The HTML spec's markup always trips me up","msgtype":"m.text"},"ts":1526563112000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hm, it doesn't have data-export, so I guess I'm stuck.","msgtype":"m.text"},"ts":1526563220000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you can add data-export","msgtype":"m.text"},"ts":1526563281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: then it'll be exported tomorrow","msgtype":"m.text"},"ts":1526563292000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ta, I'll do a PR","msgtype":"m.text"},"ts":1526563315000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: given that the processing model is a bit broken though I hope it's only for a non-normative dependency","msgtype":"m.text"},"ts":1526563326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: FYI, prefix commit with \"Meta:\"","msgtype":"m.text"},"ts":1526563359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, this is listing the types of APIs that make range-requests in a note","msgtype":"m.text"},"ts":1526563364000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1526563375000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: A couple of parts of the fetch spec encode numbers to use as headers. What's the best way to encode a number for this purpose? https://heycam.github.io/webidl/#es-ByteString seems close, but feels wrong to use something like this in-parallel.","msgtype":"m.text"},"ts":1526564013000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: \"represented as shortest possible lowercase hexadecimal number\" or \"shortest possible decimal number\" is what URL seems to use","msgtype":"m.text"},"ts":1526564187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ideally Infra defines this, but that's blocked on the BigInt refactoring of JS","msgtype":"m.text"},"ts":1526564215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: what URL uses doesn't seem quite accurate, as it doesn't really explain what code points/bytes to use","msgtype":"m.text"},"ts":1526564258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I'd be okay with a TODO and some hand-wavy wording for your Range patch","msgtype":"m.text"},"ts":1526564291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll create the same definition as URL, along with a note","msgtype":"m.text"},"ts":1526564325000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I wonder how much more broken the UI would get if your download glitch demo also piped through a service worker","msgtype":"m.text"},"ts":1526564418000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"since the SW layer forces the transfer encoding to be stripped from the stream... maybe it would actually work better","msgtype":"m.text"},"ts":1526564465000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it might not be any worse. Hah, yeah, probably better.","msgtype":"m.text"},"ts":1526564511000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: unless it gets angry that it gets more data than the content-length","msgtype":"m.text"},"ts":1526564531000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but it feels like that would be a problem elsewhere","msgtype":"m.text"},"ts":1526564545000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea, we already had to deal with that for normal service worker behavior with encoded resources","msgtype":"m.text"},"ts":1526564562000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"basically a big shruggy for the content-length","msgtype":"m.text"},"ts":1526564579000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: probably a can of worms to sort out when fetch progress API is added","msgtype":"m.text"},"ts":1526564604000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: some review on the WIP PRs against html/html-build/wattsi would be helpful","msgtype":"m.text"},"ts":1526565614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I think they're almost ready to go, after which HTML would finally have slightly annotated commits","msgtype":"m.text"},"ts":1526565672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm.. does this really not have an outcome today? https://stackoverflow.com/a/34545749/319266","msgtype":"m.text"},"ts":1526579386000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"E.g. a safe way to generically escape and embed a JS response in an inline <script> on a HTML5 text/html response","msgtype":"m.text"},"ts":1526579405000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"It surprised me that generically html-text escaping a script worked fine for evil event attributes, but not for inline scripts.","msgtype":"m.text"},"ts":1526579443000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"e.g. <script>var a = &quot;&quot;</script> is a syntax error but <div onclick=\"alert(&quot;&quot;)\"> is not. I understand why, but still would be very very good, if there was indeed a safe way to embed and escape it.","msgtype":"m.text"},"ts":1526579490000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Preferably a way that doesn't involve CDATA but maybe that's the only way?","msgtype":"m.text"},"ts":1526579501000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: Correct, there's no way to generically escape JS in a <script> tag without doing full JS parsing on your own, so you can find </script subsequences in strings/etc. No one-size-fits-all replacement method exists.","msgtype":"m.text"},"ts":1526582309000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Extra-hard mode: the / can come from a regex. The expression `x</script/.exec(...)` is both valid and potentially sensical, but it trigger end-of-<script>-block.","msgtype":"m.text"},"ts":1526582501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1526582502000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"eval(atob('YWxlcnQoImhlbGxvIik=')) ... and I would have gotten away with it to except for those pesky kids and their CSP.","msgtype":"m.text"},"ts":1526583798000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"s/pesky/meddling/, *sigh*","msgtype":"m.text"},"ts":1526583817000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: Not trying to prevent XSS here, just be able to splice in a script from server-side without the possibility of it accidentally closing the <script> element partway thru.","msgtype":"m.text"},"ts":1526587334000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm seeing Chrome behaving inconsistently when setting `font-family` to a web font","msgtype":"m.text"},"ts":1526593905000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Sometimes the change is apparent synchronously, and sometimes not","msgtype":"m.text"},"ts":1526593932000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"I'm trying to find the relevant spec text, but I don't know where to look","msgtype":"m.text"},"ts":1526593995000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"the closest I've come is https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements","msgtype":"m.text"},"ts":1526594001000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"but that's not quite right, since it's not phrased in terms of the JavaScript execution context","msgtype":"m.text"},"ts":1526594039000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"As in, the layout effects of the new font might be async?","msgtype":"m.text"},"ts":1526594154000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah. They normally are","msgtype":"m.text"},"ts":1526594871000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Still experimenting, but this may be related to the @font-face definition as well","msgtype":"m.text"},"ts":1526595071000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"TabAtkins: Aye, yeah. it's unfortunate, given that in most other areas, HTML escaping does not affect the code's function. E.g. things like attribute values such as for <a href> can redundantly use entities for any characters like &lt; and it gets decoded before being interpreted as URL, but it seems that for <script> that isn't the case.","msgtype":"m.text"},"ts":1526599127000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Although some sources on the web suggest that HTML escaping is supported in <script> if and only if the document is in XML mode.","msgtype":"m.text"},"ts":1526599146000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"E.g. that would allow <script>if ( 0 &lt; 5 ) {}</script> to parse without errors;","msgtype":"m.text"},"ts":1526599169000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Ha, indeed. I'm able to get it to work in an isolated test by using 'Content-Type: application/xhtml+xml' although at least in Chrome it only worked if I also added the xmlns attribute to the <html> element. Otherwise it kept interpreting it as HTML.","msgtype":"m.text"},"ts":1526599722000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: Yup, but then you pay the penalty that you *can't* write a bare < in your script without cdata.","msgtype":"m.text"},"ts":1526599904000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(and if you use cdata, you run into the same difficulty as with avoiding </script)","msgtype":"m.text"},"ts":1526600048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Yeah - https://github.com/wikimedia/mediawiki/blob/1.30.0/includes/Html.php#L594-L612","msgtype":"m.text"},"ts":1526600089000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"For CSS we somewhat found a workaround for that.","msgtype":"m.text"},"ts":1526600097000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"But not for JS really","msgtype":"m.text"},"ts":1526600100000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"CDATA syntax is rare enough that it hasn't bitten us yet in the subset of scripts that can end up embedded","msgtype":"m.text"},"ts":1526600126000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"The end glyphs for cdata are even more reasonable to show up in a realistic script, imo. Just a ]]>","msgtype":"m.text"},"ts":1526600174000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"XML mode support has been removed from MediaWiki in a previous version. It used to be a site configuration option for admins, but it was too troublesome to guruantee and just in general the idea of supporting two modes. We ended up going with HTML5.","msgtype":"m.text"},"ts":1526600182000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"That's just a double-array access with a comparison.","msgtype":"m.text"},"ts":1526600199000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, but that's only a problem in XML mode, right?","msgtype":"m.text"},"ts":1526600248000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"From a quick test, having a <script>/*<![CDATA[*/ if ( ''[''[0]]>0 ) {} console.log(1);/*]]>*/</script> seems to work fine","msgtype":"m.text"},"ts":1526600412000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"in HTML mode","msgtype":"m.text"},"ts":1526600414000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"despite containing a literal ]]>","msgtype":"m.text"},"ts":1526600423000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Not sure why/how that works.","msgtype":"m.text"},"ts":1526600469000,"senderName":"Krinkle","senderId":"Krinkle@irc"}
]