[
{"content":{"body":"Is there a trick to close a PR when using the command line to modify a commit and push it to upstream directly?","msgtype":"m.text"},"ts":1473409073000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I just tried that with https://github.com/heycam/webidl/pull/165 and failed.","msgtype":"m.text"},"ts":1473409107000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you modify the commit on the branch, force push, then merge it using fast forward","msgtype":"m.text"},"ts":1473409109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: https://github.com/whatwg/html/blob/master/TEAM.md has various pointers","msgtype":"m.text"},"ts":1473409144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for the resource.","msgtype":"m.text"},"ts":1473409166000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: https://github.com/whatwg/html/blob/master/TEAM.md#merging-pull-requests-from-branches in particular","msgtype":"m.text"},"ts":1473409168000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that implies having push rights to the branch, though, right?","msgtype":"m.text"},"ts":1473409218000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, if you don't the only way to close the PR is to add close #{prnumber} to the commit message, but that's somewhat frowned upon for reasons not entirely clear to me","msgtype":"m.text"},"ts":1473409451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because it closes the PR but the PR appears to not have been merged.","msgtype":"m.text"},"ts":1473409488000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Sure, but assuming you cannot merge the PR successfully (external branch that requires a change other than a commit message change) that's kinda your only option","msgtype":"m.text"},"ts":1473409557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1473409570000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"oh well.","msgtype":"m.text"},"ts":1473409598000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you should prolly give Domenic write access to that repo so he can create branches","msgtype":"m.text"},"ts":1473409860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: and then protect master to only give the editors push access to that branch","msgtype":"m.text"},"ts":1473409878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: or some such","msgtype":"m.text"},"ts":1473409881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I think that's the way to go if you have contributors that come back a lot, just give them write access so you can collaborate on branches, but protect master from accidents (other than your own)","msgtype":"m.text"},"ts":1473409927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't have admin access.","msgtype":"m.text"},"ts":1473409946000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I guess heycam does","msgtype":"m.text"},"ts":1473409956000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heycam: ^^","msgtype":"m.text"},"ts":1473409963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would be weird if not","msgtype":"m.text"},"ts":1473409972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how do you do fine grained access control like that?","msgtype":"m.text"},"ts":1473410126000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"branch protection for gh-pages says \"Disables force-pushes to this branch and prevents it from being deleted\" so I guess that's not it","msgtype":"m.text"},"ts":1473410126000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: should be at https://github.com/heycam/webidl/settings/branches/master","msgtype":"m.text"},"ts":1473410343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: or https://github.com/heycam/webidl/settings/branches/gh-pages I guess","msgtype":"m.text"},"ts":1473410360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: should have \"Restrict who can push to this branch\"","msgtype":"m.text"},"ts":1473410385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no I don't see that","msgtype":"m.text"},"ts":1473410395000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"maybe that's only available for orgs?","msgtype":"m.text"},"ts":1473410399000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: https://github.com/blog/2051-protected-branches-and-required-status-checks none of this is there?","msgtype":"m.text"},"ts":1473410459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no I see that","msgtype":"m.text"},"ts":1473410495000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: so maybe you first need to make gh-pages a protected branch","msgtype":"m.text"},"ts":1473410507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: and then once it is, you can add further protections","msgtype":"m.text"},"ts":1473410516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see any more options even after I enable protection","msgtype":"m.text"},"ts":1473410539000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"just the \"Require status checks \" one","msgtype":"m.text"},"ts":1473410544000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"oh that opens some more things when I check it","msgtype":"m.text"},"ts":1473410557000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"grr","msgtype":"m.text"},"ts":1473410558000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"though I'm not sure if the status checks one is what I want either...","msgtype":"m.text"},"ts":1473410584000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yeah, status checks isn't important unless you have some integration thing setup","msgtype":"m.text"},"ts":1473410619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so I just see this: http://mcc.id.au/temp/branch.png","msgtype":"m.text"},"ts":1473410675000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: fascinating","msgtype":"m.text"},"ts":1473410757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: maybe it's only available for \"master\"","msgtype":"m.text"},"ts":1473410777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1473410782000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: no, it's an org feature as you thought","msgtype":"m.text"},"ts":1473410806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1473410809000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"how about I just add domenic and he can exercise restraint, in only pushing branches","msgtype":"m.text"},"ts":1473410810000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"https://help.github.com/articles/about-protected-branches/","msgtype":"m.text"},"ts":1473410812000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1473410817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do that","msgtype":"m.text"},"ts":1473410822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok done","msgtype":"m.text"},"ts":1473410847000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk, tobie: btw, there's also https://github.com/blog/2247-improving-collaboration-with-forks now","msgtype":"m.text"},"ts":1473412557000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: oh wow, that's great","msgtype":"m.text"},"ts":1473412654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah very nice","msgtype":"m.text"},"ts":1473413252000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: oh, I thought I had seen that somewhere! Thanks for sharing.","msgtype":"m.text"},"ts":1473413531000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"bz: sorry you're having issues building Bikeshed","msgtype":"m.text"},"ts":1473432545000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"bz: TabAtkins should be able to help you debug.","msgtype":"m.text"},"ts":1473432578000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: when/why did headers.getAll vanish?","msgtype":"m.text"},"ts":1473435242000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"nm found https://github.com/whatwg/fetch/commit/42464c","msgtype":"m.text"},"ts":1473436102000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: new Headers([['foo', 'bar'], ['foo', 'yay']]).get('foo') returns \"bar\" in both Firefox & Chrome. It should be \"bar,yay\" right?","msgtype":"m.text"},"ts":1473436457000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah","msgtype":"m.text"},"ts":1473436474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"filing","msgtype":"m.text"},"ts":1473436490000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: WebKit made a convincing argument that since we don't expose cookies, we shouldn't expose non-mapness to developers","msgtype":"m.text"},"ts":1473436519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: should they be combined at iteration time too?","msgtype":"m.text"},"ts":1473436565000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"[...new Headers([['foo', 'bar'], ['foo', 'yay']])].length == 2 in Chrome","msgtype":"m.text"},"ts":1473436615000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1473436624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: iteration is the result of https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine","msgtype":"m.text"},"ts":1473436642000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ta, will file","msgtype":"m.text"},"ts":1473436730000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Safari combines with ', ' rather than ',' - are they wrong?","msgtype":"m.text"},"ts":1473437206000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: technically, I think they're fixing that","msgtype":"m.text"},"ts":1473437437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1473437447000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1301713","msgtype":"m.text"},"ts":1473437510000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1473437566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and https://bugzilla.mozilla.org/show_bug.cgi?id=1301714","msgtype":"m.text"},"ts":1473437681000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you might care about https://github.com/WICG/async-cookies-api/issues/36","msgtype":"m.text"},"ts":1473437783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am, cheers!","msgtype":"m.text"},"ts":1473438043000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"am interested that is","msgtype":"m.text"},"ts":1473438054000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"dglazkov u around?","msgtype":"m.text"},"ts":1473438401000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"actually... anybody around who might have more discussion history on this https://docs.google.com/document/d/1E16tmoOveGopys9Fx4Nn8x8P9q7Jm6CJIqoJyz31tlg/edit","msgtype":"m.text"},"ts":1473438443000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"bkardell: What's up?","msgtype":"m.text"},"ts":1473438954000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do you have additional links on where aspects of this were discussed?","msgtype":"m.text"},"ts":1473438979000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"No, tho there is some links in the doc, and several issues in the wicg repo you can look to for more details.","msgtype":"m.text"},"ts":1473439021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"like... I have concerns/thoughts but I'm sure it's pretty likely they've been discussed","msgtype":"m.text"},"ts":1473439031000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"What's the context of your question? What specifically do you want to know?","msgtype":"m.text"},"ts":1473439033000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah I've been looking","msgtype":"m.text"},"ts":1473439035000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"Domenic: Rebased https://github.com/heycam/webidl/pull/170, think you could give it a look?","msgtype":"m.text"},"ts":1473439386000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: see https://github.com/whatwg/dom/pull/313#issuecomment-242428180 for information about what might cause the span noise","msgtype":"m.text"},"ts":1473439951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, thanks!","msgtype":"m.text"},"ts":1473439986000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hmm.","msgtype":"m.text"},"ts":1473439989000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My Pygments version is 2.0.2","msgtype":"m.text"},"ts":1473440859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Was there some regression inbetween?","msgtype":"m.text"},"ts":1473440870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes, I think newer versions add empty spans","msgtype":"m.text"},"ts":1473440898000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Bah","msgtype":"m.text"},"ts":1473440915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe Bikeshed should do some kind of version check on pygments before running","msgtype":"m.text"},"ts":1473441105000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: in HTML, do I need to do `<dfn data-lt=\"transferable object\">transferable objects</dfn>` or will Bikeshed/Shepherd figure out the pluralness itself?","msgtype":"m.text"},"ts":1473441488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: It's best to lt the \"base\" version.  Bikeshed will handle <dfn>conjugated</dfn> => <a>conjugate</a>, but not <a>conjugating</a>. (It only goes to/from the base form once.)","msgtype":"m.text"},"ts":1473441950000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didn't know there were empty spans in newer versions. Should be trivial to remove manually.","msgtype":"m.text"},"ts":1473441988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm, looks like they're always just at the start of the highlight blocks?","msgtype":"m.text"},"ts":1473442069000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and fixed","msgtype":"m.text"},"ts":1473443704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: https://github.com/tabatkins/bikeshed/commit/127d0ac944ee152012efcc16c66ed88b50177810 broke the permissions spec. Any suggestions for how to let other specs define the enum-values from https://w3c.github.io/permissions/#enumdef-permissionname?","msgtype":"m.text"},"ts":1473446041000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"tobie Domenic: ^","msgtype":"m.text"},"ts":1473447061000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I can define a bunch of new terms like `\"bluetooth\" permission-related algorithms`, and have a lookup table in the Permissions spec. We might have to do that anyway once PermissionName merges into the Feature Policy spec.","msgtype":"m.text"},"ts":1473447480000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: If Permissions isn't defining the values, it shouldn't have them in WebIDL blocks, as those are inferred to be defining.  (I'm really not sure what I was thinking with my original \"link elsewhere if already defined\" code in the first place; I think maybe I just didn't know about partial?)  If you want it to look WebIDL-ish, just use <pre","msgtype":"m.text"},"ts":1473448796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"class=lang-webidl>, and write <a>s in the source to link them up.","msgtype":"m.text"},"ts":1473448796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Sorry for breaking your previous use; you didn't know it was non-idiomatic, and that was my fault.)","msgtype":"m.text"},"ts":1473448812000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27048","msgtype":"m.text"},"ts":1473453178000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: and in particular: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27048#c3","msgtype":"m.text"},"ts":1473453235000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: but there seems to be a lot of resistance to that idea.","msgtype":"m.text"},"ts":1473453262000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Yeah, it's important that there be an index that points to all the enum values, although Shepherd might give us that soon. Faking the IDL block with explicit links might be the way to go here, until the next set of things changes.","msgtype":"m.text"},"ts":1473453649000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"TabAtkins: Using class=lang-webidl makes the enum disappear from the IDL Index.","msgtype":"m.text"},"ts":1473454861000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Yes, because then you're not defining it. ^_^ Okay, let's start over from the beginning. You want to define an enum, but not define any of its values? Or maybe just some of its values, and let other specs define other values, but still document those external values in this core spec?","msgtype":"m.text"},"ts":1473454926000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Exactly.","msgtype":"m.text"},"ts":1473454938000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"It's a registry, where remote specs ought to define their set of algorithms and types, and then the Permissions spec should link to them.","msgtype":"m.text"},"ts":1473454965000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Initially, most of the entries are defined locally, but it doesn't work well for the Permissions editors to maintain the details of, say, the Media algorithms.","msgtype":"m.text"},"ts":1473454995000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Okay. So. In a normal WebIDL block, put the enum and the values that you define in this spec. Then gimme a sec to fix up the (purposely undocumented) <index> element so it'll work for your use-case; it's 95% of the way there right now. It'll generate an index of all known enum-value values for the given enum.","msgtype":"m.text"},"ts":1473455037000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"!!! So then other specs can write, what, `enum PermissionName { \"my-value\" }`, and the <index> will automatically link to there?","msgtype":"m.text"},"ts":1473455105000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Where would {{PermissionName}} link in that case? We really do want tobie's suggestion of partial enums for this.","msgtype":"m.text"},"ts":1473455125000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Well, we dont' have partial enum support in WebIDL, so they'll have to do it manually, with <dfn enum-value for=PerimissionName>\"my-value\"</dfn>, but yes.","msgtype":"m.text"},"ts":1473455169000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which is what they're doing right now, so that's fine.","msgtype":"m.text"},"ts":1473455187000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"If they did it with WebIDL, then {{PermissionName}} would just complain about multiple possible refs.","msgtype":"m.text"},"ts":1473455200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Will the <index> add the other values to the IDL Index in the Permissions spec?","msgtype":"m.text"},"ts":1473455238000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"No, it'll generate an index right there, like in https://drafts.csswg.org/indexes/","msgtype":"m.text"},"ts":1473455283000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you'd need some explanatory text around it to give it context.","msgtype":"m.text"},"ts":1473455309000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mhmm. And we'd lose the unified IDL for PermissionName that implementers can copy into their .idl files, but that's not the end of the world.","msgtype":"m.text"},"ts":1473455350000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I could work on something to make that work a little better; I see the value in having a \"unified\" IDL block for anything that can be partial'd.","msgtype":"m.text"},"ts":1473455419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But the index thing is nearly ready right now. ^_^","msgtype":"m.text"},"ts":1473455428000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We should probably add partial enums","msgtype":"m.text"},"ts":1473455434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, the index is probably better than what I'm doing right now.","msgtype":"m.text"},"ts":1473455617000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"It'll be automagical, so yeah.","msgtype":"m.text"},"ts":1473455733000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jyasskin: in that case, isn't the unified block actually *not* what you want? As I mentioned in the comment linked above, why would you want an enum value representing a permission for something you haven't implemented?","msgtype":"m.text"},"ts":1473456219000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: For Bluetooth, we take the IDL blocks and comment out the lines we haven't implemented yet: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/modules/bluetooth/BluetoothRemoteGATTCharacteristic.idl?l=17. But maybe people won't actually copy the PermissionName IDL block verbatim into their implementations.","msgtype":"m.text"},"ts":1473456345000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin:","msgtype":"m.text"},"ts":1473456521000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(sorry, auto tab mixup)","msgtype":"m.text"},"ts":1473456561000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: from an implementor's perspective, I guess this boils down to whether if fits the code structure more to group the permissions together, or scatter them across the different features they enable. I would imagine the former be easier to setup and the latter to maintain, by ymmv.","msgtype":"m.text"},"ts":1473457123000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah. I don't know for sure whether it'd help folks to have an IDL Index that includes everything.","msgtype":"m.text"},"ts":1473457229000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Domenic/annevk: I'd like to use \"relevant settings object\" without an explicit platform object to refer to the relevant settings object of the *context object*. Does that sound like a good idea? I'll send you an HTML patch if so.","msgtype":"m.text"},"ts":1473457643000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I could also just write \"this's relevant settings object\".","msgtype":"m.text"},"ts":1473457671000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah seems bad. This's or the context object's seems better.","msgtype":"m.text"},"ts":1473459278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: 'k","msgtype":"m.text"},"ts":1473459459000,"senderName":"jyasskin","senderId":"jyasskin@irc"}
]