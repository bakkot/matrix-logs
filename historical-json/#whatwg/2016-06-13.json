[
{"content":{"body":"it seems that when I try to draw a >100 bezier curve segment path in the canvas, only the first 100 segments get drawn","msgtype":"m.text"},"ts":1465781391000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"does anyone know where that limit is documented?","msgtype":"m.text"},"ts":1465781397000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"(I apparently this limit in both safari and firefox)","msgtype":"m.text"},"ts":1465781411000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"doesn't raise any console errors or anything, just silently stops adding segments to the path","msgtype":"m.text"},"ts":1465781712000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"okay nevermind, the effect apparently vanished, and now I can't reproduce it.","msgtype":"m.text"},"ts":1465783374000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"maybe was a bug in my code","msgtype":"m.text"},"ts":1465783378000,"senderName":"jacobolus","senderId":"jacobolus@irc"},
{"content":{"body":"annevk: I'd like to move the \"site for cookies\" definition from https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-2.1.1 to somewhere (and potentially expose it to JavaScript).","msgtype":"m.text"},"ts":1465814605000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: We discussed this (very) briefly in February (https://lists.w3.org/Archives/Public/ietf-http-wg/2016JanMar/0249.html). It's not clear to me what needs to go where, though. :)","msgtype":"m.text"},"ts":1465814647000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Is \"site for cookies\" a concept you'd see folding into HTML? Or Fetch? Or touching both, I suppose?","msgtype":"m.text"},"ts":1465814670000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Touches on https://storage.spec.whatwg.org/#site, as well, of course.","msgtype":"m.text"},"ts":1465814738000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: HTML I suppose, with URL defining site?","msgtype":"m.text"},"ts":1465818623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyone in the Metropole already? wanderview and I are considering lunch in a bitâ€¦","msgtype":"m.text"},"ts":1465818667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: from other channelspeople I know are in the one that begins with L whose name I've now forgotten","msgtype":"m.text"},"ts":1465818753000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Landmark. That's it.","msgtype":"m.text"},"ts":1465818774000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But that's probably sample bias as to who I speak to more :P","msgtype":"m.text"},"ts":1465818786000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Metropole houses platform supposedly","msgtype":"m.text"},"ts":1465818805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Research is all in Landmark","msgtype":"m.text"},"ts":1465818818000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ugh, that should really be located with platform, imo","msgtype":"m.text"},"ts":1465818857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"suspects this mostly came down to fitting with the number of rooms they got for a not insane price","msgtype":"m.emote"},"ts":1465818895000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"not insane price\" and London don't really go together though","msgtype":"m.text"},"ts":1465818909000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The Landmark is considerably more insane","msgtype":"m.text"},"ts":1465819446000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So I iamgine they filled the cheap(er) hotels first and then put the remainders in the expensive one","msgtype":"m.text"},"ts":1465819479000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"does anyone know where the volunteers ended up?","msgtype":"m.text"},"ts":1465819506000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Metropole for some at least","msgtype":"m.text"},"ts":1465819980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was just like \"yyeeeaaaahhhhh sharing a room I'll stay half an hour away with a room of my own for free\"","msgtype":"m.text"},"ts":1465820039000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Also, please don't use insane in a derogatory way","msgtype":"m.text"},"ts":1465820051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: didn't know you moved","msgtype":"m.text"},"ts":1465820107000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I haven't","msgtype":"m.text"},"ts":1465820150000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins, others: Is there a bikeshed definition <-> auto-link dictionary?","msgtype":"m.text"},"ts":1465826592000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"context: looking at converting WebIDL to bikeshed and seems reverse-engineering the links to bikeshed shorthand would make for an easier to edit spec.","msgtype":"m.text"},"ts":1465826635000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie, did we manage to get you here for the meeting?","msgtype":"m.text"},"ts":1465828818000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yup--got my plane and Heathrow Express tickets","msgtype":"m.text"},"ts":1465828869000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Now trying to find a couch or hotel room.","msgtype":"m.text"},"ts":1465828879000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"igrigorik_: is <link rel=preload> meant to be allowed in the body of a document? (not just in the head)","msgtype":"m.text"},"ts":1465831774000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"igrigorik_: I mean in the way that rel=prerender/prefetch/preconnect are allowed in the body now","msgtype":"m.text"},"ts":1465831791000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"igrigorik_: nm, looking at https://github.com/whatwg/html/pull/616 now I see you specifically mention it","msgtype":"m.text"},"ts":1465831891000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tobie: What do you mean?","msgtype":"m.text"},"ts":1465837535000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the WebIDL spec is a pretty large XML file","msgtype":"m.text"},"ts":1465837572000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"which gets converted to HTML through an XSLT stylesheet","msgtype":"m.text"},"ts":1465837591000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Right.","msgtype":"m.text"},"ts":1465837595000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I've done PRs on it.)","msgtype":"m.text"},"ts":1465837600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The idea's to convert it to Bikeshed","msgtype":"m.text"},"ts":1465837623000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Right, now I'm toying with doing that using a modified version of the XSLT stylesheet used to convert it to HTML","msgtype":"m.text"},"ts":1465837664000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'd strongly recommend just converting it to Bikeshed-HTML directly. ^_^","msgtype":"m.text"},"ts":1465837702000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh yeah, absolutely","msgtype":"m.text"},"ts":1465837743000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Doing such transformations on such a huge spec manually seems brittle, though","msgtype":"m.text"},"ts":1465837773000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Eh, I did it with DOM. You'd have to ask annevk, but I think I did all right.","msgtype":"m.text"},"ts":1465837827000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But anyway!","msgtype":"m.text"},"ts":1465837847000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You did it by hand?","msgtype":"m.text"},"ts":1465837847000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1465837850000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it took a few months worth of weekends, tho. ^_^","msgtype":"m.text"},"ts":1465837887000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1465837892000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"an transform sheet seems a lot faster, then. :D","msgtype":"m.text"},"ts":1465837915000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But yeah, anyway, I was actually asking what you meant by \" Is there a bikeshed definition <-> auto-link dictionary?\". I know all about your project (I helped Domenic deal with it)","msgtype":"m.text"},"ts":1465837928000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: right","msgtype":"m.text"},"ts":1465837961000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Maybe my assumptions are wrong, here, so do tell me if they are. :)","msgtype":"m.text"},"ts":1465837985000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: what I was thinking was that it would be better to turn the expanded HTML links and dfns into bikeshed shorthand","msgtype":"m.text"},"ts":1465838025000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(better for editing purposes)","msgtype":"m.text"},"ts":1465838043000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"sure. so what are you actually asking for?","msgtype":"m.text"},"ts":1465838213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: For example, when I see <dfn data-export=\"\" data-dfn-for=\"union\" id='dfn-flattened-union-member-types'>flattened member types</dfn> how do I best turn it into bikeshed shorthand","msgtype":"m.text"},"ts":1465838289000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah!","msgtype":"m.text"},"ts":1465838313000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, sorry if that wasn't super clear.","msgtype":"m.text"},"ts":1465838334000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So in general, the docs for marking up definitions should explain this.  It doesn't have *details* on this reverse transformation, but it should be obvious what becomes what.","msgtype":"m.text"},"ts":1465838350000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In particular, that example becomes:","msgtype":"m.text"},"ts":1465838359000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<dfn export for=union id=dfn-flattened-union-member-types>flattened member types</dfn>","msgtype":"m.text"},"ts":1465838390000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's mostly just dropping the prefixes on the attrs.","msgtype":"m.text"},"ts":1465838399000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you want to convert links all the way down to the textual shorthands it's a bit more dramatic, obvious.","msgtype":"m.text"},"ts":1465838423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's the links I was interested in actually","msgtype":"m.text"},"ts":1465838442000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Same advice applies then. Gimme an example, and i'll brb","msgtype":"m.text"},"ts":1465838472000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<a class='dfnref' href='#dfn-optional-argument'>operation optional argument</a>","msgtype":"m.text"},"ts":1465838624000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"for example","msgtype":"m.text"},"ts":1465838627000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"^ TabAtkins","msgtype":"m.text"},"ts":1465838649000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: So it depends a little bit on what the linking text of the dfn is; if it matches the text you're linking, it's just <a>operation optional argument</a>.","msgtype":"m.text"},"ts":1465838894000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or in text shorthand form, [=operation optional argument=]","msgtype":"m.text"},"ts":1465838910000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you're linking slightly different text than what the definition declares, you've got two options.","msgtype":"m.text"},"ts":1465838933000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Either expand the dfn's linking text, with <dfn lt=\"first text | second text | ...\">","msgtype":"m.text"},"ts":1465838952000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1465838959000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or specify the linking text manually on the link, with either <a lt=\"linking text\">visible text</a>","msgtype":"m.text"},"ts":1465838970000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or [=linking text|visible text=]","msgtype":"m.text"},"ts":1465838982000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK, I guess the part I'm slightly confused about is how does the linking text relate to the dfn's id","msgtype":"m.text"},"ts":1465839041000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"especially if you specify the id manually","msgtype":"m.text"},"ts":1465839051000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"There is no intrinsic relation.  Bikeshed will auto-gen an ID for you from the dfn's (first) linking text (and its type), but that has nothing to do with autolinking.  If you specify an ID manually, it just leave that alone.","msgtype":"m.text"},"ts":1465839098000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK. SO I guess I should just use the href of the links to get to the dfn, and use the dfn's textContent as lt foe the link.","msgtype":"m.text"},"ts":1465839291000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/for/foe/","msgtype":"m.text"},"ts":1465839302000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Since you're coming from a spec with IDs that don't match up with Bikeshed's autogenning pattern, you should definitely manually preserve all the current IDs.","msgtype":"m.text"},"ts":1465839306000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"absolutely","msgtype":"m.text"},"ts":1465839314000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"And yeah, that'll work.  You can then do a cleanup pass to remove any lt that matches the literal text.","msgtype":"m.text"},"ts":1465839353000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But ideally (and again, correct me if I'm wrong), the links and dfns inside of the spec itself shouldn't rely on these legacy IDs.","msgtype":"m.text"},"ts":1465839379000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Correct, Bikeshed doesn't care about IDs one whit.","msgtype":"m.text"},"ts":1465839395000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Alright. That makes sense.","msgtype":"m.text"},"ts":1465839414000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Thanks.","msgtype":"m.text"},"ts":1465839421000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"np, ping me if you have any other questions, happy to help get this project to completion.","msgtype":"m.text"},"ts":1465839442000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Follow-up Q if I may. Since I'll be generating those links, would you go for constantly using <a> or would you favor the shorthand?","msgtype":"m.text"},"ts":1465839468000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Don't care, up to you.","msgtype":"m.text"},"ts":1465839503000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: is there a best practice of some sort, here?","msgtype":"m.text"},"ts":1465839533000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I mean, I haven't used Bikeshed beyond the sensor specs","msgtype":"m.text"},"ts":1465839552000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Nope, it's up to the spec author which they prefer.","msgtype":"m.text"},"ts":1465839555000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Particularly for \"dfn\"-type links.  I strongly recommend using the text shorthand for the other types, like IDL.","msgtype":"m.text"},"ts":1465839578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But the difference between <a>foo</a> and [=foo=] is fairly small, so whatever.","msgtype":"m.text"},"ts":1465839599000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok, that makes sense.","msgtype":"m.text"},"ts":1465839612000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Thanks","msgtype":"m.text"},"ts":1465839615000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: If the XSLT solution proves to be the right one (and so far it does), I'll run the output your way before merging it.","msgtype":"m.text"},"ts":1465839764000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1465839771000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Apple just announced Apple Pay in websites","msgtype":"m.text"},"ts":1465840237000,"senderName":"frewsxcv_","senderId":"frewsxcv_@irc"},
{"content":{"body":"Where's that in a spec? :)","msgtype":"m.text"},"ts":1465840248000,"senderName":"frewsxcv_","senderId":"frewsxcv_@irc"},
{"content":{"body":"frewsxcv_: hopefully it is https://w3c.github.io/browser-payment-api/","msgtype":"m.text"},"ts":1465842284000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Welp https://developer.apple.com/reference/applepayjs","msgtype":"m.text"},"ts":1465845929000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"what's an \"iOS and OS X Safari based website\"?","msgtype":"m.text"},"ts":1465846152000,"senderName":"jamesr_","senderId":"jamesr_@irc"},
{"content":{"body":"a website for people with money","msgtype":"m.text"},"ts":1465846260000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"money to throw away on items needed to buy items sold on your website that only renders on those said expensive items","msgtype":"m.text"},"ts":1465846302000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tobie: I just added an \"extended-attribute\" definition type, for the bunch of [foo] things that WebIDL defines.  The linking text will be the word itself, not including the brackets.","msgtype":"m.text"},"ts":1465855609000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(This'll automatically link things up in everyone's WebIDL blocks once you finish up the spec conversion.)","msgtype":"m.text"},"ts":1465855635000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I'm not sure what you mean (yet) but this sounds great.","msgtype":"m.text"},"ts":1465855732000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"hi, I'm trying to create a filter using python that would search all the data token for some strings and wrap the results in some tag (like <mark>)","msgtype":"m.text"},"ts":1465855742000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"tobie: I mean that when you're marking up all the extended attributes in section 4.3, mark them up with the new type.","msgtype":"m.text"},"ts":1465855806000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah--sorry; past midnight, slow brain gets slower.","msgtype":"m.text"},"ts":1465855838000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"here is what I have at the moment: http://dpaste.com/2DP0RFW","msgtype":"m.text"},"ts":1465855867000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"but in between line 16 and 20 it is a little bit fuzzy","msgtype":"m.text"},"ts":1465855887000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"TabAtkins: sounds like this might be easier to do post-conversion.","msgtype":"m.text"},"ts":1465855963000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"We'll see.","msgtype":"m.text"},"ts":1465855966000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Yeah, it's just a five-minute pass over the headings to mark them as definitions of the right type.","msgtype":"m.text"},"ts":1465855984000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1465855991000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Just pinging you now, because I just added this at HTML's request, because they define several extended attributes of their own.","msgtype":"m.text"},"ts":1465856012000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aleray: This sounds like something that should just be done by re.sub().","msgtype":"m.text"},"ts":1465856048000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, can I do this in a filter? I tried but it escaped all the html entities","msgtype":"m.text"},"ts":1465856098000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"What is a filter?","msgtype":"m.text"},"ts":1465856107000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It sounds like you're using some web framework?)","msgtype":"m.text"},"ts":1465856128000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins, I'm using HTML5lib filters","msgtype":"m.text"},"ts":1465856130000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"sorry I should have mentionned","msgtype":"m.text"},"ts":1465856146000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"Oh! I have no clue, never used those.  I work in an LXML tree after html5lib is done, and wrote a variant of re.sub() that handles replacing string bits with real objects.","msgtype":"m.text"},"ts":1465856210000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I could actually make my life easier working directly on the tree","msgtype":"m.text"},"ts":1465856233000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"OK I try","msgtype":"m.text"},"ts":1465856238000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1465856244000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"https://github.com/tabatkins/bikeshed/blob/master/bikeshed/config.py#L356 and the following function","msgtype":"m.text"},"ts":1465856307000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reSubObject() actually does the substitution, but processTextNodes() lets me chain that across multiple replacers easily.","msgtype":"m.text"},"ts":1465856339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]