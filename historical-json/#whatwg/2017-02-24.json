[
{"content":{"body":"I'm seeing: Content-Type: image/jpeg;charset=UTF-8","msgtype":"m.text"},"ts":1487897822000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"in the wild","msgtype":"m.text"},"ts":1487897824000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Can someone tell me what this means?","msgtype":"m.text"},"ts":1487897828000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"In the sense of \"do browsers treat this differently from Content-Type: image/jpeg\"","msgtype":"m.text"},"ts":1487897854000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I don't think browsers use the content-type header for images, Jasper","msgtype":"m.text"},"ts":1487901233000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Alright.","msgtype":"m.text"},"ts":1487901242000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"(They sniff the first few bytes)","msgtype":"m.text"},"ts":1487901247000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, wait, really?","msgtype":"m.text"},"ts":1487901254000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"So you're saying I can send text/plain for images and browsers could still understand it","msgtype":"m.text"},"ts":1487901280000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1487901290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://mimesniff.spec.whatwg.org/#matching-an-image-type-pattern","msgtype":"m.text"},"ts":1487901312000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"does that only work in <img> / <picture> / whatever context or would it also work for navigation","msgtype":"m.text"},"ts":1487901314000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I think only subresources","msgtype":"m.text"},"ts":1487901363000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1487901365000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"(and not script subresources if they are served with X-Content-Type-Options: nosniff or whatever that header is)","msgtype":"m.text"},"ts":1487901410000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Navigation too to some extent","msgtype":"m.text"},"ts":1487914516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: about the outline feature in the checker, I jus tnow restored it to conformance with the HTML spec","msgtype":"m.text"},"ts":1487919649000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"by changing it back to now showing headings for sectioning roots, as the spec requires","msgtype":"m.text"},"ts":1487919687000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it shows them in the “Heading-level outline”, which is a different thing that doesn’t intend to conform to the outline algorithm","msgtype":"m.text"},"ts":1487919740000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it doesn’t now show them in the “Structural outline”, which is the one intended to show users what the spec says the structure of their document looks like (per the outline algorithm)","msgtype":"m.text"},"ts":1487919800000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: I had not read your article til yesterday but after reading it, I agree with everything you wrote there","msgtype":"m.text"},"ts":1487919862000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems like the people advocating for <h> don’t understand (or don’t care) that it’s no going to eliminate the need for the outline algorithm","msgtype":"m.text"},"ts":1487919927000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"instead as far as I can see <h> would pretty much enshrine the outline algorithm (if browsers ever implemented <h>, which I think there is almost no chance of them ever doing)","msgtype":"m.text"},"ts":1487920054000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, I hope so, but Firefox still landed limited longdesc support after a UX developer got harassed","msgtype":"m.text"},"ts":1487920145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure but <h> would not be any solution for the accessiblity problem","msgtype":"m.text"},"ts":1487920170000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"given that problem is due to browsers not having implemented the outline algorithm for exposing the heading to AT the right way","msgtype":"m.text"},"ts":1487920221000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA points that out in his article pretty clearly, so dunno why others would have a hard time understanding that","msgtype":"m.text"},"ts":1487920285000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway until I read JakeA’s article I didn’t know the checker feature was linked to in it","msgtype":"m.text"},"ts":1487920344000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but after reading it I can the checker feature is useful for letting people compare the heading outline to the outline-algorithm outline","msgtype":"m.text"},"ts":1487920434000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"especially for a case like https://checker.html5.org/?showoutline=yes&doc=https://output.jsbin.com/wulimo","msgtype":"m.text"},"ts":1487920448000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so now it’s back to being that","msgtype":"m.text"},"ts":1487920525000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hmm, https://api.csswg.org/bikeshed/ is returning a 400 for Travis","msgtype":"m.text"},"ts":1487920564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At least for XMLHttpRequest","msgtype":"m.text"},"ts":1487920568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: just tried in on a test file locally and it worked fine","msgtype":"m.text"},"ts":1487920706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"with curl","msgtype":"m.text"},"ts":1487920710000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"curl https://api.csswg.org/bikeshed/ -F file=@./bikeshed/tests/pre001.bs","msgtype":"m.text"},"ts":1487920737000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://travis-ci.org/whatwg/xhr/builds/204867728","msgtype":"m.text"},"ts":1487920788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1487920806000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: I used jsdom for the very first time yesterday. It \"just worked\" OOTB, including \"location\" and \"XMLHttpRequest\" APIs. So \"thank you!\" :-)","msgtype":"m.text"},"ts":1487920849000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"It's consistently failing it seems, so I guess that means we can't land any standard changes today","msgtype":"m.text"},"ts":1487921524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: I guess you're asleep, but if not,  https://api.csswg.org/bikeshed/ is returning 400s when accessed from Travis","msgtype":"m.text"},"ts":1487921552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'll bug plinss","msgtype":"m.text"},"ts":1487921759000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ta","msgtype":"m.text"},"ts":1487922361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: is the intent for the headings inside the section roots to be completely lost? Feels like we need to find out Hixie's intent behind some of this stuff.","msgtype":"m.text"},"ts":1487923308000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I don’t know what the intent was but that is what the spec requires","msgtype":"m.text"},"ts":1487923350000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"specifically, per the outline algorithm, the sectioning-root headings do not get added the (abstract) outline at all","msgtype":"m.text"},"ts":1487923394000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"they just get completely skipped","msgtype":"m.text"},"ts":1487923403000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean, so it’s not just about whether they get shown in some rendered view of the outline","msgtype":"m.text"},"ts":1487923428000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but as far as figuring out the intent of sectioning roots, it was never documented anywhere that I could find","msgtype":"m.text"},"ts":1487923468000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it was just added to the spec, with no but cited and no discussion I could find in the mailing-list archives","msgtype":"m.text"},"ts":1487923495000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Feels like a bug doesn't it? I'll bug Hixie and see if I can find out what got him there","msgtype":"m.text"},"ts":1487923508000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah it might be worthwhile to ask him","msgtype":"m.text"},"ts":1487923540000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I don’t think it’s an unintended bug. It’s by design","msgtype":"m.text"},"ts":1487923598000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Naively it feels like the heading level should be +1 the parent section's heading, so it'd be good to know why it's as complicated as it is.","msgtype":"m.text"},"ts":1487923605000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"there are a number of things about that outline algorithm that aren’t intuitive at all","msgtype":"m.text"},"ts":1487923633000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and in my personal experiences in talking with Ian about it have not been super enlightening for me","msgtype":"m.text"},"ts":1487923695000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I kind of gave up on asking","msgtype":"m.text"},"ts":1487923733000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but maybe you’ll have more luck","msgtype":"m.text"},"ts":1487923735000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"isn't the idea that you would run an outline on the sectioning root?","msgtype":"m.text"},"ts":1487923820000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"maybe that was the idea","msgtype":"m.text"},"ts":1487923848000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so if you have a <blockquote>, headings in there are not part of the outer outline. but the <blockquote> can have its own outline","msgtype":"m.text"},"ts":1487923854000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so what do you do with the blockquote outline, in the context of the document?","msgtype":"m.text"},"ts":1487923889000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that’s another problem with the spec, it doesn’t say anything about how to expose outlines","msgtype":"m.text"},"ts":1487923934000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"other than the accessibility-related requirements","msgtype":"m.text"},"ts":1487923952000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"possibly the concept of sectioning roots and multiple outlines doesn't map well to anything that users interact with","msgtype":"m.text"},"ts":1487924116000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I think that’s probably the source of some of the confusion","msgtype":"m.text"},"ts":1487924276000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't really understand the difference (for a11y) between a section and a section root","msgtype":"m.text"},"ts":1487924638000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if you expose the \"sections\", you wouldn't want to include every <blockquote> or <td> there. but if they have headings inside, they are in their own islands to not \"mess up\" the sections on the outside","msgtype":"m.text"},"ts":1487924857000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Ahh, so sectioning elements are sectioning roots + exposure?","msgtype":"m.text"},"ts":1487925009000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I haven't seen a lot to suggest that the exposure of sections is valuable. Maybe that's what we're getting stuck on.","msgtype":"m.text"},"ts":1487925072000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sectioning elements are treated differently from sectioning roots in the outline also in that an explicit sectioning element closes implied sections, but sectioning roots do not","msgtype":"m.text"},"ts":1487925155000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: run this is https://checker.html5.org/ with \"outline\" checked","msgtype":"m.text"},"ts":1487925210000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<!DOCTYPE html><title>Test</title><h1>h1</h1><h2>h2</h2><h3>h3</h3><section><h4>h4</h4></section><h3>h3</h3>","msgtype":"m.text"},"ts":1487925212000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"then compare to","msgtype":"m.text"},"ts":1487925216000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<!DOCTYPE html><title>Test</title><h1>h1</h1><h2>h2</h2><h3>h3</h3><blockquote><h4>h4</h4></blockquote><h3>h3</h3>","msgtype":"m.text"},"ts":1487925225000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"*penny drops*","msgtype":"m.text"},"ts":1487925299000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: cheers!","msgtype":"m.text"},"ts":1487925305000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np :-)","msgtype":"m.text"},"ts":1487925324000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok, Cloudbleed is my new favorite “HTML parsing is hard” example","msgtype":"m.text"},"ts":1487930776000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: do we know the exact bug yet?","msgtype":"m.text"},"ts":1487930867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: they implemented from the HTML Standard I believe...","msgtype":"m.text"},"ts":1487930876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we don’t, but Tavis’s guess sounds reasonable: https://bugs.chromium.org/p/project-zero/issues/detail?id=1139#c5","msgtype":"m.text"},"ts":1487930911000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"“For the avoidance of doubt: the bug is not in Ragel itself. It is in Cloudflare's use of Ragel. This is our bug and not the fault of Ragel.” — https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/","msgtype":"m.text"},"ts":1487931815000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Well, good to know it's not a bug in the HTML Standard","msgtype":"m.text"},"ts":1487931935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: do you want me to work on https://github.com/w3c/web-platform-tests/pull/4801?","msgtype":"m.text"},"ts":1487935502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems like an example of a \"writing low level code not in Rust is hard\" bug, as much as a \"parsing HTML is hard\" bug","msgtype":"m.text"},"ts":1487935881000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: With https://github.com/whatwg/html/pull/2353, if If E's type is beforeunload and but E is *not* a BeforeUnloadEvent object, can return value ever be false in the \"Otherwise\" block?","msgtype":"m.text"},"ts":1487936264000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: return value is set in step 3 for the first time","msgtype":"m.text"},"ts":1487936421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"The event handler IDL attribute's type is OnBeforeUnloadEventHandler, and the return value will therefore have been coerced into either the value null or a DOMString.\"","msgtype":"m.text"},"ts":1487936471000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: Even if E is not a BeforeUnloadEvent, OnBeforeUnloadEventHandler is still used and thus it means return value is a string, no?","msgtype":"m.text"},"ts":1487936514000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(or null)","msgtype":"m.text"},"ts":1487936518000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah, I guess that's true","msgtype":"m.text"},"ts":1487936591000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: I wonder if that got tested","msgtype":"m.text"},"ts":1487936598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Thanks for confirming.","msgtype":"m.text"},"ts":1487936601000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: No idea, implementing it in Servo.","msgtype":"m.text"},"ts":1487936610000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4907 suggests the algorithm is correct","msgtype":"m.text"},"ts":1487936869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Cool.","msgtype":"m.text"},"ts":1487936876000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Any \"real world\" issues w/ using id-attribute starting with 0-9 in XHTML5? Would I be cutting corners if I went for it?","msgtype":"m.text"},"ts":1487937498000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"in `new Promise(r => setTimeout(r, 10)).then(f)`, is f called in the same event turn as r?","msgtype":"m.text"},"ts":1487937561000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think that f is called in the next event turn (compared to r)","msgtype":"m.text"},"ts":1487937927000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"freenode.org uses cloudflare (see global notice)","msgtype":"m.text"},"ts":1487937949000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: If you're thinking about how the outlining algorithm affects accessibility, pull in aboxhall.","msgtype":"m.text"},"ts":1487938144000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"csarven: only problem is addressing them through CSS requires escapes","msgtype":"m.text"},"ts":1487938356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as does mozilla.org but not bugzilla.mozilla.org","msgtype":"m.text"},"ts":1487938385000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Didn't know about CSS... I thought it was primarily the XML toolchain.","msgtype":"m.text"},"ts":1487938659000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"annevk Escaping as in wrapping the value in quotes?","msgtype":"m.text"},"ts":1487938692000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"csarven: #\\39 or some such","msgtype":"m.text"},"ts":1487938715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"csarven: haven't worked with CSS in a while so I don't quite remember","msgtype":"m.text"},"ts":1487938728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"csarven: https://mothereff.in/css-escapes","msgtype":"m.text"},"ts":1487938735000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"[id=\"1\"] works as well but has different specificity","msgtype":"m.text"},"ts":1487938762000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ondras: are you sure?","msgtype":"m.text"},"ts":1487938837000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no. I just think that.","msgtype":"m.text"},"ts":1487938855000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: not to be confused with: new Promise(r => r()).then(f) where you'd be right (afaik)","msgtype":"m.text"},"ts":1487938896000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: it seems the problem is specific to XMLHttpRequest somehow","msgtype":"m.text"},"ts":1487938902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I can reproduce by running make deploy locally","msgtype":"m.text"},"ts":1487938910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: something with the request is wrong","msgtype":"m.text"},"ts":1487938916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"\\31 \" <-- this is just insanity.","msgtype":"m.text"},"ts":1487938919000,"senderName":"csarven","senderId":"csarven@irc"},
{"content":{"body":"MikeSmith: but it's weird as the script is identical to that for Fullscreen where things do work","msgtype":"m.text"},"ts":1487938942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"csarven: CSS.escape() helps","msgtype":"m.text"},"ts":1487939528000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"MikeSmith: I think the problem is a Bikeshed change","msgtype":"m.text"},"ts":1487939623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: https://github.com/tabatkins/bikeshed/issues/936","msgtype":"m.text"},"ts":1487940027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: ^^","msgtype":"m.text"},"ts":1487940030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: already got a thread going with aboxhall & other a11y folks. May bring it to a more general list though. Trying to figure out why we never implemented.","msgtype":"m.text"},"ts":1487940559000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Cool","msgtype":"m.text"},"ts":1487940569000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: I've been having excessive memory usage issues handling the WG21 ref list for specref","msgtype":"m.text"},"ts":1487940639000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: I haven't precisely identified what the problem is yet,","msgtype":"m.text"},"ts":1487940667000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: but would you possibly be able to provide the data in a format I can more easily stream?","msgtype":"m.text"},"ts":1487940706000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I haven't been paying a lot of attention to that—it's more jfbastien and wash—but I'll ask them.","msgtype":"m.text"},"ts":1487940725000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: ty","msgtype":"m.text"},"ts":1487940773000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Yup, saw it. Will look at in while I'm on the train in a few minutes.","msgtype":"m.text"},"ts":1487950982000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk, Domenic: is there syntax outside of the ES bindings to get at the value of an interface attribute (like there is for infra types and now for dictionaries, records, sequences, etc.)?","msgtype":"m.text"},"ts":1487954810000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, Domenic: use case is to describe creating a dictionary from the values of an interface for custom JSON serialization in a `toJSON` operation.","msgtype":"m.text"},"ts":1487954891000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, Domenic: so it feels like this ties into the slots conversation we had late last year.","msgtype":"m.text"},"ts":1487954954000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk, Domenic: context is Im trying to rewrite the serializer examples (https://heycam.github.io/webidl/#example-eaac10fb) in terms of toJSON operations returning a dictionary.","msgtype":"m.text"},"ts":1487955074000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: If I understand correctly, what you need to do in that case is get the corresponding internal slot values, or \"associated\" values, that back each attribute.","msgtype":"m.text"},"ts":1487957146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So you'd introduce something like \"Assume each of the attributes (`from`, `to`, `amount`, ...) is backed by an associated value of the same, so that each attribute's getter returns the corresponding associated value.\"","msgtype":"m.text"},"ts":1487957284000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then you could reference \"this `Transaction`'s associated from value\"","msgtype":"m.text"},"ts":1487957316000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Note that this only works if they're actually backed by internal slots. Wouldn't work for innerHTML.","msgtype":"m.text"},"ts":1487957479000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Thanks. That's exactly what I was looking for.","msgtype":"m.text"},"ts":1487958604000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: agree. Given this is for a made-up example anyway, we can just decide they are.","msgtype":"m.text"},"ts":1487958660000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: i guess option 1 from your comment is probably the simpest way forward... i still wonder if magic e.returnValue = '' actually solves any real user-facing problems","msgtype":"m.text"},"ts":1487959200000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"(or that is, is required for compat)","msgtype":"m.text"},"ts":1487959211000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"unfortunately i didn't find much when doing archeology when beforeload was added to gecko","msgtype":"m.text"},"ts":1487959274000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"miketaylr: yeah, I dunno, I think it kind of depends on how much appetite cdumez has for churn, and everyone else has for the potential back-compat risks of removing window.BeforeUnloadEvent","msgtype":"m.text"},"ts":1487959522000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"His latest comment does indeed seem to lean toward preserving BeforeUnloadEvent","msgtype":"m.text"},"ts":1487959586000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tbh, i have no personal interest in event.returnValue, but might as well get 'er done","msgtype":"m.text"},"ts":1487959619000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"(meaning, i don't know any any single site that breaks in Firefox w/o it)","msgtype":"m.text"},"ts":1487959671000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"JakeA: after writing this clients.matchAll() focus order test... I think i can say our currently spec'd behavior is weird","msgtype":"m.text"},"ts":1487968816000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Hi :) I've got a question about the javascript \"fetch\" function","msgtype":"m.text"},"ts":1487969242000,"senderName":"JasperNL","senderId":"JasperNL@irc"},
{"content":{"body":"Is it better to use fetch or XMLHttpRequest for now? I don't care about people who use outdated browsers.","msgtype":"m.text"},"ts":1487969276000,"senderName":"JasperNL","senderId":"JasperNL@irc"},
{"content":{"body":"wanderview: hah, yeah","msgtype":"m.text"},"ts":1487969289000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: look at these test expectations: https://hg.mozilla.org/try/rev/8cedfb066814f8dc7e199efd998e392412f554f5#l2.381","msgtype":"m.text"},"ts":1487969325000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I dunno... just felt ridiculous as I wrote out why it was in this strange order","msgtype":"m.text"},"ts":1487969349000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I also found that since windows tend to get focused when created, the only time creation order really comes into play is with iframes","msgtype":"m.text"},"ts":1487969429000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"although I suppose in practice the user could have a bunch of tabs restored on browser start, but not focus them","msgtype":"m.text"},"ts":1487969449000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JasperNL: fetch()! unless you need to cancel the fetch, which isn't possible yet.","msgtype":"m.text"},"ts":1487970139000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thought so already :) Thanks","msgtype":"m.text"},"ts":1487970287000,"senderName":"JasperNL","senderId":"JasperNL@irc"},
{"content":{"body":"JakeA: it may not be possible to write a WPT test for this focus stuff","msgtype":"m.text"},"ts":1487975287000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: think you could pull in https://wg21.link/specref.json directly into Bikeshed?","msgtype":"m.text"},"ts":1487976838000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: it's for the C++ folks","msgtype":"m.text"},"ts":1487976858000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: it currently goes through Specref","msgtype":"m.text"},"ts":1487976887000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: but there's no point having it there","msgtype":"m.text"},"ts":1487976897000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: and it's causing plenty of grief","msgtype":"m.text"},"ts":1487976912000,"senderName":"tobie","senderId":"tobie@irc"}
]