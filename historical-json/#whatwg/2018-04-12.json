[
{"content":{"body":"Domenic: I was reading the webidl commentary in here: https://domenic.github.io/async-local-storage/#storagearea","msgtype":"m.text"},"ts":1523496703000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: just FYI, gecko does have a webidl-to-js binding today... we used it heavily in fxos for things layered on top of IDB","msgtype":"m.text"},"ts":1523496727000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: oh, wow, neat, I should probably fix that then","msgtype":"m.text"},"ts":1523496740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: today, though, we only have one API (webrtc) using it and there is some talk of removing it: https://bugzilla.mozilla.org/show_bug.cgi?id=1450827","msgtype":"m.text"},"ts":1523496783000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'd love to see some output, and compare it to my spare-time hobby project webidl2js. (Well, mostly TimothyGu's project now :)","msgtype":"m.text"},"ts":1523496785000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this is the js implementation of the PeerConnection interface: https://searchfox.org/mozilla-central/source/dom/media/PeerConnection.js","msgtype":"m.text"},"ts":1523496901000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: generated binding code calls into it here: https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/RTCPeerConnectionBinding.cpp#9948","msgtype":"m.text"},"ts":1523496929000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Oh, I see, it generates C++ bindings that wrap JS on the inside","msgtype":"m.text"},"ts":1523496947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we basically do js->c++->js I believe... comment 0 in bug 1450827 discusses some of that","msgtype":"m.text"},"ts":1523496965000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I was thinking of a strategy that generates JS bindings directly","msgtype":"m.text"},"ts":1523496967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah comment 0 makes more sense now","msgtype":"m.text"},"ts":1523496972000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah here are the generated bindings https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/RTCPeerConnectionBinding.cpp#6105","msgtype":"m.text"},"ts":1523497015000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Compare with https://gist.github.com/domenic/1f57ecc0720b3861b58192a67e296e9b","msgtype":"m.text"},"ts":1523497025000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: FWIW, my initial reaction to using \"not webidl\" in your proposal is that it would make it harder to implement... today we either expose APIs as an es global in spidermonkey or via webidl... this would require building something new and different","msgtype":"m.text"},"ts":1523497054000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Actually https://gist.github.com/domenic/b5c395e036781173e123 is a better example","msgtype":"m.text"},"ts":1523497065000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well yeah, this will definitely require something different since it's a module","msgtype":"m.text"},"ts":1523497078000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: whereas if the proposal just used webidl then it would be straightforward to call into IDB c++ code from the new API's c++ code","msgtype":"m.text"},"ts":1523497133000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"just my initial reaction","msgtype":"m.text"},"ts":1523497148000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"it would be an easier lift","msgtype":"m.text"},"ts":1523497154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Sure but it's also easy to call into IDB from JS","msgtype":"m.text"},"ts":1523497157000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Basically the tradeoff I see is: Web IDL + some extensions for modules + some extension for non-magic brand checks => people writing in C++ have it easy, people writing in JS need to create a webidl wrapper generator. No-Web IDL => people writing in JS have it easy, people writing in C++ need more infrastructure. Unclear on how to weigh those relatively.","msgtype":"m.text"},"ts":1523497235000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but we don't expose DOM APIs without webidl... I think trying to ask all the browsers to change that would make it harder for browsers to adopt this (at least firefox anyway)","msgtype":"m.text"},"ts":1523497240000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I mean we don't expose any DOM APIs via modules right now","msgtype":"m.text"},"ts":1523497267000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't see why modules is a requirement for an async key-val store API","msgtype":"m.text"},"ts":1523497282000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1523497287000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I will refer you to https://github.com/drufball/layered-apis/blob/master/README.md","msgtype":"m.text"},"ts":1523497303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah, I'll read that.. I guess thats the more appropriate place to discuss webidl-vs-not-webidl","msgtype":"m.text"},"ts":1523497355000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't think webidl vs not-webidl is very important... it's just a specification style thing, modulo the additions we'd have to make to webidl","msgtype":"m.text"},"ts":1523497494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it would still be nice to have a formalized idl language (webidl or not) for a module-based system, though... otherwise aren't we back to different APIs and implementations deviating in subtle ways?","msgtype":"m.text"},"ts":1523497517000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Well, no, there shouldn't be. There's only one way to implement that class definition.","msgtype":"m.text"},"ts":1523497535000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unlike the streams spec, that class definition isn't just informative... it's normative.","msgtype":"m.text"},"ts":1523497565000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So all the stuff IDL takes care of is just automatic from the semantics of JS class definitions","msgtype":"m.text"},"ts":1523497590000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1523497594000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"THis is all very expertimental","msgtype":"m.text"},"ts":1523497595000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But I think it's worth experimenting with","msgtype":"m.text"},"ts":1523497603000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1523497628000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"The alternative is basically Web IDL with some fun extended attributes (E.g. [ExposedModule=\"std:async-local-storage\"]), and we might totally go that way in the end.","msgtype":"m.text"},"ts":1523497638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess I was just thinking \"maybe finally we can get an async key-val API!\"... but this stuff seemed like an extra lift, but now I see this is more of test bed for that extra stuff","msgtype":"m.text"},"ts":1523497672000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ah yeah, I can see how that'd be a surprise, sorry about that :)","msgtype":"m.text"},"ts":1523497702000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I still think it'll happen! Prototyping this quarter.","msgtype":"m.text"},"ts":1523497714000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1523497716000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: at least it seems we will be shipping modules soon... I was going to say we didn't even have that pre-req","msgtype":"m.text"},"ts":1523498530000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"> Alternatively, we could give priority to FetchObserver and put the data there.","msgtype":"m.text"},"ts":1523526624000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: my initial impression of that idea is good, as JavaScript doesn't really seem to favor branching on exceptions","msgtype":"m.text"},"ts":1523526659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we already have some exception branching with aborting fetch. But yeah, `FetchObserver` would let us express the abort case too","msgtype":"m.text"},"ts":1523526711000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, it's somewhat unfortunate we have many patterns for these things, none of them great","msgtype":"m.text"},"ts":1523526765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is there a trick to reviewing spec PR's that let you see the final rendered page?","msgtype":"m.text"},"ts":1523541519000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there's a Preview and Diff link in the PR OP","msgtype":"m.text"},"ts":1523541546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1523541576000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: for the fragment thing... we probably need a fix in service workers as well","msgtype":"m.text"},"ts":1523541599000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: so if the FetchEvent.request.url has a fragment, but the respondWith() response does not, then we propagate the request fragment to the response","msgtype":"m.text"},"ts":1523541623000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and deal with fragment collision","msgtype":"m.text"},"ts":1523541629000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that would be good, yes","msgtype":"m.text"},"ts":1523541643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I can follow-up on that tomorrow","msgtype":"m.text"},"ts":1523541669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: but add a comment please?","msgtype":"m.text"},"ts":1523541677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1523541689000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: also wondering if there could be any weirdness if a site has old responses in Cache API with fragment stripped... but new responses are preserving fragment","msgtype":"m.text"},"ts":1523541712000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"since current Cache API loses the fragment at the disk layer","msgtype":"m.text"},"ts":1523541729000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"at least in gecko","msgtype":"m.text"},"ts":1523541734000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ah yes, we should probably consider again what to do for the Cache API here too","msgtype":"m.text"},"ts":1523541754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"interesting... the prev/next buttons don't work in nightly... but the \"j\" keyboard shortcut works","msgtype":"m.text"},"ts":1523541834000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in diff mode","msgtype":"m.text"},"ts":1523541837000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh, I've never actually tried using those","msgtype":"m.text"},"ts":1523544367000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: actually... it just seems sometimes it doesn;t work","msgtype":"m.text"},"ts":1523544382000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I dunno","msgtype":"m.text"},"ts":1523544386000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"computers suck","msgtype":"m.text"},"ts":1523544389000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"please send me hardcopy","msgtype":"m.text"},"ts":1523544400000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: via pigeon or boat?","msgtype":"m.text"},"ts":1523544422000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we should get one of those pneumatic tubes installed","msgtype":"m.text"},"ts":1523544442000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(neither prolly works from here; too far and landlocked)","msgtype":"m.text"},"ts":1523544444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's no (internal) way of checking to see if an element was parser-inserted or inserted via script right? (besides for <script> elements given their parser-inserted flag)","msgtype":"m.text"},"ts":1523545582000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"There'","msgtype":"m.text"},"ts":1523545600000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: correct","msgtype":"m.text"},"ts":1523547616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: for https://github.com/w3c/web-platform-tests/pull/10449 did you consider the impl implications?","msgtype":"m.text"},"ts":1523556505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: of having to eagerly parse Location","msgtype":"m.text"},"ts":1523556523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: also, I was using async, but there's no examples of how to mix them with promise_test/async_test, so I gave up","msgtype":"m.text"},"ts":1523556553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess I'm not clear what behavior you are seeing and what you expect it to do instead","msgtype":"m.text"},"ts":1523556553000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: on \"./test\" I get a server redirect to \"x\"; which I store for later","msgtype":"m.text"},"ts":1523556601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: then \"/x/\" is requested and I reply with the redirect","msgtype":"m.text"},"ts":1523556617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: the expectation is \"./x\" but the result in Firefox is \"/x/x\"","msgtype":"m.text"},"ts":1523556641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: unfortunately testing that requires a lot of resources and I'm not sure where to place them in all in a way that would not be confusing to readers","msgtype":"m.text"},"ts":1523556697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: the current setup breaks lint unfortunately","msgtype":"m.text"},"ts":1523556710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm just not convinced its hitting the FetchEvent handler at all is what I was saying","msgtype":"m.text"},"ts":1523556737000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: since you don't wait for activation before creating the frame","msgtype":"m.text"},"ts":1523556747000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: based on the asserts it's hitting it","msgtype":"m.text"},"ts":1523556774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: otherwise the first assert would fail","msgtype":"m.text"},"ts":1523556785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: but I'll add that","msgtype":"m.text"},"ts":1523556809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: this may be more a necko question if its about how we handle Location headers","msgtype":"m.text"},"ts":1523556824000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: anything we do there is probably legacy and long standing... but I'm not sure","msgtype":"m.text"},"ts":1523556883000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1523556934000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: sure, but this specific scenario only surfaces with service workers","msgtype":"m.text"},"ts":1523556981000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does it happen in chrome as well?","msgtype":"m.text"},"ts":1523556991000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: in any event, if you don't have strong feelings I guess that's fine","msgtype":"m.text"},"ts":1523556998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I still need to install cacert.pem into macOS (which I think is what Chrome would use)","msgtype":"m.text"},"ts":1523557018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I would be in favor of making respondWith(Response.redirect()) function the same as a server based redirect","msgtype":"m.text"},"ts":1523557034000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well that will always have a resolved URL so that is fine","msgtype":"m.text"},"ts":1523557084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I guess this would be different from when you construct a Response with a Location header manually","msgtype":"m.text"},"ts":1523557106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which seems unfortunate; but it also seems bad that the service worker can subvert the server's intent for redirects, given how special redirects are","msgtype":"m.text"},"ts":1523557149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, thanks for the feedback so far; I guess I'll try clean this up a bit tomorrow and also test some other browsers and synthetic redirects and such (and make sure all that is still defined correctly)","msgtype":"m.text"},"ts":1523557408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw, an async function example: https://searchfox.org/mozilla-central/source/testing/web-platform/tests/service-workers/service-worker/worker-client-id.https.html#35-55","msgtype":"m.text"},"ts":1523557453000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: thanks; I wonder how that ends up working; guess I need to study async/await again a bit","msgtype":"m.text"},"ts":1523557618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, this was rather fun to do; hope to play more with service workers from now on","msgtype":"m.text"},"ts":1523557801000,"senderName":"annevk","senderId":"annevk@irc"}
]