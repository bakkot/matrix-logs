[
{"content":{"body":"Apparently web-platform-tests differs with the HTML standard about whether input type=\"email\" should be selectable? https://github.com/tmpvar/jsdom/pull/804#issuecomment-47602028","msgtype":"m.text"},"ts":1404173407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"a principled stance\" is a fascinating phrase (assumes that the speaker's set of principles are the only valid ones)","msgtype":"m.text"},"ts":1404177657000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"this whole TAG thing is pretty hilarious","msgtype":"m.text"},"ts":1404187329000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i love that all these people think they can only contribute if they're in the TAG","msgtype":"m.text"},"ts":1404187343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"suits up in his <HTML></HTML> tag","msgtype":"m.emote"},"ts":1404187380000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: TAG in general or did they make some statement?","msgtype":"m.text"},"ts":1404192986000,"senderName":"cabanier","senderId":"cabanier@irc"},
{"content":{"body":"cabanier: see www-tag","msgtype":"m.text"},"ts":1404198712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: no it does not assume that","msgtype":"m.text"},"ts":1404199998000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: I haven't read yet the context but in general it doesn't imply that at all","msgtype":"m.text"},"ts":1404200016000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: in fact it often implies the opposite","msgtype":"m.text"},"ts":1404200032000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: it's often used to acknowledge that while you disagree with someone else's argument, you respect the position they've taken on it as being one based on principles, though you may disagree with the priorities of those principles over other concerns, or with the principles themselves","msgtype":"m.text"},"ts":1404200129000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: if the tests differs from the spec then it should be raised as an wpt issue and/or as a PR","msgtype":"m.text"},"ts":1404200216000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: ah I see you already said as much in the issue thread","msgtype":"m.text"},"ts":1404200261000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: as in a \"wow they're really sticking to their principles\" type of thing?","msgtype":"m.text"},"ts":1404200624000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: If the spec and the tests disagree it's presumably a bug in the tests.","msgtype":"m.text"},"ts":1404201478000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh, MikeSmith just said that","msgtype":"m.text"},"ts":1404201506000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I should apparently not read a randomly selected subset of the scrollback","msgtype":"m.text"},"ts":1404201527000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: I opened https://github.com/masinter/multipart-form-data/issues/17","msgtype":"m.text"},"ts":1404203002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'll also watch the repository for a bit","msgtype":"m.text"},"ts":1404203019000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SamB: Well, in fact chrome.  I think it makes sense to develop more of the web platform in javascript.  From low-level primitives given from the engine c++ land.","msgtype":"m.text"},"ts":1404203204000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"annevk: gool","msgtype":"m.text"},"ts":1404204330000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"erp cool","msgtype":"m.text"},"ts":1404204343000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Oh, I assumed that was an unlikely typo for \"good\". Although now it sounds like some sort of football celebration","msgtype":"m.text"},"ts":1404204407000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I thought it was a reference to https://twitter.com/hober/status/483296410108833793 & https://twitter.com/hober/status/483296772941283328","msgtype":"m.text"},"ts":1404205313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Web Components as currently designed cannot explain the behavior of any built-in elements (except maybe those which can be explained with CSS alone).\"","msgtype":"m.text"},"ts":1404207604000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: body.asJSON - we decided they consume the stream rather than tee it, right? Was there a reason for that? Maybe it should tee.","msgtype":"m.text"},"ts":1404209275000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: as*allthethings don't tee","msgtype":"m.text"},"ts":1404210072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: elaborate?","msgtype":"m.text"},"ts":1404210082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: If they tee, you can call them multiple times, or call asBlob then asText. I'm not sure it's intuitive that they're one-off at the moment. What's the advantage?","msgtype":"m.text"},"ts":1404210167000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you don't have to keep the response around","msgtype":"m.text"},"ts":1404210196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I can see that being an issue if the object is kept in reference long after calling asWhatever, not sure that's likely though","msgtype":"m.text"},"ts":1404210294000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The design of responseType / response on XMLHttpRequest was exactly because of this","msgtype":"m.text"},"ts":1404210360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The original design of having both responseText and responseXML was a memory issue, and that's why we didn't add responseBlob","msgtype":"m.text"},"ts":1404210398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: adding responseBlob wouldn't have added extra memory overhead though, the blob would have been constructed as part of the getter right?","msgtype":"m.text"},"ts":1404210822000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the problem was that you could never toss away the original bytes if someone e.g. had already asked for responseText","msgtype":"m.text"},"ts":1404210861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if streams support something like tee(), then subclasses of streams will too, and you could just do .body.tee().asText()","msgtype":"m.text"},"ts":1404210941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, I get the original bytes thing, I didn't realise that'd be a huge problem as the object is likely to get gc'd shortly afterwards anyway. But yeah, body.tee().asText() seems fine.","msgtype":"m.text"},"ts":1404211027000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think people are rightly concerned about memory usage. If we offer a low-level API such as this it seems good to make that usage explicit.","msgtype":"m.text"},"ts":1404211195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We will need to support a tee operation, there's numerous places that require tee/copy","msgtype":"m.text"},"ts":1404211222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: see above.","msgtype":"m.text"},"ts":1404211241000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"E.g. the stream that is passed to fetch()'s Request object will need to be teed","msgtype":"m.text"},"ts":1404211246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, makes sense","msgtype":"m.text"},"ts":1404211247000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tee'd?","msgtype":"m.text"},"ts":1404211258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we are going to rename navigate to \"topframe\" and \"child\" to \"frame\" most likely","msgtype":"m.text"},"ts":1404211352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=26247","msgtype":"m.text"},"ts":1404211355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: ^^","msgtype":"m.text"},"ts":1404211398000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: feels like we need a \"navigate\" helper to cover \"topframe\", \"frame\" and \"popup\"","msgtype":"m.text"},"ts":1404211572000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"since navigates are the cases you'd want to provide a \"no connection\" fallback page, or something","msgtype":"m.text"},"ts":1404211622000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: https://github.com/slightlyoff/ServiceWorker/issues/345","msgtype":"m.text"},"ts":1404211634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: \"client request\" was that term","msgtype":"m.text"},"ts":1404211653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: as you demonstrate, \"navigate\" makes you forget about workers","msgtype":"m.text"},"ts":1404211739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that was deliberate, in this case","msgtype":"m.text"},"ts":1404211791000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I wouldn't want to serve up a \"Sorry no connection\" page in response to a sharedworker request","msgtype":"m.text"},"ts":1404211810000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: But I understand why sharedworkers are in that grouping, as they can make requests themselves","msgtype":"m.text"},"ts":1404211859000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"isNavigateRequest, isClientRequest could be on Request I suppose","msgtype":"m.text"},"ts":1404211883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or on FetchEvent, depending on where context/client end up","msgtype":"m.text"},"ts":1404211904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We also haven't really dealt with <object> yet","msgtype":"m.text"},"ts":1404211973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: <img src=\"//otherorigin/whatever.svg\"> - is this a client request?","msgtype":"m.text"},"ts":1404211994000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess not","msgtype":"m.text"},"ts":1404212002000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1404212013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but will requests triggered by whatever.svg go through the page's SW, and are we leaking by doing so?","msgtype":"m.text"},"ts":1404212027000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"client requests and resource requests are mutually exclusive","msgtype":"m.text"},"ts":1404212039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it's the same as CSS at that point","msgtype":"m.text"},"ts":1404212041000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(except maybe for <object>, which does both...)","msgtype":"m.text"},"ts":1404212047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you load an SVG as an image it cannot do any further fetches","msgtype":"m.text"},"ts":1404212081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hopefully we can reuse a lot of appcache's mess when it comes to <object>","msgtype":"m.text"},"ts":1404212081000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: ah, phew, problem solved","msgtype":"m.text"},"ts":1404212093000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(at least not network fetches)","msgtype":"m.text"},"ts":1404212110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there a term to describe something that looks like trolling but may not be motivated by trolling intent?","msgtype":"m.text"},"ts":1404212223000,"senderName":"hsivonen_","senderId":"hsivonen_@irc"},
{"content":{"body":"like appealing to the behavior of \"newer browsers\" when requesting a spec change and giving Emacs Web Wowser as an example of such a newer browser","msgtype":"m.text"},"ts":1404212305000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"pedant","msgtype":"m.text"},"ts":1404212325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Doesn't sound like pedantry","msgtype":"m.text"},"ts":1404212334000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sounds like being divorced from the real world","msgtype":"m.text"},"ts":1404212351000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"finds phantasmagoric","msgtype":"m.emote"},"ts":1404212455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's some phantasmagoric shit right there","msgtype":"m.text"},"ts":1404212487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe we should just not do the weird thing appcache did and always route them through the SW?","msgtype":"m.text"},"ts":1404212522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"meh","msgtype":"m.text"},"ts":1404212568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hard","msgtype":"m.text"},"ts":1404212570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which SW?","msgtype":"m.text"},"ts":1404212792000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk, JakeA: please don't call it tee(), though","msgtype":"m.text"},"ts":1404212832000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: the page's or the one that would be used if it were a navigation","msgtype":"m.text"},"ts":1404212839000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the page","msgtype":"m.text"},"ts":1404212923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: although I guess sometimes you do know upfront the page wants to navigate","msgtype":"m.text"},"ts":1404212960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: well, does <object name=x></object> <a href=... target=x>...</a> work? would need to test :/","msgtype":"m.text"},"ts":1404212986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks for the pointer. will keep an eye on it","msgtype":"m.text"},"ts":1404213368000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: you might be interested in https://bugzilla.mozilla.org/show_bug.cgi?id=1003716","msgtype":"m.text"},"ts":1404213870000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"particularly, exposing menus that have items for both ISO-8859-1 and windows-1252 to the user","msgtype":"m.text"},"ts":1404213894000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"even though both encode and decode the same","msgtype":"m.text"},"ts":1404213904000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"so it's basically exposing the decision of which label to put in email headers to the user","msgtype":"m.text"},"ts":1404213921000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"which is sad UI","msgtype":"m.text"},"ts":1404213926000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm not sure if I have the stamina to bikeshed that one anymore","msgtype":"m.text"},"ts":1404213944000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(Thunderbird has code that specifically picks the windows-1252 encoder even if the outgoing encoding is ISO-8859-1, which is a distinc encoding internally in Gecko, still)","msgtype":"m.text"},"ts":1404214028000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: why do they even expose technical terms to end users?","msgtype":"m.text"},"ts":1404214274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so the page SW would control the load of the <object></object> document, but what about the subresources? Through the child document's SW?","msgtype":"m.text"},"ts":1404215188000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: hmm yeah, would have to do some more digging as to how that entire thing is setup","msgtype":"m.text"},"ts":1404217031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: fwiw, I do think that new software should use the Encoding Standard, otherwise we get into the situation where for each format there's a debate about whether the Encoding Standard can be a normative reference","msgtype":"m.text"},"ts":1404217170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: which would just suck and complicate everything for no good reason","msgtype":"m.text"},"ts":1404217189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if all new software will use the Encoding Standard and non-UTF encodings will be allowed then you will loose interop with existing encoding libraries in JDK/.NET/iconv/...","msgtype":"m.text"},"ts":1404219571000,"senderName":"Jirka_","senderId":"Jirka_@irc"},
{"content":{"body":"Jirka_: yes","msgtype":"m.text"},"ts":1404219833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's not really losing interop if they didn't have interop with each other in the first place","msgtype":"m.text"},"ts":1404219968000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: What about spliting the Encoding Standard into two documents -- one will define only UTF-8 related stuff and JS APIs and second will define how to handle legacy web resources in non-UTF encodings. Any new software will be then built on top UTF-8-only Encoding Standard, no need to deal (and possibly create confusion) with legacy encodings","msgtype":"m.text"},"ts":1404220224000,"senderName":"Jirka_","senderId":"Jirka_@irc"},
{"content":{"body":"yeah you can never have to many documents to not read!","msgtype":"m.text"},"ts":1404220342000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"oh man, typo ruined sarcasm =(","msgtype":"m.text"},"ts":1404220352000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if people won't follow a simple \"only use utf-8\" instruction, breaking specs apart isn't going to help--and it's a pain in the ass to do, for everyone involved","msgtype":"m.text"},"ts":1404220354000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Jirka_: I don't really see what problem that solves","msgtype":"m.text"},"ts":1404220428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does this make sense:","msgtype":"m.text"},"ts":1404220432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<p>To <dfn>byte lowercase</dfn> a byte sequence, means replacing any byte in the range","msgtype":"m.text"},"ts":1404220436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"0x41 to 0x5A of the byte sequence with their corresponding byte in the range 0x61 to 0x7A.","msgtype":"m.text"},"ts":1404220436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/means replacing/replace/","msgtype":"m.text"},"ts":1404220445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also it seems like the entire point of \"new software should use this spec\" is exactly *for* legacy encodings ... interop on utf-8 itself isn't a problem","msgtype":"m.text"},"ts":1404220449000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there's some interop problems around utf-8, but yes","msgtype":"m.text"},"ts":1404220474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: makes sense but does require interpretation","msgtype":"m.text"},"ts":1404220480000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"should I do s/their/the/?","msgtype":"m.text"},"ts":1404220502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the only interop issue with utf-8 i've really seen is overlong sequences, and that's uncommon","msgtype":"m.text"},"ts":1404220511000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm not talking about 5/6 byte sequences, but amount of U+FFFD emitted during error handling","msgtype":"m.text"},"ts":1404220546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: s/their/the/ is what I was going to suggest","msgtype":"m.text"},"ts":1404220578000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"could say something like \"adding 0x20 to any byte of the byte sequence in the range 0x41 to 0x5A\"","msgtype":"m.text"},"ts":1404220581000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that might be better","msgtype":"m.text"},"ts":1404220601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1404220603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is it clear that it's an inclusive range","msgtype":"m.text"},"ts":1404220629000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(aside from \"duh\")","msgtype":"m.text"},"ts":1404220639000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"<p>To <dfn>byte lowercase</dfn> a byte sequence, increase each byte it contains in the range 0x41 to 0x5A by 0x20.","msgtype":"m.text"},"ts":1404220717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: current reading of the Encoding Standards and legacy encodings seems to cover all usages of legacy encodings and not only those on the web.","msgtype":"m.text"},"ts":1404220720000,"senderName":"Jirka_","senderId":"Jirka_@irc"},
{"content":{"body":"zewt: yeah, I need to clarify that at some point, that's a bigger issue though :/","msgtype":"m.text"},"ts":1404220739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jirka_: yes that is intended","msgtype":"m.text"},"ts":1404220753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jirka_: it would be weird to allow some CSS or XML to be interpreted in different ways","msgtype":"m.text"},"ts":1404220800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i imagine there are many encodings that exist but which aren't used on the web, in which case they wouldn't be in the encoding spec (but I guess if that's a problem for some cases they could write a spec for just those encodings)","msgtype":"m.text"},"ts":1404220802000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(that are used, not just exist)","msgtype":"m.text"},"ts":1404220829000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It would be a problem if they leak, which is why I think protocols and formats ought to be based on the Encoding Standard or only allow utf-8","msgtype":"m.text"},"ts":1404220963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh i think ircd does case-insensitive comparisons with just chr | 0x20, since iirc it treats { and } as equal to [ and ] for nicks","msgtype":"m.text"},"ts":1404220965000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and then the flavor of utf-8 defined by the Encoding Standard)","msgtype":"m.text"},"ts":1404220972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: IMHO legacy encoding in CSS could (and should be) handled in the same way as in HTML. However for legacy encodings XML parsers in browsers are not interoperable -- neither between some browsers not with non-browser implementations","msgtype":"m.text"},"ts":1404220983000,"senderName":"Jirka_","senderId":"Jirka_@irc"},
{"content":{"body":"(not aware of there being multiple \"flavors\" of utf-8)","msgtype":"m.text"},"ts":1404221000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Jirka_: browsers are not always interoperable either when it comes to encodings, I would consider all that to be a bug","msgtype":"m.text"},"ts":1404221013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: error handling issue mentioned above","msgtype":"m.text"},"ts":1404221025000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: iirc there are bits reserved for application-specific purposes which might be accidentally transmitted and understood differently by different agents --- I can't recall what that's called, though. so you could think of that as \"different flavours\"","msgtype":"m.text"},"ts":1404221422000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i'd call that \"not utf-8 at all\"","msgtype":"m.text"},"ts":1404221435000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well, it's not meant to be exposed to anyone outside of the application, that's for sure =)","msgtype":"m.text"},"ts":1404221455000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"just think of it as utf8 with some extra bonus garbage","msgtype":"m.text"},"ts":1404221482000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I'm not talking about CESU-8 or variants of that","msgtype":"m.text"},"ts":1404221483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not aware of any \"reserved bits\" in utf-8, either","msgtype":"m.text"},"ts":1404221484000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"CESU-8, that sounds like what I'm thinking of","msgtype":"m.text"},"ts":1404221494000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i wonder if it's possible to satisfy the FFFE definition (efficiently) while seeking backwards in utf-8","msgtype":"m.text"},"ts":1404221632000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"guessing not","msgtype":"m.text"},"ts":1404221643000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"actually you probably could... that is, generate FFFEs without having to seek backwards without bound to figure out how many to generate (but you don't actually need to know how many, only whether you should be generating one more or not)","msgtype":"m.text"},"ts":1404221760000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: (JNI has its own special UTF-8 - http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html#wp16542)","msgtype":"m.text"},"ts":1404221967000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"that's also just Not UTF-8(tm)","msgtype":"m.text"},"ts":1404221992000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"has no idea how likely that is to leak out in the external world","msgtype":"m.emote"},"ts":1404221998000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"it's not the greatest encoding in the world, it's just a tribute","msgtype":"m.text"},"ts":1404222102000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: In APIs like thingOfThings.create(newThingName), if newThingName already exists, do we generally throw or return the existing thing?","msgtype":"m.text"},"ts":1404222864000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"In idb it throws. Any other cases?","msgtype":"m.text"},"ts":1404222876000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Going to change the caches API. Rather than caches.add(name, new Cache(...)) it'll be caches.create(name).then(function(cache) {})","msgtype":"m.text"},"ts":1404222925000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Trying to work out what's best if the cache already exists","msgtype":"m.text"},"ts":1404222946000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Create not creating seems pretty confusing","msgtype":"m.text"},"ts":1404222952000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(if you called it \"set\" it would be less confusing)","msgtype":"m.text"},"ts":1404223050000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I guess if you want the get-or-create behaviour it's caches.get(name).catch(e => caches.create(name))","msgtype":"m.text"},"ts":1404223056000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Actually I guess it wouldn't","msgtype":"m.text"},"ts":1404223103000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: well e.g. createElement() would always succeed","msgtype":"m.text"},"ts":1404223109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, but what about where the name is unique (like caches or idb databases)","msgtype":"m.text"},"ts":1404223148000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: throwing or overwriting seems expected from maps?","msgtype":"m.text"},"ts":1404223157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, there isn't much precedent on the platform for having this kind of datastructure","msgtype":"m.text"},"ts":1404223163000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Right, I was assuming that overwriting wasn't sensible for some reason","msgtype":"m.text"},"ts":1404223206000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if it is, then I would really expect that","msgtype":"m.text"},"ts":1404223230000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, that works pretty well. So caches.create(name) would replace 'name' with an empty cache even if one existed","msgtype":"m.text"},"ts":1404223301000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if it's a map, maybe just name it set then","msgtype":"m.text"},"ts":1404223340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: although at that point you're back at add() :p","msgtype":"m.text"},"ts":1404223351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's an async map, right?","msgtype":"m.text"},"ts":1404223368000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Only not quite","msgtype":"m.text"},"ts":1404223405000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Sorta, but we're not defining an async map type","msgtype":"m.text"},"ts":1404223405000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It's an async default map","msgtype":"m.text"},"ts":1404223415000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: Well you are, just in DOM rather than ES","msgtype":"m.text"},"ts":1404223439000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which is fine","msgtype":"m.text"},"ts":1404223443000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Here's the pattern I'm looking at https://gist.github.com/jakearchibald/69bdd0c49d205717963e","msgtype":"m.text"},"ts":1404223474000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"set\" doesn't feel right. I'd expect \"set\" to take two args, key & value.","msgtype":"m.text"},"ts":1404223562000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, I agree","msgtype":"m.text"},"ts":1404223672000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"This is doing special magic with the key to implicitly create a value","msgtype":"m.text"},"ts":1404223701000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or maybe not with the key","msgtype":"m.text"},"ts":1404223717000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I don't think there's any magic","msgtype":"m.text"},"ts":1404223735000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's just the key","msgtype":"m.text"},"ts":1404223738000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's not like createElement","msgtype":"m.text"},"ts":1404223745000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"caches.create(name) caches.get(name) caches.delete(name)","msgtype":"m.text"},"ts":1404223769000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it's most similar to idb's create database method","msgtype":"m.text"},"ts":1404223781000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(which throws if a database of that name already exists, so we could do the same as that, but I'm not convinced idb is a great thing to copy)","msgtype":"m.text"},"ts":1404223819000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Sure. I just mean that it's not a generic operation, it's specific to this particular type of object","msgtype":"m.text"},"ts":1404223821000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1404223838000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(or, I guess, it is probably something that *could* be applicable to many types of objects, but you would need some kind of protocol for specifying the code that create() runs to generate a value. Which doesn't seem worth abstracting out)","msgtype":"m.text"},"ts":1404223929000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: so is it a map or a set of caches?","msgtype":"m.text"},"ts":1404224058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: IAFAICT it's an (async) map of caches","msgtype":"m.text"},"ts":1404224168000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*AFAICT","msgtype":"m.text"},"ts":1404224174000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh right, name -> cache","msgtype":"m.text"},"ts":1404224184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1404224193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so yeah, create makes sense","msgtype":"m.text"},"ts":1404224212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What jgraham said, although all values are forced to be caches, all keys are forced to be strings, uniqueness is enforced in values","msgtype":"m.text"},"ts":1404224230000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think following IDB and throwing is fine for duplicates, provided there's has()","msgtype":"m.text"},"ts":1404224262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You probably don't want to accidentally erase a bunch of resources","msgtype":"m.text"},"ts":1404224276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: please do respond to the various issues open against this API btw","msgtype":"m.text"},"ts":1404224291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Problems with the current API: var myCache = new Cache(); caches.add('foo', myCache); caches.add('bar', myCache);","msgtype":"m.text"},"ts":1404224294000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: especially the one about it having the wrong name","msgtype":"m.text"},"ts":1404224300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: what if instead you did it as new Cache(name)","msgtype":"m.text"},"ts":1404224339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and then cache.add(myCache)","msgtype":"m.text"},"ts":1404224347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then cache.getByName(name)","msgtype":"m.text"},"ts":1404224354000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so it's a set with identifiers on the objects","msgtype":"m.text"},"ts":1404224372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and add() would simply throw if either cache or name was already present","msgtype":"m.text"},"ts":1404224414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, aware of the wrong name one. Not convinced \"cache\" is bad, but not strongly opposed to changing it.","msgtype":"m.text"},"ts":1404224489000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think the argument from Brendan about Cache not being persistent is quite persuasive","msgtype":"m.text"},"ts":1404224518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1404224530000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: So, var myCache = new Cache(\"static-v1\"); caches.add(myCache); caches.getByName(\"static-v1\")? That solves the unique issue, but feels weird being able to create these cache things without them being part of the thing that persists them.","msgtype":"m.text"},"ts":1404224727000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Although I suppose that's true of blobs & idb too, but I don't think a cache is useful outside of caches","msgtype":"m.text"},"ts":1404224779000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: just saw https://twitter.com/annevk/status/483974642336825344","msgtype":"m.text"},"ts":1404225139000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ugh","msgtype":"m.text"},"ts":1404225155000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"heh, that's what I said","msgtype":"m.text"},"ts":1404225161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not aware of the consensus here","msgtype":"m.text"},"ts":1404225213000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so with this you could imagine transferring the Cache() between apps","msgtype":"m.text"},"ts":1404225213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you can transfer it between domains even if we support cloning on it","msgtype":"m.text"},"ts":1404225234000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Transferring between apps? Something like caches.copy(name, otherName)?","msgtype":"m.text"},"ts":1404225280000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It seems like you need Cache to exist as an object either way","msgtype":"m.text"},"ts":1404225289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"now like otherapp.postMessage(cache)","msgtype":"m.text"},"ts":1404225308000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/now/no/","msgtype":"m.text"},"ts":1404225311000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"potentially otherapp.postMessage(cache, [cache]) if we support transfering","msgtype":"m.text"},"ts":1404225328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"caches.get(name).then(function(cache) { otherap.postMessage(cache); })","msgtype":"m.text"},"ts":1404225385000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1404225468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That's already possible in the .create & .get model, but if you got a cache via postmessage you wouldn't be able to get it back into caches. Hmm.","msgtype":"m.text"},"ts":1404225588000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I kind of like what I proposed above","msgtype":"m.text"},"ts":1404225678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"var files = new Cache(files); caches.add(files, ...)","msgtype":"m.text"},"ts":1404225717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"new Cache(\"files\"); right?","msgtype":"m.text"},"ts":1404225757000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i agree that that is a bit weird ... not horrible though","msgtype":"m.text"},"ts":1404226037000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what is?","msgtype":"m.text"},"ts":1404226060000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"what is the problem with caches.set('name1', c); caches.set('name2', c) ?","msgtype":"m.text"},"ts":1404226061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: var c = new Cache('name'); caches.add(c); seems a bit weird, but not horrible.","msgtype":"m.text"},"ts":1404226080000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1404226109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: having some caches be === feels complicated and unuseful","msgtype":"m.text"},"ts":1404226160000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's not my mental model. My mental model is there's still only one cache object, but it got put in two entries in the cache-map","msgtype":"m.text"},"ts":1404226188000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: the same as `var x = {}; var m = new Map(); m.set('key1', x); m.set('key2', x);`","msgtype":"m.text"},"ts":1404226209000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"is that the wrong mental model?","msgtype":"m.text"},"ts":1404226222000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: No, but is there anywhere else we do that with permanent storage?","msgtype":"m.text"},"ts":1404226243000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I dunno, but, is caches really a permanent storage model, or is it an async map?","msgtype":"m.text"},"ts":1404226277000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that is, when you store something in caches, do you serialize it?","msgtype":"m.text"},"ts":1404226294000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think serialization is what draws the line for \"permanent storage\" vs. \"async map\" for me","msgtype":"m.text"},"ts":1404226308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: it seems with |var files = new Cache(files); caches.add(files, ...)|, we would still might want to store stuff to disk even if it hasn't been added to caches yet","msgtype":"m.text"},"ts":1404226325000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: otherwise someone could add many large resources to the cache and we would have to maintain them all in memory","msgtype":"m.text"},"ts":1404226342000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yes, wanderview makes a good point... at what point do things get put into disk vs. in-memory?","msgtype":"m.text"},"ts":1404226374000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I could see that as a common footgun too...  new Cache, add all my resources, put in caches at the end","msgtype":"m.text"},"ts":1404226415000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"well, until it gets GC'ed, I can't imagine ever being able to evict them from memory...","msgtype":"m.text"},"ts":1404226435000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just saying that you put it on disk doesn't mean it can move out of memory","msgtype":"m.text"},"ts":1404226446000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: can't we stream the resources to disk and only read into memory if there is an outstanding Promise<Response>?","msgtype":"m.text"},"ts":1404226516000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"At the moment, in the current API: var cache = new Cache(); cache.add(things...);","msgtype":"m.text"},"ts":1404226533000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'd expect stuff to be written to disk because of the memory issue","msgtype":"m.text"},"ts":1404226545000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but if that isn't added to `caches`, it'd be deleted when `cache` is gc'd","msgtype":"m.text"},"ts":1404226563000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea, I think thats possible, but its a bit of a complication to clean up the filesystem on GC I think","msgtype":"m.text"},"ts":1404226575000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"The caches.create('name').then(c => c.add(things...)) model prevents that","msgtype":"m.text"},"ts":1404226601000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: if the things you add to the cache are accessible as local variables in JS anyway (including temporary ones), you can't remove them from memory until they get GCed ... right?","msgtype":"m.text"},"ts":1404226609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I was thinking of the cache.add(requests...) case... where content is pre-loading the cache and not explicitly waiting for the response","msgtype":"m.text"},"ts":1404226657000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: OK, that is helpful. So we are saying in-memory caches are not useful? Or are we saying that new Cache() would still work, but caches.create('name') is a way of getting one that is synced to storage","msgtype":"m.text"},"ts":1404226659000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Although there's still cache.get('name').then(function(cache) { caches.delete('name'); })","msgtype":"m.text"},"ts":1404226671000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So deleting from disk on gc is still needed","msgtype":"m.text"},"ts":1404226687000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: for testability if nothing else I would think in-memory caches are useful.","msgtype":"m.text"},"ts":1404226698000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"unless we can put cache objects in some kind of \"disabled\" state","msgtype":"m.text"},"ts":1404226707000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"this is going down a dark path","msgtype":"m.text"},"ts":1404226713000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: or we replace caches.delete() with cache.deleteFromCaches() or something... but thats kind of ugly :-(","msgtype":"m.text"},"ts":1404226731000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: that doesn't help, cache still exists in memory.","msgtype":"m.text"},"ts":1404226770000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: unless deleteFromCaches() also puts it in some sort of disabled state","msgtype":"m.text"},"ts":1404226784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the disabled state thing feels ugh","msgtype":"m.text"},"ts":1404226794000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: hmm, don't we have an equivalent problem with new File() or new Blob()?","msgtype":"m.text"},"ts":1404226800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes please don't, if possible","msgtype":"m.text"},"ts":1404226801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think dealing with the GC file eviction is required","msgtype":"m.text"},"ts":1404226812000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: yea, maybe its not the problem I think it is","msgtype":"m.text"},"ts":1404226824000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(brb, meeting)","msgtype":"m.text"},"ts":1404226834000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"its a complication, but probably a solved one","msgtype":"m.text"},"ts":1404226842000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"why is it caches.each() instead of caches.forEach() O_O","msgtype":"m.text"},"ts":1404226876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the browser might serialize it","msgtype":"m.text"},"ts":1404226914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can't tell what that's in response to","msgtype":"m.text"},"ts":1404226933000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"question... var c = new Cache(); c.add(requests...); without putting in caches count against the origin's disk quota?","msgtype":"m.text"},"ts":1404226934000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: or try to keep it alive in some other way","msgtype":"m.text"},"ts":1404226939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it must as we will want the flexibility to save to disk at any time... just wanted to clarify since we were talking about \"memory only\" cache objects","msgtype":"m.text"},"ts":1404226963000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: the cache API is a permanent storage model (and therefore has the wrong name)","msgtype":"m.text"},"ts":1404226966000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is the cache API permanent, or is the caches API permanent?","msgtype":"m.text"},"ts":1404226989000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well only caches is something that survives a reboot","msgtype":"m.text"},"ts":1404227011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I think that makes sense, as long as the programmer's mental model is that it's entirely in-memory until explicitly saved?","msgtype":"m.text"},"ts":1404227021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"each vs. forEach filed https://github.com/slightlyoff/ServiceWorker/issues/351","msgtype":"m.text"},"ts":1404227068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hmm... I guess I was trying to say I will want to write to disk immediately to allow us to GC memory when possible, so not sure we are on the same page... what is the \"explicit save\" step in your view?","msgtype":"m.text"},"ts":1404227131000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well from my perspective that's what's being discussed in this chat :)","msgtype":"m.text"},"ts":1404227146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: so e.g. in the existing `var c = new Cache(); caches.set('name', c)` API, the `caches.set()` step saves to disk","msgtype":"m.text"},"ts":1404227164000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: whereas in the `caches.create('name').then(c => ...)` API, it is created-and-saved in the same step","msgtype":"m.text"},"ts":1404227180000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"although \"saved\" is the wrong word","msgtype":"m.text"},"ts":1404227186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"more like... \"made into something that is backed by persistent storage\"","msgtype":"m.text"},"ts":1404227199000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"versus in-memory only (from the programmer's point of view, even if the implementation puts some stuff on disk for its own reasons)","msgtype":"m.text"},"ts":1404227221000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the `var c = new Cache(); /* never store it in caches */` usage would be \"in memory only\" and useful for testing and such.","msgtype":"m.text"},"ts":1404227244000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: hmm, so in that case it would *not* count against quota until the caches.set()","msgtype":"m.text"},"ts":1404227256000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think so, yeah... if that works from a disallowing-abuse POV","msgtype":"m.text"},"ts":1404227280000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or maybe there are separate temporary and persistent quotas","msgtype":"m.text"},"ts":1404227290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cache should use the same quota as Blob I suppose","msgtype":"m.text"},"ts":1404227309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I can see how it all gets rather tricky :/","msgtype":"m.text"},"ts":1404227323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess I just worry about people waiting to call caches.set() at the end in order to avoid a partial cache object","msgtype":"m.text"},"ts":1404227344000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: agreed, same as Blob makes a lot of sense...","msgtype":"m.text"},"ts":1404227380000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm sure we can make it work","msgtype":"m.text"},"ts":1404227384000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well, I think a caches.create('name') API would mitigate that","msgtype":"m.text"},"ts":1404227394000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the constructor could be a lower-level API used by unit tests and such","msgtype":"m.text"},"ts":1404227403000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"whereas the best practice if you want a persistent cache would be caches.create","msgtype":"m.text"},"ts":1404227419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yea, I guess its an education issue (although at some point those become footguns)","msgtype":"m.text"},"ts":1404227424000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"At this point it all makes sense in my head; curious what JakeA thinks :)","msgtype":"m.text"},"ts":1404227458000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what is the advantage of memory-only for testing vs. what we recommend for production use?","msgtype":"m.text"},"ts":1404227483000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: will read through when this meeting is done (yey for meetings)","msgtype":"m.text"},"ts":1404227500000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: if you are not very careful, you will fill up your persistent storage with repeated unit-test data","msgtype":"m.text"},"ts":1404227571000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1404227595000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I emailed the HTTP WG about an issue... but why? *cries*","msgtype":"m.text"},"ts":1404229023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's going to be okay anne","msgtype":"m.text"},"ts":1404229142000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: that's what they said last time","msgtype":"m.text"},"ts":1404229296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so this \"save\" is kind of like migrating stuff from /tmp or /var/cache to /var/lib ?","msgtype":"m.text"},"ts":1404230215000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: from my perspective as a JS developer /tmp is an implementation detail of the browser","msgtype":"m.text"},"ts":1404230242000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"SamB: it could be in-memory for all I care","msgtype":"m.text"},"ts":1404230248000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"/tmp CAN be in-memory","msgtype":"m.text"},"ts":1404230261000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"anyway this is a metaphor","msgtype":"m.text"},"ts":1404230267000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"yes, well, there you go","msgtype":"m.text"},"ts":1404230268000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the only observable thing (as far as I can tell) is whether the data survives a reboot","msgtype":"m.text"},"ts":1404230276000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and naturally, JS apps don't really get to complain if data turns out to survive that they wouldn't have expected to survive, right?","msgtype":"m.text"},"ts":1404230350000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well, it should not observably survive","msgtype":"m.text"},"ts":1404230365000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1404230369000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic: is there a document that explains why we don't want to expose promise state?","msgtype":"m.text"},"ts":1404230382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so maybe not the /var/cache part then; that can only *theoretically* get nuked, afaict","msgtype":"m.text"},"ts":1404230405000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, stuff is still supposed to work if you nuke it, but I've not heard of any automatic process which would nuke it","msgtype":"m.text"},"ts":1404230427000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: hmm. we don't want to expose, or we don't want to allow external modification of?","msgtype":"m.text"},"ts":1404230475000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: don't expose I guess","msgtype":"m.text"},"ts":1404230511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think exposing is bad. Several promises libraries have promise.inspect() that returns e.g. { state: \"fulfilled\", value: [whatever] }","msgtype":"m.text"},"ts":1404230556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the use cases are dubious however","msgtype":"m.text"},"ts":1404230570000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i guess it kind of encourages zalgo code?","msgtype":"m.text"},"ts":1404230583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if (promise.inspect().state === \"fulfilled\") { runUserCodeWith(promise.inspect().value); } else { promise.then(runUserCodeWith); }","msgtype":"m.text"},"ts":1404230608000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"zalgo in action","msgtype":"m.text"},"ts":1404230616000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1404231273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: re each vs forEach, we didn't want to use a name that may be taken by asyncmap, as the behaviour of cache.each may differ","msgtype":"m.text"},"ts":1404233265000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Oh you made a ticket","msgtype":"m.text"},"ts":1404233284000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Domenic: exposing promise state would have helped in this case https://github.com/jakearchibald/trained-to-thrill/blob/master/www/static/js/app.js#L64-74 - means I wouldn't need showingLiveData.","msgtype":"m.text"},"ts":1404233593000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: Done the read-back. Are you suggesting `caches.create('name')` work, but also `new Cache()`?","msgtype":"m.text"},"ts":1404233662000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes, I think so, at least. new Cache() is in memory; caches.set('name', c) and/or c.makePersistentVia(caches) makes c persistent; caches.create('name') combines the two at once as a sugar layer","msgtype":"m.text"},"ts":1404237932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: maybe file a bug on the promise spec?","msgtype":"m.text"},"ts":1404237999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we need to start thinking about ES7-promises","msgtype":"m.text"},"ts":1404238009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: at least finally, we should add finally","msgtype":"m.text"},"ts":1404238026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed on that one","msgtype":"m.text"},"ts":1404238031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: I can have an extension spec written up as an \"ES7 track proposal\" for next TC39; if everyone likes it then everyone can implement it ASAP.","msgtype":"m.text"},"ts":1404238055000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(ES is a living standard; they just don't know it yet.)","msgtype":"m.text"},"ts":1404238067000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sgtm (is that enough? :p)","msgtype":"m.text"},"ts":1404238089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1404238097000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I'm not sure the code would look *that* much better. I dunno, it's pretty rare. Perhaps more common than Promise.race, I'll grant you.","msgtype":"m.text"},"ts":1404238121000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"http://annevankesteren.nl/2014/06/vats now with analogies","msgtype":"m.text"},"ts":1404239174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"_win 30","msgtype":"m.text"},"ts":1404239260000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"ES is a living standard; they just don't know it yet\" <- i wish it was that simple :-)","msgtype":"m.text"},"ts":1404239687000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"From the perspective of implementers, it's pretty close.","msgtype":"m.text"},"ts":1404239887000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the messaging is all screwed up","msgtype":"m.text"},"ts":1404239894000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but there are \"ES7\" things that are shipping, and \"ES6\" things that are nowhere near done or even started on implemnetatios","msgtype":"m.text"},"ts":1404239914000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and those ES7 things are locked whereas the ES6 things change all the time","msgtype":"m.text"},"ts":1404239927000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So stability is directly proportional to shipping or not","msgtype":"m.text"},"ts":1404239941000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and people are starting to realize this","msgtype":"m.text"},"ts":1404239956000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, people *here* know that ;)","msgtype":"m.text"},"ts":1404240082000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: those are good analogies","msgtype":"m.text"},"ts":1404240147000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's definitely not a living standard in the HTML sense from the perspective of implementors, in my experience","msgtype":"m.text"},"ts":1404240158000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i've asked implementors \"how about we add foo to ES\" and they say \"we can'd do that now, because ES is frozen\"","msgtype":"m.text"},"ts":1404240177000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I feel like implementers are coming around. I might be over-optimistic.\\","msgtype":"m.text"},"ts":1404240177000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"O_O","msgtype":"m.text"},"ts":1404240186000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I love talking to Allen","msgtype":"m.text"},"ts":1404240187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How do I create WebIDL \"mixins\" that don't appear in proto chains or on the global? Is it just [NoInterfaceObject] + always use implements, not : ?","msgtype":"m.text"},"ts":1404245044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Correct","msgtype":"m.text"},"ts":1404245211000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The former for \"on the global\", the latter for \"in proto chains\"","msgtype":"m.text"},"ts":1404245236000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: I know Dominic Clooney well enough to know that he wasn't trying to be contemptuous or dismissive in that bug comment","msgtype":"m.text"},"ts":1404245442000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://code.google.com/p/chromium/issues/detail?id=389124#c8","msgtype":"m.text"},"ts":1404245454000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: I think he should have used different words there but I don't think his comments are indicative of trying to blow anything off","msgtype":"m.text"},"ts":1404245701000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith - sorry I don't buy that. The very phrase \"the consensus within Google\" should NEVER be used to justify anything standards related.","msgtype":"m.text"},"ts":1404245872000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"such a phrase is *political* not technical and is not helpful","msgtype":"m.text"},"ts":1404245883000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I got a bit pissed because various times I have heard about Google discussing things internally about service workers / fetch that are relevant to everyone in the community","msgtype":"m.text"},"ts":1404245915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it also implies that there is a \"internal standards process\" at Google that happens before they send someone to \"litigating\" their work outside. Also a very poor choice of word.","msgtype":"m.text"},"ts":1404245929000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that kind of delayed open behavior is unacceptable","msgtype":"m.text"},"ts":1404245945000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"so it's right for annevk to call them out on it","msgtype":"m.text"},"ts":1404245955000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"annevk - you're right to be pissed.","msgtype":"m.text"},"ts":1404245970000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"those that behave that way at Google have a cultural problem that is antithetical to open standards development.","msgtype":"m.text"},"ts":1404245989000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"it's fine to \"vet\" or \"double-check\" ideas privately, with colleagues, co-workers etc.","msgtype":"m.text"},"ts":1404246002000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"but any kind of \"consensus\" discussion should happen in an open space","msgtype":"m.text"},"ts":1404246015000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"MikeSmith - I accept that there is no ill will. That's not the problem. The problem is one where individuals like in that thread don't even realize that their behavior (perhaps learned from internal culture) is antithetical to open standards development","msgtype":"m.text"},"ts":1404246070000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: yeah like I said, I think he could have used some better words there. And yeah I think what he describes is probably not the process that's likely to produce the best results","msgtype":"m.text"},"ts":1404247478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah. it however seems to shed light on what may be standard procecdure behind Google's walls. that's the larger concern","msgtype":"m.text"},"ts":1404247519000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I think it's somewhat OK to put the job of interfacing with the wider world on one person's shoulders","msgtype":"m.text"},"ts":1404247581000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Some people are intimidated by standards lists etc.","msgtype":"m.text"},"ts":1404247597000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"position: sticky is gone from Blink? Bad for mobile perf?","msgtype":"m.text"},"ts":1404247784000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: I think most people are intimidated by standards lists. The ones who aren't are the odd exceptions","msgtype":"m.text"},"ts":1404247886000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"That does seem like something we should improve","msgtype":"m.text"},"ts":1404247914000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Specifiction seems unintimidating. Although not entirely useful (yet?).","msgtype":"m.text"},"ts":1404247948000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Never heard of it","msgtype":"m.text"},"ts":1404247962000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: it's something Robin set up","msgtype":"m.text"},"ts":1404247982000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: so that automatically means you'll love it","msgtype":"m.text"},"ts":1404247997000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1404248019000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: discourse.specifiction.org","msgtype":"m.text"},"ts":1404248056000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"So what is it?","msgtype":"m.text"},"ts":1404248087000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: it’s an on topic chat room, slowed down.","msgtype":"m.text"},"ts":1404248289000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Aha","msgtype":"m.text"},"ts":1404248301000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think of it as a prototype for replacing mailman","msgtype":"m.text"},"ts":1404248303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But right now everything is in one big forum so it's pretty unfocuse","msgtype":"m.text"},"ts":1404248315000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So it's moving discussion away from where people expect it to be, without telling them?","msgtype":"m.text"},"ts":1404248326000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That seems like somewhat poor form","msgtype":"m.text"},"ts":1404248338000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Perhaps. It's an experiment, is the somewhat-buyable excuse.","msgtype":"m.text"},"ts":1404248362000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I like that posts are more thought out than chat and easier to create than a full blog. I fear it might develop an aggressive mob mentality as I’ve seen in GitHub issues, Twitter threads, and the beccapurple Specifiction.","msgtype":"m.text"},"ts":1404248728000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I would also recommend it for all of the creative ideas that appear there, and the notable contributors to the web who chime in with their own responses.","msgtype":"m.text"},"ts":1404248942000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The issue (aside from the now there are two things problem Ms2ger alludes to) is that it's not focused around any particular technology implementers care about. It's kind of like whatwg⊙wo in that way, if more people knew about it.","msgtype":"m.text"},"ts":1404249041000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Except unlike whatwg@, you don't get a guarantee of a personal response from Hixie, so a lot of threads can just become developers saying \"I'd like this\" or \"here's my bikeshed color\" with no driving toward a solution.","msgtype":"m.text"},"ts":1404249084000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"I think it's somewhat OK to put the job of interfacing with the wider world on one person's shoulders\" <- that's not the problem, the problem is that this job should come _before_ making decisions, not after","msgtype":"m.text"},"ts":1404249136000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, that's where we get into charitable vs. uncharitable interpretations. Charitable: we want it, and we hope Alex can argue for it successfully, so we're implementing now on that assumption. Uncharitable: we're doing it no matter what; Alex's job is to make other people fall in line.","msgtype":"m.text"},"ts":1404249645000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What Hixie said about \"this job should come _before_ making decisions, not after\"","msgtype":"m.text"},"ts":1404249764000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that.","msgtype":"m.text"},"ts":1404249767000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Domenic, care to explain how you're interpreting anything charitable from \"consensus within Google\" ?","msgtype":"m.text"},"ts":1404249798000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"which sounds awfully like \"done deal within Google\"","msgtype":"m.text"},"ts":1404249814000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"and \"litigating\" sounds like force. I mean at least say something like \"negotiating\" but even that is bad as it sounds antagonistic.","msgtype":"m.text"},"ts":1404249846000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: I am trying, and possibly failing to combat I'm-a-Googler-now bias. But to me it sounds like \"after talking with our security folks, this is the solution we thought would work.\"","msgtype":"m.text"},"ts":1404249854000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And yes, litigating sounds very bad. Perhaps a word someone who is scared of standards bodies would use.","msgtype":"m.text"},"ts":1404249878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"who said that word?","msgtype":"m.text"},"ts":1404249919000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"and I thought it was more like \"now there are 17 competing specs\"","msgtype":"m.text"},"ts":1404249977000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Domenic - I can understand people disliking (whether for fear or other reasons) standards bodies, or in particular standards mailing lists.","msgtype":"m.text"},"ts":1404249988000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"SamB talking about https://code.google.com/p/chromium/issues/detail?id=389124#c8","msgtype":"m.text"},"ts":1404250000000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"though actually that didn't work out so bad for \"menu\"","msgtype":"m.text"},"ts":1404250003000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, it's kind of dying now that .desktop has come along, but before that it was pretty darn useful","msgtype":"m.text"},"ts":1404250046000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oooh i wonder how the Blink <menu> implementation is coming along","msgtype":"m.text"},"ts":1404250060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"will be so exciting to have that be more than just a Firefox-only feature","msgtype":"m.text"},"ts":1404250074000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"still likes most of the stuff Hixie has come up with, even in our brave new web components world where everyone builds their own","msgtype":"m.emote"},"ts":1404250101000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"menu\" being the debian package that let other packages ship menu entries in *one* format for all WMs","msgtype":"m.text"},"ts":1404250114000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"even though they all had their own menu formats","msgtype":"m.text"},"ts":1404250126000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"world where everyone builds their own\" is merely XML \"2.0\" (in contrast to actual \"XML 2.0\")","msgtype":"m.text"},"ts":1404250286000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'm going to grab a big bag of popcorn to watch that show","msgtype":"m.text"},"ts":1404250299000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"hmm, if the idea is to prevent trouble with sites that DON'T WANT service workers, how is a new header on the REQUEST going to help AT ALL?","msgtype":"m.text"},"ts":1404250771000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"hmm, I guess it could help when a site becomes AWARE of the rogue SW during the 24-hour window","msgtype":"m.text"},"ts":1404251690000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"https://datatracker.ietf.org/doc/draft-saintandre-xdash-considered-harmful/ expired :-(","msgtype":"m.text"},"ts":1404252309000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Welp, that's it, I guess we all have to add X- back to our headers now","msgtype":"m.text"},"ts":1404252387000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1404252480000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"really isn't sure the automatic expiry thing is at all useful","msgtype":"m.emote"},"ts":1404252504000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oh, the tracker is just dumb","msgtype":"m.text"},"ts":1404252630000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it didn't really get dropped","msgtype":"m.text"},"ts":1404252635000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"isn't automatic expiry the complete opposite of living standard?","msgtype":"m.text"},"ts":1404252793000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"well it would hardly happen to HTML","msgtype":"m.text"},"ts":1404252839000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"since HTML gets edited way more often than every 6 months","msgtype":"m.text"},"ts":1404252878000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"when i was editing an I-D","msgtype":"m.text"},"ts":1404252972000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway, I really wish there was an obvious place to point out that a draft appears to be an ancestor of another draft, so that someone could make the IETF tools aware of this fact ...","msgtype":"m.text"},"ts":1404252975000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i published every edit as a new version","msgtype":"m.text"},"ts":1404252979000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and they literally complained that this was generating too much work for them","msgtype":"m.text"},"ts":1404252986000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because apparently someone has to manually do something every time you send an update (!)","msgtype":"m.text"},"ts":1404252998000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1404253003000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"did you tell them to automate it?","msgtype":"m.text"},"ts":1404253011000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it ended up being a non-issue since i quit editing the spec shortly after","msgtype":"m.text"},"ts":1404253026000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"someone has to manually do something every time\" - hey that sounds like W3C publication!","msgtype":"m.text"},"ts":1404253047000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: yeah, but this was about DRAFTS","msgtype":"m.text"},"ts":1404253059000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB - same thing - WORKING DRAFTS","msgtype":"m.text"},"ts":1404253068000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"well, I mean, they don't have like dev.ietf.org or anything","msgtype":"m.text"},"ts":1404253108000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Hixie: I suppose, if nothing else, it would tend to spam the mail archive","msgtype":"m.text"},"ts":1404253168000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the idea that one can update a spec too fast was so foreign to me i was baffled","msgtype":"m.text"},"ts":1404253213000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway evidently that draft somehow ended up as this is RFC 6648/BCP 178","msgtype":"m.text"},"ts":1404253222000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"please don't fix the errors that quickly\"","msgtype":"m.text"},"ts":1404253223000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: maybe what they really meant was \"put it up somewhere else if you're gonna fix things that quickly, then just send us a snapshot every week or so\"","msgtype":"m.text"},"ts":1404253290000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"who knows","msgtype":"m.text"},"ts":1404253327000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"seems pretty dumb eitherr way","msgtype":"m.text"},"ts":1404253332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, either they have the canonical copy, in which case it better have all known bugs fixed, or they don't, in which case, what's the point in theirs existing","msgtype":"m.text"},"ts":1404253360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie as the Mozart of spec editing. \"There's just too many edits, make fewer\"","msgtype":"m.text"},"ts":1404253615000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"http://www.toomanynotes.com/Amadeus.htm","msgtype":"m.text"},"ts":1404253656000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Hixie: so yeah, maybe they should offer to host ED repos like w3 does ...","msgtype":"m.text"},"ts":1404253881000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1404253952000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"Which few did you have in mind, Majesty?\"","msgtype":"m.text"},"ts":1404253980000,"senderName":"SamB","senderId":"SamB@irc"}
]