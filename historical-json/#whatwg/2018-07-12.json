[
{"content":{"body":"o/","msgtype":"m.text"},"ts":1531396920000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Hey, if someone has overwritten `fetch` in a web page is there any way to get a reference to the original?","msgtype":"m.text"},"ts":1531396967000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I know I can grab it from an `iframe` but that messes with the referrer, it's not transferrable so I can't move it from the worker (I can facade it, maybe - but would rather not)","msgtype":"m.text"},"ts":1531396991000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_, can you grab the function from the iframe and then do other_fetch.call(window)?","msgtype":"m.text"},"ts":1531397337000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Not sure if that would work","msgtype":"m.text"},"ts":1531397361000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"That would mess with the referrer header","msgtype":"m.text"},"ts":1531397372000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Then your only option is to beat whatever code is overwriting it to the punch","msgtype":"m.text"},"ts":1531397409000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Can't, other ideas welcome","msgtype":"m.text"},"ts":1531397463000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I don't think there's any","msgtype":"m.text"},"ts":1531397550000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Maybe Domenic has some","msgtype":"m.text"},"ts":1531397560000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic is/was working on a getOriginals which would have solved this for me anyway - but that's still a long way away afaik","msgtype":"m.text"},"ts":1531397599000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"That shouldn't mess with the referrer if you use . call","msgtype":"m.text"},"ts":1531402422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, interesting, why?","msgtype":"m.text"},"ts":1531402430000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"is unsure what benjamingr_ thinks of as \"long\"","msgtype":"m.emote"},"ts":1531402442000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It uses the this value to compute things","msgtype":"m.text"},"ts":1531402451000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, fabulous, I had no idea - thanks","msgtype":"m.text"},"ts":1531402462000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"\"long\" - not something I can use in a PoC I want to do \"just so it's cool\" in the next 2-3 months.","msgtype":"m.text"},"ts":1531402492000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Yeah 2-3 months is a tight constraint","msgtype":"m.text"},"ts":1531402550000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"+ not one you should or would be interested in fulfilling just for my PoC :D","msgtype":"m.text"},"ts":1531402591000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"It's a little surprising to me since I'd expect `fetch(url)` to behave similarly to `fetch.call(window, url)` since either fetch is unbound (which means it gets `window` by default as context in loose mode) or it is bound in which case I don't understand why `.call` sets its this.","msgtype":"m.text"},"ts":1531403175000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"What am I missing Domenic?","msgtype":"m.text"},"ts":1531403175000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I don't understand the confusion. It's unbound. Which means you can change its this value with .call. but the default this value is indeed window. No contradiction.","msgtype":"m.text"},"ts":1531403428000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Notice that Ms2ger is specifically suggesting using otherFetch.call(window), to change the this value of otherFetch.","msgtype":"m.text"},"ts":1531403485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://www.irccloud.com/pastebin/qw9X1cpj/","msgtype":"m.text"},"ts":1531403897000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"\"No contradiction.\" - I don't understand that part - it's unbound, the default value is indeed window, but when `.call`ing it and setting it explicitly to `window` it sets the referrer.","msgtype":"m.text"},"ts":1531403977000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: do you get the same behavior in different browsers?","msgtype":"m.text"},"ts":1531404333000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I haven't tested. I'm 95% convinced that this is the fact I've been sick myself and dealing with a sick relative and that there is a reasonable reason for this like me not understanding `this` for APIs across contexts. I'll check","msgtype":"m.text"},"ts":1531404414000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I think it's at least as likely that some browsers use the wrong object","msgtype":"m.text"},"ts":1531404497000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wanderview - Firefox sends the referrer anyway.","msgtype":"m.text"},"ts":1531404503000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"So Firefox and Chrome behave differently and Chrome's behavior deviates from my understanding of how `this` works in JavaScript. The problem is that I still don't know if I should open a crbug or bugzilla.","msgtype":"m.text"},"ts":1531404585000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_:  I don't see a WPT test for this, but maybe I'm just not finding it...","msgtype":"m.text"},"ts":1531405062000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think I'll look into it some more and open an issue in the `fetch` repo, I still believe this is just sleep deprivation so I'm hesitant to spend more of other peoples' time","msgtype":"m.text"},"ts":1531405151000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"sounds reasonable... thanks!  (and I hope you and your relative feel better)","msgtype":"m.text"},"ts":1531405208000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess if `fetch` itself is in strict mode it can explicitly check the `.call` value and differentiate but still confusing. Thanks for helping - I will update!","msgtype":"m.text"},"ts":1531405260000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Imagine the following code: `otherWindow.fetch = (...args) => { const referrerToUse = this.document.URL; }`","msgtype":"m.text"},"ts":1531405277000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Then if you do `otherWindow.fetch(...)` it will use `otherWindow.document.URL` as the referrer","msgtype":"m.text"},"ts":1531405293000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But if you do `otherWindow.fetch.call(window, ...)` it will use `window.document.URL` as the referrer","msgtype":"m.text"},"ts":1531405309000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thus, if you want to get a \"clean\" copy of fetch (i.e. `otherWindow.fetch`), but have it use the \"normal\" referrer as if you were using \"normal\" `window.fetch()`, it suffices to just do `otherWindow.fetch.call(window, ...)`","msgtype":"m.text"},"ts":1531405340000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think I understand what I was missing - if I grab a function from another context then when invoking it the `this` value is set to the global object _of that realm_ rather than the one I'm in - that should have been obvious. Thanks Domenic!","msgtype":"m.text"},"ts":1531405379000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Domenic, how about let f = otherWindow.fetch; f()?","msgtype":"m.text"},"ts":1531405558000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: when you call `f` there it calls it with `otherWindow` as the `this` since that's the global of its environment","msgtype":"m.text"},"ts":1531405814000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"No... that's not how this works.","msgtype":"m.text"},"ts":1531405853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It'll call it with undefined as this. Which per Web IDL gets converted to `window`, I am pretty sure.","msgtype":"m.text"},"ts":1531405901000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh nope, per Web IDL it gets converted to `otherWindow`, it looks like.","msgtype":"m.text"},"ts":1531405959000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#dfn-create-operation-function 2.1.2.1","msgtype":"m.text"},"ts":1531405974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"`window` wouldn't have made sense anyway, nevermind. +1 benjamingr_.","msgtype":"m.text"},"ts":1531406009000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so does any browser dtrt?","msgtype":"m.text"},"ts":1531406114000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Well - Firefox is behaving differently by sending `Referrer` from an iframe when Chrome doesn't. Personally I like Chrome's behaviour better as a default and the only reason I need this \"hack\" is that there is nothing like `getOriginals` in the browser yet.","msgtype":"m.text"},"ts":1531406189000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Other things that would have helped - `fetch` being transferable, `ReadableStream` being transferable (that'd make the shim easy). They're both 'hacks' for what I really want (a clean reference I can rely on).","msgtype":"m.text"},"ts":1531406233000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"benjamingr_: hmm, so what was the conclusion here? tbh I don't see anything in the spec for fetch() I'm reading that uses the `this` object in anyway","msgtype":"m.text"},"ts":1531424286000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"The place where the referrer header gets set is step 2 in https://fetch.spec.whatwg.org/#dom-global-fetch, with the implication that \"initial value of Request\" refers to that in the realm for which this fetch() function was created","msgtype":"m.text"},"ts":1531424342000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Well, two things - first: Firefox and Chrome behave differently regarding the `Referer` header in iframes.","msgtype":"m.text"},"ts":1531424354000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Step 13 in https://fetch.spec.whatwg.org/#dom-request says the \"current settings object\" is used, which for fetch() means that of the realm it was created for","msgtype":"m.text"},"ts":1531424394000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Interesting","msgtype":"m.text"},"ts":1531424398000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Second, Chrome's `this` behaves differently than I expect in `fetch` (and not in accordance to which the `fetch` function was created). I really like this behaviour but only because it's the only way I have to get a safe `fetch` as an SDK","msgtype":"m.text"},"ts":1531424406000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"I see...","msgtype":"m.text"},"ts":1531424444000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"I'd expect a same origin iframe without a `src` set to send XHR and fetch exactly the same way as the parent document - but that's unrelated. Chrome doing Firefox's behavior would be great. Otherwise I'd have to grab `fetch` from a worker and since neither `ReadableStream` nor `fetch` itself is transferable that's quite a bit of work.","msgtype":"m.text"},"ts":1531424521000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Yeah, but having to create a whole new iframe just for a fetch() method (which prevents the iframe from being GC'd) is not that great","msgtype":"m.text"},"ts":1531424622000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"If Firefox's fetch is bound to the window it was created for, I think that's the right behavior here","msgtype":"m.text"},"ts":1531424645000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Domenic posted a spec link explaining why it isn't IIRC","msgtype":"m.text"},"ts":1531424729000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Something about 2.1.2.1 https://heycam.github.io/webidl/#dfn-create-operation-function","msgtype":"m.text"},"ts":1531424747000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Yeah that has to do with how the `this` value is set","msgtype":"m.text"},"ts":1531424772000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"But `fetch` doesn't (or shouldn't) use the `this` value at all","msgtype":"m.text"},"ts":1531424790000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Blargh","msgtype":"m.text"},"ts":1531424805000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I didn't actually check the spec, I just assumed it used the relevant global, because that's the guidance these days","msgtype":"m.text"},"ts":1531424816000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But TimothyGu's right that the behavior seems to happen implicitly in \"the initial value of Request\"","msgtype":"m.text"},"ts":1531424834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So I think it should still be relevant (= realm of this) due to https://github.com/heycam/webidl/issues/135","msgtype":"m.text"},"ts":1531424860000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But it's borderline","msgtype":"m.text"},"ts":1531424865000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"invoking the initial value of the Response constructor\" is different from what 135 is talking about, which is \"a new Request object\"","msgtype":"m.text"},"ts":1531424904000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It'd be hard to argue that the spec is clear  here and any browser is specifically wrong","msgtype":"m.text"},"ts":1531424925000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure Firefox behaves differently, just that it sends the `Referer` header anyway","msgtype":"m.text"},"ts":1531425121000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Any suggestions on how to check this welcome as the differing behavior in Chrome between `fetch` and `fetch.call(window` doesn't exist on Firefox as far as I know.","msgtype":"m.text"},"ts":1531425161000,"senderName":"benjamingr_","senderId":"benjamingr_@irc"},
{"content":{"body":"Filed https://github.com/whatwg/fetch/issues/777","msgtype":"m.text"},"ts":1531425706000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It does seem like for practical purposes you may be in trouble here","msgtype":"m.text"},"ts":1531425737000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Even if in theory the spec gives you the tools you want","msgtype":"m.text"},"ts":1531425750000,"senderName":"Domenic","senderId":"Domenic@irc"}
]