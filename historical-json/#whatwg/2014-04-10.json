[
{"content":{"body":"a-ja: pong","msgtype":"m.text"},"ts":1397088526000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"a-ja: ;_;","msgtype":"m.text"},"ts":1397089429000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sorry....back now","msgtype":"m.text"},"ts":1397089595000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: an observation re counter-styles","msgtype":"m.text"},"ts":1397089630000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: predefined disclosure close arrow....shouldn't there be rtl and ltr versions?","msgtype":"m.text"},"ts":1397089710000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"Yes, there should be.","msgtype":"m.text"},"ts":1397089776000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I've had an open issue on that for a while, and haven't been sure how I want to handle it.","msgtype":"m.text"},"ts":1397089789000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thought it a good time to mention it....since there's patches in progress","msgtype":"m.text"},"ts":1397089835000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"dependancy on dir() ?","msgtype":"m.text"},"ts":1397090008000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"Yeah, probably.","msgtype":"m.text"},"ts":1397090064000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"perhaps in L2? dunno about timing","msgtype":"m.text"},"ts":1397090089000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"Either dir(), or a hypothetical \"text as <image>\" function + image() function with ltr/rtl keywords.","msgtype":"m.text"},"ts":1397090119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The Counter Styles spec is still hovering in LC right now (like 3 months after the LC period ended) as people are implementing and finding bugs and necessary clarifications. So I can make the change now.","msgtype":"m.text"},"ts":1397090153000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: url for issue bug?","msgtype":"m.text"},"ts":1397090222000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"Doubt I have one, but I've recorded it for now in the list of bugs I'm trying to burn down at https://github.com/tabatkins/specs/issues/29","msgtype":"m.text"},"ts":1397090247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"a-ja: Out for the night, feel free to mention me here in chat or in email or in the github issue or anywhere else you think I might see it. ^_^","msgtype":"m.text"},"ts":1397090653000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: different topic....colors4.  an example of how to use named hues would probably be helpful.  is it hsl(namedhue,?,?) or ?","msgtype":"m.text"},"ts":1397090689000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: good night....take care","msgtype":"m.text"},"ts":1397090726000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"<http://www.w3.org/mid/CAPJYB1gDsLK5Oppjges-uTenQWHOuZy+GEAg=8sTy4A7iVXTTA⊙mgc>","msgtype":"m.text"},"ts":1397107306000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"notices http://w3c-test.org/resources.whatwg.org/ is gone","msgtype":"m.emote"},"ts":1397107677000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess i don't need https anymore","msgtype":"m.text"},"ts":1397107713000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: for onload you'd need to check target == document :-)","msgtype":"m.text"},"ts":1397107916000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie, yeah, I'm behind on webidl editing. please point me to the relevant bug and I'll prioritise it.","msgtype":"m.text"},"ts":1397112910000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"hi, how would you markup the editor note of a paper","msgtype":"m.text"},"ts":1397121690000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1397121692000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"eg. http://dpaste.com/1775599/","msgtype":"m.text"},"ts":1397121812000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-header-element possibly","msgtype":"m.text"},"ts":1397122023000,"senderName":"webben","senderId":"webben@irc"},
{"content":{"body":"webben, thanks","msgtype":"m.text"},"ts":1397122621000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"JakeA: Hixie: if we are going to standardize requestautocomplete, should we at least use a promise?","msgtype":"m.text"},"ts":1397123270000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"annevk_: the Chrome impl is getting promises. I posted a link to the ticket here earlier","msgtype":"m.text"},"ts":1397127030000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: k","msgtype":"m.text"},"ts":1397129408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://code.google.com/p/chromium/issues/detail?id=343630#c10","msgtype":"m.text"},"ts":1397129525000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so you removed non-GET methods from the cache API, but did you keep HEAD working?","msgtype":"m.text"},"ts":1397130935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I need to add something for HEAD. It's only used in the matching, not the storage I guess","msgtype":"m.text"},"ts":1397130992000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so there's the thing of doing a HEAD request and then updating the headers of a stored entry, but I'm not sure if we should support that","msgtype":"m.text"},"ts":1397131038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, more than happy to drop that. If we allow storing other methods we can do that then","msgtype":"m.text"},"ts":1397131227000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"pokes foolip ","msgtype":"m.emote"},"ts":1397131936000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So I wonder what UK/London events would have participants also interested in doing Test The Web Forward. So far I didn't think of anything better than full frontal, which has the disadvantages of being in Brighton in November (just after TPAC I think), but the advantage of attrating the kind of people I would love to see at a TTWF event","msgtype":"m.text"},"ts":1397133143000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Something happens in Brighton?","msgtype":"m.text"},"ts":1397133255000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm told lots of things happen in Brighton","msgtype":"m.text"},"ts":1397133418000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(the main problem with Brighton is \"can't use the Mozilla space conveniently\")","msgtype":"m.text"},"ts":1397133444000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"remysharp: Any ideas? :)","msgtype":"m.text"},"ts":1397133476000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: we could just try to host one on a Saturday","msgtype":"m.text"},"ts":1397134816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sure","msgtype":"m.text"},"ts":1397135024000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: My theory is that the participants they have had so far have been relatively untargeted and so we have been relatively ineffective at getting either great tests or retaining people","msgtype":"m.text"},"ts":1397135107000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That might not be the right theory, but I wanted to test it by jumping on the coattails of a conference that attracts people who are already working in web development rather than mainly attracting students (which I think has been the case with TestTWF to date)","msgtype":"m.text"},"ts":1397135180000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The idea being that getting those people the message that when they find browser bugs there is a simple way for then to contribute to getting the bugs fixed is good for the industry as a whole","msgtype":"m.text"},"ts":1397135238000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: could ping Jeremy Keith too","msgtype":"m.text"},"ts":1397136770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: and others","msgtype":"m.text"},"ts":1397136782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, ping","msgtype":"m.text"},"ts":1397142135000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: http://www.nohello.com/","msgtype":"m.text"},"ts":1397142150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, w.r.t. https://www.w3.org/Bugs/Public/show_bug.cgi?id=25302 I’d like to round up the loose ends in neutered Blobs. I think we can say that structured clones fail on a neutered Blob.","msgtype":"m.text"},"ts":1397142251000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, this will ensure that pre-neutering asynchronous operations on a Blob can take a structured clone.","msgtype":"m.text"},"ts":1397142279000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, even if there’s a mid-operation neutering.","msgtype":"m.text"},"ts":1397142299000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, if we do this I this, I think you’ll have the pieces you need in affiliated specs, but don’t need a keepalive list of objects.","msgtype":"m.text"},"ts":1397142337000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yeah, I forgot how we already got around the whole being neutered thing using structured clones","msgtype":"m.text"},"ts":1397142442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, sorry about preemptive pinging. I should have known better.","msgtype":"m.text"},"ts":1397142445000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, so I think if we explicitly say that Blobs that are CLOSED can be cloned, we’re ok. That way, operations on clones while still OPENED will work as intended in asynchronous settings.","msgtype":"m.text"},"ts":1397142488000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"s/can be cloned/cannot be cloned.","msgtype":"m.text"},"ts":1397142505000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yes, structured cloning should fail or some such","msgtype":"m.text"},"ts":1397142544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"still unclear to me what happens to closed blobs, does reading from them result in empty sequences?","msgtype":"m.text"},"ts":1397142586000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, but that still leaves the “status check” about how exactly to determine if a Blob is closed. I think there’s merit to the 0 byte approach, but zewt asks if there are any use cases in script for knowing if a Blob is neutered.","msgtype":"m.text"},"ts":1397142600000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, yes, I like the 0 byte approach","msgtype":"m.text"},"ts":1397142610000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, I’d like this to be what happens to neutered Blobs","msgtype":"m.text"},"ts":1397142628000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"it might be a bit cumbersome to write the FormData serialization algorithm if some blobs end up being empty and cannot be cloned whereas others have to be cloned","msgtype":"m.text"},"ts":1397142650000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but maybe it's okay","msgtype":"m.text"},"ts":1397142654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I actually don’t think it will be cumbersome.","msgtype":"m.text"},"ts":1397142667000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Why would a developer actually need a 0 byte Blob, for example? It seems rare that a non-neutered Blob will be 0 bytes","msgtype":"m.text"},"ts":1397142699000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"of course, you could do var blob = new Blob() but that alone isn’t terribly useful.","msgtype":"m.text"},"ts":1397142728000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I mean writing the serialization algorithm of FormData in the specification","msgtype":"m.text"},"ts":1397142899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If neutered blobs cannot be cloned you end up with special code paths","msgtype":"m.text"},"ts":1397142918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it should not be too bad I suppose","msgtype":"m.text"},"ts":1397142924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmmm","msgtype":"m.text"},"ts":1397142943000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"hmm, what was that site with the \"You had a problem\" quotes?","msgtype":"m.text"},"ts":1397142982000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"or however that's phrased","msgtype":"m.text"},"ts":1397143022000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i very strongly dislike the 0-byte thing; it's a bad, hacky API, it breaks with actual 0-byte files, it sacrifices the blob size being immutable, it forces developers to cache the size if they want it after closing (progress meters, etc)","msgtype":"m.text"},"ts":1397144806000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"you'll easily get 0-byte blobs, as soon as you use <input type=file> and a user opens an empty file","msgtype":"m.text"},"ts":1397144860000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"aren't there, like, negative numbers that could be used if magic numbers are needed?","msgtype":"m.text"},"ts":1397144861000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"if we want to expose the closedness of a blob, add a property.  i don't see why we would use the size property for that at all","msgtype":"m.text"},"ts":1397144938000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"why would you want to cache the size of the original object?","msgtype":"m.text"},"ts":1397145206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you just neutered it","msgtype":"m.text"},"ts":1397145232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you might still be using the size, eg. setTimeout(function() { progress.innerText = (totalBytesSent*100 / blob.size) + \"%\"; }, 500)","msgtype":"m.text"},"ts":1397145348000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"now suddenly that shows 0 or NaN% or whatever","msgtype":"m.text"},"ts":1397145375000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i gave a similar example on the bug","msgtype":"m.text"},"ts":1397145400000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"shrugs","msgtype":"m.emote"},"ts":1397145826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1397145933000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's a bizarre, hacky, unexpected API with no redeeming values. hopefully we can do better than \"shrugs\"","msgtype":"m.text"},"ts":1397145958000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I think zewt has a point here. I'm not sure what problem this is trying to solve","msgtype":"m.text"},"ts":1397146157000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt, jgraham: I suppose if we specify that ALL operations on neutered Blob objects fail at the API level, then maybe we don’t need to expose this, even as a property.","msgtype":"m.text"},"ts":1397146315000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"what do you mean \"fail at the API level\"?","msgtype":"m.text"},"ts":1397146334000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i think that sync APIs should always *not* fail","msgtype":"m.text"},"ts":1397146344000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, I mean: FileReader.readAsXxx should fail and report an error asynchronously","msgtype":"m.text"},"ts":1397146364000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"for reasons I mentioned earlier (minimizes the surface area of the \"closed blob\" feature, fewer error cases for developers to have to handle, etc)","msgtype":"m.text"},"ts":1397146372000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ah, OK","msgtype":"m.text"},"ts":1397146376000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, we’ll have to reason through what other things fail.","msgtype":"m.text"},"ts":1397146394000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"But when you say sync APIs should always *not* fail, do you mean, not throw?","msgtype":"m.text"},"ts":1397146449000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"So FileReaderSync probaby has to throw in this case","msgtype":"m.text"},"ts":1397146468000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Affiliated APIs, including URL.createObjectURL and URL.createFor, won’t “fail” but will generate a URL that results in a network error.","msgtype":"m.text"},"ts":1397146499000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"sync versions of async APIs are an exception","msgtype":"m.text"},"ts":1397146512000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"maybe it's more precise to say that the only thing that should fail is attempts to access the data inside the blob, and it should fail in the same way that the API normally fails","msgtype":"m.text"},"ts":1397146544000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, ok, I’m coming round to this.","msgtype":"m.text"},"ts":1397146574000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"sync fetch APIs fail by throwing an exception, so that's OK--that's the error handling the user has anyway for using that API","msgtype":"m.text"},"ts":1397146585000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: not clear to me how promises would actually work for rAc","msgtype":"m.text"},"ts":1397146607000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(eg. FileReaderSync() against a File that the user has deleted)","msgtype":"m.text"},"ts":1397146631000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: and you still have to fire the input/change/invalid events, so it's not like it takes you away from events.","msgtype":"m.text"},"ts":1397146748000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yeah, didn't realize that","msgtype":"m.text"},"ts":1397146757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt, I guess that leaves .slice(), which you think should do what it does normally with byte sequences, but simply neuter the output.","msgtype":"m.text"},"ts":1397146990000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: say you have a black-box API readZipFileFooter(blob), which slices the end of the blob and reads it ... if I pass in a closed blob, it'll cause an error along a typical code path (during the read), instead of throwing an exception in slice(), which that function is probably much less likely to handle","msgtype":"m.text"},"ts":1397147133000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, yup, makes perfect sense to me. Can’t argue with that.","msgtype":"m.text"},"ts":1397147211000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"an API might parse out a ZIP into a list of filename: (start, size) items, and let you say zip.openFile(filename), which does { var info = data[filename]; return this.blob.slice(info.start, info.end); }, which also makes sense to just propagate the closed-ness instead of failing","msgtype":"m.text"},"ts":1397147238000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, but I guess this does mean that you can access properties of closed Blobs such as size, which the 0 byte approach addressed but perhaps hackishly.","msgtype":"m.text"},"ts":1397147313000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"so I’m determining whether this is a Bad Thing.","msgtype":"m.text"},"ts":1397147352000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"but i'm saying that the size should remain unchanged","msgtype":"m.text"},"ts":1397147358000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and other similar properties, like File's .type)","msgtype":"m.text"},"ts":1397147405000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I see what you’re saying. I’m trying to determine if that results in anything bad/inconsistent happening.","msgtype":"m.text"},"ts":1397147425000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"For instance, a developer might do a if(file.size != 0) test before a read operation","msgtype":"m.text"},"ts":1397147447000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Which would fail anyway on a closed Blob.","msgtype":"m.text"},"ts":1397147461000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"what would be the purpose of that test?","msgtype":"m.text"},"ts":1397147473000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Well, the purpose of that test would be to see if you’ve got a readable file with bytes to be read","msgtype":"m.text"},"ts":1397147496000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"But, the Blob is in fact closed. The bytes cannot be read.","msgtype":"m.text"},"ts":1397147510000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"then that test would be wrong; the read might fail anyway, such as if it's a File pointing to a userspace file that the user has deleted","msgtype":"m.text"},"ts":1397147523000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, right; but that’s because of the snapshot condition","msgtype":"m.text"},"ts":1397147573000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Which is a failure that’s not programmatically determinable from within the sandbox.","msgtype":"m.text"},"ts":1397147599000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"But a check for neutered objects might need to be.","msgtype":"m.text"},"ts":1397147615000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"but if(file.size != 0) is not a test for whether you can read from the file","msgtype":"m.text"},"ts":1397147622000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, yes, it’s not a reliable test.","msgtype":"m.text"},"ts":1397147649000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"(by the way, since this ended up being a different thing than \"neutered\", we should probably not call it that)","msgtype":"m.text"},"ts":1397147649000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, well, even with Blob.close() we’re going to prohibit structured cloning I think","msgtype":"m.text"},"ts":1397147680000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"i don't think we should do that, either","msgtype":"m.text"},"ts":1397147690000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: most APIs when you neuter them their attributes will return some kind of initial value","msgtype":"m.text"},"ts":1397147703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: e.g. ArrayBuffer","msgtype":"m.text"},"ts":1397147709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt, I think it would help with FormData (and your proposal) if we can’t structured clone on a .close()","msgtype":"m.text"},"ts":1397147764000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: how?","msgtype":"m.text"},"ts":1397147781000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"seems like it makes it easier, actually","msgtype":"m.text"},"ts":1397147831000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(if you can)","msgtype":"m.text"},"ts":1397147841000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ah wait. You’re right. In the case of FormData, the structured clone won’t create a normal point of failure upon close, but the read will.","msgtype":"m.text"},"ts":1397147924000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"eg. you structured clone the Blob synchronously at the start; if the blob was closed, you don't fail there, you fail later when you try to use the clone (in the same spec code path where you handle other read errors)","msgtype":"m.text"},"ts":1397147932000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I guess this does reduce the “points of failure.”","msgtype":"m.text"},"ts":1397147957000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, would it be ok if neutering a blob doesn’t affect its ability to be cloned?","msgtype":"m.text"},"ts":1397148006000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"it seems nicer for postMessage, etc. too: if I want to post a FileList containing 100 files and I've closed one or two of them, just let me do it without making a new FileList with the closed blobs removed","msgtype":"m.text"},"ts":1397148054000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"arunranga: per the HTML spec it currently throws","msgtype":"m.text"},"ts":1397148059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: I don't really care","msgtype":"m.text"},"ts":1397148078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i was planning on filing a bug on HTML about structured clone, but only after the stuff inside file api itself was decided","msgtype":"m.text"},"ts":1397148113000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"arunranga: I think it would make sense to expose isClosed","msgtype":"m.text"},"ts":1397148118000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt, your bug would be to allow structured cloning of neutered objects?","msgtype":"m.text"},"ts":1397148174000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1397148178000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, based on the same “limit the points of failure” reasoning, or some other reasoning?","msgtype":"m.text"},"ts":1397148196000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"well, if the effect of blob.close() is defined as something like \"act as though the underlying file was deleted\", then disallowing cloning doesn't make sense--structured clone doesn't throw if a File's file is deleted, for example","msgtype":"m.text"},"ts":1397148262000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"arunranga: why is it defined as neutuered and not as closed?","msgtype":"m.text"},"ts":1397148286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"arunranga: oh, my bug would probably be specifically for closed Blobs (with a side note of \"i think this should apply to neutered objects like ArrayBuffer as well\")","msgtype":"m.text"},"ts":1397148336000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: that should change, I think.","msgtype":"m.text"},"ts":1397148337000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk: I think terminology is misleading.","msgtype":"m.text"},"ts":1397148352000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"annevk, though they are similar.","msgtype":"m.text"},"ts":1397148361000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: not really, neutering happens as the result of a transfer","msgtype":"m.text"},"ts":1397148382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"transfer is a user of neutering, neutering isn't tied to transfer (but that's a whole long separate discussion that I've given up on)","msgtype":"m.text"},"ts":1397148438000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk, well, I’m going to kill the word ‘neuter’","msgtype":"m.text"},"ts":1397148442000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"(it should be used consistently to mean one thing. By re-using it in FileAPI, I’ve created a confusion bug)","msgtype":"m.text"},"ts":1397148504000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"(i thought that had already been changed, but I guess I thought that since it was changed in HTML, which says \"disabled through the close() method\")","msgtype":"m.text"},"ts":1397148543000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well if annevk doesn’t really care about whether .close() affects cloning, it may as well not affect cloning, and rather, only affect reading.","msgtype":"m.text"},"ts":1397148609000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I think FileAPI should position success and failure as reading bytes success and failure anyway. I agree with the bugs that push in this direction.","msgtype":"m.text"},"ts":1397148646000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"heycam|away: why are trailing commas in enum descriptions not valid?","msgtype":"m.text"},"ts":1397150953000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bahaha http://w3cmemes.tumblr.com/post/82309160313/philosoraptor-couldnt-sleep-last-night-so-she","msgtype":"m.text"},"ts":1397156084000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for whomever posted http://w3cmemes.tumblr.com/image/82219740533 - i present to you http://ln.hixie.ch/?start=1056847759&count=1","msgtype":"m.text"},"ts":1397156264000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic_ I’ll soon expunge “neutered” from the FileAPI spec. They’ll simply be closed.","msgtype":"m.text"},"ts":1397156428000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1397156433000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"seems good :)","msgtype":"m.text"},"ts":1397156439000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, is AbortableProgressPromise something that we should expect to land as a real thing? I’m using it in spec, but handwaving a bit.","msgtype":"m.text"},"ts":1397157606000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: no, definitely not","msgtype":"m.text"},"ts":1397157616000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"arunranga: Progress is almost certainly dead. Cancellation/abortion is probably going to happen at some point though so collecting spec use cases would be helpful. Still early days.","msgtype":"m.text"},"ts":1397157653000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, uh-oh. Fx has a sandboxed version of FileSystem API hat uses something a lot like it :-)","msgtype":"m.text"},"ts":1397157658000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Domenic_, to be honest, I don’t hate AbortableProgressPromise.","msgtype":"m.text"},"ts":1397157682000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Progress generally means you should be using streams :P. And yes, I'm aware we need to pick up the pace there.","msgtype":"m.text"},"ts":1397157690000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, but I just want something that addresses the use case.","msgtype":"m.text"},"ts":1397157692000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Actually both of those are better addressed by streams...","msgtype":"m.text"},"ts":1397157700000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Promises should be for one-and-done, non-interruptible, atomic-ish operations","msgtype":"m.text"},"ts":1397157714000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that's what she said","msgtype":"m.text"},"ts":1397157732000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Promises are definitely abortable if you want them to be, though - you just have to extract and vend the reject function yourself.","msgtype":"m.text"},"ts":1397157759000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Exposing them primitively for cases that could use them makes sense to me.","msgtype":"m.text"},"ts":1397157772000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's true. That's a good way to look at it.","msgtype":"m.text"},"ts":1397157821000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(You can convert any normal promise into an abortable one by wrapping it in a promise of your own, passing accept and reject to the normal promise and leaking the reject outside of your promise as well.)","msgtype":"m.text"},"ts":1397157831000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gives darobin scowly smile","msgtype":"m.emote"},"ts":1397157836000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I'm much less convinced about progress, though.","msgtype":"m.text"},"ts":1397157859000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Abortion usually implies that it has some impact back to the promise creator though. It's not only a capability-vending, but always a backward communication channel","msgtype":"m.text"},"ts":1397157860000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Yeah, true, so the op usually does more than *just* reject.","msgtype":"m.text"},"ts":1397157884000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We are prototyping an interesting alternative to progress (viz. estimated time of arrival) in user-space. So far it composes much better. But it's very very early days for that.","msgtype":"m.text"},"ts":1397157885000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"s/always/also/","msgtype":"m.text"},"ts":1397157896000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins, I’d like to use something like AbortableProgresPromise for an operation like FileHandleWritable in http://w3c.github.io/filesystem-api/Overview.html#the-directory-interface","msgtype":"m.text"},"ts":1397158011000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"To write some bytes, and then abort.","msgtype":"m.text"},"ts":1397158019000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Right, I'm not saying that progress monitoring is a bad thing, I'm just not convinced it's best modeled as a Promise extension.","msgtype":"m.text"},"ts":1397158037000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I dithered over this a bit in my EventStream proposal.","msgtype":"m.text"},"ts":1397158056000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"arunranga: \"write some bytes then abort\" sounds exactly like streams...","msgtype":"m.text"},"ts":1397158073000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"arunranga: what is the timeline on this FS API?","msgtype":"m.text"},"ts":1397158082000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, yes, you’re right; it’s streamlike, but streams aren’t forthcoming. We’re left with Blobs and whatnot.","msgtype":"m.text"},"ts":1397158117000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: who says streams aren't forthcoming!?","msgtype":"m.text"},"ts":1397158127000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_, well, the timeline, as of today, is “a more specifc draft will land in two-ish weeks.”","msgtype":"m.text"},"ts":1397158142000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Domenic_, huzzah! Tell me what I don’t know. Where have Streams been my whole life?","msgtype":"m.text"},"ts":1397158159000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: https://github.com/whatwg/streams !","msgtype":"m.text"},"ts":1397158261000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"we're closing in on something pretty close to final","msgtype":"m.text"},"ts":1397158269000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TCP and UDP sockets spec is based on them","msgtype":"m.text"},"ts":1397158279000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"https://rawgithub.com/ClaesNilsson/raw-sockets/gh-pages/index.html","msgtype":"m.text"},"ts":1397158289000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"shudders at the idea of allowing the web access to raw UDP or TCP","msgtype":"m.emote"},"ts":1397158312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"arunranga: if you give me deadlines I can push myself to meet them. right now what I have is \"everyone wants this yesterday.\"","msgtype":"m.text"},"ts":1397158349000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Heh, well… sounds like you’re going to land this as a WHATWG draft soon-ish. If you land in two weeks, I can bash out details left in FileSystem.","msgtype":"m.text"},"ts":1397158416000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"two weeks!! Can do.","msgtype":"m.text"},"ts":1397158428000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"important question: do those two weeks include three weekends, or two weekends?","msgtype":"m.text"},"ts":1397158458000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(i.e., is it Monday, or is it Friday)","msgtype":"m.text"},"ts":1397158468000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"If that’s unreasonable, push back :-) There isn’t really too much “fall off the cliff” pressure about FileSystem, TBH. It’s already in Firefox, but sandboxed (and uses constructs that you disapprove of based on the above ^^). And, user agents are exactly beating down our door with support.","msgtype":"m.text"},"ts":1397158471000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"nah two weeks sounds like a perfect incentive","msgtype":"m.text"},"ts":1397158487000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I mean, are not exactly.","msgtype":"m.text"},"ts":1397158490000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"tyoshino ^","msgtype":"m.text"},"ts":1397158503000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"So, take two weekends, if you aren’t slammed? Three if you are?","msgtype":"m.text"},"ts":1397158514000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I’m not totally blocked on you.","msgtype":"m.text"},"ts":1397158522000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I can tweak other things.","msgtype":"m.text"},"ts":1397158525000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Sounds good :)","msgtype":"m.text"},"ts":1397158527000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"But should also fix my FileAPI bugs *mumble mumble*","msgtype":"m.text"},"ts":1397158535000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"I want streams to succeed and FS is like use case #1 for streams so I am very motivated to make them work for you.","msgtype":"m.text"},"ts":1397158567000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"looks at arunranga sheepishly","msgtype":"m.emote"},"ts":1397158616000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Domenic_ oooh synergy!","msgtype":"m.text"},"ts":1397158635000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Domenic_ well, we’ll have to unleash sicking on you :-) He’s got strong opinions about Streams vs. AbortableProgressPromise, etc.","msgtype":"m.text"},"ts":1397158708000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"Also, the use cases are legion.","msgtype":"m.text"},"ts":1397158715000,"senderName":"arunranga","senderId":"arunranga@irc"},
{"content":{"body":"arunranga: haha great. I talked streams with sicking recently at the TAG meeting but we didn't talk about vs. AbortableProgressPromise in particular.","msgtype":"m.text"},"ts":1397159248000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"o","msgtype":"m.text"},"ts":1397160408000,"senderName":"tyoshino","senderId":"tyoshino@irc"},
{"content":{"body":"p","msgtype":"m.text"},"ts":1397160412000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic_: streams and AbortableProgressPromise actually has quite different use cases. But we should definitely add streams to filesystem","msgtype":"m.text"},"ts":1397160558000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: filesystem needs both async-generator \"object Streams\", as well as IO streams","msgtype":"m.text"},"ts":1397160601000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: object streams being for e.g. directory listings?","msgtype":"m.text"},"ts":1397160638000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: yup","msgtype":"m.text"},"ts":1397160643000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yeah interestingly even node.js doesn't have those","msgtype":"m.text"},"ts":1397160653000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"iirc it's only needed for directory listings","msgtype":"m.text"},"ts":1397160658000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sg","msgtype":"m.text"},"ts":1397160673000,"senderName":"tyoshino","senderId":"tyoshino@irc"},
{"content":{"body":"Domenic_: oh! node.js just returns an array with all the names?","msgtype":"m.text"},"ts":1397160682000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: yeah, it's kind of embarassing","msgtype":"m.text"},"ts":1397160690000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1397160721000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: hopefully we can do better :)","msgtype":"m.text"},"ts":1397160728000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: and then have node.js implement our filesystem","msgtype":"m.text"},"ts":1397160746000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"yesss","msgtype":"m.text"},"ts":1397160759000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback","msgtype":"m.text"},"ts":1397160770000,"senderName":"tyoshino","senderId":"tyoshino@irc"},
{"content":{"body":"Domenic_: and have filesystem https://www.youtube.com/watch?v=2BRXmgcBHBM#t=75","msgtype":"m.text"},"ts":1397160850000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"hopes he got the right quote.","msgtype":"m.emote"},"ts":1397160864000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"is on mute","msgtype":"m.emote"},"ts":1397160867000,"senderName":"sicking","senderId":"sicking@irc"}
]