[
{"content":{"body":"https://drafts.csswg.org/indexes/","msgtype":"m.text"},"ts":1449218221000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What's about:unicorn?","msgtype":"m.text"},"ts":1449219001000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"A joke in the fetch spec","msgtype":"m.text"},"ts":1449219494000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://fetch.spec.whatwg.org/#concept-basic-fetch","msgtype":"m.text"},"ts":1449219550000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I found that, but why","msgtype":"m.text"},"ts":1449219740000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Same reason Excel used to contain a flight simulator I guess","msgtype":"m.text"},"ts":1449223573000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I just committed 1200 lines of code to wrap the JS Fetch and Stream API for Scala-JS. https://github.com/scala-js/scala-js-dom/pull/177/files","msgtype":"m.text"},"ts":1449235411000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"It's an interesting example of how Scala.js essentially just makes the types in the JS APIs explicit. It even allows one to make functions and classes that contain generics explicit.","msgtype":"m.text"},"ts":1449235411000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"you did it","msgtype":"m.text"},"ts":1449235473000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"good job","msgtype":"m.text"},"ts":1449235476000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"@caitp in a way the above commit just shows that JS is a type language that does not quite know it is :-)","msgtype":"m.text"},"ts":1449236382000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"s/type/typed/","msgtype":"m.text"},"ts":1449236397000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"oh it knows","msgtype":"m.text"},"ts":1449236836000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's still trying to find its place as a typed language","msgtype":"m.text"},"ts":1449236875000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"while also still trying to faciliate the dynamic programming styles at the same time","msgtype":"m.text"},"ts":1449236898000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tricky balance","msgtype":"m.text"},"ts":1449236910000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Actually if one reads up on Homotopy Type Theory ( http://homotopytypetheory.org/ ) then types are a mathematical necessity.","msgtype":"m.text"},"ts":1449236991000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"mathematical/logical","msgtype":"m.text"},"ts":1449237052000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"but, on the other hand, it's also necessary to not break the web, and to not break peoples expectations","msgtype":"m.text"},"ts":1449237084000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"still, work is being done on that","msgtype":"m.text"},"ts":1449237102000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"pragmatism and idealism have at it regularly","msgtype":"m.text"},"ts":1449237189000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"There is an american philosopher who is showing how to merge analytic and pragmatic thinking http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-444/","msgtype":"m.text"},"ts":1449237427000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"Robert Brandom","msgtype":"m.text"},"ts":1449237439000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"In fact in his book on meaning he shows how one can build more complex/experssive languages out of simpler ones. That's perhaps quite relevant here.","msgtype":"m.text"},"ts":1449237477000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"\"Making It Explicit: Reasoning, Representing, and Discursive Commitment\"","msgtype":"m.text"},"ts":1449237522000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"JS is a typed language.","msgtype":"m.text"},"ts":1449237548000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"With only one type.","msgtype":"m.text"},"ts":1449237548000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that's not usually what people mean when they talk about making JS a typed language, though =)","msgtype":"m.text"},"ts":1449237594000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Sure but then it's not JS.","msgtype":"m.text"},"ts":1449237607000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox, actually its an implcitly typed language. Scala-JS just makes the implicit types explicit, and helps with compiler support in veryfing the types","msgtype":"m.text"},"ts":1449237663000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: No it's not.","msgtype":"m.text"},"ts":1449237671000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"under the hood, you've got maps/hidden classes, and you have values that aren't objects at all (small integers, etc), and those underlying types play a big role in how the compiler works --- but the runtime also cares about these to a degree, and there are efforts to make those types more explicit in the language itself","msgtype":"m.text"},"ts":1449237678000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"If you write down the judgment rules etc of JS, you see there is only one type.","msgtype":"m.text"},"ts":1449237708000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I agree nox, but pragmatically it is typed","msgtype":"m.text"},"ts":1449237724000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"just not explicity","msgtype":"m.text"},"ts":1449237732000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1449237741000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's like saying Ok(_) and Err(_) in Rust's Result enum are two different types.","msgtype":"m.text"},"ts":1449237757000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The only type in JS is a huge enum with one variant for float, one variant for string, one variant for object, etc.","msgtype":"m.text"},"ts":1449237787000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"a type isn't strictly how something is represented in memory","msgtype":"m.text"},"ts":1449237798000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"\"A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute.\" There is no syntactic method in JS that automatically checks the absence of certain erroneous behaviours.","msgtype":"m.text"},"ts":1449237805000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I didn't mention anything about memory.","msgtype":"m.text"},"ts":1449237813000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you seem to be arguing that in JS, everything is one type, but with different values/properties","msgtype":"m.text"},"ts":1449237834000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"nox I am 100% with you.","msgtype":"m.text"},"ts":1449237839000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"which isn't really related to what a type is","msgtype":"m.text"},"ts":1449237856000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I am arguing that in fact you know that well defined functions return certain types of objects","msgtype":"m.text"},"ts":1449237862000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: All functions take all kind of values.","msgtype":"m.text"},"ts":1449237878000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"when code is well written such as the Fetch or Streams API you can then make the types explicit","msgtype":"m.text"},"ts":1449237892000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"ink nox's point of view makes sense","msgtype":"m.text"},"ts":1449237893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"They may crash with an exception, but there is still a judgment rule that means that you can evaluate the code.","msgtype":"m.text"},"ts":1449237902000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Here I made the types of the Streams API explicit https://github.com/scala-js/scala-js-dom/blob/master/src/main/scala/org/scalajs/dom/experimental/Stream.scala","msgtype":"m.text"},"ts":1449237910000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"No matter how broken the code you write is, there is still a possible evaluation, no syntactic method will reject your code.","msgtype":"m.text"},"ts":1449237929000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"sure, but if you had static rules about what types you could pass to functions, well","msgtype":"m.text"},"ts":1449237935000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that wouldn't work very well on the web","msgtype":"m.text"},"ts":1449237939000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"So? That still doesn't mean JS has multiple types.","msgtype":"m.text"},"ts":1449237950000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and furthermore I discovered that Streams are in fact generic classes :-)","msgtype":"m.text"},"ts":1449237956000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"it doesn't have static typing","msgtype":"m.text"},"ts":1449237970000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Every dynamically-typed language is statically-typed.","msgtype":"m.text"},"ts":1449237984000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"With a single static type.","msgtype":"m.text"},"ts":1449237988000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"Dynamically-typed\" is a misnomer.","msgtype":"m.text"},"ts":1449237997000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"caitp: it does not have explicit static typing, but pragmatically you could not write code if you were not able to expect certain datastructures","msgtype":"m.text"},"ts":1449238005000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/","msgtype":"m.text"},"ts":1449238037000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"when you only look at the static behaviour, you're missing the point","msgtype":"m.text"},"ts":1449238058000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you can't make static guarantees about something that pulls in new code dynamically","msgtype":"m.text"},"ts":1449238075000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I'm not missing any point, this isn't a criticism of \"dynamic\" types.","msgtype":"m.text"},"ts":1449238085000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and you sure as heck can't wait for all the code on every webserver in the universe to be preprocessed and compiled before running anything :p","msgtype":"m.text"},"ts":1449238096000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Both have their uses, but we shouldn't call the things that are in JS \"types\", IMO.","msgtype":"m.text"},"ts":1449238101000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"caitp: I come from Erlang, I have nothing against unityped languages.","msgtype":"m.text"},"ts":1449238116000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"right, but that's not the point","msgtype":"m.text"},"ts":1449238125000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"whether it's static or runtime, types are about guarantees","msgtype":"m.text"},"ts":1449238137000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"standard js barely even has runtime types","msgtype":"m.text"},"ts":1449238138000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And there are no guarantees in JS.","msgtype":"m.text"},"ts":1449238164000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"there absolutely are","msgtype":"m.text"},"ts":1449238170000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Types are about rejecting 3.length().","msgtype":"m.text"},"ts":1449238172000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and more all the time","msgtype":"m.text"},"ts":1449238175000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Well I program a lot in RDF and that is an interesting example of a datastructure that is fluid yet typed.","msgtype":"m.text"},"ts":1449238182000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"well 3.length() is a syntax error ,but","msgtype":"m.text"},"ts":1449238197000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's no intrinsic reason why you can't have 3..length()","msgtype":"m.text"},"ts":1449238216000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if the type permits it","msgtype":"m.text"},"ts":1449238218000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"which it might!","msgtype":"m.text"},"ts":1449238220000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but it probably won't be the same length() as something which requires a particular internal slot","msgtype":"m.text"},"ts":1449238227000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Of course the type permits it, because there is only one in JS.","msgtype":"m.text"},"ts":1449238234000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"3 and \"foo\" are of the same enumeration type, with different constructors.","msgtype":"m.text"},"ts":1449238257000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you can easily have a 3..length() which is specific to floats and smis","msgtype":"m.text"},"ts":1449238272000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"there's nothing forbidding this","msgtype":"m.text"},"ts":1449238276000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and it could even be encoded in the grammar of the language at some point","msgtype":"m.text"},"ts":1449238286000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"You are the one missing my point. Type theory has a massive literature, and never in it you will find types framed as you do in JavaScript.","msgtype":"m.text"},"ts":1449238305000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"the literature is all about guarantees, and guarantees are certainly possible in dynamic languages","msgtype":"m.text"},"ts":1449238335000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you just can't necessarily have static guarantees","msgtype":"m.text"},"ts":1449238340000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Saying that JS has multiple types is a pet peeve of mine, like \"isomorphic\" JS,","msgtype":"m.text"},"ts":1449238355000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"or Julia claiming it has dependent types.","msgtype":"m.text"},"ts":1449238356000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but that was a non-starter for scripting from the beginning","msgtype":"m.text"},"ts":1449238363000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"flexible typing is pretty cool too. RDF is more along those lines: you can merge data structures from around the web, and infer types on the fly. And since every thing has a global identifier URI you avoid the duck-typing problem, that JS still has.","msgtype":"m.text"},"ts":1449238376000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"`for (x of { [Symbol.iterator]() { return null; } });` <<< you have a guarantee which forbids this --- it's a runtime guarantee, but there is still a guarantee","msgtype":"m.text"},"ts":1449238458000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Anyway, the link has posted pretty much explains my stance, I have nothing more to say that Harper didn't already write in it. :)","msgtype":"m.text"},"ts":1449238458000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I posted*","msgtype":"m.text"},"ts":1449238462000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"worrying too much about whether it's static or dynamic is a waste of effort","msgtype":"m.text"},"ts":1449238469000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Type system are a syntactic effort.","msgtype":"m.text"},"ts":1449238479000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ideally you'd have a language that could have such just in time typing... that's what would be needed for a real web language ( RDF is just a datastructure not a programming language )","msgtype":"m.text"},"ts":1449238496000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"What is a huge waste of effort is conflating different things under the same monicker, but YMMV.","msgtype":"m.text"},"ts":1449238497000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"the syntactic effort can also arm the runtime and compiler with more information for aggressively making assertions and guarantees","msgtype":"m.text"},"ts":1449238510000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"which leads to the same thing (with not quite as elegant machine code)","msgtype":"m.text"},"ts":1449238532000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"arguably safer machine code, but whatever","msgtype":"m.text"},"ts":1449238555000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Having a syntactic method refusing to attribute any meaning to a piece of invalid code does not lead to the same thing as a unityped language where any function can take values of any shapes.","msgtype":"m.text"},"ts":1449238602000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"they're different things, but they lead to the same thing","msgtype":"m.text"},"ts":1449238630000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I agree that there are different notions of types at play. But still, the fact that I can translate Fetch API into Scala.JS typed Fetch.API does say something interesting. :-)","msgtype":"m.text"},"ts":1449238637000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: Sure.","msgtype":"m.text"},"ts":1449238652000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"caitp: To me, that isn't true, cf. above link.","msgtype":"m.text"},"ts":1449238673000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that's why I think you're missing the point, it doesn't really matter if the guarantees are static or not","msgtype":"m.text"},"ts":1449238748000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if X will never work, will you still write X?","msgtype":"m.text"},"ts":1449238764000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"you make your own static guarantee","msgtype":"m.text"},"ts":1449238775000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and if someone sneaks X into your program dynamically, it will fail elegantly","msgtype":"m.text"},"ts":1449238782000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"How do you know X will never work?","msgtype":"m.text"},"ts":1449238787000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"Elegantly\", hah.","msgtype":"m.text"},"ts":1449238791000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Anyway, I'm out of this conversation since you didn't even read the link.","msgtype":"m.text"},"ts":1449238808000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"btw on duck typing I once wrote this https://blogs.oracle.com/bblfish/entry/duck_typing_done_right ( image is hidden because of http/https move )","msgtype":"m.text"},"ts":1449238823000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"Have a look at \"Dynamic Languages are Static Languages\" https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/","msgtype":"m.text"},"ts":1449238823000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"s/Have/Having/","msgtype":"m.text"},"ts":1449238837000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"you know X will never work, because you enforce that it never works =)","msgtype":"m.text"},"ts":1449238840000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"bblfish: Will read yours.","msgtype":"m.text"},"ts":1449238855000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"bblfish: The second is the one I linked. :)","msgtype":"m.text"},"ts":1449238873000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: you'll find the work by Brandom interesting - if you have a bit of an analytical philosophical bent.","msgtype":"m.text"},"ts":1449238963000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: Where is that?","msgtype":"m.text"},"ts":1449238980000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"bblfish: RDF always kind of interested me, even though I never did anything with it.","msgtype":"m.text"},"ts":1449239015000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"http://www.pitt.edu/~rbrandom/ his books: http://www.pitt.edu/~rbrandom/publist.html But perhaps most of all \"Making it explicit\" .","msgtype":"m.text"},"ts":1449239067000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"That's one long beard.","msgtype":"m.text"},"ts":1449239093000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or more recently \" Between Saying and Doing: Towards an Analytic Pragmatism\"","msgtype":"m.text"},"ts":1449239100000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"I'm sure he strokes it when he thinks about types.","msgtype":"m.text"},"ts":1449239114000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"there he even uses a bit of category theory - though I read that before I really knew about those","msgtype":"m.text"},"ts":1449239124000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: Will try to find the one about explicitness.","msgtype":"m.text"},"ts":1449239158000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"He's a student of David Lewis https://philosophy.princeton.edu/about/past-faculty/david-k-lewis who also had a long beard.","msgtype":"m.text"},"ts":1449239197000,"senderName":"bblfish","senderId":"bblfish@irc"},
{"content":{"body":"bblfish: Ah ah.","msgtype":"m.text"},"ts":1449239298000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"there is convention that interfaces should start with uppercase letter","msgtype":"m.text"},"ts":1449247694000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is that documented somewhere","msgtype":"m.text"},"ts":1449247711000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I doubt it","msgtype":"m.text"},"ts":1449247756000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"any research whose title contains the word \"Towards\" is very likely to be bogus","msgtype":"m.text"},"ts":1449257559000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc, how about \"Toward\", that too?","msgtype":"m.text"},"ts":1449257820000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1449257829000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"ok I'll offer a couple of posts for you to shoot down http://tantek.com/2015/068/b1/security-towards-minimum-viable-web-platform and http://tantek.com/2013/338/b1/people-focused-mobile-communication-experience ;)","msgtype":"m.text"},"ts":1449257864000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"actually I should say \"is even more likely to be bogus than average\"","msgtype":"m.text"},"ts":1449257873000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"tantek: ok, I stand by my claim :-)","msgtype":"m.text"},"ts":1449257921000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I look forward to your thoughtful critiques :)","msgtype":"m.text"},"ts":1449257972000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I think the people-focused thing was a pretty good idea. \"Towards\" didn't belong in the title :-)","msgtype":"m.text"},"ts":1449258126000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc - indeed. it makes me cringe now admittedly","msgtype":"m.text"},"ts":1449258162000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Toward essays considered harmful?","msgtype":"m.text"},"ts":1449258208000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"\"Toward(s)\" is a weasel word","msgtype":"m.text"},"ts":1449258246000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Towards a Consideration of the Harmfulness of Toward Essays","msgtype":"m.text"},"ts":1449258246000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"similar to headlines that end in a question mark","msgtype":"m.text"},"ts":1449258257000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc - that's a dilution of \"weasel word\"","msgtype":"m.text"},"ts":1449258269000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"which is much more specifically about the \"Some say\", \"One could say\", \"People say\", \"It is considered\" patterns","msgtype":"m.text"},"ts":1449258295000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"https://indiewebcamp.com/it_is_considered","msgtype":"m.text"},"ts":1449258352000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"The maxim is that if a headline ends in a question, the answer is always \"no\".","msgtype":"m.text"},"ts":1449263191000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"smaug____: casing rules at https://w3ctag.github.io/design-principles/#casing-rules","msgtype":"m.text"},"ts":1449267774000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is there no way to search the source in https://trac.webkit.org/browser ?","msgtype":"m.text"},"ts":1449267918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, this came when looking at FIDO U2F where Chrome is shipping something totally proprietary and the spec doesn't properly spec what is the API entry point. It does have an interface with name 'u2f', which feels odd","msgtype":"m.text"},"ts":1449269103000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: whole API seems bad, I am sad about it.","msgtype":"m.text"},"ts":1449269120000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, it is horrible","msgtype":"m.text"},"ts":1449269127000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there is some new version coming, and that spec looks at least a bit saner","msgtype":"m.text"},"ts":1449269145000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is rather sad that Chrome ships this kinds of APIs without standardization under some random .chrome prefixes","msgtype":"m.emote"},"ts":1449269249000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wonders if blink folks have considered removing window.chrome","msgtype":"m.emote"},"ts":1449269507000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: i just search https://github.com/WebKit/webkit/","msgtype":"m.text"},"ts":1449270558000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"It seems unlikely we need to copy the Chrome U2F thing, to me. It's only being used on a handful of sites and they are theoretically capable of moving to a new API that doesn't suck; particularly if Microsoft are only implementing the new version too","msgtype":"m.text"},"ts":1449271057000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"smaug____: ^","msgtype":"m.text"},"ts":1449271062000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah, hopefully. dev.platform has the discussion","msgtype":"m.text"},"ts":1449271150000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"apparently the new version is still rather early draft though","msgtype":"m.text"},"ts":1449271164000,"senderName":"smaug____","senderId":"smaug____@irc"}
]