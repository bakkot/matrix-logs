[
{"content":{"body":"annevk: about the encoding support in the validator.nu parser, I’m remembering now that Henri had been working on a spec-conformant implementation previously","msgtype":"m.text"},"ts":1600073891000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...but it’s in a separate branch and it’s not had any new changes in a long time","msgtype":"m.text"},"ts":1600073939000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and there’s a note about it being “unfinished” but not with any details about what’s needed to finish it","msgtype":"m.text"},"ts":1600074003000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I kind of vaguely recall now that Henri had been working on Big5 decoder and maybe that’s what never got finished","msgtype":"m.text"},"ts":1600074050000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But I’m wondering if you remember any more from past discussions with him","msgtype":"m.text"},"ts":1600074074000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think this would have been maybe 5 years ago","msgtype":"m.text"},"ts":1600074092000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: could you interpret something for me :) https://html.spec.whatwg.org/#own-autocapitalization-hint \"The autocapitalize IDL attribute, on getting, must return the string value corresponding to own autocapitalization hint of the element, with the exception that the default state maps to the empty string. On setting, it must set the autocapitalize content attribute to the given new value.\"","msgtype":"m.text"},"ts":1600076901000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"The 'must return the string value corresponding to own autocapitalization hint of the element' part","msgtype":"m.text"},"ts":1600076918000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That looks like a typo, but I'll have a look at what it might mean without that too","msgtype":"m.text"},"ts":1600076950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how does that work when same hint maps to multiple values","msgtype":"m.text"},"ts":1600076975000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ah yeah, that's buggy","msgtype":"m.text"},"ts":1600077053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: so judging from the tests there is normalization going on","msgtype":"m.text"},"ts":1600077223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or some specific mapping","msgtype":"m.text"},"ts":1600077274000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that sentences state maps always back to sentences string","msgtype":"m.text"},"ts":1600077289000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: it seems that the idea is that the state name is also the canonical name","msgtype":"m.text"},"ts":1600077297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1600077307000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: \"For the purposes of reflection, the canonical keyword for the Anonymous state is the anonymous keyword.\" is what we have elsewhere, I guess I can PR a fix for that","msgtype":"m.text"},"ts":1600077443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Except of course it doesn't use reflection so the fix needs to be different","msgtype":"m.text"},"ts":1600077837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: https://github.com/whatwg/html/pull/5911","msgtype":"m.text"},"ts":1600078146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1600078185000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Is there anything wrong with making an interface that's indexable, iterable, but also an event target? Or is that looked down upon vs having an event target and a sequence?","msgtype":"m.text"},"ts":1600093794000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"As in, the sequence and event target being different objects vs being the same object","msgtype":"m.text"},"ts":1600093834000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: indexable is a bit frowned upon I think still","msgtype":"m.text"},"ts":1600096418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1600096670000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Domenic came up with some new type specifically for array-like structures","msgtype":"m.text"},"ts":1600096785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I think it's https://heycam.github.io/webidl/#idl-observable-array","msgtype":"m.text"},"ts":1600096799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not an interface though","msgtype":"m.text"},"ts":1600096804000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"EventTarget + a sequence/frozenarray/observablearray would be best I think","msgtype":"m.text"},"ts":1600096824000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The context is https://github.com/webscreens/window-placement/issues/30 fwiw","msgtype":"m.text"},"ts":1600096966000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm confused about what is the scope of WHATWG. Can I ask and discuss here?","msgtype":"m.text"},"ts":1600109954000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I see that it manages a number of standards.","msgtype":"m.text"},"ts":1600110003000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I see that its set of standards that are meant to be implemented by the browsers. But it also affects other parts of web infrastructure, like web servers, right?","msgtype":"m.text"},"ts":1600110636000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"For example the Fetch standard or the Storage standard shouldn't affect any other component of the web except the browser.","msgtype":"m.text"},"ts":1600110844000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"But the URL standard does affects other components of the web, not just the browser.","msgtype":"m.text"},"ts":1600110886000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Sounds about right, though fetch() has been implemented by servers to some extent","msgtype":"m.text"},"ts":1600111980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, yes, although this was not the intention of the standard I guess.","msgtype":"m.text"},"ts":1600112242000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Now, my question is, how are WHATWG standards related to \"Web IDL\" standard?","msgtype":"m.text"},"ts":1600112292000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://heycam.github.io/webidl/","msgtype":"m.text"},"ts":1600112336000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: almost all specs that define JavaScript APIs, including WHATWG specs and many others, use Web IDL.","msgtype":"m.text"},"ts":1600113906000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm a bit confused why Javascript APIs are not defined in terms of Javascript but in another language?","msgtype":"m.text"},"ts":1600114587000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Does Ecmascript need to conform to this Web IDL also?","msgtype":"m.text"},"ts":1600114612000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Domenic,","msgtype":"m.text"},"ts":1600114680000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"croraf: they are defined in terms of an abstraction layer, which reduces the boilerplate. For example you can declare your argument types in Web IDL and that abstracts away 3-4 steps per argument of validation code.","msgtype":"m.text"},"ts":1600114793000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"croraf: the ecmascript spec defines the ecmascript language without any dependency on webidl. webidl is on top of ecmascript. The fetch() API and others use webidl to get a consistent and more thought through API fundamentals on details such as argument conversion and validation","msgtype":"m.text"},"ts":1600114998000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic, your explaination makes sense, but I'm still a bit suspicious about this Web IDL. For example it defines a DOMString, so when designing an API you can for example say my function accepts one argument of type DOMString?","msgtype":"m.text"},"ts":1600115028000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Yes. And that allows specs to avoid writing the 3 steps in https://heycam.github.io/webidl/#es-DOMString for every argument.","msgtype":"m.text"},"ts":1600115064000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If there was no WebIDL you would say my function accepts one argument of type ES String","msgtype":"m.text"},"ts":1600115067000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"No, because you'd need to define what happens when the web developer passes a non-String.","msgtype":"m.text"},"ts":1600115080000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, ok I see","msgtype":"m.text"},"ts":1600115104000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"If you look at the function definitions in the ECMAScript spec, you see that kind of checking that the arguments have a certain type all over the place.","msgtype":"m.text"},"ts":1600115136000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"zcorpan, I see, thanks. Btw using these 2 words next to each other is so confusing :D \"more thought through API\" for a non native speaker :D","msgtype":"m.text"},"ts":1600115222000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"heh :)","msgtype":"m.text"},"ts":1600115245000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"andreubotella, you want to say they repeat themselves all over the place. It would be better if they defined the \"mnemonics\" themselves","msgtype":"m.text"},"ts":1600115318000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1600115320000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"(I mean they have the absctract operations, and shortcuts like ? and !)","msgtype":"m.text"},"ts":1600115337000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Hmmm, Ok the abstract operations are internal to ES.","msgtype":"m.text"},"ts":1600115382000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"you can still those abstract operations outside of ES; the Streams standard used them until recently, and some of the operations in WebIDL do","msgtype":"m.text"},"ts":1600115482000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but the typechecking isn't very conducive to \"mnemonics\" of that kind unless you add a layer like WebIDL, I think","msgtype":"m.text"},"ts":1600115508000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I have 2 more questions. One is who maintains the WebIDL, is it the same group that maintains the WHATWG?","msgtype":"m.text"},"ts":1600115560000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"The second is, is WebIDL only used in the API specs for Javascript running in the browser, or also to define interface between some other browser components?","msgtype":"m.text"},"ts":1600115696000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"(or some other systems like Node...)","msgtype":"m.text"},"ts":1600115719000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"WebIDL is maintained by the W3C, which is a different standards body, but it shares many people with the WHATWG","msgtype":"m.text"},"ts":1600115764000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"for example, I believe that our own annevk and Domenic are editors of WebIDL, or at least have merge permissions","msgtype":"m.text"},"ts":1600115788000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"And WHATWG is W3C+many others?","msgtype":"m.text"},"ts":1600115824000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"(that is W3C is one of the parties in WHATWG)","msgtype":"m.text"},"ts":1600115921000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"the W3C and the WHATWG are separate organizations, but they share many people because both of them define large chunks of the web platform, and so browser vendors have representation in both of them","msgtype":"m.text"},"ts":1600115952000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, thanks!","msgtype":"m.text"},"ts":1600116038000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Now only one of my questions remains: Is WebIDL only used in the API specs for Javascript running in the browser, or also to define interface between some other browser components?","msgtype":"m.text"},"ts":1600116083000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"so WebIDL was originally meant as a compatibility layer between the browser code (written in C++ or Rust) and the JS APIs","msgtype":"m.text"},"ts":1600116163000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Or better: \"Is WebIDL only used in the API specs for libraries used by the Javascript running in the browser, or also to define interface between some other browser components?\"","msgtype":"m.text"},"ts":1600116168000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"but in the last few years it has shown its use in porting web APIs to Node.js or Deno","msgtype":"m.text"},"ts":1600116182000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I don't think WebIDL is used per se across browser components that aren't accessible from JS code","msgtype":"m.text"},"ts":1600116222000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella, thanks, you helped me a lot.","msgtype":"m.text"},"ts":1600116239000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"When you say \"...and the JS APIs\" you mean the JS API these libraries expose for the browser's Javascript to use?","msgtype":"m.text"},"ts":1600116299000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"no problem","msgtype":"m.text"},"ts":1600116300000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that's right","msgtype":"m.text"},"ts":1600116309000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Thanks, all clear :)","msgtype":"m.text"},"ts":1600116316000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"You guys are awesome :)","msgtype":"m.text"},"ts":1600116323000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Very precise in the answers, I guess the specs people are like that :D","msgtype":"m.text"},"ts":1600116350000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"heh, I just started contributing to the specs a few months ago","msgtype":"m.text"},"ts":1600116389000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"most of this is stuff I've picked up","msgtype":"m.text"},"ts":1600116395000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"*picked up on","msgtype":"m.text"},"ts":1600116406000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"my English is also not the best ever :)","msgtype":"m.text"},"ts":1600116418000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Haven't noticed that.","msgtype":"m.text"},"ts":1600116449000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I got interested couple of days ago when I explored the \"fetch\" API in the MDN documents.","msgtype":"m.text"},"ts":1600116480000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"If you dive thorough it you get to the point where you can read the incoming response using https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/getReader","msgtype":"m.text"},"ts":1600116532000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah, I also found my way here through MDN","msgtype":"m.text"},"ts":1600116632000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Here it mentions that the mode parameter is of type DOMString.","msgtype":"m.text"},"ts":1600116639000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I wish MDN would not use IDL terms :(. They are really for implementations and code-generators. Web developers should never need to worry about what a \"DOMString\" is.","msgtype":"m.text"},"ts":1600116688000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes!!!","msgtype":"m.text"},"ts":1600116719000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Similarly MDN says \"interface\" a lot, which is a confusing IDL term. For web developers they could just say \"class\"","msgtype":"m.text"},"ts":1600116721000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have given them this feedback many times but they have not been willing to change.","msgtype":"m.text"},"ts":1600116733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"They don't use it often. Rarely you encounter something like that.","msgtype":"m.text"},"ts":1600116738000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Domenic, I think MDN is free to edit from anyone.","msgtype":"m.text"},"ts":1600116766000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Yeah, but fighting against the full-time editors is hard.","msgtype":"m.text"},"ts":1600116777000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You think they might revert the change back also?","msgtype":"m.text"},"ts":1600116798000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Or just that you cannot change on every place and continously?","msgtype":"m.text"},"ts":1600116813000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Mostly the latter. But also, they might revert the change because if I changed it in only one place it would be inconsistent, and they prefer consistency.","msgtype":"m.text"},"ts":1600116839000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, also I checked this: https://developer.mozilla.org/en-US/docs/Web/API/DOMString","msgtype":"m.text"},"ts":1600116878000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"And it says that it maps directly to String.","msgtype":"m.text"},"ts":1600116910000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I mean, in this direction this might be true actually.","msgtype":"m.text"},"ts":1600116955000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Yeah, I mean, it could explain that it will \"stringify\" whatever you pass in... but I'm not sure how helpful that is.","msgtype":"m.text"},"ts":1600117048000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The root of the problem is that they used DOMString at all.","msgtype":"m.text"},"ts":1600117096000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I suspect that the MDN folks wanted to preserve the distinction between DOMString/USVString/ByteString, since the latter two won't accept every ES string","msgtype":"m.text"},"ts":1600117296000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"but just throwing those terms at a JS developer won't help them very much","msgtype":"m.text"},"ts":1600117356000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Is there a reason why mention DOMString here: https://pasteboard.co/Jr608kY.png","msgtype":"m.text"},"ts":1600117647000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"When it says that mode can have only 2 valid values, the \"byob\" and undefined.","msgtype":"m.text"},"ts":1600117693000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I suspect that's a \"mistranslation\", since the WebIDL here uses very uncommon constructs","msgtype":"m.text"},"ts":1600117851000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"the Stream spec switched to using WebIDL a couple months ago, and some of the APIs weren't very WebIDL-friendly","msgtype":"m.text"},"ts":1600117893000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"https://streams.spec.whatwg.org/#rs-get-reader","msgtype":"m.text"},"ts":1600117981000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"this is the link andreubotella","msgtype":"m.text"},"ts":1600117993000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"I'm thinking of removing the mention of DOMString there :/","msgtype":"m.text"},"ts":1600118027000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"yeah, I don't think anyone would oppose to that","msgtype":"m.text"},"ts":1600118049000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"the parameter here uses a dictionary with a single non-required element, which is an enum with only one variant","msgtype":"m.text"},"ts":1600118143000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"in practice, the allowed values of mode are the enum variant (\"byob\") and undefined, but that's not easy to tell","msgtype":"m.text"},"ts":1600118207000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I had to read through the relevant sections of WebIDL a couple times to figure out why Domenic used that","msgtype":"m.text"},"ts":1600118265000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"In the streams spec link, first step it checks if options[\"mode\"] does not exist.","msgtype":"m.text"},"ts":1600118444000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"It links to \"exist\" definition, but I'm still not clear when is the object[\"key\"] considered to exist.","msgtype":"m.text"},"ts":1600118487000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"if you look at the WebIDL block here: https://streams.spec.whatwg.org/#rs-class-definition","msgtype":"m.text"},"ts":1600118519000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"you see that the parameter to getReader is an optional dictionary","msgtype":"m.text"},"ts":1600118527000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"If the object itself does not exist or is undefined or is a string, what happens here.","msgtype":"m.text"},"ts":1600118531000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"iirc, WebIDL translates a dictionary into an Infra map, such that if the key is undefined, it \"does not exist\" by that definition","msgtype":"m.text"},"ts":1600118578000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Yes. But if the options itself is undefined what happens at this step:","msgtype":"m.text"},"ts":1600118655000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"1. If options[\"mode\"] does not exist, return ? AcquireReadableStreamDefaultReader(this).","msgtype":"m.text"},"ts":1600118656000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"the WebIDL block has: optional ReadableStreamGetReaderOptions options = {}","msgtype":"m.text"},"ts":1600118682000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"a.k.a. when the param is not given, the Infra map will be the same as if it was converted from an empty JS object","msgtype":"m.text"},"ts":1600118708000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"that is, empty","msgtype":"m.text"},"ts":1600118717000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"there's a lot of moving parts","msgtype":"m.text"},"ts":1600118732000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"I'd recommend you to first go through the Infra spec, and then check out some of the webidl conversion algorithms","msgtype":"m.text"},"ts":1600118813000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"for some quick intuition: the WHATWG spec algorithms for the most part don't deal with JS objects directly -- they deal with the WebIDL interfaces","msgtype":"m.text"},"ts":1600118886000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"a.k.a with the C++ objects that back the JS objects","msgtype":"m.text"},"ts":1600118946000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Yes. I understand your last comment, yes. I'm missing a lot of basics. But just let make this clear. If the options is not given at all, or is given as undefined it will be set to an \"empty object\" right?","msgtype":"m.text"},"ts":1600118963000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"(or empty map)","msgtype":"m.text"},"ts":1600119004000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"(or empty Infra map :D, whatever)","msgtype":"m.text"},"ts":1600119029000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"as indicated by \"= {}\"","msgtype":"m.text"},"ts":1600119048000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"\"= {}\" means that the default JS value is an empty object (more or less...)","msgtype":"m.text"},"ts":1600119077000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"and WebIDL translates that to an empty Infra map","msgtype":"m.text"},"ts":1600119085000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Now, one last question. What if I provide a string or a number as this options argument. How is this resolved from the IDL schema that we look at?","msgtype":"m.text"},"ts":1600119131000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#es-dictionary","msgtype":"m.text"},"ts":1600119155000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"\"an ECMAScript value `esDict` is converted into an IDL dictionary type by running the following algorithm\"","msgtype":"m.text"},"ts":1600119180000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"in this case:","msgtype":"m.text"},"ts":1600119203000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"    If Type(esDict) is not Undefined, Null or Object, then throw a TypeError.","msgtype":"m.text"},"ts":1600119203000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Cool. Indeed makes sense. Ty. I'm going to test if it really throws a TypeError :D","msgtype":"m.text"},"ts":1600119321000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"That error might not yet be implemented in browsers. It's one of the subtle differences that occurred when we switched the spec to Web IDL, and implementations haven't fully switched yet.","msgtype":"m.text"},"ts":1600119453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"See the full list of subtle differences in https://github.com/whatwg/streams/pull/1035","msgtype":"m.text"},"ts":1600119472000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes, chrome doesnt throw an error","msgtype":"m.text"},"ts":1600119577000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"https://pasteboard.co/Jr6duq5.png Domenic , andreubotella","msgtype":"m.text"},"ts":1600119609000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Yes, the old spec would look up 'the string'.mode, which was usually undefined","msgtype":"m.text"},"ts":1600119660000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool cool. Ty andreubotella and Domenic and others :)","msgtype":"m.text"},"ts":1600119702000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"from my time lurking in that thread, I thought Chrome had switched to WebIDL for streams","msgtype":"m.text"},"ts":1600119716000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: they did, but with a ton of `any` to match the existing semantics as much as possible.","msgtype":"m.text"},"ts":1600119743000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1600119750000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Btw I contributed a bit to a Rust JS engine. Cool project called boa. Primitive support though.","msgtype":"m.text"},"ts":1600119805000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"There is a much more advanced engine in development Jsparagus Mozilla backed, but dont know if it stopped with mozilla's cuts","msgtype":"m.text"},"ts":1600119840000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Actually Jsparagus is maybe only a parser and compiler or something like that.","msgtype":"m.text"},"ts":1600119866000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Boa is a parser and runner.","msgtype":"m.text"},"ts":1600119900000,"senderName":"croraf","senderId":"croraf@irc"},
{"content":{"body":"Fun stuff, rust is kind of fun.","msgtype":"m.text"},"ts":1600119920000,"senderName":"croraf","senderId":"croraf@irc"}
]