[
{"content":{"body":"http://www.w3.org/2008/12/17-w3m-irc.html","msgtype":"m.text"},"ts":1229573400000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1229573520000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1229573521000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Philip`: can you remind me where source for your spec splitter is?","msgtype":"m.text"},"ts":1229584380000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and what structure does it expect in the source doc it's meant to split?","msgtype":"m.text"},"ts":1229584381000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: http://code.google.com/p/html5/source/browse/trunk/spec-splitter/spec-splitter.py","msgtype":"m.text"},"ts":1229589960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"It expects the source document to be the HTML5 spec","msgtype":"m.text"},"ts":1229590020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thought it may not be too hard to modify for other documents, mostly by modifying the split_exceptions variable (which defines some ids to split on, in addition to the default of all <h2>)","msgtype":"m.text"},"ts":1229590140000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"*though","msgtype":"m.text"},"ts":1229590141000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"apologises for breaking the meta tag handling in html5lib","msgtype":"m.emote"},"ts":1229590920000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We need to implement the character encoding changing stuff","msgtype":"m.text"},"ts":1229590980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Also maybe it would be a performance win to intern tag names and then compare with is rather than == in the tree builder?","msgtype":"m.text"},"ts":1229590981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"a massive perf win, I'd have thought","msgtype":"m.text"},"ts":1229591040000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"takkaria: I guess that depends on how slow interning strings is and whether Philip` implements it or me :)","msgtype":"m.text"},"ts":1229591100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The entire tree builder has very little cost compared to the tokeniser, as far as I can tell","msgtype":"m.text"},"ts":1229591160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hubbub doesn't intern tag names yet, and some 20% of runtime is spent in string comparisons on tag names ATM, IIRC","msgtype":"m.text"},"ts":1229591220000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"Actually, I suppose \"very little\" might really mean \"about a third of total runtime\", which is still significant","msgtype":"m.text"},"ts":1229591280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"String comparison in Python is implemented in C, so it's relatively fast - I think it's all the Pythonic bits that are taking all the time","msgtype":"m.text"},"ts":1229591281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"is pretty sure you can't solve a theroem","msgtype":"m.emote"},"ts":1229592840000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Is it not reasonable to say that e.g. Fermat's Last Theorem has been solved?","msgtype":"m.text"},"ts":1229593080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I guess that is common although I think it is inaccurate (should be Fermat's Last Theroem has been proven or something). However I'm the example in the spec that talks about \"Solving Pythagoras' theorem\" to mean \"solving for the third side of a triangle given the other two sides\" seems more wrong","msgtype":"m.text"},"ts":1229594400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"supposes it should have been called Fermat's Last Hypothesis","msgtype":"m.emote"},"ts":1229594520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: The spec says it's 'solving for some variable', which seems a different meaning to simply 'solving'","msgtype":"m.text"},"ts":1229594760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(It seems probably clear enough that it means it's taking an equational form of Pythagoras' Theorem and solving that equation in terms of some variable, which is what it's doing)","msgtype":"m.text"},"ts":1229595120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I could tell what it was talking about but I still don't think that a theroem is something you can solve.","msgtype":"m.text"},"ts":1229599740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"A popup window can accomodate to page size.","msgtype":"m.text"},"ts":1229607120000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"html5lib r1233 takes 16.1 seconds to parse the HTML5 spec","msgtype":"m.text"},"ts":1229607600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"html5lib r1241 takes 13.1 seconds to parse the HTML5 spec","msgtype":"m.text"},"ts":1229607601000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I suppose that's not an entirely worthless improvement","msgtype":"m.text"},"ts":1229607602000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: !","msgtype":"m.text"},"ts":1229607720000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you spec splitter, can you remind me where the source is?","msgtype":"m.text"},"ts":1229607721000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: http://krijnhoetmer.nl/irc-logs/whatwg/20081218#l-244","msgtype":"m.text"},"ts":1229607780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ah, thanks","msgtype":"m.text"},"ts":1229607840000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dunno why I didn't see that before","msgtype":"m.text"},"ts":1229607900000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"OK, so it splits on all H2s? (plus whatever IDs are in split_exceptions)","msgtype":"m.text"},"ts":1229607960000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yes (except in things with class=\"no-toc\")","msgtype":"m.text"},"ts":1229607961000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Uh, I mean:","msgtype":"m.text"},"ts":1229607962000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yes (except for H2s with class=\"no-toc\")","msgtype":"m.text"},"ts":1229607963000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"No, I don't mean that","msgtype":"m.text"},"ts":1229608020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yes (except for anything before the first H2 without class=\"no-toc\")","msgtype":"m.text"},"ts":1229608021000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hmm, html5lib parses in 12.2 seconds if I make it use a string for input (instead of a stream)","msgtype":"m.text"},"ts":1229608080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"?!","msgtype":"m.text"},"ts":1229608200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That seems odd. I thought we had to work to make strings look like file-like objects","msgtype":"m.text"},"ts":1229608260000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"stringio?","msgtype":"m.text"},"ts":1229608261000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1229608320000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Uh, I mean: ...if I make it use a string for input (instead of a stream) and change HTMLInputStream to behave more efficiently when it's got a string as input","msgtype":"m.text"},"ts":1229608321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(There's no point messing around with chunks and unget buffers if you've already got the entire string stored in memory)","msgtype":"m.text"},"ts":1229608380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Well that sounds more sensible ;)","msgtype":"m.text"},"ts":1229608381000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If I also disable the position-recording code, it parses in 11.4 seconds","msgtype":"m.text"},"ts":1229608440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Might it be reasonable to add a constructor argument to disable position computation, which people can use if they're sure never going to care about positions (e.g. they're not going to look at parse error messages)?","msgtype":"m.text"},"ts":1229608500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Can you put a profile somewhere?","msgtype":"m.text"},"ts":1229608501000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: How much do you unget in the worst cases? Enough that a double buffer for the file IO wouldn't be practical?","msgtype":"m.text"},"ts":1229608620000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"wonders hat a double buffer is","msgtype":"m.emote"},"ts":1229608680000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Something like http://philip.html5.org/misc/html5lib-profile-r1241.txt ?","msgtype":"m.text"},"ts":1229608800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Dashiva: One character","msgtype":"m.text"},"ts":1229608801000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (That's from running parse.py --no-html -t)","msgtype":"m.text"},"ts":1229608860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (with the input being the HTML5 spec from 25 July 2008)","msgtype":"m.text"},"ts":1229608920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: (in this case) keeping two buffers so you can read into one and still have the other available for use. That way you always have old data available for ungetting","msgtype":"m.text"},"ts":1229608921000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"notes that the current tokeniser updatePosition function is pretty much entirely unrelated to the function that was called updatePosition in the last-but-one revision of html5lib","msgtype":"m.emote"},"ts":1229609040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Now it's the thing that counts newlines in the string returned from charsUntil, to update the position information)","msgtype":"m.text"},"ts":1229609100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Like that but sorted by total time rather than cumulative time, I guess","msgtype":"m.text"},"ts":1229609101000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: http://philip.html5.org/misc/html5lib-profile-r1241-2.txt ?","msgtype":"m.text"},"ts":1229609220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(There is a sadly a lack of blatant bottlenecks :-( )","msgtype":"m.text"},"ts":1229609580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"who's up for a naming debate? http://www.w3.org/Bugs/Public/show_bug.cgi?id=6298","msgtype":"m.text"},"ts":1229610060000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I'm all out of bikes to shed","msgtype":"m.text"},"ts":1229610120000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"zcorpan: HTML5 (All Your Error Are Belong To Us) should cover it I think","msgtype":"m.text"},"ts":1229610240000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: Indeed. Maybe we could just get Hixie to remove stuff from the spec so we have fewer tokens to process","msgtype":"m.text"},"ts":1229610241000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"or make everything valid so you don't need to spend time reporting errors","msgtype":"m.text"},"ts":1229610300000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: It spends almost no time reporting errors in my profiling, since the input only has one error (missing doctype)","msgtype":"m.text"},"ts":1229610360000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh. ok","msgtype":"m.text"},"ts":1229610361000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(It's intentional that I'm profiling the parsing of the spec, rather than of more realistic web content, because my use case for html5lib is parsing the HTML5 spec and so that's what I want to optimise for)","msgtype":"m.text"},"ts":1229610420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(If someone else wants to use html5lib for parsing loads of invalid content, they can optimise those parts themselves :-) )","msgtype":"m.text"},"ts":1229610421000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: He's already added 25% more bytes to the spec than the version I've been using :-(","msgtype":"m.text"},"ts":1229610540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Well that's no good at all.","msgtype":"m.text"},"ts":1229610660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(Actually I've mostly been testing with the first 10^4 lines of the spec, because I'm too lazy to wait for the entire thing to be parsed every time I make a change)","msgtype":"m.text"},"ts":1229610661000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I do not think authors think about tags at all, they just want to publish information.","msgtype":"m.text"},"ts":1229611800000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"18 comparisons would be enough for 2^17 insertion modes.","msgtype":"m.text"},"ts":1229611920000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"\"if an end user finds an error, he probably will report it to the owner of the web site, who in turn will report it (quite angrily) to web designer.\" - I don't think that's true - if I find an error on a web site, I just moan about it on IRC","msgtype":"m.text"},"ts":1229611980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I sometimes do when the site steps on my toes too heavily.","msgtype":"m.text"},"ts":1229612040000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But I am not an ordinary end user anyway.","msgtype":"m.text"},"ts":1229612041000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If it's an ill-formed XML error, I'd find it hard to report to the owner even if I wanted to, because it would prevent me from reading their site and finding the contact details","msgtype":"m.text"},"ts":1229612100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"You can look for @ in the page source.","msgtype":"m.text"},"ts":1229612101000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"(if it is not disguised as something else, that is)","msgtype":"m.text"},"ts":1229612160000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Frex, I reported the CSS proble with the spec to Ian, and he boldly ignored my complaint.","msgtype":"m.text"},"ts":1229612161000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"I'm far too lazy to do that","msgtype":"m.text"},"ts":1229612220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I have had more success with less knowledgeable webmasters though :-)","msgtype":"m.text"},"ts":1229612221000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Especially if they boast the W3C badge.","msgtype":"m.text"},"ts":1229612280000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Is cross-domain xsl:import guaranteed to throw?","msgtype":"m.text"},"ts":1229612400000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"remembers (a very long time ago) using imdb.com as an example of why the <image> tag has to be supported, and someone saying that they were going to notify the IMDB web people about the problem as a demonstration that it's possible to clean up that kind of legacy mistake","msgtype":"m.emote"},"ts":1229612401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"...and imdb.com still uses <image> today :-(","msgtype":"m.text"},"ts":1229612402000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Ian belongs to the minority who reply there is a problem with my browser.","msgtype":"m.text"},"ts":1229612460000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"I have just got a similar response from Apple.","msgtype":"m.text"},"ts":1229612520000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But Ian was at least right, while Apple is wrong.","msgtype":"m.text"},"ts":1229612521000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"html5lib is an implementation of HTML5 parser.","msgtype":"m.text"},"ts":1229612760000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"is aware of that :-p","msgtype":"m.emote"},"ts":1229612761000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"<div><p>some text<p>some more text</p></p></div> is correct but it amounts to three paragraphs instead of two.","msgtype":"m.text"},"ts":1229612820000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"An unmatched </p> is correct?","msgtype":"m.text"},"ts":1229612821000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Isn�t it?","msgtype":"m.text"},"ts":1229612880000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"The opening tag is optional so it can be inserted when needed.","msgtype":"m.text"},"ts":1229612940000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"I do not think optional tags are a result of guessing.","msgtype":"m.text"},"ts":1229613000000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"If the stack of open elements does not have an element in scope with the same tag name as that of the token, then this is a parse error; act as if a start tag with the tag name p had been seen, then reprocess the current token.","msgtype":"m.text"},"ts":1229613060000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I think they are rather straightforward to invent.","msgtype":"m.text"},"ts":1229613061000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And what about <div >&nbsp;</p >?","msgtype":"m.text"},"ts":1229613062000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"That's <div>[text:&nbsp;]<p></p> as far as I can see","msgtype":"m.text"},"ts":1229613120000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"That would be a change from HTML4 IMHO.","msgtype":"m.text"},"ts":1229613180000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"yecril71: <p> is not optional","msgtype":"m.text"},"ts":1229613181000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, it was mandatory in html4 too","msgtype":"m.text"},"ts":1229613240000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"is ashamed for talking rubbish","msgtype":"m.emote"},"ts":1229613300000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"You cannot check every input after publishing; there are exponentially many ways to arrange things.","msgtype":"m.text"},"ts":1229613480000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Giovanni should be given the title Master of Colourful Narration.","msgtype":"m.text"},"ts":1229613540000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"discovers that his view of the world has been entirely wrong","msgtype":"m.emote"},"ts":1229613600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"What was it this time, Philip`?","msgtype":"m.text"},"ts":1229613601000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"I thought calling charsUntil() would be faster than repeatedly calling char(), but it turns out that it's not :-(","msgtype":"m.text"},"ts":1229613602000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"at least for short strings","msgtype":"m.text"},"ts":1229613603000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"like tag names","msgtype":"m.text"},"ts":1229613604000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh. That sucks. Can't we make charsUntil faster","msgtype":"m.text"},"ts":1229613660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1229613661000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If I'm not doing something stupid, removing the charsUntil from tagNameState makes parsing go ~3% faster","msgtype":"m.text"},"ts":1229613662000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: It seems there's a tradeoff in charsUntil between being efficient for short strings and being efficient for long strings","msgtype":"m.text"},"ts":1229613720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I actually need HTML.","msgtype":"m.text"},"ts":1229613721000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Currently it constructs a regex for each set of characters, and then matches that against the input document","msgtype":"m.text"},"ts":1229613780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Typing </td ><td > and </li ><li > makes me sick.","msgtype":"m.text"},"ts":1229613781000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"which I suppose is adding some fixed overhead that doesn't pay off when you're typically going to be finding two characters","msgtype":"m.text"},"ts":1229613840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(though it's very helpful in dataState, where you might be finding hundreds of characters before the next '<' or '&')","msgtype":"m.text"},"ts":1229613841000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: How about a non-regexp version of charsUntil that just has a while loop or something?","msgtype":"m.text"},"ts":1229613842000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: How would we decide which version of charsUntil to call?","msgtype":"m.text"},"ts":1229613900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Assume that character strings are typically long and markup strings are typically short?","msgtype":"m.text"},"ts":1229614020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"data-* (and maybe aria?) might be trouble","msgtype":"m.text"},"ts":1229614080000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: They are rather uncommon though","msgtype":"m.text"},"ts":1229614081000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Looks like the cross-over point is when you're matching six characters","msgtype":"m.text"},"ts":1229614380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Below that, a loop is faster; above that, the regex is faster)","msgtype":"m.text"},"ts":1229614381000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"so use loop for tag names and attribute names, maybe unquoted attribute value...?","msgtype":"m.text"},"ts":1229614800000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think I'd prefer the idea of gathering statistics rather than guessing :-)","msgtype":"m.text"},"ts":1229614860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Only problem is I don't know how to do that","msgtype":"m.text"},"ts":1229614920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"was looking at http://canvex.lazyilluminati.com/survey/2007-07-17/analyse.cgi/index","msgtype":"m.emote"},"ts":1229614921000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Does Python provide an easy way to find your caller's function name?","msgtype":"m.text"},"ts":1229614922000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"When I tried, it was all hacky and ugly, looking at stack frames","msgtype":"m.text"},"ts":1229614980000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"sys._getframe(1).f_code.co_name - that seems to work","msgtype":"m.text"},"ts":1229615100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"would just have parsed something and done the stats on the resulting tree","msgtype":"m.emote"},"ts":1229615220000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(But I would like an instrumented version of html5lib that showed the call sequence and arguments for any input so that you could tell what was going wrong)","msgtype":"m.text"},"ts":1229615280000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In fact I sort of wrote that once for making graphs of the phase transitions but I deleted it because it was even more ugly than normal","msgtype":"m.text"},"ts":1229615281000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: The tree doesn't give you the right information about charsUntil","msgtype":"m.text"},"ts":1229615340000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"e.g. it won't tell you that the whitespace bit in dataState will read an average of 3.3 characters","msgtype":"m.text"},"ts":1229615400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(because in the tree it'll be merged with all the other characters)","msgtype":"m.text"},"ts":1229615401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Right, it maybe doesn't give you everything you want but it allows determinations of the length of e.g. comments, tag names, etc.","msgtype":"m.text"},"ts":1229615580000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You are also limited by the input data that you measure, regardless of what the method is","msgtype":"m.text"},"ts":1229615640000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Philip` only cares about the html5 spec, remember :)","msgtype":"m.text"},"ts":1229615700000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"We could just rewrite it to be a C extension","msgtype":"m.text"},"ts":1229615760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That'd be quick.","msgtype":"m.text"},"ts":1229615761000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"A pure Python parser is more usable than one that relies on C","msgtype":"m.text"},"ts":1229615820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: A C one is quicker.","msgtype":"m.text"},"ts":1229615880000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Lengths of comments aren't quite the right information to gather - it's the length of the strings between hyphens in comments that matters, since that's what charUntil collects","msgtype":"m.text"},"ts":1229616000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think user agents that do not expect HTML as their primary medium should not be bound by the HTML specification at all.","msgtype":"m.text"},"ts":1229617860000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Like when the content type is something other than text/html.","msgtype":"m.text"},"ts":1229617920000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"My legal theory is that section 3.3.2 applies only to a transfor served as text/html to a user agent expecting HTML.","msgtype":"m.text"},"ts":1229617980000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"XSLT processors are unaffected.","msgtype":"m.text"},"ts":1229617981000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Why anyone should do this remains a mystery to me.","msgtype":"m.text"},"ts":1229618040000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Another possibility is when elements from XHTML namespace are embedded in XML documents that are styled with CSS.","msgtype":"m.text"},"ts":1229618100000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"In that case, behaviour may be taken from the XHTML definition.","msgtype":"m.text"},"ts":1229618160000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"That would be true particularly for form controls and scripts, because XML does not allow scripts.","msgtype":"m.text"},"ts":1229618161000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"(or rather, does not provide for scripts or any kind of interactivity explicitly.)","msgtype":"m.text"},"ts":1229618220000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But even then, XSLT has a tendency of scattering the constituents of the output page across templates,","msgtype":"m.text"},"ts":1229618280000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"so the page as viewed from XSLT would be rather useless.","msgtype":"m.text"},"ts":1229618340000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Stylesheet is a legacy word to describe a transformation.","msgtype":"m.text"},"ts":1229618400000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It is really not appropriate any more.","msgtype":"m.text"},"ts":1229618401000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"That does not mean that \"transformation sheet\" is good.","msgtype":"m.text"},"ts":1229618460000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It is a transformation, certainly not a sheet.","msgtype":"m.text"},"ts":1229618520000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"jgraham: how should i phrase it then?","msgtype":"m.text"},"ts":1229618940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hmm, turns out that tagNameState is the only thing that gets any practical benefit from not using charsUntil","msgtype":"m.text"},"ts":1229619060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: I would probably circumvent the problem by using a different example e.g. solving the roots of a quadratic using the quadratic formula","msgtype":"m.text"},"ts":1229619600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gives up for now, before he introduces more pointless bugs into html5lib","msgtype":"m.emote"},"ts":1229619601000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"ironic that I was just talking about square roots in another channel","msgtype":"m.text"},"ts":1229619660000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"Otherwise I would say \"using Pythagoras' theroem to solve for the hypotenuse <var>a</var> of a triangle of sides <var>b</var> and <var>c</var>\"","msgtype":"m.text"},"ts":1229619661000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Wouldn't the quadratic formula take millions of lines of MathML and be impossible to read?","msgtype":"m.text"},"ts":1229619780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: that works, i'll use that","msgtype":"m.text"},"ts":1229619781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: yes","msgtype":"m.text"},"ts":1229619782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"At least it's possible for a human to read the Pythagoras one","msgtype":"m.text"},"ts":1229619840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: How many lines depends on how much whitespace you put in it :)","msgtype":"m.text"},"ts":1229619841000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"wonders if text in examples like \"flavours of ice cream\" should be translated to en-US","msgtype":"m.emote"},"ts":1229619900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders: However the first law of MathML is that the total amount of markup needed to express a given concept is greater than the total amount of markup it was possible to use to express that concept","msgtype":"m.text"},"ts":1229619901000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: :)","msgtype":"m.text"},"ts":1229619960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/it was/anyone thought it was/","msgtype":"m.text"},"ts":1229619961000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Anyway the example is clearly misleading, because you should expect 2<sup><var>n</var></sup> flavours of ice cream since they can choose whether or not to include each piped-in ingredient","msgtype":"m.text"},"ts":1229619962000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(the first law of ontent MathML is roughly similar but with the words \"much much greater\")","msgtype":"m.text"},"ts":1229619963000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You cannot solve roots and you cannot solve a hypotenuse.","msgtype":"m.text"},"ts":1229620560000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"You can only solve problems, including special kinds of equations.","msgtype":"m.text"},"ts":1229620561000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"You calculate roots and the length of the hypotenuse.","msgtype":"m.text"},"ts":1229620620000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Er yeah, I meant to say \"solve /for/ the roots\"","msgtype":"m.text"},"ts":1229620621000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"appears to be parsing the spec in 12.6s now","msgtype":"m.emote"},"ts":1229620622000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"solve what?","msgtype":"m.text"},"ts":1229620680000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"for the roots :)","msgtype":"m.text"},"ts":1229620681000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or, if you like, the quadratic","msgtype":"m.text"},"ts":1229620682000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Solve what for the roots?","msgtype":"m.text"},"ts":1229620740000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"The quadtratic, whatever it happens to be","msgtype":"m.text"},"ts":1229620741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*quadratic","msgtype":"m.text"},"ts":1229620742000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Quadratic equation?","msgtype":"m.text"},"ts":1229620743000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"yes. An equation can be solved. A root is a particular point on the solution.","msgtype":"m.text"},"ts":1229620800000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hence \"solving for the roots is both common and makes sense :)\"","msgtype":"m.text"},"ts":1229620801000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"A root is a particular member OF the solution.","msgtype":"m.text"},"ts":1229620802000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"The solution is a set of numbers, and calling them points is an exaggeration.","msgtype":"m.text"},"ts":1229620803000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"\"solving for the roots\" misses the object.","msgtype":"m.text"},"ts":1229620860000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"It seems equally valid to see the solution as a (discontinuous) line","msgtype":"m.text"},"ts":1229620861000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"That is redundant information.","msgtype":"m.text"},"ts":1229620920000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"{(x1, 0), (x2, 0)} is much better handled as {x1, x2}","msgtype":"m.text"},"ts":1229620921000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Well the roots are a special case you could equally say solve y=f(x) for y=5 or whatever","msgtype":"m.text"},"ts":1229620980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/case/case;/","msgtype":"m.text"},"ts":1229620981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yecril71: There's no reason for a line to exist in a two-dimensional space","msgtype":"m.text"},"ts":1229621040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/exist/only exist/","msgtype":"m.text"},"ts":1229621041000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"f(x)=5 are not roots.  f(x)-5 are roots, but it is a different equation.","msgtype":"m.text"},"ts":1229621160000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Hixie: The algorithm for setting document.domain should probably mention the fact that setting document.domain to a tld (or maybe a domain on the public suffix list?) is a security error","msgtype":"m.text"},"ts":1229621340000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"should probably send email","msgtype":"m.emote"},"ts":1229621341000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah i'll be adding that. send mail. :-)","msgtype":"m.text"},"ts":1229621342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: s/theroem/theorem/","msgtype":"m.text"},"ts":1229621820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"What does it mean that HTML is not written by hand?  I am confused.","msgtype":"m.text"},"ts":1229624760000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"My idea of writing HTML \"not by hand\" is to use XSLT or document.write.","msgtype":"m.text"},"ts":1229624761000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"But the sources for these are again written by hand.","msgtype":"m.text"},"ts":1229624762000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"yecril71: WYSIWYG?","msgtype":"m.text"},"ts":1229625120000,"senderName":"jcranmer","senderId":"jcranmer@irc"},
{"content":{"body":"It means whatever the person using that phrase wishes it to mean, which is usually not quite the same as what anyone else thinks it means","msgtype":"m.text"},"ts":1229625300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lachy: replaceHeadings is now in the normal Anolis repo","msgtype":"m.text"},"ts":1229625660000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"WYSIWYG is deplorable in case of HTML.","msgtype":"m.text"},"ts":1229626200000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"WYSINWTRG.","msgtype":"m.text"},"ts":1229626260000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"And the documents thus produced usually have the MOTL.","msgtype":"m.text"},"ts":1229626500000,"senderName":"yecril71","senderId":"yecril71@irc"},
{"content":{"body":"Hixie: should aside not be a sectioning root?","msgtype":"m.text"},"ts":1229628540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: ?","msgtype":"m.text"},"ts":1229628720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: surely having headers in aside elements show up in outlines doesn't make sense?","msgtype":"m.text"},"ts":1229628780000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"why not?","msgtype":"m.text"},"ts":1229628840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"surely\" isn't a good argument :-)","msgtype":"m.text"},"ts":1229628841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"surely\".","msgtype":"m.text"},"ts":1229628842000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1229628843000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"If you look at the sidebars on most blogs, those should be an aside, right?","msgtype":"m.text"},"ts":1229628844000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Surely headers in them don't make sense in an outline?","msgtype":"m.text"},"ts":1229628900000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh woops.","msgtype":"m.text"},"ts":1229629140000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I just got pimpmyspec into an infinite loop :)","msgtype":"m.text"},"ts":1229629141000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Update the copy of Anolis!","msgtype":"m.text"},"ts":1229629142000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"makes html5lib do a lot more memory copying every time you call unget(), which results in 2% faster parsing","msgtype":"m.emote"},"ts":1229629260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"gsnedders, cool.","msgtype":"m.text"},"ts":1229631000000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I love how OpenOffice.org Calc makes it impossible for me to change a cell value from \"foo\" to \"Foo\", if there are other cells in the same column that also say \"foo\"","msgtype":"m.text"},"ts":1229639940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://news.bbc.co.uk/1/hi/technology/7787335.stm - using Adobe AIR to provide cross-platform DRMed video","msgtype":"m.text"},"ts":1229640660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I think I'll stick to the tool that lets me download the DRM-free MPEG4 versions that are intended for iPhone users)","msgtype":"m.text"},"ts":1229640720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: http://www.bbc.co.uk/radio/help/faq/download_and_install_realplayer.shtml BBC provides a special real player. I think they had to do it because of their contract","msgtype":"m.text"},"ts":1229641380000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"karlcow: That's only for radio, not TV","msgtype":"m.text"},"ts":1229641440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"though I don't know if it's still working with bbc programs. I have not used it for a very long time.","msgtype":"m.text"},"ts":1229641441000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"Philip`: ah thanks :)","msgtype":"m.text"},"ts":1229641442000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"The iPlayer provides nice simple DRM-free MP3 versions of radio programmes to iPhone users, so the same iPhone-masquerading tool can download them too :-)","msgtype":"m.text"},"ts":1229641500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(or you can just use the streaming Flash player)","msgtype":"m.text"},"ts":1229641501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"has had very limited success with RealPlayer on Linux","msgtype":"m.emote"},"ts":1229641502000,"senderName":"Philip`","senderId":"Philip`@irc"}
]