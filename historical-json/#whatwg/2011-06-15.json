[
{"content":{"body":"uh oh","msgtype":"m.text"},"ts":1308096420000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"another parser change","msgtype":"m.text"},"ts":1308096421000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pretty minor, but still","msgtype":"m.text"},"ts":1308096480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(nulls in mathml <mo>, <mn>, etc)","msgtype":"m.text"},"ts":1308096481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hi, what part of a browser handles window.innerWidth values? is it anything to do with the js engine (by that I mean, V8 or Nitro, or what have you)?","msgtype":"m.text"},"ts":1308098520000,"senderName":"beowulf","senderId":"beowulf@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1308099180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1308099240000,"senderName":"beowulf","senderId":"beowulf@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/www-validator/2011Jan/0057.html","msgtype":"m.text"},"ts":1308099780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"ad hoc checker\" o_O","msgtype":"m.text"},"ts":1308099781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Suppose that I wanted to define a feature such that UAs could scan the content of a page, determine what codepoints are used, and then lazily request only the necessary codepoints from a font via some variant of range requests.","msgtype":"m.text"},"ts":1308103140000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"What group would I talk to about this?","msgtype":"m.text"},"ts":1308103141000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"this sounds crazy.","msgtype":"m.text"},"ts":1308103142000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Irrelevant to my question.  ^_^","msgtype":"m.text"},"ts":1308103200000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"let me check if it is feasible.","msgtype":"m.text"},"ts":1308103201000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins_: CSS3 Fonts defines fetching behaviour? Or not?","msgtype":"m.text"},"ts":1308103260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: No.","msgtype":"m.text"},"ts":1308103261000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: Also, what happens if I mutate the DOM and add more codepoints?","msgtype":"m.text"},"ts":1308103262000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Not my problem directly.  I'm asking for a friend.  Presumably, additional requests.","msgtype":"m.text"},"ts":1308103320000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: I guess www-style is as good a place as any…","msgtype":"m.text"},"ts":1308103321000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"We were thinking of starting with www-font, but this is barely an issue about fonts themselves.  It's a protocol issue, mainly, as the important part is the codepoint-range request.","msgtype":"m.text"},"ts":1308103380000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, is it really a protocol issue? i remember range requests working quite well with ogg media.","msgtype":"m.text"},"ts":1308103740000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"erlehmann: Kinda?  Not sure how you'd handle it without protocol changes, unless you have a format where you can predict the codepoint locations.","msgtype":"m.text"},"ts":1308103860000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, that is the question, if you can do that. i tried to look  it up but i am dizzy. it is 3:15AM local time, i go to sleep.","msgtype":"m.text"},"ts":1308103861000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"s/if/whether/g","msgtype":"m.text"},"ts":1308103920000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"TabAtkins: the group depends on how you want to do this","msgtype":"m.text"},"ts":1308106500000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"you should ask your \"friend\" if they can get by with hand-subsetted fonts and unicode-range","msgtype":"m.text"},"ts":1308106560000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: The idea is to pursue this as a line of experimentation for Chrome, so apparently the answer is no.  ^_^","msgtype":"m.text"},"ts":1308106620000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It may be over-generous to assume that existing APIs have been fully explored","msgtype":"m.text"},"ts":1308106680000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"we seem to frequently get feature requests where that is not the case","msgtype":"m.text"},"ts":1308106740000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I know that in my chatting with the dude, he explicitly talks about why subsetting is unsatisfactory.","msgtype":"m.text"},"ts":1308106800000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What is it?","msgtype":"m.text"},"ts":1308106801000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"anyway, the point stands: if you have a proposal, you can figure out what group(s) it should go to, but if you only have a problem statement, it's unclear","msgtype":"m.text"},"ts":1308106860000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Because you have to subset separately for every page if you want maximum efficiency, and monitor page changes so you know if you need to rengerate yoru subsets.","msgtype":"m.text"},"ts":1308106861000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that's not what I'm saying","msgtype":"m.text"},"ts":1308106862000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I have a problem statement.","msgtype":"m.text"},"ts":1308106863000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"because what I said was totally unclear","msgtype":"m.text"},"ts":1308106864000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Heh.","msgtype":"m.text"},"ts":1308106865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How about this: split your font into a number of different fonts, each covering some range of Unicode characters","msgtype":"m.text"},"ts":1308106920000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"then apply all those fonts to the page with CSS 'unicode-range'","msgtype":"m.text"},"ts":1308106921000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"A browser implementation should automatically load the subset-font(s) that are needed","msgtype":"m.text"},"ts":1308106922000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Interesting.  Didn't realize we should do that.","msgtype":"m.text"},"ts":1308106980000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"even if an implementation currently doesn't, it could","msgtype":"m.text"},"ts":1308106981000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I can believe that approach doesn't work well; maybe there is no adequate choice for the granularity of the subset fonts","msgtype":"m.text"},"ts":1308107040000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"but I hope it's been tried","msgtype":"m.text"},"ts":1308107041000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I don't know if it has.","msgtype":"m.text"},"ts":1308107042000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Bringing it up now.","msgtype":"m.text"},"ts":1308107043000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(In email, so asynchronous.)","msgtype":"m.text"},"ts":1308107100000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"In unrelated news, roc, I had a question for you about http://weblogs.mozillazine.org/roc/archives/2008/07/svg_paint_serve.html","msgtype":"m.text"},"ts":1308107101000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't understand the distinction you're drawing between the coordinate spaces there.","msgtype":"m.text"},"ts":1308107102000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if that doesn't work well, an alternative to consider would be to see if it's possible to lay out OpenType fonts cleverly and use byte-range requests to load desired subsets; again, no new API would be needed","msgtype":"m.text"},"ts":1308107220000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Yeah, that's something we wanted to broach somewhere.","msgtype":"m.text"},"ts":1308107280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"possibly you don't have to broach it anywhere","msgtype":"m.text"},"ts":1308107340000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Broach = raise in hearing of someone who knows what they're doing, so we know if it's possible.","msgtype":"m.text"},"ts":1308107341000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"just start loading the font file, once you have sufficient headers, spin up a parallel load with byte-range requests for the data you want to get quicker","msgtype":"m.text"},"ts":1308107342000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"TabAtkins: I think those coordinate spaces are effectively the same; I just defined them differently because they get used differently in SVG","msgtype":"m.text"},"ts":1308107460000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"for example, if your element is 20px wide, then with userSpaceOnUse a width value of \"1\" is 1px, but with objectBoundingBox a width value of \"1\" would be 20px","msgtype":"m.text"},"ts":1308107520000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Hmm.","msgtype":"m.text"},"ts":1308107580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does that latter one actually do something useful?","msgtype":"m.text"},"ts":1308107581000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"that is how objectBoundingBox coordinates work in SVG","msgtype":"m.text"},"ts":1308107640000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"0,0 is the top-left of the \"object bounding box\", 1,1 is the bottom right","msgtype":"m.text"},"ts":1308107700000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Oh, ok.  I don't ever use that coordinate space, obviously.","msgtype":"m.text"},"ts":1308107701000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's quite stupid, but that's how it works","msgtype":"m.text"},"ts":1308107702000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I was wanting to specify this behavior in Image Values, and I was scratching my head at it at first.","msgtype":"m.text"},"ts":1308107760000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Your definition of userSpaceOnUse is actually very useful for the eventual unification of <image> and paint servers that I'd like to do.","msgtype":"m.text"},"ts":1308107820000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: for the font thing, roc's suggestion is probably the best place to start, but if you need something with even fewer RTTs, then you could define your own units for a range request that was basically the same syntax as the css unicode-range","msgtype":"m.text"},"ts":1308110220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: roc's suggestions, i should say","msgtype":"m.text"},"ts":1308110280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nessy: I wasn't trying to make people with PhDs feel ashamed, far from it. But you don't write \", PhD\" after your name, and people who do are usually putting on some intimidation, that's all","msgtype":"m.text"},"ts":1308115140000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: I have no problem with that :-)","msgtype":"m.text"},"ts":1308115200000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"I probably just got half of a conversation last night","msgtype":"m.text"},"ts":1308115201000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"but I do get the feeling very often - not from you specifically, but more generally - that a PhD amongst engineers is being looked down on as a waste of time and lost time to do something more productive","msgtype":"m.text"},"ts":1308115260000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"and sometimes it's true, too :-)","msgtype":"m.text"},"ts":1308115261000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"but it's also life experience and it takes hard work to actually finish a thesis","msgtype":"m.text"},"ts":1308115320000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"anyway .. onto more productive things :-)","msgtype":"m.text"},"ts":1308115321000,"senderName":"nessy","senderId":"nessy@irc"},
{"content":{"body":"is the right place to ask about html5 canvas?","msgtype":"m.text"},"ts":1308117120000,"senderName":"LoneStar99","senderId":"LoneStar99@irc"},
{"content":{"body":"LoneStar99: sure","msgtype":"m.text"},"ts":1308117600000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"wonders what's going on with RDFa light inside members-only land","msgtype":"m.emote"},"ts":1308126660000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: I think the fact that it is going on in Members-only land should tell you all you need to know","msgtype":"m.text"},"ts":1308128340000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Apparently the concept of irony has been lost on these people","msgtype":"m.text"},"ts":1308128400000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what's teh security problem with converting broken utf-8 to u+fffd in websockets?","msgtype":"m.text"},"ts":1308131280000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"foolip: <http://www.w3.org/mid/E1QWcRS-0002EY-8u⊙jwo>","msgtype":"m.text"},"ts":1308133440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, what do you think about that?","msgtype":"m.text"},"ts":1308133560000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"HTMLTimeElement also has some extra IDL properties, are those not good for anything?","msgtype":"m.text"},"ts":1308133620000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"dunno","msgtype":"m.text"},"ts":1308133621000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"having an element for this purpose seems a bit odd though","msgtype":"m.text"},"ts":1308133622000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"yeah should be a global attribute","msgtype":"m.text"},"ts":1308133623000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"RDFa's content=\"\" or a new itemvalue=\"\" seems more reasonable","msgtype":"m.text"},"ts":1308133680000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"and no reason to drop <time> imo","msgtype":"m.text"},"ts":1308133681000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in which case <time> can be left alone","msgtype":"m.text"},"ts":1308133682000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1308133683000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"although I think <time> is actually fairly useless","msgtype":"m.text"},"ts":1308133684000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"since it forbids marking up many kinds of times","msgtype":"m.text"},"ts":1308133685000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"not sure when it's better than just <span>, actually...","msgtype":"m.text"},"ts":1308133740000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Looks like I don't have a strong opinion either way :)","msgtype":"m.text"},"ts":1308133741000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"will you comment on the bug anyway?","msgtype":"m.text"},"ts":1308133800000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1308133920000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"ooh more longdesc drama","msgtype":"m.text"},"ts":1308134040000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"gets popcorn","msgtype":"m.emote"},"ts":1308134041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm, can anyone respond to http://bugzilla.validator.nu/show_bug.cgi?id=841#c1?","msgtype":"m.text"},"ts":1308134640000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i thought i got it the other day but now i’m confused again","msgtype":"m.text"},"ts":1308134700000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"replied","msgtype":"m.text"},"ts":1308134880000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks, zcorpan","msgtype":"m.text"},"ts":1308134940000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"zcorpan: so is my bug title incorrect?","msgtype":"m.text"},"ts":1308135000000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i'm sure hsivonen understands what it means","msgtype":"m.text"},"ts":1308135001000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I want to understand too :)","msgtype":"m.text"},"ts":1308135060000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"is `href=foo?bar=1&baz=42` allowed or not?","msgtype":"m.text"},"ts":1308135061000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"it is allowed, and it does not contain any ambiguous ampersands","msgtype":"m.text"},"ts":1308135062000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"read the definition of ambiguous ampersand carefully","msgtype":"m.text"},"ts":1308135120000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/complete/syntax.html#syntax-ambiguous-ampersand","msgtype":"m.text"},"ts":1308135121000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"oh because it’s not followed by `;`","msgtype":"m.text"},"ts":1308135122000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1308135180000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so where in the spec does it say the unencoded & there is allowed?","msgtype":"m.text"},"ts":1308135240000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"It doesn't need to, does it?","msgtype":"m.text"},"ts":1308135241000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Attribute values are a mixture of text and character references, except with the additional restriction that the text cannot contain an ambiguous ampersand.\"","msgtype":"m.text"},"ts":1308135242000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"text\" does not ban &","msgtype":"m.text"},"ts":1308135300000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(but bans U+0000 for instance)","msgtype":"m.text"},"ts":1308135301000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but <p>foo&bar</p> isn’t allowed","msgtype":"m.text"},"ts":1308135360000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"even though “Text is allowed inside elements, attribute values, and comments.”","msgtype":"m.text"},"ts":1308135361000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"that's allowed afaict","msgtype":"m.text"},"ts":1308135420000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"reads the parser section to see if it matches the author section","msgtype":"m.emote"},"ts":1308135421000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"not according to validator.nu — is that a separate issue then?","msgtype":"m.text"},"ts":1308135422000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"parser section matches","msgtype":"m.text"},"ts":1308135540000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's the same issue","msgtype":"m.text"},"ts":1308135600000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"okay, so the problem is that the definition of ambiguous ampersand changed","msgtype":"m.text"},"ts":1308135601000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1308135602000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and the parser changed what is a parse error to match","msgtype":"m.text"},"ts":1308135660000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"before the change previously stuff like href=\"foo&bar\" had an ambiguous ampersand?","msgtype":"m.text"},"ts":1308135661000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"or what","msgtype":"m.text"},"ts":1308135662000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1308135663000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1308135664000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"so the ; requirement is new","msgtype":"m.text"},"ts":1308135665000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"i think i finally get it","msgtype":"m.text"},"ts":1308135666000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1308135667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks for your patience, zcorpan","msgtype":"m.text"},"ts":1308135668000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"the parser also changed behavior for &copy= which v.nu also doesn't seem to have implemented","msgtype":"m.text"},"ts":1308135780000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(in attributes)","msgtype":"m.text"},"ts":1308135781000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"what about it?","msgtype":"m.text"},"ts":1308135782000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"`href=&copy=` shouldn’t be allowed, right?","msgtype":"m.text"},"ts":1308135840000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"are all ambiguous ampersands invalid?","msgtype":"m.text"},"ts":1308136080000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"they are invalid but &copy= is parsed differently in attribute value and text content","msgtype":"m.text"},"ts":1308136380000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but it seems that was actually implemented, i didn't test properly","msgtype":"m.text"},"ts":1308136381000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Looking at setting selection and whether it triggers focus","msgtype":"m.text"},"ts":1308137220000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"From what I see html5 doesn't specify a focus event being fired for select() nor for setSelectionRange. However, the MDC docs specify that select() also fires focus.","msgtype":"m.text"},"ts":1308137280000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"And it seems Chrome fires a focus event for both of them.","msgtype":"m.text"},"ts":1308137281000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"File a bug, Hixie will figure it out by Christmas","msgtype":"m.text"},"ts":1308137820000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm looking for someone to say they've already looked into that and tell me what the resolution is going to be ;)","msgtype":"m.text"},"ts":1308137880000,"senderName":"Workshiva","senderId":"Workshiva@irc"},
{"content":{"body":"just got a YSOD is spotify","msgtype":"m.emote"},"ts":1308138480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*in","msgtype":"m.text"},"ts":1308138481000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"TabAtkins: the default style for <a>, <ins> and <del> interact badly with blocks as well","msgtype":"m.text"},"ts":1308142440000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"TabAtkins: Requesting codepoints from a font is tricky because of glyph substitutions (ligatures etc) - you can't treat each codepoint individually when deciding what bytes to download, you have to know the entire set to determine which glyphs might get used","msgtype":"m.text"},"ts":1308143700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(and you can't do it by downloading the whole GSUB table and letting the client figure out the glyphs to request instead of codepoints, because that table might be hundreds of KB and would defeat the point of subsetting)","msgtype":"m.text"},"ts":1308143760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Also I believe you need to dynamically compute a new GSUB table for the subset (to avoid downloading the entire thing), you can't just use a range of its original bytes","msgtype":"m.text"},"ts":1308143880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(The old WEFT tool didn't recompute GSUB, it just deleted some glyph data, which is much easier but results in much larger font files)","msgtype":"m.text"},"ts":1308144000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: isn’t Typekit linking to several partial @font-face files as a form of obfuscation or something?","msgtype":"m.text"},"ts":1308144001000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"boblet: Don't know, but maybe","msgtype":"m.text"},"ts":1308144060000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"boblet, show it.","msgtype":"m.text"},"ts":1308144061000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"I thought I read something about that when it was released. No personal knowledge","msgtype":"m.text"},"ts":1308144062000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"It's quite possible they don't care about things like ligatures or languages that rely heavily on substitutions","msgtype":"m.text"},"ts":1308144063000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"as for TabAtkins’ usecase, it would be rad to download a basic set then request other glyphs as needed for East Asian typography","msgtype":"m.text"},"ts":1308144240000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"http://help.typekit.com/customer/portal/articles/8071-support-for-different-languages-on-typekit suggests the only languages they support are Latin alphabet ones","msgtype":"m.text"},"ts":1308144241000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Services like Typekit could create a CMS plugin that checks for all used characters across a site then make a site-specific subset, updating when content changes. But once the site gets large this isn’t so useful (except when kanji is involved)","msgtype":"m.text"},"ts":1308144242000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"Philip`: they have at least two (freebie) Japanese fonts","msgtype":"m.text"},"ts":1308144300000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"“We split requested fonts into multiple files and recombine them using the CSS font stack” http://blog.typekit.com/2009/07/21/serving-and-protecting-fonts-on-the-web/","msgtype":"m.text"},"ts":1308144360000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"erlehmann: ^ ;)","msgtype":"m.text"},"ts":1308144361000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"I think Japanese is easy too - things like Arabic and Devanagari etc are hard since they rely on complex shaping","msgtype":"m.text"},"ts":1308144420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"TabAtkins, isn't fontkits way the easiest?","msgtype":"m.text"},"ts":1308144421000,"senderName":"erlehmann","senderId":"erlehmann@irc"},
{"content":{"body":"Isn't japanese even easier since it doesn't have ligatures at all? Does it even have combining characters?","msgtype":"m.text"},"ts":1308144480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: true. was thinking more of the initial filesize of Japanese fonts. The M+ fonts are like 350KB per weight","msgtype":"m.text"},"ts":1308144481000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"jgraham: no combining characters, but 8,000+ glyphs","msgtype":"m.text"},"ts":1308144482000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"Oh look I am wrong http://www.quora.com/Are-there-any-ligatures-in-CJK","msgtype":"m.text"},"ts":1308144600000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: pretty sure those are individual glyphs not ligatures. as in キ and ロ and ㌔ are three separate code points (rather than ㌔ being made from resized/repositioned キロ)","msgtype":"m.text"},"ts":1308144780000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"the Mac Japanese Input Menu flags ㌔ as “Contains JIS X0213 unique characters”","msgtype":"m.text"},"ts":1308144840000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"If you wanted to enter ㌔ you’d have to manually select it — it wouldn’t be automatically replaced as with a western ligature","msgtype":"m.text"},"ts":1308144960000,"senderName":"boblet","senderId":"boblet@irc"},
{"content":{"body":"zewt: ping","msgtype":"m.text"},"ts":1308149220000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What's up with http://dev.w3.org/html5/2dcontext/ being out of date?","msgtype":"m.text"},"ts":1308154500000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Maybe there haven't been any changes proposed, though updating the date to reflect that might be nice.","msgtype":"m.text"},"ts":1308155040000,"senderName":"David_Bradbury","senderId":"David_Bradbury@irc"},
{"content":{"body":"There have been","msgtype":"m.text"},"ts":1308155041000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hmm... Then I'd poke Hixie  ^","msgtype":"m.text"},"ts":1308155100000,"senderName":"David_Bradbury","senderId":"David_Bradbury@irc"},
{"content":{"body":"Maybe any new commits would overwrite the application of issue 131's resolution, and cause unhappiness","msgtype":"m.text"},"ts":1308155160000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(http://dev.w3.org/cvsweb/html5/2dcontext/Overview.html)","msgtype":"m.text"},"ts":1308155161000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"So, when are we going to start seeing the new 4D Cavnas Context gaining support? :p","msgtype":"m.text"},"ts":1308155220000,"senderName":"David_Bradbury","senderId":"David_Bradbury@irc"},
{"content":{"body":"AryehGregor: ping","msgtype":"m.text"},"ts":1308164340000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"volkmar, pong.","msgtype":"m.text"},"ts":1308164341000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: i saw you were involved in a discussion about input in DOM 3 Events... do you know, by any chance why textinput is specidified and not input?","msgtype":"m.text"},"ts":1308164342000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"volkmar, was I?  I don't know anything about events, sorry.","msgtype":"m.text"},"ts":1308164400000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: i were :)","msgtype":"m.text"},"ts":1308164401000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"Never read any specs for them or anything.","msgtype":"m.text"},"ts":1308164402000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"oups, you were","msgtype":"m.text"},"ts":1308164403000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"You were what?","msgtype":"m.text"},"ts":1308164404000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1308164405000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"is tired","msgtype":"m.emote"},"ts":1308164406000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"Was that the one where I said something then immediately realized I misunderstood and retracted what I said?","msgtype":"m.text"},"ts":1308164460000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: it was a thread with someone asking for onvaluechanged","msgtype":"m.text"},"ts":1308164461000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"doesn't remember","msgtype":"m.emote"},"ts":1308164520000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"anyway, i will read more of the search results... the reason might pop out","msgtype":"m.text"},"ts":1308164521000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"shepazutoo, ^","msgtype":"m.text"},"ts":1308164580000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok, i filed a bug and I will see...","msgtype":"m.text"},"ts":1308164820000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"wonders why 'change' i","msgtype":"m.emote"},"ts":1308164821000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"isn't specced too","msgtype":"m.text"},"ts":1308164822000,"senderName":"volkmar","senderId":"volkmar@irc"},
{"content":{"body":"smaug____: pong","msgtype":"m.text"},"ts":1308168480000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: you said something about default handling not being part of dispatchEvent","msgtype":"m.text"},"ts":1308169200000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"just FYI, it is in all the browsers","msgtype":"m.text"},"ts":1308169201000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"zewt: http://www.w3.org/Bugs/Public/show_bug.cgi?id=12949#c5","msgtype":"m.text"},"ts":1308169260000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is the specs which don't match reality","msgtype":"m.text"},"ts":1308169320000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well, DOM 3 Events nor Web DOM Core don't need to specify default handling","msgtype":"m.text"},"ts":1308169321000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"dom 3 events says that default handlers don't happen for untrusted events, and that includes all events dispatched with dispatchEvent (except for i think one exception, which I'm having trouble recalling)","msgtype":"m.text"},"ts":1308169440000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that is a different","msgtype":"m.text"},"ts":1308169441000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's not; it means that dispatchEvent will never (modulo whatever that exception was) cause default handling to occur","msgtype":"m.text"},"ts":1308169442000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it could be a bug that default handlers fire when untrusted event is dispatched","msgtype":"m.text"},"ts":1308169443000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but it does not mean that default handling is not part of event dispatch","msgtype":"m.text"},"ts":1308169500000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but it's not part of event dispatch :)","msgtype":"m.text"},"ts":1308169560000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it may be implemented that way by browsers, but as that has no (that I'm aware of) visible side-effects it's not really relevant","msgtype":"m.text"},"ts":1308169561000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"But yes, DOM 3 Events is probably too strict","msgtype":"m.text"},"ts":1308169562000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the event model is if(dispatchEvent(e)) doDefaultBehavior(), not dispatchEvent(e, doDefaultBehavior)--the default behavior is logically part of whoever's calling for a dispatch, not internal to dispatch itself","msgtype":"m.text"},"ts":1308169620000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in practice the event model pre-handle-event, dispatch the event to DOM, post-handle-event","msgtype":"m.text"},"ts":1308169740000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"event model is...","msgtype":"m.text"},"ts":1308169741000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that's internal implementation details--can you explain what effect that has on the specced behavior?","msgtype":"m.text"},"ts":1308169800000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in other words, what's the difference","msgtype":"m.text"},"ts":1308169801000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"See the example http://www.w3.org/Bugs/Public/show_bug.cgi?id=12949#c5","msgtype":"m.text"},"ts":1308169802000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"dispatching event does do the default handling","msgtype":"m.text"},"ts":1308169860000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah i think that's the odd exception, which should be treated as such--it should certainly be specced, but only to define the exception, not to change the event model to suit it","msgtype":"m.text"},"ts":1308169920000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but that is how browsers work","msgtype":"m.text"},"ts":1308169980000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the default handling is part of event dispatch","msgtype":"m.text"},"ts":1308169981000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that just doesn't matter, it's the visible behavior that matters","msgtype":"m.text"},"ts":1308169982000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what we should define is that in which cases default handling can be triggered using untrusted events","msgtype":"m.text"},"ts":1308169983000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and onclick is just a weird legacy exception","msgtype":"m.text"},"ts":1308170040000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It would be just easier to define the reality","msgtype":"m.text"},"ts":1308170100000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that default handling is part of event dispatch, and in x, y, and z cases untrusted events can trigger default handling","msgtype":"m.text"},"ts":1308170101000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the reality is that default handling is not part of event dispatch, from the perspective of visible behavior","msgtype":"m.text"},"ts":1308170102000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that is not trie","msgtype":"m.text"},"ts":1308170103000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1308170104000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yes it is","msgtype":"m.text"},"ts":1308170160000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"my example is an example where it is not","msgtype":"m.text"},"ts":1308170161000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like i said (two or three times :) that's the odd exception, behavior that doesn't match how the event model works for everything else","msgtype":"m.text"},"ts":1308170162000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what \"for everything else\"","msgtype":"m.text"},"ts":1308170220000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"where does the event model work differently","msgtype":"m.text"},"ts":1308170221000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'd like to see an example","msgtype":"m.text"},"ts":1308170222000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"huh? you've given the *only* case I'm aware of where default behavior ends up being part of dispatch","msgtype":"m.text"},"ts":1308170280000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and I'm certainly not arguing against speccing that behavior, but it should be treated as exceptional compatibility behavior, not as an argument that the entire event model should be based on that","msgtype":"m.text"},"ts":1308170340000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'd like to see an example where the default handling is not part of the event dispatch. (it is possible that untrusted events don't trigger default handling)","msgtype":"m.text"},"ts":1308170341000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"every dispatchEvent() call in javascript; the default behavior is whatever you do if it returns true","msgtype":"m.text"},"ts":1308170460000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I'm not talking about script libraries","msgtype":"m.text"},"ts":1308170461000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but browser implementations","msgtype":"m.text"},"ts":1308170462000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"scripts are intrinsic to the event model.","msgtype":"m.text"},"ts":1308170463000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"link handling works the same way as changing checked state. you dispatch event and the default handling for <a> triggers the navigation","msgtype":"m.text"},"ts":1308170520000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"etc","msgtype":"m.text"},"ts":1308170521000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there's really no compilation shortcuts after you've changed 500 IDL files","msgtype":"m.text"},"ts":1308170580000,"senderName":"mpilgrim","senderId":"mpilgrim@irc"},
{"content":{"body":"form submission has the default handling during event dispatch","msgtype":"m.text"},"ts":1308170640000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not in my experience","msgtype":"m.text"},"ts":1308170641000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"var e = document.createEvent(\"HTMLEvents\"); e.initEvent(\"submit\", true, true); form.dispatchEvent(e);","msgtype":"m.text"},"ts":1308170642000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if(!e.stopped) form.submit();","msgtype":"m.text"},"ts":1308170643000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"^ i've had to write code like that because it's not","msgtype":"m.text"},"ts":1308170700000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what is e.stopped?","msgtype":"m.text"},"ts":1308170760000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(pardoning the ugly prototype.js-ism)","msgtype":"m.text"},"ts":1308170761000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"if(form.dispatchEvent(e)) form.submit();","msgtype":"m.text"},"ts":1308170762000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"dispatching submit event submits the form at least in Fx and Opera","msgtype":"m.text"},"ts":1308171120000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"again, the difference in default handling can be that some browsers don't allow untrusted events to dispatch the event","msgtype":"m.text"},"ts":1308171121000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1308171122000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"again, the difference in default handling can be that some browsers don't allow untrusted events to do the default handling","msgtype":"m.text"},"ts":1308171180000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it's the same thing (as far as visible behavior is concerned)","msgtype":"m.text"},"ts":1308171181000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"when it's a browser-dispatched event there's no difference whether default behavior is implemented inside dispatchEvent or not","msgtype":"m.text"},"ts":1308171240000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1308171241000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it is the default handling of untrusted events","msgtype":"m.text"},"ts":1308171242000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which needs to be defined","msgtype":"m.text"},"ts":1308171243000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so click() can just dispatch click event and we need to define in which case untrusted events can trigger d.efault handling","msgtype":"m.text"},"ts":1308171300000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and the problem is solved :)","msgtype":"m.text"},"ts":1308171301000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"rather, these exceptional behaviors should be called something else, and defined as the rare exceptions they are","msgtype":"m.text"},"ts":1308171360000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"not by changing the whole event model to revolve around the one (maybe two) exceptions","msgtype":"m.text"},"ts":1308171420000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"huh. I don't understand why we couldn't define the reality.","msgtype":"m.text"},"ts":1308171421000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that way click() would have strange special powers","msgtype":"m.text"},"ts":1308171422000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"huh? you can submit a click event with dispatchEvent","msgtype":"m.text"},"ts":1308171480000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"per spec click() does more than just dispatch click event","msgtype":"m.text"},"ts":1308171481000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but that is not the reality","msgtype":"m.text"},"ts":1308171540000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i think it's perfectly fine for click() to be able to do something you can't do otherwise (that's what DOM APIs do), but I don't think that matters here","msgtype":"m.text"},"ts":1308171541000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hmm, sounds like this discussion is not leading to anywhere :)","msgtype":"m.text"},"ts":1308171542000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"anyway, we're going in circles, and I'm not the one you need to convince anyway :)","msgtype":"m.text"},"ts":1308171543000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I will just reject all the insane changes to event handling in an implementation :)","msgtype":"m.text"},"ts":1308171600000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i don't think it changes implementation behavior--so long as the weird exceptions are specced, which again (at least in DOM Core) they aren't yet","msgtype":"m.text"},"ts":1308171601000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"happen to know when Anne's due back?","msgtype":"m.text"},"ts":1308171660000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"don't remember","msgtype":"m.text"},"ts":1308171661000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Today","msgtype":"m.text"},"ts":1308171720000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i don't envy him his backlog, heh","msgtype":"m.text"},"ts":1308171780000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Can someone with an MDN wiki account change the spec reference here to point to CSSOM View instead of an outdated HTML5 link?  https://developer.mozilla.org/en/DOM/element.scrollIntoView http://dev.w3.org/csswg/cssom-view/#dom-element-scrollintoview","msgtype":"m.text"},"ts":1308173220000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Wow, manual tests are staggeringly boring.","msgtype":"m.text"},"ts":1308174540000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Even if you can run a couple a second by just repeatedly hitting the same key, and cache the results.","msgtype":"m.text"},"ts":1308174541000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: just a second, I'll change or ask someone to change","msgtype":"m.text"},"ts":1308174600000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the link","msgtype":"m.text"},"ts":1308174601000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I need a small mechanical device that will press a key repeatedly for me so I can do something else in the meantime.","msgtype":"m.text"},"ts":1308174660000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"smaug____, thanks.","msgtype":"m.text"},"ts":1308174661000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"AryehGregor: updated","msgtype":"m.text"},"ts":1308175140000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____, thanks.","msgtype":"m.text"},"ts":1308175141000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It's annoying when I get close to the end of a day and have finished all the major work I have and don't want to start on a new thing because I wouldn't make any progress before I stopped for the day.","msgtype":"m.text"},"ts":1308177360000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"idea for a new css selector (based on some stuff i've talked about before):","msgtype":"m.text"},"ts":1308178740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a new set of attribute selectors where the first character of the attribute is punctuation, e.g.:","msgtype":"m.text"},"ts":1308178800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"input[.value=foo], or video[.readyState=2]","msgtype":"m.text"},"ts":1308178801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it works just like regular attribute selectors, except the value comes from the IDL attribute with the given name","msgtype":"m.text"},"ts":1308178860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and to specify which IDL attributes this works with, we have a new annotation on the attributes in the IDL","msgtype":"m.text"},"ts":1308178861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. [ExposeToCSS] readonly attribute DOMString value;","msgtype":"m.text"},"ts":1308178862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"[ExposeToCSS] would work with only some types, right?","msgtype":"m.text"},"ts":1308178863000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1308178920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"probably just DOMString, long, maybe boolean if we define it as presence vs absence","msgtype":"m.text"},"ts":1308178921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we could also have a combinator that works via attributes that return elements","msgtype":"m.text"},"ts":1308178980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the use case is?","msgtype":"m.text"},"ts":1308178981000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"e.g.  foo /bar/ baz, where \"bar\" is an attribute, so e.g.  img /usemap/ map  selects the map of the img","msgtype":"m.text"},"ts":1308178982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"many use cases, e.g. selecting input elements based on their current vlaue","msgtype":"m.text"},"ts":1308178983000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"value","msgtype":"m.text"},"ts":1308179040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if we had this, we could replace :checked with [.checked], and wouldn't need to introduce new ones each time we have something else to select on","msgtype":"m.text"},"ts":1308179041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I like the sound of that","msgtype":"m.text"},"ts":1308179042000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"e.g. instead of video:paused we can have video[.paused]","msgtype":"m.text"},"ts":1308179043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, sounds good","msgtype":"m.text"},"ts":1308179044000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the combinator is useful for e.g. selecting the control for a label, e.g. label:active /control/ input { border: thick; }","msgtype":"m.text"},"ts":1308179100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1308179101000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"but might be tricky to implement","msgtype":"m.text"},"ts":1308179102000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah definitely tricky to implement!","msgtype":"m.text"},"ts":1308179103000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"could be worth posting to www-style","msgtype":"m.text"},"ts":1308179104000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"it's going to be a nightmare to implement","msgtype":"m.text"},"ts":1308179160000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"((fwiw, i've suggested both [.foo] and /foo/ before, the new insight here is using an IDL annotation to opt-in attributes to make this work)","msgtype":"m.text"},"ts":1308179161000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"depending on which attributes you apply it to","msgtype":"m.text"},"ts":1308179162000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"actually, I'd assume it would be very hard to make it work *fast*","msgtype":"m.text"},"ts":1308179163000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well like roc says, it depends a lot on what we expose","msgtype":"m.text"},"ts":1308179220000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the code for \"compute me the value of this function\" is often orders of magnitude easier than \"signal me whenever the computed value of this function would change\"","msgtype":"m.text"},"ts":1308179221000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1308179222000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there any reason other than \"history\" for using NodeList vs HTMLCollection?","msgtype":"m.text"},"ts":1308179460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i guess nodelist can't be accessed by name","msgtype":"m.text"},"ts":1308179520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"uh oh, domcore has stuff that html currently has and they're getting out of sync","msgtype":"m.text"},"ts":1308179521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i hope the domcore stuff is just a straight copy so it can be updated easily once i get around to nuking the stuff in html","msgtype":"m.text"},"ts":1308179580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Is there any reason to have generic syntax like video[.paused] if it will only work for an extremely small segment of attributes anyway?","msgtype":"m.text"},"ts":1308179880000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It only makes sense if it's defined to work for a pretty broad class of attributes.","msgtype":"m.text"},"ts":1308179881000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"why would it be \"extremely small\"?","msgtype":"m.text"},"ts":1308179882000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because CSS selectors are very performance-sensitive, and it would be hard to make most IDL attributes work here.","msgtype":"m.text"},"ts":1308179940000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Implementations do stuff like intern strings so they don't have to do strcmp() when evaluating CSS selectors.  Something like checking JS attributes would presumably be hard if you include lots of them.","msgtype":"m.text"},"ts":1308180000000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"It might make sense even with only a small set of attributes, though.","msgtype":"m.text"},"ts":1308180001000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"why is it ok with content attributes but not IDL attributes?","msgtype":"m.text"},"ts":1308180002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Because then JS and CSS knowledge would be more transferrable.","msgtype":"m.text"},"ts":1308180003000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Because content attributes have a static value and are all updated through the same codepaths, IDL attributes can return something different every time you get them and they're updated through tons of different codepaths.","msgtype":"m.text"},"ts":1308180060000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Or they might not even have a value stored in any specific place at all.","msgtype":"m.text"},"ts":1308180061000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"They might secretly trigger code that's specific to that particular attribute.","msgtype":"m.text"},"ts":1308180062000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Like, I dunno, querying some video-playing framework to determine if a video is paused or not, which might involve a whole bunch of function calls.","msgtype":"m.text"},"ts":1308180063000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"well it depends on the IDL attribute","msgtype":"m.text"},"ts":1308180120000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"most IDL attributes just reflect the content attributes, so it seems they'd be equivalent","msgtype":"m.text"},"ts":1308180121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"HTMLMediaElement.paused doesn't update dynamically, it's just a settabel boolean","msgtype":"m.text"},"ts":1308180122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"settable","msgtype":"m.text"},"ts":1308180123000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"If browsers are okay with keeping two copies of everything, yeah.  Maybe they already do that, in fact.","msgtype":"m.text"},"ts":1308180124000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"you wouldn't need to keep two copies of everything, only of the attributes that you've found the css references","msgtype":"m.text"},"ts":1308180180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and actually you wouldn't need to keep two copies in most cases, if they're the same","msgtype":"m.text"},"ts":1308180181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not for regular DOMString, no, but the common case for other types is they're not the same.","msgtype":"m.text"},"ts":1308180182000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Like all non-DOMString types.","msgtype":"m.text"},"ts":1308180240000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Many URLs aren't absolute, either.","msgtype":"m.text"},"ts":1308180241000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Enums are probably going to be exactly the same less often than not.","msgtype":"m.text"},"ts":1308180242000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"But it would be useful to be able to query the actual enum state, so you don't have to worry about case variations and defaults and so on.","msgtype":"m.text"},"ts":1308180243000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"<a href=\"\"> already has to be checked against the history, I don't see why img[.src] (say) would be any worse, perf wise","msgtype":"m.text"},"ts":1308180300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In fact, CSS 2.1 has some wording about attribute default values for exactly this reason.","msgtype":"m.text"},"ts":1308180301000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"For IDL attributes that reflect content attributes, I assume you could just use the content attribute CSS selectors - the only interesting cases for the new selector are the non-reflective ones","msgtype":"m.text"},"ts":1308180302000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: the idl attributes tend to do some processing that might be interesting","msgtype":"m.text"},"ts":1308180303000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`, not if the attribute reflects interestingly, like enumerated attributes.","msgtype":"m.text"},"ts":1308180304000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Or numbers, if you're worried you might have weirdly-formatted numbers.","msgtype":"m.text"},"ts":1308180360000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Not booleans or regular DOMStrings, no.","msgtype":"m.text"},"ts":1308180361000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Hixie, I accidentally sent a mail to whatwg a little while ago from the wrong address.  Can you approve it?","msgtype":"m.text"},"ts":1308181380000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"(if you don't answer within a few minutes, I'll just resend it, but someone I CC'd already responded on-list, so it would be confusing)","msgtype":"m.text"},"ts":1308181440000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"yeah one sec","msgtype":"m.text"},"ts":1308181441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, have you approved it yet?  I have to leave in a few seconds and want to make sure the post is out before I do.","msgtype":"m.text"},"ts":1308181740000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"sorry, couple of things bumped it down my stack","msgtype":"m.text"},"ts":1308181800000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"getting to it now","msgtype":"m.text"},"ts":1308181801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"moderator says there's no pending requests","msgtype":"m.text"},"ts":1308181802000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like i have invalid addresses set to bounce permanently","msgtype":"m.text"},"ts":1308181803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think i set that because of the high volume of spam","msgtype":"m.text"},"ts":1308181804000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Okay, I'll resend it.","msgtype":"m.text"},"ts":1308181805000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Gmail could really use smarter list handling.","msgtype":"m.text"},"ts":1308181920000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"Like: 1) Allowing you to easily reply to multiple posts in a thread in one e-mail (would be good for some private conversations too).  2) Flagging posts that were made off-list so you don't accidentally reply on-list (hi TabAtkins!).  3) Warning you if you try sending from the wrong address.","msgtype":"m.text"},"ts":1308181980000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"why do you think i use pine for this stuff :-)","msgtype":"m.text"},"ts":1308182040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my mail routes through gmail but i use pine as my frontend","msgtype":"m.text"},"ts":1308182041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Did you ever give Gmail's interface a real try, or were you used to pine already and didn't bother?","msgtype":"m.text"},"ts":1308182042000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"i use gmail for all my work mail","msgtype":"m.text"},"ts":1308182100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"My e-mail UI experience went from AOL to Gmail and that's it, I never tried anything else.","msgtype":"m.text"},"ts":1308182101000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"},
{"content":{"body":"where work = google internal, not, you know, my actual work...","msgtype":"m.text"},"ts":1308182102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Gmail works well enough for me, but it would be nice if I could easily script it.","msgtype":"m.text"},"ts":1308182103000,"senderName":"AryehGregor","senderId":"AryehGregor@irc"}
]