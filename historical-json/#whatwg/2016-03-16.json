[
{"content":{"body":"annevk, Domenic, about CDATASection, that's a removal I think *could* work out, but it wouldn't be completely purged because https://www.chromestatus.com/metrics/feature/timeline/popularity/113 so I'm a bit on the fence","msgtype":"m.text"},"ts":1458116215000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"Domenic is right that it'd break some serialization tests, but that's not really the problem, the problem would be to get everyone to care enough to actually make this change. Less valuable than Attr simplification I think.","msgtype":"m.text"},"ts":1458116282000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"annevk: I'll add the ? to insertAdjacentElement's return type in Blink. Note that this doesn't actually change any behavior, the nullability of return types doesn't change the generated code. (so if things that shouldn't return null do, there's no assert there)","msgtype":"m.text"},"ts":1458116356000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: I figured that was what was going on","msgtype":"m.text"},"ts":1458116476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: Gecko uses the return values to inform the JIT aiui","msgtype":"m.text"},"ts":1458116505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"return types*","msgtype":"m.text"},"ts":1458116522000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, so if something that shouldn't return null does, it would crash, most likely?","msgtype":"m.text"},"ts":1458116554000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: I guess that would be problematic, I don't know the specifics","msgtype":"m.text"},"ts":1458116778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: WebAssembly folks also have some ideas around type-informed optimizations","msgtype":"m.text"},"ts":1458116818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh well, I hope that when the return types are all per spec in Blink, one might add asserts to find some lies","msgtype":"m.text"},"ts":1458116835000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: basically skipping a whole lot of the checks IDL does to guarantee you have objects of the proper brand","msgtype":"m.text"},"ts":1458116841000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Should speed up things a little too if that works out","msgtype":"m.text"},"ts":1458116861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you know you're feeding a troll, right?","msgtype":"m.text"},"ts":1458116902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeahhhh. I want going to reply, but I saw his post getting shared on Twitter so figured I'd see how far a reasonable response would get","msgtype":"m.text"},"ts":1458117042000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But you're right it's not helping","msgtype":"m.text"},"ts":1458117057000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Been a while since I saw someone using all caps words (apart from constants)","msgtype":"m.text"},"ts":1458117128000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/DOM-Parsing/ hasn't been maintained since June 2014, ugh","msgtype":"m.text"},"ts":1458117435000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: are the enum values documented anywhere?","msgtype":"m.text"},"ts":1458118213000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In one of the algorithm steps in the sensor spec, I need to iterate over a set of sensor instances to resolve promises and fire events.","msgtype":"m.text"},"ts":1458119882000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In the polyfill, I clone the set before doing so, to avoid unwanted side effects if one of the handler actually removes a sensor from the set.","msgtype":"m.text"},"ts":1458119884000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Is there spec language to describe this?","msgtype":"m.text"},"ts":1458119894000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"For ref, here are the polyfill lines: https://github.com/w3c/sensors/blob/cfc3932/polyfills/geolocation.js#L124-L126","msgtype":"m.text"},"ts":1458120002000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"zcorpan: do you happen to know if we have a test for https://github.com/whatwg/html/issues/842?","msgtype":"m.text"},"ts":1458121022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ./Secure-Close-1005-verify-code.htm:            assert_equals(evt.code, 1005, \"CloseEvent.code should be 1005\");","msgtype":"m.text"},"ts":1458121426000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"though wss: might not work, on w3c-test.org at least","msgtype":"m.text"},"ts":1458121530000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that tests what the server transmitted, not what the client transmitted","msgtype":"m.text"},"ts":1458121563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the server echos the client's code","msgtype":"m.text"},"ts":1458121581000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or that seems to be the intent","msgtype":"m.text"},"ts":1458121600000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: so by default the client transmits 1005, a code developers cannot set?","msgtype":"m.text"},"ts":1458121602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't know what browsers do or if this test is correct per spec","msgtype":"m.text"},"ts":1458121650000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i think this test was written by MS","msgtype":"m.text"},"ts":1458121659000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the tests i wrote predated close codes","msgtype":"m.text"},"ts":1458121678000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hmm, they don't seem great","msgtype":"m.text"},"ts":1458121711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Okay, so WSP has internal contradictions","msgtype":"m.text"},"ts":1458121801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"If this Close control frame contains no status code, _The WebSocket Connection Close Code_ is considered to be 1005.\" -- though this doesn't mean that close() should send 1005","msgtype":"m.text"},"ts":1458121898000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in fact 1005 must not be sent explicitly","msgtype":"m.text"},"ts":1458121942000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"close() invokes https://tools.ietf.org/html/rfc6455#section-7.1.2 which requires a /code/","msgtype":"m.text"},"ts":1458121951000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1458121956000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Though it seems you can transmit an empty Close frame (without body) too","msgtype":"m.text"},"ts":1458121972000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it seems to me close() should be equivalent to close(1000)","msgtype":"m.text"},"ts":1458121977000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Maybe clients do that?","msgtype":"m.text"},"ts":1458121980000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And just ignore that the protocol requires /code/ not to be optional (since it describes elsewhere that it is)","msgtype":"m.text"},"ts":1458122008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: emailed hybi","msgtype":"m.text"},"ts":1458122182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: copied you and tyoshino","msgtype":"m.text"},"ts":1458122197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why does The WebSocket Protocol use both \"Close message\" and \"Close frame\"?","msgtype":"m.text"},"ts":1458122667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no idea. i assume they mean the same thing (and Close frame is the correct one)","msgtype":"m.text"},"ts":1458123004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: hmm, the spec says that messages consist of one or more frames","msgtype":"m.text"},"ts":1458123095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: but I'm not sure if it actually uses that terminology consistently","msgtype":"m.text"},"ts":1458123114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://w3c-test.org/websockets/closing-handshake/003.html is a simple test for close(), i'll inspect it with packetpeeper","msgtype":"m.text"},"ts":1458123178000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: ah yeah, but iirc you're not allowed to fragment close into multiple frames","msgtype":"m.text"},"ts":1458123231000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"Control frames themselves MUST NOT be fragmented.\"","msgtype":"m.text"},"ts":1458123334000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well... i've found the packet that contains the close frame from the client but i can't make much sense of it, i can't seem to get the payload itself (only in a form where it's converted to text in a lossy way)","msgtype":"m.text"},"ts":1458124016000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: http://imgur.com/1dS4le4","msgtype":"m.text"},"ts":1458124254000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: this is with Nightly with closing-handshake/003.html, the last PSH packet from the client","msgtype":"m.text"},"ts":1458124311000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: hmm, there's some kind of obfuscation going on, right?","msgtype":"m.text"},"ts":1458124377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: not really sure what to make of that either","msgtype":"m.text"},"ts":1458124503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: in Chrome I get \"e.wasClean expected true but got false\" for that test","msgtype":"m.text"},"ts":1458124679000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: don't think so, the websocket frame header shouldn't be obfuscated i think. it's just that this is the whole TCP packet and i don't know how to parse TCP in my head :-)","msgtype":"m.text"},"ts":1458124714000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I wonder why Firefox doesn't have debugging for WebSocket","msgtype":"m.text"},"ts":1458124760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"chrome's devtools can inspect messages but not close frames last i checked","msgtype":"m.text"},"ts":1458124830000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://addons.mozilla.org/en-US/firefox/addon/websocket-monitor/","msgtype":"m.text"},"ts":1458124839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: with that addon I get disconnected, code 1005","msgtype":"m.text"},"ts":1458124894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: that addon doesn't really log the close reason though, if I provide one, but it does allow me to disconnect with 1000","msgtype":"m.text"},"ts":1458125102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i suppose the TCP payload must be the trailing 6 bytes, thus F1 86 4A","msgtype":"m.text"},"ts":1458126698000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1458126819000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"88 80 CC F1 86 4A","msgtype":"m.text"},"ts":1458126887000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and from what i can tell from the WebSocket framing, that means the payload length is 0 and therefore no close code is sent","msgtype":"m.text"},"ts":1458127426000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wipes his forehead","msgtype":"m.emote"},"ts":1458127479000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"in Chrome the close frame also has no payload (though Chrome fails the test for .wasClean; not sure why, the close handshake looks OK to me)","msgtype":"m.text"},"ts":1458128351000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"WebKit also no payload (and it passes the test)","msgtype":"m.text"},"ts":1458128606000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":".code returns 1005 in webkit and gecko; 1006 in chrome","msgtype":"m.text"},"ts":1458128715000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: since I don't understand github jargon, https://github.com/w3c/web-platform-tests/pull/2665 means the tests are now in wpt?","msgtype":"m.text"},"ts":1458130593000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess so","msgtype":"m.text"},"ts":1458131472000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"silly me","msgtype":"m.text"},"ts":1458131477000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"mkwst: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27852 waits for a reply from you","msgtype":"m.text"},"ts":1458136977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Replied, sorry I missed it.","msgtype":"m.text"},"ts":1458137654000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: I removed the HISTORICAL- prefix from a bunch more bugzilla components. So hopefully that will un-break some links. But if later you notice any specific ones I missed, lemme know","msgtype":"m.text"},"ts":1458137867000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: If you want that in Fetch, let's just move the bug to GitHub and I'll try to send you a PR later in the week. If you want in HTML, then maybe I'll let Domenic write a PR because HTML is huge. :)","msgtype":"m.text"},"ts":1458137919000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Domenic: what do you think? ^","msgtype":"m.text"},"ts":1458138089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't care strongly about the layering, and Fetch already has some MIME type blocking","msgtype":"m.emote"},"ts":1458138119000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: Domenic: actually, maybe Fetch is better if we just want to treat image MIME types as a network error","msgtype":"m.text"},"ts":1458138171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: Domenic: aaah, starting to second guess, HTML has some MIME type checks for <script> too now, with <script type=module>","msgtype":"m.text"},"ts":1458138210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"drops mic","msgtype":"m.emote"},"ts":1458138216000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: ta","msgtype":"m.text"},"ts":1458138232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: happy to let Fetch handle that. It seems potentially better there. Based on destination etc.","msgtype":"m.text"},"ts":1458138286000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Okay, mkwst, PR Fetch then 😃","msgtype":"m.text"},"ts":1458138513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: https://www.w3.org/Bugs/Public/show_bug.cgi?id=17632 styling of <li> in terms of CSS, is that possible yet?","msgtype":"m.text"},"ts":1458138795000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: start and value, yes.  reverse, no.","msgtype":"m.text"},"ts":1458143786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Handling value required the new counter-set property from the Lists spec, which I think Gecko implements.","msgtype":"m.text"},"ts":1458143903000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: In the autolinking section of the docs, like all the other linking types.","msgtype":"m.text"},"ts":1458144948000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: oh, right, saw it now.","msgtype":"m.text"},"ts":1458145041000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: should HTML define some kind of magical value for something in the rendering section?","msgtype":"m.text"},"ts":1458145448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: similar to xxx-large","msgtype":"m.text"},"ts":1458145463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Say that, in the reverse case, implementations must act as if counter-reset were set to XXX value.","msgtype":"m.text"},"ts":1458145483000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I guess that works, though we might still run into trouble with getComputedStyle","msgtype":"m.text"},"ts":1458145857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: anyway, added your suggestion to the bug, thanks","msgtype":"m.text"},"ts":1458145929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hello WHATWG crew! o/","msgtype":"m.text"},"ts":1458146479000,"senderName":"gabr13l","senderId":"gabr13l@irc"},
{"content":{"body":"Does anyone know if junov ever hangs out on IRC?","msgtype":"m.text"},"ts":1458150190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There's a bunch of legacy <canvas> bugs they might be interested in","msgtype":"m.text"},"ts":1458150201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: https://www.w3.org/Bugs/Public/show_bug.cgi?id=17770 is another <li> thingie","msgtype":"m.text"},"ts":1458153069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: awaiting attention from you","msgtype":"m.text"},"ts":1458153076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27875 is awaiting an answer from you","msgtype":"m.text"},"ts":1458153148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ahhhhh whaaaaat environment settings objects are not 1:1 with Windows whaaaat","msgtype":"m.text"},"ts":1458154246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: Once you're done doing whatever annevk wants you to do, tell me all about how easy it must be by now to magically publish daily drafts to /TR via Bikeshed and Whatever They've Called Their Tool(tm). :)","msgtype":"m.text"},"ts":1458155410000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(Also, thanks for fixing Bikeshed this morning. :) )","msgtype":"m.text"},"ts":1458155429000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Domenic: 😭","msgtype":"m.text"},"ts":1458155669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: not looking forward to reading about that tomorrow","msgtype":"m.text"},"ts":1458155697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it explains why nothing gets stored on settings objects, and instead they all have algorithms that grab things from places...","msgtype":"m.text"},"ts":1458155760000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Until I messed up and did module map :(","msgtype":"m.text"},"ts":1458155792000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: That bug is still pending me updating Lists and getting the WG to sign off on it.","msgtype":"m.text"},"ts":1458162791000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Which I plan to do in the next few months, but I've said that for about two years, so who knows whether I\"ll actually achieve it.","msgtype":"m.text"},"ts":1458162808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"mkwst: It's not easy *quite* yet, but I *think* all the necessary bits are in place, I just need to fiddle with them and make them work.","msgtype":"m.text"},"ts":1458165746000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Probably a very noob question, but should you always queue a task to dispatch events or are there legitimate cases where you shouldn't do so?","msgtype":"m.text"},"ts":1458169110000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Certianly not all existing events queue a task","msgtype":"m.text"},"ts":1458169161000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Legitimately it makes sense during navigation and so on, I think","msgtype":"m.text"},"ts":1458169197000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mmm","msgtype":"m.text"},"ts":1458169381000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"While on the topic, I guess there's no simple way to polyfill \"queue a task\"","msgtype":"m.text"},"ts":1458169416000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Sure there is","msgtype":"m.text"},"ts":1458169617000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Use postMessage","msgtype":"m.text"},"ts":1458169630000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: oh, cool. Thanks","msgtype":"m.text"},"ts":1458169763000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jgraham: arg, that's more complicated than I initially expected. Giving seTimeout(fn, 0). Probably sufficient for my needs.","msgtype":"m.text"},"ts":1458170872000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1458171098000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: was looking at this: https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js","msgtype":"m.text"},"ts":1458171358000,"senderName":"tobie","senderId":"tobie@irc"}
]