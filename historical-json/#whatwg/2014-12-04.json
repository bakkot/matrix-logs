[
{"content":{"body":"isn't the plan still to integrate Streams into the EcmaScript spec itself","msgtype":"m.text"},"ts":1417661136000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if so it seems like Domenic's approach is the right one","msgtype":"m.text"},"ts":1417661149000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway smaug is fast asleep by now I guess","msgtype":"m.text"},"ts":1417661281000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we need an inform bot here","msgtype":"m.text"},"ts":1417661288000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: would it be OK if I had an inform bot join here?","msgtype":"m.text"},"ts":1417661409000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kind of like MsgServ but more lightweight and easier","msgtype":"m.text"},"ts":1417661442000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we could just do like this:","msgtype":"m.text"},"ts":1417661451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"foobot, inform smaug____ I think if the plan is still to integrate Streams into the EcmaScript spec itself, then Domenic's approach would seem to make a lot of sense...","msgtype":"m.text"},"ts":1417661512000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and then when smaug joined, the bot would do:","msgtype":"m.text"},"ts":1417661526000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug, at 2014-12-04 00:54 UTC, MikeSmith said, I think if the plan is still to integrate Streams into the EcmaScript spec itself, then Domenic's approach would  seem to make a lot of sense...","msgtype":"m.text"},"ts":1417661567000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: fine by me","msgtype":"m.text"},"ts":1417661791000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1417661809000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will try to set one up this weekend","msgtype":"m.text"},"ts":1417661820000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"layout.css.vertical-text.enabled=true","msgtype":"m.text"},"ts":1417670759000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"doesn't work with my test page though","msgtype":"m.text"},"ts":1417671189000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://people.w3.org/mike/demo/melos/","msgtype":"m.text"},"ts":1417671190000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: smaug____ is probably not asleep yet","msgtype":"m.text"},"ts":1417671208000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ah yeah yall are in Portland","msgtype":"m.text"},"ts":1417671233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"glyph-orientation-vertical is what I'm using in my (old) demo. I guess I may need to update that","msgtype":"m.text"},"ts":1417671268000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"Unknown property 'glyph-orientation-vertical'.  Declaration dropped.\" in console in Nightly","msgtype":"m.text"},"ts":1417671301000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not yet","msgtype":"m.text"},"ts":1417671305000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"also \"Unknown property 'align'.  Declaration dropped\"","msgtype":"m.text"},"ts":1417671313000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks at the logs","msgtype":"m.emote"},"ts":1417671374000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"MikeSmith: oh, right, *if* Streams will be part of ecma, then sure, using whatever odd syntax ecma is using for the specs is fine","msgtype":"m.text"},"ts":1417671468000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but it is not clear to me why Streams should be part of ecma","msgtype":"m.text"},"ts":1417671480000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie: fyi this is the bot I was talking about https://github.com/w3c/infobot","msgtype":"m.text"},"ts":1417672351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: I personally don't know enough about Streams to have a position either way on whether it rightly should be in the ES spec or not","msgtype":"m.text"},"ts":1417672439000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: but I do vaguely recall that there was some agreement within TC39 that it should be moved into the ES spec","msgtype":"m.text"},"ts":1417672485000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if so, fine. I wouldn't be looking at that spec ever again :p","msgtype":"m.text"},"ts":1417672523000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but I could be misremembering that and anyway Domenic would know of course","msgtype":"m.text"},"ts":1417672525000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"smaug____: well that's sad to hear","msgtype":"m.text"},"ts":1417672541000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(not quite true, I've looked at some ecma drafts occasionally )","msgtype":"m.text"},"ts":1417672558000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"MikeSmith: but in practice, it would mean I'd expect js engine devs to review it","msgtype":"m.text"},"ts":1417672613000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not dom implementation devs","msgtype":"m.text"},"ts":1417672624000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah OK. I was going to say that if you're not looking at a particular spec because it's hard for you to read than that could be a sign of the spec having a serious problem","msgtype":"m.text"},"ts":1417672658000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but if it's more about division of labor (between DOM and JS teams), that's a different thing","msgtype":"m.text"},"ts":1417672683000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess it is about both. If the spec is easy to read and happens to be somewhere in whatwg, it is likely that I'll read it","msgtype":"m.text"},"ts":1417672744000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: ok","msgtype":"m.text"},"ts":1417673946000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: looks like it's due to https://github.com/Fyrd/caniuse/commit/2455f144fa5a261e7f15f7d03a234ee426e5432c","msgtype":"m.text"},"ts":1417677092000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1417677382000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, for background-color:9.9aa gecko rounds the number so it becomes #0010aa. but for 9.9 it rejects. blink rounds both numbers and dimensions","msgtype":"m.text"},"ts":1417680849000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, scientific notation is interesting. 9e1","msgtype":"m.text"},"ts":1417681004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"does anyone want to take a look at my webcomponents talk and give me feedback tonight? My preso is tomorrow morning.","msgtype":"m.text"},"ts":1417688849000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"(tonight as in it's 9:26 pm in AU right now)","msgtype":"m.text"},"ts":1417688849000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"oops, wrong IRC channel.","msgtype":"m.text"},"ts":1417688849000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"sorry for the disturbance","msgtype":"m.text"},"ts":1417688849000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"though if someone is interested, that would be great too","msgtype":"m.text"},"ts":1417688865000,"senderName":"estellevw","senderId":"estellevw@irc"},
{"content":{"body":"Ms2ger: small assistance needed with something","msgtype":"m.text"},"ts":1417694680000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Shoot","msgtype":"m.text"},"ts":1417694688000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(I'm in class, though)","msgtype":"m.text"},"ts":1417694693000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"will DM you about it since it's so highly sensitive","msgtype":"m.text"},"ts":1417694732000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: stop procrastinating while in class!","msgtype":"m.text"},"ts":1417694799000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders, well, my prof just walked out, so... :)","msgtype":"m.text"},"ts":1417694933000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"... and he's back","msgtype":"m.text"},"ts":1417695103000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"infobot, tell annevk what happened to irccloud","msgtype":"m.text"},"ts":1417695112000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"bah this bot sucks","msgtype":"m.text"},"ts":1417695141000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh it's not actually here","msgtype":"m.text"},"ts":1417695171000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: fixed hashless now https://github.com/whatwg/quirks/commit/f84b11e4abb561317c407c1a0d47ff45ad6e4fcf https://github.com/w3c/web-platform-tests/pull/1442","msgtype":"m.text"},"ts":1417696920000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wanderview: thanks for thinking through that partial cache stuff!","msgtype":"m.text"},"ts":1417700953000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: np, I've been thinking about how I would implement it for a while... streaming the partial file will be tricky for us due to how our streams infrastructure works","msgtype":"m.text"},"ts":1417701003000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks for working on the algorithms to make it work, though!","msgtype":"m.text"},"ts":1417701020000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I definitely think its something we want to solve","msgtype":"m.text"},"ts":1417701030000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wonders why irccloud is running slow...","msgtype":"m.emote"},"ts":1417701043000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"MikeSmith: smaug____: I was hoping to work with TC39 on making streams part of the ES standard library, but they were not willing to work with me/WHATWG really; they wanted to take over the spec themselves. So that idea kinda floundered. Still, I think it (as well as Encoding and URL, actually) should be part of a theoretical \"extended ES standard library\",","msgtype":"m.text"},"ts":1417704112000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not managed by Ecma, but still appropriate for implementation in the JS engine.","msgtype":"m.text"},"ts":1417704112000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, couldn't any spec be part of the theoretical ES sl","msgtype":"m.text"},"ts":1417705089000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"whether or not webidl is used for example","msgtype":"m.text"},"ts":1417705099000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What spec it is in is relatively irrelevant.","msgtype":"m.text"},"ts":1417705202000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"indeed. Where the spec is \"published\" can be somewhat relevant since it may affect to who reviews and implements it","msgtype":"m.text"},"ts":1417705262000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"But at the end of the day, there's some lack of desire to avoid extending the ES stdlib beyond things that cannot be implemented in JS itself.","msgtype":"m.text"},"ts":1417705306000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"smaug____: IMO specs would need to be platform-independent, so e.g. no use of DOMException etc. And IMO (but not everyone's unfortunately) I should be able to work on JS standard library specs in WHATWG.","msgtype":"m.text"},"ts":1417705308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What makes a spec a JS stdlib spec?","msgtype":"m.text"},"ts":1417705332000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(honest question)","msgtype":"m.text"},"ts":1417705339000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"thinks we should make webidl more platform independent and then use it also for APIs which non-browser implementations want to have","msgtype":"m.emote"},"ts":1417705372000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and this is mainly from practical point of view. having webidl interfaces tends to just make the spec significantly easier to read comparing to some ways to write specs","msgtype":"m.text"},"ts":1417705439000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if we need some other syntax to express new es features, we should change webidl","msgtype":"m.text"},"ts":1417705457000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I somewhat agree with that except that WebIDL is so hard to read for anyone used to JS semantics","msgtype":"m.text"},"ts":1417705488000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"e.g. wtf is an attribute or interface","msgtype":"m.text"},"ts":1417705493000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thus https://streams.spec.whatwg.org/#rs-class-definition","msgtype":"m.text"},"ts":1417705511000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, we should just rename interface to class and attribute to property","msgtype":"m.text"},"ts":1417705585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd like something like `get/set prop` or `get prop`","msgtype":"m.text"},"ts":1417705611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And instead of readonly have something like get property","msgtype":"m.text"},"ts":1417705613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1417705621000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Seems easy enough to fix","msgtype":"m.text"},"ts":1417705634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but hard to justify given the churn","msgtype":"m.text"},"ts":1417705650000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Given the upsides it seems worth it","msgtype":"m.text"},"ts":1417705740000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IDL is after all a way to convey something as well and if it's doing a poor job at that we should fix it","msgtype":"m.text"},"ts":1417705782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why get/set ?","msgtype":"m.text"},"ts":1417705921000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"readonly attribute is quite good abstraction","msgtype":"m.text"},"ts":1417705940000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"presumably because get/set is like the {get foo() { return 1; }} syntax","msgtype":"m.text"},"ts":1417705986000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"getters and setters are what the semantics actually are","msgtype":"m.text"},"ts":1417706021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"plus usually an internal slot","msgtype":"m.text"},"ts":1417706034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"attributes are not a real thing; they make people think you're talking about HTML attributes (especially because people usually read their first IDL in the HTML spec)","msgtype":"m.text"},"ts":1417706046000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes. and readonly attribute is rather nice abstraction of a getter","msgtype":"m.text"},"ts":1417706072000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"readonly sounds like non-writable which sounds like non-writable data property which is extremely different from a getter","msgtype":"m.text"},"ts":1417706073000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that DOM attributes vs webidl attributes case is a real issue","msgtype":"m.text"},"ts":1417706086000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"having both getter and setter for each attribute in the interface would be rather annoying","msgtype":"m.text"},"ts":1417706159000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't see how attribute is a nice abstraction of something that's actually called a property","msgtype":"m.text"},"ts":1417706161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"harder to read","msgtype":"m.text"},"ts":1417706163000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I don't think anyone is suggesting that per se","msgtype":"m.text"},"ts":1417706171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I like separate getter setter but in the interests of not being annoying something like `get/set foo` seems fine","msgtype":"m.text"},"ts":1417706217000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: although that would open up some possibilities such as accepting more in the setter than in the getter which we've had requests for","msgtype":"m.text"},"ts":1417706221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"attribute hides the fact that the thing is implemented using a getter/setter","msgtype":"m.text"},"ts":1417706315000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since most cases one shouldn't need to think about that it is a getter or setter","msgtype":"m.text"},"ts":1417706330000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yeah, I find the fact that readonly attributes are actually getter/setter pairs a bit confusing","msgtype":"m.text"},"ts":1417706336000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(readonly attributes are getters)","msgtype":"m.text"},"ts":1417706358000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(pedant :))","msgtype":"m.text"},"ts":1417706372000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"smaug____: but if you come from a JavaScript background the term attribute makes no sense and gives you no idea what's going on","msgtype":"m.text"},"ts":1417706411000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: that seems way more important","msgtype":"m.text"},"ts":1417706418000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"depends on the audience","msgtype":"m.text"},"ts":1417706454000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if you're some random js dev, you may not really use getters/setters explictly","msgtype":"m.text"},"ts":1417706505000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but you will know about properties","msgtype":"m.text"},"ts":1417706526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and that there are such things as getters and setters","msgtype":"m.text"},"ts":1417706534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you won't have a clue about attributes other than DOM attributes which are completely different","msgtype":"m.text"},"ts":1417706549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is not sure all the devs even know about getters/setters","msgtype":"m.emote"},"ts":1417706634000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"given all the really old documentation etc","msgtype":"m.text"},"ts":1417706651000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm just weird coming from the JS engine side nowadays :)","msgtype":"m.text"},"ts":1417706662000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: in the env settings object, there's no document for (shared)workers right?","msgtype":"m.text"},"ts":1417707202000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yup","msgtype":"m.text"},"ts":1417707270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: how is it explained in \"web implemented in JS\" idea how a random object, say <a>, gets to the internal slot of some other object, say document's base URL?","msgtype":"m.text"},"ts":1417707318000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so I'd have to use the creation url for workers. CurrentURL would make that easier. Will suggest that","msgtype":"m.text"},"ts":1417707367000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: shared access to the weak map. (Can gist up an example if you like.)","msgtype":"m.text"},"ts":1417707808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: access is given upon creation?","msgtype":"m.text"},"ts":1417707889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or just using a shared scope","msgtype":"m.text"},"ts":1417707913000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"fair I guess","msgtype":"m.text"},"ts":1417707919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if memory serves, you were keen on having ServiceWorkerClient represent window clients, and have SharedWorker / Worker represent worker clients. Have I got that right? I'm kinda uncomfortable returning a mix of objects from clients.getAll()","msgtype":"m.text"},"ts":1417709317000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Could have different APIs to get each type, or a type param on getAll. Or stick with ServiceWorkerClient that represents all (and provide values for visibility & focus state)","msgtype":"m.text"},"ts":1417709585000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so I was wrong about that","msgtype":"m.text"},"ts":1417713697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: APIs should be similar for each","msgtype":"m.text"},"ts":1417713737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: might want some things different for window vs worker still I suppose","msgtype":"m.text"},"ts":1417713755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: need a type property I think. Also, new ServiceWorkerClient doesn't make sense anymore as a way to create a window. clients.openWindow(url) feels better, but I guess there'll be a \"but constructors\" argument to have","msgtype":"m.text"},"ts":1417714518000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so is ServiceWorkerClient exposed outside service workers as well?","msgtype":"m.text"},"ts":1417714556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: otherwise we could have Client, WindowClient, WorkerClient","msgtype":"m.text"},"ts":1417714566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and not support new WorkerClient I suppose","msgtype":"m.text"},"ts":1417714588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I like how mounir announced Google left sysapps after trying to convince me for a while this was the way to go","msgtype":"m.text"},"ts":1417714640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: works for me.","msgtype":"m.text"},"ts":1417714654000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I've lost track a bit of what objects we have where unfortunately, but if this sounds reasonable, great","msgtype":"m.text"},"ts":1417714703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I should probably read through it again","msgtype":"m.text"},"ts":1417714711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: perhaps we should make a diagram that explains the relationship between the objects","msgtype":"m.text"},"ts":1417714726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: have a moment? I'm where the webcompat team tends to sit (F room)","msgtype":"m.text"},"ts":1417718394000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors: yeah","msgtype":"m.text"},"ts":1417718424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: things are never black or white","msgtype":"m.text"},"ts":1417719900000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: rainbows","msgtype":"m.text"},"ts":1417719926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Black holes?","msgtype":"m.text"},"ts":1417719981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ClampBetween(0, 255) Domenic, that's called ToUint8","msgtype":"m.text"},"ts":1417719985000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the sun is white: http://blog.chron.com/sciguy/2013/12/what-color-is-the-sun/#28933101=0","msgtype":"m.text"},"ts":1417720062000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"rubys: That's not what my crayon drawings say.","msgtype":"m.text"},"ts":1417720086000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: tl;dr: the sun is yellow because the sky is blue.","msgtype":"m.text"},"ts":1417720160000,"senderName":"rubys","senderId":"rubys@irc"},
{"content":{"body":"Yeah, I know. ^_^","msgtype":"m.text"},"ts":1417720176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A combination of blue light getting scattered across the sky, so the leftover is more yellowish, and the opponency of our visual pathway contrasting blue against yellow.","msgtype":"m.text"},"ts":1417720214000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: unclear whether it's EnsureBetween or ClampBetween IMO.","msgtype":"m.text"},"ts":1417720888000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: also unclear why you would use ClampBetween(0, 255) more often than ClampBetween(0, 100) or whatever","msgtype":"m.text"},"ts":1417720907000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: exciting to see element.closest() starting to ship. It's almost as if we can actually make the DOM better by adding things to standards :)","msgtype":"m.text"},"ts":1417721143000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but are they stable?!","msgtype":"m.text"},"ts":1417721202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: Because clamping behavior in APIs is almost always dictated by the size of the int used to store it.","msgtype":"m.text"},"ts":1417721215000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also: ClampBetween(0, 65536) is obnoxious. ^_^","msgtype":"m.text"},"ts":1417721234000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"65535, rather.","msgtype":"m.text"},"ts":1417721245000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"See?!?","msgtype":"m.text"},"ts":1417721248000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but how often do you actually want to clamp on the web","msgtype":"m.text"},"ts":1417721251000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Whenever you're dealing with bytes.","msgtype":"m.text"},"ts":1417721264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: colors, *maybe*, otherwise unsure when","msgtype":"m.text"},"ts":1417721264000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"how many APIs actually deal with bytes instead of just dealing with arraybuffers","msgtype":"m.text"},"ts":1417721290000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: made it to Chrome beta... only 6 weeks left","msgtype":"m.text"},"ts":1417721306000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it was a lame joke about the standard","msgtype":"m.text"},"ts":1417721323000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh lollll","msgtype":"m.text"},"ts":1417721335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so for longdesc, is it productive to just vote against publishing and say \"we agree with the previous formal objection\"? or is that a lost cause?","msgtype":"m.text"},"ts":1417721534000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Continue doing minimal-effort objecting.","msgtype":"m.text"},"ts":1417721568000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, yes, it's a lost cause, but we can at least put forth a modicum of effort showing that everything is bullshit forever.","msgtype":"m.text"},"ts":1417721590000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also lol apparently browser extensions count for the purposes of interoperable implementations https://w3c.github.io/test-results/html-longdesc/cr-report.html","msgtype":"m.text"},"ts":1417721623000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*also* apparently my TAG status lets me fill out the voting form despite not being the AC rep... I'll quietly close that window I guess and talk to my AC rep.","msgtype":"m.text"},"ts":1417721667000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Oh nevermind: all the form field controls are clickable but there's a \"You are allowed to read the questionnaire, but you are not authorized to answer with your current credentials!\" at the top of the page)","msgtype":"m.text"},"ts":1417721719000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"imagine if all that time put into longdesc and alt was put into making things accessible","msgtype":"m.text"},"ts":1417722634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk - have you spoke with dbolter about that while you're in the same room?","msgtype":"m.text"},"ts":1417722705000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"looks over and sees them at the same table, with only marcosc between them!","msgtype":"m.emote"},"ts":1417722731000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"(we talked about getComputedRole())","msgtype":"m.text"},"ts":1417723010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hello, i'm seeking help clarifying the removal of a paragraph in XHR, is this the right place to ask?","msgtype":"m.text"},"ts":1417726919000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"here or bugmail is proabably a good place for it","msgtype":"m.text"},"ts":1417727017000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"alright let's try; xhr 4.5.6 (the send method), the following paragraph is in f18fc52 and removed in c99000a","msgtype":"m.text"},"ts":1417727103000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"\"For 304 Not Modified responses that are a result of a user agent generated conditional request the user agent must act as if the server gave a 200 OK response with the appropriate content. The user agent must allow author request headers to override automatic cache validation (e.g. If-None-Match or If-Modified-Since), in which case 304 Not Modified responses must be passed through. [HTTP]\"","msgtype":"m.text"},"ts":1417727106000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"i essentially question the intent behind the removal and wonder if this behavior can still be relied on (i would assume so, there'd be some serious breakage otherwise)","msgtype":"m.text"},"ts":1417727194000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"(also note that it's still in the w3 draft)","msgtype":"m.text"},"ts":1417727254000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"nvm, found it reworded, just had to look closer","msgtype":"m.text"},"ts":1417728005000,"senderName":"tnelis","senderId":"tnelis@irc"},
{"content":{"body":"zcorpan: \"If the element does not have a srcset attribute specified and it does not have a parent or it has a parent but it is not a picture element, and it has a src attribute specified and its value is not the empty string, let selected source be the value of the element's src attribute, and selected pixel density be 1.0.\" is really hard to parse","msgtype":"m.text"},"ts":1417728160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's quite a long sentence","msgtype":"m.text"},"ts":1417728196000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"following that algorithm :-(","msgtype":"m.text"},"ts":1417728469000,"senderName":"annevk","senderId":"annevk@irc"}
]