[
{"content":{"body":"TabAtkins: OK but I couldn't see any other way to force it to check, e.g., \"(max-width: 30em) 100vw\" on its own (a <source-size-value>) and that wrapping-it-with-@media hack seemed to work","msgtype":"m.text"},"ts":1424044837000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"What are you trying to *get* out of it?  Wrapping it with @media is, I think, solely checking that there's no {} in the value, and that's by accident.  It doesn't do anything else.","msgtype":"m.text"},"ts":1424044898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1424044957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what I think I was trying to get back when I first added it was just for now a way to do an additional syntax check on the <source-size-value> and <source-size> parts","msgtype":"m.text"},"ts":1424045049000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Okay, well the parser doesn't actually provide any ability to do further syntax checks. ^_^  If what you're asking for isn't one of the entry points, you have to syntax check yourself.","msgtype":"m.text"},"ts":1424045127000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1424045215000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: what I aim for longer term is to replace our ad-hoc media=\"\" and sizes=\"\" tokenizer in the validator with your JS tokenizer (via Rhino), because I think that'll be less work than writing a tokenizer in Java myself (and certainly I'm not going to magically have a bunch of time any time soon to write one in Java anyway)","msgtype":"m.text"},"ts":1424045234000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I added that code to call your JS tokenizer via Rhino a few months just to see if the basic mechanism would be possible","msgtype":"m.text"},"ts":1424045289000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Makes sense.  (Though writing a tokenizer to the spec still isn't hard.)","msgtype":"m.text"},"ts":1424045631000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, just requires more time than I have atm","msgtype":"m.text"},"ts":1424046423000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, what I have there for that part now \"works\" to the extent that it's at least not causing any spurious errors to be reported","msgtype":"m.text"},"ts":1424046488000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"after I updated to the latest parse-css.js","msgtype":"m.text"},"ts":1424046514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I'm declaring victory for now","msgtype":"m.text"},"ts":1424046539000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I can get a new standalone release out to Jorn Zaefferer for use in the grunt HTML checker he maintains, and out to the Bootstrap project for the thing they use that checks HTML in JSFiddle/JSBin/Codepen links people post in Bootstrap bug reports","msgtype":"m.text"},"ts":1424046686000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":" TabAtkins: 301 zcorpan","msgtype":"m.text"},"ts":1424058358000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well 307 i guess","msgtype":"m.text"},"ts":1424058369000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"thinks a wiki should not be the canonical place for the APNG spec: https://wiki.mozilla.org/APNG_Specification","msgtype":"m.emote"},"ts":1424067289000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: wikis are the coolest places for specs, easiest to fix errata ;)","msgtype":"m.text"},"ts":1424067331000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"There is fork development going on here: https://gist.github.com/SoniEx2/c679e771d506210378a5","msgtype":"m.text"},"ts":1424067346000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"wow that URL is so much prettier. not.","msgtype":"m.text"},"ts":1424067358000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: Perhaps, if your wiki was set up specifically for spec development.","msgtype":"m.text"},"ts":1424067378000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(which MozillaWiki is not)","msgtype":"m.text"},"ts":1424067387000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yes, some template work helps with that","msgtype":"m.text"},"ts":1424067389000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"well the github gist wins - it loaded. while the wikimo link is still spinning on a blank page :(","msgtype":"m.text"},"ts":1424067406000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":":(","msgtype":"m.text"},"ts":1424067415000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"oh it finally loaded :(","msgtype":"m.text"},"ts":1424067417000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"That's not good","msgtype":"m.text"},"ts":1424067419000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Can you check to see what took so long, by any chance?","msgtype":"m.text"},"ts":1424067429000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"looking","msgtype":"m.text"},"ts":1424067476000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"just did a shift reload with the network inspector","msgtype":"m.text"},"ts":1424067516000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"oh hey \"Secure Connection Failed\"","msgtype":"m.text"},"ts":1424067528000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"trying again","msgtype":"m.text"},"ts":1424067546000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"wow that's a lot of network resources","msgtype":"m.text"},"ts":1424067579000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"still loading","msgtype":"m.text"},"ts":1424067597000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"26 requests, 1531.82KB, 53.39s","msgtype":"m.text"},"ts":1424067656000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"that's pretty pathetic","msgtype":"m.text"},"ts":1424067660000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Are you logged in?","msgtype":"m.text"},"ts":1424067660000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1424067664000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"the HTML took 671ms","msgtype":"m.text"},"ts":1424067687000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"hmm... that","msgtype":"m.text"},"ts":1424067703000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"'s actually shorter than what I'm seeing","msgtype":"m.text"},"ts":1424067710000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"then so much css and js","msgtype":"m.text"},"ts":1424067725000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"but then the really killers - woffs","msgtype":"m.text"},"ts":1424067735000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1424067739000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"designery cheese","msgtype":"m.text"},"ts":1424067743000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"loading the same thing 4 times","msgtype":"m.text"},"ts":1424067744000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"and as text/plain","msgtype":"m.text"},"ts":1424067751000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"maybe I should block all woffs","msgtype":"m.text"},"ts":1424067755000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'll be looking into that tomorrow","msgtype":"m.text"},"ts":1424067760000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Helvetica is good enough :P","msgtype":"m.text"},"ts":1424067764000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"But it seems like the biggest problem is the speed of the server","msgtype":"m.text"},"ts":1424067826000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"These aren't huge files","msgtype":"m.text"},"ts":1424067831000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"goodness sakes, 4618ms to load bg-gradient-sand.png!!!","msgtype":"m.text"},"ts":1424067846000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"9 font files","msgtype":"m.text"},"ts":1424067945000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"But hmm, your speed is definitely much slower than mine","msgtype":"m.text"},"ts":1424068002000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I get the whole page in ~6 s","msgtype":"m.text"},"ts":1424068037000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"8.45 s this latest time","msgtype":"m.text"},"ts":1424068046000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"and I have 30 requests","msgtype":"m.text"},"ts":1424068053000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Still, much room for improvement","msgtype":"m.text"},"ts":1424068065000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I'm on a 1.5/700 ADSL if that makes any difference","msgtype":"m.text"},"ts":1424068069000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1424068076000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=1133409","msgtype":"m.text"},"ts":1424068137000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"thanks for the heads-up about APNG - captured: https://wiki.mozilla.org/Standards#Orgless_specs","msgtype":"m.text"},"ts":1424068326000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"GPHemsley, FWIW all the microformats and indiewebcamp specs are \"living\" wiki-developed.","msgtype":"m.text"},"ts":1424068400000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: Are those wikis shared with other content?","msgtype":"m.text"},"ts":1424068437000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"tantek: And/or have a restricted userbase?","msgtype":"m.text"},"ts":1424068455000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"microformats.org has a fairly strong auto-antispam setup but we get 1-2 a week","msgtype":"m.text"},"ts":1424068497000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"anyone can register, limited editing etc.","msgtype":"m.text"},"ts":1424068509000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"indiewebamp, requires that you naturally log in with your own domain","msgtype":"m.text"},"ts":1424068519000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"which, surprisingly, eliminates all spam","msgtype":"m.text"},"ts":1424068528000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"so no explicit restriction per se","msgtype":"m.text"},"ts":1424068539000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"and yes - shared with much other content - all the background research and brainstorming that goes into the specs","msgtype":"m.text"},"ts":1424068564000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"tantek: But is there any non-spec-related content? What I'm getting at is, MozillaWiki is designed for a bunch of Mozilla-related things; it's not a spec-editing wiki.","msgtype":"m.text"},"ts":1424068833000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Like, the WHATWG wiki might be a different story","msgtype":"m.text"},"ts":1424068852000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley - sure - there are lists of implementations etc.","msgtype":"m.text"},"ts":1424068855000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I still consider that spec-related","msgtype":"m.text"},"ts":1424068869000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"microformats is fairly focused around the development of microformats (specs) and everything related - so you're likely right there","msgtype":"m.text"},"ts":1424068881000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"indiewebcamp is broader - it's a community site","msgtype":"m.text"},"ts":1424068889000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"events, how-tos, media lists etc.","msgtype":"m.text"},"ts":1424068902000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"what specs does indiewebcamp handle, anyway?","msgtype":"m.text"},"ts":1424068919000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"but even there, all of those feed into documenting problems people have with existing websites etc. which get turned into experiments, and often converge into specs","msgtype":"m.text"},"ts":1424068934000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"indiewebcamp has a few \"core\" specs: indieauth, webmention, micropub","msgtype":"m.text"},"ts":1424068994000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"these are broadly implemented building blocks","msgtype":"m.text"},"ts":1424069005000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"and then a few more in development with varying levels of implementation like vouch","msgtype":"m.text"},"ts":1424069040000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"and then a bunch of \"mini\" specs that build on a bunch of the microformats specs","msgtype":"m.text"},"ts":1424069062000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"though your question makes it clear I should turn the above ^^^ into a wiki page :)","msgtype":"m.text"},"ts":1424069104000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"feel free to join #indiewebcamp for more","msgtype":"m.text"},"ts":1424069112000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"GPHemsley: captured: https://indiewebcamp.com/specifications","msgtype":"m.text"},"ts":1424069887000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1424070062000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"Mozilla's wiki is used for some B2G specifications","msgtype":"m.text"},"ts":1424075954000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would love to have more data around \"DOM is slow\"","msgtype":"m.text"},"ts":1424079045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There are some BlinkOn talks that go into it, and judging from what React is doing it seems somewhat clear what they optimize for, but it would be nice to have more data","msgtype":"m.text"},"ts":1424079115000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://speakerdeck.com/vjeux/react-css-in-js is a great set of slides on problems with CSS","msgtype":"m.text"},"ts":1424088651000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So, can I use that talk as evidence next time I hear that web developers aren't asking for encapsulation?","msgtype":"m.text"},"ts":1424089192000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: seems like it","msgtype":"m.text"},"ts":1424089224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: though note that shadow DOM didn't really end up working for React either","msgtype":"m.text"},"ts":1424089244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: they eschew most of the DOM","msgtype":"m.text"},"ts":1424089256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well that might be true, but it's a slightly different issue to \"do developers benefit from a situation where they can get actual encapsulation from components\"","msgtype":"m.text"},"ts":1424089291000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"From that talk the answer is clearly \"yes\"","msgtype":"m.text"},"ts":1424089312000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Since FB have also had to hack it on top of CSS","msgtype":"m.text"},"ts":1424089330000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, it seems large projects very much need all that","msgtype":"m.text"},"ts":1424089332000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And I'm sure their \"DOM-like components\" have it too","msgtype":"m.text"},"ts":1424089350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Indeed","msgtype":"m.text"},"ts":1424089470000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I'm not really sure how React works, of if that's something we should be chasing for standardisation","msgtype":"m.text"},"ts":1424089495000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I do slightly worry that \"DOM is slow\" isn't going to get better if it has to embed the possibility of running script every time you parse an element","msgtype":"m.text"},"ts":1424089529000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=27310 has some debate about standardizing it, but I don't think as-is is going to work","msgtype":"m.text"},"ts":1424089646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"React seems to use DOM for rendering, but can also use <canvas> or some kind of native API","msgtype":"m.text"},"ts":1424089750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But the actual data is kept in some kind of JS structure they refer to as the \"virtual DOM\"","msgtype":"m.text"},"ts":1424089774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://speakerdeck.com/vjeux/oscon-react-architecture has a bunch of details too","msgtype":"m.text"},"ts":1424089797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't know the idea originated from PHP's string concatenation","msgtype":"m.text"},"ts":1424089850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Kind of an interesting way for technology to evolve","msgtype":"m.text"},"ts":1424089885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just read the talk , or at least the parts of if that website actually displayed","msgtype":"m.text"},"ts":1424090139000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I expect the history part is writing a good story rather than writing something accurate","msgtype":"m.text"},"ts":1424090164000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It seemed to have a hard time rendering the O notations","msgtype":"m.text"},"ts":1424090165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1424090179000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Bugzilla seems to be down","msgtype":"m.text"},"ts":1424090188000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well Facebook does use XHP so the history does add up","msgtype":"m.text"},"ts":1424090248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not saying that the slides are a lie, just that the clean evolution from one idea to the next won't be true","msgtype":"m.text"},"ts":1424090287000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Anyway, I have heard that Elm is a more extreme/theoretically pure example of the same kind of pattern, with all the immutability required http://elm-lang.org/","msgtype":"m.text"},"ts":1424090291000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I still don't know what there is here that you could take to make the overall web better","msgtype":"m.text"},"ts":1424090329000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah, I'm trying to figure that out, but it is far from clear","msgtype":"m.text"},"ts":1424090439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it would indeed be good to know before we start invoking more JavaScript during parsing, or add the shadow DOM (whether encapsulated or not)","msgtype":"m.text"},"ts":1424090531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's the normal way to deal with fallible algorithms in specs? i.e. something that can result either in some data or an error?","msgtype":"m.text"},"ts":1424092059000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"if it returned an error...\"","msgtype":"m.text"},"ts":1424092216000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't know that we really have a good approach yet","msgtype":"m.text"},"ts":1424092231000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I feel like what I'm writing is very rust-influenced. I'm not sure that's good","msgtype":"m.text"},"ts":1424092273000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(algorithsm that can return objects of type error or type (something))","msgtype":"m.text"},"ts":1424092304000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: throw?","msgtype":"m.text"},"ts":1424092881000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: but what Ms2ger suggests works too","msgtype":"m.text"},"ts":1424092894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham, I think Hixie does that too","msgtype":"m.text"},"ts":1424092925000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: fetch(req) already makes the body of the request 'used', what changes does https://github.com/slightlyoff/ServiceWorker/issues/625 change?","msgtype":"m.text"},"ts":1424093037000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if there's no body you can do fetch(req); fetch(req)","msgtype":"m.text"},"ts":1424093066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I want to disallow that","msgtype":"m.text"},"ts":1424093074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and instead make a stronger tie between req and its fetching process","msgtype":"m.text"},"ts":1424093095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Chrome fails on 2 fetches with the same request obj already, even with no body. Sooo… yey?","msgtype":"m.text"},"ts":1424093162000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: btw, i'm in London this week","msgtype":"m.text"},"ts":1424093225000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"terinjokes: I'm going to be on talk-writing lockdown all week :( well, if things go well I might be freer later in the week, but I'm already at the panic-poo stage","msgtype":"m.text"},"ts":1424093284000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: as usual, i have terrible timing.","msgtype":"m.text"},"ts":1424093430000,"senderName":"terinjokes","senderId":"terinjokes@irc"},
{"content":{"body":"nah, it's me, left things too late","msgtype":"m.text"},"ts":1424093448000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: chrome currently failing on second fetch of same request object is an impl detail, right?  not clear where that is in the spec","msgtype":"m.text"},"ts":1424093723000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"unless annevk changes it","msgtype":"m.text"},"ts":1424093735000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I always thought that fetch(req) consumed the request, but you're right, the spec doesn't do that","msgtype":"m.text"},"ts":1424094049000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sounds good I guess","msgtype":"m.text"},"ts":1424094437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah, \"consuming\" is the idea, though that still means that fetch(string) is inferior, but maybe that's fine for a convenience API","msgtype":"m.text"},"ts":1424094474000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and we can always decide to expose a registry-like thing later where fetch(string) can be controlled too)","msgtype":"m.text"},"ts":1424094500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: are there any caches in existence that handle this POST scenario?","msgtype":"m.text"},"ts":1424094525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm happy with that. Although I'm dubious about request.abort() (I assume that's what you're suggesting?)","msgtype":"m.text"},"ts":1424094527000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1424094536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and request.changePriority(...) and request.port.postMessage(...)","msgtype":"m.text"},"ts":1424094552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no... Cache spec explicitly forbids POST right now...","msgtype":"m.text"},"ts":1424094593000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: if you have a better idea to handle those use cases please mention them in the ticket","msgtype":"m.text"},"ts":1424094608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: for now I think I'll change the model of Request so that the object becomes immutable after passing it to fetch(), then we have more options as to how to handle things","msgtype":"m.text"},"ts":1424094666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: yeah, but outside SW, e.g. the browser cache","msgtype":"m.text"},"ts":1424094687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: it seems like a rather spurious use case","msgtype":"m.text"},"ts":1424094695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: and it would mean that each time you iterate over the cache keys you need to duplicate the body","msgtype":"m.text"},"ts":1424094719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I don't think that's expected","msgtype":"m.text"},"ts":1424094726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: maybe JakeA knows... his comment that I linked suggested it was expected in the future","msgtype":"m.text"},"ts":1424094729000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: thats exactly what we have to do and currently implement","msgtype":"m.text"},"ts":1424094747000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I guess most GET requests don't have a body so it's not too bad, but still...","msgtype":"m.text"},"ts":1424094813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we don't actually read the body off disk unless someone tries to access the body from script... we just open the fd","msgtype":"m.text"},"ts":1424094853000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so I don't think its too painful","msgtype":"m.text"},"ts":1424094866000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: do extendable promises let us do the changePriority and postMessage use cases?","msgtype":"m.text"},"ts":1424095069000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: wanderview: removing bodies from cached requests felt arbitrary at the time, but I think it's ok","msgtype":"m.text"},"ts":1424095196000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: nah, we'd still need mutation for that","msgtype":"m.text"},"ts":1424095205000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it just seems in a number of issues we've come to the conclusion \"devs expect to get an object back out that exactly matches what they put in\"... for example, not coercing the URL on the response to match the request","msgtype":"m.text"},"ts":1424095327000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: dropping bodies seems to change from that approach","msgtype":"m.text"},"ts":1424095340000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"might be biased since he spent so much time implementing Request bodies. :-)","msgtype":"m.emote"},"ts":1424095359000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"still... simplifying code is good if we can... so lets do it if it makes sense...","msgtype":"m.text"},"ts":1424095518000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: JakeA: what happens if you try to cache a request that has a method other than GET?","msgtype":"m.text"},"ts":1424096878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: HEAD works I believe","msgtype":"m.text"},"ts":1424096892000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: others reject... I think with a TypeError","msgtype":"m.text"},"ts":1424096904000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: both HEAD and GET require that there's no body","msgtype":"m.text"},"ts":1424096908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1424096924000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1424096926000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is probably an idiot.","msgtype":"m.emote"},"ts":1424096932000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I thought GET could have a body","msgtype":"m.text"},"ts":1424096968000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: the fetch spec disallows this?","msgtype":"m.text"},"ts":1424096984000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: see step 21 \"If request's method is `GET` or `HEAD`, throw a TypeError. \"","msgtype":"m.text"},"ts":1424096990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: where?","msgtype":"m.text"},"ts":1424097023000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: https://fetch.spec.whatwg.org/#dom-request","msgtype":"m.text"},"ts":1424097034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: fairly recent addition: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27846","msgtype":"m.text"},"ts":1424097054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah... I feel less bad then","msgtype":"m.text"},"ts":1424097064000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I feel bad that you implemented support for bodies :-(","msgtype":"m.text"},"ts":1424097074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: JakeA: so perhaps for now this is not a problem","msgtype":"m.text"},"ts":1424097104000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it was mostly boilerplate... but I'd want to be quite certain we will never support bodies on requests before I remove it","msgtype":"m.text"},"ts":1424097106000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: that also means JakeA can remove all the request.clone() methods from here and other docs: http://jakearchibald.com/2014/offline-cookbook/","msgtype":"m.text"},"ts":1424097166000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"well, once we actually implement that check","msgtype":"m.text"},"ts":1424097183000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: oh... nsm already fixed it for us... I wonder if blink is aware of that spec change","msgtype":"m.text"},"ts":1424097431000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry, got caught up in something. *reads back*","msgtype":"m.text"},"ts":1424097496000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"giggles at the idea of the cache \"dropping bodies\". It's a real badass.","msgtype":"m.emote"},"ts":1424097541000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"https://www.youtube.com/watch?v=grbSQ6O6kbs","msgtype":"m.text"},"ts":1424097610000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ah, sorry, the reason POST is blocked from the cache was to avoid the body storage stuff. But yeah, we should be able to drop those .clones","msgtype":"m.text"},"ts":1424097816000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(once implementations update, if they need to)","msgtype":"m.text"},"ts":1424097830000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"well, until that recent change in fetch spec, GET Request could synthetically be created with a body","msgtype":"m.text"},"ts":1424097875000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess Chrome didn't really read the spec...","msgtype":"m.text"},"ts":1424097986000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what do you mean?","msgtype":"m.text"},"ts":1424098008000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: from JakeA's comment it sounds like they assumed an invariant around GET/HEAD that wasn't actually there","msgtype":"m.text"},"ts":1424098029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh... not reusable Request objects","msgtype":"m.text"},"ts":1424098031000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1424098039000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"\"the reason POST is blocked from the cache was to avoid the body storage stuff\" means GET/HEAD having a body wasn't considered","msgtype":"m.text"},"ts":1424098080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1424098102000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"goes for more coffee...","msgtype":"m.emote"},"ts":1424098111000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: I thought you said it couldn't have a body?","msgtype":"m.text"},"ts":1424098141000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: since January 17","msgtype":"m.text"},"ts":1424098164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"best date ever","msgtype":"m.text"},"ts":1424098173000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess we should reopen https://github.com/slightlyoff/ServiceWorker/issues/550 then","msgtype":"m.text"},"ts":1424098224000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(not JakeA's b-day in case you were wondering)","msgtype":"m.text"},"ts":1424098226000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: yeah, GET/HEAD Request objects can be easily reused","msgtype":"m.text"},"ts":1424098270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and if that's all the cache needs...","msgtype":"m.text"},"ts":1424098277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so, in summary, fetch() will always \"use up\" requests, cache.put(req, res) will use up the response but not the request","msgtype":"m.text"},"ts":1424098521000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Is that correct?","msgtype":"m.text"},"ts":1424098526000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: given the above invariants, yes","msgtype":"m.text"},"ts":1424098555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: though I wouldn't call it \"use up\" for fetch(); it marks it immutable, but it's still usable for post-fetch purposes, such as abort or messaging with the service worker event responsible for handling it","msgtype":"m.text"},"ts":1424098605000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and .clone() remains a way to use a request twice, as long as it's called before the request is used up","msgtype":"m.text"},"ts":1424098610000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1424098630000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":".clone() is a way to reuse a request/response that has a body","msgtype":"m.text"},"ts":1424098631000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: var r = new Request('/'); var r2 = r.clone(); fetch(r); fetch(r2); // does this work?","msgtype":"m.text"},"ts":1424098692000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, should","msgtype":"m.text"},"ts":1424098710000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"r and r2 will share nothing","msgtype":"m.text"},"ts":1424098725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, so cloning is also useful for requests without bodies","msgtype":"m.text"},"ts":1424098732000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1424098737000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what are you proposing should happen in this case? cache.put(req, response); req.abort();","msgtype":"m.text"},"ts":1424098923000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I bet devs will expect it to abort the put()","msgtype":"m.text"},"ts":1424098945000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"does this mean every API taking a Request must now be abortable?","msgtype":"m.text"},"ts":1424098987000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Should new Request(\"/\", {body: 'BAM'}) throw?","msgtype":"m.text"},"ts":1424098994000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah that would throw","msgtype":"m.text"},"ts":1424099013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we could make method defaulting conditional (GET when no body is passed, POST when a body is passed) I suppose","msgtype":"m.text"},"ts":1424099053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, sorry, that is in the spec already. Do I need cache.put to throw if the request has a body? Is there any way that can happen?","msgtype":"m.text"},"ts":1424099107000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: nah, I think explicit method is fine here","msgtype":"m.text"},"ts":1424099119000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: not sure, probably not, could be a reason to consider RequestKey...","msgtype":"m.text"},"ts":1424099123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wanderview: Or abortable promises :D","msgtype":"m.text"},"ts":1424099141000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: request can't have a body if method is either GET/HEAD","msgtype":"m.text"},"ts":1424099152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: abortable promises don't gel with declarative promises","msgtype":"m.text"},"ts":1424099173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: well... same confusion with the other methods... Cache.put(req, res); req.changePriority();  // wtf does this do?","msgtype":"m.text"},"ts":1424099181000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wonders how many years it will take before he fully understands all the terminology used in this channel.","msgtype":"m.emote"},"ts":1424099225000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: we'd probably make it throw or a no-op if Request isn't in the right state","msgtype":"m.text"},"ts":1424099227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I guess .put should mark the request as immutab… oh shit we're back here","msgtype":"m.text"},"ts":1424099248000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: terminology changes too often :-(","msgtype":"m.text"},"ts":1424099250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea... I don't like putting this stuff on Request... it goes from being a simple struct with a stream to being this stateful handle thing... which I think makes it a lot harder to understand","msgtype":"m.text"},"ts":1424099314000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"why do I have to clone() the Request? because there are these methods on it that I don't use but might want to so I can't reuse the Request in another fetch?","msgtype":"m.text"},"ts":1424099352000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess I'd be interested to hear what web devs think","msgtype":"m.text"},"ts":1424099378000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: you could fetch(req.url, req) to cheat :p","msgtype":"m.text"},"ts":1424099379000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: I've seen people expect to be able to add/modify headers as the request passes through the fetch event","msgtype":"m.text"},"ts":1424099460000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that's very different","msgtype":"m.text"},"ts":1424099484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you mean and then do respondWith(null)?","msgtype":"m.text"},"ts":1424099493000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or default or whatever it is","msgtype":"m.text"},"ts":1424099505000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: well, not call respondWith at all","msgtype":"m.text"},"ts":1424099505000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I dunno if we want that to work, but I've seen it","msgtype":"m.text"},"ts":1424099522000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think we might, but it's a very different use case from changePriority() as I pointed out in the issue","msgtype":"m.text"},"ts":1424099539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I think thats just an argument for https://github.com/slightlyoff/ServiceWorker/issues/607","msgtype":"m.text"},"ts":1424099564000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry... wrong issue","msgtype":"m.text"},"ts":1424099585000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I meant removing event.default()","msgtype":"m.text"},"ts":1424099590000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh... that is the right issue","msgtype":"m.text"},"ts":1424099622000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I still think we really want fetch() to return something more than a promise, something that represents an active request","msgtype":"m.text"},"ts":1424099658000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But I sort-of get why we can't have that","msgtype":"m.text"},"ts":1424099669000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... I agree","msgtype":"m.text"},"ts":1424099672000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"request.something() could start the request and return a richer object, with the promise hanging of .ready or something","msgtype":"m.text"},"ts":1424099750000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"My proposal is that we make Request immutable for now when passed to fetch(). This roughly matches Chrome.","msgtype":"m.text"},"ts":1424099753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That buys us some breathing room to consider how to handle abort() et al for a month or so.","msgtype":"m.text"},"ts":1424099775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or longer if we think something might change...","msgtype":"m.text"},"ts":1424099792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: request.something() instead of a fetch()?  why not just controlledFetch() or one of the options I posted in the issue?","msgtype":"m.text"},"ts":1424099825000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: That works for me. I guess cache.put should do the same","msgtype":"m.text"},"ts":1424099885000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: that works too. Ughghghghg but it's all worse than var activeRequest = fetch(req); activeRequest.abort();","msgtype":"m.text"},"ts":1424099926000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1424099939000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: JakeA: I'm proposing immutable for now since it seems likely that any alternative will take us a bit longer to settle on","msgtype":"m.text"},"ts":1424099998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1424100011000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1424100038000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Do you know the status of promise-extending? I guess the problem is fetch(req).then(r => r.json()), how the new promise retains the link to the in-flight request. Am I right?","msgtype":"m.text"},"ts":1424100197000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"AFAIK it just does currentPromise.contructor.resolve(newPromise), so you'd keep the prototype methods, but lose state like the request","msgtype":"m.text"},"ts":1424100288000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the main problem is async/await I think","msgtype":"m.text"},"ts":1424100807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just doesn't make much sense with those around","msgtype":"m.text"},"ts":1424100815000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"My solution for Request and fetch() isn't great...","msgtype":"m.text"},"ts":1424100858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g. what happens with fetch(req, someOverrides)?","msgtype":"m.text"},"ts":1424100878000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does req get modified?","msgtype":"m.text"},"ts":1424100911000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: wanderview: created https://gist.github.com/annevk/56e97115f2c9c2e90c23","msgtype":"m.text"},"ts":1424102570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: wanderview: has an overview of what we discussed","msgtype":"m.text"},"ts":1424102578000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that captures it. I'm keen to know more about the promise issues, I can't see how it causes issues with async/await. Guess Domenic knows?","msgtype":"m.text"},"ts":1424103401000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well async/await abstracts out the promise","msgtype":"m.text"},"ts":1424103433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if you then start hanging things of it, you still need the object which is kind annoying","msgtype":"m.text"},"ts":1424103453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It abstracts the completion of the promise. If you want concurrency you still end up with the promise objects, either var p1 = thing(); var p2 = otherThing(); await p1; await p2; or await Promise.all([thing(), otherThing()])","msgtype":"m.text"},"ts":1424103526000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: instead of await fetch() you get var r = fetch(); await r;","msgtype":"m.text"},"ts":1424103531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fetch is one of the things that really benefits from concurrency","msgtype":"m.text"},"ts":1424103567000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"true true","msgtype":"m.text"},"ts":1424103588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"would be interesting to hear what Domenic thinks","msgtype":"m.text"},"ts":1424103596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"perhaps a subclass of a promise is less bad than I thought it would be","msgtype":"m.text"},"ts":1424103625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think we might still want to make a few tweaks to how fetch(req) works though","msgtype":"m.text"},"ts":1424103659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. if you get a modified Request it would be kind of nice to be able to inspect that, perhaps it should still be reusable, but at least the object should represent its \"clipped\" state","msgtype":"m.text"},"ts":1424103703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the problem is with var p = fetch(req).then(doSomeOtherStuff)","msgtype":"m.text"},"ts":1424103795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"As in, how p retains the .abort() method","msgtype":"m.text"},"ts":1424103814000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Retains?","msgtype":"m.text"},"ts":1424103829000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I believe new promises are created using the constructor or the original promise","msgtype":"m.text"},"ts":1424103875000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(I could be outdated or plain wrong)","msgtype":"m.text"},"ts":1424103888000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You mean of?","msgtype":"m.text"},"ts":1424103891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah sorry","msgtype":"m.text"},"ts":1424103898000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"How would that create a subclass?","msgtype":"m.text"},"ts":1424103906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fetch(req).then(doSomeOtherStuff) would have .abort, but Promise.resolve(fetch(req)) would not","msgtype":"m.text"},"ts":1424103925000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: annevk: chrome still has fetch() behind an experimental flag, right?  do we have to maintain backward compat here or can we break compat to get a better API for the long term?","msgtype":"m.text"},"ts":1424103931000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"What's the point of a pref if you can't break stuff?","msgtype":"m.text"},"ts":1424103955000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: reading http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-constructor it seems like a subclass is fine","msgtype":"m.text"},"ts":1424103973000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: oh you mean forwarding","msgtype":"m.text"},"ts":1424103991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: SpeciesConstructor in http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.prototype.then makes me think that then() forwards","msgtype":"m.text"},"ts":1424104070000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"personally I think we should just consider changing it to fetch().reponse().then(function (response) { } );... I guess unless promise extension works out","msgtype":"m.text"},"ts":1424104092000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: resolve does not...","msgtype":"m.text"},"ts":1424104093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but you could do FetchPromise.resolve() presumably...","msgtype":"m.text"},"ts":1424104111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: boilerplate :-(","msgtype":"m.text"},"ts":1424104171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I hadn't seen the @@species stuff. But yeah, think it works the same way. So I guess each fetch promise would have to define an instance @@species to retain its link to the original request?","msgtype":"m.text"},"ts":1424104189000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: better than magic, implicit state on Request IMO","msgtype":"m.text"},"ts":1424104198000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: something like that","msgtype":"m.text"},"ts":1424104232000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and the difference between fetch().then() and fetch().response().then() is 12 characters","msgtype":"m.text"},"ts":1424104262000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm warming up to the subclass idea","msgtype":"m.text"},"ts":1424104268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1424104275000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think fetch().ready.then(res) {} would be slightly better if we wanted to go down that route","msgtype":"m.text"},"ts":1424104297000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1424104315000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: and perhaps move the text() methods and such on that control object too","msgtype":"m.text"},"ts":1424104336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: uh... no?  Cache.match() returns Response objects that need text()","msgtype":"m.text"},"ts":1424104362000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ah yes","msgtype":"m.text"},"ts":1424104383000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: added fetch().ready.then() to your gist","msgtype":"m.text"},"ts":1424104853000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ta","msgtype":"m.text"},"ts":1424105187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://twitter.com/thebabydino/status/567226220249886721 is pretty cool","msgtype":"m.text"},"ts":1424105532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wish the CSS WG would standardize the psuedo-elements already","msgtype":"m.text"},"ts":1424105542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the use of /deep/ and background-size for the selected-so-far bit of the track is really smart","msgtype":"m.text"},"ts":1424105635000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That use of /deep/ should not actually work","msgtype":"m.text"},"ts":1424105669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I gave up styling range for https://jakearchibald.github.io/svgomg/. I just used a load of divs & clickjacked a real range","msgtype":"m.text"},"ts":1424105672000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hah ok. I don't know that much about shadow dom","msgtype":"m.text"},"ts":1424105692000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is there anything in the SW spec that prevents multiple fetch events from being triggered for the same URL at the same time?  I mean... second event while still waiting for first event to resolve its respondWith() promise","msgtype":"m.text"},"ts":1424107825000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: why would we prevent that?","msgtype":"m.text"},"ts":1424108199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: is this about e.g. the image cache?","msgtype":"m.text"},"ts":1424108271000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: as far as I know, browsers don't have a good answer for this with the http cache either","msgtype":"m.text"},"ts":1424108921000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: JakeA: I don't think we should do it... was just wondering as I'm trying to track down an issue in the gecko implementation (https://bugzilla.mozilla.org/show_bug.cgi?id=1130803)","msgtype":"m.text"},"ts":1424109150000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it's still a bit unclear to me what the problem is","msgtype":"m.text"},"ts":1424109172000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: if the problem is combining fetches, we should only do that in the network layer","msgtype":"m.text"},"ts":1424109190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: same here :-)  I was just theorizing","msgtype":"m.text"},"ts":1424109194000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I guess I'll try to clarify that part of Fetch tomorrow by creating a section dedicated to the network part","msgtype":"m.text"},"ts":1424109222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is it just me, or is this JakeA's twin (based purely on twitter avatar)? https://twitter.com/m_gol vs https://twitter.com/jaffathecake","msgtype":"m.text"},"ts":1424111656000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"keeps getting them confused in his twitter feed.","msgtype":"m.emote"},"ts":1424111697000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: haha there is *some* similarity I think","msgtype":"m.text"},"ts":1424111732000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it could just be all Europeans look alike to dumb Americans","msgtype":"m.text"},"ts":1424111765000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1424111785000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is slowly going insane from tracing the gecko network stack.","msgtype":"m.emote"},"ts":1424111860000,"senderName":"wanderview","senderId":"wanderview@irc"}
]