[
{"content":{"body":"TabAtkins: what is <css>","msgtype":"m.text"},"ts":1437092192000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: A shorthand for <span class=\"css\">, for when we want to mark up something to look like a keyword but not actually link to anything (because there's no such definition, or too many, or what have you).","msgtype":"m.text"},"ts":1437092458000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: JakeA: if a controlled document is in the bfcache, do we need to fire fetch events for it when the user hits the back button to return to the page? or basically not because network is not normally done there","msgtype":"m.text"},"ts":1437094061000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"just a random thought I had this evening (I need a hobby)","msgtype":"m.text"},"ts":1437094082000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: well, I'd expect it to find the first element in the DocumentFragment","msgtype":"m.text"},"ts":1437094703000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"TabAtkins: not the fragment itself","msgtype":"m.text"},"ts":1437094707000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: Those aren't document roots. But I defined a :top-level pseudo to do what you're thinking","msgtype":"m.text"},"ts":1437094831000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the only reason I need :root or :top-level or whatever is that I'm trying to do piercing from a root to find everything with a certain attribute name (across shadow DOMs)","msgtype":"m.text"},"ts":1437095015000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"currently that entails .querySelector(':root /deep/ [attr]')","msgtype":"m.text"},"ts":1437095033000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"i'd prefer just... /deep/ [attr]","msgtype":"m.text"},"ts":1437095047000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"but that throws","msgtype":"m.text"},"ts":1437095050000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"is there a better way to accomplish a query through all shadow roots?","msgtype":"m.text"},"ts":1437095081000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"that includes top-level elements?","msgtype":"m.text"},"ts":1437095091000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"fwiw: [attr], ::shadow [attr] might work","msgtype":"m.text"},"ts":1437095518000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"annevk: the test deployment of the TLS-enabled www.w3.org site is already helping to catch some bugs in the gecko CSP upgrade-insecure-requests implementation https://bugzilla.mozilla.org/show_bug.cgi?id=1183563#c7","msgtype":"m.text"},"ts":1437110880000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith++","msgtype":"m.text"},"ts":1437111518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: oh my god, our redirect code is sooo bad","msgtype":"m.text"},"ts":1437111548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: bfcache is not specified to that level of detail (and e.g. Chrome doesn't implement it)","msgtype":"m.text"},"ts":1437111608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"danbeam: /deep/ is dead","msgtype":"m.text"},"ts":1437111655000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: /deep/ and ::shadow are still allowed for querySelector.","msgtype":"m.text"},"ts":1437111786000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"ah true","msgtype":"m.text"},"ts":1437111800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, I'm not sure if everyone agreed to that, but yeah","msgtype":"m.text"},"ts":1437111821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I easily forget which one is static profile and which is dynamic profile","msgtype":"m.text"},"ts":1437111823000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"Hmm, http://dev.w3.org/csswg/selectors/ , selectors you can write in CSS stylesheets are 'dynamic' profile, while what you can write for querySelector() is 'static' profile.","msgtype":"m.text"},"ts":1437111966000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"So /deep/ and ::shadow are likely to remain in 'static' profile.","msgtype":"m.text"},"ts":1437111983000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"They should've just called \"dynamic\" \"live\", which is what the rest of the world calls it","msgtype":"m.text"},"ts":1437112006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps it didn't go to Last Call yet...","msgtype":"m.text"},"ts":1437112013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe I'm the only one, but I feel calling selectors in CSS stylesheet file 'dynamic' quite weird, because such CSS stylesheet file is quite static :)","msgtype":"m.text"},"ts":1437112112000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"They are just matched against dynamic things (DOM).","msgtype":"m.text"},"ts":1437112144000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"annevk: yeah I guess that gecko bug exposes an underlying problem that's not specific just to upgrade-insecure-requests","msgtype":"m.text"},"ts":1437112280000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kochi: well, they're continuously matched, whereas querySelector() is matched once","msgtype":"m.text"},"ts":1437112317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: yeah, flawed architecture","msgtype":"m.text"},"ts":1437112326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: seems Tanvi is aware of it though so maybe it'll get fixed some day","msgtype":"m.text"},"ts":1437112366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool, they should give me a bonus in my bug-reporting royalty check for that","msgtype":"m.text"},"ts":1437112382000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: that exlanation is very understandable","msgtype":"m.text"},"ts":1437112555000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"annevk: Mind switching Compat over to gh-pages? http://www.xanthir.com/b4Zz0 for an easy guide.","msgtype":"m.text"},"ts":1437112940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wanderview: annevk: if the bfcache impl is effectively keeping the page in memory, I wouldn't expect it to fire a fetch event on back/forward","msgtype":"m.text"},"ts":1437112947000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That way we can look at the spec from github too.","msgtype":"m.text"},"ts":1437112949000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it should sync automatically to https://compat.spec.whatwg.org/","msgtype":"m.text"},"ts":1437112963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"automatically*","msgtype":"m.text"},"ts":1437112968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"danbeam: You want \"[attr], * /deep/ [attr]\".","msgtype":"m.text"},"ts":1437112983000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: Okay, then please link that from the readme. ^_^","msgtype":"m.text"},"ts":1437112992000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you can't look at the link at the top of the repo? :p","msgtype":"m.text"},"ts":1437113076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Who looks there?","msgtype":"m.text"},"ts":1437113106000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I hope you're happy","msgtype":"m.text"},"ts":1437113150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thank you :-*","msgtype":"m.text"},"ts":1437113319000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: at some point we need to work this through too: https://github.com/w3c/resource-timing/issues/27#issuecomment-122189039","msgtype":"m.text"},"ts":1437114262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: but I guess HTML first...","msgtype":"m.text"},"ts":1437114270000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CSS and SVG have some tricky corner cases when it comes to Fetch, though I think most of the infrastructure is in place","msgtype":"m.text"},"ts":1437114295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: (if you're still awake & around) I've been asked to do a 30-minute presentation about CSS for a webdev/designer audience, on any specific topic I'd like. At a CSS conference where all ~6-8 or so other speakers are actual web devs/designers who unlike me actually do a lot of day-to-day work using CSS. So if I have to do it I'd like to talk something no other speakers are likely to be covering a","msgtype":"m.text"},"ts":1437117239000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nd that will be new to the audience.","msgtype":"m.text"},"ts":1437117245000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: so, given all that, any suggestions?","msgtype":"m.text"},"ts":1437117260000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"The Dark Side of CSS\"","msgtype":"m.text"},"ts":1437117281000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"one thing more near and dear for me is that I think we need to make a new CSS Checker (aka validator) to replace the current Java-based bailing-wire-and-duct-tape one","msgtype":"m.text"},"ts":1437117481000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and write it in Javascript, using your parser/tokenizer as a start, to run under node.js","msgtype":"m.text"},"ts":1437117525000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so maybe I could use the opportunity to see if I can get anybody else interested in collaborating on that","msgtype":"m.text"},"ts":1437117562000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ew, js","msgtype":"m.text"},"ts":1437117659000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"There's a good Rust CSS parser ;)","msgtype":"m.text"},"ts":1437117672000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh hey","msgtype":"m.text"},"ts":1437118174000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that would be more fun actually","msgtype":"m.text"},"ts":1437118185000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: did SimonSapin write that?","msgtype":"m.text"},"ts":1437118269000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yup","msgtype":"m.text"},"ts":1437118279000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1437118292000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"perusing https://github.com/servo/rust-cssparser/commits/master","msgtype":"m.text"},"ts":1437118298000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this would be a great way for me to learn rust and make something actually useful when doing it","msgtype":"m.text"},"ts":1437118385000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: feel free to file issues or ping me about this","msgtype":"m.text"},"ts":1437118397000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: will do","msgtype":"m.text"},"ts":1437118434000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(btw y'all really want to have a TR link in the description of that repo? \"Rust implementation of CSS Syntax Level 3 http://www.w3.org/TR/css-syntax-3/\"","msgtype":"m.text"},"ts":1437118483000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1437118517000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"http://drafts.csswg.org/css-syntax/ I guess","msgtype":"m.text"},"ts":1437118550000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin and TabAtkins btw please consider to stop using http://dev.w3.org/ URLs in CSS drafts","msgtype":"m.text"},"ts":1437118599000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and just use http://drafts.csswg.org/ URLs instead","msgtype":"m.text"},"ts":1437118619000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I was gonna say I wish we could pick one. Could it be a redirect?","msgtype":"m.text"},"ts":1437118622000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: redirect? why not just use http://drafts.csswg.org/css-syntax/ ?","msgtype":"m.text"},"ts":1437118654000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I mean, could http://dev.w3.org/csswg/ redirect to https://drafts.csswg.org/ rather than proxy?","msgtype":"m.text"},"ts":1437118691000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"all http://dev.w3.org/csswg URLs are rewrites; reverse-proxying or whatever Apache calls it","msgtype":"m.text"},"ts":1437118695000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"make it HTTP 301’s","msgtype":"m.text"},"ts":1437118712000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: it could yeah","msgtype":"m.text"},"ts":1437118723000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I should make it do that","msgtype":"m.text"},"ts":1437118731000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that will make people use the new URL","msgtype":"m.text"},"ts":1437118743000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1437118753000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I tend to navigate to whatever is in my browser history, and copy/paste whatever is in the URL bar","msgtype":"m.text"},"ts":1437118758000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1437118770000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I will tell plinss I'm going to change it to a 301","msgtype":"m.text"},"ts":1437118785000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"make it HTTPS, while you’re at it :)","msgtype":"m.text"},"ts":1437118802000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"at this point it's just an additional point of possible failure that adds nothing except having w3.org in the URL","msgtype":"m.text"},"ts":1437118816000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think that dev.w3.org server isn't on the list of servers that the W3C systems team is working on moving to https","msgtype":"m.text"},"ts":1437118888000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean redirect to https://","msgtype":"m.text"},"ts":1437118905000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1437118938000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1437118939000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: so the servo rust parser fully conforms to the current CSS syntax spec?","msgtype":"m.text"},"ts":1437118999000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it might not be completely up to date","msgtype":"m.text"},"ts":1437119036000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Variables?","msgtype":"m.text"},"ts":1437119058000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: you mean it doesn't support CSS Variables yet?","msgtype":"m.text"},"ts":1437119097000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't know","msgtype":"m.text"},"ts":1437119118000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tries to remember if/where CSS Variables have been implemented","msgtype":"m.emote"},"ts":1437119126000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is there any parser work required for them?","msgtype":"m.text"},"ts":1437119137000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good question","msgtype":"m.text"},"ts":1437119160000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks around for a CSS-parser implementor to ask","msgtype":"m.emote"},"ts":1437119178000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"y'all know of any other rust-based tools anybody's made for providing the server-side backend of Web app?","msgtype":"m.text"},"ts":1437119269000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or some kind of existing rust-based http server","msgtype":"m.text"},"ts":1437119335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: rust-cssparser is property agnostic, you need to write parsing code for every property you want to support. It implements the Syntax spec and nothing else.","msgtype":"m.text"},"ts":1437119341000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"hyper/iron","msgtype":"m.text"},"ts":1437119357000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"finds https://github.com/chris-morgan/rust-http","msgtype":"m.emote"},"ts":1437119358000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rust-http is abandoned","msgtype":"m.text"},"ts":1437119365000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1437119370000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: try https://github.com/iron/iron","msgtype":"m.text"},"ts":1437119374000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1437119379000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: ok (about \"property agnostic, you need to write parsing code for every property you want to support\"","msgtype":"m.text"},"ts":1437119411000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is \"CSS Custom Properties\" a new name for \"CSS Variables\"?","msgtype":"m.text"},"ts":1437120439000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"kochi: /me doesn't know","msgtype":"m.text"},"ts":1437121116000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: can rust-cssparser in its current form be feasibly made error-reporting?","msgtype":"m.text"},"ts":1437121205000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kochi: yes","msgtype":"m.text"},"ts":1437121222000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: thx, I thought it was once abondoned ;)","msgtype":"m.text"},"ts":1437121259000,"senderName":"kochi","senderId":"kochi@irc"},
{"content":{"body":"SimonSapin: you saw my question earlier?","msgtype":"m.text"},"ts":1437123341000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"about error reporting?","msgtype":"m.text"},"ts":1437123351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith++ for redirecting dev.w3.org","msgtype":"m.text"},"ts":1437125146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"miketaylr: https://twitter.com/compatstandard should perhaps link to the spec?","msgtype":"m.text"},"ts":1437126875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"miketaylr: although I guess there isn't much of a spec yet","msgtype":"m.text"},"ts":1437126883000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if dglazkov ended up with the current Custom elements design because running ctors sync was just too hard","msgtype":"m.emote"},"ts":1437128884000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: part of the problem was that constructors were not a thing","msgtype":"m.text"},"ts":1437128915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: but yes, I think the \"invoke callbacks a little later\" stems from the invariants breaking trouble","msgtype":"m.text"},"ts":1437128947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: you around?","msgtype":"m.text"},"ts":1437130093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yep!","msgtype":"m.text"},"ts":1437130101000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in step 2.2 of https://fetch.spec.whatwg.org/#http-fetch why do we disallow a CORS response to a client request?","msgtype":"m.text"},"ts":1437130120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wanderview asked me this recently & I couldn't remember. It may have been a precaution, but I don't see what it prevents as you could just make a manual response with the same content","msgtype":"m.text"},"ts":1437130255000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I want to change that line to 'if request is a navigation request and response is \"opaque\"'","msgtype":"m.text"},"ts":1437130330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: although I think that might be covered already by 'request's mode is not \"no-cors\" and response's type is \"opaque\".' I'm not entirely sure, since HTML hasn't been updated yet","msgtype":"m.text"},"ts":1437130358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I think a navigation request, by definition, is always with mode \"same-origin\")","msgtype":"m.text"},"ts":1437130387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed. I don't think we'd need to single out 'navigation', even if we did we'd want to ensure other client requests don't get opaque content","msgtype":"m.text"},"ts":1437130471000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well I know for a fact that workers are always \"same-origin\"","msgtype":"m.text"},"ts":1437130568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and client is navigation + workers","msgtype":"m.text"},"ts":1437130577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: could it be an \"assert\" in the spec? (until HTML specifies same-origin for navigations)","msgtype":"m.text"},"ts":1437130643000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I could make it a note for now, I don't really have formal asserts anywhere","msgtype":"m.text"},"ts":1437130725000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"A note would be good enough","msgtype":"m.text"},"ts":1437130749000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ta","msgtype":"m.text"},"ts":1437131065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: wanderview: https://github.com/whatwg/fetch/commit/1612905aae06fdb912779b308d71bfc13422833f","msgtype":"m.text"},"ts":1437131428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: lgtm","msgtype":"m.text"},"ts":1437131512000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how is cancelation going?","msgtype":"m.text"},"ts":1437131579000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: the only new tricky thing I can think of there is being able to cancel \"no-cors\" stuff and thereby perhaps being able to extract data somehow","msgtype":"m.text"},"ts":1437131636000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Haven't looked at it for a couple of weeks (holiday, then this week), but I was approaching a prototype. Going to stab at it on the flight","msgtype":"m.text"},"ts":1437131669000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"The plan is to make Promise cancelable, but only by the creator","msgtype":"m.text"},"ts":1437131683000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and have CancelablePromise which is cancelable by outsiders","msgtype":"m.text"},"ts":1437131693000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And you're refcounting?","msgtype":"m.text"},"ts":1437131699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CancelablePromise would have the refcounting","msgtype":"m.text"},"ts":1437131714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"What would fetch() use?","msgtype":"m.text"},"ts":1437131734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the tough bit, which is still todo, is how to handle promises resolved with promises","msgtype":"m.text"},"ts":1437131736000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetch() would use CancelablePromise","msgtype":"m.text"},"ts":1437131742000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(or you could opt into it)","msgtype":"m.text"},"ts":1437131752000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetch(url, {cancelable: true}) perhaps - although I'd rather it was default","msgtype":"m.text"},"ts":1437131773000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I see, perhaps the solution for \"no-cors\" is simply that you can't cancel it","msgtype":"m.text"},"ts":1437131779000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That would certainly be the least leaky","msgtype":"m.text"},"ts":1437131814000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although even for CORS that'd mean you could only cancel it once you have seen the headers and followed the redirects...","msgtype":"m.text"},"ts":1437131884000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was talking to David Benjamin & Ryan Sleevi about it briefly yesterday, they weren't too bothered about it.","msgtype":"m.text"},"ts":1437131885000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hmm okay","msgtype":"m.text"},"ts":1437131905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not the final say, but we couldn't think of something that'd leak with a partial body","msgtype":"m.text"},"ts":1437131956000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm mostly worried about stuff like `p { content: \"Secrets!\" } p { content: \"no secrets\" }`","msgtype":"m.text"},"ts":1437132028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and similar things in script","msgtype":"m.text"},"ts":1437132032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Script is running in the context of the page, so you're only shooting yourself in the foot","msgtype":"m.text"},"ts":1437132060000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, seems hard to extract data from a script, though we do make exceptions opaque and don't expose comments and such","msgtype":"m.text"},"ts":1437132127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Attackers are pretty clever and manage to exploit all kinds of things nobody thought of","msgtype":"m.text"},"ts":1437132167000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't know about the exception thing. Are you saying if a no-cors script throws, window.onerror doesn't get a full picture of it?","msgtype":"m.text"},"ts":1437132190000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1437132196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TIL","msgtype":"m.text"},"ts":1437132203000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"<script> does not check MIME types, so you'd be able to load all kinds of resources and extract data from the exception that way","msgtype":"m.text"},"ts":1437132237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"True, certainly for parse errors","msgtype":"m.text"},"ts":1437132271000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if you have time: https://github.com/whatwg/fetch/issues/67","msgtype":"m.text"},"ts":1437132278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: at the moment rust-cssparser ignore what the Syntax spec calls \"parse errors\". But with some work that could be added","msgtype":"m.text"},"ts":1437133644000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: ok","msgtype":"m.text"},"ts":1437134304000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SimonSapin: I see the code for BadURL etc, and it wouldn't be much work to add some error-reporting for those which could optionally be switched on by consuming apps that want error reporting","msgtype":"m.text"},"ts":1437134425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Yes, each of Bad*, and after the parser Close* tokens is a parse error, but they don’t represent all parse errors","msgtype":"m.text"},"ts":1437134537000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I have to double check if the spec ever emits more than one parse error per token. If not, the tokenizer could yield something like (Token, Option<ParseError>) rather than just Token","msgtype":"m.text"},"ts":1437134611000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: OK","msgtype":"m.text"},"ts":1437134867000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: square brackets in URL query part or path must be percent-encoded, right?","msgtype":"m.text"},"ts":1437134952000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins, hey, could you have a look at https://github.com/Reviewable/Reviewable/issues/127 ?","msgtype":"m.text"},"ts":1437136079000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmith: something around that changed recently","msgtype":"m.text"},"ts":1437137147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: I think they must be encoded, but are not by the parser if they aren't","msgtype":"m.text"},"ts":1437137213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1437137263000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Variables are impl'd in Firefox and about to be turned on in Chrome.  An earlier (and prefixed >_<) syntax of them is in WebKit.","msgtype":"m.text"},"ts":1437140847000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: spam https://www.w3.org/Bugs/Public/show_bug.cgi?id=27162#c2","msgtype":"m.text"},"ts":1437140861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger or MikeSmith: A Syntax-supporting browser doesn't need to do anything special to support Custom Properties.  The actual style system implementation generally does, because it's not used to storing raw tokens or pasting them into other properties at computed-value-time, but at the parsing level they're nothing special.","msgtype":"m.text"},"ts":1437141023000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: cool, will add the link","msgtype":"m.text"},"ts":1437141633000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"(and fix the commit thing today hopefully)","msgtype":"m.text"},"ts":1437141649000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"TabAtkins: ok, thanks","msgtype":"m.text"},"ts":1437141706000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh wait, it looks like it already tweeted.","msgtype":"m.text"},"ts":1437141744000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"\"Google is not affiliated with the contents of Chromium Code Reviews or its owners.\"","msgtype":"m.text"},"ts":1437141929000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: somebody else already disabled that bug-spammer's account","msgtype":"m.text"},"ts":1437141940000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: Correct, we're not, Chromium is an open-source project that happens to be mostly worked on by Googlers.","msgtype":"m.text"},"ts":1437142036000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"everybody wants to be like, \"Hey *I'm* not the one who made this code-review tool with a really bad UI and user experience.\"","msgtype":"m.text"},"ts":1437142323000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It really is the worst.","msgtype":"m.text"},"ts":1437142357000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah I feel genuinely sorry for people who have to use it every day","msgtype":"m.text"},"ts":1437142411000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but then pretty much all code-review tools that browser projects use are pretty bad as far as the UI and UX","msgtype":"m.text"},"ts":1437142478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that one looks like to was designed by somebody at Oracle, or SAP","msgtype":"m.text"},"ts":1437142513000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"You can switch to the new UI, it feels less horrible","msgtype":"m.text"},"ts":1437143064000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: How?!?","msgtype":"m.text"},"ts":1437143150000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: settings, uncheck use legacy UI","msgtype":"m.text"},"ts":1437143164000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"miketaylr: I didn't touch anything related to Twitter, but when I changed the README it did tweet indeed","msgtype":"m.text"},"ts":1437143219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yesss it's coming full circle https://twitter.com/feross/status/621960735401193472","msgtype":"m.text"},"ts":1437143812000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So the not \"deprecated ui\" is just \"wait forever until everything's loaded client-side\"?","msgtype":"m.text"},"ts":1437143862000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think there's a reason it's not on by default.","msgtype":"m.text"},"ts":1437143915000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"choose your poison","msgtype":"m.text"},"ts":1437143960000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think tools that people in product-development orgs develop and foist on one another are subconsciously some form of complex passive-aggressive way to try to punish each other","msgtype":"m.text"},"ts":1437144179000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: It's not like there are all these great commercial review tool products available","msgtype":"m.text"},"ts":1437144570000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The actual state of the nation seems to be \"everything sucks in different ways\"","msgtype":"m.text"},"ts":1437144588000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: true, I guess there's not a big market out there for it with people who have lots of high expectations for it in terms of usability","msgtype":"m.text"},"ts":1437144652000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It's Better Than Command Line®","msgtype":"m.text"},"ts":1437144670000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, I think to a certain extent that's untrue","msgtype":"m.text"},"ts":1437144717000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"People want a specific kind of usability which isn't necessarily the same as for some random content consuming app","msgtype":"m.text"},"ts":1437144789000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: is this something that will be fixed in the fetch spec or does it need to go in the other specs? \"The underlying assumption here is that all client requests use mode \"same-origin\", which is currently not explicitly stated for navigation requests.\"","msgtype":"m.text"},"ts":1437144791000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"It has to have all the reequired features to make them productive and not get in the way of their prefered workflow","msgtype":"m.text"},"ts":1437144814000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"wanderview: needs to be fixed in HTML","msgtype":"m.text"},"ts":1437144819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: specifically its navigate algorithm","msgtype":"m.text"},"ts":1437144827000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doubts we set event.request.type correctly","msgtype":"m.emote"},"ts":1437144849000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: you mean context?","msgtype":"m.text"},"ts":1437144880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sorry... RequestMode","msgtype":"m.text"},"ts":1437144918000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'll have to look at what we do... we seem to set no-cors correctly for cross origin stuff... just wondering if we set same-origin in the right places","msgtype":"m.text"},"ts":1437144949000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"MikeSmith: designing a good code review tool seems to be very very hard, because people have their own habits for reviewing code","msgtype":"m.text"},"ts":1437145084000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"one tool may not fit to all","msgtype":"m.text"},"ts":1437145091000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: do you really think get-with-bodies is worth it if you're never going to get the right caching semantics anyway?  might as well just require post to be used","msgtype":"m.text"},"ts":1437146453000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it didn't seem to be about caching so much","msgtype":"m.text"},"ts":1437146487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: one of the whole complaints about post was that it broke caching, though","msgtype":"m.text"},"ts":1437146506000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"the other complaint about post is that \"its not theoretically pure to the REST concept\"... which I don't really rate as a concern","msgtype":"m.text"},"ts":1437146529000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think the main point is that HTTP allows it while we don't","msgtype":"m.text"},"ts":1437146676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: at least for me","msgtype":"m.text"},"ts":1437146680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: that seems worth sorting out a definitive answer to at some point, but likely not this year","msgtype":"m.text"},"ts":1437146702000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(but others are welcome to prioritize differently of course and sort it out)","msgtype":"m.text"},"ts":1437146730000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does it really allow GET bodies?  the spec he linked to says \"A payload within a GET request message has no defined semantics; sending a payload body on a GET request might cause some existing implementations to reject the request.\"","msgtype":"m.text"},"ts":1437146811000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: none of that says it's disallowed","msgtype":"m.text"},"ts":1437146840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: would have to be a quite literal statement or grammar production","msgtype":"m.text"},"ts":1437146869000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"no defined semantics\" means nothing, since some protocol on top of HTTP might give it semantics","msgtype":"m.text"},"ts":1437146884000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok... I just don't see the advantage of using GET over POST if you're not getting caching semantics anyway","msgtype":"m.text"},"ts":1437146935000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"anyway, I have to run to meet someone for lunch... later","msgtype":"m.text"},"ts":1437146957000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: * /deep/ [attr] doesn't work if the first level of elements has [attr]","msgtype":"m.text"},"ts":1437160724000,"senderName":"danbeam","senderId":"danbeam@irc"},
{"content":{"body":"danbeam: That's why I said `[attr], * /deep/ [attr]`.  (It's unfortunate we don't have the ability to do \"self and combinator\".)","msgtype":"m.text"},"ts":1437164374000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]