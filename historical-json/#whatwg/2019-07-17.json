[
{"content":{"body":"dtapuska: maybe the BCG’s map should be weak, that would solve things","msgtype":"m.text"},"ts":1563333696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: btw does this sound OK? https://github.com/whatwg/html/pull/3752#discussion_r303720464","msgtype":"m.text"},"ts":1563362545000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: more or less, you also have to account for it not delaying the load event I suspect","msgtype":"m.text"},"ts":1563362663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: the current text doesn't do that quite as clearly either","msgtype":"m.text"},"ts":1563362671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1563362678000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: (that would also make it observable whether you do it same-origin/cross-origin btw)","msgtype":"m.text"},"ts":1563362688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hmm, well I'm wondering since the lazy load attributes are \"strong hints\" right, does that mean the UA could choose to defer the rest of the iframe navigation whenever it wants?","msgtype":"m.text"},"ts":1563362817000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: what is a strong hint? I think blocking or not blocking the load event better be normative","msgtype":"m.text"},"ts":1563362875000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sorry, I was referring to https://whatpr.org/html/3752/edc1e95...ba7593f/urls-and-fetching.html#lazy-loading-attributes \"The attribute provides a hint...\". I agree that deferred requests not blocking load event should be more rigorous. But it seems like whether a request is deferred or not ultimately depends on what the UA does with the hint","msgtype":"m.text"},"ts":1563363060000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Maybe it shouldn't be a \"hint\", and should be more firm?","msgtype":"m.text"},"ts":1563363070000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: yeah, I guess we should reword that, it's definitely fine to fetch immediately, but certain aspects better be implemented consistently across user agents","msgtype":"m.text"},"ts":1563363214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah I think auto should be the only hint. The others should be “non-negotiable” perhaps","msgtype":"m.text"},"ts":1563363456000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: even with auto it should still be clear whether you delay the load event I think","msgtype":"m.text"},"ts":1563363529000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: and since that's the default it means that in that case you do delay","msgtype":"m.text"},"ts":1563363548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: I guess I got that wrong as the default is different from omitting the attribute entirely","msgtype":"m.text"},"ts":1563363711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well I think with auto it’s not clear whether the UA will actually defer or not. But as long as we make clear that if the image does defer, load is not blocked. Else, load is, since the request wasn’t deferred.","msgtype":"m.text"},"ts":1563364450000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: Also it was my understanding that the missing value default was auto, is that wrong?","msgtype":"m.text"},"ts":1563364473000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"(On a train now can’t check)","msgtype":"m.text"},"ts":1563364481000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"s/image/request","msgtype":"m.text"},"ts":1563364498000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: oh right, in which case I'm right","msgtype":"m.text"},"ts":1563364539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: with auto the behavior will have to be as if the attribute was not specified, which definitely delays the load event today","msgtype":"m.text"},"ts":1563364577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think auto was introduced to let UAs determine whether imgs/iframes without the developer specifying the attribute. Is this bad?","msgtype":"m.text"},"ts":1563364668000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"If auto should just == eager, we should make it a binary attribute","msgtype":"m.text"},"ts":1563364699000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: if <iframe loading=auto> === <iframe> we cannot really change the status quo, right?","msgtype":"m.text"},"ts":1563364727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: perhaps you didn't mean to have a missing value default?","msgtype":"m.text"},"ts":1563364752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if we should rename that to \"missing attribute default\" for clarity","msgtype":"m.text"},"ts":1563364793000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"missing value\" might mean empty string to some people","msgtype":"m.text"},"ts":1563364822000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think Ben’s goal with including “auto” initially was to give room in the future to change the status quo, i.e., possibly defer <iframe> (no attributes)","msgtype":"m.text"},"ts":1563364892000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I’ll double check with him though to be sure. But yeah renaming that might be nice","msgtype":"m.text"},"ts":1563364917000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"But it’s equally possible Ben thought missing value default only applied to <iframe loading> (no value)","msgtype":"m.text"},"ts":1563364970000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I will ask","msgtype":"m.text"},"ts":1563364974000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I guess this is the trouble with changing spec authors","msgtype":"m.text"},"ts":1563365318000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: well, and not having clearly publicly logged discussions for all the design aspects to reflect upon","msgtype":"m.text"},"ts":1563365548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Heh that too","msgtype":"m.text"},"ts":1563365573000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"If that was done and there was some design involvement from multiple parties, you wouldn't really run into this","msgtype":"m.text"},"ts":1563365602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But now we're often hitting the design questions at the time of an HTML PR...","msgtype":"m.text"},"ts":1563365626000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which isn't ideal","msgtype":"m.text"},"ts":1563365633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that makes sense","msgtype":"m.text"},"ts":1563367598000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"dtapuska: Domenic: https://github.com/whatwg/html/issues/4782","msgtype":"m.text"},"ts":1563368201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yup I saw that.. I definitely agree it is a weak map (at least that is definitely how we implemented it in Chrome).","msgtype":"m.text"},"ts":1563368577000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/html/pull/4772    this is mainly editorial...  the current inheritance across browsing contexts occurs even in the current published version.. It sounds like the double \"remote\" call is an implementation detail... ie; in Chrome we have an object representing the Remote Browsing Context so that doesn't really get cloned but the remote frame tree node has a copy of the feature policy so it","msgtype":"m.text"},"ts":1563368810000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"isn't a cross process messaging.. but that is an impl detail","msgtype":"m.text"},"ts":1563368810000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"dtapuska: I guess currently policies can't be changed, but when they can (as with CSP or Referrer Policy), it's not an impl detail","msgtype":"m.text"},"ts":1563369250000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: and there's folks continuously pushing for <meta>","msgtype":"m.text"},"ts":1563369275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right but I'm just trying to have the spec better match Chrome's implementation at this point and I believe it is a reasonable editorial change for now. I don't want to get into the case where feature policy should or shouldn't be in the HTML spec","msgtype":"m.text"},"ts":1563369416000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"dtapuska: I thought you wanted shared understanding on how to model things?","msgtype":"m.text"},"ts":1563369478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was going after that things should be created before the document is created.. And ya it might move higher before the browsing context is created in the future..","msgtype":"m.text"},"ts":1563369546000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"annevk: ie; determination of sandbox flags, creation of agent, determination of origin.. All the changes I'm making are before the document is created... Fundamentally this is probably done before the browser context is created.. probably when COOP and COEP are parsed..  In Chrome that would be in the browser process before determining which process the browserContext is going to get created in.","msgtype":"m.text"},"ts":1563369639000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"Sure, the specific concern I have is around navigateChild(); changeStateOfParent(); queryStateOfNavigatedChild()","msgtype":"m.text"},"ts":1563369778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd like changeStateOfParent() to never be able to affect the results","msgtype":"m.text"},"ts":1563369803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wrt  https://github.com/whatwg/html/pull/4617#discussion_r304388723  Do you expect two frames that aren't same-origin domain to be able to pass shared array buffers via postMessage?","msgtype":"m.text"},"ts":1563370119000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"dtapuska: if they are same-site, yes","msgtype":"m.text"},"ts":1563370145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: or same agent-cluster, rather","msgtype":"m.text"},"ts":1563370163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: a.example.com and b.example.com get shared memory without document.domain (it'd be pretty bad if document.domain changed what agent cluster you were part of)","msgtype":"m.text"},"ts":1563370210000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: assuming they're in the same BCG","msgtype":"m.text"},"ts":1563370235000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right so this comment is wrong.. Chrome currently doesn't do that for MessagePorts so I got confused","msgtype":"m.text"},"ts":1563370637000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"dtapuska: I'm not sure what you mean","msgtype":"m.text"},"ts":1563370761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: what I'm saying is correct though, including in Chrome, see html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/window-similar-but-cross-origin-success.sub.html for instance on WPT","msgtype":"m.text"},"ts":1563370774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: I guess you're saying we need more MessageChannel coverage","msgtype":"m.text"},"ts":1563370813000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes I wrote a WPT test for this https://chromium.googlesource.com/chromium/src/+/96f9c17b2cc57bc443580c8b4c6845424e8555b1","msgtype":"m.text"},"ts":1563370864000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"dtapuska: cool","msgtype":"m.text"},"ts":1563370894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: the real complicated case with MessageChannel might also be worth testing","msgtype":"m.text"},"ts":1563370907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: you have agent clusters A and B","msgtype":"m.text"},"ts":1563370919000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: you message a MessagePort to B","msgtype":"m.text"},"ts":1563370927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: you message a SAB to the port still on A, but you don't call start() yet","msgtype":"m.text"},"ts":1563370946000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: you then message the MessagePort in B back to A","msgtype":"m.text"},"ts":1563370956000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: you call start","msgtype":"m.text"},"ts":1563370960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: it should succeed","msgtype":"m.text"},"ts":1563370963000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dtapuska: this is tracked at https://github.com/whatwg/html/issues/4209","msgtype":"m.text"},"ts":1563371001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ya that is an interesting case I agree..","msgtype":"m.text"},"ts":1563371051000,"senderName":"dtapuska","senderId":"dtapuska@irc"},
{"content":{"body":"Domenic: it seems your questions are primarily about the non-session bits, right?","msgtype":"m.text"},"ts":1563377629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't really understand enough to know whether that's true","msgtype":"m.text"},"ts":1563377644000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so we should make sure they're addressed somehow by dtapuska's PR","msgtype":"m.text"},"ts":1563377658000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I can sketch a simple collection case now I suppose; say in TLBC we navigate from \"scheme-and-site\" 1 to 2. This ends up creating two entries in TLBC's BCG's agent cluster map. The user agent can collect 1 once the navigation is complete, assuming they don't intend on doing bfcache or some such to it.","msgtype":"m.text"},"ts":1563377785000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: similar if there was a nested browsing context created in 2 that ends up creating 3 and is then removed. 3 can be collected assuming no references to any of its objects are hold (objects have strong references to globals which hold strong references to agents which hold strong references to agent clusters).","msgtype":"m.text"},"ts":1563377853000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Hmm, technically nobody can hold references to objects from 3 but 3, but as I mentioned we currently assume 3's WindowProxy and Location objects can be accessed from elsewhere as we don't have explicit \"remote\" variants, and even if we did we might wanna pretend those remote variants have a strong cross-process pointer for specification-simplicity.)","msgtype":"m.text"},"ts":1563378035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"probably a silly question, but is there any prop anywhere or a getter that I don't know of that would give me a list of all of the browsers known (not custom) elements that wont parse as HTMLUnknownElement?","msgtype":"m.text"},"ts":1563390277000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"bkardell: there is not. I think there is a feature request like this, either on whatwg/html or w3c/webcomponents.","msgtype":"m.text"},"ts":1563391693000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bkardell I haven't discovered this yet ;) the closest I found was a JSON file in browser source code that listed them out, or writing a function that uses document.createElement() to check the constructor to see if that browser sees it as HTMLUnkownElement https://github.com/chromium/chromium/blob/6efa1184771ace08f3e2162b0255c93526d1750d/third_party/blink/renderer/core/html/html_tag_names.json5","msgtype":"m.text"},"ts":1563393887000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"TabAtkins: FWIW, the main problem is lack of agreement around creation; at some point constructors were gonna be it, but they haven’t quite made it. And then we have all these variants on setting attributes/properties/listeners at the same time. I guess most things beat the status quo, but would still be nice to get it right 😊","msgtype":"m.text"},"ts":1563394009000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yup. There's solutions around all of this, of course, we just need to settle on one.","msgtype":"m.text"},"ts":1563394084000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(My element-creation helper, for example, interprets _-prefixed keys in the attributes bag as being properties, and _onFoo keys as being event listeners.)","msgtype":"m.text"},"ts":1563394116000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(That's probably a touch too hacky for the platform.)","msgtype":"m.text"},"ts":1563394127000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tho for real, \"foo\" being an attribute, \".foo\" being a property, and \"on(foo)\" being a listener, might legit work.","msgtype":"m.text"},"ts":1563394162000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A think Yehuda proposed is something similar to the HTML parser. That you create with a context element and based on that it picks the namespace.","msgtype":"m.text"},"ts":1563394269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It could work, but might not be fast…","msgtype":"m.text"},"ts":1563394333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, I mean - i really seem to bump into this a lot and I have a list of all of the elements that I use, but it always feels very icky and silly -  I guess I was just hoping the platform advanced something while I was looking the other way or something and I could stop that since I know there's been a lot of asks over the years.. :)  oh well, worth a shot","msgtype":"m.text"},"ts":1563394519000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"good old list of elements it is :)","msgtype":"m.text"},"ts":1563394553000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"annevk: I don't get why we need to be magical about this. There's like four collisions, and only *one* of them is something you'd generally create with a DOM API (<a>). Just list out all the elements, have the collisions default to HTML, and let you use a name prefix to disambiguate.","msgtype":"m.text"},"ts":1563394668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It depends a bit on what kind of code you want to simplify. I largely agree though and DOMChangeList has that API.","msgtype":"m.text"},"ts":1563395525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bkardell: it takes people to advance things and DOM/HTML isn’t invested in much at the core","msgtype":"m.text"},"ts":1563395619000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annvk I realize... I'm not sure if you read what I wrote there as a complaint or indictment or something, but if so it wasn't intended in any way... no harm in checking if there was a thing I wasn't aware of - I'm not sure this is 'common' I just seem to bump into it myself a lot because of the weird stuff I wind up into :)","msgtype":"m.text"},"ts":1563395784000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"All good, just clarifying why not everything is moving","msgtype":"m.text"},"ts":1563395852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"like, even myself, if I have to choose where to invest my finite time, it's probably not this... Trying to figure out how I efficiently go about getting folks to agree to particularly which shape of which idl should go where to achieve the goal with the same observable impacts seems more important/worth my own time :)","msgtype":"m.text"},"ts":1563395941000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"When I was looking into if I could get a list of supported tags for doing HTML templating, I had a peek at how other frameworks/libs do it, and almost all that had a list of known elements like this were outdated/inaccurate :/ also there was a lot of confusion around which elements are void elements or not","msgtype":"m.text"},"ts":1563396016000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"but sometimes you get lucky and there's just an answer you missed or somethign","msgtype":"m.text"},"ts":1563396018000,"senderName":"bkardell","senderId":"bkardell@irc"},
{"content":{"body":"I really didn't intend to open a can of worms :)","msgtype":"m.text"},"ts":1563396054000,"senderName":"bkardell","senderId":"bkardell@irc"}
]