[
{"content":{"body":"annevk: do you happen to know how / where firefox handles <a href=\"blob:..\" download> clicks?","msgtype":"m.text"},"ts":1519108406000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: it seems that while typically firefox navigates (and thus dispatches the onunload event), it doesn't for blob URLs?","msgtype":"m.text"},"ts":1519108437000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: donâ€™t; sounds like a bug","msgtype":"m.text"},"ts":1519108488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is it just me, or is bugzilla really really slow? :/","msgtype":"m.text"},"ts":1519109741000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: I think so too","msgtype":"m.text"},"ts":1519109821000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"k, filed a bug. best I found was nsDocShell::InternalLoad but that only skips beforeunload for javascript: URLs","msgtype":"m.text"},"ts":1519110312000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: Little demo - https://jakearchibald.github.io/streaming-html-spec/#origin. Requires TransformStream, so I guess Chrome Canary + web platform experiments flag. Streams the whole HTML spec, but just displays the linked section. Pauses the download once it gets it.","msgtype":"m.text"},"ts":1519121954000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm not really sure how flags work, but that doesn't look like a lot of code at all","msgtype":"m.text"},"ts":1519122111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: chrome://flags/#enable-experimental-web-platform-features. But yeah, turned out pretty easy. Hackiest bit is having to use an iframe & document.write to do the parsing.","msgtype":"m.text"},"ts":1519122175000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe footnotes are one of those things you have to be older to understand... like publishing","msgtype":"m.text"},"ts":1519134825000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"where is insertion order specified for objects in ES?","msgtype":"m.text"},"ts":1519136688000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-enumerate-object-properties is where I'd expect it to be, but it isn't","msgtype":"m.text"},"ts":1519136799000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"or does for..in not require it?","msgtype":"m.text"},"ts":1519136838000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: \"The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.\"","msgtype":"m.text"},"ts":1519136929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it is that section that deals with for..in, right?","msgtype":"m.text"},"ts":1519136942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"for some reason was convinced for..in now had a defined order","msgtype":"m.emote"},"ts":1519136951000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yeah, if you hover over the heading you find that the for/in section is a caller","msgtype":"m.text"},"ts":1519136970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hasn't touched the ES spec much since ES5 days :)","msgtype":"m.emote"},"ts":1519137056000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Properly dealing with the v0 createElement() version that took a string as a second argument is rather painful","msgtype":"m.text"},"ts":1519137524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Only Firefox implements customized built-in elements?!","msgtype":"m.text"},"ts":1519138404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess Chrome still hasn't shipped them or some such?","msgtype":"m.text"},"ts":1519138425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So many bugs everywhere","msgtype":"m.text"},"ts":1519138554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: haha yeah, pretty surprised at the reaction. I got less shit for questioning frameworks.","msgtype":"m.text"},"ts":1519141694000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: at this point I just look forward to referencing that twitter thread in a footnote one day","msgtype":"m.text"},"ts":1519141716000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"tbf, I think footnotes both make sense and the way most people implement them with scrolling media is stupidly broken","msgtype":"m.text"},"ts":1519141881000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: I'm going to do the request-url-fragment propagating in service worker interception... I think I will just do a mochitest for now while the spec is sorted... or do you think I should write it as a WPT?","msgtype":"m.text"},"ts":1519144015000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: mochitest seems okay","msgtype":"m.text"},"ts":1519144078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: .tentative WPT would make my job easier","msgtype":"m.text"},"ts":1519144086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what is \".tentative\"?","msgtype":"m.text"},"ts":1519144099000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"just a WPT naming convention?","msgtype":"m.text"},"ts":1519144120000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, for things not specced","msgtype":"m.text"},"ts":1519144138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool... first I have heard of that","msgtype":"m.text"},"ts":1519144146000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: should I rename the whatwg/dom shadow label to \"topic: shadow\"?","msgtype":"m.text"},"ts":1519150639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess the main benefit would be that you can search across the entire WHATWG org for a label","msgtype":"m.text"},"ts":1519150663000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: which seems nice","msgtype":"m.text"},"ts":1519150671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: DocumentFragment insertion is a tad different though and if you're inserting a lot of <script> elements maybe it can be a little faster","msgtype":"m.text"},"ts":1519150904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but hopefully not in the general case...","msgtype":"m.text"},"ts":1519150932000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I imagine mutation events can change things too","msgtype":"m.text"},"ts":1519150958000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right, a lot less mutation records","msgtype":"m.text"},"ts":1519150969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But like you say, not general","msgtype":"m.text"},"ts":1519150970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: seems like a good idea","msgtype":"m.text"},"ts":1519151110000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"has to figure out WPT reftests and is sad.","msgtype":"m.emote"},"ts":1519151569000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: why so?","msgtype":"m.text"},"ts":1519152032000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: union rules... I'm supposed to stick to the DOM","msgtype":"m.text"},"ts":1519152052000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"gsnedders: its also partly because I have to figure out how to do svg stuff","msgtype":"m.text"},"ts":1519152144000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hah, SVG stuff is fun :)","msgtype":"m.text"},"ts":1519152168000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: this is what I get for reading bug reports from xidorn","msgtype":"m.text"},"ts":1519152203000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I mean I both recommend doing that and recommend against doing that.","msgtype":"m.text"},"ts":1519152220000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: well, at least I vaguely know how to embed multiple things in an svg and pick them by URL fragment target now","msgtype":"m.text"},"ts":1519152296000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I wonder how much would break if we made input@type=password.value always equal \"\" or \"password\"","msgtype":"m.text"},"ts":1519152459000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Probably quite a lot, given plenty of sites do testing of the password strength client side.","msgtype":"m.text"},"ts":1519152479000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Is it at all possible to see valid HTML tag sequences (like `<b></b>`) appear in the source of a document but not have these added to the DOM? Or will you *always* have to use escape characters to do this","msgtype":"m.text"},"ts":1519153005000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Like, can I _ever_ see `<b></b>` in the source of a document, have this same sequence rendered as text and not picked up by the parser?","msgtype":"m.text"},"ts":1519153048000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Ah I just found the `<xmp>`!","msgtype":"m.text"},"ts":1519153534000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Though it is obsolete. I guess `<textarea readonly>` also works","msgtype":"m.text"},"ts":1519153595000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: <xmp>, <script>, <style>, <textarea>, probably more","msgtype":"m.text"},"ts":1519153736000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(of course script/style depend on CSS whether they'd get rendered)","msgtype":"m.text"},"ts":1519153747000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"domfarolino: heck, <input type=\"text\" value=\"<b></b>\">","msgtype":"m.text"},"ts":1519153787000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Forgot the obvious `<script>` and `<style>`.. Oh wow that's interesting thanks for the example!","msgtype":"m.text"},"ts":1519153822000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I'm sure there's more ways you can do this","msgtype":"m.text"},"ts":1519154350000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yeah now that I think of it there are a ton","msgtype":"m.text"},"ts":1519154447000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"@annevk @esprehn I'm not planning on doing any work with async mutation events. Outside of my wheelhouse, and I've got way too many other things to worry about to move into something tangential like that.","msgtype":"m.text"},"ts":1519155312000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"domfarolino: Note that if you're writing a Bikeshed document, you can freely use <xmp> - it'll convert to a <pre> (with contents escaped) in the output so your document validates.","msgtype":"m.text"},"ts":1519155370000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But yeah, <script style=\"display: block\"> (or same with <style>) also works, tho they'll be active elements (so don't use <style> unless you want the CSS to work, and use <script> with a nonsense type='' attribute).","msgtype":"m.text"},"ts":1519155459000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But see https://tabatkins.github.io/railroad-diagrams/example.html for an example of using a visible <script> for useful purpose - it's showing the JS and the results of running the JS. ^_^","msgtype":"m.text"},"ts":1519155485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders: hmm... reftests are easier than I thought","msgtype":"m.text"},"ts":1519155547000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"probably just jinxed himself","msgtype":"m.emote"},"ts":1519155562000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: Oh nice thanks! Just read that section in the Bikeshed document. Oh, I didn't know you could actually display a working script block; thanks for the info!!","msgtype":"m.text"},"ts":1519155846000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"@TabAtkins: I meant you might know who owns the DOM on the chrome team :)","msgtype":"m.text"},"ts":1519156233000,"senderName":"esprehn","senderId":"esprehn@irc"},
{"content":{"body":"Oh, that's Tokyo.","msgtype":"m.text"},"ts":1519156243000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dunno who the *person* is.","msgtype":"m.text"},"ts":1519156248000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wanderview: :)","msgtype":"m.text"},"ts":1519156303000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Don't we have a blame-annotated view of the HTML source somewhere?","msgtype":"m.text"},"ts":1519157119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I really wanna see what commit line 93222 came from.","msgtype":"m.text"},"ts":1519157150000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I just use GitHub nowadays","msgtype":"m.text"},"ts":1519157206000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Which very specifically doesn't work for HTML, unless I'm doing something wrong?","msgtype":"m.text"},"ts":1519157223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh wait for HTML","msgtype":"m.text"},"ts":1519157228000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I've mostly justed used a local checkout, though dear god does it eat CPU","msgtype":"m.text"},"ts":1519157258000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is there any way to nicely use utility functions in a reftest that depend on testharness.js's step_func()?","msgtype":"m.text"},"ts":1519157586000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: there's a link in the whatwg/html readme","msgtype":"m.text"},"ts":1519157771000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: I always make my utility functions take a t argument","msgtype":"m.text"},"ts":1519157787000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: where do I get the t argument in a reftest?","msgtype":"m.text"},"ts":1519157803000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ah, danke, I haven't actually looked at the README ever. ^_^","msgtype":"m.text"},"ts":1519157804000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wanderview: oh I see, reftest specific, I skipped past that","msgtype":"m.text"},"ts":1519157819000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can either make this utility function work if t is null, or rewrite the function in my reftest","msgtype":"m.text"},"ts":1519157850000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"utility function in question is quite small... wait_for_state() in serviceworkers","msgtype":"m.text"},"ts":1519157865000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: maybe this is enough: const fake_test = { step_func: f => f };","msgtype":"m.text"},"ts":1519157938000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"that seems to work","msgtype":"m.text"},"ts":1519158049000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"MikeSmith: lots of errors with the new JS syntax checker on some spec demos :-/. https://travis-ci.org/whatwg/streams/builds/344010078#L2276","msgtype":"m.text"},"ts":1519158247000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: files are in e.g. https://github.com/whatwg/streams/blob/master/demos/append-child.html","msgtype":"m.text"},"ts":1519158327000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: what are you trying to do? control when the screenshot is taken?","msgtype":"m.text"},"ts":1519159002000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I am writing a test that an <img src=\"some.svg#target\"> still renders properly when intercepted by a service worker","msgtype":"m.text"},"ts":1519159033000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: what do you want step_func to do?","msgtype":"m.text"},"ts":1519159048000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: so I need to do some setup of the service worker.... the service worker utility function wait_for_state() takes a test object with a step_func... I just want wait_for_state() behavior","msgtype":"m.text"},"ts":1519159082000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"stubbing the step_func seems to work","msgtype":"m.text"},"ts":1519159097000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ah. um. that's awkward. Yeah, that's the only thing I can suggest.","msgtype":"m.text"},"ts":1519159106000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Given including testharness.js will make ita a testharness.js test.","msgtype":"m.text"},"ts":1519159115000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: here is what I ended up with: https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=1437760&attachment=8952500","msgtype":"m.text"},"ts":1519159121000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":" Hmm, https://whatwg.org/workstream-policy renders the title as \"WHATWG orkstream Policy\" but it","msgtype":"m.text"},"ts":1519159132000,"senderName":"mchampion","senderId":"mchampion@irc"},
{"content":{"body":"is correct in the source markdown.","msgtype":"m.text"},"ts":1519159187000,"senderName":"mchampion","senderId":"mchampion@irc"},
{"content":{"body":"mchampion: You have a problem with orkstreams?","msgtype":"m.text"},"ts":1519159464000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The WHATWG policy is that ork and their streams are a-ok.","msgtype":"m.text"},"ts":1519159479000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A bit evil for my tastes, Hobbitstreams would be preferable","msgtype":"m.text"},"ts":1519159510000,"senderName":"mchampion","senderId":"mchampion@irc"},
{"content":{"body":"That's racist.","msgtype":"m.text"},"ts":1519159516000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oooh weird","msgtype":"m.text"},"ts":1519159583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks mchampion, probably my bad with recent website upgrades, will fix","msgtype":"m.text"},"ts":1519159602000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Also, I think Tolkien used the spelling \"orc\"; \"ork\" is intended to be a 40k reference.)","msgtype":"m.text"},"ts":1519159608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: You need to run it with -Wall to keep all the Ws, otherwise it drops some.","msgtype":"m.text"},"ts":1519159629000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"-_-","msgtype":"m.text"},"ts":1519159638000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'll never apologize.","msgtype":"m.text"},"ts":1519159655000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ponders which browser corresponds to each 40k race...","msgtype":"m.emote"},"ts":1519159768000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Wow https://www.tutorialspoint.com/python/string_lstrip.htm does not do what I thought it did at all","msgtype":"m.text"},"ts":1519159807000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What did you think it would do?","msgtype":"m.text"},"ts":1519159842000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I thought  it would basically be like a substring","msgtype":"m.text"},"ts":1519160074000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"E.g. I thought `\"ababcd\".lstrip(\"ab\")` would give `\"abcd\"`. But instead it gives `\"cd\"`.","msgtype":"m.text"},"ts":1519160100000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It treats the given string as an array of characters","msgtype":"m.text"},"ts":1519160107000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh! Yeah, it's somewhat confusing.  (\"abbcd\" also reduces to \"cd\" .)","msgtype":"m.text"},"ts":1519160142000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right yeah","msgtype":"m.text"},"ts":1519160154000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It makes sense when I realized mostly it was meant to be called with no arguments","msgtype":"m.text"},"ts":1519160164000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(to strip whitespace)","msgtype":"m.text"},"ts":1519160167000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is another case where treating strings as iterables obscures the behavior, rather than helps.  It really should take a list or set of characters, that's *much* more clear than *treating* a string as a list.","msgtype":"m.text"},"ts":1519160232000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I'm still strongly of the opinion that strings should never be iterable; you should have to call a specific method to get an iterable over the string.)","msgtype":"m.text"},"ts":1519160257000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(For many reasons, including that \"recurse on iterables until you find something that's not iterable\" requires a special case for strings *every single time*, or else you'll infinite-recurse since characters are strings too.)","msgtype":"m.text"},"ts":1519160315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: looking at the checker results for that Streams demo now","msgtype":"m.text"},"ts":1519162033000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]