[
{"content":{"body":"back from vacation","msgtype":"m.emote"},"ts":1407125536000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: time for you to get back to writing some w3cmemes","msgtype":"m.text"},"ts":1407126604000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah man","msgtype":"m.text"},"ts":1407126627000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well, that's awesome: system crashed and firefox completely lost my session","msgtype":"m.text"},"ts":1407126940000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wow, it just uses a text file with json, not sqlite","msgtype":"m.text"},"ts":1407127130000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"what, you wanted an sqlite DB with JSON?","msgtype":"m.text"},"ts":1407127211000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"better than a raw file for important user data","msgtype":"m.text"},"ts":1407127228000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"performance of JSON is much better","msgtype":"m.text"},"ts":1407128021000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and I suspect robustness is too","msgtype":"m.text"},"ts":1407128026000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"overall","msgtype":"m.text"},"ts":1407128037000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"well, robustness would be more better either way if FF told you when the disk was full ;-P","msgtype":"m.text"},"ts":1407128059000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"json has zero robustness since it's a text format, not a data storage system","msgtype":"m.text"},"ts":1407128789000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"sqlite's journalling would probably have prevented me ending up with a nulled out session and having to dig out an old backup","msgtype":"m.text"},"ts":1407128811000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yes, but it'd probably be missing random tabs or pages or something","msgtype":"m.text"},"ts":1407129422000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"depending on the cause of the problem","msgtype":"m.text"},"ts":1407129453000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"... no, it wouldn't ...","msgtype":"m.text"},"ts":1407129632000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well if you ran out of storage it likely would","msgtype":"m.text"},"ts":1407129668000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"at least that's what happens to my history","msgtype":"m.text"},"ts":1407129678000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"if you ran out of storage sqlite would throw an error and nothing would be changed","msgtype":"m.text"},"ts":1407129681000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but they're just doing ad hoc writing to a file so who knows what happens","msgtype":"m.text"},"ts":1407129710000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic: If I wanted to pipe a response into a cache and the browser (for rendering), how can I do that without the whole response ending up in memory?","msgtype":"m.text"},"ts":1407137327000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: in that case if you tee and then pipe both ends of the tee into places immediately, the data will just flow through","msgtype":"m.text"},"ts":1407137361000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: cool, that's what I thought","msgtype":"m.text"},"ts":1407137377000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: the problematic case is teeing and then piping only one end","msgtype":"m.text"},"ts":1407137378000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sorry I still haven't had time to process your reply","msgtype":"m.text"},"ts":1407137384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Working on a talk I'll be giving in ... 7 hours? :P","msgtype":"m.text"},"ts":1407137398000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"NOT ACCEPTABLE","msgtype":"m.text"},"ts":1407137408000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: no worries! I'm only just replying to that thread myself","msgtype":"m.text"},"ts":1407137422000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Good luck with the talk","msgtype":"m.text"},"ts":1407137430000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":":) thanks","msgtype":"m.text"},"ts":1407137434000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: what do you mean by a transaction story that works for both IDB and fetchstore","msgtype":"m.text"},"ts":1407138001000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: my point was that .batch() is a better primitive to build anything more complicated on top of. For *both* APIs","msgtype":"m.text"},"ts":1407138029000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: the only thing I could think of that works for both would be some kind of strange global variable that is \"in a transaction\", that IDB and fetchstore both consult","msgtype":"m.text"},"ts":1407138060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: slightlyoff was talking about a way to have the same story for both, rather than something cache specific. Maybe even something that can be a single transaction across both","msgtype":"m.text"},"ts":1407138062000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Bleh, I will try taking things up with him then","msgtype":"m.text"},"ts":1407138089000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, I like .batch, but happy to keep it as an algorithm for the sake of getting cache out of the door","msgtype":"m.text"},"ts":1407138113000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"That is totally fair","msgtype":"m.text"},"ts":1407138123000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But I want to convince him that it is the correct primitive :)","msgtype":"m.text"},"ts":1407138132000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Go for it :D","msgtype":"m.text"},"ts":1407138140000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Or hear what his thoughts are for something else, if there are concrete ideas","msgtype":"m.text"},"ts":1407138150000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Just to confirm, if the active consumer of a stream errors/dies, something consuming the tee of the original stream is unaffected right?","msgtype":"m.text"},"ts":1407138189000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: right","msgtype":"m.text"},"ts":1407138200000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1407138211000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: Thinking of adding response.clone() and request.clone() rather than doing any implicit teeing. How does that sound?","msgtype":"m.text"},"ts":1407138583000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I think I like it, but kind of want to read through the thread first","msgtype":"m.text"},"ts":1407138601000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"No worries, don't worry about it until after your talk","msgtype":"m.text"},"ts":1407138621000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Seems related to \"structured cloning of streams\" discussion I kinda-started a while ago","msgtype":"m.text"},"ts":1407138627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Why are we changing the design of responses and requests?","msgtype":"m.text"},"ts":1407140020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: looking for ways to allow a response to have multiple consumers without adding magic","msgtype":"m.text"},"ts":1407140225000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"(or indeed, a request)","msgtype":"m.text"},"ts":1407140232000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: if I tee a stream, can I read it without the original stream being read? If a teed (or original) stream isn't read, and data builds up in memory, what's expected to happen when memory runs out? All active streams fail?","msgtype":"m.text"},"ts":1407140328000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: The use cases are, read a response as two types, send a response to cache & browser, read a request's body before deciding whether to fetch it or not","msgtype":"m.text"},"ts":1407140415000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"note that there is some tee'ing going on already per algorithms in Fetch","msgtype":"m.text"},"ts":1407140442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. because of redirects a request can be tee'd several times","msgtype":"m.text"},"ts":1407140491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good point","msgtype":"m.text"},"ts":1407140714000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and at least once","msgtype":"m.text"},"ts":1407140714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So .clone() would give that to the user. We'll be able to explain it in terms of new Response & a teed stream, but I think we need it sooner than streams","msgtype":"m.text"},"ts":1407140720000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: why .clone() and not structured clone?","msgtype":"m.text"},"ts":1407140722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we want structured clones","msgtype":"m.text"},"ts":1407140722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and maybe structured clones need an API","msgtype":"m.text"},"ts":1407140723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What's the API… aha","msgtype":"m.text"},"ts":1407140723000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: so there isn't a way to structured-clone with script (aside from going back & forth between a dedicated worker I suppose)","msgtype":"m.text"},"ts":1407140803000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: In fact, is there a sync way to create a structured clone?","msgtype":"m.text"},"ts":1407140817000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"you can always do window.postMessage","msgtype":"m.text"},"ts":1407140819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think there's a synchronous API at this point","msgtype":"m.text"},"ts":1407140833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although there's a couple of spec algorithms that do it","msgtype":"m.text"},"ts":1407140858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so, can we have .clone() that returns a structured clone, or are you thinking more window.createStructuredClone(obj);","msgtype":"m.text"},"ts":1407140962000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the latter, something TC39-designed","msgtype":"m.text"},"ts":1407140991000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. you can clone `{ data: obj }` too","msgtype":"m.text"},"ts":1407141017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"plays Oh Fortuna","msgtype":"m.emote"},"ts":1407141018000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"there's several open issues on this","msgtype":"m.text"},"ts":1407141094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"including a big red note in Fetch","msgtype":"m.text"},"ts":1407141101000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: You mean https://github.com/slightlyoff/ServiceWorker/issues/313?","msgtype":"m.text"},"ts":1407141146000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It would be good if structure clone were async","msgtype":"m.text"},"ts":1407141212000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can't remember why off the top of my head but IIRC it enabled some scenarios","msgtype":"m.text"},"ts":1407141230000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: the way to think of teeing is you have created two new streams which are hooked up to the original stream. So when you read from one of the new streams, it pulls from the original stream into both new streams. The one you are reading from then gets the data handed to the user, but the other one just gets the data sitting there in the queue.","msgtype":"m.text"},"ts":1407141311000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If memory runs out ... usual platform OOM behavior, I suppose? Which is pretty undefined IIRC?","msgtype":"m.text"},"ts":1407141338000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: yup","msgtype":"m.text"},"ts":1407141343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OOM is undefined","msgtype":"m.text"},"ts":1407141369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"There was a thread recently about defining stack limits","msgtype":"m.text"},"ts":1407141384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You could also imagine the platform swapping out all the data to disk and letting you read it later... the details are hidden enough that this is possible. I wouldn't want to write such a tee-with-disk-intermediating myself, but it could be done.","msgtype":"m.text"},"ts":1407141409000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You'd want to avoid that if possible though. Ideally you want .read() to translate straight into a syscall, and the more layers of teeing and caching you add in between, the less likely that is.","msgtype":"m.text"},"ts":1407141455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in your example there, were you thinking of two calls to tee? Otherwise I'm not sure where the *two* new streams come from","msgtype":"m.text"},"ts":1407141499000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: a tee is meant to create two new streams from the original, thus the \"T\" shape","msgtype":"m.text"},"ts":1407141523000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or \"Y\" shape","msgtype":"m.text"},"ts":1407141528000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"one stream goes in, gets consumed, two unconsumed streams come out","msgtype":"m.text"},"ts":1407141540000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, \"consumed\" isn't quite right, we don't wait for you to read to the end","msgtype":"m.text"},"ts":1407141562000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Got it","msgtype":"m.text"},"ts":1407141581000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess that makes request.clone() either weird or all the more useful. It'd have to replace its own stream with one part of the tee","msgtype":"m.text"},"ts":1407141638000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"starting to understand the issues around structured cloning and streams","msgtype":"m.text"},"ts":1407141677000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1407141711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: is there an explanation somewhere of why an IO stream needs to have both readable and writeable parts?","msgtype":"m.text"},"ts":1407141728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: e.g. why it can't be more like the simplest asynchronous iterable object you can imagine (that has both push and async read)","msgtype":"m.text"},"ts":1407141762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure exactly what you mean... a stream is either readable (someone else controls data production) or writable (someone else controls consumption of data you put in it)","msgtype":"m.text"},"ts":1407141776000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: why can't it be more like a promise, where that can be the case, but you can also control both ends","msgtype":"m.text"},"ts":1407141817000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: a readable stream is much like a promise. (And a writable stream, in reverse.) But the creator controls one end, and does not give the ability to others via the public API","msgtype":"m.text"},"ts":1407141859000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"a readable stream is only readable, although its creator says how to get the data that consumers read from it","msgtype":"m.text"},"ts":1407141892000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you could imagine a stream API that leaves both ends open for people to shove data through, but that has some ergonomic issues:","msgtype":"m.text"},"ts":1407141932000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"instead of writing e.g. \"when someone writes data to me, put it in the file descriptor,\" you have to continually be reading from the output end, and then putting the results of what you read into the file descriptor","msgtype":"m.text"},"ts":1407141955000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess it's needed for perf, but it seems weird that we're focused that much on current low-level implementation details, rather than what is the best abstraction for what we want.","msgtype":"m.text"},"ts":1407142058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's not really perf, it's ergonomics","msgtype":"m.text"},"ts":1407142065000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If read returns a promise, you don't have to continuously read for instance","msgtype":"m.text"},"ts":1407142147000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You have to recurse at the very least","msgtype":"m.text"},"ts":1407142163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But hmm","msgtype":"m.text"},"ts":1407142168000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It would just fulfill with the next chunk or error","msgtype":"m.text"},"ts":1407142170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am starting to do perf benchmarks and it is possible promise-returning read() might make a comeback if those show non-failure","msgtype":"m.text"},"ts":1407142200000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yes, and with recursion you get nice ergonomics. Especially with synchronous notation","msgtype":"m.text"},"ts":1407142206000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sounds good","msgtype":"m.text"},"ts":1407142245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if I tee a stream but don't read either of the tees, is the original stream consumed or does it wait for the first read on one of the tees?","msgtype":"m.text"},"ts":1407142446000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it waits. Although trying to read from it would race with the tee mechanism, which is also trying to read from it","msgtype":"m.text"},"ts":1407142480000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, was just trying to work out when it starts filling memory. Got it.","msgtype":"m.text"},"ts":1407142521000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I am looking forward to thinking harder about how to implement clone() ... clearly it is not quite the same as teeing","msgtype":"m.text"},"ts":1407142542000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: can it be explained with a tee and taking one part of the tee for itself?","msgtype":"m.text"},"ts":1407143232000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: seems weird. maybe possible, but i think i'd use something slightly different than a tee...","msgtype":"m.text"},"ts":1407143810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: In https://github.com/slightlyoff/ServiceWorker/issues/398, what's the difference between \"use a local file if available\" and \"conditional request\", does the former not care about freshness?","msgtype":"m.text"},"ts":1407144543000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe, not sure; I'm not that familiar with cache implementations and what options they have","msgtype":"m.text"},"ts":1407146242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I can imagine if you're offline you might decide to not care about freshness","msgtype":"m.text"},"ts":1407146269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, r? https://github.com/w3c/web-platform-tests/pull/1131","msgtype":"m.text"},"ts":1407146416000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: fair enough, we do that in Chrome (behind a flag, I think)","msgtype":"m.text"},"ts":1407146434000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ms2ger: should I merge it after I reviewed it?","msgtype":"m.text"},"ts":1407146582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Either way","msgtype":"m.text"},"ts":1407146607000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: bit surprised the critic bot didn't post anything back","msgtype":"m.text"},"ts":1407146662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thought… do we need to make fetch('//other-origin/whatever', {mode: 'no-cors'}) revalidate against the server? Else, if I get a response back, and navigator.offLine == true, we're exposing the user's history","msgtype":"m.text"},"ts":1407149769000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: more so if the developer can go to the cache despite the cached entry being stale","msgtype":"m.text"},"ts":1407149809000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: can't you probe that already with <img>?","msgtype":"m.text"},"ts":1407150328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: agreed that with the cache settings stuff, if we add that for v1, we'll need to carefully consider privacy","msgtype":"m.text"},"ts":1407150348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for images, yeah. Scripts too I guess.","msgtype":"m.text"},"ts":1407150376000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: hmm, maybe anything with iframes","msgtype":"m.text"},"ts":1407150394000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Boy, SW issue 372 is now officially all over the place.","msgtype":"m.text"},"ts":1407150563000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, ok, iframes too. Not a new problem then.","msgtype":"m.text"},"ts":1407150565000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"tobie: is it? Felt like it was zoning in.","msgtype":"m.text"},"ts":1407150605000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, you need to be familiar with Stream API status, teeing, stream cloning, advantages of async structured cloning over sync one, future tc39 plans for structured cloning, transactional requests in indexedDB, etc.","msgtype":"m.text"},"ts":1407150747000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Did I mention request had a stream too? How that interact at the SW level just blew my mind.","msgtype":"m.text"},"ts":1407150827000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"when you submit a form (with a mixture of files and form fields) that's a body stream that's sent to the server","msgtype":"m.text"},"ts":1407150889000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Of course. Makes complete sense. It's just. Woah.","msgtype":"m.text"},"ts":1407150918000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah, it goes all the way down","msgtype":"m.text"},"ts":1407150929000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: why does cache.addAll deplete a request's body stream? Do we cache non GET requests or does fetch send body of GET requests?","msgtype":"m.text"},"ts":1407151289000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(asking for a friend)","msgtype":"m.text"},"ts":1407151301000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1407151325000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: bloody good point. No, it rejects with non-GET requests, so it's a non-issue","msgtype":"m.text"},"ts":1407151351000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"updated","msgtype":"m.text"},"ts":1407151424000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: how are GET requests with a body handled though?","msgtype":"m.text"},"ts":1407151434000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Wasn't it you writing recently about how these were a thing?","msgtype":"m.text"},"ts":1407151448000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"not that I know of. annevk, should we throw if a GET request is constructed with a body?","msgtype":"m.text"},"ts":1407151572000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: so btw, the read-write distinction for streams is problematic for Request and potentially Response objects btw","msgtype":"m.text"},"ts":1407151583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: nobody had a good answer there so far and we plan on shipping this end of Q3...","msgtype":"m.text"},"ts":1407151608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: hmm, might not be handled specifically at the moment","msgtype":"m.text"},"ts":1407151630000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: XMLHttpRequest ignores the body for GET/HEAD","msgtype":"m.text"},"ts":1407151641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: if we're not throwing for headers, we shouldn't throw for body I guess","msgtype":"m.text"},"ts":1407154851000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I should try to handle this in Fetch itself so we don't have to reinvent it for each API","msgtype":"m.text"},"ts":1407154939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1407154956000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: there's also https://github.com/slightlyoff/ServiceWorker/issues/120 I just noticed","msgtype":"m.text"},"ts":1407154965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: maybe willchan & co should look at that","msgtype":"m.text"},"ts":1407154999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, I don't have strong feelings there","msgtype":"m.text"},"ts":1407155019000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Declares us-ascii, expects windows-1252; nice find zcorpan! http://futbolenlatele.com/","msgtype":"m.text"},"ts":1407156319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1407156333000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"found it while eating my lunch :-)","msgtype":"m.text"},"ts":1407156375000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"there are no pages doing X\" is basically always false on the web","msgtype":"m.text"},"ts":1407156557000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonders if that will fit in the topic :)","msgtype":"m.emote"},"ts":1407156604000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"fits in a tweet","msgtype":"m.text"},"ts":1407156696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: &ndash; works with the new pipeline i take it?","msgtype":"m.text"},"ts":1407156755000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=9785#c10 - no pages doing X for X = moznofilter :-)","msgtype":"m.text"},"ts":1407161385000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie: ok if i close srcset bugs that are fixed by <picture>?","msgtype":"m.text"},"ts":1407162607000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: at least some time ago it was fine to close bugs given solid rationale","msgtype":"m.text"},"ts":1407162660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: do you have opinions on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25552 ?","msgtype":"m.text"},"ts":1407163449000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"meow, Object.keys returns an arrayLike object or an array ?","msgtype":"m.text"},"ts":1407165477000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"specs says array","msgtype":"m.text"},"ts":1407165482000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"but...","msgtype":"m.text"},"ts":1407165486000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":">> obj =  {x:1,y:2}; for (k in Object.keys(obj)) {console.log(k)}","msgtype":"m.text"},"ts":1407165502000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"gives '0', '1'","msgtype":"m.text"},"ts":1407165520000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"indices","msgtype":"m.text"},"ts":1407165548000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"Object.getPrototypeOf(Object.keys(...)) === []","msgtype":"m.text"},"ts":1407165660000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"What else?","msgtype":"m.text"},"ts":1407165751000,"senderName":"Ms2ger`","senderId":"Ms2ger`@irc"},
{"content":{"body":"Array.isArray(Object.keys(...)) === true ?","msgtype":"m.text"},"ts":1407165808000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"etc :c","msgtype":"m.text"},"ts":1407165811000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Object.prototype.toString(Object.keys(...)) === [object Array]?","msgtype":"m.text"},"ts":1407165835000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"+ missing `.call`","msgtype":"m.text"},"ts":1407165844000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"heh heh my bad, Enumeration VS Iteration","msgtype":"m.text"},"ts":1407165942000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"yes, it won't behave the same as for-of","msgtype":"m.text"},"ts":1407166245000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hrrm","msgtype":"m.text"},"ts":1407166263000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"there must be a deprecated 'for each...in' as well ;)","msgtype":"m.text"},"ts":1407166456000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"There is","msgtype":"m.text"},"ts":1407166496000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Thanks to E4X","msgtype":"m.text"},"ts":1407166509000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"and for-of will confuse people in other ways too, we don't know how to spec consistent languages","msgtype":"m.text"},"ts":1407166589000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"heh heh","msgtype":"m.text"},"ts":1407166590000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"I would stick for forEach for array and for-of for generator objects and for-in for the rest...","msgtype":"m.text"},"ts":1407166919000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"annevk: ahh, so is https://github.com/slightlyoff/ServiceWorker/issues/398#issuecomment-51081392 correct, \"conditional\" mean must-revaidate?","msgtype":"m.text"},"ts":1407170344000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"means&","msgtype":"m.text"},"ts":1407170346000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"means**","msgtype":"m.text"},"ts":1407170362000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"means*","msgtype":"m.text"},"ts":1407170364000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"there, fixed.","msgtype":"m.text"},"ts":1407170370000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh, yes, conditional goes via a server","msgtype":"m.text"},"ts":1407170669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Riiiiiiight. I'd gotten confused. I thought \"available\" meant something other than \"fresh\"","msgtype":"m.text"},"ts":1407171171000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"zcorpan: if they're assigned to me, comment on them first so i can check them out","msgtype":"m.text"},"ts":1407175711000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"There is no way to represent a promise value in IDL\"","msgtype":"m.text"},"ts":1407176647000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's a \"promise value\"?","msgtype":"m.text"},"ts":1407176651000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: whatever form it takes it will almost certainly be { input, output }","msgtype":"m.text"},"ts":1407181526000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: a class that has both input and output?","msgtype":"m.text"},"ts":1407181554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: because a plain object is unlikely to fly by Adam Barth","msgtype":"m.text"},"ts":1407181566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure which yet. mostly a convention.","msgtype":"m.text"},"ts":1407181643000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: but yes, something like var { input, output } = new PassThroughStream() seems reasonable.","msgtype":"m.text"},"ts":1407181711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this comes back to my confusion as to how to \"bootstrap\" a two-ended stream","msgtype":"m.text"},"ts":1407181731000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if a PassThroughStream is composed of a { WritableStream input, ReadableStream output }, then WritableStream and ReadableStream should have constructors","msgtype":"m.text"},"ts":1407181773000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But kind of the whole point of PassThroughStream is that you should be able to use it to create either end, without creating them separately....","msgtype":"m.text"},"ts":1407181803000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"meh, it's solvable","msgtype":"m.text"},"ts":1407181833000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"just need to get these damn benchmarks finished","msgtype":"m.text"},"ts":1407181868000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then the potential simplifications can begin","msgtype":"m.text"},"ts":1407181878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"does chrome warn about use of some deprecated features ?","msgtype":"m.text"},"ts":1407184218000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407184403000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: which features for example?","msgtype":"m.text"},"ts":1407184737000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hmm, looks like MutationEvent usage has dropped","msgtype":"m.text"},"ts":1407184747000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"someone filed a bug on angular about browsers (including chrome) complaining about touching Event.returnValue some time ago","msgtype":"m.text"},"ts":1407184788000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"so that would be one","msgtype":"m.text"},"ts":1407184796000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: I guess it just doesn't warn about mutation events","msgtype":"m.text"},"ts":1407184817000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nor sync XHR","msgtype":"m.text"},"ts":1407184820000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i'm not sure if synchronous XHR is properly deprecated in chromium yet","msgtype":"m.text"},"ts":1407184834000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"tyoshino would probably know","msgtype":"m.text"},"ts":1407184842000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"if there was an intent to deprecate thread for that, I missed that one","msgtype":"m.text"},"ts":1407184877000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hmm, is it that complicated that it needs deprecating in a technical sense?","msgtype":"m.text"},"ts":1407184881000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"rather than just a \"hey dumbass, don't block your script on that; it's bad for UX\"","msgtype":"m.text"},"ts":1407184921000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"caitp: it is deprecated in the spec","msgtype":"m.text"},"ts":1407184950000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"all the browser vendors agreed about that","msgtype":"m.text"},"ts":1407184961000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"yes, but not necessarily in browsers","msgtype":"m.text"},"ts":1407184962000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"IE a browser doesn't necessarily warn you, there aren't necessarily plans to remove the feature yet","msgtype":"m.text"},"ts":1407184987000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"oh, that reminds me about trigraphs","msgtype":"m.text"},"ts":1407185037000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well, in Gecko the plan is to \"remove-when-the-usage-low-enough-and-warn-until-then\"","msgtype":"m.text"},"ts":1407185048000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that's a reasonable approach :>","msgtype":"m.text"},"ts":1407185124000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Hixie: comment and close at the same time ok? or just comment?","msgtype":"m.text"},"ts":1407186413000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hi","msgtype":"m.text"},"ts":1407186713000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"which spec covers the data binding functionality from Polymer?","msgtype":"m.text"},"ts":1407186727000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"the template spec is said to be moved to HTML5 spec, but I can't find any mention of data binding there","msgtype":"m.text"},"ts":1407186758000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"zcorpan: comment, if you comment and close i won't see it for months (i only read my bugmail ~annually)","msgtype":"m.text"},"ts":1407186798000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jarek: there is no spec that covers data binding","msgtype":"m.text"},"ts":1407186814000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"to my knowledge","msgtype":"m.text"},"ts":1407186820000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407186879000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so the stuff described here is completely non-standard? http://www.polymer-project.org/docs/polymer/databinding.html","msgtype":"m.text"},"ts":1407186913000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"is there any chance that Mozilla will implement it?","msgtype":"m.text"},"ts":1407186928000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: yes, that is currently non-standard.","msgtype":"m.text"},"ts":1407187204000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jarek: no idea what mozilla's plans are, but if two browsers implement this, then it's a de facto standard","msgtype":"m.text"},"ts":1407187233000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"chrome does not implement it either","msgtype":"m.text"},"ts":1407187864000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it is just a library","msgtype":"m.text"},"ts":1407187867000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"produced by the same company that produces chrome","msgtype":"m.text"},"ts":1407187874000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jarek ^","msgtype":"m.text"},"ts":1407187876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and there isn't any spec for that data binding","msgtype":"m.text"},"ts":1407187880000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"every Web Components talk by Google I have seen was actually discussing Polymer","msgtype":"m.text"},"ts":1407188114000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I thought it was just a shim like e.g. Traceur","msgtype":"m.text"},"ts":1407188206000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"it's sort of a mix","msgtype":"m.text"},"ts":1407188242000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"polyfills for custom elements/html imports/etc, as well as a library of components and some syntax for simplifying the creation of components + databinding","msgtype":"m.text"},"ts":1407188318000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i dunno hixie, I think the arguments against the behaviour of constraint validation have been pretty well reasoned --- and not limited to my own criticisms of it. it's just not how people expect it to behave","msgtype":"m.text"},"ts":1407190066000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i don't understand the problem","msgtype":"m.text"},"ts":1407190087000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean, i really don't","msgtype":"m.text"},"ts":1407190091000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"valueMissing tells you if the value is missing","msgtype":"m.text"},"ts":1407190104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"badInput tells you if the user has entered bad input","msgtype":"m.text"},"ts":1407190111000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that seems to me to cover all the bases","msgtype":"m.text"},"ts":1407190121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what am i missing","msgtype":"m.text"},"ts":1407190124000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's basically it, but it's just more complicated than it really needs to be, there are things which are sort of misnomers (like [novalidate]), there's a lot of stuff there that really confuses users","msgtype":"m.text"},"ts":1407190190000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sounds like you're talking about more than just that bug","msgtype":"m.text"},"ts":1407190244000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if there's other things that need fixing, then please do file bugs (but bear in mind that if people depend on it, it's too late to change, you should have complained earlier when we asked for feedback!)","msgtype":"m.text"},"ts":1407190270000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, [novalidate] isn't related to the valueMissing issue, but it's in the same family of things which are not very intuitive to users","msgtype":"m.text"},"ts":1407190279000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that's fine, but then file a new bug :-)","msgtype":"m.text"},"ts":1407190440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i thought you were talking about the bug i commented on","msgtype":"m.text"},"ts":1407190463000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: in css-font-loading - \"unloaded\" sounds very much like something that used to be loaded but is no longer loaded","msgtype":"m.text"},"ts":1407191537000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: consider e.g. onunload, onbeforeunload, etc.","msgtype":"m.text"},"ts":1407191544000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hm, true.","msgtype":"m.text"},"ts":1407191553000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i don't have a much better term, but fwiw the media stuff uses \"none\"","msgtype":"m.text"},"ts":1407191594000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"other terms i've used include \"empty\", \"idle\", \"nothing\"","msgtype":"m.text"},"ts":1407191643000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: also it's more common to use readyState than status, fwiw.","msgtype":"m.text"},"ts":1407191712000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since i'm giving feedback, some more notes:","msgtype":"m.text"},"ts":1407191784000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i recommend against using ES-style [[Foo]] syntax, it is hard to read","msgtype":"m.text"},"ts":1407191799000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hm.  Unsure if I can change a property name, but I might try.  I'll put up a message for it, at least.","msgtype":"m.text"},"ts":1407191802000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, not super happy about that either. I want something to indicate \"internal\" properties, though.","msgtype":"m.text"},"ts":1407191817000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(It's super-inconvenient to type, since it collides with Bikeshed's shorthands.)","msgtype":"m.text"},"ts":1407191838000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"just say \"FontFace objects have an internal font status promise, which...\"","msgtype":"m.text"},"ts":1407191842000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where \"font status promise\" is <dfn>ed","msgtype":"m.text"},"ts":1407191852000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's a Promise<boolean>? Aren't you really just promising a void? I mean, you'll never resolve to false, will you?","msgtype":"m.text"},"ts":1407191890000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'd probably do a Promise<FontFace>, like load()","msgtype":"m.text"},"ts":1407191903000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(for loaded)","msgtype":"m.text"},"ts":1407191910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not sure what \"... of which one is not null and the rest are null.\" means. There's two things. One is null and the other not? What's the one that isn't null set to?","msgtype":"m.text"},"ts":1407191962000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Actually, that's an IDL error (Promise<boolean>).  The promise it refers to resolves to the FontFace.","msgtype":"m.text"},"ts":1407191993000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"rest are null\". Yeah, just two things. (Maybe there were more before, and this language is a remnant? I forget.)  The one that isn't null gets set by the constructor.","msgtype":"m.text"},"ts":1407192056000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"other than that, looks ok. I'm not sure about the whole Set thing, that looks a bit overcomplicated, but I assume that's just waiting for WebIDL to catch up.","msgtype":"m.text"},"ts":1407192211000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Can workers (service workers in particular) access WebRTC?","msgtype":"m.text"},"ts":1407192227000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i don't think they've made that work yet, but long term i'm not aware of a reason that shouldn't work","msgtype":"m.text"},"ts":1407192307000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ya that's kind of what I expected. Curious if there was a reason not; heartened that you don't think there is such a reason.","msgtype":"m.text"},"ts":1407192348000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hixie: Yeah, the Set mimicry is me waiting for IDL to have something that'll do it for me.  I had a [SetClass] attribute previously, but heycam ended up not wanting to spec that yet.","msgtype":"m.text"},"ts":1407192432000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think we're waiting for JS to actually define a subclassable Set/Map/etc.","msgtype":"m.text"},"ts":1407192448000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Right now, you simple can't subclass them properly.  Either you have to manually copy methods (and thus don't get new methods added by future specs or by authors), or you aren't able to enforce any constraints (because authors can modify it via the core Map/Set methods instead, bypassing whatever restrictions you've added).","msgtype":"m.text"},"ts":1407192509000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1407192513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sounds like the mess we had (have?) with Array","msgtype":"m.text"},"ts":1407192760000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1407192916000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Except it's even less explicable, because you don't even need a Proxy to get it right.","msgtype":"m.text"},"ts":1407192935000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"why didn't it get it right for Set/Map/etc. first time?","msgtype":"m.text"},"ts":1407193022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"if MySpecialSet has its own special 'add' method to enforce constraints, who is to stop me from invoking Set.prototype.add.call(mySpecialSet, value) and bypass any constraints anyways?","msgtype":"m.text"},"ts":1407193042000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Saying that it's \"right\" for a subclass to impose more restrictions than its superclass is a matter of opinion","msgtype":"m.text"},"ts":1407194407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"http://en.wikipedia.org/wiki/Liskov_substitution_principle etc","msgtype":"m.text"},"ts":1407194440000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"caitp: on that note, I think I'm permanently confused about which is the prototype in prototype-based programming","msgtype":"m.text"},"ts":1407194532000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I definitely understand the desire to define a class whose specification \"automatically\" grows any methods added to Map, say, but which adds certain restrictions onto its values. I wouldn't call that a \"subclass\", but it'd be worth finding a word for it that doesn't run into LSP complaints.","msgtype":"m.text"},"ts":1407194554000,"senderName":"jyasskin_w","senderId":"jyasskin_w@irc"},
{"content":{"body":"instead of this, we implement new NoInterfaceObjects in C++ which inherit from a common base in C++ and extend the behaviour appropriately, without exposing a way to do it in scriptland","msgtype":"m.text"},"ts":1407194614000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and this makes everybody happy","msgtype":"m.text"},"ts":1407194623000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"except that I guess we aren't even really doing that yet for all of the custom containers","msgtype":"m.text"},"ts":1407194782000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"One way of doing this would be to divide up the container classes into \"core\" and \"mixin\" methods","msgtype":"m.text"},"ts":1407194811000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so e.g. .add, .delete, [Symbol.iterator] would be core; .forEach would be mixinable","msgtype":"m.text"},"ts":1407194835000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and if we later added e.g. .map it would be mixinable, delegating to [Symbol.iterator]","msgtype":"m.text"},"ts":1407194853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but you don't want to use core .add, you want to impose restrictions on what can be added to your magic collection","msgtype":"m.text"},"ts":1407194866000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"that way you can do Object.define(MyMap, MapMixins) as long as MyMap implements the core interface","msgtype":"m.text"},"ts":1407194874000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407194878000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"you implement your own .add etc.; you don't subclass Map","msgtype":"m.text"},"ts":1407194887000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then you mixin MapMixins to get all the non-core methods","msgtype":"m.text"},"ts":1407194895000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wonder if this has anything to do with traits","msgtype":"m.text"},"ts":1407194906000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"traits would have been neat, I was sad that didn't make it =(","msgtype":"m.text"},"ts":1407194924000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"[[into harmony]]","msgtype":"m.text"},"ts":1407194957000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"this looks to be exactly related to traits","msgtype":"m.text"},"ts":1407194985000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"based on http://soft.vub.ac.be/~tvcutsem/traitsjs/tutorial.html","msgtype":"m.text"},"ts":1407194992000,"senderName":"Domenic","senderId":"Domenic@irc"}
]