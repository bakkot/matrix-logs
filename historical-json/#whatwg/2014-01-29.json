[
{"content":{"body":"TabAtkins: you about?","msgtype":"m.text"},"ts":1390954479000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"TabAtkins: I've got a CSS parsing question you might know the answer to (or know if there's no answer)","msgtype":"m.text"},"ts":1390954497000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"In a bit.","msgtype":"m.text"},"ts":1390954504000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: just ask, and wait around a bit as someone may answer later","msgtype":"m.text"},"ts":1390954582000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Also that, yes.","msgtype":"m.text"},"ts":1390954594000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wonders if he can construct any reasonable way to get profile number of calls per JS function in his browser","msgtype":"m.emote"},"ts":1390954743000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Probably nothing short of hacking on the browser, probably without JIT for simplicity.","msgtype":"m.text"},"ts":1390954781000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the question is about url-resolution for url() CSS values","msgtype":"m.text"},"ts":1390955093000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"and about when it occurs, in various cases (<style>, <link rel=stylesheet>, <div style=\"...\">)","msgtype":"m.text"},"ts":1390955122000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"that is, when does it occur (and where is that written down in a spec?)","msgtype":"m.text"},"ts":1390955138000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(Blink and WebKit seem to do very eager url resolution, while Gecko is lazier)","msgtype":"m.text"},"ts":1390955250000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"gsnedders: you can just instrument those methods by replacing them in script, no?","msgtype":"m.text"},"ts":1390955289000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: the HTML spec says for <style> that you should do it ASAP, so that if the base URL changes later, it doesn't affect the <style>'s URLs.","msgtype":"m.text"},"ts":1390955318000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: All functions, including those defined in JS.","msgtype":"m.text"},"ts":1390955322000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: well, those defined in JS you can find from any profiler, probably","msgtype":"m.text"},"ts":1390955338000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"most browsers have those these days, i think","msgtype":"m.text"},"ts":1390955355000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not sure how well they cope with short-lived functions, though","msgtype":"m.text"},"ts":1390955375000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"short lived\"?","msgtype":"m.text"},"ts":1390955381000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh you mean you don't want a sample, you want a strict count?","msgtype":"m.text"},"ts":1390955389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1390955401000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah short of instrumenting the code explicitly (which should be easy enough) i dunno how you'd do that","msgtype":"m.text"},"ts":1390955416000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(the js code, i mean)","msgtype":"m.text"},"ts":1390955423000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Like, a set of values N_i = x where i is the number of calls the function has and x is the number of functions with that number of calls.","msgtype":"m.text"},"ts":1390955450000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Also not clear if I want things to be like V8's FunctionCode class (i.e., a FunctionExpression/FunctionDeclaration in the script) or Function class (i.e., a Function object).","msgtype":"m.text"},"ts":1390955537000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what's your actual goal?","msgtype":"m.text"},"ts":1390955567000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hypothesis: most functions are called zero times, then a lot are called one time (exactly); the remainder is roughly linear, with N_i going down as i increases.","msgtype":"m.text"},"ts":1390955725000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"most of which functions? any function on any site?","msgtype":"m.text"},"ts":1390955809000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in what situations? page load? deep interaction?","msgtype":"m.text"},"ts":1390955817000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"In general\". Per page load, obviously.","msgtype":"m.text"},"ts":1390955831000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"well i mean the functions that are handlers for 'onclick' handlers presumbaly only get called when you click","msgtype":"m.text"},"ts":1390955870000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"All functions that the JS VM sees.","msgtype":"m.text"},"ts":1390955871000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so is the test protocol \"click everything once\"?","msgtype":"m.text"},"ts":1390955888000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"use the application like a noob for 5 minutes\"?","msgtype":"m.text"},"ts":1390955898000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I mean, really want everything from something like \"load FB, notice nothing of interest, close immediately\" to \"load FB, spend the next four hours talking to people on FB chat\".","msgtype":"m.text"},"ts":1390955934000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"i would imagine they'd have rather different profiles","msgtype":"m.text"},"ts":1390955955000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I dunno. It makes me wonder if it's going to be a bell curve or something.","msgtype":"m.text"},"ts":1390955996000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But, yeah, kinda tempted to just instrument browser and use it for a few weeks. Probably get useful data.","msgtype":"m.text"},"ts":1390956018000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Though \"how gsnedders uses his browser\" isn't necessarily representative. :)","msgtype":"m.text"},"ts":1390956036000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ultimately I'm interested in the probability of the function being called a certain number of times.","msgtype":"m.text"},"ts":1390956213000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hixie: can you give me a link for that behavior, I'm having trouble finding it; I wonder if some of it's in the parts delegated to the CSS OM spec","msgtype":"m.text"},"ts":1390956393000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(e.g., to \"create a css style sheet\")","msgtype":"m.text"},"ts":1390956407000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: it's in the <style> section, i think... let me check","msgtype":"m.text"},"ts":1390956416000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: ah, looks like i commented it out, expecting it to be handled by SimonSapin's CSS parsing spec","msgtype":"m.text"},"ts":1390956543000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: (search for \"found by the styling language's processor\" in the spec source)","msgtype":"m.text"},"ts":1390956561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: heh, yes, that's very clear","msgtype":"m.text"},"ts":1390956644000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: http://dev.w3.org/csswg/css-values/#urls says \" Relative URIs are resolved to full URIs using a base URI. For CSS style sheets, the base URI is that of the style sheet, not that of the source document.\"","msgtype":"m.text"},"ts":1390956759000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hixie: and it looks like style attributes defer to http://dev.w3.org/csswg/css-style-attr/, which also says that urls are resolved when the attribute is parsed","msgtype":"m.text"},"ts":1390956770000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but I’m not sure what your question is…","msgtype":"m.text"},"ts":1390956774000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: that doesn't help for <style> style sheets","msgtype":"m.text"},"ts":1390956777000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: yeah, but when is it parsed?","msgtype":"m.text"},"ts":1390956792000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: imho it should be parsed very eagerly, fwiw","msgtype":"m.text"},"ts":1390956811000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: \"In user agents that support CSS, the attribute's value must be parsed when the attribute is added or has its value changed\"","msgtype":"m.text"},"ts":1390956825000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"so the spec says what you want already","msgtype":"m.text"},"ts":1390956831000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"which is good :)","msgtype":"m.text"},"ts":1390956834000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"k, excellent","msgtype":"m.text"},"ts":1390956837000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I though it obvious that the based URL was the same as for any <a href> in the document, but indeed it’s not specified","msgtype":"m.text"},"ts":1390956842000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: the problem is that the base url in html docs can change dynamically","msgtype":"m.text"},"ts":1390956863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: fwiw, Firefox seems to re-resolve URLs in style attributes when the hosting element switches documents","msgtype":"m.text"},"ts":1390956875000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sounds like you think that's a Firefox bug?","msgtype":"m.text"},"ts":1390956883000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"SimonSapin: so is it the base url when the <style> element is created? when it's parsed? later?","msgtype":"m.text"},"ts":1390956887000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: there was some chatter in the bug you filed on this abotu imgs talking about whether we should do that on insertion or on adoption","msgtype":"m.text"},"ts":1390956911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: thanks for the link to that spec, I wasn't sure of the name","msgtype":"m.text"},"ts":1390956916000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"good point. Looks like a spec bug","msgtype":"m.text"},"ts":1390956918000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"aklein: i don't recall the conclusion, but obviously we should be consistent","msgtype":"m.text"},"ts":1390956924000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"aklein: (assuming there's no compat constraints)","msgtype":"m.text"},"ts":1390956938000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'll dig up the bug again, I didn't recall whether that had mentioned style","msgtype":"m.text"},"ts":1390956946000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"i don't htink it mentioned style explicitly","msgtype":"m.text"},"ts":1390956959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what do you think it should be?","msgtype":"m.text"},"ts":1390956960000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"aklein: i'm just saying that if possible, we should be consistent","msgtype":"m.text"},"ts":1390956967000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: what do browsers do?","msgtype":"m.text"},"ts":1390956984000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: seems reasonable. would you say that <style> should also re-resolve if it switches documents?","msgtype":"m.text"},"ts":1390956988000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"SimonSapin: i imagine they just use the current one at parse time","msgtype":"m.text"},"ts":1390956992000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's a little different in that case...","msgtype":"m.text"},"ts":1390957010000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"because it's non-local","msgtype":"m.text"},"ts":1390957014000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: i think we should be consistent throughout. but for <style> i dunno if i'd say \"reparse\" or \"reresolve\"","msgtype":"m.text"},"ts":1390957020000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: ^","msgtype":"m.text"},"ts":1390957029000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"eww","msgtype":"m.text"},"ts":1390957031000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: do we reparse if you insert/remove/insert in the same doc?","msgtype":"m.text"},"ts":1390957032000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no need to reparse even if we want to reresolve","msgtype":"m.text"},"ts":1390957057000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hixie: is parsing observable?","msgtype":"m.text"},"ts":1390957065000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: it is if you changed the OM","msgtype":"m.text"},"ts":1390957075000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: right, if you hold onto the OM...whee","msgtype":"m.text"},"ts":1390957083000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1390957088000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"requiring reparsing seems bad","msgtype":"m.text"},"ts":1390957095000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"sure, but requirin that you hold on to the OM when the <style> is taken out of a doc might be bad too","msgtype":"m.text"},"ts":1390957115000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so i could argue this either way","msgtype":"m.text"},"ts":1390957121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the resolving difference between Firefox and Blink is visible via the OM, too, which is unfortunate","msgtype":"m.text"},"ts":1390957124000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Firefox says the value is 'url(\"relative/url.png\")' while Blink says it's 'url(\"http://foo.bar/relative/url.png\")'","msgtype":"m.text"},"ts":1390957168000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"maybe that just means we have more webcompat leeway?","msgtype":"m.text"},"ts":1390957194000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"SimonSapin: looks like CSS Values and Units doesn't speak to the CSS OM?","msgtype":"m.text"},"ts":1390957307000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: not directly, but it talks about computed value","msgtype":"m.text"},"ts":1390957381000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"so with different API you may get specified or computed values which may differ","msgtype":"m.text"},"ts":1390957401000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"\"When a <url> appears in the computed value of a property, it is resolved to an absolute URL\"","msgtype":"m.text"},"ts":1390957443000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"OMG DONE MINUTING","msgtype":"m.text"},"ts":1390957803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, so anyway, I talked about this with Anne.","msgtype":"m.text"},"ts":1390957812000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"URL canonicalization (turning to absolute) needs to happen during parsing.","msgtype":"m.text"},"ts":1390957822000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Absolutizing is, in fact, part of URL parsing itself.","msgtype":"m.text"},"ts":1390957836000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so is the relative URL dropped on the floor?","msgtype":"m.text"},"ts":1390957860000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Moving documents around to new base URLs need to be dealt with.","msgtype":"m.text"},"ts":1390957867000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"will let you finish :)","msgtype":"m.text"},"ts":1390957879000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: Yes. You enter \"url(/foo)\", you immediately get back \"url(http://example.com/foo)\".","msgtype":"m.text"},"ts":1390957886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's no way to observe it being relative.","msgtype":"m.text"},"ts":1390957901000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Besides, maybe, .cssText, if we keep that as literal stylesheet bytes.","msgtype":"m.text"},"ts":1390957916000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's pre-parsing then.","msgtype":"m.text"},"ts":1390957923000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it sounds like you're in the \"you have to re-parse if you want to re-resolve\" camp","msgtype":"m.text"},"ts":1390957963000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Not... necessarily.  Parsing *the url itself* requires absolutizing; the two concepts are part and parcel.","msgtype":"m.text"},"ts":1390957994000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Parsing *the url() function* doesn't necessarily.","msgtype":"m.text"},"ts":1390958001000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: CSS parsing does not need to parse URLs immediately","msgtype":"m.text"},"ts":1390958011000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But we all do so.","msgtype":"m.text"},"ts":1390958012000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(maybe it should)","msgtype":"m.text"},"ts":1390958023000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"But we can certainly keep around the unparsed url and absolutize it on demand.","msgtype":"m.text"},"ts":1390958028000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: not sure who \"we\" is, note that I pointed out above that Firefox seems to only absolutize lazily","msgtype":"m.text"},"ts":1390958051000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"But \"on demand\" should include \"when you serialize a declared value\", which is the lowest-level way to observe a CSS value short of grabbing network bytes.","msgtype":"m.text"},"ts":1390958065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"we\" there means the browser.","msgtype":"m.text"},"ts":1390958077000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: in my testing they don't do that. div.style.backgroundImage returns 'urlI(\"relative/img.png\")'","msgtype":"m.text"},"ts":1390958097000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but with fewer l's","msgtype":"m.text"},"ts":1390958104000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"We definitely absolutize early.","msgtype":"m.text"},"ts":1390958200000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Blink and WebKit do, yes","msgtype":"m.text"},"ts":1390958228000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but it's not true that \"we all do so\" (not at the moment, anyway)","msgtype":"m.text"},"ts":1390958243000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Okay, true.","msgtype":"m.text"},"ts":1390958258000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: What's the context of your question?","msgtype":"m.text"},"ts":1390958294000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the specific case I'd like to fix is that <template><div style=\"background-image: url('foo/bar.png')\"></div></template> is busted in Blink","msgtype":"m.text"},"ts":1390958359000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"it ends up as url()","msgtype":"m.text"},"ts":1390958378000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"That's weird.  Because there's nothing to absolutize it against, so it just punts?","msgtype":"m.text"},"ts":1390958401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1390958408000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"my reading of the CSS Values thingy suggests that perhaps the punting is the bug","msgtype":"m.text"},"ts":1390958424000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"and it should actually leave the relative URL there if it can't complete the URL","msgtype":"m.text"},"ts":1390958436000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"The punting is definitely the bug.","msgtype":"m.text"},"ts":1390958436000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Are you talking about my blog post? Or the CSSOM Values spec?","msgtype":"m.text"},"ts":1390958450000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: http://dev.w3.org/csswg/css-values/#urls","msgtype":"m.text"},"ts":1390958507000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"hmm, or maybe it was cssom, I don't see this now","msgtype":"m.text"},"ts":1390958536000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Don't read much into that. >_< I haven't written it well yet.","msgtype":"m.text"},"ts":1390958542000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gonna fix.","msgtype":"m.text"},"ts":1390958544000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's reffing an RFC, for example.","msgtype":"m.text"},"ts":1390958554000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Should be the URL spec.","msgtype":"m.text"},"ts":1390958559000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1390958576000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1390958578000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"TabAtkins: both provide \"absolutize an URL\", and it’s up to CSS when to call it","msgtype":"m.text"},"ts":1390958593000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"TabAtkins: but your considered opinion is that url() in a document with no base URL should do what?","msgtype":"m.text"},"ts":1390958617000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"But hm, so far I'm planning that \"declared value\" http://dev.w3.org/csswg/css-cascade/#declared gives an absolute url.","msgtype":"m.text"},"ts":1390958622000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A document with no base URL is not something I've considered yet.","msgtype":"m.text"},"ts":1390958633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Is the template document the only one so far?","msgtype":"m.text"},"ts":1390958644000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk-cloud says all documents have an URL, even if it’s one with a non-relative scheme that can not be used as a base","msgtype":"m.text"},"ts":1390958673000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I wonder what that means?","msgtype":"m.text"},"ts":1390958704000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What is the result of absolutizing something with a not-base URL?","msgtype":"m.text"},"ts":1390958715000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"absolutizing can fail","msgtype":"m.text"},"ts":1390958737000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hrm. Lemme go check his spec.","msgtype":"m.text"},"ts":1390958752000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: document.implementation.createHTMLDocument('')","msgtype":"m.text"},"ts":1390958765000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"data:text/html,<a href=foo>Test","msgtype":"m.text"},"ts":1390958768000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"anyway, the result is the same as if you didn’t have a base","msgtype":"m.text"},"ts":1390958807000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Ah, and it looks like the result (at least in Chrome) is that the url is \"\"","msgtype":"m.text"},"ts":1390958937000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Problem is that the URL spec has no such concept as \"relative URL\".","msgtype":"m.text"},"ts":1390958988000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's absolute, or it's nothing, or it's \"a string that we haven't yet tried to parse\".","msgtype":"m.text"},"ts":1390959002000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Problem with the concept of \"just hang the relative url off of it\", that is. Maybe not a problem with the URL spec.","msgtype":"m.text"},"ts":1390959032000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: So it looks like Blink's current behavior of returning url() is correct.","msgtype":"m.text"},"ts":1390959109000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: And there's no way for us to do anything else.","msgtype":"m.text"},"ts":1390959129000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: Without inventing stuff.","msgtype":"m.text"},"ts":1390959145000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: possibly-relative URL == string from url() or href, etc","msgtype":"m.text"},"ts":1390959166000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"absolute URL == parsed URL","msgtype":"m.text"},"ts":1390959171000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"an object, which can be serialized back to a string","msgtype":"m.text"},"ts":1390959192000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1390959213000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm.","msgtype":"m.text"},"ts":1390959214000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Maybe we can define serialization of URL as \"serialization of the url, or else the unparsed string if it can't be parsed\".","msgtype":"m.text"},"ts":1390959241000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That would also let us preserve nonsense urls that can't be parsed.","msgtype":"m.text"},"ts":1390959254000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I’d say specified values should be unparsed URL, as from the stylesheet","msgtype":"m.text"},"ts":1390959296000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"for computed values serialize, but do we really need to preserve nonsense input?","msgtype":"m.text"},"ts":1390959322000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I think we should return an absolute url if we can.","msgtype":"m.text"},"ts":1390959433000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No reason not to.","msgtype":"m.text"},"ts":1390959438000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But we shouldn't throw away info if we can't absolutize it yet.","msgtype":"m.text"},"ts":1390959454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If absolutization (aka URL parsing) fails, we can’t","msgtype":"m.text"},"ts":1390959470000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"the info is still available in the specified value","msgtype":"m.text"},"ts":1390959484000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yes, that's what I'm saying.","msgtype":"m.text"},"ts":1390959492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...I think.","msgtype":"m.text"},"ts":1390959494000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"element.style is computed values, right?","msgtype":"m.text"},"ts":1390959558000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Nope, declared values.","msgtype":"m.text"},"ts":1390959564000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What you smokin', bro?","msgtype":"m.text"},"ts":1390959568000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":".style is just access to the style='' stylesheet.","msgtype":"m.text"},"ts":1390959578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I agree that a computed url() value should take a stand on non-absolutizable urls.","msgtype":"m.text"},"ts":1390959669000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Returning url(about:invalid).","msgtype":"m.text"},"ts":1390959681000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(As currently defined in V&U.)","msgtype":"m.text"},"ts":1390959696000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No interop :/ data:text/html,<body id=foo style=\"background:url(bar)\"><script>document.write(document.getElementById('foo').style.backgroundImage)</script>","msgtype":"m.text"},"ts":1390959705000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Yeah, I know that BlinKit right now absolutizes right away. (And indicates an invalid url as \"url()\".)","msgtype":"m.text"},"ts":1390959816000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And FF does something different.","msgtype":"m.text"},"ts":1390959829000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein: So does something like what I said sound okay? I can restate it compactly, if you want.","msgtype":"m.text"},"ts":1390959982000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sorry, got pulled away, a compact suggestion would be great (reading scrollback now...)","msgtype":"m.text"},"ts":1390960023000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"kk, coming:","msgtype":"m.text"},"ts":1390960032000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"CSS parsing does not immediately absolutize a url.","msgtype":"m.text"},"ts":1390960046000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"At declared-value time, we try to absolutize it.  If it can be absolutized, great.","msgtype":"m.text"},"ts":1390960061000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"When serializing a declared value, if it's a URL, serialize that. Otherwise, serialize the string.","msgtype":"m.text"},"ts":1390960082000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"declared, as in http://dev.w3.org/csswg/css-cascade/#declared ?","msgtype":"m.text"},"ts":1390960092000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"At computed-value time, we *need* a valid url.  If it can't be absolutized, use the guaranteed-invalid url \"about:invalid\".","msgtype":"m.text"},"ts":1390960105000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SimonSapin: Yes.","msgtype":"m.text"},"ts":1390960110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right now we can only observe \"declared\", \"computed\", and \"used\" (in some cases).","msgtype":"m.text"},"ts":1390960129000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"isn’t that as soon as parsing?","msgtype":"m.text"},"ts":1390960131000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Not... quite.  Or if you think it's simpler to consider it \"as soon as parsing\", then make the necessary edits to what I said.","msgtype":"m.text"},"ts":1390960161000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"A <url> declared value contains either a URL or a string, depending on whether it can be absolutized or not.","msgtype":"m.text"},"ts":1390960195000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So what would the specified value be?","msgtype":"m.text"},"ts":1390960218000,"senderName":"annevk_","senderId":"annevk_@irc"},
{"content":{"body":"If the URL parser returns failure, using a URL that is about:invalid makes sense","msgtype":"m.text"},"ts":1390960255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure when we go from \"string or URL\" to \"URL\".  Sometime between declared and computed.  The exact time is currently unobservable.","msgtype":"m.text"},"ts":1390960256000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don’t really want to have a thing that can be either","msgtype":"m.text"},"ts":1390960284000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"(unless we have to for web compat)","msgtype":"m.text"},"ts":1390960289000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"When would you have a string?","msgtype":"m.text"},"ts":1390960299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: aklein gave an example where we don't want to lose information (in the form of returning \"url(about:invalid)\") when serialziing declared values.","msgtype":"m.text"},"ts":1390960303000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I still want to observe the given value even if the document doesn't have a base url.","msgtype":"m.text"},"ts":1390960331000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so, counter-proposal: declared/cascaded/specified value is a string as in the input, unparsed","msgtype":"m.text"},"ts":1390960370000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"computed values is always a parsed URL, possibly about:invalid","msgtype":"m.text"},"ts":1390960384000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"That's acceptable to me too, I guess.  Requires changing BlinKit.","msgtype":"m.text"},"ts":1390960404000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You could preserve the specified value, but also have a parsed/declared value alongside that's a URL?","msgtype":"m.text"},"ts":1390960407000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: You're mixing up terms. ^_^","msgtype":"m.text"},"ts":1390960425000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The terms have changed :/","msgtype":"m.text"},"ts":1390960436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"declared -> cascaded -> specified -> computed","msgtype":"m.text"},"ts":1390960438000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: We just moved what we call \"the value that you pull directly from a stylesheet\".  \"specified\" was overused for incompatible things.","msgtype":"m.text"},"ts":1390960468000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh man. Specified in my head is \"the value I wrote down\"","msgtype":"m.text"},"ts":1390960507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the specs it's not. ^_^","msgtype":"m.text"},"ts":1390960523000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's stuff mixed up with inherit/initial, and the cascade.","msgtype":"m.text"},"ts":1390960534000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didn't want to throw away the term \"specified\", so I left it with one of the existing meanings.","msgtype":"m.text"},"ts":1390960565000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So during parsing I think for URL values you want to preserve the value the author wrote down, but also run it through the URL parser.","msgtype":"m.text"},"ts":1390960574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So maybe declared needs to be a tuple","msgtype":"m.text"},"ts":1390960590000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Do we need that?","msgtype":"m.text"},"ts":1390960600000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rather, why do we want a parsed URL during declared time?","msgtype":"m.text"},"ts":1390960632000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You need to run it through the URL parser to not be tripped by changing base URLs in HTML documents","msgtype":"m.text"},"ts":1390960634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You want to keep the original value for <template>","msgtype":"m.text"},"ts":1390960646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Elaborate on that first one?","msgtype":"m.text"},"ts":1390960653000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<style> ... </style> <script> changeBaseURL() </script>","msgtype":"m.text"},"ts":1390960681000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie's example, basically","msgtype":"m.text"},"ts":1390960720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, but what's the observable effect of resolving it in the declared value?","msgtype":"m.text"},"ts":1390960780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I don't think the absolute url can be observed until computed-value time.","msgtype":"m.text"},"ts":1390960803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Even through side-effects.","msgtype":"m.text"},"ts":1390960808000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: do you want to require that we compute sync?","msgtype":"m.text"},"ts":1390960922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so after you guys figure that out, my next question is, does CSS provide some hook for DOM to call upon adoption to re-resolve URLs?","msgtype":"m.text"},"ts":1390960924000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: not at the moment","msgtype":"m.text"},"ts":1390960947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: rather, should it?","msgtype":"m.text"},"ts":1390960957000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: we don't really have it on the HTML side either","msgtype":"m.text"},"ts":1390960977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no, though it seems we may end up with it (should go find that bug)","msgtype":"m.text"},"ts":1390960995000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but I guess you don't necessarily need it to fix <template>","msgtype":"m.text"},"ts":1390961007000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: What do you mean?  We can't observe the difference until we compute, and that happens at some undefined time based on style flushing.","msgtype":"m.text"},"ts":1390961011000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"as long as you clone or import","msgtype":"m.text"},"ts":1390961012000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: so for the baseURI bug we kind of came to the conclusion that unless things got declarative we don't need anything complicated for now","msgtype":"m.text"},"ts":1390961034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: if the script changes the base URL, isn't it observable at what point computation happens?","msgtype":"m.text"},"ts":1390961075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not really.  You can't observe except through computed values, and *that* triggers sync behavior.","msgtype":"m.text"},"ts":1390961154000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That is, calling getComputedStyle does sync work.","msgtype":"m.text"},"ts":1390961167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yes","msgtype":"m.text"},"ts":1390961170000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: <style> url(\"/x\") </style> and then <script> getComputed(); changeBaseURL() </script> vs <script> changeBaseURL(); getComputed(); </script>","msgtype":"m.text"},"ts":1390961204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: they should do the same","msgtype":"m.text"},"ts":1390961207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, they're observably different.","msgtype":"m.text"},"ts":1390961231000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But now I need to go to dinner and will have to continue this later.","msgtype":"m.text"},"ts":1390961239000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And that would be a bug","msgtype":"m.text"},"ts":1390961242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That's why URL parsing needs to happen during CSS parsing","msgtype":"m.text"},"ts":1390961251000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm very happy the CSS WG is more deeply investigating lifecycle though of style sheets","msgtype":"m.text"},"ts":1390961361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the trouble in the current blink impl is that the original url is gone when instantiating the template, so it's not even possible to do the url resolution \"by hand\". so at the least it needs to be available somewhere","msgtype":"m.text"},"ts":1390961364000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: I argued for storing a tuple as the \"declared value\" above","msgtype":"m.text"},"ts":1390961382000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: the input and the parsed URL","msgtype":"m.text"},"ts":1390961389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: .cssText could use the input, getComputed the latter","msgtype":"m.text"},"ts":1390961426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and style attribute serialization corresponds to .cssText? (my CSSOM knowledge is....developing)","msgtype":"m.text"},"ts":1390961470000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: serialization of a style attribute is .style.cssText","msgtype":"m.text"},"ts":1390961541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: see http://dev.w3.org/csswg/cssom/#the-cssstyledeclaration-interface","msgtype":"m.text"},"ts":1390961554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: and http://dev.w3.org/csswg/cssom/#elementcssinlinestyle","msgtype":"m.text"},"ts":1390961583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's some fancy IDL","msgtype":"m.text"},"ts":1390961613000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"that sounds fine to me","msgtype":"m.text"},"ts":1390961620000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(not least because it's a minimal change to Blink; I needn't hold a URL-resolver)","msgtype":"m.text"},"ts":1390961643000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: I'm completely with you on needing to resolve eagerly","msgtype":"m.text"},"ts":1390961669000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"A lot of legacy there in those APIs","msgtype":"m.text"},"ts":1390961732000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And a lot of neglect in terms of maintenance","msgtype":"m.text"},"ts":1390961761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Better now because of zcorpan","msgtype":"m.text"},"ts":1390961776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"where are we on nanotasks?","msgtype":"m.text"},"ts":1390970714000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"oh we have nanotasks now?","msgtype":"m.text"},"ts":1390970891000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic_: your mention is the first I've heard","msgtype":"m.text"},"ts":1390970907000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I assume it must be something recently added","msgtype":"m.text"},"ts":1390970931000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: scroll up :P. custom elements seems to have a nanotask queue used (a) inside microtask checkpoints; (b) when returnign control from C++ to script","msgtype":"m.text"},"ts":1390970938000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(b) seems weird because i was pretty sure that was what the event loop was for","msgtype":"m.text"},"ts":1390970952000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"oh custom elements..","msgtype":"m.text"},"ts":1390970964000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic_: right","msgtype":"m.text"},"ts":1390970992000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"of course (a) is also weird because microtasks are already a queue so why have a queue inside a queue unless you really liked Inception and wanted to implement it in your specs I guess?","msgtype":"m.text"},"ts":1390971034000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1390971055000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I reckon dglazkov is the only person here who knows","msgtype":"m.text"},"ts":1390971083000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wishes Hixie was reviewing the custom-elements spec more","msgtype":"m.emote"},"ts":1390971118000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah there was some explanation above but i couldn't understand it so thus my \"where are we on nanotasks\" query. annevk-cloud seemed to be following along pretty well, maybe he could translate.","msgtype":"m.text"},"ts":1390971142000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"oh, nanotasks","msgtype":"m.text"},"ts":1390974074000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk-cloud, could you please explain to me tomorrow why we need such things","msgtype":"m.text"},"ts":1390974086000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"to pave the way towards picotasks, duh","msgtype":"m.text"},"ts":1390974457000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no doubt followed by 2^(-n)tasks","msgtype":"m.text"},"ts":1390974496000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SimonSapin: I think it makes sense to reduce the CSS @charset search buffer size, yes. How much depends mainly on whether the ban on whitespace inside the quotes sticks.","msgtype":"m.text"},"ts":1390975864000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: browsers apparently do trim whitespace, and we fixed the spec","msgtype":"m.text"},"ts":1390977909000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"banning whitespace was accidental","msgtype":"m.text"},"ts":1390977920000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"so when are mutation events going to be removed?","msgtype":"m.text"},"ts":1390978408000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://github.com/inverts/Data-Tamers/blob/4c8599fd293c84216f161608b08ae1c85532fc25/AppliedAnalytics/src/main/webapp/resources/cache/css/site.css#L1","msgtype":"m.text"},"ts":1390978899000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://github.com/blazedev/simbud/blob/34412f7ba14b4fb7f3d89ac0565b4a6cde37f00d/frontend/app/bower_components/angular/angular-csp.css","msgtype":"m.text"},"ts":1390978946000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"uppercase and comment first are the only mistakes in the first 10 pages of results for \"charset\" in css on github (sorting by recently indexed)","msgtype":"m.text"},"ts":1390979131000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"does someone have a dataset of external CSS files?","msgtype":"m.text"},"ts":1390979204000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: if white space trimming stays, then I have no good way of suggesting a number other than 1024 (which is intuitively rather high but at least is what Gecko already does).","msgtype":"m.text"},"ts":1390983415000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I was wondering if there are any community people here as well who'd want to submit to http://www.mobileconference.nl to speak at the DMC14?","msgtype":"m.text"},"ts":1390983665000,"senderName":"Martin1982","senderId":"Martin1982@irc"},
{"content":{"body":"gsnedders: Pretty sure the MS paper from a few years ago looked at that kind of thing","msgtype":"m.text"},"ts":1390992954000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: this status box looks misplaced? http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#text-0","msgtype":"m.text"},"ts":1390994448000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"looking at the syntax section, i wonder if it's time to lift the ban on -- in comments","msgtype":"m.text"},"ts":1390994576000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"files a bug","msgtype":"m.emote"},"ts":1390994735000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Heh, that's a nice old link","msgtype":"m.text"},"ts":1390995237000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Surely it shouldn't be too hard to get the wpt tests into those boxes","msgtype":"m.text"},"ts":1390995276000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"brings http://html5.org/tools/web-apps-tracker?from=8432&to=8433 to MikeSmith and hsivonen's attention","msgtype":"m.emote"},"ts":1391001284000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Anyone got a nice example of a bug in either blink or firefox that can be demoed in a few lines of code?","msgtype":"m.text"},"ts":1391001534000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what kind of bug?","msgtype":"m.text"},"ts":1391001725000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Any kind","msgtype":"m.text"},"ts":1391001770000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Well something you could write a test for","msgtype":"m.text"},"ts":1391001786000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I can find something from the testsuite I guess","msgtype":"m.text"},"ts":1391001801000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In blink?","msgtype":"m.text"},"ts":1391001993000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Blob()","msgtype":"m.text"},"ts":1391002000000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(throws where it shouldn't)","msgtype":"m.text"},"ts":1391002009000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, that's quite a reasonable example","msgtype":"m.text"},"ts":1391002646000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I would slightly prefer a bug in Firefox I think","msgtype":"m.text"},"ts":1391002660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Blob()","msgtype":"m.text"},"ts":1391002733000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(constructs a Blob while annevk thinks it shouldn't)","msgtype":"m.text"},"ts":1391002743000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heh. I can't cite annevk as a spec","msgtype":"m.text"},"ts":1391002806000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I'm sure there's precedent","msgtype":"m.text"},"ts":1391002827000,"senderName":"darobin_","senderId":"darobin_@irc"},
{"content":{"body":"(not sure why we want WebIDL to be different to half of the javascript stdlib here)","msgtype":"m.text"},"ts":1391002838000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I had one in the FileReader stuff...","msgtype":"m.text"},"ts":1391002843000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(new FileReader()).abort();","msgtype":"m.text"},"ts":1391002953000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Throws in Gecko, but shouldn't","msgtype":"m.text"},"ts":1391002962000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham, ^","msgtype":"m.text"},"ts":1391002980000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: Yeah, it did. But that data is several years out of date. Usage of JS is changing pretty quickly.","msgtype":"m.text"},"ts":1391003033000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: Sadly, I can't remember which MSR paper it was in :)","msgtype":"m.text"},"ts":1391003104000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Nor can I, but I think you should start with that paper anyway","msgtype":"m.text"},"ts":1391003306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: document.createElement('image') instanceof HTMLUnknownElement","msgtype":"m.text"},"ts":1391003386000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://research.microsoft.com/en-us/um/people/livshits/papers%5Cpdf%5Cwebapps10b.pdf","msgtype":"m.text"},"ts":1391003414000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: I think I will use the FileReader one","msgtype":"m.text"},"ts":1391003435000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan, blink bug","msgtype":"m.text"},"ts":1391003454000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://research.microsoft.com/pubs/115734/aitypes.pdf --- is it just me or is there nothing novel in that paper?","msgtype":"m.text"},"ts":1391003508000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: blink gives true for me which matches the spec afaict","msgtype":"m.text"},"ts":1391003519000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(I presume I'm just missing what makes it novel)","msgtype":"m.text"},"ts":1391003520000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Oh?","msgtype":"m.text"},"ts":1391003546000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Firefox should be true too...","msgtype":"m.text"},"ts":1391003559000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If only we had a testsuite to verify these things… ;)","msgtype":"m.text"},"ts":1391003589000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think we do","msgtype":"m.text"},"ts":1391003608000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"i get HTMLElement in gecko (nightly from 2014-01-14)","msgtype":"m.text"},"ts":1391003626000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hrm","msgtype":"m.text"},"ts":1391003651000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: That paper only shows that 50-70% of functions are called zero times, makes no statement about functions called once.","msgtype":"m.text"},"ts":1391003680000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But yes, html/semantics/interfaces.html and html/editing/dnd/the-draggable-attribute/draggable_attribute.html test it","msgtype":"m.text"},"ts":1391003700000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, the latter doesn't use it","msgtype":"m.text"},"ts":1391003746000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Anyway","msgtype":"m.text"},"ts":1391003748000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: I thought there was a longer paper too. But anyway don't complain at me for helping you with your background reading :p","msgtype":"m.text"},"ts":1391003756000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: But I have to complain at you! It's what I do!","msgtype":"m.text"},"ts":1391003794000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"You could complain at zcorpan?","msgtype":"m.text"},"ts":1391003813000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Nah, I always complained at jgraham.","msgtype":"m.text"},"ts":1391003833000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So you only glared at zcorpan?","msgtype":"m.text"},"ts":1391003846000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"he still does","msgtype":"m.text"},"ts":1391003868000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Have we removed HTMLBaseFontElement from the spec yet?","msgtype":"m.text"},"ts":1391003914000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Apparently not","msgtype":"m.text"},"ts":1391003930000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://research.microsoft.com/pubs/115687/paper.pdf seems to be the longer thing that the paper jgraham linked me to summarizes.","msgtype":"m.text"},"ts":1391003934000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"mathiasbynens: Are you planning to finish the review of https://critic.hoppipolla.co.uk/r/56 ?","msgtype":"m.text"},"ts":1391007307000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: new to Critic, sorry – what do I need to do? review the new changes?","msgtype":"m.text"},"ts":1391007501000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: Yes","msgtype":"m.text"},"ts":1391007550000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"https://critic.hoppipolla.co.uk/showcommit?review=56&filter=pending","msgtype":"m.text"},"ts":1391007572000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"Your work here is done!\"?","msgtype":"m.text"},"ts":1391007594000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Ms2ger watches workers/\"","msgtype":"m.text"},"ts":1391007615000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"mathiasbynens\twatches\tWorkers/\"","msgtype":"m.text"},"ts":1391007627000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1391007631000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But also mathiasbynens reviews /","msgtype":"m.text"},"ts":1391007653000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"unwatches","msgtype":"m.emote"},"ts":1391007703000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Critic seems confused","msgtype":"m.text"},"ts":1391007780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Let me kick it","msgtype":"m.text"},"ts":1391007783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mathiasbynens: You should be able to review now :)","msgtype":"m.text"},"ts":1391007849000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: moar work! thanks","msgtype":"m.text"},"ts":1391007878000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"was just about to ping mathiasbynens about that","msgtype":"m.emote"},"ts":1391008034000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is there a way to have Critic send an email whenever someone responds to a review i made?","msgtype":"m.text"},"ts":1391008091000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"doesn't it already?","msgtype":"m.text"},"ts":1391008144000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"nope. `email.activated` is enabled, though","msgtype":"m.text"},"ts":1391008167000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: You didn't tell it your email address though :)","msgtype":"m.text"},"ts":1391008216000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"See the \"home\" page","msgtype":"m.text"},"ts":1391008225000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: thanks, i was looking through settings instead","msgtype":"m.text"},"ts":1391008301000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: A reasonable approach","msgtype":"m.text"},"ts":1391008362000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But wrong ;)","msgtype":"m.text"},"ts":1391008370000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"not sure if the new File test made chrome crash","msgtype":"m.text"},"ts":1391008670000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"But if it did you get a badge","msgtype":"m.text"},"ts":1391008716000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mathiasbynens: refresh","msgtype":"m.text"},"ts":1391008927000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens++","msgtype":"m.text"},"ts":1391009511000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"also zcorpan++ ofc","msgtype":"m.text"},"ts":1391009517000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok merged, now fix the browsers","msgtype":"m.text"},"ts":1391009636000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hehe","msgtype":"m.text"},"ts":1391009678000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"sigh, the Workers directory had been renamed","msgtype":"m.text"},"ts":1391009904000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1391009944000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Why did it get renamed?","msgtype":"m.text"},"ts":1391009976000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Oh since r/56 seems quite likely I guess","msgtype":"m.text"},"ts":1391009985000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"to match TR names or some such i think","msgtype":"m.text"},"ts":1391010004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thanks mathiasbynens","msgtype":"m.text"},"ts":1391010018000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"now work time is up for today :-)","msgtype":"m.text"},"ts":1391010030000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, that's the general naming scheme","msgtype":"m.text"},"ts":1391010037000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Blob() should throw without new","msgtype":"m.text"},"ts":1391010665000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"See ES6","msgtype":"m.text"},"ts":1391010683000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Does ES6 also make Array() throw without new?","msgtype":"m.text"},"ts":1391010757000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Not sure","msgtype":"m.text"},"ts":1391010911000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"It's unclear how compatible subclassing is per Waldo, but if it is we ought to make it work on our side","msgtype":"m.text"},"ts":1391010972000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Well if it breaks Image() and Array() and Blob() and so on it is surely incompatible","msgtype":"m.text"},"ts":1391011019000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ES6 legacy classes are not changed to throw","msgtype":"m.text"},"ts":1391013832000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but new classes throw","msgtype":"m.text"},"ts":1391013836000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Allen explained this on list a while back lemme find the link","msgtype":"m.text"},"ts":1391013843000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"So why should legacy DOM classes change?","msgtype":"m.text"},"ts":1391013876000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"unclear","msgtype":"m.text"},"ts":1391013896000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if users can compatibly not use `new` cross browser then they probably shouldn't","msgtype":"m.text"},"ts":1391013913000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but if browsers disagree on this point it's an opportunity to move to the newer semantics","msgtype":"m.text"},"ts":1391013926000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's this message http://esdiscuss.org/topic/should-the-default-constructor-return-the-return-value-of-super#content-6 although the first half of it is relevant to the post it's replying to; the second half is the more general guidance","msgtype":"m.text"},"ts":1391013977000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(pun intended)?","msgtype":"m.text"},"ts":1391013980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In any case this seems pretty dumb","msgtype":"m.text"},"ts":1391013993000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Since it bakes inconsistency into the language","msgtype":"m.text"},"ts":1391014003000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i kind of agree","msgtype":"m.text"},"ts":1391014019000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the alternative though is making subclassing very hard to get right for all classes ever","msgtype":"m.text"},"ts":1391014053000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"in order to preserve consistency with legacy Array, Date, RegExp","msgtype":"m.text"},"ts":1391014067000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"And all of DOM","msgtype":"m.text"},"ts":1391014111000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"cross browser?","msgtype":"m.text"},"ts":1391014151000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"DOM has so few constructors anyway @_@","msgtype":"m.text"},"ts":1391014217000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I'm pretty sure that there are at least some that work cross browser","msgtype":"m.text"},"ts":1391014248000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Chrome throws for most","msgtype":"m.text"},"ts":1391014331000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"I talked with bz the other day and we have a plan","msgtype":"m.text"},"ts":1391014347000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Plans are good","msgtype":"m.text"},"ts":1391014354000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I guess","msgtype":"m.text"},"ts":1391014357000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Biggest problem is our testsuite","msgtype":"m.text"},"ts":1391014361000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"That sounds unlikely","msgtype":"m.text"},"ts":1391014375000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I mean it makes bz's life suck because he has to fix the tests","msgtype":"m.text"},"ts":1391014393000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In terms of executing the plan it is","msgtype":"m.text"},"ts":1391014401000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"But it isn't an actual compat issue","msgtype":"m.text"},"ts":1391014405000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: more than ES though ;)","msgtype":"m.text"},"ts":1391014478000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: Back to the convo from last night.  I don't see how/why you're saying that \"getComputed(); changeBaseURL();\" should be give the same results as \"changeBaseURL(); getComputed();\".  Calling gCS compatibly forces a sync style flush + layout, so resolving url()s will also happen syncly.","msgtype":"m.text"},"ts":1391014705000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So before/after changing the base url, you'll see different computed values for url()s.","msgtype":"m.text"},"ts":1391014745000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: because that would be incompatible with what is happening today and would make fetching images racy","msgtype":"m.text"},"ts":1391015181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: once the style sheet is parsed the browser should be able to start fetching happens","msgtype":"m.text"},"ts":1391015199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: so that requires the URL to be parsed","msgtype":"m.text"},"ts":1391015204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/happens//","msgtype":"m.text"},"ts":1391015228000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't understand what about this is \"incompatibfle with what is happening today\". To the best of my knowledge, I'm describing reality.","msgtype":"m.text"},"ts":1391015232000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Ah, but yeah, allowing preloading does require you to try and parse the url immediately.","msgtype":"m.text"},"ts":1391015264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(But that doesn't have any effect on what I said.  And yes, it is racy.)","msgtype":"m.text"},"ts":1391015291000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can say things but you are wrong","msgtype":"m.text"},"ts":1391015409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2782","msgtype":"m.text"},"ts":1391015424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(Sorry for that, got a bit annoyed I have to demonstrate how CSS works.)","msgtype":"m.text"},"ts":1391015453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jeezus, Chrome's behavior there is just idiotic.","msgtype":"m.text"},"ts":1391015611000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If you run that from a data: url, it'll try to parse it immediately, fail due to the lack of a base url, and set the url to \"\". Then it'll resolve again when the <base> gets added, and end up with \"url(http://example.com)\".","msgtype":"m.text"},"ts":1391015668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But I think we've already established that Chrome is doing dumb things here.","msgtype":"m.text"},"ts":1391015689000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I need to go test in another browser.","msgtype":"m.text"},"ts":1391015697000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: from the data URL I don't see Chrome loading any image","msgtype":"m.text"},"ts":1391015843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: which makes sense","msgtype":"m.text"},"ts":1391015847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: it ending up with http://example.com does not though","msgtype":"m.text"},"ts":1391015864000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Exactly, but if you look at the computed style, it's because it's trying to load \"http://example.com\"","msgtype":"m.text"},"ts":1391015868000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: in any event, see how HTML handles this, it doesn't change the URLs of all the resources in a document when the base URL changes","msgtype":"m.text"},"ts":1391015889000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If \"example.com\" returned an image, Chrome would have shown that.","msgtype":"m.text"},"ts":1391015891000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: neither should style sheets","msgtype":"m.text"},"ts":1391015894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1391015901000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"TabAtkins: oh good point","msgtype":"m.text"},"ts":1391015922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Right, so I think you're saying that if the url is ever parsed, it's stuck with that parsing.  But if it fails to parse, then changing the base url will let it try again?","msgtype":"m.text"},"ts":1391015954000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: actually, in the Chrome console I don't see a request for http://example.com/image","msgtype":"m.text"},"ts":1391015955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: no, if it fails you'd store \"about:invalid\" as the URL","msgtype":"m.text"},"ts":1391015977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Exactly. Read what I said about Chrome being messed up. ^_^","msgtype":"m.text"},"ts":1391015979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: the new base URL only takes effect on reparsing","msgtype":"m.text"},"ts":1391015988000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm, that works badly for url()s in <template>. :/","msgtype":"m.text"},"ts":1391016009000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"aklein said it would be fine","msgtype":"m.text"},"ts":1391016021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You reparse those styles, no?","msgtype":"m.text"},"ts":1391016041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"All you need is to store the input and the parsed URL","msgtype":"m.text"},"ts":1391016051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I dunno.  I guess we can specify that it's reparsed.","msgtype":"m.text"},"ts":1391016052000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And you serialize the input if you get cssText, and the parsed URL if you get the computed value","msgtype":"m.text"},"ts":1391016078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Can you explain the <template> scenario more clearly?","msgtype":"m.text"},"ts":1391016092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<template><div style=\"background: url(/foo);\"></div></template>, and then stamp that template out in the document.","msgtype":"m.text"},"ts":1391016118000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think the <template> contents are shoved into a docfrag?","msgtype":"m.text"},"ts":1391016132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So no base url.","msgtype":"m.text"},"ts":1391016136000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What does <template> do with <img src=/test>?","msgtype":"m.text"},"ts":1391016166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because CSS works like HTML in this regard","msgtype":"m.text"},"ts":1391016183000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I dunno.","msgtype":"m.text"},"ts":1391016192000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"HTML also keeps the input and the parsed URL","msgtype":"m.text"},"ts":1391016196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Any question that applies to CSS here would also apply to HTML","msgtype":"m.text"},"ts":1391016214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"will check - he's not sure he's using a version that'll make <template> work.","msgtype":"m.emote"},"ts":1391016217000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, I know you're off it now, but please try to avoid obvious racy things like that in standards!","msgtype":"m.text"},"ts":1391016275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We go out of our way to make GC not observable, define order of tasks, make things deterministic","msgtype":"m.text"},"ts":1391016324000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"For sure there will be some things, but if we can avoid them we should","msgtype":"m.text"},"ts":1391016336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Haha, obviously I avoid raciness in new things. ^_^","msgtype":"m.text"},"ts":1391016386000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk, TabAtkins: good morning","msgtype":"m.text"},"ts":1391016929000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"reading back up","msgtype":"m.text"},"ts":1391016933000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"<img src> is quite different from CSS","msgtype":"m.text"},"ts":1391017094000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"the \"src\" attribute is never mucked with","msgtype":"m.text"},"ts":1391017113000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"the content attribute, that is","msgtype":"m.text"},"ts":1391017117000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"HTML says to go fetch the image whenever src is set (by resolving the URL with the <img>'s baseURI)","msgtype":"m.text"},"ts":1391017167000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but reading HTMLImageElement.src doesn't necessarily have any connection to whatever image is displayed by the <img>","msgtype":"m.text"},"ts":1391017200000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"it always re-resolves whenever it's read, again against the baseURI","msgtype":"m.text"},"ts":1391017213000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"(though the above will change a bit if we make the spec better match the adoption/insertion behavior in browsers)","msgtype":"m.text"},"ts":1391017265000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"see the \"Otherwise\" note in http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#dynamic-changes-to-base-urls for discussion of img src not matching the fetched resource","msgtype":"m.text"},"ts":1391017296000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: as to what I said last night...conceptually what you suggested last night sounds fine, though it turns out it's trickier than I thought as we're over-eager to share resolved inline style when cloning elements","msgtype":"m.text"},"ts":1391017352000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"but that's entirely an implementation detail","msgtype":"m.text"},"ts":1391017374000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: if you set backgroundImage it will refetch too","msgtype":"m.text"},"ts":1391017395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure, that part matches","msgtype":"m.text"},"ts":1391017409000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: and if you keep the original value as I suggested, backgroundImage would never be mucked with either","msgtype":"m.text"},"ts":1391017413000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I wanted to point out that HTML doesn't store the resolved URL anywhere","msgtype":"m.text"},"ts":1391017418000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: yes it does","msgtype":"m.text"},"ts":1391017424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: if you get .src","msgtype":"m.text"},"ts":1391017434000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"aklein: after the base URL changed, it will be the original URL","msgtype":"m.text"},"ts":1391017443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1391017454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nope","msgtype":"m.text"},"ts":1391017468000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1391017475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"see the dynamic changes section I linked above","msgtype":"m.text"},"ts":1391017490000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1391017523000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Oh my that is fucked","msgtype":"m.text"},"ts":1391017534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So .src returns a value that is not what is being fetched","msgtype":"m.text"},"ts":1391017551000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or has been fetched","msgtype":"m.text"},"ts":1391017560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Surely we have the original URL around somewhere. Would be much nicer to just expose that","msgtype":"m.text"},"ts":1391017604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"strangely I can't find where src is specified to return an absolute url","msgtype":"m.text"},"ts":1391017620000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"it just says \"reflect\" in the spec","msgtype":"m.text"},"ts":1391017624000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes","msgtype":"m.text"},"ts":1391017652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1391017659000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"\"then on getting, the IDL attribute must resolve the value of the content attribute relative to the element and return the resulting absolute URL if that was successful\"","msgtype":"m.text"},"ts":1391017665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bah","msgtype":"m.text"},"ts":1391017666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ugly is ugly","msgtype":"m.text"},"ts":1391017678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Platform is fucked, news at 11.","msgtype":"m.text"},"ts":1391017690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What's <col span> for?","msgtype":"m.text"},"ts":1391017728000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"For making a <col> span multiple columns.","msgtype":"m.text"},"ts":1391017796000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why not colgroup?","msgtype":"m.text"},"ts":1391017810000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Because.","msgtype":"m.text"},"ts":1391017821000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<col span> is from prehistory right?","msgtype":"m.text"},"ts":1391017839000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1391017845000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: what's awesome in Blink/WebKit is that src reflection is nearly the only place where xml:base is respected","msgtype":"m.text"},"ts":1391017875000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"so even without a baseURI change the resource and src can have a mismatch","msgtype":"m.text"},"ts":1391017891000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: oh, I thought you guys had no xml:base implementation at all","msgtype":"m.text"},"ts":1391017903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it basically only does anything in <svg:a>","msgtype":"m.text"},"ts":1391017915000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"http://dump.testsuite.org/xml:base/basic.xml","msgtype":"m.text"},"ts":1391017924000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1391017930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but it also affects the baseURI getter","msgtype":"m.text"},"ts":1391017934000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Please kill it","msgtype":"m.text"},"ts":1391017937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Intent to removes get LGTM pretty quickly :)","msgtype":"m.text"},"ts":1391017957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"very true","msgtype":"m.text"},"ts":1391017990000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Not having xml:base around will make it easier to design the new declarative thing","msgtype":"m.text"},"ts":1391018003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway, I guess it's not a very good argument to say \"<img> is crazy, CSS should be just like that\"","msgtype":"m.text"},"ts":1391018020000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"annevk: is there a mozilla bug for removing xml:base?","msgtype":"m.text"},"ts":1391018050000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Yeah, it's waiting on someone to do it","msgtype":"m.text"},"ts":1391018063000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(or a discussion somewhere?)","msgtype":"m.text"},"ts":1391018064000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"yeah, everytime it comes up I go test Firefox and am shocked that it fully works there","msgtype":"m.text"},"ts":1391018084000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=20976 has all the things on baseURI and xml:base","msgtype":"m.text"},"ts":1391018092000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I keep forgetting that bug has all this stuff","msgtype":"m.text"},"ts":1391018164000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Hmm, query-encoding tests seem to be broken","msgtype":"m.text"},"ts":1391020045000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And zcorpan isn't even here to complain at","msgtype":"m.text"},"ts":1391020058000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"foolip: do you know of any webvtt demos that show the desired behaviour for the processing model step 11 ?","msgtype":"m.text"},"ts":1391020088000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"i.e. positioning the cues to be on the appropriate lines and making sure they don't overlap","msgtype":"m.text"},"ts":1391020135000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"reyre: can you quote that step for me?","msgtype":"m.text"},"ts":1391020415000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"\"If reset is false, then, for each text track cue cue in cues...\"?","msgtype":"m.text"},"ts":1391020441000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"(so many algorithms and steps)","msgtype":"m.text"},"ts":1391020468000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: yea heh","msgtype":"m.text"},"ts":1391020474000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"oh look, \"git qseries\" isn't a command","msgtype":"m.text"},"ts":1391020499000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"foolip: i'm having a hard time getting my head around how the cues should be positioned when the snap-to-lines flag is set","msgtype":"m.text"},"ts":1391020500000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"so i was basically looking for a demo that showcases the behaviour of the end result of that algorithm","msgtype":"m.text"},"ts":1391020520000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"foolip: for example, if i have a cue with line: 1 and another cue with line: 2","msgtype":"m.text"},"ts":1391020538000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"will cue with line: 1 be directly on top of the cue with line: 2","msgtype":"m.text"},"ts":1391020554000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"reyre: oh, ok, you mean \"Adjust the positions of boxes according to the appropriate steps from the following list\"","msgtype":"m.text"},"ts":1391020572000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1391020576000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"sure, examples for that shouldn't be hard to find","msgtype":"m.text"},"ts":1391020603000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"you could have a look at some of the reftests in http://w3c-test.org/web-platform-tests/master/old-tests/submission/Opera/media/track/webvtt/rendering/reftest/","msgtype":"m.text"},"ts":1391020652000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the overlap avoidance algorithm for snap-to-lines is actually somewhat sane","msgtype":"m.text"},"ts":1391020686000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: great, thanks","msgtype":"m.text"},"ts":1391020717000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"essentially, it first finds the position the cue would like to be at, and if it overlaps it just moves it up until it finds a free space (then down, and other complications)","msgtype":"m.text"},"ts":1391020749000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"if you want an implementation to compare with, I know that Presto's (old Opera 12.16) followed these steps very closely, although for an older version of the spec","msgtype":"m.text"},"ts":1391020799000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"and with that I'm going to bed","msgtype":"m.text"},"ts":1391020847000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"reyre: happy hacking!","msgtype":"m.text"},"ts":1391020873000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: okay, thanks! this helps a lot","msgtype":"m.text"},"ts":1391020890000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"foolip: good night!","msgtype":"m.text"},"ts":1391020893000,"senderName":"reyre","senderId":"reyre@irc"},
{"content":{"body":"hey if anyone is writing tests for type=range, <input type=range step=50 value=25> is an interesting case that chrome gets wrong","msgtype":"m.text"},"ts":1391023686000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(firefox gets it right)","msgtype":"m.text"},"ts":1391023691000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan, did you have a js corpus?","msgtype":"m.text"},"ts":1391026048000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: miketaylr does","msgtype":"m.text"},"ts":1391026074000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"miketaylr, want to grep for pkcs11 at some point?","msgtype":"m.text"},"ts":1391026101000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: sure thing, just the string \"pkcs11\"?","msgtype":"m.text"},"ts":1391026120000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1391026130000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1391026153000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"jgraham: what is broken?","msgtype":"m.text"},"ts":1391026502000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"disappears again","msgtype":"m.emote"},"ts":1391026532000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: https://gist.github.com/miketaylr/8696287","msgtype":"m.text"},"ts":1391027491000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1391027515000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"adds a new feature to HTML","msgtype":"m.emote"},"ts":1391028050000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"<input type=range multiple>","msgtype":"m.text"},"ts":1391028054000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"enjoy.","msgtype":"m.text"},"ts":1391028057000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Random CSS query: should I group together @media blocks that share the same features?","msgtype":"m.text"},"ts":1391028098000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"e.g. is there a noticeable difference between having two identical @media queries with different rules beneath them versus bundling all of the rules under a single instance of the @media?","msgtype":"m.text"},"ts":1391028190000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"waves from Washington DC","msgtype":"m.emote"},"ts":1391028303000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm multiple range","msgtype":"m.text"},"ts":1391028328000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jory: the object model will be different","msgtype":"m.text"},"ts":1391028339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jory: performance might be different, but I suspect minor","msgtype":"m.text"},"ts":1391028348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, I've found that when working with most of the popular preprocessors you can often end up with multiple instances of the same MQ being repeated with a very small number of rules in each instance.","msgtype":"m.text"},"ts":1391028442000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"I'm sure there's some # where it becomes more expensive, but just wondering if it was a major no-no / easy fix to eek out some performance.","msgtype":"m.text"},"ts":1391028483000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"data:text/html,<input type=range step=50 value=25>","msgtype":"m.text"},"ts":1391028566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is weird","msgtype":"m.text"},"ts":1391028568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Weird how?","msgtype":"m.text"},"ts":1391028642000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: Is that a range where you can select multiple values, or multiple disconnected ranges?","msgtype":"m.text"},"ts":1391028686000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"i.e. 10-30...40-50","msgtype":"m.text"},"ts":1391028720000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"input type=range doesn't let you select ranges","msgtype":"m.text"},"ts":1391028730000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, nvm","msgtype":"m.text"},"ts":1391028740000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Meaning a range where you can select values between 10 and 30, or 40 and 50, but not between 30 and 40.","msgtype":"m.text"},"ts":1391028787000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"jory: it's as in where you can select two values.","msgtype":"m.text"},"ts":1391029200000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Neat!","msgtype":"m.text"},"ts":1391029214000,"senderName":"jory","senderId":"jory@irc"},
{"content":{"body":"http://www.unicode.org/mail-arch/unicode-ml/y2014-m01/0049.html o_O","msgtype":"m.text"},"ts":1391030327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: ^^","msgtype":"m.text"},"ts":1391030330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I have been replying to that thread, but it seems my email is not getting to the list","msgtype":"m.text"},"ts":1391030347000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That email is particularly crazy though","msgtype":"m.text"},"ts":1391030405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"christ, if they really do feel like the need to mint new names, i hope they don't name things \"whatwg-*\"","msgtype":"m.text"},"ts":1391031123000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that'd be horrible","msgtype":"m.text"},"ts":1391031127000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i think that somewhat misses the point","msgtype":"m.text"},"ts":1391031150000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since i have huge doubts that anyone, anne least of all, wants to invent a new encoding...","msgtype":"m.text"},"ts":1391031160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"So DOM is forked now? http://lists.w3.org/Archives/Public/www-dom/2014JanMar/0054.html","msgtype":"m.text"},"ts":1391031460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/dom/pulls has no outstanding pull requests regarding this","msgtype":"m.text"},"ts":1391031491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: seems they want to support multiple incompatible implementations of windows-1252 in a single implementation","msgtype":"m.text"},"ts":1391031703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there are multiple incompatible implementations of windows-1252?","msgtype":"m.text"},"ts":1391031721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Apparently","msgtype":"m.text"},"ts":1391032133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"My opinion is that everyone should migrate towards the Encoding Standard, including default libraries of popular languages","msgtype":"m.text"},"ts":1391032177000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah, NetworkError has worker in it","msgtype":"m.text"},"ts":1391032791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: what are these multiple implementations? are they interoperable with public content?","msgtype":"m.text"},"ts":1391034669000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think these are libraries that are incompatible with browsers","msgtype":"m.text"},"ts":1391036917000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: e.g. browsers have mappings for code points not officially assigned (return the byte as code point rather than U+FFFD iirc)","msgtype":"m.text"},"ts":1391036952000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well ok but what are the files that people are reading that are incompatible with returning that?","msgtype":"m.text"},"ts":1391036979000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't know","msgtype":"m.text"},"ts":1391037142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: I suspect they simply don't want to change existing behavior","msgtype":"m.text"},"ts":1391037155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean, unless there's actual content depending on those other implementations, i would argue it's not a new encoding, it's just a buggy version of the existing encoding","msgtype":"m.text"},"ts":1391037175000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"win1252 is by definition whatever microsoft implemented, after all","msgtype":"m.text"},"ts":1391037184000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm not sure they would agree with that","msgtype":"m.text"},"ts":1391037262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah. well. maybe they should check interop more then.","msgtype":"m.text"},"ts":1391038342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't disagree","msgtype":"m.text"},"ts":1391038361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The only complaints I see are about us not matching some other standards body definition","msgtype":"m.text"},"ts":1391038387000,"senderName":"annevk","senderId":"annevk@irc"}
]