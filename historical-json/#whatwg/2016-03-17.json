[
{"content":{"body":"hayato: thanks for cleaning up past shadow DOM issues!","msgtype":"m.text"},"ts":1458191890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi all--in Bikeshed, does anyone know how I can both use markdown and use \"algorithm\" attributes on containers?","msgtype":"m.text"},"ts":1458204214000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm getting: FATAL ERROR: Line 567 isn't indented enough (needs 1 indent) to be valid Markdown","msgtype":"m.text"},"ts":1458204250000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Answering my own question: you don't need to indent markdown outside of containers, but you somehow do when it's inside a container. (Also know as: read the error message properly.)","msgtype":"m.text"},"ts":1458206671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: i think you can remove indentation in either case if you like","msgtype":"m.text"},"ts":1458207997000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: oh, through a meta property or something?","msgtype":"m.text"},"ts":1458208024000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm having the hardest time linking to algorithms. Any pointers?","msgtype":"m.text"},"ts":1458208062000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: no. i'm guessing you used something like 1 or 2 spaces indentation when you added the container?","msgtype":"m.text"},"ts":1458208063000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: use <dfn> and <a>?","msgtype":"m.text"},"ts":1458208080000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: no, there was no spacing at all.","msgtype":"m.text"},"ts":1458208084000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: huh. ok then i don't know","msgtype":"m.text"},"ts":1458208102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: well, I'm using the algorithm attribute on the section title where the attribute is defined.","msgtype":"m.text"},"ts":1458208165000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"sorry:","msgtype":"m.text"},"ts":1458208180000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":" zcorpan: well, I'm using the algorithm attribute on the section title where the algorithm is defined.","msgtype":"m.text"},"ts":1458208194000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"algorithm=\"\" is to scope <var>s so bikeshed can complain if you use a var only once in an algorithm, it doesn't help with linking","msgtype":"m.text"},"ts":1458208250000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"you can link to sections or <dfn>s","msgtype":"m.text"},"ts":1458208277000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mmm. that's unfortunate.","msgtype":"m.text"},"ts":1458208286000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Is the sole point of naming the algorithm for error reporting, then?","msgtype":"m.text"},"ts":1458208349000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1458208357000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"gotcha","msgtype":"m.text"},"ts":1458208366000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1458208377000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"it works about as well to just say <h3 algorithm> if you don't want to spend time naming things","msgtype":"m.text"},"ts":1458208407000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"right.","msgtype":"m.text"},"ts":1458208476000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: when should <dfn abstract-op> be used?","msgtype":"m.text"},"ts":1458208590000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It's weird though, because that makes things sort of redundant.","msgtype":"m.text"},"ts":1458208715000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"You have to do something like:","msgtype":"m.text"},"ts":1458208722000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"<h3 algorithm>Update State</h3>\\n<p>The <dfn>Update State</dfn> algorithm…","msgtype":"m.text"},"ts":1458208745000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"zcorpan: so I'm now referencing the \"update state\" (https://w3c.github.io/sensors/#update-state) algorithm from within the \"update reading\" algorithm (https://w3c.github.io/sensors/#update-reading), and of course that creates an extra id (https://w3c.github.io/sensors/#update-state0) that points to the dfn.","msgtype":"m.text"},"ts":1458209315000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm sure there's a more elegant solution to this issue, but I'm struggling to figure out what it should be.","msgtype":"m.text"},"ts":1458209347000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: HTML spec sometimes uses dfn in a heading","msgtype":"m.text"},"ts":1458209645000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"maybe try it and see what bikeshed makes of it :-)","msgtype":"m.text"},"ts":1458209695000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: https://w3c.github.io/sensors/#update-state","msgtype":"m.text"},"ts":1458209907000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Updated only the first one so you could compare.","msgtype":"m.text"},"ts":1458209938000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think I'm going to go with that.","msgtype":"m.text"},"ts":1458209974000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: `<h3 algorithm dfn>Update State</h3>` should define the term in the heading.","msgtype":"m.text"},"ts":1458213388000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: oh! Wow.","msgtype":"m.text"},"ts":1458213404000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Now _that_ is exactly what I was looking for.","msgtype":"m.text"},"ts":1458213557000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Bikeshed does basically everything. Something those things are less well documented than others, though. :)","msgtype":"m.text"},"ts":1458213620000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Pondering whether a sensor event should move to an \"idle\" state after emitting an error event, have a specific \"errored\" state, or continue expecting more data from the underlying HW sensor.","msgtype":"m.text"},"ts":1458217112000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: depends a bit on the HW I guess","msgtype":"m.text"},"ts":1458217594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, that what makes me uncomfortable, I guess.","msgtype":"m.text"},"ts":1458217641000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: does HW fail sometimes and then goes on or fail more permanently","msgtype":"m.text"},"ts":1458217685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So that would imply having a way to distinguish these failure \"types\"","msgtype":"m.text"},"ts":1458217731000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I guess if you are considering switching states it's a bit more permanent than just a wrong value/read?","msgtype":"m.text"},"ts":1458217749000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: maybe, if we want to expose that amount of detail; also tells a lot about the device","msgtype":"m.text"},"ts":1458217803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is just brainstorming, fwiw","msgtype":"m.emote"},"ts":1458217825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: brainstorming is what I need here, so that's perfect.","msgtype":"m.text"},"ts":1458217850000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: so I transition state from \"activating\" to \"active\" when the first reading is received.","msgtype":"m.text"},"ts":1458217895000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: in the meantime I can get a \"permission denied\" error, which should clearly shut the sensor off.","msgtype":"m.text"},"ts":1458217935000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Well, not the HW per se, some other window might be using it","msgtype":"m.text"},"ts":1458217975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, yeah absolutely. Granted User Agent can't really access the sensors themselves on most devices","msgtype":"m.text"},"ts":1458218012000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hopefully long term the UA is the OS","msgtype":"m.text"},"ts":1458218098000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: heh","msgtype":"m.text"},"ts":1458218113000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Good point though.","msgtype":"m.text"},"ts":1458218125000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But yeah, I guess it depends on what the HW does or what existing OS libs provide, prolly varies per sensor and over time 😊","msgtype":"m.text"},"ts":1458218178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, so let's admit we can split errors into two categories. Terminal ones and others.","msgtype":"m.text"},"ts":1458218264000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Terminal ones imply that sensor access is definitely severed.","msgtype":"m.text"},"ts":1458218294000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Others that it might be a temporary glitch.","msgtype":"m.text"},"ts":1458218310000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think state === error is what you want","msgtype":"m.text"},"ts":1458218403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Terminal errors should: emit an error, reject the start() promise if that promise hasn't been resolved already, and change tge state back to \"idle\" (or \"errored\")","msgtype":"m.text"},"ts":1458218412000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In the \"permanent\" failure cases","msgtype":"m.text"},"ts":1458218448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok so you would add an \"error\" state for the permanent failure case.","msgtype":"m.text"},"ts":1458218456000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or \"errored\"?","msgtype":"m.text"},"ts":1458218490000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"yikes.","msgtype":"m.text"},"ts":1458218500000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, if you dispatch a special event it's generally worth observing","msgtype":"m.text"},"ts":1458218508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"On the object too, otherwise you have to keep track yourself","msgtype":"m.text"},"ts":1458218539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Bit ugly eg with XHR","msgtype":"m.text"},"ts":1458218552000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, do you mean an \"error\" attribute?","msgtype":"m.text"},"ts":1458218574000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is confused.","msgtype":"m.emote"},"ts":1458218592000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I meant in terms of state","msgtype":"m.text"},"ts":1458218607000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so: sensor.state === \"error\"","msgtype":"m.text"},"ts":1458218627000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Detailed error info is never v0-1","msgtype":"m.text"},"ts":1458218640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1458218640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, I guess that's another good point.","msgtype":"m.text"},"ts":1458218671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"error is easier than errored, but I guess you already noticed 😊","msgtype":"m.text"},"ts":1458218690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure, it's just weird to have a noun in the middle of adjectives and verbal actions.","msgtype":"m.text"},"ts":1458218794000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Should that state imply the sensor object is good to throw away?","msgtype":"m.text"},"ts":1458218841000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: or would it be roughly the same as \"idle\"","msgtype":"m.text"},"ts":1458218863000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"i.e. you can give it another try?","msgtype":"m.text"},"ts":1458218879000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I would reject start I guess","msgtype":"m.text"},"ts":1458218923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If HW failure, new thing would fail too","msgtype":"m.text"},"ts":1458218927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right, but permissioning might change","msgtype":"m.text"},"ts":1458218961000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm, not sure then","msgtype":"m.text"},"ts":1458219022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Biab","msgtype":"m.text"},"ts":1458219028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: so how do permissions work here? Maybe start() can just return false and you return to idle?","msgtype":"m.text"},"ts":1458220278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: not sure if coupling permission errors and HW errors is best","msgtype":"m.text"},"ts":1458220293000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: if it's not too much trouble, it would be great to have Blink's origin setup as a reply to https://www.w3.org/Bugs/Public/show_bug.cgi?id=27378#c39","msgtype":"m.text"},"ts":1458220405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: that and your review on the origin PR, pretty please","msgtype":"m.text"},"ts":1458220421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, start's return promise is going to be rejected if the permission is denied","msgtype":"m.text"},"ts":1458220465000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I would imagine other fatal errors to do the same.","msgtype":"m.text"},"ts":1458220555000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: so both are exceptional?","msgtype":"m.text"},"ts":1458220600000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: as in, if start() were synchronous you'd throw an exception for these cases?","msgtype":"m.text"},"ts":1458220620000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes, I mean if the sensor doesn't work or can't be accessed, it should just throw,","msgtype":"m.text"},"ts":1458220663000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess I'm going to distinguish between fatal and nonfatal exceptions.","msgtype":"m.text"},"ts":1458220878000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: one last thing: what's your take on letting the API consumer control timeouts? Seems fetch doesn't have that ability.","msgtype":"m.text"},"ts":1458221086000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"XHR does, no?","msgtype":"m.text"},"ts":1458221120000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: so basically something like: sensor.start(3000).then(...) or new Sensor({timeout: 3000}).start()...","msgtype":"m.text"},"ts":1458221161000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: indeed","msgtype":"m.text"},"ts":1458221249000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I would wait for cancelable promises","msgtype":"m.text"},"ts":1458221386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: until that happens folks can create some kind of wrapper with setTimeout and eat up the extra cost of something being allocated they don't need","msgtype":"m.text"},"ts":1458221443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: sensors needing cancelable promises will only help further them being created","msgtype":"m.text"},"ts":1458221469000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: mmm.","msgtype":"m.text"},"ts":1458221520000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not too sure what cancellable promises would give me in this case.","msgtype":"m.text"},"ts":1458221628000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: the way a timeout works is that it cancels the activity after a period of time","msgtype":"m.text"},"ts":1458221742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: the activity is represented by the promise","msgtype":"m.text"},"ts":1458221760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: we have a timer, what we lack is the cancel primitive","msgtype":"m.text"},"ts":1458221771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, so you're suggesting that this should not be an error.","msgtype":"m.text"},"ts":1458221811000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: if you make a timeout cause rejection, your API will likely be out-of-sync with fetch() where it will likely cause cancelation","msgtype":"m.text"},"ts":1458221820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: it's a little unclear, but I wouldn't add the feature until we know","msgtype":"m.text"},"ts":1458221854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK, what's the timeline for that?","msgtype":"m.text"},"ts":1458221879000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"roughly","msgtype":"m.text"},"ts":1458221884000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Domenic gave an ETA of 2 months, but custom elements came in the way, and he's also working on JavaScript Zones, but that seems smallish","msgtype":"m.text"},"ts":1458221914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: so, 6-12 months? :-p","msgtype":"m.text"},"ts":1458221927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1458221931000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what's your plan for distinguishing timeout errors coming from the network layer from consumer timeout-based cancellation?","msgtype":"m.text"},"ts":1458222060000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: you mean from the UA? No plan as of yet","msgtype":"m.text"},"ts":1458222237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: is a network error and prolly hard to change","msgtype":"m.text"},"ts":1458222276000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, so you will have both, then?","msgtype":"m.text"},"ts":1458222304000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: currently calling stop() while start's promised is unresolved throws an Abort error, so maybe I should defer that too, no?","msgtype":"m.text"},"ts":1458222359000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"* promise","msgtype":"m.text"},"ts":1458222377000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Whereby \"defer\" I mean \"wait for cancellable promises to be shipped\"","msgtype":"m.text"},"ts":1458222407000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, maybe ask JakeA / Domenic","msgtype":"m.text"},"ts":1458222593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: we'll have developer-controlled timeouts at some point","msgtype":"m.text"},"ts":1458222607000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, you just did for me. :)","msgtype":"m.text"},"ts":1458222620000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I could even imagine cancelablePromise.time(100) or some such, but takes a long time for convenient methods to get added to JavaScript","msgtype":"m.text"},"ts":1458222672000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"convenience*","msgtype":"m.text"},"ts":1458222680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was just in a meetup this week where a developer said \"don't use promises, use observables because they can be canceled\"","msgtype":"m.text"},"ts":1458224781000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"push-api \"defines\" a PermissionDeniedError DOM Exception. Is that going to make its way into WebIDL or should I use something else?","msgtype":"m.text"},"ts":1458225213000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, it actually uses a dfn: https://w3c.github.io/push-api/#dfn-permissiondeniederror","msgtype":"m.text"},"ts":1458225261000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"You should kick whoever wrote that spec","msgtype":"m.text"},"ts":1458225281000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#dfn-error-names-table","msgtype":"m.text"},"ts":1458225314000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"> If an error name is not listed here, please file a bug as indicated at the top of this specification and it will be addressed shortly. Thanks!","msgtype":"m.text"},"ts":1458225319000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"NotAllowedError seems good enough, though","msgtype":"m.text"},"ts":1458225351000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: the context of the meetup was angular2 which I guess offers observables or promises... you can either effectively","msgtype":"m.text"},"ts":1458232795000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"would be nice to get cancelable fetch() though","msgtype":"m.text"},"ts":1458232985000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Yeah, path to cancelable seems easier, but we'll find out soon enough","msgtype":"m.text"},"ts":1458233195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why the spec allow something like \"let option = new HTMLOptionElement()\" but not \"let button = new HTMLButtonElement()\"?","msgtype":"m.text"},"ts":1458233471000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"Is this intentional or just work in progress?","msgtype":"m.text"},"ts":1458233480000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"yhirano_: I might not get to your XHR patch before Monday","msgtype":"m.text"},"ts":1458233485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/allow/allows","msgtype":"m.text"},"ts":1458233486000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"yhirano_: sorry about that","msgtype":"m.text"},"ts":1458233494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: which spec? I don't think either of those work","msgtype":"m.text"},"ts":1458233519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: it only has new Option()","msgtype":"m.text"},"ts":1458233545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://html.spec.whatwg.org/multipage/forms.html#the-option-element","msgtype":"m.text"},"ts":1458233553000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: note \"Named\" in \"NamedConstructor\"","msgtype":"m.text"},"ts":1458233568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: they don't work in any browser afaik, but it should be easy to polyfill with proxies","msgtype":"m.text"},"ts":1458233576000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"\"easy\" ... \"proxies\" .... O_o","msgtype":"m.text"},"ts":1458233589000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"new HTMLOptionElement() does not work","msgtype":"m.text"},"ts":1458233597000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: I don't know WebIDL very well, what's the difference between NamedConstructor and Constructor?","msgtype":"m.text"},"ts":1458233610000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: if you can do that, would love to see it","msgtype":"m.text"},"ts":1458233615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: note https://github.com/w3c/webcomponents/issues/369 for some difficulties with element constructors","msgtype":"m.text"},"ts":1458233628000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: NamedConstructor means the constructor name doesn't match the interface name","msgtype":"m.text"},"ts":1458233649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: we also need to give each element a dedicated interface, or use arguments for local name, which gets ugly","msgtype":"m.text"},"ts":1458233686000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"NamedConstructor basically creates a factory function that uses UA magic to construct the object","msgtype":"m.text"},"ts":1458233710000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It isn't a constructor at all","msgtype":"m.text"},"ts":1458233714000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: window.HTMLButtonElement = new Proxy(window.HTMLButtonElement, {construct() { return document.createElement(\"button\");}});","msgtype":"m.text"},"ts":1458233738000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: sure, or just window.HTMLButtonElement = function () { return document.createElement(\"button\"); }","msgtype":"m.text"},"ts":1458233761000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"meh I guess that breaks the .prototype link, the proxy is kind of nice","msgtype":"m.text"},"ts":1458233784000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the spec says \"When invoked as a constructor, it must return a new HTMLOptionElement object\"","msgtype":"m.text"},"ts":1458233950000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"the terminology used by Web Components specs is really overwhelming to me","msgtype":"m.text"},"ts":1458234017000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"so NamedConstructor (unlike Constructor) is defined for the internal purposes? Is that correct?","msgtype":"m.text"},"ts":1458234130000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"ahh, I get it now, as per spec, you can do \"let option = new Option()\", but you can't do \"let option = new HTMLOptionElement()\"","msgtype":"m.text"},"ts":1458234282000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"Domenic: apologies for: \"[URL] is obsoleted by [WHATWG-URL].\" I know this needs fixing.","msgtype":"m.text"},"ts":1458234629000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I still don't understand why you're favoring the 3rd param approach of addEventListener","msgtype":"m.text"},"ts":1458235131000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is against the basic rule we've been following elsewhere","msgtype":"m.text"},"ts":1458235150000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"spec what browsers do\"","msgtype":"m.text"},"ts":1458235157000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"tobie: yes, would be great :). But somehow that spec references both so presumably something is going wrong on that end too.","msgtype":"m.text"},"ts":1458235160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: how?","msgtype":"m.text"},"ts":1458235203000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: but basically, the alternatives are worse","msgtype":"m.text"},"ts":1458235242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how?","msgtype":"m.text"},"ts":1458235247000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: keeps an awkward boolean argument that was already confusing and makes it mandatory","msgtype":"m.text"},"ts":1458235313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"notes that he was against making the boolean argument optional","msgtype":"m.emote"},"ts":1458235347000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"anyhow, the dictionary is for special cases only","msgtype":"m.text"},"ts":1458235376000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if you're going to use that, you sure should understand what different phases in dispatch mean","msgtype":"m.text"},"ts":1458235397000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't think that would have worked with WebKit not requiring it, but that's also bad API","msgtype":"m.text"},"ts":1458235402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We might add more features going forward now it is easier to do so","msgtype":"m.text"},"ts":1458235439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This is a perfect way to enable more improvements without a whole redesign","msgtype":"m.text"},"ts":1458235467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but this is totally not compatible with millions of browsers","msgtype":"m.text"},"ts":1458235484000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which won't be updated any time soon","msgtype":"m.text"},"ts":1458235494000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It totally is","msgtype":"m.text"},"ts":1458235494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That is always a hazard with new features","msgtype":"m.text"},"ts":1458235515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"addEventListener is not a new feature","msgtype":"m.text"},"ts":1458235527000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so doesn't understand the argument that keeping 3rd param as boolean is that bad.","msgtype":"m.emote"},"ts":1458235660000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since the arguments for that have been like \"I just don't like it\"","msgtype":"m.text"},"ts":1458235684000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Overloading of the third arg is the new feature, does not break compat, so seems great","msgtype":"m.text"},"ts":1458236038000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it does break compat. passing { capturing: false} ends up being interpreted as true in older browsers","msgtype":"m.text"},"ts":1458236098000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/capturing/capture/","msgtype":"m.text"},"ts":1458236111000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Sure, so would most new features","msgtype":"m.text"},"ts":1458236136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That is why devs use libs","msgtype":"m.text"},"ts":1458236148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That feature test","msgtype":"m.text"},"ts":1458236162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And dismissing ergonomics like it is not a thing is unfair","msgtype":"m.text"},"ts":1458236186000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the argument is now that devs use libs, then we can totally use 4th param approach, since that will be hidden anyway in the libs","msgtype":"m.text"},"ts":1458236193000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"API design matters","msgtype":"m.text"},"ts":1458236196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hopefully not long term for all things","msgtype":"m.text"},"ts":1458236223000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://twitter.com/bitsgalore/status/709382042895654912 wow Steven Pemberton hasn't really changed his tune much if anything","msgtype":"m.text"},"ts":1458236949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mmm XForms + XSLT","msgtype":"m.text"},"ts":1458237228000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Nice punchline","msgtype":"m.text"},"ts":1458237241000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Steven is embarrassing himself with that stuff at this point","msgtype":"m.text"},"ts":1458237953000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it used to be kind of amusing but now it’s just sad","msgtype":"m.text"},"ts":1458237967000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: I think you may make better use of retweets than anybody else I know","msgtype":"m.text"},"ts":1458240411000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"case in point your retweet about http://gutenberg-poetry.decontextualize.com/","msgtype":"m.text"},"ts":1458240438000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I'm the volunteer/victim jsbell found to edit FileAPI... could you give me ('mkruisselbrink') the appropriate powers to be able to do so?","msgtype":"m.text"},"ts":1458240930000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1458240950000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"w00t","msgtype":"m.text"},"ts":1458241266000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"howdy Mek","msgtype":"m.text"},"ts":1458241272000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jsbell++","msgtype":"m.text"},"ts":1458241276000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"y’all rock the bells","msgtype":"m.text"},"ts":1458241290000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Mek: yup will do right now","msgtype":"m.text"},"ts":1458241296000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1458241352000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: awesome, thanks","msgtype":"m.text"},"ts":1458241364000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Mek: very glad this landed on your plate","msgtype":"m.text"},"ts":1458241389000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I “know” you from seeing your comments/contributions to other repos","msgtype":"m.text"},"ts":1458241415000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: do you happen to know anything about <script> in SVG?","msgtype":"m.text"},"ts":1458243669000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"Domenic: Blink's implementation of script handling doesn't do a lot to distinguish between the processing model of HTML and SVG scripts, wondering how hard it would be to spec type=module for SVGScriptElement","msgtype":"m.text"},"ts":1458243709000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"hmm, the current spec just seems to have placeholders for some of the \"new\" HTML features anyway","msgtype":"m.text"},"ts":1458243861000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"https://www.w3.org/TR/SVG2/interact.html#ScriptElement","msgtype":"m.text"},"ts":1458243861000,"senderName":"aklein","senderId":"aklein@irc"},
{"content":{"body":"aklein: yeah I don't know much... I remember an open bug or two","msgtype":"m.text"},"ts":1458244480000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Can we just make SVG2 use HTMLScriptElement? TabAtkins heycam|away","msgtype":"m.text"},"ts":1458244514000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic, I don't think we can for namespace reasons","msgtype":"m.text"},"ts":1458244576000,"senderName":"pdr","senderId":"pdr@irc"},
{"content":{"body":"Domenic: I'm 100% for it, same with <style>.  SVGWG is for it, as long as browsers are okay with compat.  Objection is what pdr said.","msgtype":"m.text"},"ts":1458244594000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But the spec says \"\"A ‘script’ element is equivalent to the ‘script’ element in HTML and thus is the place for scripts\"\" which seems to me to mean that the two are equivalent and module should work for svg too","msgtype":"m.text"},"ts":1458244613000,"senderName":"pdr","senderId":"pdr@irc"},
{"content":{"body":"pdr: I thought the plan was for SVG2 to merge the namespaces or something","msgtype":"m.text"},"ts":1458244657000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"pdr: does it also say that SVGScriptElement is \"equivalent\" to HTMLScriptElement?","msgtype":"m.text"},"ts":1458244691000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: Headings can define things, too.  <h3 algorithm abstract-op>Update State</h3> works.","msgtype":"m.text"},"ts":1458244731000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess not","msgtype":"m.text"},"ts":1458244740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: The markdown rules, generally, are that when you open a container element the contents have to be indented one more level.","msgtype":"m.text"},"ts":1458244772000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: doesn't svg have a version parameter that could help with any compat issues?","msgtype":"m.text"},"ts":1458244774000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: yeah, I assumed dfn was a tag and thus…","msgtype":"m.text"},"ts":1458244778000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: No.","msgtype":"m.text"},"ts":1458244779000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: I don't understand what you mean.","msgtype":"m.text"},"ts":1458244795000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh! \"dfn\" type definitions.","msgtype":"m.text"},"ts":1458244803000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">","msgtype":"m.text"},"ts":1458244804000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, sorry about that being confusing. Mistake on my part early on in naming, can't be fixed now.","msgtype":"m.text"},"ts":1458244819000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: That has no effect on anything.","msgtype":"m.text"},"ts":1458244826000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I guess you're saying browsers don't want to implement a version switch, which is fair","msgtype":"m.text"},"ts":1458244836000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1458244839000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: gotcha, np. As most things, obvious once you're aware of it, arcane before then.","msgtype":"m.text"},"ts":1458244870000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"This is the bug I remember BTW https://www.w3.org/Bugs/Public/show_bug.cgi?id=28753","msgtype":"m.text"},"ts":1458244912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: The *intention* is definitely that <svg:style> and <svg:script> be exactly identical to the HTML versions in every way.  Whatever needs to be fixed to make that happen, we're happy to do.","msgtype":"m.text"},"ts":1458244999000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If we could make it automatic by merging them, that would be great, but some implementors have an aversion to \"chameleon\" elements that are identical in multiple namespaces. :/","msgtype":"m.text"},"ts":1458245029000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: well saying that the element interface for (\"http://www.w3.org/2000/svg\", \"script\") is HTMLSVGElement sounds like the right fix to me","msgtype":"m.text"},"ts":1458245044000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Darn implementers.","msgtype":"m.text"},"ts":1458245054000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*HTMLScriptElement","msgtype":"m.text"},"ts":1458245061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Works for me. Poke at pdr and whoever's doing it in Firefox. ^_^","msgtype":"m.text"},"ts":1458245373000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: when should abstract-op be used?","msgtype":"m.text"},"ts":1458249112000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"when you're defining an abstract operation. Use your best judgement.","msgtype":"m.text"},"ts":1458249134000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I'm gonna add a metacategory for autolinking to dfn/abstract-op/any other English-language definition categories I add in the future, like <a idl> is for all IDL types, so it's easy to link.)","msgtype":"m.text"},"ts":1458249181000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gotta do some more refactoring of the autolinker first to make that possible tho, because \"abstract-op\" doesn't automatically lowercase the definition, like \"dfn\" does.","msgtype":"m.text"},"ts":1458249218000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i'm not familiar with the terminology \"abstract operation\" to be able to apply judgement. any example or pointer?","msgtype":"m.text"},"ts":1458249288000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Any time you're defining something that you'll call like a method, but it's just normal language.","msgtype":"m.text"},"ts":1458249432000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1458249446000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Like https://dom.spec.whatwg.org/#get-the-parent","msgtype":"m.text"},"ts":1458249481000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"and so what does bikeshed do differently from \"dfn\"?","msgtype":"m.text"},"ts":1458249502000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It doesn't assume that it can lowercase it freely.","msgtype":"m.text"},"ts":1458249520000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/tabatkins/bikeshed/issues/625 is where it was added, with examples asking for it.","msgtype":"m.text"},"ts":1458249571000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]