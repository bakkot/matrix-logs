[
{"content":{"body":"Couldn't take the D3E thread anymore, had to say something","msgtype":"m.text"},"ts":1401410730000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: You said what we were all thinking (but too jaded to say).","msgtype":"m.text"},"ts":1401412320000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: there's actually three kinds of features: those that are implemented, those that are not but should be, and those that are not but should not be.","msgtype":"m.text"},"ts":1401415029000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"specs must include the former, should include the middle one, and must not include the last one.","msgtype":"m.text"},"ts":1401415051000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: so, um, which category was MNG in before they removed it from mozilla?","msgtype":"m.text"},"ts":1401415077000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"the former.","msgtype":"m.text"},"ts":1401415119000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(assuming we pretend that only mozilla existed)","msgtype":"m.text"},"ts":1401415131000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah, so \"implemented\" is a bit more complicated than a boolean ;-P","msgtype":"m.text"},"ts":1401415170000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1401415175000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"showModalDialog() is in that state now","msgtype":"m.text"},"ts":1401415183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"browsers want to drop it","msgtype":"m.text"},"ts":1401415188000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but the specs have to have it","msgtype":"m.text"},"ts":1401415204000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because otherwise there's no definition for how other features should work in conjunction with it while it's implemented","msgtype":"m.text"},"ts":1401415225000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, so what category is MNG in *now* I wonder ... or, perhaps more importantly, JNG","msgtype":"m.text"},"ts":1401415288000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"one of the last two","msgtype":"m.text"},"ts":1401415296000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes I know that ;-)","msgtype":"m.text"},"ts":1401415306000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"deciding which of the last two something is in is a big part of teh job of a spec writer","msgtype":"m.text"},"ts":1401415308000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hmm, is GIF adequately specced?","msgtype":"m.text"},"ts":1401415415000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1401415438000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"thought not","msgtype":"m.text"},"ts":1401415444000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"http://wiki.whatwg.org/wiki/GIF","msgtype":"m.text"},"ts":1401415448000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, it seems unlikely to be terribly important to include fractint's extensions in spec, except perhaps in order to ensure that they are properly ignored ...","msgtype":"m.text"},"ts":1401415581000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"I mean, fractint already knows how to handle them, and nobody else is expected to extract the fractal generation parameters from its GIF files","msgtype":"m.text"},"ts":1401415613000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"you know what would be cool? a spec for nodes on a network to negotiate how to interpret, manipulate and render data from each other","msgtype":"m.text"},"ts":1401415898000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and you could test it by teaching two computers to talk to each other using random bit patterns","msgtype":"m.text"},"ts":1401415999000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hmm, it says here that there are notes about the extension block structure in loadfile.c ...","msgtype":"m.text"},"ts":1401416054000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"adds more info about fractint's extensions to the page despite how obvious it is that browser implementors don't need to do anything special with fractint; it suffices to simply stay away from its clearly-marked extension blocks ...","msgtype":"m.emote"},"ts":1401417310000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Headers can be simpler than URLSearchParams, there's no need to preserve ordering per HTTP","msgtype":"m.text"},"ts":1401437131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think we need to support bogus servers in the API","msgtype":"m.text"},"ts":1401437159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: when I click any of the links in https://dvcs.w3.org/hg/xhr there's an error","msgtype":"m.text"},"ts":1401437219000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: did you have a look at https://etherpad.mozilla.org/Request-object-design and the discussion we had on Request objects yesterday?","msgtype":"m.text"},"ts":1401437241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no I didn't","msgtype":"m.text"},"ts":1401437263000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"https://dvcs.w3.org/hg/xhr seems Ok to me?","msgtype":"m.text"},"ts":1401437276000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: e.g. https://dvcs.w3.org/hg/xhr/rev/2654f2bc5a24 returns a 5xx","msgtype":"m.text"},"ts":1401437291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: ^^","msgtype":"m.text"},"ts":1401437306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's 200 for me","msgtype":"m.text"},"ts":1401437366000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: oh weird, maybe a mirror issue","msgtype":"m.text"},"ts":1401437484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I guess so","msgtype":"m.text"},"ts":1401437501000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: https://github.com/slightlyoff/ServiceWorker/issues/242#issuecomment-44620935","msgtype":"m.text"},"ts":1401437518000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: still need discussion about the hook","msgtype":"m.text"},"ts":1401437535000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: yes, also, JakeA brought up yesterday that he wants to do this: https://gist.github.com/jakearchibald/9f556ce0eafc47ba3d6e","msgtype":"m.text"},"ts":1401437711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: that seems reasonable, so rather than returning null, I think you want to return the request associated with the Request object","msgtype":"m.text"},"ts":1401437741000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: note, I don't care for the Request object, but it's underlying request is what I'd like to see back","msgtype":"m.text"},"ts":1401437764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: now, given this setup, the event.default() case is only marginally different. That should return the associated request, as well as a hook that lets me notify the SW when the promise it returns can be resolved","msgtype":"m.text"},"ts":1401437849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: alright, will revisit it from SW point of view too and get back","msgtype":"m.text"},"ts":1401437923000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: as for waiting for Fetch to do something","msgtype":"m.text"},"ts":1401437967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: jungkees: I just now restarted the web/hg server on dvcs.w3.org  so there should be no more 500s for a while","msgtype":"m.text"},"ts":1401438025000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jungkees: you could just say \"Wait for Fetch to invoke the \"handle default response\" callback. Then wait for promise X. Then return the value it's resolved/rejected with.","msgtype":"m.text"},"ts":1401438026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but I am seriously going to just drop a bomb on that whole server","msgtype":"m.text"},"ts":1401438048000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nobody should be hosting anything in dvcs.w3.org any more","msgtype":"m.text"},"ts":1401438065000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jungkees: I recommend moving the repo to github","msgtype":"m.text"},"ts":1401438087000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: you mean from within default() method?","msgtype":"m.text"},"ts":1401438119000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"MikeSmith: will talk with the co-editors","msgtype":"m.text"},"ts":1401438134000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"MikeSmith: I also prefer to do so","msgtype":"m.text"},"ts":1401438151000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: I'm heading on a cheap holiday to Turkey, I might be dataless, apologies for slow replies until Monday evening","msgtype":"m.text"},"ts":1401438194000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"jungkees: so handle \"handle a fetch\" dispatches events (synchronously from the perspective of that algorithm), listeners for those events can invoke default()","msgtype":"m.text"},"ts":1401438202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: no worries, I'll try to sketch up a HeaderMap and such in the meantime, enjoy","msgtype":"m.text"},"ts":1401438220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: enjoy the trip","msgtype":"m.text"},"ts":1401438269000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: probably just before those handlers are invoked you want to set a flag \"fine to invoke default() flag\" that the algorithm for default() uses","msgtype":"m.text"},"ts":1401438274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: and then invoking default() itself sets some variable that can be used to resolve/reject the promise it just returned","msgtype":"m.text"},"ts":1401438327000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: then if default() is invoked again, it checks that variable and if its set, it simply rejects","msgtype":"m.text"},"ts":1401438350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: \"handle a fetch\" is a weirder asynchronous version of event-dispatch basically","msgtype":"m.text"},"ts":1401438613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: before \"Wait for Fetch to invoke the \"handle default response\" callback from within the default algorithm, the \"handle a fetch\" which invoked the listerner for fectch event is already returned with _default_ you say, right?","msgtype":"m.text"},"ts":1401438632000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: you'd return _default_ + callback, then that callback is what gives me the eventual response","msgtype":"m.text"},"ts":1401438691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: callback is essentially \"handle a fetch\" minus some of the steps","msgtype":"m.text"},"ts":1401438714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: the callback is me giving you the response, and you handing back the response that results from the promise dance that it generates","msgtype":"m.text"},"ts":1401438751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in which part of the \"handle a fetch\" should respondWith() run on?","msgtype":"m.text"},"ts":1401438756000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: respondWith should use the same \"default can be invoked flag\" (should prolly have a more generic name)","msgtype":"m.text"},"ts":1401438788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: respondWith also then sets a variable for its own promise","msgtype":"m.text"},"ts":1401438810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: typically \"handle a fetch\" will return the result of _that_ promise","msgtype":"m.text"},"ts":1401438832000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see. so I might have to put together the algorithm again per the discussion","msgtype":"m.text"},"ts":1401438869000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: in the case of default() \"handle a fetch\" will return a callback to resolve default() return the result of respondWith()'s promise as part of that","msgtype":"m.text"},"ts":1401438870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: yeah I don't quite understand how you guys imagined the current setup to work","msgtype":"m.text"},"ts":1401438885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: as I asked, default() re-enters as its own request doesn't make sense?","msgtype":"m.text"},"ts":1401438928000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: I don't see how","msgtype":"m.text"},"ts":1401438949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's nothing but an independent fetch() call with a specially conditioned behavior. no?","msgtype":"m.text"},"ts":1401439006000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: the flow is Fetch -> SW -> default() -> asks Fetch for a Response -> Fetch -> gives SW a response and wants one back","msgtype":"m.text"},"ts":1401439010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: hmm","msgtype":"m.text"},"ts":1401439073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: maybe that would work","msgtype":"m.text"},"ts":1401439084000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annvek: what e.default() is doing is just to get a response out of e.request","msgtype":"m.text"},"ts":1401439092000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: and make this algorithm simpler","msgtype":"m.text"},"ts":1401439114000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: okay, so rather than you returning to Fetch when someone invokes default(), you invoke fetch instead","msgtype":"m.text"},"ts":1401439160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's my call","msgtype":"m.text"},"ts":1401439175000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: loosely based on how fetch() works, but","msgtype":"m.text"},"ts":1401439181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: \"that's my idea\" is what you mean I think; I think I agree that's a good idea","msgtype":"m.text"},"ts":1401439195000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1401439201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: :-)","msgtype":"m.text"},"ts":1401439219000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: anyhow, can you think about it?","msgtype":"m.text"},"ts":1401439229000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: If we already have enough information within the Request object to infer this is a default request from SW, it'll be perfect.","msgtype":"m.text"},"ts":1401439310000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: yeah I think that works","msgtype":"m.text"},"ts":1401439321000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: otherwise, we may need a flag","msgtype":"m.text"},"ts":1401439321000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: great","msgtype":"m.text"},"ts":1401439330000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: well yes, we might need a flag on the Request object","msgtype":"m.text"},"ts":1401439348000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: or on request","msgtype":"m.text"},"ts":1401439357000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: otherwise I'd just pass it back into the SW","msgtype":"m.text"},"ts":1401439370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I prefer Fetch just returns the final response","msgtype":"m.text"},"ts":1401439404000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: but yeah, the main idea is that the request remains unmodified and if you simply pass it through yourself that works fine","msgtype":"m.text"},"ts":1401439406000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: yeah, Fetch would handle the redirects for sure","msgtype":"m.text"},"ts":1401439424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: great","msgtype":"m.text"},"ts":1401439436000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: we just need a flag as .client will not be the service worker but the original document","msgtype":"m.text"},"ts":1401439458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we have it in FetchEvent now","msgtype":"m.text"},"ts":1401439495000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: maybe we should just use a flag in general, \"service worker flag\"","msgtype":"m.text"},"ts":1401439526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: hmm actually, that's icky","msgtype":"m.text"},"ts":1401439548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: I'll have to think about that a bit more I guess, but the general idea seems sound","msgtype":"m.text"},"ts":1401439596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annvek: maybe I can leave the .context as-is in the original request instead of setting it to \"serviceworker\"?","msgtype":"m.text"},"ts":1401439626000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: fetch(request) will set it to \"serviceworker\"","msgtype":"m.text"},"ts":1401439638000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: yeah, we don't want to change anything from the request","msgtype":"m.text"},"ts":1401439652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: that's why we need some kind of flag for the .default() case","msgtype":"m.text"},"ts":1401439662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: exactly.","msgtype":"m.text"},"ts":1401439691000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"jungkees: added some comments to 242","msgtype":"m.text"},"ts":1401440281000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: I'll make sure http://fetch.spec.whatwg.org/#fetch-api gets in shape so you can reference it","msgtype":"m.text"},"ts":1401440308000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jungkees: any particular constraints I might not be aware of?","msgtype":"m.text"},"ts":1401440319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Cool; nothing I can think of now","msgtype":"m.text"},"ts":1401440366000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"annevk: let's keep talking","msgtype":"m.text"},"ts":1401440376000,"senderName":"jungkees","senderId":"jungkees@irc"},
{"content":{"body":"Hixie: Hi! In the section \"Embedded content\" -> \"The map element\" the example for image map contains four <area> elements with the same coordinates. ;-)","msgtype":"m.text"},"ts":1401444135000,"senderName":"IZh","senderId":"IZh@irc"},
{"content":{"body":"jungkees: tobie: JakeA: jgraham: zewt: put up a strawman: http://fetch.spec.whatwg.org/#headermap","msgtype":"m.text"},"ts":1401445307000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not sure what the advantage of making order non-deterministic is. It means that you can't use any third party server API where order happens to matter.","msgtype":"m.text"},"ts":1401445668000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: so you'd have an array and you'd flatten headers that have multiple values into multiple entries?","msgtype":"m.text"},"ts":1401446867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think yes, but I don't know what you mean \"flatten\". Isn't it just like your proposal but with an array rather than a set?","msgtype":"m.text"},"ts":1401446945000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: no, because if you really want to represent what HTTP can do there's even more","msgtype":"m.text"},"ts":1401446968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Header: value1\\nHeader: value2, value 3","msgtype":"m.text"},"ts":1401446982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would that become Header: value1\\nHeader: value2\\nHeader: value 3?","msgtype":"m.text"},"ts":1401447008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"biab","msgtype":"m.text"},"ts":1401447102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see. Well at least the server APIs I'm familiar with don't expose that difference so it seems less likely that servers will depend on it","msgtype":"m.text"},"ts":1401447297000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that doesn't really make it clear what the API should be though","msgtype":"m.text"},"ts":1401450665000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"davve: Your svg sizing tests are rather slow in Gecko :( I think with <meta name=timeout value=long> they finish in the timeout on my computer, but it's rather close to rely on.","msgtype":"m.text"},"ts":1401450703000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Conceptually the data structure should be key: [list_of_values], with the API giving special precedence to the first value since in the common case there will be only one","msgtype":"m.text"},"ts":1401450774000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: that's what I came up with","msgtype":"m.text"},"ts":1401450794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: I do agree it would be nice to define iteration order","msgtype":"m.text"},"ts":1401450856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: I suspect we should just use insertion order for that","msgtype":"m.text"},"ts":1401450879000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I was under the impression that the list of values in your API was supposed to be unordered","msgtype":"m.text"},"ts":1401450879000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1401450902000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: at the browser level we need to deal with more brokenness","msgtype":"m.text"},"ts":1401450914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: we need to deal distinctly with the case I gave above","msgtype":"m.text"},"ts":1401450925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1401451123000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: your examples in the toggle bug are a bit confusing","msgtype":"m.text"},"ts":1401459272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpHeaderArray.h","msgtype":"m.text"},"ts":1401460041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpHeaderArray.cpp","msgtype":"m.text"},"ts":1401460056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so sad","msgtype":"m.text"},"ts":1401460058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/slightlyoff/ServiceWorker/issues/300","msgtype":"m.text"},"ts":1401460503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: speakerdeck looks nice","msgtype":"m.text"},"ts":1401470538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: I liked scumbag MySQL :-)","msgtype":"m.text"},"ts":1401470550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: Please let plinss know before you blow up dvcs.w3.org. ^_^","msgtype":"m.text"},"ts":1401470898000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: :)","msgtype":"m.text"},"ts":1401471080000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Domenic: I'd appreciate it if you could take a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=25923 and see if that code can be simpler or will be better down the road","msgtype":"m.text"},"ts":1401473933000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So http://html5.org/r/8651 demonstrates the delay of publishing HTML... To the F5 button","msgtype":"m.text"},"ts":1401474488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or Cmd+r these days","msgtype":"m.text"},"ts":1401474502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, works now :-)","msgtype":"m.text"},"ts":1401474505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hm?","msgtype":"m.text"},"ts":1401474537000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: can you update your script to generate the new links at the bottom of Bugzilla bugs?","msgtype":"m.text"},"ts":1401474538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what?","msgtype":"m.text"},"ts":1401474554000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: html5.org/tools/web-apps-tracker is based on Git, happened the other week","msgtype":"m.text"},"ts":1401474559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: to fix the hammering on svn.whatwg.org ; I also made the short URLs no longer redirect","msgtype":"m.text"},"ts":1401474585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the hammering wasn't such a big deal, but whatever you did does seem to have made it faster","msgtype":"m.text"},"ts":1401474607000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the tracker i mean","msgtype":"m.text"},"ts":1401474610000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not the svn repo","msgtype":"m.text"},"ts":1401474612000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it wasn't a big deal?","msgtype":"m.text"},"ts":1401474755000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you specially asked me about it a couple of weeks back","msgtype":"m.text"},"ts":1401474768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I felt bad so I put half a day into fixing it","msgtype":"m.text"},"ts":1401474783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but yeah, the speed improvements are nice too :-)","msgtype":"m.text"},"ts":1401474795000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wow sorry man, i didn't mean to make you feel bad :-)","msgtype":"m.text"},"ts":1401475242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i just meant that it was likely the source of the slowness :-)","msgtype":"m.text"},"ts":1401475252000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i assumed that caching would have been somewhat trivial","msgtype":"m.text"},"ts":1401475273000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just, check if i've done this particular query before, and if so, read it from disk instead of from the network","msgtype":"m.text"},"ts":1401475292000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://developerblog.redhat.com/2014/05/20/communicating-large-objects-with-web-workers-in-javascript/","msgtype":"m.text"},"ts":1401475774000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"still not COW","msgtype":"m.text"},"ts":1401475794000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"annevk: cc me so I get an email I can flag as to-do?","msgtype":"m.text"},"ts":1401476701000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh, the #whatwg link on http://wiki.whatwg.org/wiki/IRC seems to have pointed to the wrong hostname since 2008? should be freenode.net, not .org :-]","msgtype":"m.text"},"ts":1401479218000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Ha","msgtype":"m.text"},"ts":1401479283000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nobody who's cool enough to have editing rights on that wiki clicks irc:// links, evidently :)","msgtype":"m.text"},"ts":1401479331000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"clicked mostly to see what clients this computer would suggest","msgtype":"m.emote"},"ts":1401479362000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Domenic: done","msgtype":"m.text"},"ts":1401479438000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyway - I have a spec interpretation question regarding window.opener - this may be moot, since there's a bug on changing the spec, but I'd like to <del>come across as a stupid newbie</del><ins>understand how things were supposed to work</ins>","msgtype":"m.text"},"ts":1401479465000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"the IDL says attribute WindowProxy? opener;","msgtype":"m.text"},"ts":1401479480000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors: oh really, that's sad","msgtype":"m.text"},"ts":1401479485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hallvors: it was just changed to any opener","msgtype":"m.text"},"ts":1401479499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hallvors: fixed the wiki page","msgtype":"m.text"},"ts":1401479504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so it seems \"window.opener\" can return only WindowProxy or null","msgtype":"m.text"},"ts":1401479507000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"annevk: thanks","msgtype":"m.text"},"ts":1401479512000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"spec was just fixed to match browsers","msgtype":"m.text"},"ts":1401479544000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hallvors: http://html5.org/r/8652","msgtype":"m.text"},"ts":1401479547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I know it's changing :) but I want to understand both versions, and I was confused :-/","msgtype":"m.text"},"ts":1401479552000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1401479582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's the confusion?","msgtype":"m.text"},"ts":1401479588000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so the prose says on setting, for non-null values \"must call the [[DefineOwnProperty]] internal method of the Window object\"","msgtype":"m.text"},"ts":1401479593000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1401479601000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that is black magic","msgtype":"m.text"},"ts":1401479605000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"means the IDL no longer gets involved","msgtype":"m.text"},"ts":1401479612000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so .. ah, magic.","msgtype":"m.text"},"ts":1401479615000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"so it's not \"shadowing\" or \"overwriting\" but just \"magic\"?? :]","msgtype":"m.text"},"ts":1401479680000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"because I assume this means on getting after it was set, you get the new value..","msgtype":"m.text"},"ts":1401479708000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Hixie: what happens if I do window.opener = 'foo'; delete window.opener; ?","msgtype":"m.text"},"ts":1401479736000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"does it revert magically to IDL stuff?","msgtype":"m.text"},"ts":1401479750000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"plans to write a test here","msgtype":"m.emote"},"ts":1401479766000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"hallvors: hell if i know","msgtype":"m.text"},"ts":1401479826000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hallvors: once you do window.opener = 'foo', everything after that is out of my purview :-)","msgtype":"m.text"},"ts":1401479841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hallvors: this is mostly ES6/WebIDL questions","msgtype":"m.text"},"ts":1401479871000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"renewed hope in D3E","msgtype":"m.text"},"ts":1401479901000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"everyone is a little older and wiser again","msgtype":"m.text"},"ts":1401479925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: another question, setting window.opener to null needs to survive navigation. Does the spec actually say that \"disowning the opener\" persist for any pages loaded into the window, or is it just implied?","msgtype":"m.text"},"ts":1401479929000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"thinks finding the answer in one spec would be hard enough, and now there are three..","msgtype":"m.emote"},"ts":1401479980000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Is mozilla.dev.platform the blink-dev counterpart?","msgtype":"m.text"},"ts":1401481258000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Or, I guess my real question is, are there other Mozilla lists I should pay attention to?","msgtype":"m.text"},"ts":1401481259000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"according to mdn, yes","msgtype":"m.text"},"ts":1401481651000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at least as far as its/iti are concerned","msgtype":"m.text"},"ts":1401481669000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hallvors: the object that \"disowns its owner\" is the browsing context, not the page","msgtype":"m.text"},"ts":1401481867000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"right. I see how it works now.","msgtype":"m.text"},"ts":1401482057000,"senderName":"hallvors","senderId":"hallvors@irc"},
{"content":{"body":"Domenic: that list is worth paying attention to","msgtype":"m.text"},"ts":1401483322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: maybe https://lists.mozilla.org/listinfo/dev-webapi","msgtype":"m.text"},"ts":1401483351000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i like to imagine that there's some gnome somewhere who keeps a list of all the millions of mozilla mailing lists and keeps track of which ones are relevant for which purposes","msgtype":"m.text"},"ts":1401483560000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hmm, wonder what this should do (if anything) http://zewt.org/~glenn/test-blob-base-url.html","msgtype":"m.text"},"ts":1401486160000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"was testing to make sure it didn't use the blob URL itself as a base, but it doesn't attempt any load at all (according to the network inspector)","msgtype":"m.text"},"ts":1401486196000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"absolute URLs do work, though, maybe it just doesn't have a base URL and gives up during url parsing","msgtype":"m.text"},"ts":1401486360000,"senderName":"zewt","senderId":"zewt@irc"}
]