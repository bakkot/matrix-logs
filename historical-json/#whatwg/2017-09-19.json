[
{"content":{"body":"Does `TreatNullAs` have interesting behavior when combined with union types? For https://github.com/mikewest/trusted-types, I'd like to define some sort of union on top of `DOMString`, but the semantics for things like `innerHTML` are strange. :/","msgtype":"m.text"},"ts":1505807865000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I thought TreatNullAs is obsolete now","msgtype":"m.text"},"ts":1505809262000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Obsolete except insofar as it's used on things like `innerHTML`.","msgtype":"m.text"},"ts":1505809293000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: anyway, we should just make it means that passing null means passing \"\"","msgtype":"m.text"},"ts":1505809305000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I thought we have renamed it to [TreatNullAsEmptyString] without value","msgtype":"m.text"},"ts":1505809320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#TreatNullAs *shrug*","msgtype":"m.text"},"ts":1505809341000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Yeah, I saw","msgtype":"m.text"},"ts":1505809358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: ah, https://github.com/heycam/webidl/issues/350","msgtype":"m.text"},"ts":1505809399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: anyway, I don't think it should be problematic with unions necessarily","msgtype":"m.text"},"ts":1505809421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: might just be a bug","msgtype":"m.text"},"ts":1505809428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So the expected behavior for something like `(DOMString or Whatever)` with the `TreatNullAsEmptyString` attribute is that `null` would be accepted, treated as a `DOMString`, and converted to \"\" rather than \"null\"?","msgtype":"m.text"},"ts":1505809507000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I guess that's not clear to me from the spec, but I think it's the behavior I want. :)","msgtype":"m.text"},"ts":1505809535000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Hmm, Worklet folks trying to get out of secure contexts","msgtype":"m.text"},"ts":1505809608000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"CSS doesn't have X\" So why don't you add X?","msgtype":"m.text"},"ts":1505809629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: yes","msgtype":"m.text"},"ts":1505809653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I think you're right that IDL currently doesn't account for the union case","msgtype":"m.text"},"ts":1505809717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: maybe it does...","msgtype":"m.text"},"ts":1505809837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: https://heycam.github.io/webidl/#es-union has \"includes a nullable type\", which is https://heycam.github.io/webidl/#dfn-includes-a-nullable-type","msgtype":"m.text"},"ts":1505809861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: that talks about annotated types which is https://heycam.github.io/webidl/#annotated-types","msgtype":"m.text"},"ts":1505809885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: however, https://heycam.github.io/webidl/#TreatNullAs does not entirely make it clear that it becomes a nullable type due to this...","msgtype":"m.text"},"ts":1505809934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That seems right. But the inner type is `DOMString`, which isn't nullable.","msgtype":"m.text"},"ts":1505809942000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Right. Seems like we could add something there to make it clear.","msgtype":"m.text"},"ts":1505809955000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"(Though an example would be helpful as well, because I wouldn't have found that chain. :( )","msgtype":"m.text"},"ts":1505809968000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I suspect we'd just want to special case TreatNullAs in \"includes a nullable type\", but worth an issue to see what other people say","msgtype":"m.text"},"ts":1505810039000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: might also only want to fix this if we actually end up going with trusted types","msgtype":"m.text"},"ts":1505810060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://lists.w3.org/Archives/Public/www-style/2017Mar/0023.html \"The group will raise this with TAG and get their recommendation.\"","msgtype":"m.text"},"ts":1505810061000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Who do we need to lean on to get the TAG to land dbarron's addition to the design doc?","msgtype":"m.text"},"ts":1505810088000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: Yeah. And the type thing is all super hand-wavey and experimental at the moment, so I don't really want to push other specs to change until we actually know what we want to build.","msgtype":"m.text"},"ts":1505810130000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: this seems minor enough indeed, but I'd like to see an HTML issue for things like this, just to give people a heads up and the ability to weigh in","msgtype":"m.text"},"ts":1505810278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: we might end up changing a bunch of your APIs six-twelve months down the road is good to know","msgtype":"m.text"},"ts":1505810322000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure. Filing a bug now.","msgtype":"m.text"},"ts":1505810458000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: and I guess for the IDL thing I'd file an issue in trusted-types at least, so you know what is still outstanding","msgtype":"m.text"},"ts":1505810556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Would you like a \"Hey, look at this thing!\" bug against HTML? Seems a little early for that... But I'm happy to file one if you'd find it helpful.","msgtype":"m.text"},"ts":1505810700000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I'd like it to be filed quite a while before the point is reached where it becomes hard to revisit the design","msgtype":"m.text"},"ts":1505810890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm. Ok. *shrug* Filing bugs is cheap. :)","msgtype":"m.text"},"ts":1505810969000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: it's the modern equivalent of a heads up on a mailing list","msgtype":"m.text"},"ts":1505811040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I don't really see another way of reaching the 200 folks who watch the HTML repository","msgtype":"m.text"},"ts":1505811057000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure. https://github.com/w3ctag/design-reviews/issues/198 certainly doesn't have the same reach.","msgtype":"m.text"},"ts":1505811086000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst:  You can't use [TreatNullAs] on anything but a DOMString.","msgtype":"m.text"},"ts":1505811248000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: You should talk with annevk, who just said I could. :)","msgtype":"m.text"},"ts":1505811293000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: \"The [TreatNullAs] extended attribute must not be associated with a type that is not DOMString.\" --https://heycam.github.io/webidl/#TreatNullAs","msgtype":"m.text"},"ts":1505811324000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think we can fix that if the need is compelling enough","msgtype":"m.text"},"ts":1505811490000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: you might also want to chime in here: https://github.com/whatwg/dom/issues/150","msgtype":"m.text"},"ts":1505811750000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: it's losely connected to trusted types","msgtype":"m.text"},"ts":1505811757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: so re-reading the whole thread, it seems that what you want is simply: ([TreatNullAsEmptyString] DOMString or Whatever), where whatever CANNOT be a nullable type.","msgtype":"m.text"},"ts":1505811809000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"s/whatever/Whatever/","msgtype":"m.text"},"ts":1505811823000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Yeah. I think it's talking about things a layer or so up from what I'm toying with at the moment.","msgtype":"m.text"},"ts":1505811832000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"That is, whatever types we come up with could be jammed into/required in certain slots of a template.","msgtype":"m.text"},"ts":1505811848000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: and you'll be covered by step 14 of https://heycam.github.io/webidl/#es-union","msgtype":"m.text"},"ts":1505811898000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Does that work? Like, I'm pretty sure it won't work in Chrome, but is it valid syntax in general?","msgtype":"m.text"},"ts":1505811955000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: yes. these are annotated types. I think Chrome supports them now. Let me find the bug","msgtype":"m.text"},"ts":1505812003000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"`third_party/WebKit/Source/core/dom/trustedtypes/TrustedHTML.idl(5) : error: Unexpected \"[\" after \"(\"` :)","msgtype":"m.text"},"ts":1505812030000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Blink's bindings generation code is complicated. :(","msgtype":"m.text"},"ts":1505812059000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: https://bugs.chromium.org/p/chromium/issues/detail?id=714866","msgtype":"m.text"},"ts":1505812085000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ok. Then they just haven't gotten around to making it work with union types.","msgtype":"m.text"},"ts":1505812150000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Which kinda makes sense, given the non-existant usage.","msgtype":"m.text"},"ts":1505812158000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Ugh. My workaround doesn't work, since we treat `undefined` and `null` the same for `?` but not for `TreatNullAs`.","msgtype":"m.text"},"ts":1505812323000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Is that something we could change? :)","msgtype":"m.text"},"ts":1505812341000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Like, make the first two tests in https://github.com/w3c/web-platform-tests/blob/master/domparsing/outerhtml-02.html have identical output? :)","msgtype":"m.text"},"ts":1505812382000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"It's a bit strange that step 2 of https://heycam.github.io/webidl/#es-nullable-type treats `null` and `undefined` as interchangable, but `TreatNullAs` doesn't.","msgtype":"m.text"},"ts":1505812544000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I don't know the precise origins of TreatNullAs tbh, and I have no idea whether changing that behavior would be web compatible.","msgtype":"m.text"},"ts":1505812741000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Let's blindly assert that it would be, and change all the browsers today.","msgtype":"m.text"},"ts":1505812759000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I'm pretty sure it was intentional that undefined becomes \"undefined\"","msgtype":"m.text"},"ts":1505812765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I also don't really see why we'd change that","msgtype":"m.text"},"ts":1505812783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Eh. I'm sure it was intentional. I just find it strange.","msgtype":"m.text"},"ts":1505812785000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"That's not a good enough reason to change it","msgtype":"m.text"},"ts":1505812795000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"See topic","msgtype":"m.text"},"ts":1505812804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Eh.","msgtype":"m.text"},"ts":1505812830000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I guess your other option is to lobby for a [TreatNullAndUndefinedAsEmptyString] extended attribute.","msgtype":"m.text"},"ts":1505813318000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"mkwst: I take cash and bitcoins","msgtype":"m.text"},"ts":1505813347000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or to add metrics and prove that there would be basically zero impact to the web if we made the change.","msgtype":"m.text"},"ts":1505813352000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I guess it all depends whether you value time or money more.","msgtype":"m.text"},"ts":1505813410000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Do you take amex?","msgtype":"m.text"},"ts":1505813463000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: no, traceable, + the fees are too high.","msgtype":"m.text"},"ts":1505813624000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ethereum it is.","msgtype":"m.text"},"ts":1505813659000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: frankly, I'd be surprised if this change was web-compatible, so yeah, that seems like your safest option.","msgtype":"m.text"},"ts":1505813676000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Who do you think expects `innerHTML = undefined` to result in `\"undefined\"` showing up on their page?","msgtype":"m.text"},"ts":1505813698000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Like, no one, right? :)","msgtype":"m.text"},"ts":1505813702000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: that's the normal behavior for things taking strings","msgtype":"m.text"},"ts":1505813797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: that null turns into \"\" is weird","msgtype":"m.text"},"ts":1505813804000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: so I'd expect most people familiar with JavaScript to expect that","msgtype":"m.text"},"ts":1505813823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think the fact that we have magical behavior for `null` would make folks less likely to expect non-magical behavior for `undefined`.","msgtype":"m.text"},"ts":1505813857000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Especially when we treat them the same for explicitly nullable types.","msgtype":"m.text"},"ts":1505813867000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I agree, but that doesn't really matter, does it. The question is whether changing this will break stuff or not, and whether all vendors will be happy to move ahead with that change.","msgtype":"m.text"},"ts":1505813953000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Sure. And in the grand scheme of things, my claim is both that this is trivial, and that we've made larger changes successfully.","msgtype":"m.text"},"ts":1505813988000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I really don't see why we'd change this perfectly interoperable behavior of a legacy feature that's best avoided","msgtype":"m.text"},"ts":1505813998000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I suppose \"It would be simpler to work around Chrome's bindings generation code's foibles\" isn't a good enough answer for you? :)","msgtype":"m.text"},"ts":1505814054000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"*shrug* I don't particularly enjoy leaving my sense of logic at the door.","msgtype":"m.text"},"ts":1505814073000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Making small changes to smooth out the rough edges of the platform is good.","msgtype":"m.text"},"ts":1505814096000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Causing churn to all other browsers to make things easier for Chrome plus taking a potential compat risk? No thanks","msgtype":"m.text"},"ts":1505814106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I disagree that this would smooth anything out","msgtype":"m.text"},"ts":1505814132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Just goes from ugly A to ugly B","msgtype":"m.text"},"ts":1505814144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You don't think the distinction between nullable types and \"TreatNullAs\" is confusing?","msgtype":"m.text"},"ts":1505814159000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"If ugly B is 5 ugly, and ugly A is 6 ugly, then it's an improvement.","msgtype":"m.text"},"ts":1505814200000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Obviously there are costs.","msgtype":"m.text"},"ts":1505814209000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Which is why I'm not just landing the change and walking out the door. :)","msgtype":"m.text"},"ts":1505814233000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I don't think the distinction matters (I do think we need to have undefined-able types at some point, that cannot take null)","msgtype":"m.text"},"ts":1505814368000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: at this point I would suggest not using [TreatNullAs] at all for your new API","msgtype":"m.text"},"ts":1505816500000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"instead just use (DOMString? or SomeObjectType) + prose \"if value is null, set value to ''\"","msgtype":"m.text"},"ts":1505816544000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: I don't want to use `TreatNullAs`. I want to override `innerHTML` to accept a specific type in addition to a `DOMString`.","msgtype":"m.text"},"ts":1505816573000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Catching up... I strongly agree that TreatNullAs is very bad and we should get rid of it, not propagate it to also treat undefined as.","msgtype":"m.text"},"ts":1505816599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah. The issue there is that `?` means that `undefined` will be stringified as `\"\"`, not `\"undefined\"`.","msgtype":"m.text"},"ts":1505816603000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Stringification is stringification","msgtype":"m.text"},"ts":1505816606000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you want to measure something to change, measure removing TreatNullAs so that null stringifies like everything else","msgtype":"m.text"},"ts":1505816626000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"mkwst: well, just change the idl for innerHTML to stop using TreatNullAs","msgtype":"m.text"},"ts":1505816647000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: Thanks. That's helpful. :P","msgtype":"m.text"},"ts":1505816658000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Domenic: I'd be happy to remove it. One way of doing so would be to shift to `DOMString?`, and add in some prose about what to do with `null`, as TimothyGu suggested.","msgtype":"m.text"},"ts":1505816691000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Well... no... I meant the other thing...","msgtype":"m.text"},"ts":1505816706000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just do DOMString like all other string attributes...","msgtype":"m.text"},"ts":1505816715000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That brings us back to the question of whether or not we'd treat the... what other thing?","msgtype":"m.text"},"ts":1505816716000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"oh I see what the problem is about undefined... sorry for not understanding it out-of-hand","msgtype":"m.text"},"ts":1505816725000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Domenic: Ah. For things like `innerHTML` that might be viable? It might be less viable for various bits of CSSOM that use the attribute.","msgtype":"m.text"},"ts":1505816787000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I imagine passing `null` into `setProperty` might be more common than assigning `null` to `innerHTML`.","msgtype":"m.text"},"ts":1505816815000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"But we'd need to measure either way.","msgtype":"m.text"},"ts":1505816825000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"*shrug* I dunno, just saying that if we're making theoretically web-breaking changes, they all seem reasonably plausible to me and I'd much rather stringify uniformly than special-case more values","msgtype":"m.text"},"ts":1505816835000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think my claim was that doing things to `undefined` was pretty unlikely to be a web-breaking change. But, in any event, numbers would be helpful before deciding how much effort to put into any change at all.","msgtype":"m.text"},"ts":1505817323000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I think special-casing undefined would be a step backward (going from 5 ugly to 6)","msgtype":"m.text"},"ts":1505817609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i'm pretty sure web compat depends on innerHTML = null meaning innerHTML = \"\"","msgtype":"m.text"},"ts":1505821892000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mkwst: what do you want me to do with what do you want me to do with https://github.com/heycam/webidl/issues/441. Can I close it? And you reopen something around the undefined behavior later on?","msgtype":"m.text"},"ts":1505823950000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: If the type annotation is the right answer, great! It's not entirely clear to me that it does what you say it does, but you're deeper in the spec than I am, so I trust you!","msgtype":"m.text"},"ts":1505829810000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: well, it is the right answer to the question the issue asks. I don't think it's the right answer to what you want to do, however.","msgtype":"m.text"},"ts":1505829946000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: https://github.com/whatwg/fetch/pull/598","msgtype":"m.text"},"ts":1505830762000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ta, will do this now","msgtype":"m.text"},"ts":1505830801000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hey folks, is there any effort behind server-side rendering of custom elements? I imagine without that, SEO can take a hit (things like <h1> are given more weight by search engines, and if they're hidden inside a <my-header>...unless google's synchronous JS execution will handle that?), and there can be a flash of unstyled/initialised content (or at least missing elements until initialised?)","msgtype":"m.text"},"ts":1505857782000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"I'm trying to share components between a Vue.js app and a WordPress site so we only need to maintain one library.","msgtype":"m.text"},"ts":1505857795000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"(for government, at standards.phila.gov if you're interested)","msgtype":"m.text"},"ts":1505857811000,"senderName":"timwis","senderId":"timwis@irc"},
{"content":{"body":"howdy timwis","msgtype":"m.text"},"ts":1505859397000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"no discussion about anything like that been going on as far as I know","msgtype":"m.text"},"ts":1505859412000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"}
]