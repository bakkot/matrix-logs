[
{"content":{"body":"finds another html5lib bug","msgtype":"m.emote"},"ts":1183858920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and I now have tests for almost every state transition in the tokeniser, only missing the ones that require non-PCDATA (which I don't handle yet)","msgtype":"m.text"},"ts":1183858980000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/misc/test3.test","msgtype":"m.text"},"ts":1183860420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: I see a couple of types of test failure in your tokeniser","msgtype":"m.text"},"ts":1183860421000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(for \"<!doctype! ?>\" (too few parse errors) and \"<z/0 >\" (it misses the attribute), and variations of those)","msgtype":"m.text"},"ts":1183860480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"((It wasn't intentional for my tests to use \"<!doctype!\" and \"<z/0\" so much - that's just what fell out of the sorting function))","msgtype":"m.text"},"ts":1183860840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: thank you. I fixed bugs exposed by your test cases. One test case failure is a bug in your test cases, though: \"<z/0 0\" that should give 3 errors: non-permitted slash, EOF in attribute name and duplicate attribute \"0\".","msgtype":"m.text"},"ts":1183887000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: are you planning on contributing your tests to html5lib?","msgtype":"m.text"},"ts":1183887001000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Member/w3c-html-cg/2007JulSep/0013.html is interesting","msgtype":"m.text"},"ts":1183890000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1183890240000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the \"kitchen sink\" threads are also interesting","msgtype":"m.text"},"ts":1183890241000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in that it seems a lot of people on that mailing list don't really understand what's going on","msgtype":"m.text"},"ts":1183890300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh well","msgtype":"m.text"},"ts":1183890301000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: do you mean vigorously lobbying for a detail that is already in the spec?","msgtype":"m.text"},"ts":1183890540000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"someone really needs to write a primer on diminishing returns, externalities and network effects for the WG, but I'm pretty sure that if someone did, (s)he'd be slammed for not being a real economist","msgtype":"m.text"},"ts":1183890660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: i meant like being worried that XBL2 points to HTML5 and that therefore the security thing might not be defined, etc... missing the whole point that i had to write the security thing anyway, it didn't matter which spec i put it in","msgtype":"m.text"},"ts":1183891440000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1183891441000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bed time","msgtype":"m.text"},"ts":1183891442000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"probably will be online very spottily for the next three weeks","msgtype":"m.text"},"ts":1183891443000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nn","msgtype":"m.text"},"ts":1183891980000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Hixie: oh you referred to public-appformats","msgtype":"m.text"},"ts":1183892040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Oh, whoops, I haven't done anything about duplicate attributes","msgtype":"m.text"},"ts":1183894500000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I guess html5lib hasn't either, since it passed that test)","msgtype":"m.text"},"ts":1183894501000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Looks a bit irritating how it says to drop the attribute value before you've actually got an attribute value at all...","msgtype":"m.text"},"ts":1183894740000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"tries to think of a nice way to handle that","msgtype":"m.emote"},"ts":1183894800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I have a boolean flag","msgtype":"m.text"},"ts":1183894860000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: and I defer the actual addition of an attribute til the value is complete or know not to exist","msgtype":"m.text"},"ts":1183894920000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: which was also the source of one class of test case failures you found","msgtype":"m.text"},"ts":1183894921000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Adding another state variable makes other things more complex (like when verifying you never have to alter an attribute unless there actually is an attribute), so it'd be nice to avoid that if possible","msgtype":"m.text"},"ts":1183895280000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Well, it's fine to add a state variable into the C++/etc implementation, but preferably not into the conceptual model of the algorithm)","msgtype":"m.text"},"ts":1183895580000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: So do you want html5lib commit access (hint, hint)?","msgtype":"m.text"},"ts":1183896240000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"would someone like to volunteer to check an email about bikeshedding, belling the cat and economics 101 for suitability of sending to public-html? in particular, checking whether it is offensively patronizing?","msgtype":"m.text"},"ts":1183896600000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: Oops, I forgot to respond to hsivonen's second comment - I expect it would be good to add these tests to html5lib (which is why I named the file test3.test already :-) )","msgtype":"m.text"},"ts":1183896660000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"at least once I've fixed the bugs, and added manually-written tests for the other bugs I have in my code","msgtype":"m.text"},"ts":1183896720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I went ahead and gave you commit access whether you wanted it or not :)","msgtype":"m.text"},"ts":1183896721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I just saw that - thanks :-)","msgtype":"m.text"},"ts":1183896722000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"wonders if it matters that his test cases don't have good descriptions","msgtype":"m.emote"},"ts":1183897680000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I think I've fixed issue 50. Your testcases would be most welcome now so I can have some confidence that I did the right thing","msgtype":"m.text"},"ts":1183897740000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And also because I promised them in the commit log :)","msgtype":"m.text"},"ts":1183897741000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Just trying to fix the duplicate-attribute issue, which hopefully won't take long :-)","msgtype":"m.text"},"ts":1183897800000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Descriptions are good but probably not essential - the treebuilder tests are all description free, for example","msgtype":"m.text"},"ts":1183897801000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But if you can add them, please do :)","msgtype":"m.text"},"ts":1183897802000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I have no idea what most of my test cases are doing, so I don't know how to usefully describe them","msgtype":"m.text"},"ts":1183897860000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Maybe I could convince the test-generating program to work out why it's choosing those particular ones, but that seems like more effort than would be worthwhile","msgtype":"m.text"},"ts":1183897920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I guess if you keep all auto-generated tests to their own file it's fine","msgtype":"m.text"},"ts":1183897980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"notices he changed something and forgot to run the treewalkers tests","msgtype":"m.emote"},"ts":1183897981000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"hmm. I guess I just send the message at the risk of offending some people","msgtype":"m.text"},"ts":1183898040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Go for it. At least then we'll get email about how offended people are rather than whether or not Anne should include all his optional tags","msgtype":"m.text"},"ts":1183898100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"which is probably the most boring thread ever","msgtype":"m.text"},"ts":1183898160000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1183898161000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: sent","msgtype":"m.text"},"ts":1183898280000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"enjoy: http://lists.w3.org/Archives/Public/public-html/2007Jul/0507.html","msgtype":"m.text"},"ts":1183898460000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"was I too offensive?","msgtype":"m.text"},"ts":1183899360000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: Committed the new tests now","msgtype":"m.text"},"ts":1183899420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Cool","msgtype":"m.text"},"ts":1183899480000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"including one with duplicate attribute values, which html5lib fails","msgtype":"m.text"},"ts":1183899481000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(hsivonen's implementation passes all those tests now)","msgtype":"m.text"},"ts":1183899482000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hsivonen: No, I don't think so. Possibly a little terse, but if people read the links they should get the idea (I'm just reading the joel on software one which I don't think I've seen before)","msgtype":"m.text"},"ts":1183899540000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"likes hsivonen's terse style","msgtype":"m.emote"},"ts":1183900320000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Hmm, the html5lib Ruby tokeniser doesn't seem entirely happy with EOFs","msgtype":"m.text"},"ts":1183900380000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(resulting in various things like <\"undefined method `+' for :EOF:Symbol\">)","msgtype":"m.text"},"ts":1183900381000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: All your tests seem to pass now","msgtype":"m.text"},"ts":1183902660000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: That must mean more tests are needed ;-)","msgtype":"m.text"},"ts":1183904040000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"More tests says: html5lib doesn't lowercase tag/attribute names","msgtype":"m.text"},"ts":1183908480000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: We lowercase them at the tree construction stage (because Sam reuses the tokenizer in situations where case is important)","msgtype":"m.text"},"ts":1183910640000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ah, okay","msgtype":"m.text"},"ts":1183910760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: what are those situations?","msgtype":"m.text"},"ts":1183910761000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"How would it best to test that tokenisers do implement what the spec says (with lowercasing names), while accepting that html5lib doesn't do that at that point?","msgtype":"m.text"},"ts":1183910820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: out of curiosity, why didn't you parametrize this in the tokenizer?","msgtype":"m.text"},"ts":1183910880000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"(And does html5lib work correctly when you do <a a=1 A=2>?)","msgtype":"m.text"},"ts":1183910881000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I think I've been a bit naïve with the way I handle lower casing per spec instead of having a readCaseFolded() method)","msgtype":"m.text"},"ts":1183910940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Your entity overflow code doesn't quite work - with input like &#x100000041; the value overflows from 0x10000000 to 0x00000000 and it's never negative so it never hits the overflow-handler","msgtype":"m.text"},"ts":1183913820000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"will upload tests for that at some point","msgtype":"m.emote"},"ts":1183913880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: ouch. good point","msgtype":"m.text"},"ts":1183913940000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Sam uses it for parsing XML","msgtype":"m.text"},"ts":1183913941000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hsivonen: (the XML having failed to be processed by an XML parser)","msgtype":"m.text"},"ts":1183913942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Philip`: fix (I think) checked in","msgtype":"m.text"},"ts":1183914180000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: thanks","msgtype":"m.text"},"ts":1183914181000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: Seems to work perfectly now","msgtype":"m.text"},"ts":1183914540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"looks like my code is bad enough to generate community interest after all :-)","msgtype":"m.text"},"ts":1183914660000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I'm always interested in breaking things ;-)","msgtype":"m.text"},"ts":1183914720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I'd be interested in trying to generate stack-using code like yours, and seeing how that works in comparison with switch-statements or gotos","msgtype":"m.text"},"ts":1183914840000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"though I'm not sure how much automatic transformation I can do to extract stackiness, and I'm too lazy to do that manually","msgtype":"m.text"},"ts":1183914900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: my expectation is that the code won't be stack-based once server HotSpot has done its thing","msgtype":"m.text"},"ts":1183914960000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"though that reminds me that I need to collect a set of documents for performance testing...","msgtype":"m.text"},"ts":1183914961000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"if the expectation is incorrect, running a byte code-level optimizer would make sense","msgtype":"m.text"},"ts":1183914962000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: either way, it seems to me that it is easier to convert the kind of code I have written to unconditional jumps than it would be for a switch (which, OTOH, would guarantee no worse that conditional jumps)","msgtype":"m.text"},"ts":1183915140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"It seems quite possible that HotSpot could give better performance for your code than for switch-based code, if it's doing lots of inlining and tail-call optimisation - it'd be interesting to see how well it works in practice","msgtype":"m.text"},"ts":1183915260000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: so whether the use of methods vs. one huge switch makes sense depends on what HotSpot really does","msgtype":"m.text"},"ts":1183915261000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"That makes sense","msgtype":"m.text"},"ts":1183915262000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Unfortunately C++ doesn't have the advantage of dynamic compilation, so I guess things will act totally differently there","msgtype":"m.text"},"ts":1183915320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but fortunately it doesn't have dynamic compilation, so you can usually have some idea of what the compiler's actually going to do to your code :-)","msgtype":"m.text"},"ts":1183915321000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: the problem is that testing which approach really performs better on HotSpot is a non-trivial task. Which is why I went with an unverified educated (hopefully :-) guess","msgtype":"m.text"},"ts":1183915380000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: yeah, I'd bet on switch in the C++ case","msgtype":"m.text"},"ts":1183915381000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"That's why I'd like to be able generate different implementation approaches from the same source data, which is still non-trivial but involves much less typing :-)","msgtype":"m.text"},"ts":1183915440000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"besides, for Gecko-like threading (lack thereof), on would want to have a switch-based parser with states broken down even further so that each state reads at most one character","msgtype":"m.text"},"ts":1183915500000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"this way, the state variable would effectively store the current continuation","msgtype":"m.text"},"ts":1183915501000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"and the tokenizer could be interrupted after any input character","msgtype":"m.text"},"ts":1183915560000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"s/on would/one would/","msgtype":"m.text"},"ts":1183915561000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"What happens when you need to look ahead by ~6 characters at once?","msgtype":"m.text"},"ts":1183915620000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I don't.","msgtype":"m.text"},"ts":1183915621000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: my max lookahead is one read()/unread()","msgtype":"m.text"},"ts":1183915622000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: otherwise, I buffer pessimistically and look back","msgtype":"m.text"},"ts":1183915680000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Philip`: when I start consuming a doctype, I start building a bogus comment in parallel just in case","msgtype":"m.text"},"ts":1183915681000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I should learn how to dump native code disassemblies from HotSpot some day","msgtype":"m.text"},"ts":1183915800000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Ah, okay, so if you had \"<!docty>\"(network latency) then it would emit the token before running out of characters","msgtype":"m.text"},"ts":1183915920000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1183915921000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I wonder what the Wikipedia article on \"HTML 5\" means when it says \"Elements no longer compatible with HTML 4 – a, hr, strong\"","msgtype":"m.text"},"ts":1183920360000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"[NEEDS CITATION]","msgtype":"m.text"},"ts":1183920540000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Looks like they just chose a random selection of points from html4-differences","msgtype":"m.text"},"ts":1183920600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and in that case, particularly the points under \"These elements have new meanings in HTML 5 which are incompatible with HTML 4\"","msgtype":"m.text"},"ts":1183920601000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Not entirely sure what the point is in duplicating that data badly, when there's an external link to html4-differences)","msgtype":"m.text"},"ts":1183920720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"edited the wiki page: \"Elements with redefined meaning which are not compatible with HTML 4 – a, hr, strong\"","msgtype":"m.emote"},"ts":1183921980000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"hsivonen: re: why case handling wasn't paramterized in the tokenizer: I don't know. I think Sam just picked a solution that did what he wanted. Is there a good reason to prefer a different approach","msgtype":"m.text"},"ts":1183923720000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1183923721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Philip`: I'll change the html5lib test harness to do the same thing with attribute names as the treebuilder","msgtype":"m.text"},"ts":1183923780000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: reasons are running tokenizer-level tests and eliminating duplicate attributes","msgtype":"m.text"},"ts":1183924080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"jgraham: going forward if we integrate SVG, a flag you can toggle in mid-tokenization might become useful","msgtype":"m.text"},"ts":1183924200000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: That's a good point","msgtype":"m.text"},"ts":1183924201000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"OK, I think I will change it to work with a flag","msgtype":"m.text"},"ts":1183924202000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"perhaps in the future I move case folding to one place behind a flag so that case folding writes back to the read buffer","msgtype":"m.text"},"ts":1183924260000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"this way I could avoid name copying whenever a name doesn't cross the read buffer boundary","msgtype":"m.text"},"ts":1183924320000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"the fun part would be that then one could make a legitimate claim that lower case is faster :-)","msgtype":"m.text"},"ts":1183924440000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"likes <xmp> and wonders why it was deprecated way back when","msgtype":"m.emote"},"ts":1183925340000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"even pretending html to be sgml it's just an ordinary rcdata element, isn't it?","msgtype":"m.text"},"ts":1183925400000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Maybe because they couldn't work out a good way to show authors an example of how to write <xmp>...</xmp>, without the example closing itself half-way through?","msgtype":"m.text"},"ts":1183925401000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"zcorpan_: there's a subject for a fun public-html thread","msgtype":"m.text"},"ts":1183925402000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Opera's <xmp> parsing is very broken, unfortunately :-(","msgtype":"m.text"},"ts":1183925403000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I think it was actually mentioned on public-html some months ago","msgtype":"m.text"},"ts":1183925404000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: &lt;/xmp>","msgtype":"m.text"},"ts":1183925405000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: That won't work, except in Opera","msgtype":"m.text"},"ts":1183925460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"since it ought to just show the text \"&lt;/xmp>\"","msgtype":"m.text"},"ts":1183925461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh, it's a cdata element even","msgtype":"m.text"},"ts":1183925462000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/?a%3Cscript%3E%3C/script/%3Ea%0Aa%3Cstyle%3E%3C/style/%3Ea%0Aa%3Cxmp%3E%3C/xmp/%3Ea - that's rather odd in Firefox","msgtype":"m.text"},"ts":1183925640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: file a bug? :)","msgtype":"m.text"},"ts":1183925820000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"No need - it'll all be perfect once they've just implemented HTML5 ;-)","msgtype":"m.text"},"ts":1183925940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://software.hixie.ch/utilities/js/live-dom-viewer/?%3Ca/x%3E%3Ca/x/%3E%3Ca/x/x%3E%3Ca/x%20%3E%3Ca/x%20x%3E","msgtype":"m.text"},"ts":1183926360000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"<xmp><!--</xmp>--></xmp> ;)","msgtype":"m.text"},"ts":1183926900000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Looks like my OCaml implementation isn't very good - the C++ one is 150 times faster...","msgtype":"m.text"},"ts":1183931400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Oh, right, that's because I'm making it read from stdin one character at a time","msgtype":"m.text"},"ts":1183932000000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Aha - the OCaml one is now only four times slower than the C++ one, for tokenising the HTML5 spec","msgtype":"m.text"},"ts":1183932600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"http://canvex.lazyilluminati.com/svn/tokeniser/ is the current version of [not quite all of] my code","msgtype":"m.text"},"ts":1183937100000,"senderName":"Philip`","senderId":"Philip`@irc"}
]