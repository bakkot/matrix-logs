[
{"content":{"body":"Hixie_: @@unscopeable is a temporary name for a property that is used to hide other properties from with() lookup","msgtype":"m.text"},"ts":1380155477000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: @@unscopeable will be become Symbol.unscopeables or some such and then you'd have Array.prototype[Symbel.unscopeables] = [\"find\", ...] predefined to not run into compatibility bugs","msgtype":"m.text"},"ts":1380155531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: similarly we could have Element.prototype[Symbol.unscopeables] = [\"after\", \"before\", ...] to hide certain common names, assuming event handlers are similarly defined to with","msgtype":"m.text"},"ts":1380155583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't with supposed to be dead?","msgtype":"m.text"},"ts":1380156088000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"are we going to make all new things on nodes unscopeable? or just do it for names that are likely to be problematic?","msgtype":"m.text"},"ts":1380156803000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie_: the web uses it and prevents extending Array.prototype due to the way it is used","msgtype":"m.text"},"ts":1380156958000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, are we going to make all new things on nodes unscopeable? or just do it for names that are likely to be problematic?","msgtype":"m.text"},"ts":1380156970000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"this is for onclick=\"barename\" right?","msgtype":"m.text"},"ts":1380156988000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: case-by-case, if unscopeable makes it through","msgtype":"m.text"},"ts":1380156995000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: yeah","msgtype":"m.text"},"ts":1380156997000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1380157004000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"tbh I would prefer to draw a line and say only existing things are in scope automatically","msgtype":"m.text"},"ts":1380157021000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"annevk: k","msgtype":"m.text"},"ts":1380157105000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heycam: while you're here, any comment on https://www.w3.org/Bugs/Public/show_bug.cgi?id=23358 ?","msgtype":"m.text"},"ts":1380157184000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1380157210000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie_, so this sounds a little similar to what WebGL is doing for annotating methods that should throw if the context has been lost","msgtype":"m.text"},"ts":1380157261000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"similar, yeah","msgtype":"m.text"},"ts":1380157272000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, I suggested to them that they define that extended attribute in WebGL itself. how HTML-specific is this one you need?","msgtype":"m.text"},"ts":1380157294000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i don't know. right now i only want it for History","msgtype":"m.text"},"ts":1380157319000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"which is just HTML","msgtype":"m.text"},"ts":1380157324000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but i wouldn't be surprised to see it used elsewhere","msgtype":"m.text"},"ts":1380157330000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"really my ulterior motive is getting out of defining what it means exactly","msgtype":"m.text"},"ts":1380157344000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"otherwise i'd have just done it in prose :-)","msgtype":"m.text"},"ts":1380157348000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1380157377000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"well, if you don't know exactly how it's meant to be defined...","msgtype":"m.text"},"ts":1380157384000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"i mean, i know what i want it to do: throw an exception on method and property accesses","msgtype":"m.text"},"ts":1380157417000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but ES is getting more and more complicated and has gone over my head","msgtype":"m.text"},"ts":1380157433000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"such that i no longer know how to define this, let alone in a language-agnostic way.","msgtype":"m.text"},"ts":1380157446000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1380157449000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I think then it makes sense to have something defined in Web IDL, to do the check at all the right points","msgtype":"m.text"},"ts":1380157510000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"[Poisonable] on the History interface, where then you define in HTML when a History object is poisoned","msgtype":"m.text"},"ts":1380157675000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1380157677000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"lgtm","msgtype":"m.text"},"ts":1380157706000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"comments in the bug","msgtype":"m.emote"},"ts":1380157711000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"or actually","msgtype":"m.text"},"ts":1380157720000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"we don't even need an annotation","msgtype":"m.text"},"ts":1380157723000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I guess not","msgtype":"m.text"},"ts":1380157742000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"just have it possible for objects to be in a poisoned state (note, it should be possible for this to revert out of it), and by default, it never gets set","msgtype":"m.text"},"ts":1380157745000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"just like now we have the security check hook in various places","msgtype":"m.text"},"ts":1380157790000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1380157864000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"any particular exception you think would be good to throw?","msgtype":"m.text"},"ts":1380157904000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"there's a test in the dependant bug","msgtype":"m.text"},"ts":1380157929000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i didn't check what the exception type is","msgtype":"m.text"},"ts":1380157938000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but it triggers it","msgtype":"m.text"},"ts":1380157950000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't remember in what browsers","msgtype":"m.text"},"ts":1380157957000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(some just do no-ops instead of throwing)","msgtype":"m.text"},"ts":1380157962000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I see a SecurityError in the console for the second test","msgtype":"m.text"},"ts":1380158025000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"but nothing for the first","msgtype":"m.text"},"ts":1380158028000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"is the need for this History object poisoning because of document origin changing or something?","msgtype":"m.text"},"ts":1380158060000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"does it make sense to handle it as part of the security check hook?","msgtype":"m.text"},"ts":1380158069000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"000.html is a same-origin cas","msgtype":"m.text"},"ts":1380158189000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"case","msgtype":"m.text"},"ts":1380158191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(sorry can't talk much or do testing right now)","msgtype":"m.text"},"ts":1380158204000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, will take discussion to bug","msgtype":"m.text"},"ts":1380158210000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"pretty sure that some of the browsers throw for both","msgtype":"m.text"},"ts":1380158222000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if they don't then it might change things","msgtype":"m.text"},"ts":1380158226000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"also note that some browsers report SecurityError but not other exceptions, iirc","msgtype":"m.text"},"ts":1380158242000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"mm","msgtype":"m.text"},"ts":1380158248000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"so you might have to change the test to catch it or something","msgtype":"m.text"},"ts":1380158251000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1380158256000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I might punt it back to you in the bug to check what behaviour we ultimately need","msgtype":"m.text"},"ts":1380158279000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"sure thing. make sure it's assigned to me, bugs that aren't assigned to me have month-long lag cos i only read the bugmail every few months","msgtype":"m.text"},"ts":1380158363000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"http://store.steampowered.com/livingroom/SteamMachines/","msgtype":"m.text"},"ts":1380159471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam: not sure if my email mentioned it, but having [Global] and [Exposed] annotations would be welcome","msgtype":"m.text"},"ts":1380159649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, yeah, would be good to solve those together","msgtype":"m.text"},"ts":1380159681000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I think we can do it","msgtype":"m.text"},"ts":1380159685000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I hope this Valve thing takes off","msgtype":"m.text"},"ts":1380159806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"morning","msgtype":"m.text"},"ts":1380173378000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"anyone suitable for discussion re. <dialog> ?","msgtype":"m.text"},"ts":1380173387000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"hi ondras, i'd be interested in such a discussion. i'm implementing it in chromium","msgtype":"m.text"},"ts":1380173472000,"senderName":"falken","senderId":"falken@irc"},
{"content":{"body":"falken: I am intrigued by the naming inconsistency in the JS API, namely the \"show/close\" methods","msgtype":"m.text"},"ts":1380173921000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"i.e. no \"show/hide\" nor \"open/close\"","msgtype":"m.text"},"ts":1380173930000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but as a non-native speaker, I might be missing some language subtleties","msgtype":"m.text"},"ts":1380173961000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I always try to create the naming pairs as mentioned above, for the sake of consistency","msgtype":"m.text"},"ts":1380173981000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: yes there was discussion on the list about that... one sec","msgtype":"m.text"},"ts":1380173992000,"senderName":"falken","senderId":"falken@irc"},
{"content":{"body":"http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2013-August/040593.html","msgtype":"m.text"},"ts":1380174011000,"senderName":"falken","senderId":"falken@irc"},
{"content":{"body":"it was named to be consistent with the existing window.showModalDialog(), window.close()","msgtype":"m.text"},"ts":1380174036000,"senderName":"falken","senderId":"falken@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1380174124000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"thanks for the link","msgtype":"m.text"},"ts":1380174127000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"from the short discussion fragment, it looks like the majority is voting towards a open/close change, right?","msgtype":"m.text"},"ts":1380174150000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"we don't base decisions on votes","msgtype":"m.text"},"ts":1380174159000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, well, of course","msgtype":"m.text"},"ts":1380174169000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but if there's a stronger argument to do it one way or another that hasn't yet been discussed, please do bring it up :-)","msgtype":"m.text"},"ts":1380174174000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I just wanted to grasp the general attitude","msgtype":"m.text"},"ts":1380174179000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"well, I do not bring any new insights. as a web developer who creates similar windows with existing APIs, I always stick to open/close or show/hide","msgtype":"m.text"},"ts":1380174217000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"(it's still being implemented, so now's the last chance to get the names pinned down)","msgtype":"m.text"},"ts":1380174222000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but my voice has a zero weight, I guess","msgtype":"m.text"},"ts":1380174241000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"all the relevant arguments were mentioned","msgtype":"m.text"},"ts":1380174248000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: do you use openModal() or showModal() though?","msgtype":"m.text"},"ts":1380174251000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"for modal dialogs, close() seems to be uniformaly the right terminology, but the question is how do you open it","msgtype":"m.text"},"ts":1380174276000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and a lot of APIs do seem to use show*() for modals","msgtype":"m.text"},"ts":1380174287000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"like showModalDialog(), MessageBox::Show(), etc","msgtype":"m.text"},"ts":1380174307000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: exactly as you said; \"close\" being the more natural versions, which implies - because of consistency - that the second method must be \"open\"","msgtype":"m.text"},"ts":1380174321000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"*version","msgtype":"m.text"},"ts":1380174329000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the openModal()/showModal() are some existing standardized APIs? I was thinking more of a proprietary application/widget-specific methods","msgtype":"m.text"},"ts":1380174353000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"showModalDialog() is in HTML already, takes close()","msgtype":"m.text"},"ts":1380174366000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"MessageBox is win32","msgtype":"m.text"},"ts":1380174378000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"something that would be useful is an objective look at what other APIs do","msgtype":"m.text"},"ts":1380174406000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"e.g. win32, jQuery, delphi, etc","msgtype":"m.text"},"ts":1380174413000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I see. I was somewhat aware of a showModalDialog, but always as a MS-only non-widely-implemented extension","msgtype":"m.text"},"ts":1380174470000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"http://qt-project.org/doc/qt-4.7/qwidget.html","msgtype":"m.text"},"ts":1380174672000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"this is interesting","msgtype":"m.text"},"ts":1380174674000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"they have show, hide and close","msgtype":"m.text"},"ts":1380174681000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"show and hide being equal to setVisibility(1/0)","msgtype":"m.text"},"ts":1380174725000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Hixie_: are you still around?","msgtype":"m.text"},"ts":1380176741000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"sort of","msgtype":"m.text"},"ts":1380176752000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I have this weird behavior of querySelectorAll in a particular case","msgtype":"m.text"},"ts":1380176874000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Hixie_: http://jsfiddle.net/fwJrp/","msgtype":"m.text"},"ts":1380176875000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"basically, a table inside a table","msgtype":"m.text"},"ts":1380176883000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but the behavior is consistent across browsers","msgtype":"m.text"},"ts":1380176893000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"looks incorrect, but there is probably some stuff in the spec that I am missing","msgtype":"m.text"},"ts":1380176910000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"why is it wrong?","msgtype":"m.text"},"ts":1380176926000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"shall be 1?","msgtype":"m.text"},"ts":1380176930000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"rows in tbody inside the second table","msgtype":"m.text"},"ts":1380176939000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the tr is in a tbody, so it should be selecting the thead's row","msgtype":"m.text"},"ts":1380176945000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the thead's tr i mean","msgtype":"m.text"},"ts":1380176952000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh right, my bad","msgtype":"m.text"},"ts":1380176987000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1380177000000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"damn.","msgtype":"m.text"},"ts":1380177002000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the querySelectorAll","msgtype":"m.text"},"ts":1380177009000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"is executed on the second table","msgtype":"m.text"},"ts":1380177013000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"so I thought that the expression takes that node as a root for evaluating the selector","msgtype":"m.text"},"ts":1380177045000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"there's some scoping mechanism, but i forget what it is","msgtype":"m.text"},"ts":1380177074000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":":scope or something","msgtype":"m.text"},"ts":1380177076000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: http://updates.html5rocks.com/2013/03/What-s-the-CSS-scope-pseudo-class-for","msgtype":"m.text"},"ts":1380177163000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"found it","msgtype":"m.text"},"ts":1380177167000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1380177169000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"jgraham: MikeSmith: why isn't https://critic.hoppipolla.co.uk/r/309 tracking the PR anymore?","msgtype":"m.text"},"ts":1380181152000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: btw, it might be useful to try to get plinns on board with the testing thing. i recall from the css f2f that he hadn't integrated css's testing thing with your thing because the goals are different (getting spec to rec vs. improving interop). but he also said he didn't mind having different tests for the different goals","msgtype":"m.text"},"ts":1380182055000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(or something along those lines)","msgtype":"m.text"},"ts":1380182194000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: http://www.whatwg.org/specs/web-apps/current-work/multipage/fragment-links.js is still broken. can you look at it, please? it blocks me generating html-differences with anolis+xref.","msgtype":"m.text"},"ts":1380182987000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Because MikeSmith rebased the branch","msgtype":"m.text"},"ts":1380189746000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It doesn't (yet) deal with that automagically","msgtype":"m.text"},"ts":1380189763000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"YOu have to click \"Rebase Review\", follow the steps, and then reenable tracking","msgtype":"m.text"},"ts":1380189784000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: ah","msgtype":"m.text"},"ts":1380190204000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"thx","msgtype":"m.text"},"ts":1380190207000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(I did it for that review)","msgtype":"m.text"},"ts":1380190361000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So should TextDecoder and XMLHttpRequest also accept ArrayBuffer in addition to ArrayBufferView?","msgtype":"m.text"},"ts":1380204467000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Also, where is ArrayBufferView defined these days?","msgtype":"m.text"},"ts":1380204534000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Did they rename that to DataView in ES6? Is that compatible?","msgtype":"m.text"},"ts":1380204565000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Oh, it was never exposed...","msgtype":"m.text"},"ts":1380204713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The ES6-equivalent is %TypedArray%","msgtype":"m.text"},"ts":1380204744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i think we should allow both as input for consistency with WebSocket","msgtype":"m.text"},"ts":1380205554000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah, filed a bug on IDL","msgtype":"m.text"},"ts":1380205574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Now they're ES types IDL needs fixing","msgtype":"m.text"},"ts":1380205604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham, zcorpan - so, clearly there is something I'm doing wrong as far as what Critic expects","msgtype":"m.text"},"ts":1380206795000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I don't know exactly what","msgtype":"m.text"},"ts":1380206802000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I don't understand how to rebase without getting that error e-mail from Critic","msgtype":"m.text"},"ts":1380206831000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"do you need to rebase?","msgtype":"m.text"},"ts":1380206842000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I had thought I did because Critic expected it for some reason","msgtype":"m.text"},"ts":1380206866000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I assume now that all I need to do is a simple commit and push to the branch","msgtype":"m.text"},"ts":1380206904000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1380206935000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1380206940000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: So, I don't know what you're *doing*, much less what you're doing wrong","msgtype":"m.text"},"ts":1380206941000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what I did was just a \"git rebase master\" on the branch","msgtype":"m.text"},"ts":1380206963000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and then \"git push -f\" to push it to the branch","msgtype":"m.text"},"ts":1380206979000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"my branch","msgtype":"m.text"},"ts":1380206981000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and.. that's it, really","msgtype":"m.text"},"ts":1380207023000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"So did you do anything with critic?","msgtype":"m.text"},"ts":1380207112000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, responded to review feedback from zcorpan","msgtype":"m.text"},"ts":1380207139000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"manually, through the Critic ui","msgtype":"m.text"},"ts":1380207154000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But you didn't interact with the rebase feature?","msgtype":"m.text"},"ts":1380207161000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah, well, I pushed the button for \"Update\" whatever","msgtype":"m.text"},"ts":1380207211000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the one next to \"Rebase Review\"","msgtype":"m.text"},"ts":1380207220000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because... I thought I had to do that for some reason","msgtype":"m.text"},"ts":1380207234000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If you push \"Update\" at that point, you will get an error","msgtype":"m.text"},"ts":1380207236000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1380207241000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so ok then, what exactly should I do at that point?","msgtype":"m.text"},"ts":1380207257000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nothing?","msgtype":"m.text"},"ts":1380207259000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Because it needs to be told about the rebase","msgtype":"m.text"},"ts":1380207260000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1380207265000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so how do I do that?","msgtype":"m.text"},"ts":1380207275000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"At the moment you push \"Rebase Review\"","msgtype":"m.text"},"ts":1380207300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And then follow the steps","msgtype":"m.text"},"ts":1380207305000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Clearly this needs to be more automated if possible","msgtype":"m.text"},"ts":1380207317000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"well mostly it's probably just pilot error on my part","msgtype":"m.text"},"ts":1380207346000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I just like to push buttons to see what will happen","msgtype":"m.text"},"ts":1380207355000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"automate and remove the buttons by default :-)","msgtype":"m.text"},"ts":1380207367000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so anyway, right now I will push \"Rebase Review\" and see what I break next :)","msgtype":"m.text"},"ts":1380207383000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, like I say, I think there is probably enough information in the github API to do this automatically","msgtype":"m.text"},"ts":1380207402000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I am not sure until I try to implement","msgtype":"m.text"},"ts":1380207412000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: jgraham already rebased review 309","msgtype":"m.text"},"ts":1380207452000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1380207457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well, the commits don't show up there","msgtype":"m.text"},"ts":1380207465000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it shows up as a single commit. and i've reviewed it","msgtype":"m.text"},"ts":1380207518000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1380207537000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So","msgtype":"m.text"},"ts":1380207538000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Critic can't, in general, tell the difference between changes that happened because of the rebase, and extra commits that you pushed","msgtype":"m.text"},"ts":1380207572000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1380207572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1380207578000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I understand why that's the case","msgtype":"m.text"},"ts":1380207590000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: so you saw/reviewed https://github.com/sideshowbarker/web-platform-tests/commit/8532cf210959b36c2d3f877da508754ee0646cda ?","msgtype":"m.text"},"ts":1380207664000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is, I just dropped the CRs from that test document completely","msgtype":"m.text"},"ts":1380207712000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yes. and there's currently 1 open issue. :-)","msgtype":"m.text"},"ts":1380207724000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tries to find where the issue is listed","msgtype":"m.emote"},"ts":1380207760000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Basically when you push a rebase, it looks at the whole branch history before the rebase, the whole branch history after the rebase, and calls the difference between these two the \"equivalent merge commit\"","msgtype":"m.text"},"ts":1380207763000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: under \"Open Issues\" in https://critic.hoppipolla.co.uk/r/309","msgtype":"m.text"},"ts":1380207781000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I see that the UI says there's an issue but as yet I don't find right away where the issue is listed","msgtype":"m.text"},"ts":1380207781000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham: right yeah, understood","msgtype":"m.text"},"ts":1380207799000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: OK I see the Open Issues head there again now","msgtype":"m.text"},"ts":1380207833000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1380207847000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"gotta go","msgtype":"m.text"},"ts":1380207917000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: ok, thanks","msgtype":"m.text"},"ts":1380207937000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks for your patience :)","msgtype":"m.text"},"ts":1380207947000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"In more examples of aresome PHP documentation, it doesn't say if echo (or print) implicity adds a line break","msgtype":"m.text"},"ts":1380208159000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*awesome","msgtype":"m.text"},"ts":1380208166000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although arse-some would be more right","msgtype":"m.text"},"ts":1380208184000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Anyone want to enlighten me?","msgtype":"m.text"},"ts":1380208273000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"isn't that a pretty trivial thing to just find out :P","msgtype":"m.text"},"ts":1380208310000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"> php","msgtype":"m.text"},"ts":1380208320000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"<? print \"x\"; print \"x\"; ?>","msgtype":"m.text"},"ts":1380208320000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"xx","msgtype":"m.text"},"ts":1380208320000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jgraham: it probably depends on something in php.ini :)","msgtype":"m.text"},"ts":1380208363000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"zewt: I don't have PHP installed…","msgtype":"m.text"},"ts":1380208378000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: So, is echo the same or is it different?","msgtype":"m.text"},"ts":1380208405000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1380208424000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: Thanks","msgtype":"m.text"},"ts":1380208450000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I wonder why they thought that three ways to spell the same feature were needed","msgtype":"m.text"},"ts":1380208500000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Thanks for kicking off the \"byte sequence\" bug/discussion.","msgtype":"m.text"},"ts":1380215458000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: was trying to fix bugs in XHR and ran into that basically :)","msgtype":"m.text"},"ts":1380216187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: DataView is just another ArrayBufferView right?","msgtype":"m.text"},"ts":1380216959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"... what the fuck?","msgtype":"m.text"},"ts":1380217048000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"DataView defaults ... to big endian?","msgtype":"m.text"},"ts":1380217053000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"who is smoking what, and in what quantities?","msgtype":"m.text"},"ts":1380217059000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, networking is typically big-endian","msgtype":"m.text"},"ts":1380217221000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"nothing in javascript ever touches low-level network data","msgtype":"m.text"},"ts":1380217273000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Yeah, DataView is an ArrayBufferView","msgtype":"m.text"},"ts":1380217285000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: not entirely clear whether that's still the case in ES6 btw","msgtype":"m.text"},"ts":1380217299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I didn't see \"ArrayBufferView\" at all in the ES6 draft.","msgtype":"m.text"},"ts":1380217350000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"So depends what you mean by \"just\" I guess","msgtype":"m.text"},"ts":1380217388000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: the common ancestor is %TypedArray% for Uint8Array and friends","msgtype":"m.text"},"ts":1380217423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: which is not exposed","msgtype":"m.text"},"ts":1380217450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-22.2","msgtype":"m.text"},"ts":1380217460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"DataView is defined elsewhere http://people.mozilla.org/~jorendorff/es6-draft.html#sec-24.2 and seems somewhat unrelated","msgtype":"m.text"},"ts":1380217478000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: %TypedArray% is more of a macro parameter in the spec than a type, if I read it correctly.","msgtype":"m.text"},"ts":1380217491000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"DataView is pointless, should just be rolled in as methods on the base class of all views","msgtype":"m.text"},"ts":1380217494000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jsbell: yeah","msgtype":"m.text"},"ts":1380217501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<zcorpan> jgraham: btw, it might be useful to try to get plinns on board with the testing thing. i recall from the css f2f that he hadn't integrated css's testing thing with your thing because the goals are different (getting spec to rec vs. improving interop). but he also said he didn't mind having different tests for the different goals","msgtype":"m.text"},"ts":1380217530000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Sounds like we get to put css tests in wpt, then?","msgtype":"m.text"},"ts":1380217541000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zewt: Use case for DataView is you get a buffer off the wire and then you are parsing it... you can do unaligned access which the array types don't let you do w/o copying.","msgtype":"m.text"},"ts":1380217542000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ah, missed the \"base class of all views\". Well, if there was one. :)","msgtype":"m.text"},"ts":1380217618000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"sorry, I mean having the methods on a separate object you have to create is pointless; the methods should just be available on the other views","msgtype":"m.text"},"ts":1380217709000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"afk, work","msgtype":"m.text"},"ts":1380217720000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jsbell: added a comment with what I think we can use as strategy","msgtype":"m.text"},"ts":1380218011000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: well, apart from return value...","msgtype":"m.text"},"ts":1380218023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1380218026000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: is there a reason we went with returning a view in TextEncoder?","msgtype":"m.text"},"ts":1380218145000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't recall off the top of my head, will poke around in the threads. Possibly because a raw ArrayBuffer is pretty useless and you're probably going to wrap it with a Uint8Array anyway","msgtype":"m.text"},"ts":1380218225000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"We need sicking to weigh in. I share his concern that for APIs that accept and emit binary (like indexeddb), passing in one type and getting another out is wierd.","msgtype":"m.text"},"ts":1380218278000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"zewt, the even more fun thing is that if you use a Uint32Buffer or something, the endianness is completely undefined","msgtype":"m.text"},"ts":1380218280000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt, which I think is absolutely broke","msgtype":"m.text"},"ts":1380218286000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"n","msgtype":"m.text"},"ts":1380218288000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"jsbell: especially when that API is a storage API :) You generally expect to get back what you store :)","msgtype":"m.text"},"ts":1380218311000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"... which would be true for IDB values but not \"I just want binary\" keys.","msgtype":"m.text"},"ts":1380218346000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jgraham, ping","msgtype":"m.text"},"ts":1380218386000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jsbell: is there a problem with limiting to Uint8Array as type? Should be pretty cheap and easy to always wrap a Uint8Array around whatever type you have","msgtype":"m.text"},"ts":1380218425000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1380218455000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: is there a problem with supporting all the different types?","msgtype":"m.text"},"ts":1380218456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: See the discussion in https://www.w3.org/Bugs/Public/show_bug.cgi?id=23369","msgtype":"m.text"},"ts":1380218459000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"... for the other side of the argument so far","msgtype":"m.text"},"ts":1380218473000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: seems that for Indexed DB you might want something more complicated","msgtype":"m.text"},"ts":1380218483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: platform APIs I was thinking of were XMLHttpRequest, WebSocket, TextDecoder, Blob, File, etc.","msgtype":"m.text"},"ts":1380218516000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: for those normalization makes sense, dunno about Indexed DB","msgtype":"m.text"},"ts":1380218530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: For this particular bit of IDB we really do just want a ByteSequence (it's a proposed addition, BTW, not a shipping feature)","msgtype":"m.text"},"ts":1380218557000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Oh okay","msgtype":"m.text"},"ts":1380218574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We could mandate Uint8Array in/out but platform alignment seem like a good thing","msgtype":"m.text"},"ts":1380218586000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ms2ger: pong","msgtype":"m.text"},"ts":1380218648000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: remember that we're talking about keys here. IDB already supports storing all types of binary arrays","msgtype":"m.text"},"ts":1380218694000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"jgraham, https://critic.hoppipolla.co.uk/r/303 doesn't seem to be closed","msgtype":"m.text"},"ts":1380218703000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"sicking: aight","msgtype":"m.text"},"ts":1380218745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: https://gist.github.com/domenic/0c47ae300608341f3d7f is Domenic_'s sketch on streams btw, it's not done or anything, but at least a lot less complex than what's going on over at public-webapps...","msgtype":"m.text"},"ts":1380218816000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: Weird. It looks like the code ran, although I can't tell if it was for that PR","msgtype":"m.text"},"ts":1380218846000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: yeah, what's on webapps is all wrong. I've been very slowly sketching something different. Getting performance right is one of the tricky bits","msgtype":"m.text"},"ts":1380218855000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Ms2ger: Thanks for the bug report","msgtype":"m.text"},"ts":1380218877000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham, np","msgtype":"m.text"},"ts":1380218893000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham, you can test with https://critic.hoppipolla.co.uk/r/216 if necessary","msgtype":"m.text"},"ts":1380218922000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: hrm.. i don't think dominic's sketch is right. You want a synchronous read() function I think","msgtype":"m.text"},"ts":1380218926000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: hmm","msgtype":"m.text"},"ts":1380219023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sicking: i am not sure either, but, from what i understood of isaac's concerns, he wanted sync read only to avoid the microtask delay","msgtype":"m.text"},"ts":1380219042000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but microtask delay should in theory be non-noticable","msgtype":"m.text"},"ts":1380219053000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ms2ger: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=23356","msgtype":"m.text"},"ts":1380219067000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, yes?","msgtype":"m.text"},"ts":1380219089000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"but the correct design might indeed be some kind of poll-like function of the type isaac outlined, and you build promise-returning read() on top of it.","msgtype":"m.text"},"ts":1380219096000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i don't think it's just that. But I'll reread his latest email.","msgtype":"m.text"},"ts":1380219100000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Ms2ger: yes in answer to the question, or?","msgtype":"m.text"},"ts":1380219121000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: returning ArrayBuffer, generally, seems best. lets people choose the view they want","msgtype":"m.text"},"ts":1380219121000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: right. My thinking so far is that that is the right approach.","msgtype":"m.text"},"ts":1380219128000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Hixie_, \"yes\" as in \"ack\"","msgtype":"m.text"},"ts":1380219137000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: ah ok","msgtype":"m.text"},"ts":1380219141000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heycam|away: i don't have a satisfactory answer to give re: styling widgets. i tried to fix it with xbl2, but that didn't go anywhere.","msgtype":"m.text"},"ts":1380219163000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sicking: cool, let me know what you deduce. he's on vacation which is why i haven't tried floating this anywhere; i want his stamp of approval, or at least approval-modulo-get-off-my-lawn-promise-users, before actually floating it.","msgtype":"m.text"},"ts":1380219174000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_, I have no dog in this fight; I just wanted to have something on file so I could point to it in a test","msgtype":"m.text"},"ts":1380219205000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic_: sounds good. I was planning on simply replying to his email once i had something","msgtype":"m.text"},"ts":1380219213000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Domenic_: sorry it's taking so long. This isn't my day job these days","msgtype":"m.text"},"ts":1380219224000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"sicking: heh, mine neither! :P","msgtype":"m.text"},"ts":1380219251000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: :)","msgtype":"m.text"},"ts":1380219263000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Ms2ger: sorry for being unclear; my question in the bug is just trying to figure out what your proposal would involve, not trying to see your opinion of it :-)","msgtype":"m.text"},"ts":1380219376000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, my proposal is to do whatever document.images and friends do","msgtype":"m.text"},"ts":1380219458000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: re: Encoding - looks like the early sketches of the API had it encode into a passed ArrayBufferView; that flipped to a return value, then the type was made concrete as Uint8Array. There were suggestions along the way to make it just return ArrayBuffer, but looks like those were ignored.","msgtype":"m.text"},"ts":1380219473000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I guess it's too late to change now","msgtype":"m.text"},"ts":1380219528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: btw, %TypedArray% is a common object, /TypedArray/ is not","msgtype":"m.text"},"ts":1380219905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell: the italics matter afaict","msgtype":"m.text"},"ts":1380219914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm maybe not","msgtype":"m.text"},"ts":1380219955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm maybe yes","msgtype":"m.text"},"ts":1380219989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm +1 - \"The %TypedArray% intrinsic function object is designed to act as the superclass of the various /TypedArray/","msgtype":"m.text"},"ts":1380220232000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"constructors.\" - yeah, more concrete than I thought.","msgtype":"m.text"},"ts":1380220233000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Ms2ger: roger","msgtype":"m.text"},"ts":1380220286000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hrm. Does having IDL specify  operation(SomeType foo) preclude passing ES6 subclasses of SomeType to operation?","msgtype":"m.text"},"ts":1380220642000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell, yes","msgtype":"m.text"},"ts":1380221109000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"IDL needs fixing so badly","msgtype":"m.text"},"ts":1380221202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That seems rather unfortunate.","msgtype":"m.text"},"ts":1380221205000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Why?","msgtype":"m.text"},"ts":1380221234000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't even see why that would be true... If something accepts Node, it accepts Element...","msgtype":"m.text"},"ts":1380221244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Same should be true for ES6-style subclasses.","msgtype":"m.text"},"ts":1380221252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Why?","msgtype":"m.text"},"ts":1380221267000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"They're not trustworthy","msgtype":"m.text"},"ts":1380221273000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Something that takes Node should never accept an object that isn't a browser-implemented Node","msgtype":"m.text"},"ts":1380221302000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: @@create gives it the same data model on which the browser can operate","msgtype":"m.text"},"ts":1380221328000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"key events in browsers are so terrible","msgtype":"m.text"},"ts":1380221333000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"we really need to fix this mess: https://github.com/kanaka/noVNC/blob/master/include/input.js","msgtype":"m.text"},"ts":1380221341000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: are you volunteering?","msgtype":"m.text"},"ts":1380221355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jasper: do you have feedback on the key events part of https://dvcs.w3.org/hg/d4e/raw-file/tip/source_respec.htm since it's starting to be implemented?","msgtype":"m.text"},"ts":1380221500000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"annevk, depends what \"volunteering\" means","msgtype":"m.text"},"ts":1380221768000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"jsbell, a big thing to think about is IM support, like pre-edit.","msgtype":"m.text"},"ts":1380221859000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"hrm, I was sitting next to someone working on an IME+browser spec the other day...","msgtype":"m.text"},"ts":1380221910000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell, it would be nice to see a full set of events for making robust input controls without having to have a hidden <textarea>","msgtype":"m.text"},"ts":1380221939000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"jsbell: one of the bad things with that document is it being a superset, though I think they plan on merging at some point","msgtype":"m.text"},"ts":1380221961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Do note that I'm not working on that spec, just aware of it since I agree the current events are a mess :)","msgtype":"m.text"},"ts":1380221978000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Jasper: mostly writing test cases I suppose and defining a model around your findings and then defining the events on top of that model","msgtype":"m.text"},"ts":1380222001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, have you seen http://unixpapa.com/js/key.html ?","msgtype":"m.text"},"ts":1380222018000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: Ah, yes: https://dvcs.w3.org/hg/ime-api/raw-file/default/Overview.html","msgtype":"m.text"},"ts":1380222035000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Jasper: looks like a start","msgtype":"m.text"},"ts":1380222051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jsbell, is this for people that want to write IMs, or for people who want to write controls that interface with IMs?","msgtype":"m.text"},"ts":1380222102000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: \"This specification defines an �IME API� that provides Web applications with scripted access to an IME (input-method editor) associated with a hosting user agent.\"","msgtype":"m.text"},"ts":1380222134000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"OK.","msgtype":"m.text"},"ts":1380222159000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I also don't know what we want to do about keymapping. Most toolkits have just relegated to client-side keymaps, but that's really difficult to do on the web.","msgtype":"m.text"},"ts":1380222184000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: Who's \"we\", out of curiosity?","msgtype":"m.text"},"ts":1380222226000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"\"we\" = specification authors","msgtype":"m.text"},"ts":1380222253000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I mainly work on GTK+, but that's not who I was referring to in the above sentence.","msgtype":"m.text"},"ts":1380222282000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: anyway, yeah, feel your pain. I bodged together https://github.com/inexorabletash/polyfill/blob/master/keyboard.js for my own use. I know the authors of the above specs want feedback.","msgtype":"m.text"},"ts":1380222425000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"JS doesn't support a way to set properties of an object from properties of another object without enumerating, does it?","msgtype":"m.text"},"ts":1380223051000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"depends on what you mean by enumerating...","msgtype":"m.text"},"ts":1380223098000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zcorpan_: ES5 doesn't, no","msgtype":"m.text"},"ts":1380223121000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"what about ES>5?","msgtype":"m.text"},"ts":1380223146000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Object.assign","msgtype":"m.text"},"ts":1380223161000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think?","msgtype":"m.text"},"ts":1380223177000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-19.1.3.1 TODO","msgtype":"m.text"},"ts":1380223194000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: what do you want?","msgtype":"m.text"},"ts":1380223205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Someone remind me what the diff. between the proposed assign and mixin is?","msgtype":"m.text"},"ts":1380223208000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Object.assign is entirely implementable in ES5, there's nothing new","msgtype":"m.text"},"ts":1380223235000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Right, sure.","msgtype":"m.text"},"ts":1380223242000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"same for Object.mixin, modulo the fact that it uses Object.getOwnSymbols() which doesn't exist in ES5","msgtype":"m.text"},"ts":1380223266000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"context is http://lists.w3.org/Archives/Public/www-style/2013Sep/0732.html","msgtype":"m.text"},"ts":1380223272000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: what do you mean by enumerating?","msgtype":"m.text"},"ts":1380223275000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i mean e.g. for in","msgtype":"m.text"},"ts":1380223290000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"well e.g. is kind of what i was hoping to pin down","msgtype":"m.text"},"ts":1380223309000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zcorpan_: But Object.assign and Object.mixin do enumerate… in the built-in classes.","msgtype":"m.text"},"ts":1380223313000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"you can avoid for-in by using e.g. Object.getOwnPropertyDescriptors","msgtype":"m.text"},"ts":1380223319000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"s/classes/objects/","msgtype":"m.text"},"ts":1380223325000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan_: overload the setter","msgtype":"m.text"},"ts":1380223353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok so i guess my question was badly phrased. i don't mind if enumeration actually happens, i'm just looking for convenience for the author","msgtype":"m.text"},"ts":1380223360000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: there's an outstanding feature request for that","msgtype":"m.text"},"ts":1380223364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can i suggest writing these things as a JS library first, then figuring out the appropriate WebIDL afterward","msgtype":"m.text"},"ts":1380223377000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zcorpan_: so you always return DOMPoint, but you accept setting to either DOMPoint or DOMPointInit","msgtype":"m.text"},"ts":1380223386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so is that (a) or (c) ?","msgtype":"m.text"},"ts":1380223489000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: dunno, the IDL says stuff is readonly","msgtype":"m.text"},"ts":1380223541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: maybe writing this as a library is not such a bad idea","msgtype":"m.text"},"ts":1380223549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the idea would be to change it to not be readonly, hence the question what setting should do :-)","msgtype":"m.text"},"ts":1380223599000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: (c)","msgtype":"m.text"},"ts":1380223648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(what i'm looking for now is a reason to keep it as readonly, if ES6 makes it convenient anyway)","msgtype":"m.text"},"ts":1380223672000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"annevk: ok. why?","msgtype":"m.text"},"ts":1380223675000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: calling it a literal is somewhat confusing btw","msgtype":"m.text"},"ts":1380223678000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah a literal would be something like pt`(1, 2)`","msgtype":"m.text"},"ts":1380223732000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"or quad`((1, 2), (2, 3), (3, 4), (4, 5))`","msgtype":"m.text"},"ts":1380223756000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ok, thanks. what should it be called instead? Dict?","msgtype":"m.text"},"ts":1380223774000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: Init","msgtype":"m.text"},"ts":1380223810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"WebIDLArtifact? :P Dict or Init seems fine...","msgtype":"m.text"},"ts":1380223817000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"can you explain how DOMPointInit makes sense? just consistency with events?","msgtype":"m.text"},"ts":1380223906000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: it serves to initialize a new DOMPoint","msgtype":"m.text"},"ts":1380223934000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: and yes","msgtype":"m.text"},"ts":1380223944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1380223960000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Domenic_: less jokes, more work on actually making it an artefact?","msgtype":"m.text"},"ts":1380223962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":";)","msgtype":"m.text"},"ts":1380223974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: fair...","msgtype":"m.text"},"ts":1380223996000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"goes back to real job","msgtype":"m.emote"},"ts":1380223999000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Object.assign says \"Only enumerable own properties of source\" which wouldn't work for DOMPoint since the properties are on the prototype per WebIDL","msgtype":"m.text"},"ts":1380224041000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"annevk: did you answer the why (c) ?","msgtype":"m.text"},"ts":1380224116000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: no, but it seems convenient, though thinking a bit more for URLQuery I only support new URLQuery objects at the moment","msgtype":"m.text"},"ts":1380224152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: when assigning to url.query that is","msgtype":"m.text"},"ts":1380224161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i mean why (c) over (a)?","msgtype":"m.text"},"ts":1380224192000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"well fuck, my train back to Boston is cancelled","msgtype":"m.text"},"ts":1380224196000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-|","msgtype":"m.text"},"ts":1380224205000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"(I have some time to reschedule, but it's annoying)","msgtype":"m.text"},"ts":1380224228000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: (a) seems weird, but I don't really have a good reason","msgtype":"m.text"},"ts":1380224268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: I guess if you do obj.x = y and then further mutate y, you'd expect that to affect obj.x","msgtype":"m.text"},"ts":1380224320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"^ yeah, that","msgtype":"m.text"},"ts":1380224357000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but that won't work without rethinking a lot, I think..","msgtype":"m.text"},"ts":1380224370000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"making it do no validation until consumption time","msgtype":"m.text"},"ts":1380224382000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that fails if it's an {x, y}","msgtype":"m.text"},"ts":1380224385000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: I think if you pass in something that the property does not return you can expect that","msgtype":"m.text"},"ts":1380224453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan_: similar to setting location to a string","msgtype":"m.text"},"ts":1380224465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on the flip side, if you have a quad and store its points as local variables, do you expect them to suddenly not be associated with the quad anymore?","msgtype":"m.text"},"ts":1380224472000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"if a JS library was doing this, it would do no validation in any of the setters, it would just accept anything. then the internal code that actually uses this.somePoint.x, this.somePoint.y would get those properties, and if they weren't there might throw (or might coerce ToNumber)","msgtype":"m.text"},"ts":1380224497000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that way you could do things like quad.p1 = { x: 10, y: 20, extraStuff: \"foo\" }","msgtype":"m.text"},"ts":1380224538000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and not disturb the internal algorithms at all, but still be able to access quad.p1.extraStuff later","msgtype":"m.text"},"ts":1380224551000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that is probably too much re-thinking though","msgtype":"m.text"},"ts":1380224581000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"you prolly do want to coerce here at some point to pass things to the rendering subsystem","msgtype":"m.text"},"ts":1380224603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right but you'd do that at rendering time, no sooner","msgtype":"m.text"},"ts":1380224616000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"no you'd do it sooner because rendering can be on a separate thread and you don't want that to be observable","msgtype":"m.text"},"ts":1380224645000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh :). well JS libraries don't have access to separate threads","msgtype":"m.text"},"ts":1380224657000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so it becomes a question of how un-idiomatic do you need to make things to fit into a multithreaded model.","msgtype":"m.text"},"ts":1380224669000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"coercion doesn't seem un-idiomatic, ToString() is used, Array.slice is used","msgtype":"m.text"},"ts":1380224703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"turning an argument into an object seems fine","msgtype":"m.text"},"ts":1380224712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure but you coerce when you use them, not when you set the property","msgtype":"m.text"},"ts":1380224725000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if you were designing a JS library that took in points and quads you would not have this object hierarchy","msgtype":"m.text"},"ts":1380224755000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think bz mentioned quite a few libraries coerce right at the entry point of the function","msgtype":"m.text"},"ts":1380224775000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you would just take as input an object and do `+obj.p1.x` and pass that to the rendering system","msgtype":"m.text"},"ts":1380224776000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"oh interesting","msgtype":"m.text"},"ts":1380224782000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i guess i'm mostly thinking of jQuery and d3","msgtype":"m.text"},"ts":1380224788000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and ES spec algorithms of course","msgtype":"m.text"},"ts":1380224798000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"anyway i need to pack up my crazy ideas and head elsewhere before people flip the bozo bit on me :). sorry zcorpan_ for derailing your well-meaning quest for practical advice.","msgtype":"m.text"},"ts":1380224847000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: np, thanks for the feedback","msgtype":"m.text"},"ts":1380224876000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"renamed to Init","msgtype":"m.text"},"ts":1380225507000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-script-coord/2013AprJun/0159.html suggests using a method instead of a magic setter","msgtype":"m.text"},"ts":1380225836000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"never realized that the IE10 logo is closer it IE6's than to IE7/8/9's","msgtype":"m.emote"},"ts":1380226779000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: is there a plan to make it possible to style a label for a checkbox differently, depending on whether or not its checked? I know the magic selectors 4 would make it work if those applied to stylesheets, but they don't. Any other plans?","msgtype":"m.text"},"ts":1380227372000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jsbell: there is a base class (or at least a base interface) for all views, ArrayBufferView","msgtype":"m.text"},"ts":1380227568000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"err, Jasper","msgtype":"m.text"},"ts":1380227573000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Jasper: yeah, we've tried to get them to fix that and they just don't \"get\" the web and why that's unacceptable","msgtype":"m.text"},"ts":1380227599000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: You probably do mean me, and: yes, but not in the ES6 spec.","msgtype":"m.text"},"ts":1380227668000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"probably both (the latter was Jasper)","msgtype":"m.text"},"ts":1380227698000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(yep)","msgtype":"m.text"},"ts":1380227710000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"and ... why would they remove the base class? taking a bad API and making it worse","msgtype":"m.text"},"ts":1380227712000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, who is \"them\"? Khronos?","msgtype":"m.text"},"ts":1380227728000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Is that TC39's tagline?","msgtype":"m.text"},"ts":1380227729000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"whoever's taking the typed array spec, putting it in another spec and taking out the base class","msgtype":"m.text"},"ts":1380227749000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hey TC39, don't be afraid. take a bad API and make it wooorse","msgtype":"m.text"},"ts":1380227760000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"anyway, it already has a base class in browsers, so that probably can't go away anyway","msgtype":"m.text"},"ts":1380227767000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(window.ArrayBufferView exists in Chrome, at least)","msgtype":"m.text"},"ts":1380227789000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, your answer was to my question about undefined endianness, right?","msgtype":"m.text"},"ts":1380227792000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1380227795000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Why would they spec things that work in browsers?","msgtype":"m.text"},"ts":1380227804000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zewt, I don't understand who is \"them\" in that case. TC39?","msgtype":"m.text"},"ts":1380227804000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"that's khronos, iirc, the typed array spec","msgtype":"m.text"},"ts":1380227819000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(an offshoot of webgl)","msgtype":"m.text"},"ts":1380227832000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i know why they did it the way they did; it's just wrong","msgtype":"m.text"},"ts":1380227841000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Jasper/jsbell: i think your nicks have a hash collision in my brain at this point","msgtype":"m.text"},"ts":1380227869000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"update from MD5?","msgtype":"m.text"},"ts":1380227884000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"i guess my hash is nick[0]","msgtype":"m.text"},"ts":1380227919000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"j.*s.*e","msgtype":"m.text"},"ts":1380227936000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, I'm just concerned that people will load little endian files into Float32Array","msgtype":"m.text"},"ts":1380228022000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"and then it will break when somebody plays it on a PowerPC or something","msgtype":"m.text"},"ts":1380228035000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: oh, they will","msgtype":"m.text"},"ts":1380228040000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the typed array editor(s) are under a misapprehension, heh","msgtype":"m.text"},"ts":1380228063000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Domenic_: No, but given that subject indicators are going to be part of the slow profile, we should indeed solve that issue for normal stylesheets.","msgtype":"m.text"},"ts":1380228064000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they think that if they spec \"this is platform-endian-dependent\", browsers will implement that even if it causes big endian systems to not work on the web","msgtype":"m.text"},"ts":1380228087000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the reality is that browsers will ignore the spec and make them always little-endian so that pages actually work (and take a performance hit, possibly a large one, for some WebGL cases)","msgtype":"m.text"},"ts":1380228118000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(the real reality seems to be that big endian is essentially dead, and nobody even cares if it's broken)","msgtype":"m.text"},"ts":1380228136000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"iirc, the latter of those is why I stopped trying to convince them","msgtype":"m.text"},"ts":1380228161000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins: ok cool, yeah.","msgtype":"m.text"},"ts":1380228184000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(I'm still secretly hoping someone implements the slow profile for normal stylesheets anyway and browser game theory forces it to become widespread.)","msgtype":"m.text"},"ts":1380228185000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Heh. You say that, but you'll be sad if putting one of them in your page drastically slows down all your selector matching.","msgtype":"m.text"},"ts":1380228328000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Jasper: also, the alignment requirement of views is nonsense and should be removed (but I don't have the energy to try to get them to change things currently)","msgtype":"m.text"},"ts":1380228375000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Jasper: however, the DataView interfaces are useful regardless of that, for parsing binary data structures (eg. to pull apart a ZIP header) without having to create tons of temporary views","msgtype":"m.text"},"ts":1380228408000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, it would be nice if everything standardized to little-endian by default, but you could create a Float32Array that explicitly had host requirements because you know you won't be shipping this data anywhere","msgtype":"m.text"},"ts":1380228412000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"had host endianness rather","msgtype":"m.text"},"ts":1380228430000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"yeah, I suggested at *least* adding explicit Int32LEArray/Int32BEArray (i don't remember the response, but it clearly hasn't happened)","msgtype":"m.text"},"ts":1380228438000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but what's likely to happens is that people will discover One Weird Trick To Speed Up Your Game By 200%","msgtype":"m.text"},"ts":1380228460000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"and then everything's back to broken","msgtype":"m.text"},"ts":1380228465000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt, yeah, I'm more than familiar with the crazy things you can do with this","msgtype":"m.text"},"ts":1380228517000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt: I'm aware of some people using big-endian MIPS for new set-top box type things, with OpenGL support, who would probably try to disagree that it's dead","msgtype":"m.text"},"ts":1380228520000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"https://github.com/magcius/img.js/blob/gh-pages/gif.js","msgtype":"m.text"},"ts":1380228527000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"among other things","msgtype":"m.text"},"ts":1380228530000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Philip`: they're fools and need to be shot into the sun","msgtype":"m.text"},"ts":1380228535000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, I ran into the alignment requirements in that file I think","msgtype":"m.text"},"ts":1380228562000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"also, I wrote a WebGL app that to this day still crashes Firefox","msgtype":"m.text"},"ts":1380228582000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt: (I think they're using essentially a little-endian GPU but with some hardware/software wrappers to make it cope with big-endian data)","msgtype":"m.text"},"ts":1380228588000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"basically, systems that need host-endian access to buffers (or else be really slow) are fundamentally incompatible with the Web (on one or the other endianness)","msgtype":"m.text"},"ts":1380228602000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"as far as I can tell, at least","msgtype":"m.text"},"ts":1380228626000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, well, not entirely","msgtype":"m.text"},"ts":1380228655000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"maybe you could come up with some set of restrictions to only allow host-endian buffers to be used with WebGL, and not for general-purpose use ... but i'm not sure how possible that is","msgtype":"m.text"},"ts":1380228694000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, what could make sense as a middleground is to prevent anybody from using a host-endian buffer to be used on array buffers returned from XHR or similar","msgtype":"m.text"},"ts":1380228714000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt, and if you touch an array buffer with a host-endian buffer, you can't send it back through a WebSocket without reconversion or something.","msgtype":"m.text"},"ts":1380228740000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"basically ensure that host endianness is only kept in host memory","msgtype":"m.text"},"ts":1380228757000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"their argument would probably be that games will want to serve big-endian data to big-endian systems, pre-byte-flipped","msgtype":"m.text"},"ts":1380228758000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"that sort of thing","msgtype":"m.text"},"ts":1380228763000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, then they will write: if (hostEndianness == \"BE\") return new Float32ArrayBE(buffer); else ...","msgtype":"m.text"},"ts":1380228803000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"also, you'd want to be able to take XHR data, write it to disk (indexeddb, local files), read it back later and then into webgl","msgtype":"m.text"},"ts":1380228804000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"hard to maintain an \"endian tainted\" state through all that","msgtype":"m.text"},"ts":1380228814000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt, as long as you're explicit, you should be fine","msgtype":"m.text"},"ts":1380228815000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zewt: ArrayBufferView is [NoInterfaceObject]","msgtype":"m.text"},"ts":1380228818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: so that seems like a bug in Chrome","msgtype":"m.text"},"ts":1380228824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in other news you failed to convince anyone to remove \"DOM\" prefix","msgtype":"m.text"},"ts":1380228872000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"wonders if his old WebGL app still crashes Firefox","msgtype":"m.emote"},"ts":1380228879000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"zcorpan_: if people are happy with wildly inconsistent naming practices there's not much I can do","msgtype":"m.text"},"ts":1380228957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"[16:56:09.713] Error: WebGL: texParameteri: pname 2800 and param 0 (decimal 0) are mutually incompatible","msgtype":"m.text"},"ts":1380228986000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"huh so it doesn't crash anymore but it errors out","msgtype":"m.text"},"ts":1380228992000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"chrome seems to enjoy it fine. so that's strange","msgtype":"m.text"},"ts":1380229006000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"While I'm not happy with inconsistency, I *am* happy with it being hard to stomp on the browser-provided names.","msgtype":"m.text"},"ts":1380229039000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i always wondered why we didn't just namespace the DOM APIs","msgtype":"m.text"},"ts":1380229098000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"should we start doing that?","msgtype":"m.text"},"ts":1380229102000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"we need modules :(","msgtype":"m.text"},"ts":1380229110000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"clearly what we want is: new org.w3.canvaswg.canvas.impl.Path();","msgtype":"m.text"},"ts":1380229152000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1380229221000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"falken: do you still think open() and openModal() is better for <dialog>?","msgtype":"m.text"},"ts":1380229280000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ohhhh, here's another problem with renaming it","msgtype":"m.text"},"ts":1380229310000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if we call it dialog.open(), we can't have the attribute dialog.open","msgtype":"m.text"},"ts":1380229322000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thinks of http://discuss.joelonsoftware.com/?joel.3.219431.12","msgtype":"m.emote"},"ts":1380229327000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"Hixie_: so why show? showModalDialog is really something we should not be concerned with imo","msgtype":"m.text"},"ts":1380229771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well what would you call it instead?","msgtype":"m.text"},"ts":1380229785000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: window.open() / window.close() seems like a better precedent","msgtype":"m.text"},"ts":1380229794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"open() would clash with .open","msgtype":"m.text"},"ts":1380229799000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"show() also clashes with .open in them not having similar names, due to window.open() you might end up being confused all the time which is which","msgtype":"m.text"},"ts":1380229837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":".state == \"open\"","msgtype":"m.text"},"ts":1380229867000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's an [open] attribute though right? so .open property should match... this is a tough one.","msgtype":"m.text"},"ts":1380229885000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that would make the IDL attribute that reflects <dialog open> not match the content attribute's name.","msgtype":"m.text"},"ts":1380229886000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah and we know how much people like [value] vs. defaultValue.","msgtype":"m.text"},"ts":1380229908000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"note that window.open() creates a new window, dialog.show() doesn't create the dialog, it just shows it.","msgtype":"m.text"},"ts":1380229910000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"maybe the attribute should be [shown]","msgtype":"m.text"},"ts":1380229935000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but dialog[open] selects an open dialog?","msgtype":"m.text"},"ts":1380229939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then it wouldn't match <details open>","msgtype":"m.text"},"ts":1380229943000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: yes","msgtype":"m.text"},"ts":1380229947000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"details is different, it's still shown when it's closed","msgtype":"m.text"},"ts":1380229960000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the contents aren't","msgtype":"m.text"},"ts":1380230009000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sure. but the <details> itself is... kinda sorta... i dunno, it makes sense in my head.","msgtype":"m.text"},"ts":1380230041000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if you try to match tense though shown doesn't make sense","msgtype":"m.text"},"ts":1380230089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<details> is unique with the attribute reflecting the state, iirc","msgtype":"m.text"},"ts":1380230287000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"<dialog> does the same thing","msgtype":"m.text"},"ts":1380230498000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan_, http://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/RequestProcessorFactoryFactory","msgtype":"m.text"},"ts":1380230578000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"cocoa, .net, delphi, gtk, win32... any other APIs anyone can think of that i should research dialogs in?","msgtype":"m.text"},"ts":1380231634000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: Android?","msgtype":"m.text"},"ts":1380231946000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"was just doign that one","msgtype":"m.text"},"ts":1380231956000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i tried figuring out the x11 api but gave up","msgtype":"m.text"},"ts":1380231972000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"android ui apis D:","msgtype":"m.text"},"ts":1380232096000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie_, X11 doesn't have native dialogs.","msgtype":"m.text"},"ts":1380232236000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"or windows?","msgtype":"m.text"},"ts":1380232249000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, does Windows have native checkbox widgets?","msgtype":"m.text"},"ts":1380232267000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Hixie_, the Win32 toolkit has a checkbox implementation built on top of the Windows primitives, so it depends on how you count it.","msgtype":"m.text"},"ts":1380232291000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"win32 has native checkboxes, sure","msgtype":"m.text"},"ts":1380232332000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Right, but Win32 controls is not quite the same as the underlying window-based API.","msgtype":"m.text"},"ts":1380232360000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Hixie_, if you're talking about modal dialogs, the primitive you have is spinning the event loop for a different window, where the windowing system will queue up events for all other windows behind you. This allows you to basically build a dialog as a synchronous call.","msgtype":"m.text"},"ts":1380232392000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"i don't really mind which layer we want to look at, i'm happy to look at any or all of them :-)","msgtype":"m.text"},"ts":1380232516000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"just looking for apis that have \"open/close/show/hide\"-analogues for windows/dialogs/etc","msgtype":"m.text"},"ts":1380232533000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, gtk_dialog_run / gtk_window_show are what you want to look at in GTK+","msgtype":"m.text"},"ts":1380232709000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Hixie_, X11 allows you to show a window with XMapWindow, and hide with XUnmapWindow","msgtype":"m.text"},"ts":1380232734000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"yup, got gtk already","msgtype":"m.text"},"ts":1380232759000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah, thanks for x11","msgtype":"m.text"},"ts":1380232766000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"map/unmap is quite old terminology, so it's not what you want to copy.","msgtype":"m.text"},"ts":1380232805000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"no kidding :-)","msgtype":"m.text"},"ts":1380232832000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"any JS libraries have dialog APIs?","msgtype":"m.text"},"ts":1380232865000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ext.js has one I believe.","msgtype":"m.text"},"ts":1380232874000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Google Closure Toolkit has another.","msgtype":"m.text"},"ts":1380232880000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"jquery seems to have one","msgtype":"m.text"},"ts":1380232888000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"http://docs.closure-library.googlecode.com/git/class_goog_ui_Dialog.html","msgtype":"m.text"},"ts":1380232915000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"woot, jquery has open(). finally found one that uses open().","msgtype":"m.text"},"ts":1380232927000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though I'm not sure if Google still uses Closure Toolkit","msgtype":"m.text"},"ts":1380232940000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"closure seems to use setVisible(), ew","msgtype":"m.text"},"ts":1380233153000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: And a lot of really weird UA sniffing.","msgtype":"m.text"},"ts":1380233176000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":" Android uses show() and dismiss()","msgtype":"m.text"},"ts":1380233537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Closure uses setVisible()","msgtype":"m.text"},"ts":1380233537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Cocoa uses makeKeyAndOrderFront:, orderOut:, close, and performClose:.","msgtype":"m.text"},"ts":1380233537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Delphi uses Show(), ShowModal(), Hide(), and Close().","msgtype":"m.text"},"ts":1380233537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Ext JS uses show(), hide(), and close().","msgtype":"m.text"},"ts":1380233537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" jQuery uses \"open\" and \"close\".","msgtype":"m.text"},"ts":1380233539000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Gtk uses gtk_widget_show(), gtk_dialog_run(), gtk_window_close().","msgtype":"m.text"},"ts":1380233541000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" .NET uses Show(), ShowDialog(), Hide(), and Close().","msgtype":"m.text"},"ts":1380233544000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" Win32 uses ShowWindow() and CloseWindow().","msgtype":"m.text"},"ts":1380233546000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":" X11 uses XMapWindow() and XUnmapWindow()","msgtype":"m.text"},"ts":1380233549000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"any others i should look at?","msgtype":"m.text"},"ts":1380233555000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok, sending e-mail.","msgtype":"m.text"},"ts":1380233743000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Is there a channel for W3C?","msgtype":"m.text"},"ts":1380234861000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"#w3c is not the one.","msgtype":"m.text"},"ts":1380234867000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: any specific part?","msgtype":"m.text"},"ts":1380234881000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"just w3c","msgtype":"m.text"},"ts":1380234889000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"W3C consortium","msgtype":"m.text"},"ts":1380234894000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"You want irc.w3.org","msgtype":"m.text"},"ts":1380234990000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"crocket: http://www.w3.org/Project/IRC/ may be useful","msgtype":"m.text"},"ts":1380235000000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"They left freenode.","msgtype":"m.text"},"ts":1380235076000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"Does HTML5 define browser object model?","msgtype":"m.text"},"ts":1380235134000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"kind of","msgtype":"m.text"},"ts":1380235169000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"depends on what you mean by that","msgtype":"m.text"},"ts":1380235175000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"http://dom.spec.whatwg.org/ may be what you mean, or http://whatwg.org/html#document maybe","msgtype":"m.text"},"ts":1380235207000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: BOM isn't DOM.","msgtype":"m.text"},"ts":1380235280000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"not sure what you mean then","msgtype":"m.text"},"ts":1380235286000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"can you elaborate?","msgtype":"m.text"},"ts":1380235289000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"GPHemsley: you still working on mimesniff?","msgtype":"m.text"},"ts":1380235329000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"GPHemsley: http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Aug/0276.html","msgtype":"m.text"},"ts":1380235349000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: DOM == document","msgtype":"m.text"},"ts":1380235387000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"BOM == a subset of window","msgtype":"m.text"},"ts":1380235391000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"http://whatwg.org/html#window ?","msgtype":"m.text"},"ts":1380235407000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"crocket: The Window interface is in HTML","msgtype":"m.text"},"ts":1380235407000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Does HTML5 define the entirety of BOM?","msgtype":"m.text"},"ts":1380235434000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"i don't know what BOM is exactly, so i can't say","msgtype":"m.text"},"ts":1380235445000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"describe the entirety of it, and I'll tell you whether any of it is missing :-)","msgtype":"m.text"},"ts":1380235465000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: \"Object oriented javascript\", a book, defines BOM as \"The Browser Object Model (BOM) is a collection of objects that give you access to the browser and the computer screen. These objects are accessible through the global object window.\"","msgtype":"m.text"},"ts":1380235548000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"ah, then no, that's not all in HTML. There's also a bunch of it in CSSOM, CSSOM Views, and various other specs.","msgtype":"m.text"},"ts":1380235579000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"CSSOM?","msgtype":"m.text"},"ts":1380235617000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"CSS Object Model","msgtype":"m.text"},"ts":1380235622000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"CSS is Cascading Stylesheets","msgtype":"m.text"},"ts":1380235630000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"How does CSS define it?","msgtype":"m.text"},"ts":1380235642000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"http://dev.w3.org/csswg/cssom/","msgtype":"m.text"},"ts":1380235648000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and http://dev.w3.org/csswg/cssom-view/","msgtype":"m.text"},"ts":1380235661000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Does CSS have any API accessible from javascript?","msgtype":"m.text"},"ts":1380235664000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"those two specs define that api","msgtype":"m.text"},"ts":1380235672000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I think the most important thing is consistency between the attribute/property and the method name. (Assume the attribute and property are the same; anything else is insanity) If the method changes the attribute, it should be connected.","msgtype":"m.text"},"ts":1380236290000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: thus I feel like show() + open is not so good. show() + shown is good. Maybe open() + isOpen/opened or similar","msgtype":"m.text"},"ts":1380236321000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"isopen\" reads like \"iso pen\". \"opened\" is past tense, which is inconsistent with basically everything.","msgtype":"m.text"},"ts":1380236430000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah not sure there's any good answers","msgtype":"m.text"},"ts":1380236467000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for a counterpart to open() at least","msgtype":"m.text"},"ts":1380236477000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i don't think it's a problem to have .show() set .open to true. it's not that confusing.","msgtype":"m.text"},"ts":1380236479000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"isindex reads let isin dex? :P","msgtype":"m.text"},"ts":1380236492000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i think that's pretty confusing","msgtype":"m.text"},"ts":1380236497000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"is it open or is it shown?","msgtype":"m.text"},"ts":1380236500000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what's the difference?","msgtype":"m.text"},"ts":1380236513000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"isin\" and \"dex\" aren't words","msgtype":"m.text"},"ts":1380236518000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"when you open the dialog, it is shown","msgtype":"m.text"},"ts":1380236527000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"when you show the dialog, it opens","msgtype":"m.text"},"ts":1380236535000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but it's not open?","msgtype":"m.text"},"ts":1380236536000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it's fine","msgtype":"m.text"},"ts":1380236537000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"meh. i disagree it's fine. but that's my 2cents, not much more to say.","msgtype":"m.text"},"ts":1380236557000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i think in practice people won't use open=\"\" much anyway","msgtype":"m.text"},"ts":1380236584000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so it won't be an issue even if people are confused by it","msgtype":"m.text"},"ts":1380236592000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"bbiab","msgtype":"m.text"},"ts":1380236593000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"People will use it in CSS a lot I think","msgtype":"m.text"},"ts":1380236614000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"transitions/animations between dialog:not([open]) and dialog[open]","msgtype":"m.text"},"ts":1380236649000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: Do you think BOM is split between HTML and CSS?","msgtype":"m.text"},"ts":1380236744000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: BOM is just something the author of that book made up; it is not a real concept","msgtype":"m.text"},"ts":1380236842000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it has no meaning in terms of implementations or specs","msgtype":"m.text"},"ts":1380236850000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: What the hell","msgtype":"m.text"},"ts":1380236854000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"I know, bad book, right?","msgtype":"m.text"},"ts":1380236885000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: not sure it's a bad book","msgtype":"m.text"},"ts":1380236989000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"i dunno, maybe just the number of recruiters using the term \"object oriented javascript\" has given it bad associations in my mind.","msgtype":"m.text"},"ts":1380237162000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: you mean employers?","msgtype":"m.text"},"ts":1380237228000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"Domenic_: object orientation in smalltalk is a good thing.","msgtype":"m.text"},"ts":1380237257000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"are you talking about \"Object Oriented JavaScript\" by Zakas?","msgtype":"m.text"},"ts":1380237270000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"it's terrible book by todays standards","msgtype":"m.text"},"ts":1380237285000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I would rather stick with the terms in the spec, even if they are confusing","msgtype":"m.text"},"ts":1380237317000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: I mean http://www.amazon.com/Object-Oriented-JavaScript-Edition-Stoyan-Stefanov/dp/1849693129/ref=sr_1_1?ie=UTF8&qid=1380237353&sr=8-1&keywords=object+oriented+javascript","msgtype":"m.text"},"ts":1380237391000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"Authors sent an early draft of the book, and it was published without correction.","msgtype":"m.text"},"ts":1380237411000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"So code examples aren't indented at all!!!","msgtype":"m.text"},"ts":1380237418000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: ahh, that's the best JS book for beginners I have read","msgtype":"m.text"},"ts":1380237423000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"But overall, its content is fine.","msgtype":"m.text"},"ts":1380237423000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"jarek: How many JS books have you read?","msgtype":"m.text"},"ts":1380237437000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: I read Crockford, Zakas and few others","msgtype":"m.text"},"ts":1380237465000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"How about \"JavaScript: The Good Parts\"?","msgtype":"m.text"},"ts":1380237507000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: it feels more like an academic paper than a book :P","msgtype":"m.text"},"ts":1380237544000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: Does it teach how to avoid bad parts?","msgtype":"m.text"},"ts":1380237596000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: yes, I guess it was the first book to teach JS the right way","msgtype":"m.text"},"ts":1380237617000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"So far, I've read elequent javascript, and I'm reading object oriented javascript.","msgtype":"m.text"},"ts":1380237632000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: if I were to learn JS now, I wouldn't bother reading more than one book","msgtype":"m.text"},"ts":1380237710000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"crocket: the most valuable information is on the web now","msgtype":"m.text"},"ts":1380237723000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"What is the one book?","msgtype":"m.text"},"ts":1380237728000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: e.g. check http://killdream.github.io/2011/10/09/understanding-javascript-oop.html","msgtype":"m.text"},"ts":1380237731000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"there is no book that would discuss JS object system in such detail ^","msgtype":"m.text"},"ts":1380237745000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"crocket: I would pick Stefanov","msgtype":"m.text"},"ts":1380237770000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"crocket: Eloquent JS seems to be biased towards functional programming","msgtype":"m.text"},"ts":1380237792000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: functional programming was good.","msgtype":"m.text"},"ts":1380237817000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"Stefanov?","msgtype":"m.text"},"ts":1380237823000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: yeah, the one you have linked earlier","msgtype":"m.text"},"ts":1380237847000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"object oriented javascript?","msgtype":"m.text"},"ts":1380237856000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: yes, though if you are already experienced programmer (in other language) then I would jump right into Crockford","msgtype":"m.text"},"ts":1380237899000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: I'm confused.","msgtype":"m.text"},"ts":1380237917000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"Referring to books by authors is confusing.","msgtype":"m.text"},"ts":1380237929000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"I don't remember author names.","msgtype":"m.text"},"ts":1380237951000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: I don't remember book names :P","msgtype":"m.text"},"ts":1380237963000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"crocket: Crockford == JS Good parts (or something like this)","msgtype":"m.text"},"ts":1380237977000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I mean ===","msgtype":"m.text"},"ts":1380237989000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: One author could have written various books.","msgtype":"m.text"},"ts":1380237999000,"senderName":"crocket","senderId":"crocket@irc"},
{"content":{"body":"crocket: several authors could have written books with the same title","msgtype":"m.text"},"ts":1380238039000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"All you need to remember is the ISBN","msgtype":"m.text"},"ts":1380238059000,"senderName":"Philip`","senderId":"Philip`@irc"}
]