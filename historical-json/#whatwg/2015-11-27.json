[
{"content":{"body":"tries to understand https://github.com/whatwg/dom/pull/121","msgtype":"m.emote"},"ts":1448630067000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is that just the case when both params point to the same node?","msgtype":"m.text"},"ts":1448630135000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think so","msgtype":"m.text"},"ts":1448630208000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nox: ping","msgtype":"m.text"},"ts":1448631147000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Pong.","msgtype":"m.text"},"ts":1448631158000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: do you have testcase for 2nd comment in https://github.com/whatwg/dom/pull/121","msgtype":"m.text"},"ts":1448631168000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"trying to understand what it is about","msgtype":"m.text"},"ts":1448631173000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: There are already in the file I changed in the PR I linked.","msgtype":"m.text"},"ts":1448631195000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: Which case in particular would you like to see?","msgtype":"m.text"},"ts":1448631210000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"like which mutationrecords you see in gecko","msgtype":"m.text"},"ts":1448631229000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"For which case?","msgtype":"m.text"},"ts":1448631244000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Replacing a child by itself?","msgtype":"m.text"},"ts":1448631254000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you say in the comment \" queuing 2 records in total.\"","msgtype":"m.text"},"ts":1448631281000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(removedNodes = [child]), (removedNodes = [child], addedNodes = [child]).","msgtype":"m.text"},"ts":1448631282000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and I'd like to understand in which case","msgtype":"m.text"},"ts":1448631297000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"what is the testcase there","msgtype":"m.text"},"ts":1448631302000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"In the case of replacing a child by itself.","msgtype":"m.text"},"ts":1448631309000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's the test case I linked. My test case follows my spec change, so obviously Gecko fails it.","msgtype":"m.text"},"ts":1448631327000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"In the case where child â‰  node, it queues:","msgtype":"m.text"},"ts":1448631348000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"doesn't know where the link to testcase is","msgtype":"m.emote"},"ts":1448631351000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(removedNodes = [node]), (removedNodes = [child], addedNodes = [node]).","msgtype":"m.text"},"ts":1448631357000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"oh, down there is somelink","msgtype":"m.text"},"ts":1448631370000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: https://github.com/whatwg/dom/pull/121#issuecomment-160137419","msgtype":"m.text"},"ts":1448631374000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: ok, and you'd like to get rid of the first MutationRecord, right?","msgtype":"m.text"},"ts":1448631697000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"can see a bug in Gecko there","msgtype":"m.emote"},"ts":1448631703000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Yes.","msgtype":"m.text"},"ts":1448631704000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: In the case where child = node.","msgtype":"m.text"},"ts":1448631709000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"we don't remove anything there, but queue record","msgtype":"m.text"},"ts":1448631725000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That's not a bug.","msgtype":"m.text"},"ts":1448631734000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1448631752000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Actually, what do you mean?","msgtype":"m.text"},"ts":1448631754000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"wait, we do remove there","msgtype":"m.text"},"ts":1448631755000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1448631756000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"let me read","msgtype":"m.text"},"ts":1448631758000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Do you mean that no mutation should happen?","msgtype":"m.text"},"ts":1448631759000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Because that would be wrong too. Cf. ranges.","msgtype":"m.text"},"ts":1448631766000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"parent.replaceChild(child, child) should move any range that starts or ends in child.","msgtype":"m.text"},"ts":1448631788000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't mean no mutation should happen","msgtype":"m.text"},"ts":1448631887000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Ok. :)","msgtype":"m.text"},"ts":1448631896000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'm trying to understand where we get removedNodes in (removedNodes = [child], addedNodes = [node]).","msgtype":"m.text"},"ts":1448631909000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Completely unrelated, could you paste somewhere your PrototypeList.cpp file? You are a Gecko developer, right?","msgtype":"m.text"},"ts":1448631934000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"actually, I would totally expect 2 records here","msgtype":"m.text"},"ts":1448631940000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but I don't understand why (removedNodes = [child], addedNodes = [node]).","msgtype":"m.text"},"ts":1448631948000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Trying to fix something in Servo and I don't want to build Gecko. :P","msgtype":"m.text"},"ts":1448631948000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"PrototypeList...","msgtype":"m.text"},"ts":1448631962000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I don't understand what you mean. Which records do you expect for replacing a child by itself?","msgtype":"m.text"},"ts":1448631973000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"just a sec","msgtype":"m.text"},"ts":1448631974000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(removedNodes = [child]) (addedNones = [child])?","msgtype":"m.text"},"ts":1448631994000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"You remove `node` from its previous parent, and then you replace `child` by node. That's why you end up with a mutation record with both removedNodes and addedNodes.","msgtype":"m.text"},"ts":1448632038000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"In the case where child = node, we either need to avoid the record about removing from the previous parent, or the removedNodes part in the second mutation record.","msgtype":"m.text"},"ts":1448632067000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And my opinion is that the former is cleaner.","msgtype":"m.text"},"ts":1448632087000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"fun, gedit becomes non-responsive after opening PrototypeList.cpp with it","msgtype":"m.text"},"ts":1448632100000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Ah ah. :)","msgtype":"m.text"},"ts":1448632104000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://pastebin.mozilla.org/8853215","msgtype":"m.text"},"ts":1448632119000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: How come the namespaces are empty? :(","msgtype":"m.text"},"ts":1448632177000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(prototypes and constructors)","msgtype":"m.text"},"ts":1448632184000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so, first you remove from a parent, so you get (removedNodes = [node]), and then you add, so you get (addedNodes = [node]) - that is what I'd expect at least now","msgtype":"m.text"},"ts":1448632207000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but why gecko gives (removedNodes = [child], addedNodes = [node] there","msgtype":"m.text"},"ts":1448632218000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looking...","msgtype":"m.text"},"ts":1448632228000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"This isn't what I would expect at all.","msgtype":"m.text"},"ts":1448632236000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's a replacing.","msgtype":"m.text"},"ts":1448632237000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: In the most basic case, replacing a node removes two elements and adds one.","msgtype":"m.text"},"ts":1448632262000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: those empty namespaces look like just some codegen artifact","msgtype":"m.text"},"ts":1448632266000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It must removes the replacing node from its previous parent,","msgtype":"m.text"},"ts":1448632278000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and it must removes the to-be-replaced child from the new parent of the replacing node.","msgtype":"m.text"},"ts":1448632288000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The removing of the to-be-replaced child is the removedNodes in the mutation record of the actual replacement.","msgtype":"m.text"},"ts":1448632304000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"The removing of the replacing node is part of `node` being adopted.","msgtype":"m.text"},"ts":1448632331000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"first you remove node from parent, you get record 1, (now node is already removed), then you can't remove it again so the next record has just added node","msgtype":"m.text"},"ts":1448632333000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"All replacements end with a (removedNodes = [child] addedNodes = [node]), so that shouldn't be the thing that is changed.","msgtype":"m.text"},"ts":1448632356000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: Then that is a replacement that doesn't look like a replacement.","msgtype":"m.text"},"ts":1448632375000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hence why I think it would be wrong.","msgtype":"m.text"},"ts":1448632382000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Case 1: node has no previous parent: (removedNodes = [child], addedNodes = [node])","msgtype":"m.text"},"ts":1448632405000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Case 1: node has a previous parent: (removedNodes = [node]) (removedNodes = [child], addedNodes = [node])","msgtype":"m.text"},"ts":1448632423000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"s/1/2/","msgtype":"m.text"},"ts":1448632424000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Case 3: node = child in current Gecko: (removedNodes = [child]) (removedNodes = [child], addedNodes = [child])","msgtype":"m.text"},"ts":1448632439000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"You suggest changing case 3 to  (removedNodes = [child]) (addedNodes = [child]);","msgtype":"m.text"},"ts":1448632459000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I suggest (removedNodes = [child], addedNodes = [child])","msgtype":"m.text"},"ts":1448632470000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and I think that is wrong","msgtype":"m.text"},"ts":1448632477000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"first you remove from whatever parent","msgtype":"m.text"},"ts":1448632487000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Your suggestion makes case 3 out of the place when comparing to case 1 and 2â€¦","msgtype":"m.text"},"ts":1448632493000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so you need to get (removedNodes = [node])","msgtype":"m.text"},"ts":1448632496000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and your suggestion makes case 2 out of place","msgtype":"m.text"},"ts":1448632524000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And it makes the algorithm way more complex than conditionally adopting.","msgtype":"m.text"},"ts":1448632527000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"No it doesn't.","msgtype":"m.text"},"ts":1448632530000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you're missing one record","msgtype":"m.text"},"ts":1448632533000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"No.","msgtype":"m.text"},"ts":1448632538000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It just makes it like case 1.","msgtype":"m.text"},"ts":1448632542000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"which should always happen when something is replaced","msgtype":"m.text"},"ts":1448632543000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but it isn't like case 1","msgtype":"m.text"},"ts":1448632556000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"When something is replaced, there should always be a mutation record corresponding to a damn replacement.","msgtype":"m.text"},"ts":1448632570000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"In your case 3, it doesn't.","msgtype":"m.text"},"ts":1448632571000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"it looks like remove and insertBefore were called.","msgtype":"m.text"},"ts":1448632571000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"node *does have* previous parent","msgtype":"m.text"},"ts":1448632578000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so it is not case 1","msgtype":"m.text"},"ts":1448632587000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And it is a replacement, so no mutation record at all with both removedNodes and addedNodes is wrong too.","msgtype":"m.text"},"ts":1448632613000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And it makes the spec way more verbose than my suggestion.","msgtype":"m.text"},"ts":1448632615000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"Let nodes be nodeâ€™s children if node is a DocumentFragment node, and a list containing solely node otherwise.\" becomes:","msgtype":"m.text"},"ts":1448632640000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Let nodes be the empty list if node is child, nodeâ€™s children if node is a DocumentFragment node, and a list containing solely node otherwise.","msgtype":"m.text"},"ts":1448632665000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"( I don't understand why Gecko gives that (removedNodes = [child], addedNodes = [child]), I need to debug)","msgtype":"m.text"},"ts":1448632691000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It does it because it's a replacementâ€¦","msgtype":"m.text"},"ts":1448632711000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And because the spec says to queue that.","msgtype":"m.text"},"ts":1448632716000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Err, what I said about step 12 is wrong.","msgtype":"m.text"},"ts":1448632787000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I don't care what the spec says, I care what should happen ;)","msgtype":"m.text"},"ts":1448632791000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It's step 14 that needs to be changed for what you said.","msgtype":"m.text"},"ts":1448632804000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: Sure, but replacing a node should always queue a replacement record,","msgtype":"m.text"},"ts":1448632810000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"a record with just addedNodes isn't, whatever we say.","msgtype":"m.text"},"ts":1448632821000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"\"replacement record\"","msgtype":"m.text"},"ts":1448632846000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"removedNodes a list solely containing child\" would need to become \"removedNodes a list solely containing child if child is not node, and the empty list otherwise.\"","msgtype":"m.text"},"ts":1448632851000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"what on earth that is :)","msgtype":"m.text"},"ts":1448632853000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there are just MutationRecords","msgtype":"m.text"},"ts":1448632856000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: A record with both removedNodes and addedNodes, obviously.","msgtype":"m.text"},"ts":1448632859000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"but let me debug this some","msgtype":"m.text"},"ts":1448632893000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I need to understand why gecko does what it does now","msgtype":"m.text"},"ts":1448632907000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And with 2 mutation records, I will need to invalidate childNodes' cache more frequently in Servo.","msgtype":"m.text"},"ts":1448633079000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"A mutation record with (removedNodes = [node], addedNodes = [node]) tells me that the list of children didn't change size, so my cache is still correct.","msgtype":"m.text"},"ts":1448633112000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: so in Gecko I'm getting the records I expect","msgtype":"m.text"},"ts":1448633347000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"2 records","msgtype":"m.text"},"ts":1448633349000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"first one has the removal, 2nd one has the added node","msgtype":"m.text"},"ts":1448633363000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And why would that be more correct than what I said?","msgtype":"m.text"},"ts":1448633385000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: you use mutation records to invalidate childNodes cache?","msgtype":"m.text"},"ts":1448633389000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Their machinery yes.","msgtype":"m.text"},"ts":1448633397000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's written in the ticket, it would be nice if I didn't have to repeat myself. :)","msgtype":"m.text"},"ts":1448633409000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"it is rather expected that replaceChild first removes the replacing node from its parent","msgtype":"m.text"},"ts":1448633441000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Mutation records in Servo will be queued somewhere in a children_changed method. That method is too used to update childNodes cache.","msgtype":"m.text"},"ts":1448633444000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so, you get one record for that","msgtype":"m.text"},"ts":1448633454000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"It is rather expected that replaceChild will queue a record with both removedNodes and addedNodes.","msgtype":"m.text"},"ts":1448633463000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and then you create a record for the case when replacing node is added to context node","msgtype":"m.text"},"ts":1448633470000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What's wrong about what I'm saying?","msgtype":"m.text"},"ts":1448633472000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and whether or not something removed is just a side thing","msgtype":"m.text"},"ts":1448633485000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"replacement\", i.e. something is removed and something is added.","msgtype":"m.text"},"ts":1448633490000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"you somehow special case child == node","msgtype":"m.text"},"ts":1448633519000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"You do too.","msgtype":"m.text"},"ts":1448633529000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"not really","msgtype":"m.text"},"ts":1448633536000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think either way we'll have to special case that","msgtype":"m.text"},"ts":1448633549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yes you do. That case must be discriminated to not include child in removedNodes.","msgtype":"m.text"},"ts":1448633552000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Cf. step 14.","msgtype":"m.text"},"ts":1448633564000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"if nothing is removed in the second phase, you don't get anything in the removedNodes","msgtype":"m.text"},"ts":1448633567000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And how do you initialise removedNodes?","msgtype":"m.text"},"ts":1448633582000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"By saying it should be empty if child = node,","msgtype":"m.text"},"ts":1448633603000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that's discriminating.","msgtype":"m.text"},"ts":1448633603000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"initialize removedNodes? it is empty list unless you've removed something from a node when the record is created","msgtype":"m.text"},"ts":1448633681000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That makes no sense. You are talking about this from the POV of implementation details of Gecko.","msgtype":"m.text"},"ts":1448633717000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I see Gecko's behavior, which is (removedNodes = [child], addedNodes = [child]), not (removedNodes = [child]), (removedNodes = [child], addedNodes = [child]) rather good one","msgtype":"m.text"},"ts":1448633726000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"How do you *specify* what you are saying, if not by special-casing child = node?","msgtype":"m.text"},"ts":1448633741000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I'm talking about from the point of view of how I see mutations in DOM should work ;)","msgtype":"m.text"},"ts":1448633755000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Me too.","msgtype":"m.text"},"ts":1448633760000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"How do you specify it?","msgtype":"m.text"},"ts":1448633764000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and from a point of view of the MutationObserver API designer","msgtype":"m.text"},"ts":1448633772000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"How do you write the prose that describe what *you* want?","msgtype":"m.text"},"ts":1448633772000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Me too.","msgtype":"m.text"},"ts":1448633776000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"You say you aren't special-casing child == node, explain what would be the prose to do what you say without special-casing it.","msgtype":"m.text"},"ts":1448633804000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Note also that we are special casing this case already elsewhere, in pre-insert","msgtype":"m.text"},"ts":1448633896000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, and insertion is not about removing something and putting something instead.","msgtype":"m.text"},"ts":1448633923000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"From the POV of a MutationObserver API designer, I would expect the mutation records to strive to describe the actual mutations taking place,","msgtype":"m.text"},"ts":1448633941000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"there is still special case sure, but different place. and I say removing the first \"replacing node is removed from parent\"  in some case would be weirder that having just the case later that if there isn't anything to remove anymore, don't add anything to removedNodes","msgtype":"m.text"},"ts":1448633950000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that's why we have the suppress observers flag and whatnot,","msgtype":"m.text"},"ts":1448633955000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"making two records is to me like not having the suppress observers flag, and queueing mutation records for each removal and insertion instead of in bulk.","msgtype":"m.text"},"ts":1448633987000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: And that's not special-casing?","msgtype":"m.text"},"ts":1448634000000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"How is changing the removedNodes property of the second record not as special-casing as not queuing the first one?","msgtype":"m.text"},"ts":1448634030000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: it seems your solution requires changes to step 11 and step 14, whereas nox' solution requires only a change to step 10 and creates cleaner records...","msgtype":"m.text"},"ts":1448634050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm looking if my solution needs any changes","msgtype":"m.text"},"ts":1448634100000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"step 11 wouldn't just do anything, and I'm not sure what it does here... reading","msgtype":"m.text"},"ts":1448634120000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"To the spec? Of course it does, that's what I've been saying for 15 minutes.","msgtype":"m.text"},"ts":1448634128000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: it segfaults","msgtype":"m.text"},"ts":1448634131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Removing a node from its parent needs a parent. `node` doesn't have a parent anymore.","msgtype":"m.text"},"ts":1448634141000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's why the spec is wrong.","msgtype":"m.text"},"ts":1448634146000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ah, 14 would need change","msgtype":"m.text"},"ts":1448634173000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And 11.","msgtype":"m.text"},"ts":1448634190000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1448634195000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Mine needs a change in step 10 and makes better records.","msgtype":"m.text"},"ts":1448634216000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox' solution creates unexpected records, since it is missing the first one","msgtype":"m.text"},"ts":1448634225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Expected records*","msgtype":"m.text"},"ts":1448634234000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"unexpected :)","msgtype":"m.text"},"ts":1448634246000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yours are unexpected, because the second one doesn't describe a replacement.","msgtype":"m.text"},"ts":1448634250000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"because it is missing the first one","msgtype":"m.text"},"ts":1448634251000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"See my test.","msgtype":"m.text"},"ts":1448634262000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Find a replaceChild that produces a record without a removedNodes property.","msgtype":"m.text"},"ts":1448634269000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hint: there is none.","msgtype":"m.text"},"ts":1448634273000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: not describing the replacement seems at least equally weird","msgtype":"m.text"},"ts":1448634277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or unexpected","msgtype":"m.text"},"ts":1448634285000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm trying to see why what is unexpected","msgtype":"m.text"},"ts":1448634310000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"https://github.com/nox/web-platform-tests/blob/replacechild-mutation-records/dom/nodes/MutationObserver-childList.html#L258-L296","msgtype":"m.text"},"ts":1448634316000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: because in all cases, except for this one in Gecko, invoking replaceChild ends with a record that describes what node got removed and what it got replaced with","msgtype":"m.text"},"ts":1448634359000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"{type: \"childList\", removedNodes: [â€¦], addedNodes: [â€¦]}","msgtype":"m.text"},"ts":1448634363000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"can't see the light here","msgtype":"m.text"},"ts":1448634521000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Do you understand what annevk said?","msgtype":"m.text"},"ts":1448634566000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It's not rocket science.","msgtype":"m.text"},"ts":1448634574000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Do you not see the common element to all the tests I linked?","msgtype":"m.text"},"ts":1448634584000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"53 is missing one record, that is what I see","msgtype":"m.text"},"ts":1448634721000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Are you kidding me?","msgtype":"m.text"},"ts":1448634746000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I'm trying to understand reasoning for this proposed change","msgtype":"m.text"},"ts":1448634751000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"we need a fix to the spec sure","msgtype":"m.text"},"ts":1448634769000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Oh, n51 is the same test I see.","msgtype":"m.text"},"ts":1448634798000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"one of the initial steps in replaceChild has always been that the node is removed from its parent","msgtype":"m.text"},"ts":1448634846000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ah no, d51 doesn't exist. Different test.","msgtype":"m.text"},"ts":1448634849000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so I'm trying to understand why that step should now change","msgtype":"m.text"},"ts":1448634881000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: One of the final steps in replaceChild has always been that the mutation record has always a removedNodes.","msgtype":"m.text"},"ts":1448634885000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1448634893000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"What no?","msgtype":"m.text"},"ts":1448634899000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MutationObservers are a new thing","msgtype":"m.text"},"ts":1448634900000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1448634904000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"added to DOM recently","msgtype":"m.text"},"ts":1448634908000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Let me reformulate.","msgtype":"m.text"},"ts":1448634914000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"One of the initial steps in replaceChild has not been that the node is removed from its parent,","msgtype":"m.text"},"ts":1448634929000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"since WebKit always short-circuited everything in case child = node.","msgtype":"m.text"},"ts":1448634938000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that is implementation detail","msgtype":"m.text"},"ts":1448634980000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I was talking about spec here","msgtype":"m.text"},"ts":1448635002000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"And if the node wasn't in a parent, it isn't removed from anywhere, so what you are saying is wrong too.","msgtype":"m.text"},"ts":1448635006000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"About spec, mutation records of replacement operations always include a removedNodes entry.","msgtype":"m.text"},"ts":1448635024000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's right there in the spec, isn't it?","msgtype":"m.text"},"ts":1448635032000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Replacing a child by a node with no parent: removedNodes present;","msgtype":"m.text"},"ts":1448635056000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"replacing a child by nothing: removedNodes present;","msgtype":"m.text"},"ts":1448635077000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"replacing a child by another node in the document: removedNodes present;","msgtype":"m.text"},"ts":1448635077000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"replacing a child by another node in another document: removedNodes present;","msgtype":"m.text"},"ts":1448635078000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"replacing a child by itself: you want no removedNodes present, I want one.","msgtype":"m.text"},"ts":1448635087000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":".innerHTML creates \"replacement record\", and may not contain anything in removedNodes","msgtype":"m.text"},"ts":1448635096000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"same with .textContent","msgtype":"m.text"},"ts":1448635116000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"That's because it's akin to \"replace all\".","msgtype":"m.text"},"ts":1448635121000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's not \"replacing a single thing by something else\".","msgtype":"m.text"},"ts":1448635128000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"replaceWith does like I just described.","msgtype":"m.text"},"ts":1448635139000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"would there be any harm done if implementations which short circuited the actual replacement, still queued up the mutation records?","msgtype":"m.text"},"ts":1448635174000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: Yes.","msgtype":"m.text"},"ts":1448635186000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"caitp: Ranges not being updated.","msgtype":"m.text"},"ts":1448635192000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"in webkit, they could probably get all the side effects with Node::didReplace() or whatever it's called","msgtype":"m.text"},"ts":1448635356000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"(anecdote, even DOM 1 spec from 1997 says \"If the newChild is already in the tree, it is first removed. \")","msgtype":"m.text"},"ts":1448635368000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"You can't argue that mutation observers are new,","msgtype":"m.text"},"ts":1448635458000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and then argue about how the newChild must be removed from its parent in 1997.","msgtype":"m.text"},"ts":1448635462000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Even with my suggestion, newChild is still removed from its parent.","msgtype":"m.text"},"ts":1448635472000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But it does so with observer suppressed.","msgtype":"m.text"},"ts":1448635487000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Whereas you want to keep removing it during adoption (which doesn't look mentioned in 1997), with the observers unsuppressed.","msgtype":"m.text"},"ts":1448635518000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"doesn't understand how the proposal would improve anything but thinking ... trying to understand","msgtype":"m.emote"},"ts":1448635765000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: well for one it'd keep the spec simpler","msgtype":"m.text"},"ts":1448635840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And would queue less mutation records.","msgtype":"m.text"},"ts":1448635854000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and would change the behavior of shipping produces","msgtype":"m.text"},"ts":1448635963000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"products","msgtype":"m.text"},"ts":1448635966000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nox: what does Edge do?","msgtype":"m.text"},"ts":1448635978000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm on a Mac.","msgtype":"m.text"},"ts":1448636002000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"smaug____: I'm pretty sure Gecko has another bug anywayâ€¦","msgtype":"m.text"},"ts":1448636040000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"http://mxr.mozilla.org/mozilla-central/source/dom/base/nsINode.cpp#1970 This, what is it?","msgtype":"m.text"},"ts":1448636145000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Isn't that about the child's next sibling being node?","msgtype":"m.text"},"ts":1448636172000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1448636237000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"that is the child","msgtype":"m.text"},"ts":1448636256000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Why could an error be thrown at that point?","msgtype":"m.text"},"ts":1448636292000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"mostly because \"this is mutation events, ensure we're some sane-ish state still\"","msgtype":"m.text"},"ts":1448636339000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"I'm pretty sure Gecko/AnyOtherEngine has another bug anyway\" pretty safe bet =)","msgtype":"m.text"},"ts":1448636357000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"well, mutation events aren't spec'ed","msgtype":"m.text"},"ts":1448636367000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Wha","msgtype":"m.text"},"ts":1448636384000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"++caitp","msgtype":"m.text"},"ts":1448636390000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nox: you do \"something vaguely like this\"","msgtype":"m.text"},"ts":1448636449000,"senderName":"gsnedder1","senderId":"gsnedder1@irc"},
{"content":{"body":"gsnedder1: My patch is pristine clear. =)","msgtype":"m.text"},"ts":1448636472000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I still hold some hopes we don't have to define mutation events","msgtype":"m.text"},"ts":1448636486000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But... I'm getting close to the point of just trying to figure them out and get it over with","msgtype":"m.text"},"ts":1448636502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think that's a vain hope at this stage :(","msgtype":"m.text"},"ts":1448636516000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Although maybe if Servo gets away with sanity and prevails","msgtype":"m.text"},"ts":1448636519000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Justice shall prevail.","msgtype":"m.text"},"ts":1448636536000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"May the odds be forever in your favour.","msgtype":"m.text"},"ts":1448636553000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so in Gecko the current behavior comes rather naturally from the implementation, I admit. Since MutationObserver implementation uses internal nsIMutationObserver to get notifications about actual removals and additions, if some removal just doesn't happen, removedNodes will be empty","msgtype":"m.text"},"ts":1448636568000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: In Servo too. :)","msgtype":"m.text"},"ts":1448636606000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so it is like merging 14 to 11","msgtype":"m.text"},"ts":1448636630000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"partially","msgtype":"m.text"},"ts":1448636641000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Following my DOM PR: https://github.com/nox/servo/blob/c63e8e62454a0ef2d1006c00a19d7aa62ba0777d/components/script/dom/node.rs#L2050-L2054","msgtype":"m.text"},"ts":1448636658000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: and you could have that same null check around Node::remove(child, self, SuppressObserver::Suppressed);","msgtype":"m.text"},"ts":1448636737000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and get Gecko's behavior","msgtype":"m.text"},"ts":1448636743000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: No. I would then have to change step 14.","msgtype":"m.text"},"ts":1448636771000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ok, so Servo has quite different setup then","msgtype":"m.text"},"ts":1448636807000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Specifically, I would need to call either ChildrenMutation::replace or ChildrenMutation::insert.","msgtype":"m.text"},"ts":1448636814000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"in Gecko it is step 11 effectively which tells whether mutation record has something in removedNodes","msgtype":"m.text"},"ts":1448636835000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since it nothing is removed, nothing will be added to removed nodes","msgtype":"m.text"},"ts":1448636847000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: In Servo, mutation records are built explicitly.","msgtype":"m.text"},"ts":1448636853000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"s/are/will be/","msgtype":"m.text"},"ts":1448636858000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"From a ChildrenMutation struct, which we build in each method that queues a mutation record.","msgtype":"m.text"},"ts":1448636876000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That ChildrenMutation thing is what I use to update childNodes.","msgtype":"m.text"},"ts":1448636904000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/nox/servo/blob/c63e8e62454a0ef2d1006c00a19d7aa62ba0777d/components/script/dom/nodelist.rs#L240-L267","msgtype":"m.text"},"ts":1448636939000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"With your suggestion, calling replaceChild will mean we reach https://github.com/nox/servo/blob/c63e8e62454a0ef2d1006c00a19d7aa62ba0777d/components/script/dom/nodelist.rs#L233 way more frequently.","msgtype":"m.text"},"ts":1448636968000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"With mine, never.","msgtype":"m.text"},"ts":1448636971000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"With mine, only the case where we replace a child by nothing*","msgtype":"m.text"},"ts":1448636988000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"in Gecko the latter record gets both removed/addedNodes because of http://mxr.mozilla.org/mozilla-central/source/dom/base/nsINode.cpp?mark=2168-2168,2189-2189#2168 and it nsAutoMutationBatch isn't ever initialized, you just get a normal record with addedNodes","msgtype":"m.text"},"ts":1448637279000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s/it/if/","msgtype":"m.text"},"ts":1448637288000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Someone should try my test on Edge.","msgtype":"m.text"},"ts":1448637322000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"when no batching happens, all mutationrecord handling is based on actual insertions or removals","msgtype":"m.text"},"ts":1448637341000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I find the setup in Servo better because it follows closely the spec.","msgtype":"m.text"},"ts":1448637485000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"oh, sure from readability point of view probably much better. Gecko just was there well before we had good DOM spec ;)","msgtype":"m.text"},"ts":1448637623000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and, nsIMutationObserver which we use for this too is super handy","msgtype":"m.text"},"ts":1448637641000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nsIMutationObserver has very little to do with MutationObserver, way lower level, C++ only notifications","msgtype":"m.text"},"ts":1448637675000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(nsIMutationObserver is used also to implement Range etc)","msgtype":"m.text"},"ts":1448637691000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: children_changed is Servo's nsIMutationObserver.","msgtype":"m.text"},"ts":1448637766000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"sounds like it is a tad higher level thing","msgtype":"m.text"},"ts":1448637805000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"For childList records that is.","msgtype":"m.text"},"ts":1448637813000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It is used for Rust-only things I mean.","msgtype":"m.text"},"ts":1448637853000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"And will be usable for actual MutationRecord things.","msgtype":"m.text"},"ts":1448637893000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"lunch","msgtype":"m.text"},"ts":1448638179000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"5:30pm?","msgtype":"m.text"},"ts":1448638204000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Actually just went outside to buy a sandwich too.","msgtype":"m.text"},"ts":1448638254000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But I woke up at 11:30.","msgtype":"m.text"},"ts":1448638272000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":":'(","msgtype":"m.text"},"ts":1448638903000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/whatwg/dom/pull/121#issuecomment-160163345","msgtype":"m.text"},"ts":1448638928000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"1) We should aim for consistency as long as possible. So if some step in an algorithm can be executed, it should be (by default) (step 10), and aim for adding special cases to steps which just can't be executed (step 11)","msgtype":"m.text"},"ts":1448643705000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"2) with your proposal we end up creating such mutation records which no other mutation creates, same node in removed and in added nodes","msgtype":"m.text"},"ts":1448643722000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nox: aha, even more reasons for Gecko's behavior :)","msgtype":"m.text"},"ts":1448643725000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1448643726000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Well glad that got sorted","msgtype":"m.text"},"ts":1448645922000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess now we need to figure out what the steps actually need to say","msgtype":"m.text"},"ts":1448645931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And we should add some more tests","msgtype":"m.text"},"ts":1448645945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Will do.","msgtype":"m.text"},"ts":1448646329000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: just to verify, getAttributeNames is supposed to return attributes in the same order as .attributes, right?","msgtype":"m.text"},"ts":1448646391000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"We should probably try and make sure we have tests for every spec change going forward, somehow.","msgtype":"m.text"},"ts":1448646409000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: FYI, I'm adding some getAttributeNames tests in a Gecko bug","msgtype":"m.text"},"ts":1448652452000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"wpt tests","msgtype":"m.text"},"ts":1448652454000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yes and nice!","msgtype":"m.text"},"ts":1448654050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: some kind of specification dashboard from which you can file bugs for commits would be great","msgtype":"m.text"},"ts":1448654087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: so you can file bugs against browsers and wpt","msgtype":"m.text"},"ts":1448654094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: like, updating an impl to the current spec from something a few years ago where the spec hasn't changed much is so much easier if there's tests for it rather than looking through the *whole* spec and impl","msgtype":"m.text"},"ts":1448654243000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so we really need tests for everything","msgtype":"m.text"},"ts":1448654260000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and people to write them","msgtype":"m.text"},"ts":1448654264000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"which is really the problem :P","msgtype":"m.text"},"ts":1448654267000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: yt?","msgtype":"m.text"},"ts":1448654274000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and people to review them","msgtype":"m.text"},"ts":1448654508000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: wpt has almost no problems getting test review","msgtype":"m.text"},"ts":1448654575000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: that's a csswg-test problem, pretty much","msgtype":"m.text"},"ts":1448654585000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1448654593000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: really you guys just need to relax the requirements as to who can review","msgtype":"m.text"},"ts":1448654605000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But there's not really much point in me rambling about this again :)","msgtype":"m.text"},"ts":1448654629000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"afaik, we have - we should be allowing anyone to review","msgtype":"m.text"},"ts":1448654631000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"if that's not the case, I'll push at it again","msgtype":"m.text"},"ts":1448654644000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I have no idea.","msgtype":"m.text"},"ts":1448654716000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"There's no good written documentation saying what the policies are nowadays, and what there is is so out of date.","msgtype":"m.text"},"ts":1448654730000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: really I think a lot of the problem is half the time when there's any discussion almost nobody responds, and it's only the people who object respond","msgtype":"m.text"},"ts":1448654828000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: probably just need to take some large proposal of \"here's what we want to do\" to the whole group and see if there's consensus","msgtype":"m.text"},"ts":1448654855000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: on the mailing list, you mean?","msgtype":"m.text"},"ts":1448654858000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: yeah","msgtype":"m.text"},"ts":1448654901000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think there's much more explicit implicit agreement at F2Fs :)","msgtype":"m.text"},"ts":1448654932000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I presume I won't be showing up in Sydney, given costs and not having any funding in place for next year presently)","msgtype":"m.text"},"ts":1448654964000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"from people who don't subscribe to the testing mailing list, and so don't contribute to the discussions there :)","msgtype":"m.text"},"ts":1448654966000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"(FWIW)","msgtype":"m.text"},"ts":1448654975000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: yet, even if wpt gets reviews, one should not rely on them in case implementing something you get test failures :) (I just fixed a broken MutationObserver test yesterday)","msgtype":"m.text"},"ts":1448654978000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: oh, totally agreed","msgtype":"m.text"},"ts":1448654996000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but sure, usually things go well","msgtype":"m.text"},"ts":1448654998000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: but even with far higher requirements for who can review you still end up with bad tests slipping through (probably fewer though), but then you also get far fewer tests reviewed tooâ€¦","msgtype":"m.text"},"ts":1448655033000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"very true. need some balance, yet mostly we need just more tests","msgtype":"m.text"},"ts":1448655063000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"my basic conclusion is we just need to swing policies in favour of more tests, because bad tests will be found when people debug failures","msgtype":"m.text"},"ts":1448655090000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(though that does nothing for tests that bogusly pass)","msgtype":"m.text"},"ts":1448655103000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and really the choice is between getting the major of tests vendors write v. very, very few","msgtype":"m.text"},"ts":1448655131000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"no policy will lead to any middle ground, AFAICT","msgtype":"m.text"},"ts":1448655142000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it would be great if we could get help from web devs to write tests, so that not only browser impls write them. It should be also interests for web devs to ensure browsers don't regress behavior","msgtype":"m.text"},"ts":1448655149000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: FWIW, I know some major web companies have expressed interest in paying people to work on testing browsers (because long-term it's in there interest), but thus far nothing really has come of it","msgtype":"m.text"},"ts":1448655199000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm going to be talking next week to a room full of web devs on that very topic - becoming responsible for the tech we use (writing tests, reporting bugs, etc.)","msgtype":"m.text"},"ts":1448655217000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"smaug____: the big problem with tests from TTWF and similar is that the devs will open PRs with what they've written, but then will never get back to respond to any sort of review comments","msgtype":"m.text"},"ts":1448655241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and quite frankly plenty of the tests are really poor","msgtype":"m.text"},"ts":1448655249000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think a lot of that is just the fact the majority of people are terrible at any sort of QA","msgtype":"m.text"},"ts":1448655278000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"does that hint we need better documentation how to write good tests","msgtype":"m.text"},"ts":1448655286000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think the issue is deeper than that: people don't know *how* to even start writing a test for a feature (not a web feature, but *any* feature)","msgtype":"m.text"},"ts":1448655328000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"like what we get is consistent with what I see in plenty of places: devs are simply terrible at testing","msgtype":"m.text"},"ts":1448655364000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"hmm, I don't btw know how to run wpt tests if I'm not using mach from mozilla-central","msgtype":"m.text"},"ts":1448655380000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but like how to run wpt in other browsers","msgtype":"m.text"},"ts":1448655393000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looks like https://github.com/w3c/web-platform-tests/ explains","msgtype":"m.text"},"ts":1448655421000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"not really how to run all the tests in an automated manner","msgtype":"m.text"},"ts":1448655444000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"but how many people actually need to do that?","msgtype":"m.text"},"ts":1448655451000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham_ et al have just make running tests so easy with gecko","msgtype":"m.text"},"ts":1448655461000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like what matters is being able to run one test","msgtype":"m.text"},"ts":1448655463000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/make/made/","msgtype":"m.text"},"ts":1448655469000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: fwiw, wptrunner works with more than just Gecko and Servo","msgtype":"m.text"},"ts":1448655477000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"at least in principle, it should be cross-browser, without too much setup code per browser","msgtype":"m.text"},"ts":1448655492000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the harder thing is running reftests in some user-friendly way, IMO","msgtype":"m.text"},"ts":1448655523000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"astearns: do you have any views on how to clarify policies about testsuite? just bring it up on www-style?","msgtype":"m.text"},"ts":1448655810000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(and telecons?)","msgtype":"m.text"},"ts":1448655818000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: but do other vendors yet run wpt automatically?","msgtype":"m.text"},"ts":1448655860000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I thought blink has plans, but not doing it yet","msgtype":"m.text"},"ts":1448655875000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Edge do","msgtype":"m.text"},"ts":1448655883000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"ah, great","msgtype":"m.text"},"ts":1448655887000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"telecons and ftf would probably be more effective than the mailing list(s) (as you noted, only the people who are comfortable with the status quo respond on the lists)","msgtype":"m.text"},"ts":1448655906000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I'm happy to spend telcon time talking about testing","msgtype":"m.text"},"ts":1448655943000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"we should probably do this once I formally back in the group :)","msgtype":"m.text"},"ts":1448655955000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"smaug____: I think within six months we really hopefully can be at a point where everyone is running wpt+csswg-test. idk quite how realistic that is for Blink.","msgtype":"m.text"},"ts":1448656011000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yep yep (and/or before the formalities are done, depending on how long that takes)","msgtype":"m.text"},"ts":1448656014000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1448656032000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"as I said, I won't be at the next F2F (and idk really until next TPAC, given travel costs, depending on what happens about funding)","msgtype":"m.text"},"ts":1448656058000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I mean I /can/ self-fund, but long-haul travel starts having real effects on income fast)","msgtype":"m.text"},"ts":1448656077000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: where are you based?","msgtype":"m.text"},"ts":1448656594000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: Scotland","msgtype":"m.text"},"ts":1448656679000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think good progress can be made if we spend some time talking on the weekly calls about tests","msgtype":"m.text"},"ts":1448656759000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"prod people about the review queue, get some testing voids identified to spur test writing","msgtype":"m.text"},"ts":1448656803000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I think stuff would be easier if we just viewed the tests in the repo as de-facto reviewed (by virtue of being run by some), and just kept on top of new tests","msgtype":"m.text"},"ts":1448656877000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I also don't think finding test voids really helps *that* much, because browser vendors will mostly write tests when it's in their interest and not much otherwise)","msgtype":"m.text"},"ts":1448656931000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the review queue I'm concerned about is pending pull requests. I don't much care about the review \"status\" of tests already in the repo","msgtype":"m.text"},"ts":1448656975000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I'll try and write something up as to what there's mostly consensus on (mostly those who've spoken except for GÃ©rard) to www-style for the sake of somewhere to *start* discussions; I'll probably throw in a few things that I feel strongly about too :)","msgtype":"m.text"},"ts":1448657159000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"there wasn't anything more than \"west coast US\" said for the May F2F was there?","msgtype":"m.text"},"ts":1448657331000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: nothing more definite yet for May. I don't expect we'll have a destination until after the new year","msgtype":"m.text"},"ts":1448658105000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"Hello. annevk: Why don't you write something on your blog? Are you too busy?","msgtype":"m.text"},"ts":1448668440000,"senderName":"paxcoder","senderId":"paxcoder@irc"}
]