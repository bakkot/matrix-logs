[
{"content":{"body":"holy hell","msgtype":"m.text"},"ts":1316228460000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"opera stole my .ogg file extension","msgtype":"m.text"},"ts":1316228461000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i thought the 90s file association wars were over :(","msgtype":"m.text"},"ts":1316228520000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"nowadays it is usually more like \"default browser\" war","msgtype":"m.text"},"ts":1316228580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"opera just landed dangerously close to quicktime in my mental software quality map","msgtype":"m.text"},"ts":1316228581000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"maybe foobar forgot to grab it to begin with? dunno, very bizarre in any case (dear opera: you're a browser)","msgtype":"m.text"},"ts":1316229000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ms2ger, hmm yeah, you'd need to have access to dev.w3.org","msgtype":"m.text"},"ts":1316243640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie, did you mean the suggestion about treating attributes starting with \"on\" specially? I suppose we could do that","msgtype":"m.text"},"ts":1316244420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hm if that was the suggestion it sounds suboptimal","msgtype":"m.text"},"ts":1316244480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"reads the original thread again","msgtype":"m.emote"},"ts":1316246760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1316246820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie, so TabAtkins mentioned MooTools which has a magic attribute called \"events\" which takes its own object","msgtype":"m.text"},"ts":1316246880000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"though in his follow up he thought using magic on* was better...","msgtype":"m.text"},"ts":1316246940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the other alternative was using another argument for it","msgtype":"m.text"},"ts":1316247420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"other problems with just object","msgtype":"m.text"},"ts":1316250780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they theoretically unordered","msgtype":"m.text"},"ts":1316250781000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"are*","msgtype":"m.text"},"ts":1316250782000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but order is detectable for both attributes and event handlers","msgtype":"m.text"},"ts":1316250840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder, if we introduce new Text(); how much is the DOMString stuff needed?","msgtype":"m.text"},"ts":1316253360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do we want node.appendChild(\"test\") / new Text(\"test\") / both?","msgtype":"m.text"},"ts":1316253361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm guessing all of it...","msgtype":"m.text"},"ts":1316253540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Acid3 updated, let the DOM simplifications commence","msgtype":"m.text"},"ts":1316256180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1316256240000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"where can i find good ajaxcrud, simple and explained .....","msgtype":"m.text"},"ts":1316261880000,"senderName":"rabbi1","senderId":"rabbi1@irc"},
{"content":{"body":"well, I think it's That Time","msgtype":"m.text"},"ts":1316268240000,"senderName":"llrcombs","senderId":"llrcombs@irc"},
{"content":{"body":"IE10/Metro is removing plugin support, and it's really time to define One Codec to Rule Them All","msgtype":"m.text"},"ts":1316268241000,"senderName":"llrcombs","senderId":"llrcombs@irc"},
{"content":{"body":"There's already plenty of One Codecs defined","msgtype":"m.text"},"ts":1316268300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Chrome and FF won't budge on open-source-only codecs no matter how hard anyone tries, so it seems that WebM should be the One Codec that all browsers support","msgtype":"m.text"},"ts":1316268301000,"senderName":"llrcombs","senderId":"llrcombs@irc"},
{"content":{"body":"Someone should suggest that idea to Apple and Microsoft","msgtype":"m.text"},"ts":1316268540000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"annevk: hmm","msgtype":"m.text"},"ts":1316279280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"var e = Element.create('button', { name: 'command', value: 'search', disabled: true, onclick: function (event) { ... } }, 'Search');","msgtype":"m.text"},"ts":1316279340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: maybe just decide how it works based on the value of the entry in the dictionary","msgtype":"m.text"},"ts":1316279341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: string = set content attribute, boolean true = set content attribute to '', boolean false = do nothing, function = set a bubbling event listener for the entry's name minus 'on'?","msgtype":"m.text"},"ts":1316279400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That sounds pretty magical","msgtype":"m.text"},"ts":1316279460000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"the event handler part is, yeah","msgtype":"m.text"},"ts":1316279461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"dunno what else to do","msgtype":"m.text"},"ts":1316279462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Passing an extra object for event handlers would be less magical, but probably also less convenient","msgtype":"m.text"},"ts":1316279520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"actually it wouldn't be that inconvenient, if it came before the array still","msgtype":"m.text"},"ts":1316279580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so long as we can distinguish 'object' from Element/string/Array/Node","msgtype":"m.text"},"ts":1316279581000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that might be non-trivial in idl","msgtype":"m.text"},"ts":1316279640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we should look at use cases, see exactly what it looks like","msgtype":"m.text"},"ts":1316279641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if it's a function, set the property by that name? avoids the \"remove on\" magic","msgtype":"m.text"},"ts":1316279700000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"we don't want to be able to set arbitrary properties","msgtype":"m.text"},"ts":1316279701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that has all kinds of weird side-effects","msgtype":"m.text"},"ts":1316279702000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it'd be weird if \"'onclick': func\" didn't actually affect the onclick property","msgtype":"m.text"},"ts":1316279760000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"e.g. consider Element.create('div', { innerHTML: function () { }, innerText: function () { } }, ['']);","msgtype":"m.text"},"ts":1316279761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"eg. translating it to addEventListener(\"click\", ...) and onclick ending up null would be weird","msgtype":"m.text"},"ts":1316279762000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah i agree that you want it affecting the 'onfoo's","msgtype":"m.text"},"ts":1316279763000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And we'll need to figure something out for the ordering as well","msgtype":"m.text"},"ts":1316279820000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"we only need to worry about ordering if we allow arbitrary properties to be set","msgtype":"m.text"},"ts":1316279880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which i recommend against","msgtype":"m.text"},"ts":1316279881000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Also for attributes","msgtype":"m.text"},"ts":1316279940000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1316279941000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the parser sets them and creates the element atomically","msgtype":"m.text"},"ts":1316279942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That's fiction","msgtype":"m.text"},"ts":1316279943000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"there's no order","msgtype":"m.text"},"ts":1316279944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no it's not","msgtype":"m.text"},"ts":1316279945000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's no way to detect the order","msgtype":"m.text"},"ts":1316279946000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"There is","msgtype":"m.text"},"ts":1316279947000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"element.attributes","msgtype":"m.text"},"ts":1316279948000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"only in buggy browsers","msgtype":"m.text"},"ts":1316279949000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"element.attributes should define its own order","msgtype":"m.text"},"ts":1316280000000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Right, the order in which they're set","msgtype":"m.text"},"ts":1316280001000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"they're not set in an order","msgtype":"m.text"},"ts":1316280002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Aren't there already lots of friendly DOM-wrapper APIs that could be copied from, instead of inventing something new?","msgtype":"m.text"},"ts":1316280120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"doesn't know of any but doesn't see why they wouldn't exist if people cared about it","msgtype":"m.emote"},"ts":1316280121000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"there was a list at the beginning of the thread, I think","msgtype":"m.text"},"ts":1316280180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jquery, etc","msgtype":"m.text"},"ts":1316280181000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jquery is hardly where I'd look for good API design","msgtype":"m.text"},"ts":1316280240000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie btw instead new Element(name, optMap) you can do more orthogonally - new Element(name)._extend({innerHTML: '...'})._on('click', _foo)","msgtype":"m.text"},"ts":1316280420000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"(Element.create(), not new Element())","msgtype":"m.text"},"ts":1316280480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1316280481000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"chaining method calls seems a bit ugly to me","msgtype":"m.text"},"ts":1316280482000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's an option, certainly","msgtype":"m.text"},"ts":1316280483000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie but you can out {optMap} arg to _extend","msgtype":"m.text"},"ts":1316280600000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"c# has this init pattern iirc","msgtype":"m.text"},"ts":1316280660000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"new Element(\"<button name='command' value='search' disabled onclick='...'>{caption}</button>\", { \"caption\": \"Search\" }); - HTML already has a syntax for expressing DOM subtrees, it seems silly to invent a new one","msgtype":"m.text"},"ts":1316280661000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i don't see the advantage of  Element.create('button').extend({name: 'foo'}).append('Submit');  over  Element.create('button', {name: 'foo'}, 'Submit');","msgtype":"m.text"},"ts":1316280662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it looks as new Foo(){a: 1, b: 2}","msgtype":"m.text"},"ts":1316280720000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"Philip`: what you just proposed _is_ new syntax","msgtype":"m.text"},"ts":1316280721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: err, you certainly don't want to be writing JS functions inside blocks of text inside jS","msgtype":"m.text"},"ts":1316280722000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"JS","msgtype":"m.text"},"ts":1316280723000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Philip`: assuming the {caption} part is magical","msgtype":"m.text"},"ts":1316280724000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Only mildly magical, to make it do something that's not redundant with innerHTML","msgtype":"m.text"},"ts":1316280780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"well, string formatting is something that would be useful and that everyone keeps reinventing (though a different problem, of course)","msgtype":"m.text"},"ts":1316280781000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Philip`: how do you create an element whose contents are \"a JS block is like {foo}.\" ?","msgtype":"m.text"},"ts":1316280840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Of course it should be new Element(\"<button name='command' value='search' disabled onclick='...'>%s</button>\" % (\"Search\",))","msgtype":"m.text"},"ts":1316280841000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Philip`: how do you programatically decide whether an attribute is set or not?","msgtype":"m.text"},"ts":1316280842000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip` ie already has this syntax","msgtype":"m.text"},"ts":1316280843000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"Philip`: how do you reference a function for event handlers?","msgtype":"m.text"},"ts":1316280844000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"new Element(\"<button onclick={handler}>\", {\"handler\":function(){...}) plus sufficient magic, or something","msgtype":"m.text"},"ts":1316280900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: moving away from innerHTML is what this discussion is all about","msgtype":"m.text"},"ts":1316280901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"notes that he hasn't read the discussion so he has no idea what the context is, and hasn't given this any non-trivial amount of thought","msgtype":"m.emote"},"ts":1316280902000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"how do you add an attribute to the <button> definition programmatically?","msgtype":"m.text"},"ts":1316280903000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"well if anne wants to spec an html parser in dom core, obviously i'll let him do it, but i am skeptical he'll want to :-)","msgtype":"m.text"},"ts":1316280904000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"XML5 parser :-)","msgtype":"m.text"},"ts":1316280960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I sure won't let him :)","msgtype":"m.text"},"ts":1316280961000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie advantage is you shouldnt copy if(optMap != null) this._extand(optMap) in every constructor","msgtype":"m.text"},"ts":1316280962000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"orthogonallity","msgtype":"m.text"},"ts":1316281020000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: why is that an advantage? a single pointer comparison is trivial in cost.","msgtype":"m.text"},"ts":1316281021000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bga_: plus the whole point here is creating an element _with_ arguments, if you don't want arguments you can already do document.createElement('foo');","msgtype":"m.text"},"ts":1316281080000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in principle, the whole \"set this bundle of properties\" thing could be detached from creation, if there's no real need for them to be atomic","msgtype":"m.text"},"ts":1316281081000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"createElement(\"a\").set({href: \"url\"})","msgtype":"m.text"},"ts":1316281140000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie you can forget this magic line of code in some constructor. but main idea to move from new Point(x, y) to new Point(){x: x, y: y} form.","msgtype":"m.text"},"ts":1316281141000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"create element and set properties namely","msgtype":"m.text"},"ts":1316281200000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"new Point({x: x, y: y}), I hope","msgtype":"m.text"},"ts":1316281201000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ew","msgtype":"m.text"},"ts":1316281202000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"bga_: if you want the JS language itself to change, I recommend bringing it up with the JS folk","msgtype":"m.text"},"ts":1316281260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(just an ugly example, a \"point\" constructor being the last thing you'd want that form for :)","msgtype":"m.text"},"ts":1316281261000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"bga_: we're just proposing a new constructor within what JS already supports","msgtype":"m.text"},"ts":1316281262000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie ok. _extend()","msgtype":"m.text"},"ts":1316281320000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"or Ms2ger form","msgtype":"m.text"},"ts":1316281321000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"may be","msgtype":"m.text"},"ts":1316281322000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: i still don't understand the advantage then","msgtype":"m.text"},"ts":1316281560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie you want ta make same design bug as in Array#map, filter, some etc. each fn get context as last arg instead just force coder to use .bind if he want","msgtype":"m.text"},"ts":1316281740000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"why is it a design bug?","msgtype":"m.text"},"ts":1316281741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you dont want to make obvious decomposition of functionality","msgtype":"m.text"},"ts":1316281860000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"fill object's properties is common task","msgtype":"m.text"},"ts":1316281861000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"i have nothing against a generic syntax for filling an object's properties","msgtype":"m.text"},"ts":1316281920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's not what we're talking about here","msgtype":"m.text"},"ts":1316281980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"we're talking about a convenient constructor for creating an Element","msgtype":"m.text"},"ts":1316281981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1316282040000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"i recommend bringing up the generic idea in the JS group","msgtype":"m.text"},"ts":1316282041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if they add it, maybe we won't need a generic element constructor at all","msgtype":"m.text"},"ts":1316282042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not sure if I had understood your discussion correctly, but what's wrong with document.createElement()?","msgtype":"m.text"},"ts":1316282160000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"why add even more cruft to DOM?","msgtype":"m.text"},"ts":1316282161000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"See the discussion on www-dom","msgtype":"m.text"},"ts":1316282460000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jarek: it's verbose","msgtype":"m.text"},"ts":1316282640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it can be easily abstracted away with frameworks","msgtype":"m.text"},"ts":1316282700000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek, there's a list if you want to argue about the necessity","msgtype":"m.text"},"ts":1316282760000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jarek: why require that people use frameworks?","msgtype":"m.text"},"ts":1316282761000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie what do you think simple but strict(from oop view) about document.Div()? even w/o new","msgtype":"m.text"},"ts":1316282940000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"-about +about","msgtype":"m.text"},"ts":1316282941000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"i don't understand the question","msgtype":"m.text"},"ts":1316282942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorry. just document.Div() document.B()","msgtype":"m.text"},"ts":1316283000000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"are you planning to have spearate Element.createNS() constructor just like document.createElementNS()?","msgtype":"m.text"},"ts":1316283001000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"s/spearate/separate","msgtype":"m.text"},"ts":1316283060000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"bga_: seems like it would mean a lot of constructors","msgtype":"m.text"},"ts":1316283061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"document.Div(){id: 'foo'} if TC39 will accept this syntax","msgtype":"m.text"},"ts":1316283120000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"jarek: no, iirc the proposal is to just support Element.create('foo'); for HTML, Element.create('svg:foo'); for SVG, and 'math:foo' for MathML.","msgtype":"m.text"},"ts":1316283121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie but global scope already has alot of HTML*Element","msgtype":"m.text"},"ts":1316283122000,"senderName":"bga_","senderId":"bga_@irc"},
{"content":{"body":"bga_: which don't map 1:1 to elements","msgtype":"m.text"},"ts":1316283180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what about E4X? Is it officially dead?","msgtype":"m.text"},"ts":1316283840000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"unfortunately, seems that way.","msgtype":"m.text"},"ts":1316283900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"something like e4x would definitely be my preferred solution, personally","msgtype":"m.text"},"ts":1316283901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"brendan still objects to removing e4x from SpiderMonkey, IIRC","msgtype":"m.text"},"ts":1316283960000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I doubt they will remove it from Firefox, this could break some extensions","msgtype":"m.text"},"ts":1316284020000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I've broken a lot of extensions, so that doesn't bother me much","msgtype":"m.text"},"ts":1316284140000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"OTW, I'd be in favour of e4x too, but pretty much including an entire XML tokenizer into the JS parser is somewhat ugly","msgtype":"m.text"},"ts":1316297940000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So yeah, the question is whether we can distinguish between arrays and objects...","msgtype":"m.text"},"ts":1316298060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: at what level?","msgtype":"m.text"},"ts":1316298180000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IDL","msgtype":"m.text"},"ts":1316298240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"method(string, object, object, array)","msgtype":"m.text"},"ts":1316298241000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but you want these overloaded versions:","msgtype":"m.text"},"ts":1316298242000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"method(string, object, array)","msgtype":"m.text"},"ts":1316298243000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"method(string, array)","msgtype":"m.text"},"ts":1316298244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"furthermore, array can also be DOMString","msgtype":"m.text"},"ts":1316298300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and ideally also a Node","msgtype":"m.text"},"ts":1316298301000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"object is always a JavaScript object","msgtype":"m.text"},"ts":1316298360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"{ ... }","msgtype":"m.text"},"ts":1316298361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess you can technically do it, but maybe not without upsetting the JavaScript gods","msgtype":"m.text"},"ts":1316298362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At a JS level, you could just check whether Array.prototype is in the prototype chain, or whether it was created through the array constructor (through [[HasInstance]] or whatever)…","msgtype":"m.text"},"ts":1316298363000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I guess you can do the same for checking about it being a Node?","msgtype":"m.text"},"ts":1316298420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"versus a {...} object?","msgtype":"m.text"},"ts":1316298421000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But doing anything apart from treating arrays as if they were objects (which they are, they just have a different [[DefineOwnProperty]] which magically changes length) is evil.","msgtype":"m.text"},"ts":1316298422000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: Yeah.","msgtype":"m.text"},"ts":1316298423000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Special-casing host objects is a lot less evil, too.","msgtype":"m.text"},"ts":1316298424000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"less evil?","msgtype":"m.text"},"ts":1316298425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Special-casing arrays v. other objects is evil.","msgtype":"m.text"},"ts":1316298540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"{0: \"a\", 1: \"b\", 2: \"c\", length: 3} and [\"a\", \"b\", \"c\"] should be identical everywhere.","msgtype":"m.text"},"ts":1316298600000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I guess it depends on how you view it","msgtype":"m.text"},"ts":1316298720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"As an ES guy. :)","msgtype":"m.text"},"ts":1316298721000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I don't care about your silly host objects. :)","msgtype":"m.text"},"ts":1316298722000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I mean you can treat them identical and still make this work","msgtype":"m.text"},"ts":1316298723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you just say it's method(string, optional object, optional object, optional object) and deal with the specifics in the definition","msgtype":"m.text"},"ts":1316298780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ewwwww.","msgtype":"m.text"},"ts":1316298840000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Just… just… forking based upon prototype chain or [[Class]] or [[HasInstance]] is evil, and only to be done when it's absolutely impossible to use generic objects.","msgtype":"m.text"},"ts":1316298960000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(And that should be basically never, except when a host object deals with another host object)","msgtype":"m.text"},"ts":1316298961000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"can just look at the keys of the object my man :)","msgtype":"m.text"},"ts":1316299140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wants his convenient API damnit","msgtype":"m.emote"},"ts":1316299141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for the overloading, i think to do it you'd have to have a whole bunch of overloads, but you could do it","msgtype":"m.text"},"ts":1316299142000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the magic properties could also work, but they are somewhat less appealing","msgtype":"m.text"},"ts":1316299200000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: And stop pretending I actually write ES, I just write testcases! :)","msgtype":"m.text"},"ts":1316299320000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hey you go around as the \"ES guy\" :p","msgtype":"m.text"},"ts":1316299380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, that's farre :)","msgtype":"m.text"},"ts":1316299440000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"asks public-script-coord","msgtype":"m.emote"},"ts":1316300100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders, well boo you","msgtype":"m.text"},"ts":1316301000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mark Miller says we can!","msgtype":"m.text"},"ts":1316301001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i said we could already :-P","msgtype":"m.text"},"ts":1316301180000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: also, the last argument isn't just Node or string, it's Node or string followed by \"...\"","msgtype":"m.text"},"ts":1316301181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what does that mean?","msgtype":"m.text"},"ts":1316301300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as in varargs","msgtype":"m.text"},"ts":1316301360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh why is that useful?","msgtype":"m.text"},"ts":1316301420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you don't have to put the square brackets in","msgtype":"m.text"},"ts":1316301780000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Element.create('a', {href:'home.html'}, 'Go ', Element.create('em', 'Home!'));","msgtype":"m.text"},"ts":1316301840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"...e.g.","msgtype":"m.text"},"ts":1316301841000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"interesting","msgtype":"m.text"},"ts":1316301842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's pretty easy to do it in webidl i think","msgtype":"m.text"},"ts":1316301843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you just need to a lot of them","msgtype":"m.text"},"ts":1316301900000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"to cover all the various combinations","msgtype":"m.text"},"ts":1316301901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"probably easier to just do it in prose","msgtype":"m.text"},"ts":1316301902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'll think about it some more","msgtype":"m.text"},"ts":1316301903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's no particular rush and http://www.reddit.com/r/IAmA/comments/kitcy/i_am_a_7_year_old_ama/ is really great","msgtype":"m.text"},"ts":1316301904000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also, I need sleep","msgtype":"m.text"},"ts":1316301960000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"What's the best advice you can give to my 2.5 year old son?\" \"A smacking and a beating.\"","msgtype":"m.text"},"ts":1316301961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the one under \"What's your favorite joke?\" too","msgtype":"m.text"},"ts":1316302020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: That is brilliant.","msgtype":"m.text"},"ts":1316302500000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"About type-based overloading: Can't you just use a different method name in each case? That seems more natural for a dynamically-typed language","msgtype":"m.text"},"ts":1316303160000,"senderName":"Philip`","senderId":"Philip`@irc"}
]