[
{"content":{"body":"https://github.com/delapuente/service-workers-101/#service-workers-101 is very nic","msgtype":"m.text"},"ts":1464136933000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://rawgit.com/delapuente/presentations/eca25220751ae19b5c12edc9ceee2aad075ba7a6/web-platform-when-why/index.html#/ is very nice too","msgtype":"m.text"},"ts":1464141193000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"wanderview: I believe that's correct. I think Fetch does? It was needed for some browser off-main-thread use case.…","msgtype":"m.text"},"ts":1464142066000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: FWIW: https://bugs.webkit.org/show_bug.cgi?id=158061","msgtype":"m.text"},"ts":1464161593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so that browsing context name thing was slightly easier to fix than anticipated","msgtype":"m.text"},"ts":1464167256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: kinda nice after several days of drowning in source browsing contexts","msgtype":"m.text"},"ts":1464167284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha yay","msgtype":"m.text"},"ts":1464167352000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Will probably not be able to review until Friday annevk, but we'll see","msgtype":"m.text"},"ts":1464167381000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"There's absolutely no rush","msgtype":"m.text"},"ts":1464167397000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And we should probably get someone to sign off on the exact same origin check and such","msgtype":"m.text"},"ts":1464167414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, hey, https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model seems to have a broken link to fullscreen","msgtype":"m.text"},"ts":1464171433000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: you mean that the concept is not integrated?","msgtype":"m.text"},"ts":1464171487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: there's a couple of open issues around that :/","msgtype":"m.text"},"ts":1464171497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If it's known, that's good enough for me :)","msgtype":"m.text"},"ts":1464171528000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: ping","msgtype":"m.text"},"ts":1464174527000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: hey","msgtype":"m.text"},"ts":1464174586000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in the fetch spec, what happens in a redirect where the redirecting page itself has some content?","msgtype":"m.text"},"ts":1464174632000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: nothing much","msgtype":"m.text"},"ts":1464174653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I assume the correc thing to do is to ignore that content","msgtype":"m.text"},"ts":1464174666000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"annevk: but from the spec POV I don't see that happening, both events will continue to queue process response body","msgtype":"m.text"},"ts":1464174695000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: sure, we can't just cut the connection","msgtype":"m.text"},"ts":1464174736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Manishearth: and if we ever expose redirects we'd want to expose the content they have too","msgtype":"m.text"},"ts":1464174752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: afaict they expose their content *right now*","msgtype":"m.text"},"ts":1464174769000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"and conflict with the actual fetch","msgtype":"m.text"},"ts":1464174776000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: how?","msgtype":"m.text"},"ts":1464174776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1464174817000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1464174818000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"ah, I see","msgtype":"m.text"},"ts":1464174859000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"nvm","msgtype":"m.text"},"ts":1464174860000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"spec wins again :p","msgtype":"m.text"},"ts":1464175455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seriously though if there's something that could be clarified here let me know","msgtype":"m.text"},"ts":1464175470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought there was a fourth way of getting the global... window, self, frames, ?","msgtype":"m.text"},"ts":1464177146000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: this","msgtype":"m.text"},"ts":1464177242000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"right!! :)","msgtype":"m.text"},"ts":1464177249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I like how despite that being general knowledge, folks will still type frames[0]","msgtype":"m.text"},"ts":1464182164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Including me, though I have tried to correct to use self instead","msgtype":"m.text"},"ts":1464182187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"idk, I kinda prefer frames[0] simply because it's what we've all always used, so we all instantly know what it is","msgtype":"m.text"},"ts":1464182219000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I always end up having to check what \"self\" is.","msgtype":"m.text"},"ts":1464182228000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I just found the best way to alert(1)","msgtype":"m.text"},"ts":1464182533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/672","msgtype":"m.text"},"ts":1464182535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so a BOM now overrides the user override encoding? hmmm. not sure I like that.","msgtype":"m.text"},"ts":1464182774000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: ah, yea... fetch() does indeed use shouldClone=true","msgtype":"m.text"},"ts":1464186164000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"redirects \\o/","msgtype":"m.text"},"ts":1464186202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone have the Window Insider Preview edge builds?","msgtype":"m.text"},"ts":1464187342000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"weird question - are there any modern user agents that still support \"user stylesheets\" ?","msgtype":"m.text"},"ts":1464189493000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"Opera does","msgtype":"m.text"},"ts":1464189572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think, still","msgtype":"m.text"},"ts":1464189578000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1464189592000,"senderName":"halindrome","senderId":"halindrome@irc"},
{"content":{"body":"halindrome: Firefox does","msgtype":"m.text"},"ts":1464189601000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"halindrome: it's a fixed path in the profile folder, IIRC, but the support is there","msgtype":"m.text"},"ts":1464189625000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(of course, from there you can use @import url(); etc.)","msgtype":"m.text"},"ts":1464189649000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And Stylish","msgtype":"m.text"},"ts":1464189800000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: née, not nay","msgtype":"m.text"},"ts":1464193761000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"marks the day TabAtkins became a spelling prescriptivist","msgtype":"m.emote"},"ts":1464193984000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"tbf, they are entirely different words, and I don't think common usage is against him","msgtype":"m.text"},"ts":1464194022000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"nor neigh (sound a horse makes)","msgtype":"m.text"},"ts":1464194159000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Oh, I agree - and it was good feedback for a non-native speaker. I just found it funny tho","msgtype":"m.text"},"ts":1464194191000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"I mean, (nay rust) means something else entirely.","msgtype":"m.text"},"ts":1464194294000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If we collectively started agreeing that née was spelled \"nay\", that would be fine. But currently we do distinguish the words.","msgtype":"m.text"},"ts":1464194326000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: ta","msgtype":"m.text"},"ts":1464194547000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: you might want to follow https://github.com/whatwg/html/issues/1177 and/or give feedback","msgtype":"m.text"},"ts":1464195390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks. Subscribed, but I don’t have more input to this.","msgtype":"m.text"},"ts":1464195544000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I agree that it sounds like HTML needs to specify a special case","msgtype":"m.text"},"ts":1464195605000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: what happens if we make it introduce an empty fragment? but I'd be curious as to quite what browsers do","msgtype":"m.text"},"ts":1464195772000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'd be surprised if they had an actual separate state for having a fragment beyond nullability","msgtype":"m.text"},"ts":1464195789000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Hello all! I'm trying to look at some XHR behaviours for implementing an API, and I'm a bit confused by which is the most up-to-date spec.","msgtype":"m.text"},"ts":1464202270000,"senderName":"scshunt","senderId":"scshunt@irc"},
{"content":{"body":"scshunt: https://xhr.spec.whatwg.org/","msgtype":"m.text"},"ts":1464202331000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: That spec lacks a lot of restrictions that browsers seem to implement, though","msgtype":"m.text"},"ts":1464202749000,"senderName":"scshunt","senderId":"scshunt@irc"},
{"content":{"body":"like preventing setting certain headers like Host or Expect","msgtype":"m.text"},"ts":1464202805000,"senderName":"scshunt","senderId":"scshunt@irc"},
{"content":{"body":"annevk: ^^^ ?","msgtype":"m.text"},"ts":1464202812000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"scshunt: that is defined…","msgtype":"m.text"},"ts":1464202961000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scshunt: step 5 of setRequestHeader","msgtype":"m.text"},"ts":1464203000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks! I missed it because it's a separate document :)","msgtype":"m.text"},"ts":1464203050000,"senderName":"scshunt","senderId":"scshunt@irc"},
{"content":{"body":"scshunt: XHR is a thin wrapper around Fetch basically","msgtype":"m.text"},"ts":1464203100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: ping","msgtype":"m.text"},"ts":1464206216000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: on mobile but what's up","msgtype":"m.text"},"ts":1464206384000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: streams question... I can write an issue up if you prefer... you might be able to just set me straight though","msgtype":"m.text"},"ts":1464206412000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Happy to try IRC","msgtype":"m.text"},"ts":1464206541000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ok, in the spec there is a note that while ReadableStreamTee() requires creating 3 functions, an impl could create a class to do it","msgtype":"m.text"},"ts":1464206576000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I don't see how that could work since pull() is not called with a `this`...","msgtype":"m.text"},"ts":1464206597000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: the impl would have to bind() the `this` which is not too different from creating a closure","msgtype":"m.text"},"ts":1464206624000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in costs","msgtype":"m.text"},"ts":1464206629000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I was wondering if pull() should get called with the underlyingSource set as its `this`","msgtype":"m.text"},"ts":1464206658000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think pull is called with this... PromiseInvokeOrNoop?","msgtype":"m.text"},"ts":1464206665000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yep, you are correct... thanks!","msgtype":"m.text"},"ts":1464206792000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1464206918000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if you have specific places in the spec you know that can be optimized... would love to have the list","msgtype":"m.text"},"ts":1464206989000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right now just implementing it pretty literally","msgtype":"m.text"},"ts":1464206997000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the other ones we did in chrome were a bit field for all the booleans and the state, and of course not implementing the queue with sizes by summing every time you ask for the total size","msgtype":"m.text"},"ts":1464207456000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I.e. keep a queue and keep a separate running size","msgtype":"m.text"},"ts":1464207459000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: thanks","msgtype":"m.text"},"ts":1464207566000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: is there a defined algorithm for \"Append to List\"?  I mean, I can use Array.push()","msgtype":"m.text"},"ts":1464207645000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"That's what it means yeah","msgtype":"m.text"},"ts":1464207711000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Internal array of course.)","msgtype":"m.text"},"ts":1464207729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1464207843000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: hmm, but we don't call cancel with PromiseInvokeOrNoop?","msgtype":"m.text"},"ts":1464208685000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: oh... @[[Cancel]] is defined as a method","msgtype":"m.text"},"ts":1464208727000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"nm","msgtype":"m.text"},"ts":1464208737000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm, the Worker and SharedWorker constructor definitions have an informative note saying \"Any same-origin URL will do\", but I don't see any formal spec language that actually enforces any kind of same origin requirement...","msgtype":"m.text"},"ts":1464218578000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"and firefox and chrome in fact don't agree on behavior for non same-origin urls here either...","msgtype":"m.text"},"ts":1464219077000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"ah, seems this was an intentional change in the html spec (by moving the check to fetch), but not anything that ever got implemented in chrome, and even firefox is inconsitent about it...","msgtype":"m.text"},"ts":1464219634000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"but that also means that now (according to the spec) a \"module\" shared worker with a cross-origin url will be shared between websites on all origins, as there are no further checks to only match against shared workers created from the same origin...","msgtype":"m.text"},"ts":1464219984000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"actually, it's even worse than that. According the the spec any website can connect to any running shared worker from any other origin, because any kind of origin checks aren't done if an existing worker with the same script url already exists...","msgtype":"m.text"},"ts":1464220258000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"files a bug...","msgtype":"m.emote"},"ts":1464220262000,"senderName":"Mek","senderId":"Mek@irc"}
]