[
{"content":{"body":"wanderview: sorry for being afk for the day","msgtype":"m.text"},"ts":1428624946000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: I don't really know why the promises cases take longer to settle, but I could guess that it's more work to JIT through all the extra stuff that's going on.","msgtype":"m.text"},"ts":1428624993000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: I agree that the async read() only on byobReader design would work. I don't think they should have the same method name though... same-named methods on similar classes should behave the same I think.","msgtype":"m.text"},"ts":1428625047000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: but I think it's unfair to say performance penalty, as discussed/benchmarked :)","msgtype":"m.text"},"ts":1428625084000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I have results that show a more significant perf penalty on mobile devices","msgtype":"m.text"},"ts":1428627288000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I was trying to understand the FF native results before posting to the issue, but this is what I have so far:  https://docs.google.com/spreadsheets/d/1rl6mbD2z1x1bgJLD6y9KJLYWjppB7BujfiWvUMjYTVs/edit?usp=sharing","msgtype":"m.text"},"ts":1428627320000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: bluebird promises are always at a penalty compared to sync on my nexus5... native promises are also worse than sync for as few as 32 chunks","msgtype":"m.text"},"ts":1428627364000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't have the results in there, but my firefoxos Flame is even worse (as its a lower spec'd phone)","msgtype":"m.text"},"ts":1428627396000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: btw, the ?chunks= stuff in my test don't work with chrome because it doesn't implement URLSearchParams part of URL spec... do you know of a good alternative?  I'd like to run the test there","msgtype":"m.text"},"ts":1428627498000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: also, I added a size= option to control the size of the chunks... so I can set size=1 to avoid mixing in GC pressure from the buffers","msgtype":"m.text"},"ts":1428627530000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"is anything blocking URLSearchParams? didn't see any mention of blockers on arv's bug. seems like it would be a good gsoc project","msgtype":"m.text"},"ts":1428627642000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: also a chunks=auto to run all those chunk sizes in my google doc","msgtype":"m.text"},"ts":1428627677000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or maybe too fast for gsoc, but a good starter project maybe","msgtype":"m.text"},"ts":1428627725000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I'm going to redo the google doc results with ?chunks=auto&size=1 for consistency","msgtype":"m.text"},"ts":1428627829000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hmm... I get different sync results when using native promise vs bluebird... probably from GC/CC differences... I think I will split sync out into a separate test","msgtype":"m.text"},"ts":1428628200000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not sure how you're doing sync tests at all with promises","msgtype":"m.text"},"ts":1428628261000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: its sync test, promise test, sync test, promise test, etc...  interleaved... I think objects left from promise runs are effecting sync runs due to GC","msgtype":"m.text"},"ts":1428628300000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"mm","msgtype":"m.text"},"ts":1428628313000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"*much* more stable results moving sync and promise tests into separate windows","msgtype":"m.text"},"ts":1428629672000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"actually... the test results were bogus... many of the results were being limited by setTimeout() clamping at 4ms","msgtype":"m.text"},"ts":1428634837000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"summarized my profiling results in the issue:  https://github.com/whatwg/streams/issues/320#issuecomment-91418297","msgtype":"m.text"},"ts":1428636698000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: what's the story behind the codepoints of windows-1252 that Unicode.org leaves unassigned getting mapped to controls in the Encoding Standard? Did all browsers already agree to do that instead of U+FFFD?","msgtype":"m.text"},"ts":1428648227000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"my new wordpress does have a valid rss feed but safari on iOS and OSX do not show the \"reader\" sign. any idea what might be wrong? http://mcnesium.com","msgtype":"m.text"},"ts":1428650028000,"senderName":"mcnesium","senderId":"mcnesium@irc"},
{"content":{"body":"hsivonen: several browsers at least, yes","msgtype":"m.text"},"ts":1428653458000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"goes back into hiding","msgtype":"m.emote"},"ts":1428653492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mathiasbynens: why recommend before </body> now that it uses a getter?","msgtype":"m.text"},"ts":1428663221000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: just the general best practice, since <script> blocks","msgtype":"m.text"},"ts":1428663502000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: k","msgtype":"m.text"},"ts":1428663556000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens: i found http://johndyer.name/native-browser-get-set-properties-in-javascript/","msgtype":"m.text"},"ts":1428663683000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: In IE8, `Object.defineProperty` only works on DOM objects, so that’s fine in this case. Not sure if it’s worthwhile to add IE < 8 support","msgtype":"m.text"},"ts":1428663778000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: yeah. maybe not. i can point to that in the blog post if people need IE6-7 support (or other old browsers with __defineGetter__)","msgtype":"m.text"},"ts":1428663988000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens: thanks for doing the polyfill","msgtype":"m.text"},"ts":1428664023000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is there some plan or API proposal for animation frame callbacks in workers?","msgtype":"m.text"},"ts":1428682847000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"for the cases like webgl in workers","msgtype":"m.text"},"ts":1428682869000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: as in, having worker-only canvas contexts?","msgtype":"m.text"},"ts":1428684212000,"senderName":"espadrine","senderId":"espadrine@irc"},
{"content":{"body":"there's this: https://wiki.whatwg.org/wiki/WorkerCanvas","msgtype":"m.text"},"ts":1428684313000,"senderName":"espadrine","senderId":"espadrine@irc"},
{"content":{"body":"no idea what state it is in","msgtype":"m.text"},"ts":1428684321000,"senderName":"espadrine","senderId":"espadrine@irc"},
{"content":{"body":"well, that is the canvas part, but I wonder if there is a plan to expose animation frame callbacks on worker side somehow","msgtype":"m.text"},"ts":1428684432000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: sounds a bit like the \"UI worker\" idea","msgtype":"m.text"},"ts":1428685616000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ask rick byers","msgtype":"m.text"},"ts":1428685665000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"#lazyirc if I dispatch a click event on a radio button or checkbox, that should be the same as .click()ing it, right? and .click() should trigger an event?","msgtype":"m.text"},"ts":1428690052000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess testing this myself is the easiest thing to do, instead of reading the specs","msgtype":"m.text"},"ts":1428690144000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Indeed. (To just testing it yourself, the specs are a rathole on this kind of thing usually.)","msgtype":"m.text"},"ts":1428690362000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic, click() triggers event, not the other way around","msgtype":"m.text"},"ts":1428692145000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Right, but triggering the event also checks the box","msgtype":"m.text"},"ts":1428692228000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't believe it should","msgtype":"m.text"},"ts":1428692425000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"smaug____, ^","msgtype":"m.text"},"ts":1428692427000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"click() does trigger the link...","msgtype":"m.text"},"ts":1428692647000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in practice implementations dispatch click event and do default handling during the dispathc","msgtype":"m.text"},"ts":1428692698000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"dispatch","msgtype":"m.text"},"ts":1428692701000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the spec has still the different model","msgtype":"m.text"},"ts":1428692707000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"per spec dispatching click event shouldn't change the checked state, IIRC","msgtype":"m.text"},"ts":1428692932000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nor follow <a href=\"foo\">","msgtype":"m.text"},"ts":1428692942000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but I think the web disagrees","msgtype":"m.text"},"ts":1428692956000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"click is one of the special cases","msgtype":"m.text"},"ts":1428692968000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"usually events must be trusted in order to trigger default action","msgtype":"m.text"},"ts":1428692983000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"blink has tons of issues with this","msgtype":"m.text"},"ts":1428692988000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic: it appears the native chrome promises clamp to 4ms delays like setTimeout... that seems like a pretty bad bug for promises","msgtype":"m.text"},"ts":1428708087000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: no waaaaayyyy","msgtype":"m.text"},"ts":1428708101000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I just made the defaults for the benchmark do the automated thing... so running the tests on chrome","msgtype":"m.text"},"ts":1428708115000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think benchmarkjs must be screwing us somehow... I trust it less :(","msgtype":"m.text"},"ts":1428708130000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: happy to fix it... but so far the data seems consistent to me","msgtype":"m.text"},"ts":1428708160000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I am probably going to have to push off working on the benchmark until the weekend/Monday... today is running out of hours","msgtype":"m.text"},"ts":1428708193000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm excited about this user-space microtask queue idea","msgtype":"m.text"},"ts":1428708210000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: np... I will be offline until Monday... getting on a plane and then family time","msgtype":"m.text"},"ts":1428708213000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: it will be interesting to see the case of the js microtask and a pure js closure per callback.... thats still something to GC, but avoids some of the native promise wackyness","msgtype":"m.text"},"ts":1428708267000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: the reason I say chrome native promises are clamping... the benchmark shows ~210 ops/sec for the sync case with only 1 chunk...","msgtype":"m.text"},"ts":1428708408000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: so my guess is benchmarkjs uses setTimeout and so the most async benchmarkjs cases you can run is 250 ops/sec...","msgtype":"m.text"},"ts":1428708471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yes, but the promise.resolve().then(() => deferred.resolve()); should prevent the clamping from occurring, no?","msgtype":"m.text"},"ts":1428708608000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"maybe we should try benchmark.js 2.0... jdalton indicated the sync deferred.resolve() is not permitted any more","msgtype":"m.text"},"ts":1428708641000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't really understand how setTimeout clamping works so I'm not sure ...","msgtype":"m.text"},"ts":1428708643000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I am feeling a desire to go back to your manual tests, but just run them in a loop","msgtype":"m.text"},"ts":1428708662000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if setTimeout() nests.. so setTimeout(() => setTimeout(() =>setTimeout()));...  if it nests 4 or 5 times it forces the delay to a minimum of 4ms","msgtype":"m.text"},"ts":1428708688000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"its in the spec","msgtype":"m.text"},"ts":1428708708000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think maybe in Chrome setTimeout() is just always clamped to 4ms","msgtype":"m.text"},"ts":1428708709000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I remember bugs","msgtype":"m.text"},"ts":1428708718000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"in Firefox the microtask schedule breaks the nesting behavior because it forces the stack back to nothing... I think chrome should do the same, but it does not","msgtype":"m.text"},"ts":1428708730000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1428708739000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1428708743000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"even with the clamping the benchmark is still useful to see the curve","msgtype":"m.text"},"ts":1428708796000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we just can't trust the ~210 values","msgtype":"m.text"},"ts":1428708803000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: I can also see that with chrome the CPU is not maxing out on the low tests... definitely the clamping","msgtype":"m.text"},"ts":1428709013000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I wonder if the perf penalty from promises really is GC of objects","msgtype":"m.text"},"ts":1428709128000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"chrome on android does do better with bluebird promises...","msgtype":"m.text"},"ts":1428709315000,"senderName":"wanderview","senderId":"wanderview@irc"}
]