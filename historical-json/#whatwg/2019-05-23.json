[
{"content":{"body":"encoding peoples, what is a nice web encoding I can specify that has the characteristic that some invalid UTF-8 will be valid in that encoding?","msgtype":"m.text"},"ts":1558572395000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"ideally one that's sort of ASCII-ish, because I need to be able to write a JS script that contains a multi-line comment that contains invalid UTF-8 bytes in it, and I'd rather not learn too much intricacy to do it","msgtype":"m.text"},"ts":1558572452000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I guess I don't *really* need that, I can just pick something that doesn't equal ASCII in the 00-7F range, can't I","msgtype":"m.text"},"ts":1558572702000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: I mean, most of the single byte encodings are valid for any byte sequence","msgtype":"m.text"},"ts":1558572963000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jwalden: e.g. Windows-1252","msgtype":"m.text"},"ts":1558572968000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(i.e., what ISO-8859-1/Latin1 is aliased to)","msgtype":"m.text"},"ts":1558572979000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: so I think Gecko is not correctly implementing the requirement that worker scripts be only UTF-8 based on code inspection, but for the life of me I can't get it to fail","msgtype":"m.text"},"ts":1558573015000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"specifically, I think we do the UTF-8 requirement as a \"hint charset\" that is applied only after BOM sniffing and content charset inspection (fairly sure from the HTTP header)","msgtype":"m.text"},"ts":1558573062000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"ISO-2022-JP, UTF-16BE, and UTF-16LE are the non-ASCII encodings supported, FWIW","msgtype":"m.text"},"ts":1558573070000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"so if I make the worker script contain *mostly* UTF-8 but put a UTF-8 encoding error in a comment, the script's text should be interpreted differently","msgtype":"m.text"},"ts":1558573100000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: well that sounds fun","msgtype":"m.text"},"ts":1558573105000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I swear I'm not even trying to fix this, I'm trying to do something else, but odds are if I push this to bz he's going to say \"why are we doing all this extra nonsense when workers are always UTF-8\" and hypothetical-bz seems right except practical testing says there isn't a problem and boo","msgtype":"m.text"},"ts":1558573162000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"(the original \"this\" being a largely unrelated fix that happens to touch DOM worker code)","msgtype":"m.text"},"ts":1558573179000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: https://github.com/web-platform-tests/wpt/tree/master/workers/semantics/encodings maybe?","msgtype":"m.text"},"ts":1558573211000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"004.worker.js seems to be this","msgtype":"m.text"},"ts":1558573263000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"we have that test in our tree...","msgtype":"m.text"},"ts":1558573281000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"https://wpt.fyi/results/workers/semantics/encodings/004.worker.html has it passing everywhere? (rejecting invalid UTF-8)","msgtype":"m.text"},"ts":1558573282000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh, wait, you think it's something more subtlely wrong","msgtype":"m.text"},"ts":1558573309000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"oh god, these are zcorpan's self-hosting Worker tests","msgtype":"m.text"},"ts":1558573376000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: if 004.worker.js.headers existed containing \"Content-Type: text/html; charset=windows-1252\" as its content my code-reading says we should fail it","msgtype":"m.text"},"ts":1558573384000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"jwalden: see 001.html/002.html, which do have this","msgtype":"m.text"},"ts":1558573394000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"assuming .headers support works the intuitive way","msgtype":"m.text"},"ts":1558573396000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"hrm","msgtype":"m.text"},"ts":1558573470000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I don't get it","msgtype":"m.text"},"ts":1558573475000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"our code looks nuts, but it passes that test","msgtype":"m.text"},"ts":1558573484000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"oh, that's why","msgtype":"m.text"},"ts":1558573530000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"is the expectation wrong?","msgtype":"m.text"},"ts":1558573540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Firefox is the only one to pass this","msgtype":"m.text"},"ts":1558573546000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"we pointlessly pass in a field that looks like it means something, but earlier in this function we nulled it out","msgtype":"m.text"},"ts":1558573549000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"so our code looks stupid but is not, at least in that manner","msgtype":"m.text"},"ts":1558573571000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"no, the test is right provided the spec says what you said","msgtype":"m.text"},"ts":1558573582000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"sorry -- not saying the test is wrong, I'm saying our code does a thing that *looked* like it would lead us astray, but if you look more carefully it is passing in an always-null value and so we end up using the hint charset always","msgtype":"m.text"},"ts":1558573659000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"I hadn't read your last comment before my last comment, and I was being paranoid given everywhere but Firefox fails it","msgtype":"m.text"},"ts":1558573737000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"specifically if you look here https://searchfox.org/mozilla-central/source/dom/workers/ScriptLoader.cpp#1134 we pass in |aLoadInfo.mChannel| which in https://searchfox.org/mozilla-central/source/dom/script/ScriptLoader.cpp#3108 is the second thing tested for picking an encoding...but if you scroll upward to https://searchfox.org/mozilla-central/source/dom/workers/ScriptLoader.cpp#1050 you...","msgtype":"m.text"},"ts":1558573803000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"...can see |aLoadInfo.mChannel| is definitely null, so either we pick up UTF-8 from the ForBOM test, or we would use the \"UTF-8\" hint which would get us UTF-8 too","msgtype":"m.text"},"ts":1558573804000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"there's a reason for this complexity because in the *general* case this function handles so-called classic scripts, but in the worker caller it's pointless","msgtype":"m.text"},"ts":1558573847000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"but there certainly is no reason the worker code should be passing in a field that is always null, rather than passing nullptr directly","msgtype":"m.text"},"ts":1558573873000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"\"this has been another scintillating episode of Gecko Guts with jwalden\"","msgtype":"m.text"},"ts":1558573903000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"who doesn't love browser code?","msgtype":"m.text"},"ts":1558573949000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"tries to remember what they were looking at before getting nerd sniped into this much more interesting drama","msgtype":"m.emote"},"ts":1558573972000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I got into all this by wanting to have a ScriptLoader::ConvertToUTF8, and there's enough noisy in the ConvertToUTF16 algorithm I could either template that up so both algorithms could be defined by one template function (...and some helpers), or I could define them separately with some algorithmic duplication possibly undesirably","msgtype":"m.text"},"ts":1558574086000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"for workers, simplifying the algorithm would probably be the right thing to do","msgtype":"m.text"},"ts":1558574101000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"except this ConvertToUTF8 may end up used outside workers, so I guess I don't know whether duplication or not is proper yet","msgtype":"m.text"},"ts":1558574126000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"https://paste.rs/poQ.sh for anyone who wants to see what my testcase looks like (loaded in a server where ^headers^ is like the .headers thing in the wpt tests, looks like) -- should see replacement-characters, Firefox displays them, other browsers display &yuml;","msgtype":"m.text"},"ts":1558574590000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"hah, workers/semantics/encodings/001.html is fun","msgtype":"m.text"},"ts":1558606031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"A similar one with <script> and Worker loading the same thing might lead to surprises too","msgtype":"m.text"},"ts":1558606052000,"senderName":"annevk","senderId":"annevk@irc"}
]