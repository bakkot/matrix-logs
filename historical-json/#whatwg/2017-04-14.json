[
{"content":{"body":"Why is the WebAssembly shipping bar so low? Do you know rbyers?","msgtype":"m.text"},"ts":1492144052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not sure but I think the state of things is that it’s already implemented across UAs at some relatively high level of interoperability","msgtype":"m.text"},"ts":1492144375000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"they have common test suite and I think implementors have been working against that and I refining it","msgtype":"m.text"},"ts":1492144407000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so it seems like the implementations are pretty mature at this point","msgtype":"m.text"},"ts":1492144441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that said I’m sure there are some interop issues there still and also spec issues which have not gotten as much outside scrutiny as they should have","msgtype":"m.text"},"ts":1492144483000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I hope that is true for the JS API too","msgtype":"m.text"},"ts":1492144503000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1492144587000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not sure it is","msgtype":"m.text"},"ts":1492144606000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Bit skeptical though, since the design is sketch notes, working that out into an algorithm usually results in more choices to be made","msgtype":"m.text"},"ts":1492144614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that I think they may not even have tests for","msgtype":"m.text"},"ts":1492144621000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the tests they do have are https://github.com/WebAssembly/spec/tree/master/test/core","msgtype":"m.text"},"ts":1492144636000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: did you hear back from plinss about the problem with the rel=serviceworker dfn?","msgtype":"m.text"},"ts":1492148842000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I see it’s still failing when I run bikeshed","msgtype":"m.text"},"ts":1492148867000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"He's in Okinawa on vacation right now, but will check on it as soon as he can.","msgtype":"m.text"},"ts":1492148883000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1492149181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(lucky him, diving I assume)","msgtype":"m.text"},"ts":1492149195000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks 🐠","msgtype":"m.text"},"ts":1492149267000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like https://caniuse.com/ is loading a lot faster","msgtype":"m.text"},"ts":1492149885000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe he got some help on tweaking the backend","msgtype":"m.text"},"ts":1492149905000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://www.ssllabs.com/ssltest/analyze.html?d=caniuse.com = 🄲","msgtype":"m.text"},"ts":1492151277000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems he needs to disable SSL3 and enable TLS1.2","msgtype":"m.text"},"ts":1492151396000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, it’s progress","msgtype":"m.text"},"ts":1492151409000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: so yeah I see:","msgtype":"m.text"},"ts":1492161415000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> There is a possible compatibility risk, as while all major browsers have","msgtype":"m.text"},"ts":1492161420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"implemented WebAssembly, and have agreed in principle and form to the","msgtype":"m.text"},"ts":1492161420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"proposed API, none of have yet implemented it.","msgtype":"m.text"},"ts":1492161420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"There is a strong likelihood they will, given the feature is desirable for","msgtype":"m.text"},"ts":1492161420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"optimum performance when doing streaming compilation of WebAssembly.","msgtype":"m.text"},"ts":1492161420000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"However, there is some risk the feature may change slightly as it is","msgtype":"m.text"},"ts":1492161422000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"standardized more rigorously.","msgtype":"m.text"},"ts":1492161425000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1492161427000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so it does seem premature to ship, given that","msgtype":"m.text"},"ts":1492161452000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"IMHO","msgtype":"m.text"},"ts":1492161461000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"JakeA: await (await fetch(\"data:,3\")).json() seems to work","msgtype":"m.text"},"ts":1492170747000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: having said that, it's a character longer than fetch(\"data:,3\").then(r => r.json())","msgtype":"m.text"},"ts":1492170800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: that's kinda a failure of the await syntax","msgtype":"m.text"},"ts":1492170825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I haven't been following wasm in great detail but what Mike said matches my big picture understanding.  There is a ton of collaboration and interop testing between the 4 engines. Can you point me at some specific concerns?","msgtype":"m.text"},"ts":1492171147000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"MikeSmith: Which API are you taking about?  The WebAssembly JS API is implemented and shipped in Chrome and Firefox.","msgtype":"m.text"},"ts":1492171218000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: that may be true, but only fairly recently did it get some architectural review and such, let alone detailed review (which isn't really possible given they are API sketches and not formal definitions)","msgtype":"m.text"},"ts":1492171331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, but await (await fetch(\"data:,3\")).json() reads badly to me. For docs, I tend to split it into two lines. const response = await fetch(url); const data = await response.json()","msgtype":"m.text"},"ts":1492171383000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: but in my own code I'd probably just do: await fetch(url).then(r => r.json())","msgtype":"m.text"},"ts":1492171417000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it's probably actually shorter btw, since you'd need a second .then to emulate the await await?","msgtype":"m.text"},"ts":1492171426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so no failure after all, just my failure","msgtype":"m.text"},"ts":1492171451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess .then is still handy for one-liners, even if there's an await at the start","msgtype":"m.text"},"ts":1492171527000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I dunno, nested await looks okayish to me","msgtype":"m.text"},"ts":1492171556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe I'm just not used to it","msgtype":"m.text"},"ts":1492172531000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: Architectural review definitely could have gone better and earlier.  For my part I screwed up in the intent to ship by not asking about this (eg. I should have at least asked about a TAG review).","msgtype":"m.text"},"ts":1492172743000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"annevk: you're working on enabling a service worker opening a nested dedicated worker?","msgtype":"m.text"},"ts":1492176590000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm mostly working on shared memory integration","msgtype":"m.text"},"ts":1492176652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1492176662000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: as a side effect I had to refine worker ownership, which should help with that, and also nested shared workers","msgtype":"m.text"},"ts":1492176709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, I thought of a quirk with nested workers in service workers... I'll just stick it in a github issue","msgtype":"m.text"},"ts":1492176731000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: my last comment in that issue summarizes what still needs to be done","msgtype":"m.text"},"ts":1492176742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: for https://github.com/whatwg/html/issues/411#issuecomment-293272882 I filed an issue for 1, 3 we should maybe do separately, so that would leave 2? Not sure there's anything else","msgtype":"m.text"},"ts":1492179953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: based on my comment about stashing a worker reference on the about:blank global... I bet its just nto going to work as expected for about:blank replacement today","msgtype":"m.text"},"ts":1492180059000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think we could write a test, but I guess we should define how we want it to work in that case","msgtype":"m.text"},"ts":1492180206000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Best to first figure out what happens","msgtype":"m.text"},"ts":1492186180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Nah, nested await looks bad to me too - non-obvious precisely what the bounds are of each. Gotta spend some time thinking about what's going on before I can tell that it's right.","msgtype":"m.text"},"ts":1492186868000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: https://www.shellcheck.net/ is very good","msgtype":"m.text"},"ts":1492206239000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Does it just report \"Error: you're still using a shell language. Switch to Python or something you noob.\"?","msgtype":"m.text"},"ts":1492206267000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1492206282000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"would be fun if it did","msgtype":"m.text"},"ts":1492206293000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though less useful","msgtype":"m.text"},"ts":1492206301000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway had never used it before but been running on it on a few things now and been surprised at how much it finds","msgtype":"m.text"},"ts":1492206389000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it’s very clever","msgtype":"m.text"},"ts":1492206396000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and thorough","msgtype":"m.text"},"ts":1492206405000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"now I just want to have it integrated into my vim","msgtype":"m.text"},"ts":1492206428000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh and I find https://github.com/koalaman/shellcheck#user-content-in-your-editor *supported as an integrated linter in major editors*","msgtype":"m.text"},"ts":1492206470000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh cool, glad you're finding it useful. My experience was that it mostly complained about unquoted variables, and a few instances of `` vs. $(); I didn't see any \"very clever\" and \"surprised how much it finds\" personally :)","msgtype":"m.text"},"ts":1492206472000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess the move from cat to < was pretty clever","msgtype":"m.text"},"ts":1492206487000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah it depends on how complicated what you feed to it is","msgtype":"m.text"},"ts":1492206526000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but when I tried that find . -exec for the HTML checker with it, it really made me think more about the quoting differences and how I was referencing the filename","msgtype":"m.text"},"ts":1492206616000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"specifically in that case, this check:","msgtype":"m.text"},"ts":1492206671000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/koalaman/shellcheck/wiki/SC2156","msgtype":"m.text"},"ts":1492206673000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"doing find . -name '*.mp3' -exec sh -c 'i=\"{}\"; sox \"$i\" \"${i%.mp3}.wav\"' \\;","msgtype":"m.text"},"ts":1492206685000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"vs","msgtype":"m.text"},"ts":1492206689000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"find . -name '*.mp3' -exec sh -c 'i=\"$1\"; sox \"$i\" \"${i%.mp3}.wav\"' _ {} \\;","msgtype":"m.text"},"ts":1492206694000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the way the error messages link to those wiki pages with the details is pretty nice too","msgtype":"m.text"},"ts":1492206805000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tobie: Am I right that the regex for biblio keys is all alphanumerics, plus \"-_+.\"?","msgtype":"m.text"},"ts":1492208624000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"tobie: In that case, you can significantly simplify the regex to just `[\\\\w+.-]`.  \\w does all alphanumerics and underscore, there's no need to escape the period, and no need to escape the dash if you put it at the end.","msgtype":"m.text"},"ts":1492209008000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For a field in an options dictionary, does https://w3ctag.github.io/design-principles/#casing-rules imply I should propose \"public_key\" instead of \"publickey\", \"publicKey\", or \"public-key\"?","msgtype":"m.text"},"ts":1492213276000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Nah, I think that falls in the \"attribute\" bucket, wanting camelCase.","msgtype":"m.text"},"ts":1492213360000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Ok, thanks.","msgtype":"m.text"},"ts":1492213372000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"(I'm unclear why the JSON bucket recommends underscores.)","msgtype":"m.text"},"ts":1492213373000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]