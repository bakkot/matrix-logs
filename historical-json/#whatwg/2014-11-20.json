[
{"content":{"body":"how weird","msgtype":"m.text"},"ts":1416441630000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: If you have a couple minutes maybe you can help me understand something about why annevk set up the URL test harness the way he did","msgtype":"m.text"},"ts":1416447728000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if you look at https://github.com/w3c/web-platform-tests/blob/master/url/a-element.html#L25 and https://github.com/w3c/web-platform-tests/blob/master/url/a-element.html#L38","msgtype":"m.text"},"ts":1416447742000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rather than just doing var url = new URL(expected.input, expected.base), it's first creating an an <a> element then setting the href attribute on it, then checking the URL attributes from that","msgtype":"m.text"},"ts":1416447910000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I know there's a reason why it's necessary to do it that way in a test like this -- instead of just using new URL(...) -- and I should rightly already understand what the reason is, but I'll admit that I don'","msgtype":"m.text"},"ts":1416448018000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(I would ask annevk but I'm assuming he's asleep right now)","msgtype":"m.text"},"ts":1416448039000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the actual immedidate problem I'm trying to solve right now is, for tests where parsing of the URL is expected to fail, I want the test to actually recognize that it's failed in a spec-conformant way","msgtype":"m.text"},"ts":1416448156000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"...which is, per https://url.spec.whatwg.org/#constructors that calling new URL(...) with it should throw","msgtype":"m.text"},"ts":1416448224000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"a TypeError exception","msgtype":"m.text"},"ts":1416448251000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"even with the way that the test harness is set up (using a[href]) it should still fail per https://html.spec.whatwg.org/multipage/infrastructure.html#resolve-a-url but I can't tell from that how/where I would be able to catch the failure in that case","msgtype":"m.text"},"ts":1416448547000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... and further, from the relevant referenced part of URL spec for this (non-constructor) case, the URL spec says \"return failure\" but I don't know how to test that","msgtype":"m.text"},"ts":1416448825000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: I think at the time it was first implemented in gecko as mozRequestAnimationFrame there wasn't any formal spec yet http://robert.ocallahan.org/2010/08/mozrequestanimationframe_14.html (after it was originally proposed by roc in http://robert.ocallahan.org/2009/07/progress_01.html). I'm pretty sure it was never formally specced out anywhere before heycam first wrote it up (http://web.archive.org/","msgtype":"m.text"},"ts":1416455668000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"web/20110228051128/http://people.mozilla.org/~cmccormack/anim-timing/Overview.html is the earliest version that hasn't disappeared)","msgtype":"m.text"},"ts":1416455674000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://web.archive.org/web/20110228051128/http://people.mozilla.org/~cmccormack/anim-timing/Overview.html","msgtype":"m.text"},"ts":1416455723000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what's the context?","msgtype":"m.text"},"ts":1416456191000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"MikeSmith: my guess is that not all browsers implement URL","msgtype":"m.text"},"ts":1416456462000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"roc: comment from Domenic earlier, \"was rAF specced elsewhere before?\" http://krijnhoetmer.nl/irc-logs/whatwg/20141120#l-18 following Hixie saying even earlier, \"ok rAF is specced in HTML now\" http://krijnhoetmer.nl/irc-logs/whatwg/20141119#l-927","msgtype":"m.text"},"ts":1416456649000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh i missed Domenic's comment","msgtype":"m.text"},"ts":1416456702000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ah right","msgtype":"m.text"},"ts":1416456710000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"yeah rAF was specced in some w3c spec","msgtype":"m.text"},"ts":1416456710000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sorta-kinda","msgtype":"m.text"},"ts":1416456715000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"the editors asked me to move it to html","msgtype":"m.text"},"ts":1416456715000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/RequestAnimationFrame/Overview.html","msgtype":"m.text"},"ts":1416456729000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so we could integrate it with the event loop","msgtype":"m.text"},"ts":1416456732000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh I guess maybe Domenic maybe didn't know about that other spec at all (I thought he was asking if there was something that came before that spec)","msgtype":"m.text"},"ts":1416456793000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: ping","msgtype":"m.text"},"ts":1416456808000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"yo","msgtype":"m.text"},"ts":1416456901000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I was just following the redirects for the dev spe","msgtype":"m.text"},"ts":1416457242000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"spec","msgtype":"m.text"},"ts":1416457244000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"but they lead nowhere :/","msgtype":"m.text"},"ts":1416457250000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"Hixie: 404 https://html.spec.whatwg.org/dev-index","msgtype":"m.text"},"ts":1416457276000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"yeah, the generator is broken","msgtype":"m.text"},"ts":1416457402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's some github issue where someone was going to describe exactly what i need to implement iirc","msgtype":"m.text"},"ts":1416457419000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"given a specific spec for what to implement i can get this done in a few days","msgtype":"m.text"},"ts":1416457450000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but i don't know what we need","msgtype":"m.text"},"ts":1416457458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"are you talking about the one that we chatted about?","msgtype":"m.text"},"ts":1416457466000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"maybe?","msgtype":"m.text"},"ts":1416457479000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wasn't only you","msgtype":"m.text"},"ts":1416457484000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://github.com/benschwarz/developers.whatwg.org/issues/90","msgtype":"m.text"},"ts":1416457500000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"that's the one!","msgtype":"m.text"},"ts":1416457551000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"benschwarz: thanks for the good karma at cssconf.asia","msgtype":"m.text"},"ts":1416458886000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: <3","msgtype":"m.text"},"ts":1416458949000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"benschwarz: and at the risk of stating the obvious I didn't have anything to do with the choice of speakers for the http://css.w3ctech.com/ event I mentioned in my twitter reply :-)","msgtype":"m.text"},"ts":1416459014000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1416459031000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"benschwarz: I'll tell them they should have you speak there instead next time","msgtype":"m.text"},"ts":1416459044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"SGTM!","msgtype":"m.text"},"ts":1416459052000,"senderName":"benschwarz","senderId":"benschwarz@irc"},
{"content":{"body":"Hixie: maybe it'd be good to have https://whatwg.org/style/specification in github somewhere","msgtype":"m.text"},"ts":1416463181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie: in https://github.com/whatwg/resources.whatwg.org I would think","msgtype":"m.text"},"ts":1416463193000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: yeah, probably","msgtype":"m.text"},"ts":1416465004000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"MikeSmith: I used <a> because new URL() does not have universal support and we need to test <a> too","msgtype":"m.text"},"ts":1416476594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: it would be good to also run them through new URL() though","msgtype":"m.text"},"ts":1416476609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, yeah today I wrote up a separate test using new URL(), so I'll make a PR for that later","msgtype":"m.text"},"ts":1416476888000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: cool","msgtype":"m.text"},"ts":1416476907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: for URLs that are expected to fail parsing, it checks for TypeError with the testharness.js assert_throws thing","msgtype":"m.text"},"ts":1416477120000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I notice that blink still throws SyntaxError instead; filed a blink bug","msgtype":"m.text"},"ts":1416477214000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm. https://github.com/domenic/Array.prototype.includes/commit/4b6b9534582cb7991daea3980c26a34af0e76c6c","msgtype":"m.text"},"ts":1416479220000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"bad idea to change DOMTokenList#contains i guess?","msgtype":"m.text"},"ts":1416479235000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Really","msgtype":"m.text"},"ts":1416480261000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"We could add an alias, but lets see if this new name sticks first https://twitter.com/jdalton/status/535249955435601924","msgtype":"m.text"},"ts":1416482487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders if requestFullscreen() should work when element is in shadow dom","msgtype":"m.emote"},"ts":1416485265000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"\"array prototype includes\" OR \"string prototype includes\" -> 148","msgtype":"m.text"},"ts":1416486410000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"array prototype includes\" OR \"string prototype includes\" -> 5,296","msgtype":"m.text"},"ts":1416486418000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Array.prototype[\"∋\"]","msgtype":"m.text"},"ts":1416486964000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: do you have a reference for \"One of A and B\" is better than \"One of A or B\"?","msgtype":"m.text"},"ts":1416488848000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: https://github.com/slightlyoff/ServiceWorker/pull/394#issuecomment-63761704 could use it","msgtype":"m.text"},"ts":1416488856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: thanks for that","msgtype":"m.text"},"ts":1416489102000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not even sure that's true. Did I say that before? :)","msgtype":"m.text"},"ts":1416490282000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: nah, just wondering","msgtype":"m.text"},"ts":1416490300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"And X is one of A, B, or C\" or \"And X is one of A, B, and C\"","msgtype":"m.text"},"ts":1416490330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the latter reads better to me...","msgtype":"m.text"},"ts":1416490342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the first reads better","msgtype":"m.text"},"ts":1416490387000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the first definitely reads better","msgtype":"m.text"},"ts":1416490441000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Hixie: what should i do with the timestamp?","msgtype":"m.text"},"ts":1416492056000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hmm, if a script scrolls the viewport twice in the same script, a single scroll event is fired. if a script scrolls the viewport then an element, a scroll event is fired first on document then on the element. flipping the order flips the order of the events","msgtype":"m.text"},"ts":1416493785000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Object.observe on DOM entities, without any intermediate object, anyone?","msgtype":"m.text"},"ts":1416493828000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: ?","msgtype":"m.text"},"ts":1416493906000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, I can't just do a Object.observe on say a input element, right?","msgtype":"m.text"},"ts":1416493996000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"yes, there is MutationObserver....but...","msgtype":"m.text"},"ts":1416494143000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: I feel like we had this discussion before","msgtype":"m.text"},"ts":1416495776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"did we! annevk definitely not me.","msgtype":"m.text"},"ts":1416495917000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: maybe not","msgtype":"m.text"},"ts":1416496123000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hemanth: http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Aug/0176.html is relevant","msgtype":"m.text"},"ts":1416496129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I actually think we could maybe make this work through my IDL internal slots proposal","msgtype":"m.text"},"ts":1416496148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Remember that it doesn't work out-of-the-box for getters.....hmm","msgtype":"m.text"},"ts":1416496233000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"But if it's not a DOM object, and has getter, it would work fine...right?","msgtype":"m.text"},"ts":1416496263000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27381 to explore that idea","msgtype":"m.text"},"ts":1416496287000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hemanth: note that even with that you still need MutationObserver for actual DOM changes","msgtype":"m.text"},"ts":1416496375000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hemanth: but not for <input>.value changes","msgtype":"m.text"},"ts":1416496387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(which is an object change, and not a tree change)","msgtype":"m.text"},"ts":1416496403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: I would appreciate prioritization of internal slots","msgtype":"m.text"},"ts":1416496445000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, gave a +1 :)","msgtype":"m.text"},"ts":1416496528000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: heh, this is not the IETF, but thanks","msgtype":"m.text"},"ts":1416496557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh heh ^_^","msgtype":"m.text"},"ts":1416496573000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"hemanth: and thanks for bringing this subject again, it was rather timely as last Monday we came up with being more formal about internal slots, seems it might have some nice side effects as I was hoping for","msgtype":"m.text"},"ts":1416496840000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, hoping for the best...","msgtype":"m.text"},"ts":1416497010000,"senderName":"hemanth","senderId":"hemanth@irc"},
{"content":{"body":"annevk: I'm still missing why you'd want to prioritize slots ?","msgtype":"m.text"},"ts":1416497139000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"would that help spec writing?","msgtype":"m.text"},"ts":1416497146000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(if so, that is a good reason :) )","msgtype":"m.text"},"ts":1416497157000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yes, and it would address a bunch of ambiguous cases now","msgtype":"m.text"},"ts":1416497166000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders which ambiguous cases","msgtype":"m.emote"},"ts":1416497183000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: e.g. we often talk about the value of a certain attribute, while we should be talking about the value of the internal slot it represents","msgtype":"m.text"},"ts":1416497187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, those are just spec bugs","msgtype":"m.text"},"ts":1416497202000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I mean, vague language in them","msgtype":"m.text"},"ts":1416497211000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: because attributes have no values, they have a getter and a setter, and we don't want to invoke those because they could be overridden by script","msgtype":"m.text"},"ts":1416497214000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: yeah, vague language is sometimes known as ambiguous","msgtype":"m.text"},"ts":1416497229000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1416497236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: and it will help defining creation of objects and their associated objects","msgtype":"m.text"},"ts":1416497275000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: e.g. that if you create a Document object, you also create a DOMImplementation object, what Realm they're both associated with, etc. without language required from the specification","msgtype":"m.text"},"ts":1416497313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: and for the self-hosting crowd it will make it much clearer what the expected internal representation of an object is supposed to be","msgtype":"m.text"},"ts":1416497370000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: https://dvcs.w3.org/hg/csswg/rev/1e907e3ac50c resize and scroll events; MediaQueryList still to be done.","msgtype":"m.text"},"ts":1416497503000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: so what does a slot actually mean","msgtype":"m.text"},"ts":1416497536000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in which case a slot means the object slot points to is in the same realm as the owner of the slot?","msgtype":"m.text"},"ts":1416497554000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: no","msgtype":"m.text"},"ts":1416497571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: a slot just holds a value","msgtype":"m.text"},"ts":1416497577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1416497586000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so where does it help with document.implementation Realm ?","msgtype":"m.text"},"ts":1416497597000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: but when IDL needs to create an object, it can look through the object's associated slots to discover if any associated objects need to be created","msgtype":"m.text"},"ts":1416497601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so need to be careful in the specs to say which all properties are supposed to be created when the object itself is created","msgtype":"m.text"},"ts":1416497642000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah, ideally all through IDL","msgtype":"m.text"},"ts":1416497696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or all the none-nullable attributes without [NotSlot] would be implicitly created?","msgtype":"m.text"},"ts":1416497697000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: that's my current idea, with default values if they have any set","msgtype":"m.text"},"ts":1416497722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, default values are like true/false etc","msgtype":"m.text"},"ts":1416497740000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"do those even really belong to a Realm","msgtype":"m.text"},"ts":1416497751000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: no those don't, but it's still useful","msgtype":"m.text"},"ts":1416497794000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: it removes the need for defining things like \"canceled flag\" and such","msgtype":"m.text"},"ts":1416497807000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1416497818000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"just hoping the specs don't end up looking like Promise spec and such","msgtype":"m.text"},"ts":1416497845000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which are hard to read","msgtype":"m.text"},"ts":1416497856000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think what's hard to read depends on what you're used to. But if you're used to IDL this would actually move even more logic into IDL, have less prose, and align specifications to be more similar in terms of object descriptions","msgtype":"m.text"},"ts":1416497937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"indeed, idl defining the default behavior sounds good","msgtype":"m.text"},"ts":1416497976000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm just worried about the text","msgtype":"m.text"},"ts":1416497983000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: \"the text\"?","msgtype":"m.text"},"ts":1416498003000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: prose, text, whatever you call it","msgtype":"m.text"},"ts":1416498045000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the non-idl part :)","msgtype":"m.text"},"ts":1416498053000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"just have capitalized text for implicit interface member variables","msgtype":"m.text"},"ts":1416498104000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(why they should be called slots?)","msgtype":"m.text"},"ts":1416498118000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and use those in the text","msgtype":"m.text"},"ts":1416498125000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"something like that","msgtype":"m.text"},"ts":1416498140000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"We call them slots because that's the established term from ECMAScript","msgtype":"m.text"},"ts":1416498159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And the idea is to use [[slot]] because that's the established convention","msgtype":"m.text"},"ts":1416498178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think we should try to be different from ECMAScript. It'll help people understand what they are about better","msgtype":"m.text"},"ts":1416498227000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"[[]] is in ecma specs, not in w3c/whatwg  specs","msgtype":"m.text"},"ts":1416498242000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if we can create easier to read specs, we should","msgtype":"m.text"},"ts":1416498254000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I recommend talking to Domenic about changing that style","msgtype":"m.text"},"ts":1416498299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why","msgtype":"m.text"},"ts":1416498404000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Because he might be able to influence it, if anyone","msgtype":"m.text"},"ts":1416498428000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, I hope I can influence how specs using webidl will be written ;)","msgtype":"m.text"},"ts":1416498455000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Domenic doesn't seem to like webidl anyway","msgtype":"m.text"},"ts":1416498465000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ES uses overly verbose \"the [[x]] internal slot of y\" but we can shorten to \"x@[[y]]\" which should help.","msgtype":"m.text"},"ts":1416500404000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"A few other tweaks like https://streams.spec.whatwg.org/#conventions and more can be used to improve readability while still maintaining ES spec level precision. (And those are just a starting point.)","msgtype":"m.text"},"ts":1416500507000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I use [[foo]] in the Font Loading spec, doesn't seem too hard to read http://dev.w3.org/csswg/css-font-loading/#fontface-interface","msgtype":"m.text"},"ts":1416500780000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I missed that Accept-Charset has now been removed from WebKit and Chromium as well","msgtype":"m.text"},"ts":1416502982000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"User-Agent and Accept are still bloated","msgtype":"m.text"},"ts":1416503018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: imho slots is a poor way to describe what's going on","msgtype":"m.text"},"ts":1416504101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: it implies that something could have slots from two different classes and act like both","msgtype":"m.text"},"ts":1416504114000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zcorpan: ignore the timestamp, probably","msgtype":"m.text"},"ts":1416504124000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'm not sure what you're saying","msgtype":"m.text"},"ts":1416504129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: slots is exactly what is happening under the hood","msgtype":"m.text"},"ts":1416504137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: under the hood there are wrappers for C++ classes","msgtype":"m.text"},"ts":1416504154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes, IDL objects that have variables (\"slots\") that hold IDL values","msgtype":"m.text"},"ts":1416504193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1416504209000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's no such thing as an IDL object or IDL value in the real world :-)","msgtype":"m.text"},"ts":1416504237000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"those are just exposition","msgtype":"m.text"},"ts":1416504242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there are real JS objects, there are real C++ objects","msgtype":"m.text"},"ts":1416504255000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there are JS objects that wrap C++ objects","msgtype":"m.text"},"ts":1416504266000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1416504317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in spec land we call the latter IDL thingies","msgtype":"m.text"},"ts":1416504331000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in Servo they're typically backed by some Rust","msgtype":"m.text"},"ts":1416504349000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: it sounds like you're confusing slots with branding","msgtype":"m.text"},"ts":1416504542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: perhaps","msgtype":"m.text"},"ts":1416504546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i have no idea what branding is","msgtype":"m.text"},"ts":1416504677000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://tools.ietf.org/html/draft-davies-idntables ...","msgtype":"m.text"},"ts":1416504713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my point is that you can't have an object that has both a Promise's slots and an ArrayBuffer's slots. or an HTMLElement's slots and a WebSocket's slots.","msgtype":"m.text"},"ts":1416504728000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and therefore slots are a poor way to explain what's going on","msgtype":"m.text"},"ts":1416504738000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"because there's nothing implicit in the definition of slots that would prevent that","msgtype":"m.text"},"ts":1416504751000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and indeed you can totally imagine someone speccing an object that has both a Promise's slots and an ArrayBuffer's slots.","msgtype":"m.text"},"ts":1416504772000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in other news, does anyone know of a case where we invoke the HTML fragment parsing algorithm without a context node?","msgtype":"m.text"},"ts":1416504785000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"In this proposal they would be scoped to the object","msgtype":"m.text"},"ts":1416504791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what does that mean?","msgtype":"m.text"},"ts":1416504801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That the slot represents the private state of the object","msgtype":"m.text"},"ts":1416504825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if it's private, why do we need to document it?","msgtype":"m.text"},"ts":1416504936000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I explained this in the bug","msgtype":"m.text"},"ts":1416505247000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and in this channel","msgtype":"m.text"},"ts":1416505252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if http://www.bbc.com/news/technology-30121159 will help in the WebRTC requiring TLS discussion","msgtype":"m.text"},"ts":1416505402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't see anything in the bug that explains _why_ you want this","msgtype":"m.text"},"ts":1416505422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you just say it should exist","msgtype":"m.text"},"ts":1416505426000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"assuming you mean https://www.w3.org/Bugs/Public/show_bug.cgi?id=27354 ?","msgtype":"m.text"},"ts":1416505434000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, dunno about \"slots\", but being cleared about the internal state would be nice","msgtype":"m.text"},"ts":1416505448000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"clearer","msgtype":"m.text"},"ts":1416505454000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"clearer how?","msgtype":"m.text"},"ts":1416505486000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the current state of specs seems pretty clear to me","msgtype":"m.text"},"ts":1416505494000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there an example of what's not clear that i could look at?","msgtype":"m.text"},"ts":1416505503000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think having types could be useful when first reading a spec","msgtype":"m.text"},"ts":1416505548000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: the main driver is defining the associated Realm of objects, and better defining how objects are created in general","msgtype":"m.text"},"ts":1416505570000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, realms in general are a mistake","msgtype":"m.text"},"ts":1416505579000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so...","msgtype":"m.text"},"ts":1416505582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: they're just another name for the window object","msgtype":"m.text"},"ts":1416505589000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so...","msgtype":"m.text"},"ts":1416505596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no, they're not","msgtype":"m.text"},"ts":1416505600000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and they fail around document.domain","msgtype":"m.text"},"ts":1416505610000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"What do you mean, fail?","msgtype":"m.text"},"ts":1416505623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the vat/realm/global modal doesn't match the web's security model","msgtype":"m.text"},"ts":1416505650000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And how are they not another name for the global object?","msgtype":"m.text"},"ts":1416505654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nobody is talking vats","msgtype":"m.text"},"ts":1416505661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"global objects and realms are not the same thing, just look in the ES spec","msgtype":"m.text"},"ts":1416505675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"This is just about cases such as window2.Document.prototype.createElement.call(window3.document, ...) being run in window1","msgtype":"m.text"},"ts":1416505701000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And what that means for the Element that is created and its associated objects","msgtype":"m.text"},"ts":1416505720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: afaik Realm is just some bookkeeping object for a global and they're 1:1","msgtype":"m.text"},"ts":1416505798000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Per http://people.mozilla.org/~jorendorff/es6-draft.html#sec-code-realms that looks to be true","msgtype":"m.text"},"ts":1416505855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so in your understand what is a global environment record ?","msgtype":"m.text"},"ts":1416505875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: properties not on the global object but nevertheless in scope","msgtype":"m.text"},"ts":1416506052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you're saying JS has three objects that are always 1:1:1 ?","msgtype":"m.text"},"ts":1416506094000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: afaict","msgtype":"m.text"},"ts":1416506199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah, i go back to, \"realms in general are a mistake\". We don't need three objects here. We only need one. In any case, we don't need to define anything to do with realms if they're 1:1 with globals, we just have to define the associated globals. And that's not a problem that requires any new IDL to solve as far as I can tell.","msgtype":"m.text"},"ts":1416506208000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: bz and I reached a different conclusion","msgtype":"m.text"},"ts":1416506311000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"apparently; that's why i'm trying to find out why :-)","msgtype":"m.text"},"ts":1416506339000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but you keep just saying \"i explained it already\" without explaining it :-)","msgtype":"m.text"},"ts":1416506350000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: are you subscribed to public-script-coord?","msgtype":"m.text"},"ts":1416506433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't follow any of the w3c lists anymore, they're full of crazy","msgtype":"m.text"},"ts":1416506447000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: we had an email exchange there and based on that filed bugs","msgtype":"m.text"},"ts":1416506450000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: if I have to explain every decision we come to on W3C lists again to you, I'm going to be seriously annoyed","msgtype":"m.text"},"ts":1416506471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems like you already are :)","msgtype":"m.text"},"ts":1416506489000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, it's not the first time","msgtype":"m.text"},"ts":1416506507000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well  if you keep making decisions that affect me without my input, I'm going to be seriously annoyed too :-)","msgtype":"m.text"},"ts":1416506510000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but here all i'm asking for is a pointer, if there is one","msgtype":"m.text"},"ts":1416506521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i did read the bug and it had nothing","msgtype":"m.text"},"ts":1416506528000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/thread.html#msg156","msgtype":"m.text"},"ts":1416506544000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: is what the bug pointed to","msgtype":"m.text"},"ts":1416506550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah, yes, i did actually read the start of that thread when it happened, but it wasn't going anywhere useful","msgtype":"m.text"},"ts":1416506618000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I copy you on many threads and there's not often a reply","msgtype":"m.text"},"ts":1416506623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: but I can try to copy you on more I guess","msgtype":"m.text"},"ts":1416506647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"where in this thread is the slots stuff?","msgtype":"m.text"},"ts":1416506655000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the start of that thread is just bogus","msgtype":"m.text"},"ts":1416506660000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is why i ignored it","msgtype":"m.text"},"ts":1416506666000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it says \"we have to define what the global is\"","msgtype":"m.text"},"ts":1416506672000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the answer to that is simple","msgtype":"m.text"},"ts":1416506675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just define what the global is","msgtype":"m.text"},"ts":1416506677000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1416506678000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do we get from that to slots?","msgtype":"m.text"},"ts":1416506684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/0180.html","msgtype":"m.text"},"ts":1416506691000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or realms?","msgtype":"m.text"},"ts":1416506694000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: realms are globals","msgtype":"m.text"},"ts":1416506708000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they're not, but whatever","msgtype":"m.text"},"ts":1416506725000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: pointer?","msgtype":"m.text"},"ts":1416506739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(e.g. CreateRealm() creates a realm without a global)","msgtype":"m.text"},"ts":1416506742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/0180.html doesn't explain why we need slots","msgtype":"m.text"},"ts":1416506772000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it just says we need slots","msgtype":"m.text"},"ts":1416506778000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but that's not exposed...","msgtype":"m.text"},"ts":1416506780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"neither are realms...","msgtype":"m.text"},"ts":1416506789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is why they're globals","msgtype":"m.text"},"ts":1416506799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"they're not globals...","msgtype":"m.text"},"ts":1416506805000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they're some internal state that shouldn't exist in the first place","msgtype":"m.text"},"ts":1416506814000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and that other specs shouldn't need to ever mention","msgtype":"m.text"},"ts":1416506827000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"one of these days, all of the different spec editors should go bowling or something and sort this stuff out","msgtype":"m.text"},"ts":1416506832000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean the most obvious way to see that these are not needed is that ES3 didn't have them yet nothing changed in the semantics here","msgtype":"m.text"},"ts":1416506850000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1416506856000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's not the argument i care about","msgtype":"m.text"},"ts":1416506861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm just trying to understand why we're trying to solve the problem of \"define the global for an object\" by adding IDL syntax","msgtype":"m.text"},"ts":1416506875000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"IDL syntax that, in particular, doesn't match realty","msgtype":"m.text"},"ts":1416506887000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the idea is to let IDL define the globals, including for objects associated with a particular object","msgtype":"m.text"},"ts":1416506910000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as the stuff around multiple globals is way too hard on spec authors","msgtype":"m.text"},"ts":1416506957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't understand what is ambiguous about globals","msgtype":"m.text"},"ts":1416506985000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"all the objects we create come from a global or an object that itself comes from a global, directly or indirectly.","msgtype":"m.text"},"ts":1416507013000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can you give me a concrete example of something that's not defined?","msgtype":"m.text"},"ts":1416507028000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"This is just about cases such as window2.Document.prototype.createElement.call(window3.document, ...) being run in window1\"","msgtype":"m.text"},"ts":1416507069000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"And what that means for the Element that is created and its associated objects\"","msgtype":"m.text"},"ts":1416507075000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"The global associated with an method call is the global object of the object on which the method was invoked (the 'this' value of the method call)\"","msgtype":"m.text"},"ts":1416507221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"done. solved it for you.","msgtype":"m.text"},"ts":1416507224000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(maybe make my grammar better)","msgtype":"m.text"},"ts":1416507242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there some reason that's not enough?","msgtype":"m.text"},"ts":1416507312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i really don't understand what is hard here","msgtype":"m.text"},"ts":1416507317000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i mean we have to define which Document that calls works on too, regardless of the global object","msgtype":"m.text"},"ts":1416507334000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and once you've defined that, the global object issue solves itself","msgtype":"m.text"},"ts":1416507348000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"That doesn't define it for objects associated with the Element","msgtype":"m.text"},"ts":1416507362000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and solving the global object issue doesn't solve the \"which Document\" issue)","msgtype":"m.text"},"ts":1416507365000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how do you mean?","msgtype":"m.text"},"ts":1416507373000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if an object is associated with an Element, then by definition they're associated with an object that has a global","msgtype":"m.text"},"ts":1416507389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"every object has an associated global, it's the global on which the prototypes find themselves","msgtype":"m.text"},"ts":1416507419000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"What I mean is that if you create an element, it would be good if it's properly defined what the global associated with that element's NodeList is for instance","msgtype":"m.text"},"ts":1416507487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or with ImageData's data","msgtype":"m.text"},"ts":1416507500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"there's only one sane answer, yes?","msgtype":"m.text"},"ts":1416507509000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the same global as the element?","msgtype":"m.text"},"ts":1416507512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't know, in implementations that's not always the case","msgtype":"m.text"},"ts":1416507524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: can the DOM3 events spec be fixed, or is it frozen?","msgtype":"m.text"},"ts":1416507529000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: no idea","msgtype":"m.text"},"ts":1416507535000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Manishearth: if it's frozen, it's dead","msgtype":"m.text"},"ts":1416507545000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I guess we should cc the relevant person on the bug?","msgtype":"m.text"},"ts":1416507550000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1416507551000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Manishearth: so hopefully it's either being maintained, or there's some other spec that's replaced it","msgtype":"m.text"},"ts":1416507559000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Manishearth: but in general, key and mouse events have not found anyone who wants to do a real spec for them :-(","msgtype":"m.text"},"ts":1416507575000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Manishearth: so i suspect the answer is that DOM3 Events isn't frozen per se, but is also not interested in correctly and fully speccing key and mouse events","msgtype":"m.text"},"ts":1416507598000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: when is an Element going to have a different global than its childNodes NodeList?","msgtype":"m.text"},"ts":1416507612000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: adoptNode doesn't change the prototypes, does it?","msgtype":"m.text"},"ts":1416507661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that is the plan, actually","msgtype":"m.text"},"ts":1416507787000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does anyone do that currently?","msgtype":"m.text"},"ts":1416507797000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Gecko","msgtype":"m.text"},"ts":1416507801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just gecko?","msgtype":"m.text"},"ts":1416507809000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: after filing https://www.w3.org/Bugs/Public/show_bug.cgi?id=27337 annevk told me something similar and said that I would be probably asked to write the spec myself :p","msgtype":"m.text"},"ts":1416507811000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"Hixie: and Safari does it but less deterministic","msgtype":"m.text"},"ts":1416507818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok so why aren't we going towards the saner \"don't change prototypes half way through an object's lifetime\" model that more browsers implement?","msgtype":"m.text"},"ts":1416507850000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Manishearth: Travis and some people are working on DOM Level 3 Events","msgtype":"m.text"},"ts":1416507857000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since it would be way simpler and not require any of this stuff?","msgtype":"m.text"},"ts":1416507862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's not what's motivating this","msgtype":"m.text"},"ts":1416507902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and anyway, even if you did change that, you still wouldn't need this slots stuff. Just have adoptNode() update the prototypes you care about.","msgtype":"m.text"},"ts":1416507908000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so what _is_ motivating this?","msgtype":"m.text"},"ts":1416507912000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: yeah, I moved the bug over to DOM3 and Travis","msgtype":"m.text"},"ts":1416507918000,"senderName":"Manishearth","senderId":"Manishearth@irc"},
{"content":{"body":"dude i'm just trying to understand why you're trying to do this","msgtype":"m.text"},"ts":1416507923000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I tried to explain, but you don't think it's a problem","msgtype":"m.text"},"ts":1416507939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why do you think it's a problem?","msgtype":"m.text"},"ts":1416507955000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why am i wrong?","msgtype":"m.text"},"ts":1416507959000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think it would be better if internal slots were better formalized as currently specs often make a mess about how to talk about private state; and it seems it would help defining associated globals as well as creation of objects","msgtype":"m.text"},"ts":1416508035000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and then once that's done it seems we can maybe build things on top, such as Object.observe","msgtype":"m.text"},"ts":1416508074000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"baby steps...","msgtype":"m.text"},"ts":1416508093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wait, what has Object.observe() got to do with anything. you haven't brought this up before.","msgtype":"m.text"},"ts":1416508289000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's what started the discussion about internal slots today...","msgtype":"m.text"},"ts":1416508312000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hm?","msgtype":"m.text"},"ts":1416508455000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i thought i started it","msgtype":"m.text"},"ts":1416508458000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't see anything about Object.observe() in our conversation?","msgtype":"m.text"},"ts":1416508470000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: was it deliberate to drop the error handling mode here? it’s not mentioned in the commit message or the bugs linked from there https://github.com/whatwg/url/commit/f7ab990492ff6f6f69b557b7693149f42bba6bd8#diff-bb9242250d394d9ad4dc0019a1dfe4aeL1921","msgtype":"m.text"},"ts":1416508766000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: If so, how should failure be handled? (Since \"fatal\" is the default for encode.)","msgtype":"m.text"},"ts":1416508796000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hixie: it's in the backlog","msgtype":"m.text"},"ts":1416508828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(This is in the application/x-www-form-urlencoded serializer)","msgtype":"m.text"},"ts":1416508891000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I don't think it is for the algorithm it calls","msgtype":"m.text"},"ts":1416508892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: unless I'm linking to the wrong one","msgtype":"m.text"},"ts":1416508905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i paged through it but didn't see anything relevant. i found the bug though. looks like i am not the only one with concerns on that one.","msgtype":"m.text"},"ts":1416508906000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bbiab","msgtype":"m.text"},"ts":1416508910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: I don’t understand that sentence. What is it?","msgtype":"m.text"},"ts":1416508925000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: https://encoding.spec.whatwg.org/#encode","msgtype":"m.text"},"ts":1416508940000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"URL links to #encoding","msgtype":"m.text"},"ts":1416508995000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"<span data-anolis-spec=encoding>encode</span> was in that commit","msgtype":"m.text"},"ts":1416509047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: if that regressed please file a bug?","msgtype":"m.text"},"ts":1416509087000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the latest version links to #encoding. Maybe it got changed accidentally in the bikeshed conversion?","msgtype":"m.text"},"ts":1416509092000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I suspect it might be the bikeshed conversion","msgtype":"m.text"},"ts":1416509096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: also, I’ve said it before, but I think it’s very error-prone to have terms with very close names (encode vs encoder) and subtly different behavior","msgtype":"m.text"},"ts":1416509140000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"TabAtkins: why does the \"encode\" link under https://url.spec.whatwg.org/#concept-urlencoded-serializer not go to \"encode\"?","msgtype":"m.text"},"ts":1416510494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ahahaha, interesting.  It's because Bikeshed's being too smart for its own good.","msgtype":"m.text"},"ts":1416510555000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"SimonSapin: seems hard to avoid, \"encoding\" and \"encoder\" are close too","msgtype":"m.text"},"ts":1416510604000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It understands English conjugation enough to recognize that \"encode\" and \"encoding\" are the same word.  I'll have to see how to tweak this so it doesn't do corrections if the exact word is around.","msgtype":"m.text"},"ts":1416510608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I wonder if I ever received an email whose subject started \"I have a proposal\" that wasn't spam","msgtype":"m.text"},"ts":1416510795000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins: too much magic?","msgtype":"m.text"},"ts":1416510805000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Yeah.  It also doesn't help that, originally, Bikeshed only had the auto-correction on link texts.  Mike West added it to definition texts, but the implementation isn't quite right.","msgtype":"m.text"},"ts":1416510865000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but yeah, preferring exact matches over fuzzy matches sounds good","msgtype":"m.text"},"ts":1416510933000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"annevk: Actually, the problem is that \"encode\" doesn't show up in the linking database at all, so there's nothing to exact-match against.  Fuzzy-matching then leads to Bikeshed concluding that you probably meant \"encoding\", which it knows about.","msgtype":"m.text"},"ts":1416512973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(The fact that this didn't error out is probably why it's not in the custom anchors block.)","msgtype":"m.text"},"ts":1416512998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yay, fun times finding bugs in the Python stdlib!","msgtype":"m.text"},"ts":1416518993000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"reads http://intertwingly.net/blog/2014/11/20/WHATWG-W3C-Collaboration","msgtype":"m.emote"},"ts":1416519933000,"senderName":"foolip","senderId":"foolip@irc"}
]