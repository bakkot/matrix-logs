[
{"content":{"body":"Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20212 was closed (by mat)","msgtype":"m.text"},"ts":1407301119000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hi! anyone around who could help with a user account creation? I wanted to modify the meta extensions wiki and need a whatwg account for doing the same.","msgtype":"m.text"},"ts":1407302573000,"senderName":"arpitab__","senderId":"arpitab__@irc"},
{"content":{"body":"arpitab__: yeah, just let me know you e-mail address and what  user name you want. either here or DM if you prefer","msgtype":"m.text"},"ts":1407302635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Tx MikeSmith! shall DM","msgtype":"m.text"},"ts":1407302675000,"senderName":"arpitab__","senderId":"arpitab__@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1407302705000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"How would https://www.w3.org/Bugs/Public/show_bug.cgi?id=26517 even work in the async/await world?","msgtype":"m.text"},"ts":1407312802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"try { await thing() } catch(...) { ... }","msgtype":"m.text"},"ts":1407312842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What would it mean for thing() to throw synchronously?","msgtype":"m.text"},"ts":1407312850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: happy to change XMLHttpRequest's serialization","msgtype":"m.text"},"ts":1407312892000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: sort of hoping Ms2ger can sort out what that should be though","msgtype":"m.text"},"ts":1407312903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: In an async/await world that example would behave the same regardless of sync/async throw","msgtype":"m.text"},"ts":1407317598000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: so how do you do things like Promise.all() in async/await? let x = await y(); let z = await a(); if(x && z) ...?","msgtype":"m.text"},"ts":1407321094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: var results = await Promise.all(a(), b(), c());","msgtype":"m.text"},"ts":1407321145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: var results = await Promise.all([a(), b(), c()]); even","msgtype":"m.text"},"ts":1407321159000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hmm, so promises are not completely abstracted out","msgtype":"m.text"},"ts":1407321187000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Nah, not if you want a() b() and c() in parallel","msgtype":"m.text"},"ts":1407321222000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Well, you could do:","msgtype":"m.text"},"ts":1407321255000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"let x = y(); let z = a(); x = await x; z = await z;","msgtype":"m.text"},"ts":1407321319000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I'm doing parallel without Promise.all in http://jakearchibald.com/2014/es7-async-functions/#this-time-with-es7-async-functions","msgtype":"m.text"},"ts":1407321469000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I never got why you'd need/want the word 'function' after the word 'async' in the spec.","msgtype":"m.text"},"ts":1407321889000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"I mean, what's bad with `async loadStory(){`? Not that it matters too much, I'm quite content with generators.","msgtype":"m.text"},"ts":1407321928000,"senderName":"benjamingr","senderId":"benjamingr@irc"},
{"content":{"body":"cries http://drafts.csswg.org/css-scoping/#selectordef-deep","msgtype":"m.emote"},"ts":1407324457000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"all the shadow dom stuff is getting so wrong","msgtype":"m.text"},"ts":1407324493000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":">>> lol","msgtype":"m.text"},"ts":1407324839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but clever","msgtype":"m.text"},"ts":1407324846000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"since we end up exposing shadow dom to the outside world in all sorts of ways, couldn't we like just remove the 'shadow' part?","msgtype":"m.text"},"ts":1407324938000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"grr","msgtype":"m.text"},"ts":1407324941000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is getting more and more the feeling XBL2 would have been better approach","msgtype":"m.emote"},"ts":1407324987000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah, it's not really a shadow DOM at this point","msgtype":"m.text"},"ts":1407326464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: it's more some kind of special descendants","msgtype":"m.text"},"ts":1407326481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: node tree -> composed node tree","msgtype":"m.text"},"ts":1407326514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"scoped tree","msgtype":"m.text"},"ts":1407326701000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"well it's not it currently means \"invisible DOM\". but it's not really a shadow either","msgtype":"m.text"},"ts":1407326769000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm, no, usually one can't get easily from global scope to the inner scopes, for the sake of encapsulation","msgtype":"m.text"},"ts":1407326776000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"regardless it's still a better name than ServiceWorker","msgtype":"m.text"},"ts":1407326790000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"composed is perhaps fine. It doesn't hint anything about encapsulation","msgtype":"m.text"},"ts":1407326824000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I thought it was \"shadow\" as in \"shadow of it's former self\"","msgtype":"m.text"},"ts":1407326856000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"isn't it always a documentFragment","msgtype":"m.text"},"ts":1407326866000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"s/'//","msgtype":"m.text"},"ts":1407326867000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"time to revivi \"island\"","msgtype":"m.text"},"ts":1407326892000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"<xml>","msgtype":"m.text"},"ts":1407327041000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"memories","msgtype":"m.text"},"ts":1407327070000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"starts to imagine the shadow of the invisible man and wonders how it is supposed to work","msgtype":"m.emote"},"ts":1407327194000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"or is it just light gravitationally bended around the object.","msgtype":"m.text"},"ts":1407327234000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1407327236000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"gravitational lens DOM","msgtype":"m.text"},"ts":1407327247000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"maybe just the blackhole DOM. Not visible but you know it's here through its effects on the surrounding","msgtype":"m.text"},"ts":1407327316000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"so much emotion for today.","msgtype":"m.text"},"ts":1407327326000,"senderName":"karlcow","senderId":"karlcow@irc"},
{"content":{"body":"calls dibs on writing the caustic spec for gravitationally lensed DOMs","msgtype":"m.emote"},"ts":1407327398000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"If only we had someone with a PhD in astrophysics...","msgtype":"m.text"},"ts":1407327420000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"points at karlcow ","msgtype":"m.emote"},"ts":1407327436000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic: so now http://heycam.github.io/webidl/#initializing-objects-from-iterables exists, what is put in IDL?","msgtype":"m.text"},"ts":1407330188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I dunno, not terribly important to me. Maybe Constructor(AddMapElementsUsing(\"set\") iterable) or something?","msgtype":"m.text"},"ts":1407339003000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wfm","msgtype":"m.text"},"ts":1407339064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Do any browser vendors have data on how many users have changed the default font size and/or zoom level in their browser?","msgtype":"m.text"},"ts":1407339651000,"senderName":"wilhelm","senderId":"wilhelm@irc"},
{"content":{"body":"zcorpan: I never understood that bug anyway, so...","msgtype":"m.text"},"ts":1407343510000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: what's the difference between Foo[] and sequence<Foo> again??","msgtype":"m.text"},"ts":1407343522000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the former cannot be used as method argument","msgtype":"m.text"},"ts":1407343571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: and should generally be avoided as nobody really wants it","msgtype":"m.text"},"ts":1407343584000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what are they, concretely?","msgtype":"m.text"},"ts":1407343596000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is Foo[] an actual Array?","msgtype":"m.text"},"ts":1407343642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or a read-only array?","msgtype":"m.text"},"ts":1407343647000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or some other thing?","msgtype":"m.text"},"ts":1407343653000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sequence<Foo> as an argument means the object passed in will be iterated over and copied into a fresh array for use by the algorithm defining the function.  As a return value it's an Array.","msgtype":"m.text"},"ts":1407343653000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I dunno what Foo[] does.","msgtype":"m.text"},"ts":1407343671000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so, if i have a FooEvent object and it has an attribute of type Foo[], do i not want the initFooEvent() method to take a Foo[] so the attribute can just be set to the same object as it was given?","msgtype":"m.text"},"ts":1407343721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"As soon as I was assured of which option gave me a normal Array, I immediately forgot about everything else.","msgtype":"m.text"},"ts":1407343721000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wow, yeah, Foo[] is not an Array but sequence<Foo> is","msgtype":"m.text"},"ts":1407343792000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's confusing","msgtype":"m.text"},"ts":1407343794000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I pity the Foo[]","msgtype":"m.text"},"ts":1407343846000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"so presumably attributes can't be sequence<Foo>, right?","msgtype":"m.text"},"ts":1407343855000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: The point of shadow dom was never to 100% hide it from the outside world.  (We need that ability eventually, to explain some built-ins, but not for normal stuff.)  It's to hide stuff from *unintentional* access, which is the main problem with today's frameworks.","msgtype":"m.text"},"ts":1407343869000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"since they'd have to return a new value each time","msgtype":"m.text"},"ts":1407343873000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: i think opinions vary on that, fwiw","msgtype":"m.text"},"ts":1407343902000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I think you can do [SameObject] for it?  But honestly, I have no fucking clue, becasue the entire array part of WebIDL is a terrible mishmash of things influenced by the older impulses for Java-compat.","msgtype":"m.text"},"ts":1407343934000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think oopinions vary on whether that's an accurate portrayal of the history","msgtype":"m.text"},"ts":1407343952000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: That was definitely *our* original opinion, when we started working on \"a new XBL, but have it make sense this time\".","msgtype":"m.text"},"ts":1407343979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It was literally \"jQuery components are cool, but let's fix their flaws\".","msgtype":"m.text"},"ts":1407343994000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: right, but given that \"a new XBL\" was the ~fifth iteration of that particular problem space, it's hardly the first set of opinions. :-)","msgtype":"m.text"},"ts":1407344016000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Right.  I can't speak to previous iterations, just the one that I was a founding member of. ^_^","msgtype":"m.text"},"ts":1407344031000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i wouldn't even say it was \"ours\". i mean, i was a founding member of this stuff too, if you count my many conversations with dglazkov when he was getting started as founding","msgtype":"m.text"},"ts":1407344069000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: once you add /deep/, accessing shadow dom accidentally becomes just as easy as with normal dom without /deep/","msgtype":"m.text"},"ts":1407344070000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and i don't think i'd agree with that","msgtype":"m.text"},"ts":1407344073000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: We talked a good bit over this before you even got roped in.","msgtype":"m.text"},"ts":1407344122000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i think we were talking about this before you got hired, but ok :-)","msgtype":"m.text"},"ts":1407344140000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: \"Accidentally\" meaning \"without invoking shadow-dom stuff\".","msgtype":"m.text"},"ts":1407344150000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yes, using /deep/, you can do more than you intend, but you'll never touch shadow things if you dont' use shadow combinators.","msgtype":"m.text"},"ts":1407344167000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sure, but you may access not-yours shadow doms","msgtype":"m.text"},"ts":1407344195000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"just like without /deep/ you may access not-ours dom subtrees","msgtype":"m.text"},"ts":1407344208000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Using descendant combinators, you can do more than you intend. That doesn't mean we need to only allow child combinators.","msgtype":"m.text"},"ts":1407344208000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hah, we hit the same metaphor.","msgtype":"m.text"},"ts":1407344224000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, simile.","msgtype":"m.text"},"ts":1407344240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: so, if /deep/ is allowed, what is the point with shadow dom ?","msgtype":"m.text"},"ts":1407344503000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"you now get access easily to all the shadow dom, unintentionally, and break things","msgtype":"m.text"},"ts":1407344538000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"some encapsulation would be nice","msgtype":"m.text"},"ts":1407344560000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I'm not sure how you define encapsulation if \"didn't show up in the normal tree at all, requiring special operations to access\" doesn't qualify.","msgtype":"m.text"},"ts":1407344842000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, /deep/ let's you poke any shadow dom. I would at least hope some specific \"I want to access these shadow doms.\". So ShadowRoot would need to have identifier, perhaps some kind of component class, like my-company-super-widget","msgtype":"m.text"},"ts":1407345006000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"then deep(\"my-company-super-widget\")","msgtype":"m.text"},"ts":1407345023000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"something which forces dev to think which shadow dom to access","msgtype":"m.text"},"ts":1407345044000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and lets one to create inaccessible shadow dom (by not defining the component class)","msgtype":"m.text"},"ts":1407345078000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"We definitely want to add more controls of visibility.","msgtype":"m.text"},"ts":1407345358000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"stuff should be hidden by default","msgtype":"m.text"},"ts":1407345398000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and exposing opt-in","msgtype":"m.text"},"ts":1407345409000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Starting with the simplest form now (just hidden from normal access) because it's the most general and shuts our the fewest use-cases.","msgtype":"m.text"},"ts":1407345414000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We don't yet have a coherent proposal for what it means to \"hide\" a shadow DOM further, because there are multiple possibilities and it's actually quite complex","msgtype":"m.text"},"ts":1407345546000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"haha, i've found a way to read a bit of information cross-origin on chrome","msgtype":"m.text"},"ts":1407345582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The current behavior is at least coherent - all shadows are hidden from view unless you ask for them.","msgtype":"m.text"},"ts":1407345591000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"the bit is \"does this <embed> contain an image/svg+xml image\"","msgtype":"m.text"},"ts":1407345594000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"- bugs","msgtype":"m.text"},"ts":1407345644000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"like exposing shadow dom during script execution in shadow dom","msgtype":"m.text"},"ts":1407345655000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Of course.","msgtype":"m.text"},"ts":1407345668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Abutter coherent behavior is \"totally sealed away forever\", like UA stuff does, but that's very complicated to describe and honestly not a good default","msgtype":"m.text"},"ts":1407345716000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(not that scripts should be executed in shadow dom at all per specs, but again, bugs)","msgtype":"m.text"},"ts":1407345717000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why it is not a good default?","msgtype":"m.text"},"ts":1407345744000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"There's probably a coherent middle ground, or even a slightly incoherent but useful one, but we haven't found it yet, and didn't want to hang ourselves in waiting for it.","msgtype":"m.text"},"ts":1407345763000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(seems like a pretty good default to me)","msgtype":"m.text"},"ts":1407345769000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"smaug____: Totally sealed sounds good until you actually use it","msgtype":"m.text"},"ts":1407345788000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it's what we use every day with web controls","msgtype":"m.text"},"ts":1407345833000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what's wrong with it?","msgtype":"m.text"},"ts":1407345836000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"We have relatively few, and relatively simple, shadows in the platform so far. Customizability is still a major issue","msgtype":"m.text"},"ts":1407345845000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Making things untouchable by default as shadows explode on number and complexity is very bad for usability.","msgtype":"m.text"},"ts":1407345877000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i disagree, but probably mostly because i have a different view of how the customisation should happen","msgtype":"m.text"},"ts":1407345930000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"imho bindings should have two parts, the logic, and the presentation","msgtype":"m.text"},"ts":1407345942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and most people should just overrride the presentation part of the binding","msgtype":"m.text"},"ts":1407345952000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"each logic binding would define a \"protocol\" for how its presentation should be implemented","msgtype":"m.text"},"ts":1407345964000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I'm at lunch now, and I'll get on a plane afterwards, so I can't continue this convo today.","msgtype":"m.text"},"ts":1407345968000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"this would let you arbitrarily restyle UA controls","msgtype":"m.text"},"ts":1407345991000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and the same would work with people's custom controls","msgtype":"m.text"},"ts":1407345999000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in other news, wtf browsers.","msgtype":"m.text"},"ts":1407346113000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyone got IE? I need a tie-breaker. http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=3101","msgtype":"m.text"},"ts":1407346121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"safari: getSVGDocument() only returns a Document if the MIME type was image/svg+xml _and_ the root namespace is the SVG namespace","msgtype":"m.text"},"ts":1407346193000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"chrome: getSVGDocument() returns a Document if the MIME type of the currently loaded document is image/svg+xml","msgtype":"m.text"},"ts":1407346236000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but safari and chrome both are willing to load any MIME type in <embed>","msgtype":"m.text"},"ts":1407346307000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"firefox: returns \"NS_ERROR_FAILURE:  on line 114\" if the MIME type was image/svg+xml and the namesapce isn't SVG, and won't load other MIME types","msgtype":"m.text"},"ts":1407346322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if you navigate to an HTML doc from the non-svg svg doc, then get SVGDocument() returns the Document fine???","msgtype":"m.text"},"ts":1407346338000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"interop rating: 0.0","msgtype":"m.text"},"ts":1407346351000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm, NS_ERROR_FAILURE is surprising","msgtype":"m.text"},"ts":1407346384000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"better test http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=3102","msgtype":"m.text"},"ts":1407346874000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, new info. safari requires the current document to have been loaded as image/svg+xml, and returns null for cross-origin accesses.","msgtype":"m.text"},"ts":1407347001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"chrome also requires the current document to have been loaded as image/svg+xml, but throws an exception for cross-origin accesses that would otherwise return a document.","msgtype":"m.text"},"ts":1407347106000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"firefox returns the current Document regardless of MIME type, except that if it was opened as image/svg+xml, it tries to get an SVGDocument, and fails with NS_NOINTERFACE if it's actualy not an SVGDocument","msgtype":"m.text"},"ts":1407347194000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"except if it's a data: URL, in which case it's NS_ERROR_FAILURE?","msgtype":"m.text"},"ts":1407347229000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and firefox follows the spec in terms of refusing to load non-SVG no-plugin MIME types","msgtype":"m.text"},"ts":1407347262000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but safari and chrome just treat the embed as an iframe if they support the type","msgtype":"m.text"},"ts":1407347274000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"all the browsers look at what the current loaded doc is, though, not what the original doc was (not that it matters for firefox)","msgtype":"m.text"},"ts":1407347456000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"guess i'll go with the safari behaviour for getSVGDocument(), and the firefox behaviour for loading.","msgtype":"m.text"},"ts":1407347682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what exactly does the JS spec mean when it uses the term \"abstract operation\"?","msgtype":"m.text"},"ts":1407354585000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it just means \"internal spec function\", right? not \"abstract\" in the normal sense?","msgtype":"m.text"},"ts":1407354718000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"man, i thought i'd be better able to understand the module loading system now, but i was wrong","msgtype":"m.text"},"ts":1407354850000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the whole of 15.2.* baffles me still","msgtype":"m.text"},"ts":1407354910000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes, internal spec function. although \"function\" has its own connotations that don't apply","msgtype":"m.text"},"ts":1407358412000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jorendorff: so despite my best efforts, i can't really figure out what happens when you have an \"import\" statement still","msgtype":"m.text"},"ts":1407364364000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: import is a directive to the loader. It means \"before you even think about running this code,","msgtype":"m.text"},"ts":1407364391000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i mean at a very concrete level","msgtype":"m.text"},"ts":1407364402000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: load *that* module and its dependencies.\"","msgtype":"m.text"},"ts":1407364407000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"involved loader records and all that","msgtype":"m.text"},"ts":1407364408000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"involving","msgtype":"m.text"},"ts":1407364412000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does it involve CreateLoaderRecord()?","msgtype":"m.text"},"ts":1407364461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nothing seems to call CreateLoaderRecord except Reflect.Loader(), which i assume isn't directly invoked by the spec","msgtype":"m.text"},"ts":1407364481000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't have time to explain in detail just now, but can we talk tomorrow?","msgtype":"m.text"},"ts":1407364514000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1407364519000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: in short, CreateLoaderRecord shouldn't exist, those should be internal slots of the Loader object. It's just the Loader, that's all.","msgtype":"m.text"},"ts":1407364542000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"\"shouldn't\" as in you disagree with the spec, as in the spec will be changed, or as in i should be ignoring that part of the spec?","msgtype":"m.text"},"ts":1407364582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think the spec is unnecessarily complex, but and you should think of those as internal slots of the Loader object because that's what they are in practice","msgtype":"m.text"},"ts":1407364621000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie: the spec doesn't explicitly create a Loader; it specifies that one exists at startup, details to be supplied by the embedding","msgtype":"m.text"},"ts":1407364629000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'll be around tomorrow","msgtype":"m.text"},"ts":1407364648000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the spec is definitely unnecessarily complex, but it's the spec, so... :-(","msgtype":"m.text"},"ts":1407364657000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1407364658000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gah i don't get this spec","msgtype":"m.text"},"ts":1407364951000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it has all these dangling definitions","msgtype":"m.text"},"ts":1407364957000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"26.4 The System Object","msgtype":"m.text"},"ts":1407364964000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"The System object is the Loader Object instance associated with the Realm of the current global object.","msgtype":"m.text"},"ts":1407364965000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"first of all, \"Loader Object instance\"? surely you can't have an instance of an object, objects _are_ instances","msgtype":"m.text"},"ts":1407364996000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"secondly, the term \"System Object\" doesn't get mentioned anywhere else except that one sentence.","msgtype":"m.text"},"ts":1407365015000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"8.2 Code Realms \"A Realm is specified as a Record with the fields specified in Table 20:\" [...] \"[[loader]]\" [...] \"The Loader object that can associate ECMAScript code with this Realm\"","msgtype":"m.text"},"ts":1407365091000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"over 50% of implementors should be able to figure it out! [[snerk]]","msgtype":"m.text"},"ts":1407365098000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the term \"[[loader]]\" isn't mentioned anywhere else either","msgtype":"m.text"},"ts":1407365102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"6.1.7.4 Well-Known Intrinsic Objects \"Well-known intrinsics are built-in objects that are explicitly referenced by the algorithms of this specification and which usually have Realm specific identities.\" [...] \"%Loader%\" (no definition)","msgtype":"m.text"},"ts":1407365144000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"%Loader% is only used twice: \"The initialize value of Reflect.Loader is the %Loader% intrinsic object\" and \"The initial value of Reflect.Loader.prototype.constructor is the built-in %Loader% constructor\"","msgtype":"m.text"},"ts":1407365163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so, looks like we have three separate realm-specific Loader objects. but. none of them are used to load anything.","msgtype":"m.text"},"ts":1407365201000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does anyone implement any of this stuff?","msgtype":"m.text"},"ts":1407365309000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i recall there was a bug for it on mozilla's tracker, dunno the status of it","msgtype":"m.text"},"ts":1407365337000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"and by \"it\" I really mean realms, because it's kind of a blocker for the rest of that I think?","msgtype":"m.text"},"ts":1407365496000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"browsers have implemented realms for years (implicitly)","msgtype":"m.text"},"ts":1407365580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i meant the Loader thing","msgtype":"m.text"},"ts":1407365591000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is not Loader related to modules?","msgtype":"m.text"},"ts":1407365636000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"anyways, there's no bug found for \"es6 loader\"","msgtype":"m.text"},"ts":1407365667000,"senderName":"caitp","senderId":"caitp@irc"}
]