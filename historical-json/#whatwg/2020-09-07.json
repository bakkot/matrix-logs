[
{"content":{"body":"HughP: in general about name values for the meta attribute, there’s really never any discussion about them. Instead, it’s a free-for-all: People use whatever they, with no coordination/collaboration","msgtype":"m.text"},"ts":1599446579000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... so there’s a lot of known redundancy, and a lot of values that people are using that are effectively private values that nobody else in the world cares about","msgtype":"m.text"},"ts":1599446629000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"And that’s why the spec was changed (several years ago) to no longer require meta[name] values to be registered. So any name value you choose to use is valid now — without you needing to register it","msgtype":"m.text"},"ts":1599446725000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so IMHO at this point there’s not any real value in practice to adding any name values to the https://wiki.whatwg.org/wiki/MetaExtensions page","msgtype":"m.text"},"ts":1599446888000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nobody’s curating that page — and as you’ve found out, it has the big disadvantage that you need to have somebody create an account for you in order to add anything new to it","msgtype":"m.text"},"ts":1599446943000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith Thank you for pointing out https://html.spec.whatwg.org/multipage/semantics.html#other-metadata-names That was really helpful, and indeed I have seen some meta values in the wild which are not listed on that wiki page. I was wondering if this was an \"every man for himself\" sort of world. All the same the living standard still says that it","msgtype":"m.text"},"ts":1599458607000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"is good to consult the wiki page you reference as that is there to \"advertise\" that one is using such a tag. So, there should be some method for following through with the recommendation in the standard.","msgtype":"m.text"},"ts":1599458608000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"Hi Domenic! I have done some research work regarding tooltip/top-layer (https://github.com/whatwg/html/issues/4633). I have some bandwidth and I want to advance that work (I work on this on behalf of wikipedia)","msgtype":"m.text"},"ts":1599464004000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"HughP: Yeah we originally anticipated that more actual coordination/collaboration would emerge around meta names, but it never ended up happening at all","msgtype":"m.text"},"ts":1599464023000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: are you saying browsers shouldn't use new <meta name> values? Is that what's happening in practice? Otherwise it still seems useful to register, at least to inform implementers as to what values might step on someone else","msgtype":"m.text"},"ts":1599464838000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk What I have seen in practice is that name_spacing is occuring. The case I am thinking about is that I have seen some meta tags which I presume are part of Webtrends Parameters package. http://product.webtrends.com/WRC/OnDemand/ResourceCenter/rc/Library/PDF/IGOD/WebTrendsAnalyticsOnDemandImplementationGuide.pdf they take the form wt.xxx which","msgtype":"m.text"},"ts":1599466397000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"seems to be the way that they are name spaceing their tags.","msgtype":"m.text"},"ts":1599466397000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"That seems fine","msgtype":"m.text"},"ts":1599466432000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that is I have seen some wt.xxx tags which are not in the documentation or the wiki","msgtype":"m.text"},"ts":1599466446000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"It still does seem somewhat useful to me if those are registered. Also for people trying to figure out what they might mean. But those names are also unlikely to clash with anything a browser might add.","msgtype":"m.text"},"ts":1599466526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps we should move https://wiki.whatwg.org/wiki/MetaExtensions to a Markdown page on https://github.com/whatwg/html so it can be easily PR'd by anyone with a GitHub account","msgtype":"m.text"},"ts":1599466594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yea, I really don't have a problem with that at all. It makes sense. I'm initially asked my question because I wanted to know if anyone had implemented DCMI's endorsement of the MARC relator vocabulary, as a refining element of the DC.Creator tag. I have seem some examples in XHTML but nothing in html5.","msgtype":"m.text"},"ts":1599466612000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"+1 to using github and PRs","msgtype":"m.text"},"ts":1599466635000,"senderName":"HughP","senderId":"HughP@irc"},
{"content":{"body":"noamr: it sounds like TabAtkins will take a look or is there something you still need from me?","msgtype":"m.text"},"ts":1599468402000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: I guess I should review your questions before merging...","msgtype":"m.text"},"ts":1599468508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: I like the idea of run pushing end-of-queue","msgtype":"m.text"},"ts":1599468606000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: maybe even make Process do it","msgtype":"m.text"},"ts":1599468759000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: as that does all the pushing to the queue already","msgtype":"m.text"},"ts":1599468778000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: I'm not sure what to do about the fatal error case; I lean towards not pushing end-of-queue in that case but I suppose I could go either way","msgtype":"m.text"},"ts":1599468865000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: left a variant of this thought process on the PR","msgtype":"m.text"},"ts":1599469188000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: TabAtkins took a look, and said that the decision was made regarding orientation/same-origin... What I ask from you is to understand whether we can now unblock the conversation about resolution based on that decision","msgtype":"m.text"},"ts":1599469192000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: so the decision is still the same and the compat concerns do not carry weight?","msgtype":"m.text"},"ts":1599469246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's what TabAtkins said earlier.","msgtype":"m.text"},"ts":1599469274000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"It would be good to see some signs of implementers committing to that, but I guess I can take a look at things assuming that's all in order...","msgtype":"m.text"},"ts":1599469364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in either case, the recent conversation about resolution has progressed in a way where it doesn't expose resolution to the embedder","msgtype":"m.text"},"ts":1599469401000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"and unlike orientation, it carries a significantly smaller baggage in terms of web compatibility","msgtype":"m.text"},"ts":1599469428000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: so I don't understand the same origin check before processing the metadata","msgtype":"m.text"},"ts":1599469512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: I thought the plan was to always process the metadata, but hide it to certain APIs, depending","msgtype":"m.text"},"ts":1599469531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right, I haven't posted a new PR yet. I meant in the comments.","msgtype":"m.text"},"ts":1599469547000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"annevk: the meta[name] values that browsers use get added directly to the spec, right? not to the wiki page","msgtype":"m.text"},"ts":1599469577000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the idea was to change the behavior of srcset when EXIF resolution exists, so that you can't detect the EXIF resolution with it","msgtype":"m.text"},"ts":1599469581000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"MikeSmith: once browsers tell us, yes, but what I'm saying is that it would still be nice if browsers could check their new idea doesn't clash with an existing thing","msgtype":"m.text"},"ts":1599469615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah I see","msgtype":"m.text"},"ts":1599469658000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"noamr: I think the better way would be to let the image decode process take care of using and stripping EXIF data in case it's an opaque image, so we don't have to change all the callers","msgtype":"m.text"},"ts":1599469680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes that makes sense. If srcset is not an issue, almost all the code for this can be an image-decoder implementation detail","msgtype":"m.text"},"ts":1599469760000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"noamr: anyway, iterating on this doesn't seem blocked to me; but I do think we need to get a bit further with resolution (including bugs filed and some intent to follow through) to be certain","msgtype":"m.text"},"ts":1599469771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"noamr: if the image decode process did that you couldn't tell with srcset, right? Or am I missing something?","msgtype":"m.text"},"ts":1599469808000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: correct.","msgtype":"m.text"},"ts":1599469824000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"the reason why this was leaking outside of the image decoder was for srcset","msgtype":"m.text"},"ts":1599469838000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"MikeSmith: the other thing we could maybe say about <meta name> is that if you want to make shit up, consider using a character outside a-z","msgtype":"m.text"},"ts":1599469850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it would need to leak again for non-opaque images if we implement css image-resolution","msgtype":"m.text"},"ts":1599469871000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"MikeSmith: [a-z-]+ is what I would expect browsers to use for eternity","msgtype":"m.text"},"ts":1599469876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, that is a concrete idea worth pursuing","msgtype":"m.text"},"ts":1599469896000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"noamr: for non-opaque images we wouldn't make the EXIF built into the image data so that should be fine; for opaque images it would always appear to be missing","msgtype":"m.text"},"ts":1599469925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but I also wish browsers would no longer use meta[name] to add anything. Next time it comes up, I hope an alternative is used. Before it becomes too late again","msgtype":"m.text"},"ts":1599470003000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the past pattern has been that browser projects have just unilaterally added their own meta[name] things, and then we ended up retroactively speccing it","msgtype":"m.text"},"ts":1599470047000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I have the feeling Apple and Microsoft and maybe Google as well do that thing on the regular","msgtype":"m.text"},"ts":1599470051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"iirc","msgtype":"m.text"},"ts":1599470051000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well I wish we could convince them to stop doing that","msgtype":"m.text"},"ts":1599470077000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it’s an abuse, IMHO","msgtype":"m.text"},"ts":1599470093000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Not much disagreement there, depends a bit on how impactful it ends up being, but not really sure how to move the needle on that","msgtype":"m.text"},"ts":1599470179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1599470187000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks for now annevk, I'll come up with a PR soonish","msgtype":"m.text"},"ts":1599470547000,"senderName":"noamr","senderId":"noamr@irc"},
{"content":{"body":"👍🏻","msgtype":"m.text"},"ts":1599470574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So I'll go ahead and not push end-of-queue on the failure case if that's okay","msgtype":"m.text"},"ts":1599476205000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: yeah that sounds good","msgtype":"m.text"},"ts":1599476238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1599476247000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"andreubotella: as I mentioned there, for the streaming fatal case we'll need a new hook anyway","msgtype":"m.text"},"ts":1599476260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"andreubotella: perhaps that also means we should be a bit more restrained with where we add outparams for output","msgtype":"m.text"},"ts":1599476541000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"meh, I guess it's okay","msgtype":"m.text"},"ts":1599476574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"my intention was to make all hooks usable for streaming if the output param was given","msgtype":"m.text"},"ts":1599476626000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"otherwise, `output` is created empty and eventually an end-of-queue is pushed to it before it gets returned","msgtype":"m.text"},"ts":1599476654000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"which btw, I'd appreciate some review on the optparams, since the infra PR is still under some discussion","msgtype":"m.text"},"ts":1599476690000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"Domenic?","msgtype":"m.text"},"ts":1599476695000,"senderName":"andreubotella","senderId":"andreubotella@irc"},
{"content":{"body":"jgraham: do you know offhand if Python 3 removed Error()?","msgtype":"m.text"},"ts":1599479543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is Exception() basically equivalent?","msgtype":"m.text"},"ts":1599479559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think Error is a Python thing in Python 2?","msgtype":"m.text"},"ts":1599482361000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What are you trying to do?","msgtype":"m.text"},"ts":1599482371000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: refactor a script that does raise Error(), but I'm not sure the path is ever triggered","msgtype":"m.text"},"ts":1599484148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In [1]: raise Error()","msgtype":"m.text"},"ts":1599484423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"---------------------------------------------------------------------------","msgtype":"m.text"},"ts":1599484423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"NameError                                 Traceback (most recent call last)","msgtype":"m.text"},"ts":1599484423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"<ipython-input-1-630691b4ad4f> in <module>()","msgtype":"m.text"},"ts":1599484423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"----> 1 raise Error()","msgtype":"m.text"},"ts":1599484423000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"NameError: name 'Error' is not defined","msgtype":"m.text"},"ts":1599484426000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(python 2.7)","msgtype":"m.text"},"ts":1599484428000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So yeah, that should be Exception","msgtype":"m.text"},"ts":1599484436000,"senderName":"jgraham","senderId":"jgraham@irc"}
]