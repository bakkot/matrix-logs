[
{"content":{"body":"smaug: re: the media remoting intent to implement?","msgtype":"m.text"},"ts":1478484710000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"smaug: it's not a spec, it's more an intervention from the browser to force a video to be remoted when a tab is mirrored","msgtype":"m.text"},"ts":1478484749000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"smaug: hopefully, it answers your question :)","msgtype":"m.text"},"ts":1478484774000,"senderName":"mounir","senderId":"mounir@irc"},
{"content":{"body":"mounir: how is https://w3c.github.io/remote-playback API related to this all?","msgtype":"m.text"},"ts":1478484895000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"nox: I see Safari fails http://w3c-test.org/dom/lists/DOMTokenList-iteration.html with “assert_array_equals: lengths differ, expected 3 got 2” (which is different than the “assert_equals: expected function \"function keys() { [native code] }\" but got function \"function keys() { [native code] }\"” failure in Chrome)","msgtype":"m.text"},"ts":1478496369000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Yes, what do you say about that Safari failure?","msgtype":"m.text"},"ts":1478507162000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: Legit or not? The test is wrong or Safari is wrong?","msgtype":"m.text"},"ts":1478507192000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"jgraham: https://github.com/w3c/web-platform-tests/pull/4090","msgtype":"m.text"},"ts":1478507677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: I'm going to merge that today unless you tell me not to","msgtype":"m.text"},"ts":1478507716000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: POPO is very reminiscent of GOP","msgtype":"m.text"},"ts":1478508180000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: kinda like it though","msgtype":"m.text"},"ts":1478508205000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: it's a wink at Java, though, which has Pojo.","msgtype":"m.text"},"ts":1478508283000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: hah, that makes it even better","msgtype":"m.text"},"ts":1478508506000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you're evil","msgtype":"m.text"},"ts":1478509005000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1478509014000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: btw, we should try to remember to file syntax changes at https://github.com/plinss/widlparser/issues/18","msgtype":"m.text"},"ts":1478509593000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: though as long as enough specifications use bikeshed I guess that happens automatically...","msgtype":"m.text"},"ts":1478509615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think I'm going to add a guide as to when and where we should file what.","msgtype":"m.text"},"ts":1478509658000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Is the README a good place for that?","msgtype":"m.text"},"ts":1478509674000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah","msgtype":"m.text"},"ts":1478509682000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Good","msgtype":"m.text"},"ts":1478509727000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"nox: bz wrote that test :) so if I had to bet my own money I’d bet for bz’s test being right rather than Safari","msgtype":"m.text"},"ts":1478510939000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Then the spec is wrong too.","msgtype":"m.text"},"ts":1478510970000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That's a first","msgtype":"m.text"},"ts":1478510977000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Nah it's not, but if only Firefox and bz are correct, maybe they should be considered wrong.","msgtype":"m.text"},"ts":1478511002000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Wait hold on, there's an open issue on this","msgtype":"m.text"},"ts":1478511046000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Hah, nice.","msgtype":"m.text"},"ts":1478511052000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmm I see the test got changed after bz wrote it https://github.com/w3c/web-platform-tests/commit/f521cb4c87e964e32ebdf4b648da013e3c05e957","msgtype":"m.text"},"ts":1478511053000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: https://github.com/whatwg/dom/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20domtokenlist","msgtype":"m.text"},"ts":1478511071000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Not seeing an issue about this.","msgtype":"m.text"},"ts":1478511110000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Oh the second one.","msgtype":"m.text"},"ts":1478511128000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Such a mess.","msgtype":"m.text"},"ts":1478511269000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: So no decision has been made yet, right?","msgtype":"m.text"},"ts":1478511719000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: nothing conclusive, only that we prefer Safari's behavior","msgtype":"m.text"},"ts":1478511850000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So we prefer removing dupes, right?","msgtype":"m.text"},"ts":1478511883000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yeah","msgtype":"m.text"},"ts":1478511897000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: ideally it's a set","msgtype":"m.text"},"ts":1478511908000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"because that's what it is...","msgtype":"m.text"},"ts":1478511923000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1478511930000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: QQ: Is Encoding or HTML the canonical reference for things like \"ASCII case-insensitive\"?","msgtype":"m.text"},"ts":1478516900000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: Isn't it DOM? https://dom.spec.whatwg.org/#ascii-case-insensitive","msgtype":"m.text"},"ts":1478517048000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: Ok, so that's three documents that look like they define the same term in the same way.","msgtype":"m.text"},"ts":1478517076000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: https://html.spec.whatwg.org/#ascii-case-insensitive Oh nevermind. :)","msgtype":"m.text"},"ts":1478517081000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"mkwst: Yeah I had forgotten they also define it.","msgtype":"m.text"},"ts":1478517093000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: https://encoding.spec.whatwg.org/#ascii-case-insensitive :)","msgtype":"m.text"},"ts":1478517105000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: At least it's the same definition! :D","msgtype":"m.text"},"ts":1478517110000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Could be 3 different ones. :D","msgtype":"m.text"},"ts":1478517120000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Not exactly the same. HTML is missing \"inclusive\", which appears in both Encoding and DOM.","msgtype":"m.text"},"ts":1478517197000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"*shrug* Not a huge deal, I just want to make sure I'm pointing to the one folks want to keep. :)","msgtype":"m.text"},"ts":1478517223000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst, I think I'd use Encoding","msgtype":"m.text"},"ts":1478517448000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: Ok. Going with that for the moment. If there's a plan for merging these duplicate definitions, I can probably make some time to help out.","msgtype":"m.text"},"ts":1478518177000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I think that'd probably be a good idea, but annevk gets to make that call, I think","msgtype":"m.text"},"ts":1478518223000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Arguably it should live in some kind of a \"core definitions\" spec","msgtype":"m.text"},"ts":1478518243000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mkwst: Ms2ger: I'm working with Domenic on that","msgtype":"m.text"},"ts":1478518346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: Ms2ger: not quite ready to publish just yet","msgtype":"m.text"},"ts":1478518374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok. Great!","msgtype":"m.text"},"ts":1478518402000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"So, Encoding today, Core Whatever tomorrow?","msgtype":"m.text"},"ts":1478518629000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk, Ms2ger: Inb4 \"The Miscellaneous Standard\"","msgtype":"m.text"},"ts":1478518677000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so, given https://github.com/w3c/webauthn/issues/created_by/bzbarsky it seems like the Web Authentication spec is maybe an excellent example to use for why we need to have better guidelines for spec editors on how to write good specsーespecially how to write APIs and importance of understanding WebIDL","msgtype":"m.text"},"ts":1478518856000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(bz raised 49 issues against it in one day)","msgtype":"m.text"},"ts":1478518900000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: basically","msgtype":"m.text"},"ts":1478518939000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox: heh","msgtype":"m.text"},"ts":1478518944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Or just util, hah.","msgtype":"m.text"},"ts":1478519341000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith, ouch","msgtype":"m.text"},"ts":1478519413000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: bravo bz on taking time to review it in detail and raise the issues","msgtype":"m.text"},"ts":1478519583000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like it was not exactly a labor of love","msgtype":"m.text"},"ts":1478519594000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and must have taken hours","msgtype":"m.text"},"ts":1478519623000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wish we had more people who would take the time to carefully review random specs","msgtype":"m.text"},"ts":1478519667000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"sure but at the same time we should ideally really not have people writing specs for the platform that end up being that far off the mark","msgtype":"m.text"},"ts":1478520204000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and it’s not because they aren’t smart and extremely capable people","msgtype":"m.text"},"ts":1478520222000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems instead that there is just a lot of prior knowledge required to do it right","msgtype":"m.text"},"ts":1478520258000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though I have to say one red flag with the Web Auth spec is that it has 9 editors listed https://w3c.github.io/webauthn/","msgtype":"m.text"},"ts":1478520366000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and see also https://github.com/w3c/webauthn/issues/276#issuecomment-258736759 and https://github.com/w3c/webauthn/issues/262#issuecomment-258724693 where bz has to explain why editors should not read and reference TR drafts but should instead work from EDs (in a specific case where the Web Crypto TR draft does something wrong that the ED has corrected)","msgtype":"m.text"},"ts":1478520700000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, that could easily be solved by the w3c","msgtype":"m.text"},"ts":1478520765000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, groups need to be pre-approved by MikeSmith before they get more than 2 editors for a document","msgtype":"m.text"},"ts":1478520874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"done!","msgtype":"m.text"},"ts":1478520914000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"edits the Process document in place to add that requirement","msgtype":"m.emote"},"ts":1478520930000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Easily solved, we'll just publish each section as a separate document, and assign \"editors\" at random","msgtype":"m.text"},"ts":1478521121000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"good brainstorming","msgtype":"m.text"},"ts":1478521191000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in-place edits the Process doc to add that too","msgtype":"m.emote"},"ts":1478521264000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seriously though I think we have a real problem when a key implementor/code-reviewer from a browser-engine project has to burn up hours documenting fairly fundamental errors in a major spec","msgtype":"m.text"},"ts":1478521446000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"kinda significant opportunity cost there","msgtype":"m.text"},"ts":1478521457000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Well, there's not that many people with the number of years of experience","msgtype":"m.text"},"ts":1478521912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sure but we also could have better guidelines with more detail and examples","msgtype":"m.text"},"ts":1478524022000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"including examples of anti-patterns to avoid","msgtype":"m.text"},"ts":1478524044000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the problem is that the people capable of writing the guidelines at the ones already very busy writing/refining specs","msgtype":"m.text"},"ts":1478524108000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic has done a lot in that area","msgtype":"m.text"},"ts":1478524155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But we also lack solid examples","msgtype":"m.text"},"ts":1478524190000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Most standards are not in a great state","msgtype":"m.text"},"ts":1478524201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And typically new editors do some combination of copy-and-pasting and adjusting to their scenario, without truly understanding","msgtype":"m.text"},"ts":1478524295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And you won't really get true understanding from day one, that takes practice","msgtype":"m.text"},"ts":1478524319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heycam|away: would be awesome if you could have a look at https://github.com/heycam/webidl/pull/221","msgtype":"m.text"},"ts":1478524329000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: I'm certainly hoping to improve the WebIDL spec to make it easier for people to consume and do the right thing.","msgtype":"m.text"},"ts":1478524552000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yes please","msgtype":"m.text"},"ts":1478524962000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"extremely glad you are on that","msgtype":"m.text"},"ts":1478524975000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it can help a lot","msgtype":"m.text"},"ts":1478524990000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: ideas welcome. I'm trying to add more notes to explain the reasoning behind things","msgtype":"m.text"},"ts":1478525013000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: feel like \"note for spec editors\" could be useful as well as more examples.","msgtype":"m.text"},"ts":1478525055000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"MikeSmith: the intro needs fixing","msgtype":"m.text"},"ts":1478525063000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"more examples would absolutely help","msgtype":"m.text"},"ts":1478525072000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: marking legacy stuff as such more clearly would also be a good thing","msgtype":"m.text"},"ts":1478525094000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, once we have the legacy platform object split sorted, actually marking getters/setters as legacy would be great","msgtype":"m.text"},"ts":1478525208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: where did you want Response or undefined again?","msgtype":"m.text"},"ts":1478525404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan__: https://github.com/heycam/webidl/issues/226","msgtype":"m.text"},"ts":1478525977000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"littledan__: might be interest","msgtype":"m.text"},"ts":1478525984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: caches.match, but also fetchEvent.preloadResponse","msgtype":"m.text"},"ts":1478526348000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: pinged you in an issue","msgtype":"m.text"},"ts":1478526373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: about undefined and IDL","msgtype":"m.text"},"ts":1478526380000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cheers, added to it","msgtype":"m.text"},"ts":1478526540000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Annevk, interesting, don't see a great solution","msgtype":"m.text"},"ts":1478534278000,"senderName":"littledan__","senderId":"littledan__@irc"},
{"content":{"body":"annevk, Domenic: Is the object implementing an interface with Global or PrimaryGlobal extended attribute:","msgtype":"m.text"},"ts":1478537611000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"1) a platform object","msgtype":"m.text"},"ts":1478537618000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"2) a legacy platform objct","msgtype":"m.text"},"ts":1478537624000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"3) something else","msgtype":"m.text"},"ts":1478537629000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"4) a legacy platform object if it has indexed props, a platform object otherwise","msgtype":"m.text"},"ts":1478537655000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"5) ... ?","msgtype":"m.text"},"ts":1478537671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: they will never have indexed/named props in practice; we should probably make that a normative requirement","msgtype":"m.text"},"ts":1478537822000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"er, tobie: ^","msgtype":"m.text"},"ts":1478537828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: I think it is an immutable prototype exotic object","msgtype":"m.text"},"ts":1478537853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but also a platform object","msgtype":"m.text"},"ts":1478537869000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"similar to how legacy platform objects are also platform objects","msgtype":"m.text"},"ts":1478537876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so they're platform object with a special prototype, right?","msgtype":"m.text"},"ts":1478537879000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"not a special prototype","msgtype":"m.text"},"ts":1478537885000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"a special [[SetPrototypeOf]]","msgtype":"m.text"},"ts":1478537889000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1478537901000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tries to grasp the nuance.","msgtype":"m.emote"},"ts":1478537909000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"[[SetPrototypeOf]]() is an internal method that, normally, sets this.[[Prototype]]","msgtype":"m.text"},"ts":1478537925000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yes.","msgtype":"m.text"},"ts":1478537935000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But for immutable prototype exotic objects, they have an overridden [[SetPrototypeOf]]() that throws an error","msgtype":"m.text"},"ts":1478537942000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#sec-immutable-prototype-exotic-objects","msgtype":"m.text"},"ts":1478537950000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think we end up with three categories of platform objects: \"non-exotic platform objects\", \"immutable prototype exotic objects\", and \"legacy platform objects\"","msgtype":"m.text"},"ts":1478537990000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess \"immutable prototype exotic platform objects\"","msgtype":"m.text"},"ts":1478538046000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"since Object.prototype is not an immutable prototype exotic **platform** object, just an immutable prototype exotic object","msgtype":"m.text"},"ts":1478538081000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/throws an error/returns false, which causes various callers, like Object.setPrototypeOf, to throw an error/","msgtype":"m.text"},"ts":1478538103000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the spec says: \"For every interface declared with the [Global] or [PrimaryGlobal] extended attribute that supports named properties,\" (https://heycam.github.io/webidl/#dfn-named-properties-object)","msgtype":"m.text"},"ts":1478538242000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: ah I see","msgtype":"m.text"},"ts":1478538261000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think I understand what this means, but the language needs to be fixed","msgtype":"m.text"},"ts":1478538296000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think that language is correct. What's incorrect is that all the other definitions don't say \"except not for globals\"","msgtype":"m.text"},"ts":1478538323000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: e.g. https://heycam.github.io/webidl/#getownproperty should not apply to globals","msgtype":"m.text"},"ts":1478538349000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: so if a global supports named properties, nothing about it becomes exotic (besides the unrelated exoticness of [[SetPrototypeOf]])","msgtype":"m.text"},"ts":1478538369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: instead, it just gets a special [[Prototype]] which is the named properties object","msgtype":"m.text"},"ts":1478538383000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: So can I get away with defining all legacy platform objects as have named/index props but are not Global or Primary Global?","msgtype":"m.text"},"ts":1478538481000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: correct","msgtype":"m.text"},"ts":1478538493000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: alright, right now the spec disallows named props on Globals or PrimaryGlobals, but not indexed props.","msgtype":"m.text"},"ts":1478538577000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Though there's no indexed props on any globals","msgtype":"m.text"},"ts":1478538600000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: so for the above definition to hold, I need to disallow that too as part of the same PR, agreed?","msgtype":"m.text"},"ts":1478538604000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"There are on WindowProxy, but that's fine","msgtype":"m.text"},"ts":1478538607000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"tobie: that seems good yes.","msgtype":"m.text"},"ts":1478538613000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: the spec shouldn't disallow named props on globals, but it should give them a different meaning.","msgtype":"m.text"},"ts":1478538624000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"named props on globals are for the globals vars, right?","msgtype":"m.text"},"ts":1478538671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"they're for id=\"\" and name=\"\"","msgtype":"m.text"},"ts":1478538681000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/browsers.html#named-access-on-the-window-object","msgtype":"m.text"},"ts":1478538699000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: OK. I think I got it.","msgtype":"m.text"},"ts":1478539119000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: Thanks","msgtype":"m.text"},"ts":1478539123000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1478539126000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"This is gonna be pretty nice","msgtype":"m.text"},"ts":1478539131000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://twitter.com/mikewest/status/795660581823016961","msgtype":"m.text"},"ts":1478539648000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Is [LegacyUnenumerableNamedProperties] appearing anywhere else than on globals, and are there globals with named props that don't have that extended attribute?","msgtype":"m.text"},"ts":1478539907000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It sort of feels redundant, but maybe I'm missing out on more fun.","msgtype":"m.text"},"ts":1478539934000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I don't quite remember... nox added it.","msgtype":"m.text"},"ts":1478540412000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: oh it's used several times in DOM","msgtype":"m.text"},"ts":1478540435000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: so yeah, was clearly missing out on the fun","msgtype":"m.text"},"ts":1478540495000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: sounds like mkwst has figured out the web","msgtype":"m.text"},"ts":1478540757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: [LegacyUnenumerableNamedProperties] is used for non-globals","msgtype":"m.text"},"ts":1478540791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: only Window has named properties","msgtype":"m.text"},"ts":1478540818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and frankly, I don't think we should allow any new global to have named properties)","msgtype":"m.text"},"ts":1478540833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah--Domenic mentioned it was used in Dom","msgtype":"m.text"},"ts":1478540841000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's used in HTML too for several things","msgtype":"m.text"},"ts":1478540856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: <form> for instance","msgtype":"m.text"},"ts":1478540872000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, form","msgtype":"m.text"},"ts":1478540890000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: yeah, I can see how that would be needed","msgtype":"m.text"},"ts":1478540922000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Wish I could write: LegacyPlatformObjectGetOwnProperty(|O|, |P|, false) instead of:","msgtype":"m.text"},"ts":1478541478000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Return the result of invoking the [=The LegacyPlatformObjectGetOwnProperty abstract operation|PlatformObjectGetOwnProperty=]","msgtype":"m.text"},"ts":1478541484000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"abstract operation with |O|, |P|, and <emu-val>false</emu-val> as arguments.","msgtype":"m.text"},"ts":1478541484000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: why can't you?","msgtype":"m.text"},"ts":1478541677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can I?","msgtype":"m.text"},"ts":1478541688000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: if you're going to do abstract operations you should go all the way","msgtype":"m.text"},"ts":1478541709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: HTML does this too for defining WindowProxy and Location","msgtype":"m.text"},"ts":1478541720000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And StructuredClone, come to think of it","msgtype":"m.text"},"ts":1478541736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That sounds much better","msgtype":"m.text"},"ts":1478541755000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: for IDL I'd basically draw a lot of inspiration from ECMAScript as you rewrite and fix things","msgtype":"m.text"},"ts":1478541854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: sgtm","msgtype":"m.text"},"ts":1478541923000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah definitely write it that way","msgtype":"m.text"},"ts":1478542198000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie, Domenic: Yeah made LegacyWhatsItsName to replace some prose with unenumerable properties.","msgtype":"m.text"},"ts":1478544822000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I still have trouble writing that word, unenumerable.","msgtype":"m.text"},"ts":1478544833000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: You should reject the change, it's just Bert being cranky/wrong.","msgtype":"m.text"},"ts":1478548361000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, Chrome throws when accessing cross-domain iframe.contentDocument","msgtype":"m.text"},"ts":1478550976000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"looks like per spec it should be just null","msgtype":"m.text"},"ts":1478551085000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"Is there any particular reason why HTML elements are using \"open\" boolean attribute rather than \"opened\"?","msgtype":"m.text"},"ts":1478552957000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"E.g. <dialog open> or <details open>","msgtype":"m.text"},"ts":1478552967000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I'm not native English speaker, but I thought both \"open\" and \"opened\" would be grammatically correct in this scenario","msgtype":"m.text"},"ts":1478553000000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"However, \"open\" is more ambiguous as it could be a method name as well","msgtype":"m.text"},"ts":1478553044000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek, what is a \"method name\" in the context of HTML?","msgtype":"m.text"},"ts":1478553364000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: window.open() for example","msgtype":"m.text"},"ts":1478553411000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"that is javascript","msgtype":"m.text"},"ts":1478553420000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"or rather, WebIDL","msgtype":"m.text"},"ts":1478553427000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"yeah, or DOM","msgtype":"m.text"},"ts":1478553433000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"but keep in mind that the \"open\" attribute is reflected as WebIDL property","msgtype":"m.text"},"ts":1478553461000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: Yes, either is correctly. \"open\" is more of a state term; \"opened\" is somewhat ambiguous, as it can refer to the current state *or* a past state.","msgtype":"m.text"},"ts":1478553470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like, if it was opened at any point, it might match \"opened\" (see: email read indicators), but it won't match \"open\" unless it is *currently* open.","msgtype":"m.text"},"ts":1478553522000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you could say the same about \"disabled\"","msgtype":"m.text"},"ts":1478553553000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"Yes, but we don't have a corresponding \"only current state\" term for being disabled.","msgtype":"m.text"},"ts":1478553576000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So we work with what we've got.","msgtype":"m.text"},"ts":1478553580000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Polymer seems to be using \"opened\": https://elements.polymer-project.org/elements/paper-dialog#property-opened","msgtype":"m.text"},"ts":1478553608000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I think this is the case with more libraries too","msgtype":"m.text"},"ts":1478553615000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"Heh - https://html.spec.whatwg.org/multipage/forms.html#anchor-points refers to the \"open() method\" which links to the open attribute","msgtype":"m.text"},"ts":1478553658000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"i... don't think this is a good change","msgtype":"m.text"},"ts":1478553661000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"to the HTML spec","msgtype":"m.text"},"ts":1478553670000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"very backwards-incompatible for little gain(?)","msgtype":"m.text"},"ts":1478553702000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: so do I, it's way to late. I'm just trying to understand the rationale","msgtype":"m.text"},"ts":1478553706000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jsbell: That looks like a bug. Report it?","msgtype":"m.text"},"ts":1478553739000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: doing so","msgtype":"m.text"},"ts":1478553745000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jarek: might be as simple as something that was not fully considered","msgtype":"m.text"},"ts":1478553876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's also interesting to note that it only has an open boolean attribute, but not close/closed","msgtype":"m.text"},"ts":1478553958000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"i think it's just because the default state is closed","msgtype":"m.text"},"ts":1478553971000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"so no need to specify","msgtype":"m.text"},"ts":1478553975000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"it can just use close instead of open","msgtype":"m.text"},"ts":1478554013000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"BTW, why boolean attributes are serialized to e.g. `<dialog open=\"\">` rather than `<dialog open>`, is this a standard behavior?","msgtype":"m.text"},"ts":1478554391000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"This looks confusing to me because the spec is using `<dialog open>` format in all examples","msgtype":"m.text"},"ts":1478554422000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"by serialized, I mean e.g. element.outerHTML","msgtype":"m.text"},"ts":1478554464000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I found this: https://www.w3.org/TR/html5/single-page.html#html-fragment-serialization-algorithm","msgtype":"m.text"},"ts":1478554581000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"but it doesn't seem to mention how boolean attributes should be serialized","msgtype":"m.text"},"ts":1478554598000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"No, wait... it does: For each attribute that the element has, append a U+0020 SPACE character, the attribute's serialized name as described below, a \"=\" (U+003D) character, a U+0022 QUOTATION MARK character (\"), the attribute's value, escaped as described below in attribute mode, and a second U+0022 QUOTATION MARK character (\").","msgtype":"m.text"},"ts":1478554642000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"this seems unnecessarily verbose and inconsistent to me","msgtype":"m.text"},"ts":1478554868000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"\"Please leave your sense of logic at the door, thanks!\"","msgtype":"m.text"},"ts":1478554929000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"sometimes specs are written that way just because decisions were made, then propagated to all existing webpages you see nowadays","msgtype":"m.text"},"ts":1478554998000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"jarek, this is relevant","msgtype":"m.text"},"ts":1478555096000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/introduction.html#design-notes","msgtype":"m.text"},"ts":1478555097000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"also, the equivalent WHATWG section of your linked spec is https://html.spec.whatwg.org/multipage/syntax.html#serialising-html-fragments","msgtype":"m.text"},"ts":1478555157000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"KiChjang: I guess it was defined this way to make it compatible with XML somehow?","msgtype":"m.text"},"ts":1478555519000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"it may have been the case where boolean attributes did not exist in the first few versions of HTML","msgtype":"m.text"},"ts":1478555543000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"and the serializers were never patched or fixed for the case of encountering a boolean attribute","msgtype":"m.text"},"ts":1478555576000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"on the bright side, it could be much worse, e.g. `<dialog open=\"open\">`","msgtype":"m.text"},"ts":1478555619000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"or even <DIALOG OPEN=\"OPEN\">","msgtype":"m.text"},"ts":1478555648000,"senderName":"jarek","senderId":"jarek@irc"}
]