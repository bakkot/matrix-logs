[
{"content":{"body":"zewt: please give rationale","msgtype":"m.text"},"ts":1381909773000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"marcosc, squash, not squish ;)","msgtype":"m.text"},"ts":1381909890000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: should be \"squished\"","msgtype":"m.text"},"ts":1381909914000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"it's much cutter and sounds less mean","msgtype":"m.text"},"ts":1381909927000,"senderName":"marcosc","senderId":"marcosc@irc"},
{"content":{"body":"zcorpan: Errors should not pass silently","msgtype":"m.text"},"ts":1381910728000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: ...because?","msgtype":"m.text"},"ts":1381910765000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Code that \"works\" and eg. looks for id=\"undefined\" will be harder to debug than one that just throws with an explicit error","msgtype":"m.text"},"ts":1381910798000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"ok, so what do you think should happen for CSS.escape(window) ?","msgtype":"m.text"},"ts":1381910831000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"This brings the symptom of the error closer to the source","msgtype":"m.text"},"ts":1381910848000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"does window have .toString?","msgtype":"m.text"},"ts":1381910861000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1381910872000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it usually stringifies to [object Window]","msgtype":"m.text"},"ts":1381910882000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I don’t know, this case is less clear-cut","msgtype":"m.text"},"ts":1381910956000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"is the convention to strictly only accept strings, or anything that can be converted to a string?","msgtype":"m.text"},"ts":1381910985000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"the latter","msgtype":"m.text"},"ts":1381911005000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"except for undefined, which is different for different APIs","msgtype":"m.text"},"ts":1381911036000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"In that case I suppose CSS.escape(window) would be \"\\\\[object\\\\ Window\\\\]\"","msgtype":"m.text"},"ts":1381911064000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"zcorpan: seems like it should be undefined","msgtype":"m.text"},"ts":1381911065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: and it is","msgtype":"m.text"},"ts":1381911072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: that's how ToString works","msgtype":"m.text"},"ts":1381911081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JavaScript doesn't do type checking, it just does type coercions all over","msgtype":"m.text"},"ts":1381911109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: so how is it different from undefined from the being-in-error and debug-ability point of view?","msgtype":"m.text"},"ts":1381911114000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but undefined may be a common enough source of errors that it’s worth a special case","msgtype":"m.text"},"ts":1381911125000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"o_O","msgtype":"m.text"},"ts":1381911132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"IMO","msgtype":"m.text"},"ts":1381911142000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"you’re less likely to accidentally end up with window instead of a string than undefined","msgtype":"m.text"},"ts":1381911174000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"is it less likely to accidentally end up with anything other than a string and undefined compared to undefined?","msgtype":"m.text"},"ts":1381911289000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think so, but I may be wrong","msgtype":"m.text"},"ts":1381911355000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I don’t write that much JS","msgtype":"m.text"},"ts":1381911359000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"bholley: we'd have to narrow the case where the adopt would throw as otherwise many operations that route through adopt would not work, which would suck","msgtype":"m.text"},"ts":1381916419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can you explain a bit more?","msgtype":"m.text"},"ts":1381916451000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: e.g. whenever you appendChild, adopt is used","msgtype":"m.text"},"ts":1381916465000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yes, I'm aware - that's the whole issue, really","msgtype":"m.text"},"ts":1381916473000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: people rarely adopt just to adopt","msgtype":"m.text"},"ts":1381916482000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: if the glabal object is the same, there doesn't seem to be an issue","msgtype":"m.text"},"ts":1381916485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh, adopt happens even for same-global?","msgtype":"m.text"},"ts":1381916496000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: so we should limit throwing for custom elements only if the global object changes","msgtype":"m.text"},"ts":1381916500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: right","msgtype":"m.text"},"ts":1381916504000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: that was my intention, sorry","msgtype":"m.text"},"ts":1381916511000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: I thought that the adopt was only triggered in the cross-global case","msgtype":"m.text"},"ts":1381916521000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: well, technically cross-document","msgtype":"m.text"},"ts":1381916528000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: are there significant ways in which those cases differ?","msgtype":"m.text"},"ts":1381916537000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: no, adopt does things like changing the document and removing from parent","msgtype":"m.text"},"ts":1381916539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ie document fragment?","msgtype":"m.text"},"ts":1381916548000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: yeah, createDocument","msgtype":"m.text"},"ts":1381916550000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: and HTML imports","msgtype":"m.text"},"ts":1381916557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: and new Document() once we have that","msgtype":"m.text"},"ts":1381916573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, sure","msgtype":"m.text"},"ts":1381916586000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: that's fine with me","msgtype":"m.text"},"ts":1381916590000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: assuming we do that, do you think throwing would be ok?","msgtype":"m.text"},"ts":1381916598000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"have to think about that some more","msgtype":"m.text"},"ts":1381916693000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kinda depends on where we want to steer the whole thing I think","msgtype":"m.text"},"ts":1381916703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"treat sync access between multiple globals as a bug, or embrace it and make it work","msgtype":"m.text"},"ts":1381916721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"should prolly be discussed on es-discuss","msgtype":"m.text"},"ts":1381916752000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or public-script-coord","msgtype":"m.text"},"ts":1381916760000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ugh, I feel like that's not going to really go anywhere","msgtype":"m.text"},"ts":1381916777000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: because if we abstract this into a more vague discussion of values, it will devolve again into the specific considerations","msgtype":"m.text"},"ts":1381916797000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: and then we're back at this bug","msgtype":"m.text"},"ts":1381916802000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: moreover, we can always spec that something throws and then change it later","msgtype":"m.text"},"ts":1381916843000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: whereas we can't unsupport something we decide to support","msgtype":"m.text"},"ts":1381916853000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: sure, throwing seems safe for now, but I also think we should have the larger discussion","msgtype":"m.text"},"ts":1381916921000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: as it'll impact other APIs to come","msgtype":"m.text"},"ts":1381916945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm also not totally clear which high-level outcome results in which course of action here - can you elaborate on your thinking?","msgtype":"m.text"},"ts":1381916997000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: the main goal of involving more people would be to create better shared understanding and push towards a common goal; be that reducing memory leaks at all costs or making multiple globals work in the best way possible somehow","msgtype":"m.text"},"ts":1381917239000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: I'm pretty sure we'll keep revisiting this if we don't reach out to the wider community around JavaScript","msgtype":"m.text"},"ts":1381917284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: FWIW, I kind of feel that fixing up the prototypes _is_ \"making multiple globals work in the best way possible somehow\"","msgtype":"m.text"},"ts":1381917312000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: it's not just about memory leaks","msgtype":"m.text"},"ts":1381917328000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: though that's my primary concern","msgtype":"m.text"},"ts":1381917334000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"To the extent that they differ, it's not clear that either of those is the correct goal","msgtype":"m.text"},"ts":1381917334000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: it's also about the API making sense","msgtype":"m.text"},"ts":1381917347000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"I think it makes a lot of sense for trees, though Brendan didn't like that bug much, though he may not have studied the details","msgtype":"m.text"},"ts":1381917355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: trees?","msgtype":"m.text"},"ts":1381917369000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"I mean, if there is an option that makes it reasonably easy to avoid memory leaks but also provides the features that people want that's better than either","msgtype":"m.text"},"ts":1381917370000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"bholley: that nodes share the same global","msgtype":"m.text"},"ts":1381917399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I still don't follow","msgtype":"m.text"},"ts":1381917452000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk, jgraham: in my mind, the fundamental issues is that bindings are per-document. It's kind of non-sensical to pull a binding out of a document in that context","msgtype":"m.text"},"ts":1381917486000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"the only options are to (a) strip the binding, or (b) not allow them to leave the document","msgtype":"m.text"},"ts":1381917499000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: I think it makes sense to prototypes. People in TC39 seemed to have reservations about that bug which is why I'd like to discuss it with them","msgtype":"m.text"},"ts":1381917499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"to change prototypes*","msgtype":"m.text"},"ts":1381917515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1381917519000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"(a) is apparently tricky due to the reasons that Dominic described","msgtype":"m.text"},"ts":1381917530000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"I think it's important to have TC39 on board, as they'll be diving into the multiple global territory and we don't want to revisit this each year.","msgtype":"m.text"},"ts":1381917556000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, back in a bit, need to get some yoghurt from the office...","msgtype":"m.text"},"ts":1381917612000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but","msgtype":"m.text"},"ts":1381917619000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: will JS ever have a concept of adopt?","msgtype":"m.text"},"ts":1381917626000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: if it doesn't, then the issue is moot","msgtype":"m.text"},"ts":1381917635000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"I don't know, anyway, biab","msgtype":"m.text"},"ts":1381917800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Since someobject.propertyThatDoesntExist is undefined in js foo(undefined) is a way easier bug to have than foo(window)","msgtype":"m.text"},"ts":1381917854000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And throwing tells you what the error is right away rather than getting a nonsense result much later in the code","msgtype":"m.text"},"ts":1381917889000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk-cloud: ok","msgtype":"m.text"},"ts":1381917917000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"jgraham: yeah, it seems plausible that undefined is a more common error","msgtype":"m.text"},"ts":1381918012000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: still, encodeURIComponent(undefined) doesn't throw and seems to be in the same position as CSS.escape(undefined)","msgtype":"m.text"},"ts":1381918082000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: It depends how important you think it is to be consistent with poor design decisions in the stdlib vs how important you think it is to be consistent with the DOM and provide a useful API","msgtype":"m.text"},"ts":1381918390000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Treating undefined as \"undefined\" is what we do everywhere for DOMString.","msgtype":"m.text"},"ts":1381918749000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The only case you could make is making the argument optional, but there doesn't seem to be much of a reason for that.","msgtype":"m.text"},"ts":1381918767000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And when you make it optional, then you have the question of the default","msgtype":"m.text"},"ts":1381918802000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Simple test: .<script>document.body.innerHTML = undefined</script>","msgtype":"m.text"},"ts":1381918824000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: innerHTML isn't a method, and CSS.escape() doesn't have its argument optional (currently)","msgtype":"m.text"},"ts":1381918928000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Well if it's consistent with everything on the platform I guess we have to do that. But oh boy is that a sucky design","msgtype":"m.text"},"ts":1381918929000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: innerHTML is a getter and setter, same thing","msgtype":"m.text"},"ts":1381918959000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: but find a method that takes a DOMString and you'll find out how IDL works","msgtype":"m.text"},"ts":1381918970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's not consistent with everything else. document.getElementById(undefined) throws (per spec, at least)","msgtype":"m.text"},"ts":1381918999000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Eh?","msgtype":"m.text"},"ts":1381919028000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Doesn't seem to","msgtype":"m.text"},"ts":1381919040000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think the IDL spec changed at some point","msgtype":"m.text"},"ts":1381919077000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Only for optional arguments","msgtype":"m.text"},"ts":1381919089000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah, i thought it made undefined mean omitted even for non-optional argument","msgtype":"m.text"},"ts":1381919141000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I'm pretty sure it didn't","msgtype":"m.text"},"ts":1381919161000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ok so CSS.escape() throws TypeError but CSS.escape(undefined) gives \"undefined\" (per current spec)","msgtype":"m.text"},"ts":1381919243000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"sgtm","msgtype":"m.text"},"ts":1381919255000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"For those following at home, that is *also* inconsistent with escape() and encodeURIComponent()","msgtype":"m.text"},"ts":1381919463000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1381919542000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"CSS.escape(undefined) MUST be the same as CSS.escape()","msgtype":"m.text"},"ts":1381927812000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Nah","msgtype":"m.text"},"ts":1381927837000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"WebKit used to do that, it's stupid","msgtype":"m.text"},"ts":1381927892000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"O_o","msgtype":"m.text"},"ts":1381927899000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That is just ... how JS works... when you don't pass an argument, it's undefined ...","msgtype":"m.text"},"ts":1381927908000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Anything else is MEGA surprising.","msgtype":"m.text"},"ts":1381927917000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Is this something that causes you lots of problems with every other DOM function?","msgtype":"m.text"},"ts":1381928385000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yes!!","msgtype":"m.text"},"ts":1381928451000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it breaks transparent composability","msgtype":"m.text"},"ts":1381928460000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"you need to do function (x, y) { if (y === undefined) { domFunc(x); } else { domFunc(x, y); } }","msgtype":"m.text"},"ts":1381928486000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I am failing to understand the problem","msgtype":"m.text"},"ts":1381928551000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it creates a combinatorial explosion every time you want to forward arguments to a DOM function","msgtype":"m.text"},"ts":1381928569000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"You can't use undefined like a None type here anyway","msgtype":"m.text"},"ts":1381928577000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Since it is stringified","msgtype":"m.text"},"ts":1381928585000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"We're talking about the general case right now","msgtype":"m.text"},"ts":1381928625000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1381928629000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Forwarding arguments should be as simple as function (x, y, z, w) { domFunc(x, y, z, w); }","msgtype":"m.text"},"ts":1381928642000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"But in general you can't use undefined like a None type","msgtype":"m.text"},"ts":1381928646000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Sure you can, with normal JS functions","msgtype":"m.text"},"ts":1381928655000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1381928665000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"With the rules that make undefined and omitted different, you need ifs","msgtype":"m.text"},"ts":1381928665000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Nah, it should be function(...arguments) { domFunc(...arguments) }","msgtype":"m.text"},"ts":1381928670000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If there is magic type conversion","msgtype":"m.text"},"ts":1381928684000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: OK, please extend my example to be slightly more complicated, e.g. transforming y to y + 1","msgtype":"m.text"},"ts":1381928693000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham: there's nothing magic about it. If undefined goes into my function, it should go into the DOM function","msgtype":"m.text"},"ts":1381928707000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"gtg commute to work... be back later","msgtype":"m.text"},"ts":1381928750000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"If undefined goes into your function and it is going to call the DOM function with the wrong number of arguments, there is a bug in your code","msgtype":"m.text"},"ts":1381928764000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"this combinatorial explosion avoidance is the main reason default parameters in ES use undefined as the default value trigger, BTW.","msgtype":"m.text"},"ts":1381928772000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I don't understand why you want to make that hard to notice","msgtype":"m.text"},"ts":1381928783000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"there is no such thing as \"wrong number of arguments\"","msgtype":"m.text"},"ts":1381928783000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the number of arguments is not actually something functions care about","msgtype":"m.text"},"ts":1381928790000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: your example doesn't invoke domFunc without arguments, so i don't see the problem","msgtype":"m.text"},"ts":1381928795000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"there are some arguments that have values, and the rest of them have undefined, out to infinity","msgtype":"m.text"},"ts":1381928801000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"aggh really got to go ttyl","msgtype":"m.text"},"ts":1381928809000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That's an ironic point of view given Function.length","msgtype":"m.text"},"ts":1381928827000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think Domenic_'s point is better discussed at the IDL-level and not for this individual method","msgtype":"m.text"},"ts":1381928861000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And therefore public-script-coord⊙wo is prolly a better fora than here","msgtype":"m.text"},"ts":1381928876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: public-script-coord is a single forum.","msgtype":"m.text"},"ts":1381928889000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: The discussion is already happening on public-script-coord","msgtype":"m.text"},"ts":1381928896000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I don't see why you are trying to shut down discussion here","msgtype":"m.text"},"ts":1381928906000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Shut down? Relax man, I just said prolly ;-)","msgtype":"m.text"},"ts":1381928935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is the problem not deeper than this? Is this not caused by the fact that WebIDL (and the DOM generally) relies on overloads, and hence different numbers of arguments must have different meanings, and somehow the callee must recognize the number of arguments given?","msgtype":"m.text"},"ts":1381928993000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"doesn't know if he's even subscribed to public-script-coord now","msgtype":"m.emote"},"ts":1381929021000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Script libraries do that too of course","msgtype":"m.text"},"ts":1381929022000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"There's nothing to stop a js library from throwing with no argument but not throwing with undefined","msgtype":"m.text"},"ts":1381929047000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or doing something totally different for the two cases","msgtype":"m.text"},"ts":1381929082000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i guess webidl does what Domenic_ wants when there are optional arguments.","msgtype":"m.text"},"ts":1381929157000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Treating () and (undefined) the same seems feasible given that WebKit has done it for a long time. Just need more eyeballs to measure to impact.","msgtype":"m.text"},"ts":1381929181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"feasible, sure. desired? not so clear. this has been discussed and resolved to what webidl has now, some time ago (although i can't find the relevant thread now)","msgtype":"m.text"},"ts":1381929281000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Well yeah, \"some time ago\" we also decided undefined and omitted arguments would be different. I think it's pretty clear what the answer would be now.","msgtype":"m.text"},"ts":1381929440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: you mean for optional arguments?","msgtype":"m.text"},"ts":1381929516000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Right, we already fixed optional arguments.","msgtype":"m.text"},"ts":1381929582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<Domenic_> That is just ... how JS works... when you don't pass an argument, it's undefined ... <- that's irrelevant; the function *itself* can do whatever it wants with the argument (such as throwing a TypeError if an argument that's supposed to be one thing isn't)","msgtype":"m.text"},"ts":1381932276000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"for example, new Event() throws, it doesn't create an event with a name of \"undefined\", which would be useless and make what is definitely a programming error harder to notice","msgtype":"m.text"},"ts":1381932313000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"though new Event(undefined) doesn't throw and also makes what's likely an error hard to notice","msgtype":"m.text"},"ts":1381932401000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dunno if that carries much weight","msgtype":"m.text"},"ts":1381932408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Having types in general would make debugging much better, but it seems unlikely JS will get them.","msgtype":"m.text"},"ts":1381932455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Having required arguments be part of the language might be feasible however.","msgtype":"m.text"},"ts":1381932476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if the argument is required, both undefined and missing should give a TypeError","msgtype":"m.text"},"ts":1381932486000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if it is optional, both undefined and missing should trigger the default","msgtype":"m.text"},"ts":1381932494000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"That seems reasonable","msgtype":"m.text"},"ts":1381932526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no objections there","msgtype":"m.text"},"ts":1381932554000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I would totally support that","msgtype":"m.text"},"ts":1381932557000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I would rather more arguments be optional than are currently, but am willing to delay that battle indefinitely in favor of fixing the mega-WTF of separate undefined/missing behavior.","msgtype":"m.text"},"ts":1381932558000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"OK cool, sudden agreement :D","msgtype":"m.text"},"ts":1381932565000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Nah, you made a better proposal :-)","msgtype":"m.text"},"ts":1381932582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well not really, because WebIDL says that explicit undefined is coerced","msgtype":"m.text"},"ts":1381932585000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: so, agreement between everyone excepting WebIDL? :P","msgtype":"m.text"},"ts":1381932605000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Something like that :)","msgtype":"m.text"},"ts":1381932614000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Shall I file a bug?","msgtype":"m.text"},"ts":1381932646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"files a bug","msgtype":"m.emote"},"ts":1381932673000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"xhr open() seems to be another one","msgtype":"m.text"},"ts":1381932678000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(throws TypeError if there's no argument)","msgtype":"m.text"},"ts":1381932708000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"afk, work","msgtype":"m.text"},"ts":1381932716000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23532","msgtype":"m.text"},"ts":1381932780000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, webidl does seem to throw TypeError for missing (not undefined) arguments (4.5.1.1), but that doesn't seem like what most APIs do (unless I'm missing something in WebIDL, which is likely)","msgtype":"m.text"},"ts":1381935605000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I don't know about \"most\", but at the least \"many\" do","msgtype":"m.text"},"ts":1381935663000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"yeah it seems to vary","msgtype":"m.text"},"ts":1381935688000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"At least in Gecko. And in presto (although it was some weird custom error)","msgtype":"m.text"},"ts":1381935688000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"webgl does","msgtype":"m.text"},"ts":1381935690000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"or maybe I'm just confused by the earlier conversation","msgtype":"m.text"},"ts":1381935711000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"getElement[s]By*() do","msgtype":"m.text"},"ts":1381935721000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(which was \"what? you can't make CSS.escape() throw instead of returning \"undefined\", that's crazy!\")","msgtype":"m.text"},"ts":1381935741000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"So I think the tension arises from the fact that the javascript stdlib doesn't throw for missing arguments","msgtype":"m.text"},"ts":1381935909000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(or, depending on your point of view, that javascript doesn't have a concept of missing arguments, even though it clearly exposes information about which arguments were passed and which weren't)","msgtype":"m.text"},"ts":1381936000000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"it only does that through the arguments object, which is being slowly killed","msgtype":"m.text"},"ts":1381936344000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"e.g. if you use any ES6 features in your function parameters, like defaults or spread or destructuring, you get no arguments object.","msgtype":"m.text"},"ts":1381936365000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: do those also nullify arguments.length?","msgtype":"m.text"},"ts":1381936610000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: sorry, Function.length","msgtype":"m.text"},"ts":1381936622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: see e.g. http://lists.w3.org/Archives/Public/public-script-coord/2013JulSep/0724.html","msgtype":"m.text"},"ts":1381936656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no, function.length is still defined, and still as useless as ever.","msgtype":"m.text"},"ts":1381936658000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but there's no way inside a function that uses ES6 features to determine whether undefined was passed or that argument was omitted","msgtype":"m.text"},"ts":1381936691000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yeah, Function.length is static for the function - it doesn't depend on the number of arguments passed.","msgtype":"m.text"},"ts":1381936886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(why do people keep capitalizing Function.length, it's not a property of the Function constructor...)","msgtype":"m.text"},"ts":1381936906000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Function#length","msgtype":"m.text"},"ts":1381936914000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because typing out Function.prototype.length is annoying. ^_^","msgtype":"m.text"},"ts":1381936924000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well it's not on the prototype either","msgtype":"m.text"},"ts":1381936933000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Close enough.","msgtype":"m.text"},"ts":1381936944000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What's the way to refer to instances?","msgtype":"m.text"},"ts":1381936964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Point being, \"Foo\" is sometimes used informally as a stand-in for \"an arbitrary instance of Foo\".","msgtype":"m.text"},"ts":1381936967000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"function.length or functionInstance.length","msgtype":"m.text"},"ts":1381936972000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"myFunction.length","msgtype":"m.text"},"ts":1381936987000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that's kinda sad notation-wise but okay","msgtype":"m.text"},"ts":1381936989000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean you wouldn't say Document.createElement","msgtype":"m.text"},"ts":1381937021000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah, what TabAtkins says, though I'm not very consistent about it","msgtype":"m.text"},"ts":1381937023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I guess I try to go with Document.prototype.createElement these days","msgtype":"m.text"},"ts":1381937047000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"document is a singleton (ish), so that's easier","msgtype":"m.text"},"ts":1381937049000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1381937072000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"anyway this is silly, didn't mean to spawn extended discussion on capitalization of a single character :P","msgtype":"m.text"},"ts":1381937093000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: To be fair, it might be two or three characters, if the class name is multi-word.","msgtype":"m.text"},"ts":1381937157000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1381937173000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: ping","msgtype":"m.text"},"ts":1381937449000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: hey","msgtype":"m.text"},"ts":1381937454000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: as noted in the thread, I believe that we should disallow freezing dom objects","msgtype":"m.text"},"ts":1381937473000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: I think that's already the case per IDL","msgtype":"m.text"},"ts":1381937480000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, great","msgtype":"m.text"},"ts":1381937487000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: WebIDL specs this?","msgtype":"m.text"},"ts":1381937496000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: \"Platform array objects cannot be fixed; if Object.freeze, Object.seal or Object.preventExtensions is called on one, the function MUST throw a TypeError.\"","msgtype":"m.text"},"ts":1381937525000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: great!","msgtype":"m.text"},"ts":1381937533000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"oh wait, that's array","msgtype":"m.text"},"ts":1381937536000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1381937555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"also goes for \"Platform objects implementing an interface that supports indexed or named properties cannot be fixed\"","msgtype":"m.text"},"ts":1381937573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"doesn't say anything that would apply to Node","msgtype":"m.text"},"ts":1381937583000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: so no...","msgtype":"m.text"},"ts":1381937596000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1381937630000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: I'll file a bug on WebIDL","msgtype":"m.text"},"ts":1381937651000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: which tracker is it? w3?","msgtype":"m.text"},"ts":1381937656000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: there's a link at the top of the spec","msgtype":"m.text"},"ts":1381937666000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, cool","msgtype":"m.text"},"ts":1381937674000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: https://www.w3.org/Bugs/Public/enter_bug.cgi?product=WebAppsWG&component=WebIDL","msgtype":"m.text"},"ts":1381937675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do you agree, btw?","msgtype":"m.text"},"ts":1381937679000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: don't really care about those ES5 features","msgtype":"m.text"},"ts":1381937695000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so you don't mind just rejecting them for the DOM to give us more flexibility?","msgtype":"m.text"},"ts":1381937722000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: they have strange names and don't really do what you expect them to be doing and half of TC39 seems to shrug at them","msgtype":"m.text"},"ts":1381937722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: right, I don't mind","msgtype":"m.text"},"ts":1381937745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: k","msgtype":"m.text"},"ts":1381937751000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"you can't stop Object.seal","msgtype":"m.text"},"ts":1381938134000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"You can stop preventExtensions","msgtype":"m.text"},"ts":1381938146000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"and thus stop that part of the freezing process","msgtype":"m.text"},"ts":1381938155000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but you can always make a property non-configurable/non-writable, even proxies can't prevent that","msgtype":"m.text"},"ts":1381938175000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: ^","msgtype":"m.text"},"ts":1381938182000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: seems false in implementations","msgtype":"m.text"},"ts":1381938222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"as in, DOM objects are not implementable with proxies?","msgtype":"m.text"},"ts":1381938239000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"In Gecko Object.seal(window) throws","msgtype":"m.text"},"ts":1381938246000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does not seem to throw in Chrome though","msgtype":"m.text"},"ts":1381938256000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"no i lied, you could make a proxy with a throwing defineOwnProperty trap","msgtype":"m.text"},"ts":1381938453000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"A bit unfortunate all platform objects would have to become proxies with overriden defineOwnProperty traps though","msgtype":"m.text"},"ts":1381938468000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bholley: maybe you should request a hook for it, so we'd only use it on Node","msgtype":"m.text"},"ts":1381938499000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, and all the objects Node can hold, such as DOMTokenList","msgtype":"m.text"},"ts":1381938546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: seems like this would be problematic once <input type=file>.files becomes an actual JS Array","msgtype":"m.text"},"ts":1381938577000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shakes fist at multiple globals","msgtype":"m.emote"},"ts":1381938622000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"from what i'm reading you just want Node to be a proxy with a throwing preventExtensions trap?","msgtype":"m.text"},"ts":1381938732000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"that would allow its proto to be changed later","msgtype":"m.text"},"ts":1381938739000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: not just Node, but everything attached to Node too","msgtype":"m.text"},"ts":1381938754000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right :(","msgtype":"m.text"},"ts":1381938761000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: so there's no references to the other global","msgtype":"m.text"},"ts":1381938764000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, browser engineering is pretty much sad times all the time. Fortunately the web is full of cats tripping themselves.","msgtype":"m.text"},"ts":1381938976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hard to take anyone seriously when they say \"we talked about this before, read the notes from the f2f\"","msgtype":"m.text"},"ts":1381939071000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Well you can't really expect past stuff to be explained over and over again","msgtype":"m.text"},"ts":1381939248000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, but saying \"we discussed this in a meeting and you weren't invited\" is pretty much like saying \"fuck you\"","msgtype":"m.text"},"ts":1381939280000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Even if there are notes","msgtype":"m.text"},"ts":1381939291000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"arv ^","msgtype":"m.text"},"ts":1381939302000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham: every JS decision I've seen is backed by plenty of mailing list debate which is open to all","msgtype":"m.text"},"ts":1381939340000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: they should just move to async-decisions entirely, but the way the thing works it's pretty much async","msgtype":"m.text"},"ts":1381939369000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I agree that anyone can join in on the mailing list. But I stand by my point","msgtype":"m.text"},"ts":1381939425000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: e.g. decision on promises was just reiterating what was already said async and then we moved on","msgtype":"m.text"},"ts":1381939452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Plenty of things around TC 39 are effectively finalized in F2F meetings, often with some arguments going totally unaddressed.","msgtype":"m.text"},"ts":1381939511000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"should I really be surprised that it's 2013 and browsers still apparently don't support resuming downloads?","msgtype":"m.text"},"ts":1381939550000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"gsnedders: if you notice that happening please raise it","msgtype":"m.text"},"ts":1381939588000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: that seems suboptimal","msgtype":"m.text"},"ts":1381939594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: I thought they did? Just many servers don't support partial requests.","msgtype":"m.text"},"ts":1381939609000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"\"ReferenceError: undefined_variable is not defined\"","msgtype":"m.text"},"ts":1381939612000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: I haven't read es-discuss in ages, and don't really care nowadays.","msgtype":"m.text"},"ts":1381939623000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"downloading from nginx, which definitely does","msgtype":"m.text"},"ts":1381939623000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"gsnedders: okay, so things might have changed for the better","msgtype":"m.text"},"ts":1381939654000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: Are you sure the browser can tell the resource is unchanged?","msgtype":"m.text"},"ts":1381939658000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: At least stuff like Object.prototype.__proto__ was effectively decided in F2F until more or less overnight all JS engines went against the decision.","msgtype":"m.text"},"ts":1381939710000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"not entirely, but it does have a correct Last-Modified","msgtype":"m.text"},"ts":1381939713000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no ETag or cache headers though","msgtype":"m.text"},"ts":1381939719000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: And that was a year and a half ago or so?","msgtype":"m.text"},"ts":1381939723000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zewt: Are resources cachable by default? I forget.","msgtype":"m.text"},"ts":1381939737000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: my experience is about five months :-)","msgtype":"m.text"},"ts":1381939745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i forget too, it's probably something akin to must-revalidate","msgtype":"m.text"},"ts":1381939763000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(and I'm going to miss what would've been my third meeting)","msgtype":"m.text"},"ts":1381939763000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: es-discuss takes too much time having to consider PL theory, at least before. Maybe as we're close to final it's not so much now.","msgtype":"m.text"},"ts":1381939800000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: And I attended no meetings, not working for a member. :)","msgtype":"m.text"},"ts":1381939814000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: why can't we do it on any IDL-defined type?","msgtype":"m.text"},"ts":1381939925000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: so Domenic_ and others care for the ability to express platform APIs fully in terms of JS","msgtype":"m.text"},"ts":1381939964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: overriding what Object.seal() and such do requires the usage of JS proxies to do that","msgtype":"m.text"},"ts":1381940000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: JS proxies should really be a last resort in API design and not really used for anything that doesn't actually need it","msgtype":"m.text"},"ts":1381940021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can DOM objects as they stand be implemented without proxies?","msgtype":"m.text"},"ts":1381940069000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: like nodes","msgtype":"m.text"},"ts":1381940074000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: as in - would  this added requirement move it from possible to impossible?","msgtype":"m.text"},"ts":1381940106000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: Most of the DOM cannot. Some Nodes cans, others cannot.","msgtype":"m.text"},"ts":1381940116000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"bholley: so e.g. HTMLFormElement requires a proxy for sure, I'm not sure about Element in general, I don't think it does, though there are some things about branding that are not fully explained yet","msgtype":"m.text"},"ts":1381940160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: which nodes cannot? The only thing I can think of is document.all","msgtype":"m.text"},"ts":1381940167000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"gsnedders: oh nevermind misread","msgtype":"m.text"},"ts":1381940175000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bholley: there's a couple of proof of concepts of how branding (type checks) can be done through WeakMap, but not fully worked out afaik","msgtype":"m.text"},"ts":1381940201000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: My grammar is terrible. :)","msgtype":"m.text"},"ts":1381940217000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: basically, my feeling is that if we disallow freezing for Nodes and for Window, we've disallowed it for a good chunk of the DOM","msgtype":"m.text"},"ts":1381940240000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: I think it's pretty fully worked out","msgtype":"m.text"},"ts":1381940249000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: at which point we should just disallow it for everything","msgtype":"m.text"},"ts":1381940256000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: well, consider e.g. my <input type=file>.files thing that will return a regular JS Array","msgtype":"m.text"},"ts":1381940313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: or ele.query() which will return an JS Array subclass","msgtype":"m.text"},"ts":1381940332000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: the lines are blurring","msgtype":"m.text"},"ts":1381940346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: hm","msgtype":"m.text"},"ts":1381940355000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: it's true that they are","msgtype":"m.text"},"ts":1381940367000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"(btw, <input type=file> adoption could maybe just clear .files)","msgtype":"m.text"},"ts":1381940403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and create a fresh array)","msgtype":"m.text"},"ts":1381940409000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah. Are there any other cases where reparenting could theoretically involve reparenting a non-node?","msgtype":"m.text"},"ts":1381940444000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"I guess .style","msgtype":"m.text"},"ts":1381940447000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"also .classList","msgtype":"m.text"},"ts":1381940460000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and .relList etc.","msgtype":"m.text"},"ts":1381940473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Wait isn't classList on the prototype","msgtype":"m.text"},"ts":1381940484000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i.e. it's a getter that returns an internal representation","msgtype":"m.text"},"ts":1381940492000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: I would be opposed to leaving those things in the old scope","msgtype":"m.text"},"ts":1381940492000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: and just generating new ones","msgtype":"m.text"},"ts":1381940497000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: I don't think identity matters","msgtype":"m.text"},"ts":1381940503000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: er, sorry","msgtype":"m.text"},"ts":1381940511000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: _wouldn't_ be opposed","msgtype":"m.text"},"ts":1381940518000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: k","msgtype":"m.text"},"ts":1381940528000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: it returns an actual object though, and getting it twice will give you the same, but what bholley says can be done here","msgtype":"m.text"},"ts":1381940548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bholley: same could be done for .style and friends","msgtype":"m.text"},"ts":1381940568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right, what i think i was getting at (still wrapping my head around this) is that the internal object would change","msgtype":"m.text"},"ts":1381940573000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i should go prototype this in JS with weakmaps etc.","msgtype":"m.text"},"ts":1381940598000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: that'd be cool","msgtype":"m.text"},"ts":1381940613000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So I haven't followed this enough and so should maybe not jump in here, but why can't adoption just be a clone operation that copies all the internal state into a new object?","msgtype":"m.text"},"ts":1381940620000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"^ yeah that sounds nice","msgtype":"m.text"},"ts":1381940627000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but similar haven't-followed-this problems","msgtype":"m.text"},"ts":1381940642000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"jgraham: newDoc.appendChild(eleFromOldDoc); eleFromOldDoc.innerHTML = ...","msgtype":"m.text"},"ts":1381940671000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ^","msgtype":"m.text"},"ts":1381940714000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: You will have to elaborate a bit","msgtype":"m.text"},"ts":1381940731000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"what is that code supposed to illustrate, yeah...","msgtype":"m.text"},"ts":1381940735000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Oh I see","msgtype":"m.text"},"ts":1381940781000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although you can imagine fixing that up with some sort of hack. Not that I'm advocating that or anything","msgtype":"m.text"},"ts":1381940905000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That you cannot change identity","msgtype":"m.text"},"ts":1381940909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ahhh","msgtype":"m.text"},"ts":1381940917000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"what about if you threw when trying to adopt nodes that were extension-prevented","msgtype":"m.text"},"ts":1381940958000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i.e. what if you just did Object.setPrototypeOf(ele.fromOldDoc, thisWindow.Element) and if that threw an exception, just let it bubble so that appendChild fails","msgtype":"m.text"},"ts":1381940987000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ReturnIfAbrupt, as they say ;) <-- funny only to me","msgtype":"m.text"},"ts":1381941035000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"bholley: ^","msgtype":"m.text"},"ts":1381941352000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, Domenic_: there are other cases when we need to munge the prototype...","msgtype":"m.text"},"ts":1381941452000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"XBL/WebComponents","msgtype":"m.text"},"ts":1381941464000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"for example","msgtype":"m.text"},"ts":1381941466000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"sure, but presumably whatever operation needs to munge can just throw if the prototype is un-mungeable","msgtype":"m.text"},"ts":1381941479000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"potentially for document.open, but hopefully not","msgtype":"m.text"},"ts":1381941483000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Domenic_: well, if we decide to reparent things with document.open, we can't really make document.open throw, I don't think","msgtype":"m.text"},"ts":1381941514000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"plugins","msgtype":"m.text"},"ts":1381941551000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: really? You think that there's some web code out there that (a) does Object.preventExtensions on a DOM node; (b) uses document.open?","msgtype":"m.text"},"ts":1381941581000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: I don't know, tbh. In Gecko, we mostly ignore preventExtensions on DOM nodes for the time being ;-)","msgtype":"m.text"},"ts":1381941612000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Domenic_: It tends to be a good theory that there is, however stupid the thought it. Actually, especially if it is stupid.","msgtype":"m.text"},"ts":1381941639000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic_: I'd kind of rather not deal with C++ proto sets being fallible in a script-triggerable fashion. But I'm willing to consider it","msgtype":"m.text"},"ts":1381941746000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"Is EvalScript trident thing?","msgtype":"m.text"},"ts":1381941773000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"bholley: what is a C++ :P","msgtype":"m.text"},"ts":1381941774000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"it just seems like the DOM is hard enough to implement as-is","msgtype":"m.text"},"ts":1381941775000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"very much wants JS to be able to implement the DOM","msgtype":"m.emote"},"ts":1381941836000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"YOu can't really ignore the fact that the DOM has a real implentation complexity. The more time that browser vendors spend chasing theoretical wins in self-hosting, the less time they have to spend on other things like performance or features","msgtype":"m.text"},"ts":1381941879000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: my knight in shining armor","msgtype":"m.text"},"ts":1381941927000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"jgraham: Depends on how much gain performance would have by having the DOM all in JS and being able to be inlined.","msgtype":"m.text"},"ts":1381942026000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"s/would/we would/","msgtype":"m.text"},"ts":1381942032000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"bholley: what's bad about routing the prototype sets through script?","msgtype":"m.text"},"ts":1381942649000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: there are places in which we need to munge prototypes where we cannot fail","msgtype":"m.text"},"ts":1381942745000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: for example, if we fail midway through reparenting, there's no way to recover","msgtype":"m.text"},"ts":1381942770000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: we have to crash","msgtype":"m.text"},"ts":1381942773000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"bholley: could you elaborate in the bug? I have to go :/","msgtype":"m.text"},"ts":1381942801000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so historically, we haven't been able to let script just decide that certain prototypes are unmungeable","msgtype":"m.text"},"ts":1381942805000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"annevk: ok","msgtype":"m.text"},"ts":1381942808000,"senderName":"bholley","senderId":"bholley@irc"},
{"content":{"body":"jgraham: as a closing note, I think nailing down the architecture in a way that everyone thinks is a win for the future is worth some time. What we decide here impacts how you architect your browser for decades to come. And hopefully many revisions to DOM implementations will be made over those decades.","msgtype":"m.text"},"ts":1381942935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"man, time warner around here has the most bizarre problem: it randomly corrupts packets in a way that causes them to have the correct IP checksum","msgtype":"m.text"},"ts":1381945046000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"not like it's corrupting lots of packets and a couple happen to match (that would kill throughput); it just occasionally shuffles bytes around in a packet, which checksums won't detect","msgtype":"m.text"},"ts":1381945115000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"and tons of protocols just assume TCP streams are never corrupted, so it causes all kinds of weirdness","msgtype":"m.text"},"ts":1381945182000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wow","msgtype":"m.text"},"ts":1381945298000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's messed up","msgtype":"m.text"},"ts":1381945300000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's so messed up that when we call the ISP and they send a guy out, he just goes \"???\"","msgtype":"m.text"},"ts":1381945322000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"???\" as in, \"what's wrong\", or as in, \"wtf this makes no sense\" ?","msgtype":"m.text"},"ts":1381945748000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"he just had no idea","msgtype":"m.text"},"ts":1381945776000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"no idea what you meant, or what the cause was?","msgtype":"m.text"},"ts":1381945787000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"there's two kinds of confusion possible here :-)","msgtype":"m.text"},"ts":1381945800000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"he understood the problem after I explained it long enough, but he had no idea why it was happening","msgtype":"m.text"},"ts":1381945805000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"aah ok","msgtype":"m.text"},"ts":1381945848000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's bizarre, since if it was just lots of packet corruption and once in a while one matched the checksum, it'd kill the connection completely","msgtype":"m.text"},"ts":1381945858000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'm on a business plan for my cable, it's pretty awesome, the slightest complaint and they roll a truck within 4 hours and fix things until it works","msgtype":"m.text"},"ts":1381945881000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i was like \"it seems we get occasional dropouts\" at about 9pm, and by 11pm they'd rewired the entire building basically.","msgtype":"m.text"},"ts":1381945906000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"slightlyoff: we really need webidl spec for ServiceWorker (https://github.com/slightlyoff/ServiceWorker/issues/99#issuecomment-26440824)","msgtype":"m.text"},"ts":1381945917000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sooner than later","msgtype":"m.text"},"ts":1381945920000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(not even _that_ much more expensive than residential service, it's pretty crazy)","msgtype":"m.text"},"ts":1381945933000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or JSIDL and some tool which converts JSIDL to WebIDL","msgtype":"m.text"},"ts":1381945935000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"this is business too (it's our office), but it's one of those problems that always hides when a tech is on site","msgtype":"m.text"},"ts":1381945936000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"doesn't understand this JSIDL stuff","msgtype":"m.emote"},"ts":1381945941000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"oh the problem was gone by the time the tech got here in our case","msgtype":"m.text"},"ts":1381945949000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"he just rewired it all just in case","msgtype":"m.text"},"ts":1381945954000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"also, this has happened in every time warner installation i've used: my home cable, and business cable in two different offices","msgtype":"m.text"},"ts":1381945972000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"btytes shifted around pretty much has to be their back-end, right?","msgtype":"m.text"},"ts":1381946001000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, it's not like a bad cable is gonna cause that","msgtype":"m.text"},"ts":1381946007000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: what is TS+tests?","msgtype":"m.text"},"ts":1381946017000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and is anybody actually working on making a JSIDL?","msgtype":"m.text"},"ts":1381946043000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like it has to be hardware and not cabling, yeah, seems like weird firmware in a cable modem is as likely a cause as a bad router though","msgtype":"m.text"},"ts":1381946052000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"IP checksums changing in flight? I'd call the NSA, not Time Warner :)","msgtype":"m.text"},"ts":1381946054000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"(which is to say, all equally unlikely)","msgtype":"m.text"},"ts":1381946057000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(I mean JSIDL at all for anything, as an alternative to WebIDL)","msgtype":"m.text"},"ts":1381946081000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sgalineau: no, worse: the packet data is being corrupted, but in a way that results in the same IP checksum, so IP doesn't drop the packet","msgtype":"m.text"},"ts":1381946082000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TS is ...that odd format to describe classes or interfaces","msgtype":"m.text"},"ts":1381946084000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"zewt: try swapping out the router for another?","msgtype":"m.text"},"ts":1381946089000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"MikeSmith: yeah, I haven't see anything concrete on JSIDL","msgtype":"m.text"},"ts":1381946095000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie_: i meant their routers (it could be anywhere in their stack)","msgtype":"m.text"},"ts":1381946123000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: well yeah, but you have control over one of them :-)","msgtype":"m.text"},"ts":1381946158000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the only router we have is the one built into the cable modem :) (and yeah, getting a different router is one thing to try, though I suspect it's further up the chain)","msgtype":"m.text"},"ts":1381946210000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: man, that is twisted","msgtype":"m.text"},"ts":1381946226000,"senderName":"sgalineau","senderId":"sgalineau@irc"},
{"content":{"body":"get a replacement cable modem, swap it in, if it doesn't solve it, send it back :-)","msgtype":"m.text"},"ts":1381946237000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: seems pretty odd to be going ahead with implementations without the interface actually being documented or even without an actual spec","msgtype":"m.text"},"ts":1381946245000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sgalineau: i wget'd a test file over http containing \"0123456789\" repeated, it downloaded without error and you'd see \"0123546789\" or something randomly","msgtype":"m.text"},"ts":1381946263000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"MikeSmith: very much so","msgtype":"m.text"},"ts":1381946285000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"MikeSmith: TS == http://en.wikipedia.org/wiki/TypeScript","msgtype":"m.text"},"ts":1381946291000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ah that","msgtype":"m.text"},"ts":1381946316000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if IP used CRC's it'd catch it, but IP is ... old","msgtype":"m.text"},"ts":1381946326000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TypeScript looks kind of nice","msgtype":"m.text"},"ts":1381946335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: time to use https for everything :-P","msgtype":"m.text"},"ts":1381946433000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: i do--that's what led to me earlier wondering about browsers not resuming downloads","msgtype":"m.text"},"ts":1381946824000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"https will kill the connection on error, but it won't automatically recover","msgtype":"m.text"},"ts":1381946846000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1381946860000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Ms2ger: thanks","msgtype":"m.text"},"ts":1381951576000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"MikeSmith: JSIDL lacks resources, so we'll continue to work on IDL and address the ES6 requirements there","msgtype":"m.text"},"ts":1381957286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: as I understand it heycam|away managed to get a couple of months just for IDL so we should start seeing some progress there soonish","msgtype":"m.text"},"ts":1381957334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: including moving the thing to GitHub and such","msgtype":"m.text"},"ts":1381957350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: cool cool, sounds good","msgtype":"m.text"},"ts":1381957647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"slightlyoff: I'll post updates once I've integrated Fetch into XMLHttpRequest","msgtype":"m.text"},"ts":1381957662000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is it still very much unclear to me what is wrong with webidl and what jsidl will change","msgtype":"m.text"},"ts":1381958675000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I think the primary change would be to describe the platform in terms of JavaScript rather than IDL types","msgtype":"m.text"},"ts":1381958837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, that doesn't say much about how the APIs would change in practice","msgtype":"m.text"},"ts":1381958869000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: I don't think the intent is to change APIs other than encourage new APIs to follow better patterns, but that goal is shared with IDL I think","msgtype":"m.text"},"ts":1381958927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"better patterns\" tends to be vague","msgtype":"m.text"},"ts":1381959006000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"there needs to be some reasoning to do Foo and not Bar","msgtype":"m.text"},"ts":1381959027000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: again, the high-level reason is describing the entire platform in terms of JavaScript and making it self-hostable","msgtype":"m.text"},"ts":1381959066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: we don't necessarily need new IDL for that, but some people think they can convey their ideas better with a fresh start, although obviously they haven't found the time yet to write it out...","msgtype":"m.text"},"ts":1381959109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess the question I have is that how does that help users of the APIs or implementors","msgtype":"m.text"},"ts":1381959186000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"webidl is kind of a nice abstract layer above raw JS","msgtype":"m.text"},"ts":1381959207000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: the idea is that APIs become more extensible than they are now","msgtype":"m.text"},"ts":1381959240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: e.g. classes become subclassable, just like built-ins are in ES6","msgtype":"m.text"},"ts":1381959254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: the other small benefit might be that we can use a somewhat better syntax, though that's discussed for IDL too","msgtype":"m.text"},"ts":1381959277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, hard to say much about better syntax without seeing any proposals","msgtype":"m.text"},"ts":1381959302000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: for implementers it's mostly a cost I suppose, because the ES6-style world with subclassing is vastly more complex","msgtype":"m.text"},"ts":1381959309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: yeah, I can only say so much because I'm familiar with some of the ideas, having something concrete would indeed be way better","msgtype":"m.text"},"ts":1381959374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://blog.paciellogroup.com/2013/10/using-html5-section-element/ ... why would a screen reader say \"region\" for each <section>? isn't that just annoying? and wrong, given that it's semantically equivalent to drop all <section>s and use h1-h6","msgtype":"m.text"},"ts":1381959448000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug____: one change, which we're planning on making in IDL too, is to have distinction between class and interface","msgtype":"m.text"},"ts":1381959459000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and i don't understand the recommendation to use aria-labelledby","msgtype":"m.text"},"ts":1381959465000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"smaug____: and IDL will adopt ES6-style classes and such, so I suspect most of the changes to happen in IDL unless JSIDL suddenly gets a bunch of resources","msgtype":"m.text"},"ts":1381959514000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1381959539000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: this all comes mainly from ServiceWorker stuff","msgtype":"m.text"},"ts":1381959555000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"implementors implementing API which doesn't exist","msgtype":"m.text"},"ts":1381959565000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: jdm worked out some IDL for ServiceWorker","msgtype":"m.text"},"ts":1381959569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"good","msgtype":"m.text"},"ts":1381959575000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: if I had not been traveling I might have been more productive and actually done some work there, for now I'm occupied with correcting people on the internet and Fetch / XHR / URL","msgtype":"m.text"},"ts":1381959614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: less travel is one of my 2014 goals now","msgtype":"m.text"},"ts":1381959639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ha","msgtype":"m.text"},"ts":1381959656000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"what's your knee-jerk reaction to renaming DOMRectReadOnly to DOMRectRead? (since the UA can mutate the object, it's supposedly not actually read *only* ....)","msgtype":"m.text"},"ts":1381960149000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"sounds weird","msgtype":"m.text"},"ts":1381960183000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"how about DOMRectView or something like that?","msgtype":"m.text"},"ts":1381960191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or DOMRect and MutableDOMRect","msgtype":"m.text"},"ts":1381960200000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the mutable one needs the short name since it has a constructor, so that's the name people are going to write in their code","msgtype":"m.text"},"ts":1381960309000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"unless we do something magic like have a constructor for one interface that returns an object of the other, but that's really weird","msgtype":"m.text"},"ts":1381960361000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"then i'd go with DOMRect and DOMRectReadOnly","msgtype":"m.text"},"ts":1381960427000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's read-only, even if it can change","msgtype":"m.text"},"ts":1381960435000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"O_o","msgtype":"m.text"},"ts":1381960458000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"look at the readonly attributes in the DOM","msgtype":"m.text"},"ts":1381960473000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"most of them can change too","msgtype":"m.text"},"ts":1381960477000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"O__o","msgtype":"m.text"},"ts":1381960481000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"like firstChild","msgtype":"m.text"},"ts":1381960532000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that's a readonly attribute","msgtype":"m.text"},"ts":1381960532000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but if you change the DOM, it returns a different object","msgtype":"m.text"},"ts":1381960532000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"or NodeList.length","msgtype":"m.text"},"ts":1381960535000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it sounds like a getter, not something that's read-only.","msgtype":"m.text"},"ts":1381960548000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"or formElement.validationMessage","msgtype":"m.text"},"ts":1381960548000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"since obviously it's being written.","msgtype":"m.text"},"ts":1381960551000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i'm just saying that the IDL for these attributes reads \"readonly attribute ...\"","msgtype":"m.text"},"ts":1381960576000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Right, and to that I say O__o","msgtype":"m.text"},"ts":1381960585000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"^ things JSIDL could fix","msgtype":"m.text"},"ts":1381960594000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"a readonly text field can change even while it's readonly","msgtype":"m.text"},"ts":1381960628000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"O___o","msgtype":"m.text"},"ts":1381960636000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"readonly doesn't mean \"immutable\", it means \"can't be changed by you\"","msgtype":"m.text"},"ts":1381960637000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"read only means you can only read it","msgtype":"m.text"},"ts":1381960647000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1381960651000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"YOU can only read it","msgtype":"m.text"},"ts":1381960654000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, no need to use JSIDL for anything here.  it is pretty clear what readonly means in, webidl","msgtype":"m.text"},"ts":1381960892000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"it means we are in crazy magic land where you can write things that are read-only","msgtype":"m.text"},"ts":1381960916000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"readonly\" doesn't mean what you think it means, in pretty much any platform i've ever seen the term used in","msgtype":"m.text"},"ts":1381960964000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: <input readonly> can be written too...","msgtype":"m.text"},"ts":1381960967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Mark and apparently you seem to have a strange notion of readonly; I don't quite get it","msgtype":"m.text"},"ts":1381961002000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I just don't understand how you can write something that is read only","msgtype":"m.text"},"ts":1381961020000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"but if there is precedence in other platforms and this isn't just some weird thing that WebIDL and <input> do, I guess that is my failing.","msgtype":"m.text"},"ts":1381961055000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it seems kinda normal I can hand you an object that's readonly for you, but not me","msgtype":"m.text"},"ts":1381961086000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think of readonly as a property of the object, not of the object+person who's touching it pair","msgtype":"m.text"},"ts":1381961103000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: i.e. you're getting a readonly view of the situation","msgtype":"m.text"},"ts":1381961120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I see","msgtype":"m.text"},"ts":1381961143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"readonly is not const","msgtype":"m.text"},"ts":1381961153000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah, it seems immutable or const would be what you're after Domenic_","msgtype":"m.text"},"ts":1381961174000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: what would you call an object that can change value but that you are not allowed to directly change yourself?","msgtype":"m.text"},"ts":1381961196000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"such as the examples above?","msgtype":"m.text"},"ts":1381961209000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: you're describing two things here, an object, and a person with access to the object. Or, as Anne puts it, a view on the object. Typically I would not have a name for such an object, and say I have a getter to access the object.","msgtype":"m.text"},"ts":1381961254000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Let me admit though that it seems clear the weight of the computer field is against my understanding here, so thanks for humoring me.","msgtype":"m.text"},"ts":1381961285000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: properties can have getters and setters, or just a getter, or just a setter. What keyword would you use in a WebIDL-analogue to indicate that a property has only a getter?","msgtype":"m.text"},"ts":1381961289000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"get","msgtype":"m.text"},"ts":1381961549000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: so you'd have like,  \"get attribute\" and \"get set attribute\" ?","msgtype":"m.text"},"ts":1381961744000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1381962144000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ok thanks, sent http://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0125.html","msgtype":"m.text"},"ts":1381962285000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think get set name makes sense","msgtype":"m.text"},"ts":1381962343000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"delphi uses \"property name: type; read reader; write writer;\" so read-only ones are just \"property name: type; read reader;\"","msgtype":"m.text"},"ts":1381962380000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"which pretty much makes the term \"read-only\" obvious. :-)","msgtype":"m.text"},"ts":1381962394000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"basically, \"read\" seems to be a synonym for \"get\"","msgtype":"m.text"},"ts":1381962413000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so \"read only\" is the same as \"get only\"","msgtype":"m.text"},"ts":1381962428000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"That does help conceptualize what I was missing, thanks :)","msgtype":"m.text"},"ts":1381962502000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"smaug____: that reminds me, one change I've heard people suggest is having get/set properties as everything in IDL is now, but also have data properties as JavaScript has","msgtype":"m.text"},"ts":1381962532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can anyone figure out a way to have a zero-width image in an img?","msgtype":"m.text"},"ts":1381962596000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(not img width:0 so width=0)","msgtype":"m.text"},"ts":1381962603000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"s/so/or/","msgtype":"m.text"},"ts":1381962608000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: svg?","msgtype":"m.text"},"ts":1381962615000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hm, interesting idea","msgtype":"m.text"},"ts":1381962643000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"data:text/xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 0 0\"><circle fill=\"red\" cx=\"0\" cy=\"'0\" r=\"10\"/></svg>","msgtype":"m.text"},"ts":1381962728000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"s/'///","msgtype":"m.text"},"ts":1381962784000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"-/","msgtype":"m.text"},"ts":1381962789000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"odd, chrome doesn't render svg in img?","msgtype":"m.text"},"ts":1381962814000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"annevk: use cases, use cases, please :)","msgtype":"m.text"},"ts":1381962827000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie_: you need image/svg+xml for <img>","msgtype":"m.text"},"ts":1381962838000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1381962850000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well that's lame","msgtype":"m.text"},"ts":1381962853000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1381962858000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"weird, firefox treats it as 300x150","msgtype":"m.text"},"ts":1381962906000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"chrome too","msgtype":"m.text"},"ts":1381962920000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"viewBox maybe","msgtype":"m.text"},"ts":1381962929000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that made it disappear but didn't change the dimensions","msgtype":"m.text"},"ts":1381962965000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"weirder and weirder","msgtype":"m.text"},"ts":1381962968000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"might be how CSS sizes replaced elements without intrinsic size or something","msgtype":"m.text"},"ts":1381962991000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"dunno if svg says that 0 means no intrinsic size though","msgtype":"m.text"},"ts":1381963013000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah, width= and height= maybe","msgtype":"m.text"},"ts":1381963040000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"smaug____: I'll defer to Domenic_, but e.g. if we're going to subclass built-ins, we need to be able to express what they have","msgtype":"m.text"},"ts":1381963040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, in firefox that worked","msgtype":"m.text"},"ts":1381963062000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"<svg ... width=0 height=0>","msgtype":"m.text"},"ts":1381963067000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I should really go to bed, but I just had an idea. What if JavaScript's standard library was defined in terms of an IDL that could also be used downstream... Instead of \"moaning\" they could be leading the way ;P","msgtype":"m.text"},"ts":1381963184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that would be ideal imho","msgtype":"m.text"},"ts":1381963402000,"senderName":"Hixie_","senderId":"Hixie_@irc"}
]