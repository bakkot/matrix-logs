[
{"content":{"body":"TabAtkins: since css-parse.js no longer provides a parse(...) function I'm trying to figure out what to call instead","msgtype":"m.text"},"ts":1423994768000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ok I see https://github.com/tabatkins/parse-css#parsing-functions","msgtype":"m.text"},"ts":1423994798000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: so now I'm wondering, if I'm parsing the contents of a sizes attribute, what should I use","msgtype":"m.text"},"ts":1423994885000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: OK I see I have my code doing `cssParser.parse(\"@media \" + unparsedSize.toString() + \" {}\");` so I suppose I need to try parseARule()","msgtype":"m.text"},"ts":1423995147000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Ooooof, no, that code's definitely wrong.","msgtype":"m.text"},"ts":1424032287000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: The spec should describe this, let me dig it up to ensure I'm remembering right.","msgtype":"m.text"},"ts":1424032315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: Here you go: https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-sizes-attribute","msgtype":"m.text"},"ts":1424032382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Use parseACommaSeparatedListOfComponentValues() first, then follow the algo for each component of the returned list.","msgtype":"m.text"},"ts":1424032404000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Basically just find the last non-ws component value for the size, and if there's anything non-ws preceding it, parse that as a media query.)","msgtype":"m.text"},"ts":1424032442000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I mean, using that sort of string concat will sorta work, but only because the parser doesn't do any validation anyway, and it'll act incorrectly in the presence of some markup errors (like putting a `{}` in your sizes attr).  It doesn't do any special work for you - it'd just return a CSSRule with a type of \"media\" and a prelude of the token stream it got","msgtype":"m.text"},"ts":1424032570000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"out of unparsedSize.","msgtype":"m.text"},"ts":1424032570000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(HTML's lack of deeply nested headings makes large sections like <img>'s really hard to navigate.)","msgtype":"m.text"},"ts":1424032690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"HTML's lack of deeply nested headings?","msgtype":"m.text"},"ts":1424034468000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Are you high?","msgtype":"m.text"},"ts":1424034472000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: IT DOESN'T NEST DEEPLY ENOUGH","msgtype":"m.text"},"ts":1424038025000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Will it ever?","msgtype":"m.text"},"ts":1424038458000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Well, for my purposes, if it puts the major <img> algorithms in their own subsections, like the <picture> spec did, that would be enough.","msgtype":"m.text"},"ts":1424039742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"For some reason <img> thinks it's desperately important to give a heading to every single alt='' use-case, but crams every single other part of its processing model into a single undelineated section.","msgtype":"m.text"},"ts":1424039791000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, ask and you'll probably get some headers :)","msgtype":"m.text"},"ts":1424039997000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie: ^^^","msgtype":"m.text"},"ts":1424040223000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"He'll probably say \"file a bug\"","msgtype":"m.text"},"ts":1424040254000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Heh.","msgtype":"m.text"},"ts":1424040311000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah that code I cited isn't that part that does the actual checking of the specific requirements for sizes in the HTML source/img spec; instead it's some separate code that runs just to to do an additional syntax check on the <source-size> and <source-size-value> parts.","msgtype":"m.text"},"ts":1424044345000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Well, running it through @media doesn't actually help anything; there's no syntax checking above the base statement/rule level.","msgtype":"m.text"},"ts":1424044478000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]