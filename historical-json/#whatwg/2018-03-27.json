[
{"content":{"body":"tantek: no idea, but I know that meta name=\"author\" was used a lot more in the past","msgtype":"m.text"},"ts":1522111400000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"https://github.com/hakimel/reveal.js/blob/master/demo.html#L10 is one example I could find","msgtype":"m.text"},"ts":1522111420000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"railgun, I know there is plenty of history of publishing it, I just don't know of any consuming code doing anything with it","msgtype":"m.text"},"ts":1522111448000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"some web searching made it pretty clear that search engines all ignore it","msgtype":"m.text"},"ts":1522111463000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"so that's the real question, any consuming code, and in particular, does any browser do anything with it?","msgtype":"m.text"},"ts":1522111492000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"no idea, but I know that Google uses / has used json-ld to handle data like authors https://developers.google.com/search/docs/guides/intro-structured-data","msgtype":"m.text"},"ts":1522111752000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"personally I'd prefer meta name=\"author\" over json-ld / link rel=\"author\", but that's not the case...","msgtype":"m.text"},"ts":1522111908000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"there's plenty of \"other\" author data that Google handles, whether from microformats, JSON-LD whatever","msgtype":"m.text"},"ts":1522111926000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"Google used to advocate rel=author, then stopped advocating, and IIRC stopped supporting (though it's harder to verify that)","msgtype":"m.text"},"ts":1522111953000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"whereas meta name=author they've *never* supported","msgtype":"m.text"},"ts":1522111971000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"what is the best practice now?","msgtype":"m.text"},"ts":1522112092000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"what is your objective?","msgtype":"m.text"},"ts":1522112104000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"I'd like to know the best way to specify the author for a page","msgtype":"m.text"},"ts":1522112179000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"for whom to consume?","msgtype":"m.text"},"ts":1522112205000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"hmm it doesn't make as much sense now, but I was thinking about crawlers","msgtype":"m.text"},"ts":1522112308000,"senderName":"railgun","senderId":"railgun@irc"},
{"content":{"body":"@annevk if node wanted to implement fetch(), would you be happy with adding stuff to the spec to let node opt out of CORS & safelist headers etc?","msgtype":"m.text"},"ts":1522149865000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe, depends a bit on the complexity","msgtype":"m.text"},"ts":1522150990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1522150996000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Discussion is happening here https://github.com/nodejs/node/issues/19393","msgtype":"m.text"},"ts":1522151016000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: heh, when I first read that I kinda assumed author was about me, but I guess it wasn't","msgtype":"m.text"},"ts":1522151447000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I do recall some of those discussions, but perhaps they happened in parallel with someone else","msgtype":"m.text"},"ts":1522151464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I was thinking of replying, but I guess I'll just let it go","msgtype":"m.text"},"ts":1522151660000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://xkcd.com/386/","msgtype":"m.text"},"ts":1522151676000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that guy has been historically like that. The \"harrasment\" he referrs to is when he wanted to have the last word, saying things about fetch that weren't true, and he got annoyed about the corrections. But yeah, 386.","msgtype":"m.text"},"ts":1522152064000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"lgrahl: fwiw, I think we should reconsider extending WebSocket with streams et al as it reportedly is not going away anytime soon","msgtype":"m.text"},"ts":1522155554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ^^ full duplex HTTP breaks on client-side middleware often enough reportedly","msgtype":"m.text"},"ts":1522155594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What's not going away? WebSocket in general you mean?","msgtype":"m.text"},"ts":1522155789000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: Btw I missed the opportunity to talk to you in person at IETF 101","msgtype":"m.text"},"ts":1522155810000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: right, WebSocket in general","msgtype":"m.text"},"ts":1522156641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lgrahl: heh, I was only there briefly","msgtype":"m.text"},"ts":1522156648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: So... do I understand you correctly that you would like to backport streams to WebSocket once we have them for data channels?","msgtype":"m.text"},"ts":1522156707000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: JakeA: at least in firefox we have a super-user type origin that can use fetch that might also benefit from better spec support in this area","msgtype":"m.text"},"ts":1522156754000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I wonder what nodejs considers its base URL","msgtype":"m.text"},"ts":1522156774000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"lgrahl: yeah, something like that","msgtype":"m.text"},"ts":1522156844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lgrahl: it's at least something we should consider doing again now it's clear that full duplex HTTP cannot be deployed at scale","msgtype":"m.text"},"ts":1522156873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yeah, that makes sense. Especially because in the WS case we can model it as a pull source and handle backpressure... which we can't at the moment.","msgtype":"m.text"},"ts":1522156895000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: Maybe you can have a quick look at my question from two days ago: https://freenode.logbot.info/whatwg/20180325#c1478416","msgtype":"m.text"},"ts":1522157017000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: I saw that, but I don't know; perhaps wanderview or JakeA do","msgtype":"m.text"},"ts":1522157055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lgrahl: if they are pull streams \"pausing\" just means that you stop pulling, right?","msgtype":"m.text"},"ts":1522157094000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Yep. But I can't stop pulling on individual streams, just the whole association.","msgtype":"m.text"},"ts":1522157124000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: that must be something other than a streams spec issue?  I'm not aware of anything in streams that groups multiple streams into a bundle or whatever","msgtype":"m.text"},"ts":1522157252000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It's not a spec issue. It's rather a question of how to apply the streams spec in this case.","msgtype":"m.text"},"ts":1522157274000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"closest thing might be the clone() operation","msgtype":"m.text"},"ts":1522157276000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"where you end up with two ReadableStreams tee'd off the same source","msgtype":"m.text"},"ts":1522157291000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and one is read, but the other is not","msgtype":"m.text"},"ts":1522157296000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in this case the browser ends up having to buffer the difference in read rates","msgtype":"m.text"},"ts":1522157306000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"which may or may not be a reasonable thing for webrtc...","msgtype":"m.text"},"ts":1522157322000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry... not clone()... that is fetch spec... the streams spec thing is tee()","msgtype":"m.text"},"ts":1522157373000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ah, okay, so the SCTP streams aren't WHATWG streams. It's a feature of SCTP.","msgtype":"m.text"},"ts":1522157376000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"Basically, SCTP allows you to multiplex multiple SCTP streams. I'm trying to map them to WHATWG streams with the mentioned technical limitation.","msgtype":"m.text"},"ts":1522157413000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: if there is no way to apply back pressure to individual streams, but only to all of them at once... it seems like you need an extra thing in the API that says \"if any of these streams becomes blocked the entire group will be paused\"","msgtype":"m.text"},"ts":1522157493000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't really know the use cases, etc","msgtype":"m.text"},"ts":1522157520000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: That could deadlock the association. We could either treat them as push sources and not handle backpressure at all or say \"if all of the streams are blocked, the entire assoc will be paused\". My question would be if the latter would play well with WHATWG streams.","msgtype":"m.text"},"ts":1522157654000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: not handling back pressure and not pausing the source will lead to exhausting memory, no?","msgtype":"m.text"},"ts":1522157710000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It does but without any per-stream flow control I don't see a way around it","msgtype":"m.text"},"ts":1522157729000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: ok... sounds like a footgun, though","msgtype":"m.text"},"ts":1522157761000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It's much more of a footgun at the moment, so it's an improvement. :]","msgtype":"m.text"},"ts":1522157791000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: I guess we do the same thing for http1.x network response bodies...","msgtype":"m.text"},"ts":1522157791000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"lgrahl: the difference is those tend to be of bounded size... its unclear to me how much data your streams are going to be pushing","msgtype":"m.text"},"ts":1522157816000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Technically unlimited","msgtype":"m.text"},"ts":1522157827000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"wanderview: We thought about a per-stream flow control extension to SCTP... but that is very prone to deadlocks, so nobody wants to touch that subject. I wonder how the QUIC people do it...","msgtype":"m.text"},"ts":1522157927000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: h2 supports it","msgtype":"m.text"},"ts":1522157945000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"it has its own framing protocol, though","msgtype":"m.text"},"ts":1522157955000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Anyway, the common use case will be some control stream on one side and some file stream on the other side. So, while the backpressure issue is going to be annoying if someone sends really fast, it's still a huge advantage to be able to handle chunks early and write them to disk on-the-fly.","msgtype":"m.text"},"ts":1522158189000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1522158203000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"lgrahl: that sounds reasonable... I guess I was worried it was video data or something","msgtype":"m.text"},"ts":1522158228000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It does compete with A/V but that falls into a whole other category (congestion control - not my department) :)","msgtype":"m.text"},"ts":1522158277000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"And so does it today FWIW","msgtype":"m.text"},"ts":1522158285000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: thats fine... I was worried about buffering video data","msgtype":"m.text"},"ts":1522158318000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: People could technically run custom video codecs over it... so it's good you're mentioning this.","msgtype":"m.text"},"ts":1522158345000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: maybe it would be worth adding some kind of event like \"excessive buffering OMG\" that people could listen for?  I don't know if that would be used or worth it, though","msgtype":"m.text"},"ts":1522158392000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: You can already query the amount of buffered data with the current API. We could use that in streaming mode to get the amount of backlogged data. But the question would be if that's helpful... people could run their own flow control but that's really meh.","msgtype":"m.text"},"ts":1522158493000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"lgrahl: if you want to support that API, you probably need to keep the streams spec streams as pull sources... so you know how much is buffered and can report it... if you push it into the ReadableStream I'm not sure you can see how much is buffered there","msgtype":"m.text"},"ts":1522158593000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'll look into this. But exposing it via https://rawgit.com/w3c/webrtc-pc/master/webrtc.html#dom-rtcdatachannel-bufferedamount would be an ok-ish fallback to me if that's too much effort.","msgtype":"m.text"},"ts":1522158777000,"senderName":"lgrahl","senderId":"lgrahl@irc"},
{"content":{"body":"annevk: Does fetch allow for redirecting across schemes?","msgtype":"m.text"},"ts":1522162767000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: not generally","msgtype":"m.text"},"ts":1522162799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Ok, would you say https://crbug.com/532782 (redirecting to a Blob URL) is probably a non-issue?","msgtype":"m.text"},"ts":1522162838000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"As Kinuko says at the bottom of thread spec doesn't really talk about this, and from what I see, there's only https://fetch.spec.whatwg.org/#http-redirect-fetch which wouldn't support this","msgtype":"m.text"},"ts":1522162888000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"its basically a cross-origin redirect, right?","msgtype":"m.text"},"ts":1522162907000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"don't some browsers explicitly block redirect to data URLs?","msgtype":"m.text"},"ts":1522162926000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: It seems that Chrome does yeah. Is this mandated by spec?","msgtype":"m.text"},"ts":1522163518000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: I believe we block it from insecure http redirect now... not sure where the spec stands these days","msgtype":"m.text"},"ts":1522163596000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Does that mean the redirect is not blocked if it's coming from https?","msgtype":"m.text"},"ts":1522163712000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: actually, looks like we blocked on subresource redirects to data URLs here... https://bugzilla.mozilla.org/show_bug.cgi?id=1428793","msgtype":"m.text"},"ts":1522163832000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"FF60","msgtype":"m.text"},"ts":1522163835000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"which is beta atm","msgtype":"m.text"},"ts":1522163839000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: Ahh ok thanks for the info","msgtype":"m.text"},"ts":1522164750000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"wanderview: So should a Blob URL be treated the same as a data URL then? honestly I'm not entirely familiar with either (or their differences)","msgtype":"m.text"},"ts":1522164778000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: so... I'm not even sure how a server would legit get a blob URL since it consists of an ephemeral hash specific to a particular browser instance running in the client","msgtype":"m.text"},"ts":1522164825000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"domfarolino: I guess a service worker could return a redirect to a blob URL, but it could also just respondWith() the blob as a response","msgtype":"m.text"},"ts":1522164845000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"domfarolino: my inclination would be to block redirects to \"local\" urls which would covert data:, blob:, about:, etc... not sure what annevk thinks about that, though","msgtype":"m.text"},"ts":1522164884000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"domfarolino: per the spec that's a network error I think","msgtype":"m.text"},"ts":1522164937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: now if you navigate to the URL, it would work...","msgtype":"m.text"},"ts":1522164947000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: that's what I meant with not generally; when navigating you can be redirected to non-HTTP(S) URLs","msgtype":"m.text"},"ts":1522164967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: you can include it in the URL, which is a little silly","msgtype":"m.text"},"ts":1522164993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: include what?","msgtype":"m.text"},"ts":1522165006000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the blob URL","msgtype":"m.text"},"ts":1522165016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh... as a search param that gets reflected... like how our various tests work","msgtype":"m.text"},"ts":1522165034000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: \"redirectme?url=\" + blobURL or some such","msgtype":"m.text"},"ts":1522165042000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yea... I guess that woudl work... but happy to network error that","msgtype":"m.text"},"ts":1522165065000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"lunches","msgtype":"m.emote"},"ts":1522165083000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Ok so as per https://fetch.spec.whatwg.org/#ref-for-concept-response-location-url%E2%91%A3, any redirect through fetch() to a non http(s) should be a network error as you mentioned","msgtype":"m.text"},"ts":1522165401000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: but on navigations it can work and that's fine","msgtype":"m.text"},"ts":1522165420000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"thanks for the info!","msgtype":"m.text"},"ts":1522165670000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: for navigations HTML controls what's allowed","msgtype":"m.text"},"ts":1522165674000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right that makes sense","msgtype":"m.text"},"ts":1522165685000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: it seems that \"blob\" is disallowed there","msgtype":"m.text"},"ts":1522165717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"> Otherwise, if response has a location URL that is a URL whose scheme is \"blob\", \"file\", \"filesystem\", or \"javascript\", then set response to a network error.","msgtype":"m.text"},"ts":1522165728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ahh was just looking for that, thanks","msgtype":"m.text"},"ts":1522165823000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: hasn","msgtype":"m.text"},"ts":1522168305000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"hasn't top level data URL navigation also been blocked now?","msgtype":"m.text"},"ts":1522168314000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"also, I'm confused... blob: URL is allowed as an iframe html load AFAIK","msgtype":"m.text"},"ts":1522168368000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: FF doesn’t block top level data URL navigation from what I see, same with Blob. I don’t think HTML spec blocks it either","msgtype":"m.text"},"ts":1522168515000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"wanderview: top-level blocking isn't specced, this is also not blocking navigation in general, just redirects while navigating","msgtype":"m.text"},"ts":1522169405000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: does that help?","msgtype":"m.text"},"ts":1522169415000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah... I missed that you were only quoting a line about redirection","msgtype":"m.text"},"ts":1522169423000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"annevk: Should top-level request redirecting from HTTP(S) => data:... behave differently HTTP(S) => HTTP(S) => data:... ?","msgtype":"m.text"},"ts":1522173248000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"HTML Standard seems to make them behave differently, since for the second one, HTTP-Redirect Fetch is called which doesn't allow redirects to anything but another HTTP(S) scheme","msgtype":"m.text"},"ts":1522173281000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"woops nevermind, wasn't reading it right :(","msgtype":"m.text"},"ts":1522177298000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"“manual” is key here 😊","msgtype":"m.text"},"ts":1522179562000,"senderName":"annevk","senderId":"annevk@irc"}
]