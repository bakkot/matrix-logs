[
{"content":{"body":"yoav: should stuff like https://github.com/WICG/cross-origin-embedder-policy be archived?","msgtype":"m.text"},"ts":1602586144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I would file an issue but can't)","msgtype":"m.text"},"ts":1602586164000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Weird that you can't file one... I'll look","msgtype":"m.text"},"ts":1602586623000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"someone turned off issues on that repo...","msgtype":"m.text"},"ts":1602586809000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'll bug people and see if we can archive. Thanks for flagging!","msgtype":"m.text"},"ts":1602586825000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"To be clear, I understand why they disabled issue filing","msgtype":"m.text"},"ts":1602586858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1602586916000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: do we still need the test-mdn-annotations branch on https://github.com/whatwg/html-build/branches?","msgtype":"m.text"},"ts":1602592451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: nope","msgtype":"m.text"},"ts":1602592477000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"feel free to delete it","msgtype":"m.text"},"ts":1602592485000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1602592493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-06#section-5.2.2.2 is somewhat weird to me. So A2 in A1->B->A2 is cross-site, but A2's service worker is not... If service worker adoption would be universal, it seems you could do the same kind of attacks...","msgtype":"m.text"},"ts":1602593819000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"files https://github.com/httpwg/http-extensions/issues/1288","msgtype":"m.emote"},"ts":1602594082000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: sorry, I'm actually no longer sure a worklet needs a reference to anything","msgtype":"m.text"},"ts":1602602396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we just call it to do something and then it returns a value","msgtype":"m.text"},"ts":1602602410000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and when we're done with it we discard it","msgtype":"m.text"},"ts":1602602420000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1602602423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: even the secure context check seems weird as they shouldn't even be instantiated if that's false?","msgtype":"m.text"},"ts":1602602437000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: in the worklets spec today there is no securecontext requirement","msgtype":"m.text"},"ts":1602602453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: it looks like the CSSWG prefers no secure context requirement but Chrome implemented it as SecureContext","msgtype":"m.text"},"ts":1602602468000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Mozilla wants that too, although I'm not a 100% on what we did for audio worklets","msgtype":"m.text"},"ts":1602602492000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think they are restricted","msgtype":"m.text"},"ts":1602602497000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cool, yeah, we should probably change that when incorporating","msgtype":"m.text"},"ts":1602602507000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: The current model creates worklet agents (1) when you call addModule(), if there are no agents, and optionally even if there are; (2) on UA discretion when it needs them, e.g. as in https://whatpr.org/html/6056/worklets.html#worklets-example-registering","msgtype":"m.text"},"ts":1602602569000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But yeah, thinking about it more a worklet having a reference to the outside by default is a bit of a smell as they are designed as isolated environments (again, specific types of worklets can override that and audio worklets have a communication channel)","msgtype":"m.text"},"ts":1602602571000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the issue is how do we shut down worklets when you discard a document. I guess you are thinking a document -> all worklets pointer, instead of the inverse?","msgtype":"m.text"},"ts":1602602627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, or document->agent->agent cluster->worklet agents","msgtype":"m.text"},"ts":1602602652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1602602664000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think there's only ever one window agent per agent cluster, but this falls flat when dedicated workers can have a worklet","msgtype":"m.text"},"ts":1602602683000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They currently cannot; it's [Exposed=Window]","msgtype":"m.text"},"ts":1602602697000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Did we put worklets in the window agent cluster?","msgtype":"m.text"},"ts":1602602705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure that's formalized, it was one of the somewhat open questions","msgtype":"m.text"},"ts":1602602726000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's needed for audio worklets","msgtype":"m.text"},"ts":1602602731000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It looks like we did","msgtype":"m.text"},"ts":1602602743000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Other worklets could potentially also sit in their own agent cluster","msgtype":"m.text"},"ts":1602602744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"They don't get isTopLevel","msgtype":"m.text"},"ts":1602602751000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah true, but they could in theory is what I'm saying,  there's nothing binding them","msgtype":"m.text"},"ts":1602602770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1602602780000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"document -> worklets pointer seems fine","msgtype":"m.text"},"ts":1602602791000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Honestly that would be better for workers too","msgtype":"m.text"},"ts":1602602797000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right now \"discard a Document\" is pretty backward, it says something like \"all workers whose owner document is this document\"","msgtype":"m.text"},"ts":1602602815000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah I don't like that","msgtype":"m.text"},"ts":1602602828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"AudioWorklet looks to be SecureContext in Firefox too https://searchfox.org/mozilla-central/source/dom/webidl/AudioWorklet.webidl","msgtype":"m.text"},"ts":1602602893000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1602602903000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think https://github.com/w3c/css-houdini-drafts/issues/843 can be closed?","msgtype":"m.text"},"ts":1602605970000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Now that we have one event loop per agent, it's pretty clear they have their own event loop. And it's also clear it may interleave with (instead of being parallel to) a window's event loop, or whichever, but that's already allowed for all non-[[CanBlock]] cases.","msgtype":"m.text"},"ts":1602606012000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what runs the event loop though? Does create a worklet do that?","msgtype":"m.text"},"ts":1602606096000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and does the event loop algorithm need worklet-specific steps similar to what it does for workers?","msgtype":"m.text"},"ts":1602606120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(to be clear, I haven't thought about the second question much at all)","msgtype":"m.text"},"ts":1602606134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess we should add a counterpart sentence like workers' \"Event loop: Run the responsible event loop specified by inside settings until it is destroyed.\"","msgtype":"m.text"},"ts":1602606158000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That's easy enough.","msgtype":"m.text"},"ts":1602606170000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh wait, it already exists","msgtype":"m.text"},"ts":1602606217000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://whatpr.org/html/6056/worklets.html#create-a-worklet-global-scope (but it is misnested)","msgtype":"m.text"},"ts":1602606249000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"It looks like no need for worklet-specific steps in event loop processing model. However, we should explicitly state that when you terminate a worklet, its event loop gets destroyed. For workers the event loop processing model checks that every time (which is a bit strange).","msgtype":"m.text"},"ts":1602606461000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool, I'll do a more detailed read tomorrow","msgtype":"m.text"},"ts":1602607020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I should probably start with the PR Preview version as that's just much easier","msgtype":"m.text"},"ts":1602607032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah definitely","msgtype":"m.text"},"ts":1602607583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: i got a few naive questions about worklets if you got a min","msgtype":"m.text"},"ts":1602609229000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: for sure","msgtype":"m.text"},"ts":1602609262000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the encouragement for idempotence in the worklet spec has no normative teeth, is that right?","msgtype":"m.text"},"ts":1602609302000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"currently, that is","msgtype":"m.text"},"ts":1602609306000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: indeed.","msgtype":"m.text"},"ts":1602609321000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"judging by your (3) prohibiting `eval('this')`, i imagine currently `eval('this')` actually returns the global?","msgtype":"m.text"},"ts":1602609330000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: I didn't test implementations, but it does in specs. \"global this value\" is left as its default (= global) when creating the realm.","msgtype":"m.text"},"ts":1602609397000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: gotcha, thanks.","msgtype":"m.text"},"ts":1602609409000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"this seems to be the same problem as freezing all inadvertent \"side channels\", which is, as you know, pretty difficult to plug. jumping through hoops to remove the obvious ways to access the global is only a portion of the API surface where the author can accidentally end up depending on persistent global state","msgtype":"m.text"},"ts":1602609712000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"e.g., stuff added to built-in protos","msgtype":"m.text"},"ts":1602609749000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: for sure. The intention was always just to avoid obvious easy footguns, not to be airtight.","msgtype":"m.text"},"ts":1602609810000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"From that perspective I guess prohibiting `eval('this')` is not really a win.","msgtype":"m.text"},"ts":1602609828000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"okay, i see","msgtype":"m.text"},"ts":1602609879000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But e.g. I think the hope is that you wouldn't be able to use some isomorphic library which relies on globalThis to store global state","msgtype":"m.text"},"ts":1602609896000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm not sure how we feel about polyfills...","msgtype":"m.text"},"ts":1602609903000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, that came to mind as a primary concern","msgtype":"m.text"},"ts":1602609956000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"in practice i think you're saying \"don't polyfill\", since polyfilling everytime goes against the performance reasons you're using worklets to begin with, i imagine","msgtype":"m.text"},"ts":1602609985000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Yeah, I suspect that was the intention","msgtype":"m.text"},"ts":1602610134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(HTML is inheriting this spec from the original authors, so I am not 100% on much of this.)","msgtype":"m.text"},"ts":1602610148000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"thanks for the background","msgtype":"m.text"},"ts":1602610523000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i think right now, given the intention of plugging the obvious badness, i like the idea of shallow freezing the global object the most","msgtype":"m.text"},"ts":1602610549000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Yeah that sounds pretty nice. Let's see what folks say.","msgtype":"m.text"},"ts":1602610763000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Was XML5 ever an official proposal or just a dream spec kind of thing? https://ygg01.github.io/xml5_draft/","msgtype":"m.text"},"ts":1602630992000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"The latter","msgtype":"m.text"},"ts":1602631227000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Thanks Domenic :D","msgtype":"m.text"},"ts":1602631323000,"senderName":"innovati","senderId":"innovati@irc"},
{"content":{"body":"It might be implemented in Servo now that I think harder","msgtype":"m.text"},"ts":1602632685000,"senderName":"Domenic","senderId":"Domenic@irc"}
]