[
{"content":{"body":"wanderview: in this case, a large part of the issue is that only in Gecko do these ambiguities cause crashes... so omitting those spec steps does not pose a problem for other browsers, so it's just a matter of superhuman diligence to remember \"gecko doesn't have a fallback if you combine the code you're implementing with multiple globals in certain ways\". That isn't something you can catch during code review easily.","msgtype":"m.text"},"ts":1500948455000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In other words, it's not a straightforward \"the spec says to do X, but X is undefined.\"","msgtype":"m.text"},"ts":1500948528000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm not just talking about this global issue","msgtype":"m.text"},"ts":1500948587000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Fair.","msgtype":"m.text"},"ts":1500948655000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Are we just missing browser support for input type=date and min? Use case: Age validation https://jsfiddle.net/kaihendry/r97gpgmn/","msgtype":"m.text"},"ts":1500957207000,"senderName":"hendry","senderId":"hendry@irc"},
{"content":{"body":"annevk: was going to ask tc39 to fast track CancelError or whatever they're calling it, and we'll use it instead of DOMException AbortError. Any objections?","msgtype":"m.text"},"ts":1500968857000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Gives us compatibility with whatever they come up with, if they get anywhere","msgtype":"m.text"},"ts":1500968881000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm not sure","msgtype":"m.text"},"ts":1500969013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Compatibility as in promises will reject with the same error","msgtype":"m.text"},"ts":1500969021000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: if what they're doing has buy-in from everyone we should just use that I guess","msgtype":"m.text"},"ts":1500969065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and not pick bits and pieces","msgtype":"m.text"},"ts":1500969072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: pretty sure their thing is a year away at least. No discussion of sending signals into workers for instance. Whereas a JavaScript CancelError seems useful in other places, such as streams","msgtype":"m.text"},"ts":1500969188000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"If their thing happens, I'm worried about devs having to check for both AbortError and CancelError in promise rejections","msgtype":"m.text"},"ts":1500969242000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And stream errors for that matter","msgtype":"m.text"},"ts":1500969251000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: we'd have to define the serialization/deserialization for any kind of object they come up with","msgtype":"m.text"},"ts":1500969252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: ECMAScript doesn't cover that","msgtype":"m.text"},"ts":1500969263000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: Domenic has a PR for using \"AbortError\" in Streams","msgtype":"m.text"},"ts":1500969291000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: do you know what Domenic thinks?","msgtype":"m.text"},"ts":1500969313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it also seems rather ugly naming-wise","msgtype":"m.text"},"ts":1500969326000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: having just named everything Abort, or would we swap all that back to Cancel?","msgtype":"m.text"},"ts":1500969344000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: wasn't aware that AbortError was going into streams already. Maybe what I'm worried about would be better fixed with a isAbortError() helper somewhere.","msgtype":"m.text"},"ts":1500969482000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Which would include any new abort/cancel thing tc39 ship","msgtype":"m.text"},"ts":1500969498000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: will they actually ship though?","msgtype":"m.text"},"ts":1500969510000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I mean, we could object","msgtype":"m.text"},"ts":1500969517000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's just a proposal at this point","msgtype":"m.text"},"ts":1500969533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I suggest you discuss with Domenic","msgtype":"m.text"},"ts":1500969546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: our plan is to ask them to use AbortError.","msgtype":"m.text"},"ts":1500969702000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: as in DOMException?","msgtype":"m.text"},"ts":1500969734000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1500969752000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Huh, ok","msgtype":"m.text"},"ts":1500969789000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"crawls back in his cave","msgtype":"m.emote"},"ts":1500969811000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: are you on travels, or up at silly-oclock?","msgtype":"m.text"},"ts":1500969970000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: it's a little frustrating though that we now have to wait and see again since we were pretty close to shipping abortable fetch","msgtype":"m.text"},"ts":1500969984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no waiting, at least, none from us.","msgtype":"m.text"},"ts":1500970005000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Please ship.","msgtype":"m.text"},"ts":1500970016000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We will object to anything that causes shipping delays.","msgtype":"m.text"},"ts":1500970033000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: 7:30am flight.","msgtype":"m.text"},"ts":1500970043000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oof","msgtype":"m.text"},"ts":1500970094000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: oh wow, good morning!","msgtype":"m.text"},"ts":1500970121000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: enjoy your extremely long day","msgtype":"m.text"},"ts":1500970132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, it was either this or miss Japanese class last night, haha.","msgtype":"m.text"},"ts":1500970176000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Anyway, bbiab","msgtype":"m.text"},"ts":1500970246000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: JakeA: when is aborting fetch landing in the spec, anyway?","msgtype":"m.text"},"ts":1500972914000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm not sure about the spec, but Mozilla are going to implement based off https://github.com/w3c/web-platform-tests/pull/6484","msgtype":"m.text"},"ts":1500973010000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: I think JakeA's been busy with other things?","msgtype":"m.text"},"ts":1500973022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I've been meaning to look at it to see if there's some kind of language that can work, but haven't made the time thus far","msgtype":"m.text"},"ts":1500973049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah I'm hoping to get back to fix the test nits later this week. But I think the spec is kinda blocked on finding a language we can agree on.","msgtype":"m.text"},"ts":1500973097000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: fetch being partially async from the main thread and then fetch itself doing async things from the perspective of itself and then the main thread being able to cancel all is just rather hard to wrap my head around still","msgtype":"m.text"},"ts":1500973142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: we don't really have good language available either for these things, just \"in parallel\" which is a rather poor primitive","msgtype":"m.text"},"ts":1500973173000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I am not yet convinced \"in parallel\" is problematic, but happy to defer... I think ideally we should be able to write something that works and iterate later though.","msgtype":"m.text"},"ts":1500973211000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: if inside \"in parallel\" you use \"in parallel\" again. How do you message between those?","msgtype":"m.text"},"ts":1500973533000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's not allowed to use in parallel from inside in parallel","msgtype":"m.text"},"ts":1500973551000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how do you message from the main thread to something that happens \"in parallel\"?","msgtype":"m.text"},"ts":1500973553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: then it's already not suitable for fetch!","msgtype":"m.text"},"ts":1500973560000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't see how","msgtype":"m.text"},"ts":1500973568000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can still do things concurrently","msgtype":"m.text"},"ts":1500973611000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just not \"in parallel\"","msgtype":"m.text"},"ts":1500973615000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: in impls fetch is a thread that itself does other async work, such as reading from disk","msgtype":"m.text"},"ts":1500973616000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Concurrent things can just operate on shared objects","msgtype":"m.text"},"ts":1500973625000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, shared infra structures","msgtype":"m.text"},"ts":1500973635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what's a concurrent thing?","msgtype":"m.text"},"ts":1500973638000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Two processes taking place concurrently","msgtype":"m.text"},"ts":1500973650000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Like two fetches","msgtype":"m.text"},"ts":1500973652000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We do this all the time","msgtype":"m.text"},"ts":1500973656000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: how is that different from in parallel?","msgtype":"m.text"},"ts":1500973669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Because \"in parallel\" is an invocation that takes you from the main thread to the pool of stuff running in parallel to the main thread","msgtype":"m.text"},"ts":1500973691000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If you're already in that pool of stuff you can just do more stuff","msgtype":"m.text"},"ts":1500973697000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: with what language?","msgtype":"m.text"},"ts":1500973709000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Do X\", \"Do X without blocking Y\", \"Also do X\"...","msgtype":"m.text"},"ts":1500973725000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just English suffices","msgtype":"m.text"},"ts":1500973733000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that seems very imprecise","msgtype":"m.text"},"ts":1500973806000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, it purposefully is, to allow implementations freedom to implement whichever concurrency model or threading choices they want","msgtype":"m.text"},"ts":1500973829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it also still doesn't address how the main thread talks to the in parallel pool after it's created","msgtype":"m.text"},"ts":1500973833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, that's an interesting one","msgtype":"m.text"},"ts":1500973848000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think if we had explicit threads and messaging impls could still do whatever","msgtype":"m.text"},"ts":1500973868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Currently I think we just queue a task back on the main thread to check some state, before going back to in-parallel","msgtype":"m.text"},"ts":1500973871000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think it'd be harder to ensure we don't constrain observable things","msgtype":"m.text"},"ts":1500973889000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"In some cases that would actually be good","msgtype":"m.text"},"ts":1500973918000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g., it would eliminate some racing stuff with cookies and such","msgtype":"m.text"},"ts":1500973929000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sometimes we need the in parallel stuff to be a queue","msgtype":"m.text"},"ts":1500973943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I just haven't seen that yet, but you've done this more","msgtype":"m.text"},"ts":1500973969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The idea is partially from Jeffrey Yasskin","msgtype":"m.text"},"ts":1500974018000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And also how I'm told storage gets synchronized and updated across the various processes that might need to access it","msgtype":"m.text"},"ts":1500974055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you just have \"in parallel\" you get races between processes and you can't really define shared workers or service workers well","msgtype":"m.text"},"ts":1500974089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Those need a \"named\" thread to keep things in order","msgtype":"m.text"},"ts":1500974100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And so in effect while we're not constraining impls, we're allowing freedom they don't really have if they want something robust","msgtype":"m.text"},"ts":1500974129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I don't understand why these races are bad, instead of good. Between multiple processes seems like a perfectly fine way to race.","msgtype":"m.text"},"ts":1500974163000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: maybe it's different, it's that the spec can't describe something that has to exist","msgtype":"m.text"},"ts":1500974261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: you need a central place to ask for service workers","msgtype":"m.text"},"ts":1500974283000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if that's just \"in parallel\", it's not really defined","msgtype":"m.text"},"ts":1500974299000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: looking at the Fetch PR again and the Fetch Standard","msgtype":"m.text"},"ts":1500985439000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we already have language such as \"If at any point fetch is terminated with reason reason, run these subsubsteps\"","msgtype":"m.text"},"ts":1500985457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it seems that only addresses responses, but not requests","msgtype":"m.text"},"ts":1500985470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: must have been an oversight when adding request ReadableStream","msgtype":"m.text"},"ts":1500985481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I think if we just used that language here and there it's probably good enough for v1","msgtype":"m.text"},"ts":1500985505000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: just make it clear what the observable effects will be of fetch being terminated","msgtype":"m.text"},"ts":1500985535000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: seems okay?","msgtype":"m.text"},"ts":1500985554000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so we either end up with a single \"If at any point fetch is terminated…\" set of steps, that has to express all the possible points it could be at, or lots of small \"if during these steps the signal aborts…\" at the various points where abort is handled differently","msgtype":"m.text"},"ts":1500985583000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I was looking into the latter, but Domenic didn't think it matched how it would be implemented.","msgtype":"m.text"},"ts":1500985622000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I'm happy with the former, it'll just be hand-wavey in terms of references","msgtype":"m.text"},"ts":1500985639000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'd like the latter, but I don't want to go down the signal route","msgtype":"m.text"},"ts":1500985792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: well, except for the signal being \"terminate the fetch\"","msgtype":"m.text"},"ts":1500985802000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so rather than invent a new way, just extend the existing technique to cover all cases","msgtype":"m.text"},"ts":1500985938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not sure I understand. As in, have steps like \"if the fetch is terminated during these steps, run the following steps:\" throughout fetch, and make the signal \"terminate the fetch:?","msgtype":"m.text"},"ts":1500986015000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yes","msgtype":"m.text"},"ts":1500986080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: basically extend what's there now","msgtype":"m.text"},"ts":1500986100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but right now there's only one point that says how to terminate right? It's at https://fetch.spec.whatwg.org/#concept-fetch-terminate","msgtype":"m.text"},"ts":1500986203000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: \"terminated\" is referenced from various places in the algorithm","msgtype":"m.text"},"ts":1500986269000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: e.g., \"Wait until all the headers are transmitted or fetch is being terminated with reason reason. If fetch is being terminated, then set response’s termination reason to reason.\"","msgtype":"m.text"},"ts":1500986274000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it also errors a response body using that kind of language","msgtype":"m.text"},"ts":1500986309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: it's just that request bodies are not covered due to oversight","msgtype":"m.text"},"ts":1500986319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: gotcha. Yeah, that seems like a good way to continue","msgtype":"m.text"},"ts":1500986336000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: https://github.com/whatwg/fetch/pull/523#issuecomment-317725255 are we on the same page?","msgtype":"m.text"},"ts":1500986601000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yeah, although I want to stop using the substeps language if possible, just have \"steps\"","msgtype":"m.text"},"ts":1500986688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"cool, cheers!","msgtype":"m.text"},"ts":1500986791000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: has all the interesting bits moved from Shadow DOM spec to DOM and HTML ?","msgtype":"m.text"},"ts":1501001714000,"senderName":"smaug","senderId":"smaug@irc"},
{"content":{"body":"smaug: I think the main things lacking are focus (but that's always been vague) and maybe some UI events stuff","msgtype":"m.text"},"ts":1501002129000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug: I guess I should create some kind of tracker issue for the remaining bits","msgtype":"m.text"},"ts":1501002179000,"senderName":"annevk","senderId":"annevk@irc"}
]