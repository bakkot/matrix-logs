[
{"content":{"body":"JakeA: reading your reply here about the \"first-party-cookies\" and SW:  https://mail.google.com/mail/u/0/#label/blink-dev/14c314afd2174c91","msgtype":"m.text"},"ts":1427118070000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: just FYI, I think we are going to disable SW interception completely when the user has \"disable third-party cookies\" preference enabled","msgtype":"m.text"},"ts":1427118092000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not quite the same, because its not based on a header request... but seems similar","msgtype":"m.text"},"ts":1427118103000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I mean, disable SW interception completely for third party iframes","msgtype":"m.text"},"ts":1427118129000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Phew!","msgtype":"m.text"},"ts":1427118201000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I was worried for a second there","msgtype":"m.text"},"ts":1427118208000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: that seems ok, what's the attack? That the iframe request can look at the referrer and track?","msgtype":"m.text"},"ts":1427118252000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well, we want to disable IDB and other storage APIs for 3rd party iframes when the pref is set... to prevent tracking... but once we are in the SW we have no way to tell if a third party iframe is involved","msgtype":"m.text"},"ts":1427118319000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we want to completely hide the API endpoints on the global... so we need to do it at SW spin-up","msgtype":"m.text"},"ts":1427118348000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: also, I don't know if you have an opinion on this issue, but its the other main thing we have to deal with to enable IDB on SW:  https://github.com/slightlyoff/ServiceWorker/issues/648#issuecomment-78621258","msgtype":"m.text"},"ts":1427118440000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"we currently don't allow IDB in sandboxed iframes at all","msgtype":"m.text"},"ts":1427118455000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Hmm good point, I wonder what Chrome does","msgtype":"m.text"},"ts":1427118838000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"gsnedders: Thank god, I can finally submit a PR for the \"converting XML name, but I wont' tell you which one\" error message.","msgtype":"m.text"},"ts":1427125932000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hm?","msgtype":"m.text"},"ts":1427126018000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: why is the input for TextDecoder decode optional? Is that in preparation for TextDecoder to become a transform stream?","msgtype":"m.text"},"ts":1427129938000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA, for signalling EOF","msgtype":"m.text"},"ts":1427129970000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I though","msgtype":"m.text"},"ts":1427129979000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"t","msgtype":"m.text"},"ts":1427129985000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ahh ok","msgtype":"m.text"},"ts":1427130052000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I may also have that completely backwards, though :)","msgtype":"m.text"},"ts":1427130090000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: if I'm streaming a string & reading the chunks with TextDecoder, is there anything I can do about a chunk landing mid-way through a multibyte codepoint?","msgtype":"m.text"},"ts":1427130553000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I really want a TextDecoder transform stream","msgtype":"m.text"},"ts":1427130576000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yea... seems there should be a TextDecoder stream that internally re-chunks","msgtype":"m.text"},"ts":1427130918000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: TextDecoder has a 'stream' option, but that appears to read the whole stream","msgtype":"m.text"},"ts":1427131147000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ohhh no wait","msgtype":"m.text"},"ts":1427131172000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"If options's stream is true, the method can be invoked multiple times to process a fragmented stream.\"","msgtype":"m.text"},"ts":1427131192000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: what are you looking at?","msgtype":"m.text"},"ts":1427131223000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"https://encoding.spec.whatwg.org/","msgtype":"m.text"},"ts":1427131230000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I can't figure out how to use it","msgtype":"m.text"},"ts":1427131406000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"var decoder = new TextDecoder();","msgtype":"m.text"},"ts":1427131433000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"decoder.decode(???, {stream: true});","msgtype":"m.text"},"ts":1427131454000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Then keep calling decoder.decode() to get more data","msgtype":"m.text"},"ts":1427131464000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but I can't figure out that first param \"BufferSource\"","msgtype":"m.text"},"ts":1427131480000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It can't be a stream, as decode() is sync and stream reading isn't","msgtype":"m.text"},"ts":1427131503000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: maybe annevk knows","msgtype":"m.text"},"ts":1427131534000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: the spec doesn't seem to reference whatwg-streams, so I assume its not related?","msgtype":"m.text"},"ts":1427131550000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I think you're right, stream means something different here","msgtype":"m.text"},"ts":1427131637000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: does anyone implement this spec yet?  or it mainly meant as something other specs can refer to?","msgtype":"m.text"},"ts":1427131747000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it appears to be in Canary","msgtype":"m.text"},"ts":1427131758000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: http://heycam.github.io/webidl/#common-BufferSource","msgtype":"m.text"},"ts":1427131825000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess it should link there","msgtype":"m.text"},"ts":1427131834000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Aha!","msgtype":"m.text"},"ts":1427131844000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"the \"copy to\" link in the decode() function goes to that spec","msgtype":"m.text"},"ts":1427131848000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: :)","msgtype":"m.text"},"ts":1427132391000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ok, worked it out. var d = new TextDecoder(); d.decode(uint8Array, {stream: true}); /* returns whole chars, doesn't cut off partial utf8 chars */ d.decode(uint8Array, {stream: true}); /* this is added to the data it had so far */","msgtype":"m.text"},"ts":1427132749000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview ^","msgtype":"m.text"},"ts":1427132799000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I'm lacking context but I can help w/ text encoding API stuff. :)","msgtype":"m.text"},"ts":1427132830000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: I'm playing with the streams API, so I'm getting chunks as uint8array, I'm trying to read this as text in a way that don't fail if the chunk ends/starts on parts of a multibyte char","msgtype":"m.text"},"ts":1427132879000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: Yep, {stream:true}. And you probably want to call d.decode() (no i.e. default args) at the end of the stream to flush","msgtype":"m.text"},"ts":1427132920000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"so that if you have a partial sequence it correctly generates a U+FFFD","msgtype":"m.text"},"ts":1427132949000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"JakeA: I haven't had a chance to soak in streams; glad someone's trying to compose encoding+streams","msgtype":"m.text"},"ts":1427133005000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: like this? https://jsbin.com/gowaze/quiet","msgtype":"m.text"},"ts":1427133008000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: lgtm","msgtype":"m.text"},"ts":1427133049000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: ideally in future this should be stream.pipeThrough(new TextDecoder) I think","msgtype":"m.text"},"ts":1427133052000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is the text regarding the stream option correct?  https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode","msgtype":"m.text"},"ts":1427133066000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Um... not really correct. Not very helpful anyway....","msgtype":"m.text"},"ts":1427133131000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1427133150000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: and I guess everyone supports it except IE/safari","msgtype":"m.text"},"ts":1427133198000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I has polyfill: https://github.com/inexorabletash/text-encoding","msgtype":"m.text"},"ts":1427133233000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"nice","msgtype":"m.text"},"ts":1427133288000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Spec isn't much clearer on 'stream' but that's not the spec's job. :) MDN could say: \"A Boolean flag indicating that additional data to decode will follow in subsequent calls to decode(). Set to true if processing the data in chunks, and false for the final chunk or if the data is not chunked\" or something","msgtype":"m.text"},"ts":1427133418000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"JakeA: yeah the plan is to do \"encoding api v2\" when we have all the parts of streams figured out","msgtype":"m.text"},"ts":1427133843000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Possibly add some simpler static methods for one-shot encoding/decoding while we're there","msgtype":"m.text"},"ts":1427133860000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think I asked annevk about this and he said that TextEncoder instances didn't keep any state, and so I'm not sure what to do about landing halfway through multibyte content :-S","msgtype":"m.text"},"ts":1427133899000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: jsbell: so does my use of decoder make sense here https://jsbin.com/gowaze/edit?js","msgtype":"m.text"},"ts":1427133901000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: they retain a stream, so there's some state","msgtype":"m.text"},"ts":1427133920000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"\"stream\"","msgtype":"m.text"},"ts":1427133929000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"calling .decode(input, {stream:true}) pushes to that internal stream","msgtype":"m.text"},"ts":1427133955000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"gah jsbin I want to love you but why is the content area so small (jshint + giant features banner)","msgtype":"m.text"},"ts":1427133971000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"bit.ly/livedom :)","msgtype":"m.text"},"ts":1427134007000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: in general you'll either have { value: x, done: false } or { value: undefined, done: true }, so you can simplify a bit","msgtype":"m.text"},"ts":1427134025000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but yeah looks solid in general","msgtype":"m.text"},"ts":1427134061000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what simplification? Drop the || []? I was worries the explicit undefined would be counted as a value","msgtype":"m.text"},"ts":1427134124000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"But that doesn't appear to be the case, cool","msgtype":"m.text"},"ts":1427134145000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I was thinking, test result.done early and bail immediatley if you see it","msgtype":"m.text"},"ts":1427134160000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then assume it's false from then on","msgtype":"m.text"},"ts":1427134166000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think I can, because partialCell may still contain data. Also calling decode will flush any remaining data.","msgtype":"m.text"},"ts":1427134222000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ah, interesting, I see.","msgtype":"m.text"},"ts":1427134319000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You don't need to pass { stream: true } for previous chunks, only for the last one?","msgtype":"m.text"},"ts":1427134341000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess just worth testing this thing on some real data and we'll know the answer :P","msgtype":"m.text"},"ts":1427134439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: I may have lost context, but {stream: result.done} seems like it should be {stream: !result.done} ??","msgtype":"m.text"},"ts":1427134629000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"right, I think that is what I was implying as well","msgtype":"m.text"},"ts":1427134729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"stream is basically !flush","msgtype":"m.text"},"ts":1427134739000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"<3 wanderview for updating MDN already","msgtype":"m.text"},"ts":1427134872000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"np! thanks for the text :-)","msgtype":"m.text"},"ts":1427134886000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: if you're feeling really keen, you can crib the examples from https://github.com/inexorabletash/text-encoding","msgtype":"m.text"},"ts":1427135129000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: thanks... I'll see if I can find the time later today","msgtype":"m.text"},"ts":1427135205000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"jsbell: oh wow, yes, don't know how that crept in","msgtype":"m.text"},"ts":1427136914000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I can code, honest","msgtype":"m.text"},"ts":1427136998000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I can code, honest","msgtype":"m.text"},"ts":1427136999000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is there anyone around who understands how microtasks are supposed to work?","msgtype":"m.text"},"ts":1427152000000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I am finding the spec confusing","msgtype":"m.text"},"ts":1427152004000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: maybe? what's up?","msgtype":"m.text"},"ts":1427152794000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: is there anything that causes microtasks to be performed after an event handler, function-based timer, or other non-script-based callback is run?","msgtype":"m.text"},"ts":1427152972000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it sure sounds like this algorithm should run after such callbacks: https://html.spec.whatwg.org/#clean-up-after-running-a-callback","msgtype":"m.text"},"ts":1427153019000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but I could not find anything that would cause it to happen; only seems to happen for stuff evaluating bare script code, like <script> or a timer with a string instead of a function","msgtype":"m.text"},"ts":1427153077000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: https://html.spec.whatwg.org/multipage/webappapis.html#processing-model-9 step 7 perhaps?","msgtype":"m.text"},"ts":1427154355000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"there are various other invocations of the \"Perform a microtask checkpoint.\" text, for example in the \"spin the event loop\" section","msgtype":"m.text"},"ts":1427154401000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"but the task one in the processing model should cover event handler, function-based timer and other non-script-based callbacks","msgtype":"m.text"},"ts":1427154560000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"since those are all tasks","msgtype":"m.text"},"ts":1427154563000,"senderName":"jamesr___","senderId":"jamesr___@irc"},
{"content":{"body":"(sorry was afk). Agreed - anything that isn't covered by that sounds like a spec bug.","msgtype":"m.text"},"ts":1427154776000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jgraham: I've lost track of what the actual question is in the serviceworker/wpt thread","msgtype":"m.text"},"ts":1427154957000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: The latest messages are about whether the tests can be written to run on https rather than on http","msgtype":"m.text"},"ts":1427155031000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"AIUI the tests currently rely on running on a hostname that's whitelisted as allowing SW on http i.e. localhost or 127.0.0.1","msgtype":"m.text"},"ts":1427155075000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jamesr___: yeah, I am not sure if event handlers, function timers, and miscellaneous functioncallbacks, are all meant to be handled by the post-task catchall","msgtype":"m.text"},"ts":1427155119000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"jamesr___: or if they should have some specific affordance","msgtype":"m.text"},"ts":1427155127000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"jgraham: as far as chrome's test harness goes, https://localhost:8443 should be available","msgtype":"m.text"},"ts":1427155134000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jamesr___: it potentially makes a difference, for example for events dispatched synchronously from within script","msgtype":"m.text"},"ts":1427155145000,"senderName":"othermaciej","senderId":"othermaciej@irc"}
]