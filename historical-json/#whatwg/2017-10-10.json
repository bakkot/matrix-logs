[
{"content":{"body":"jyasskin I answered the question, tried to give attribution for your assistance, and quoted this chat: https://stackoverflow.com/questions/46642569/http2-push-and-native-es-modules-entry-module-push-is-ignored/46656731#46656731","msgtype":"m.text"},"ts":1507593842000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"(let me know if you’d prefer I didn’t and I’ll edit accordingly)","msgtype":"m.text"},"ts":1507593860000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"I have a feeling this is gonna be helpful for others in the future in any case.","msgtype":"m.text"},"ts":1507593884000,"senderName":"bathos","senderId":"bathos@irc"},
{"content":{"body":"Domenic: <script> tags is a subresource of a document/window... a worker script is a top level entity itself","msgtype":"m.text"},"ts":1507600078000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Still don't really understand why that matters. I guess we use different rules for picking the service worker in such cases but I don't understand why or what goes wrong when we don't.","msgtype":"m.text"},"ts":1507603735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't think anything goes wrong per-se. It just would be a bit weird where currently the service worker controlling a client is determined by the URL the client is loaded from being in scope of the SW, while for a cross-origin worker the URL would never be in scope. So either we change the logic to select a SW for all module workers (making them behave differently than non-module workers), or we only change it for cross-origin workers, which is also a","msgtype":"m.text"},"ts":1507603938000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"bit inconsistent.","msgtype":"m.text"},"ts":1507603938000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"To me it doesn't sound too strange to treat them similar to about:blank iframes etc, where we also just take the SW of the creating document as the controlling service worker. Treat cross-origin module workers almost like an anonymous \"about:blank\" worker that just happens to import a cross-origin module...","msgtype":"m.text"},"ts":1507603988000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"there is no cross-origin non-subresource from a service worker perspective... it just matches scopes on that other origin","msgtype":"m.text"},"ts":1507604002000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1507604004000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"what Domenic is asking for sounds like window.open(crossOriginURL) where it loads resources from another origin, but then would weirdly be forced the openers origin...","msgtype":"m.text"},"ts":1507604100000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: new Worker(url) is very similar to window.open(url)... they both open top level clients","msgtype":"m.text"},"ts":1507604268000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"with the notable difference that we throw a security error for new Worker() if the url is cross origin from the current context","msgtype":"m.text"},"ts":1507604292000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"it's kind of new Worker(\"about:blank\") followed by worker.write(\"import(\"cross-origin-url\")), if that would be possible. I'm not saying it isn't different than what we do now, but it surely isn't impossible either. We'd juts have to decide how to treat it.","msgtype":"m.text"},"ts":1507604458000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"(and I'm not sure if the difference in treatment should be made at same-origin vs cross origin or at classic vs module worker)","msgtype":"m.text"},"ts":1507604480000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1507604533000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"(and for what it's worth, I think having cross-origin (module) workers that actually are cross origin (access the other origins storage etc) would also be a worthwhile thing to explore, but yet again another complication (it would address at least some of the foreign-fetch/navigator.connect use cases, combined with nested workers)","msgtype":"m.text"},"ts":1507604642000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"I guess I would be more comfortable just requiring the top level module URL to be same-origin to match classic script loading","msgtype":"m.text"},"ts":1507604646000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"adding cross-origin worker support seems orthogonal to module loading to me","msgtype":"m.text"},"ts":1507604727000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"or maybe thats what this PR is about","msgtype":"m.text"},"ts":1507605510000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: agreed, will file an issue later with hopefully a detailed enough explanation","msgtype":"m.text"},"ts":1507609968000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: bathos: also covered at https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/#requests-without-credentials-use-a-separate-connection","msgtype":"m.text"},"ts":1507614459000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hey folks, if you have thoughts &/|| comments to make about adding mixins to WebIDL, now's about the right time: https://github.com/heycam/webidl/pull/433","msgtype":"m.text"},"ts":1507624725000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"jyasskin: filed https://bugs.chromium.org/p/chromium/issues/detail?id=773219","msgtype":"m.text"},"ts":1507625960000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"so, is calc() supposed to work in font: shorthand property? as in https://jsfiddle.net/29fsrxq3/","msgtype":"m.text"},"ts":1507634184000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: calc() is supposed to work everywhere until specified otherwise.","msgtype":"m.text"},"ts":1507635885000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: thanks. will report a bug and a wpt test then.","msgtype":"m.text"},"ts":1507635903000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: It appears big for me in both Safari and Chrome.","msgtype":"m.text"},"ts":1507635932000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: right. but not in firefox.","msgtype":"m.text"},"ts":1507635952000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Yep.","msgtype":"m.text"},"ts":1507635970000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hsivonen: what's a web-observable caller of \"UTF-8 decode without BOM or fail\"?","msgtype":"m.text"},"ts":1507639843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I thought I found one in HTML, but that appears to be an error when I tested","msgtype":"m.text"},"ts":1507639860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I found another decoder, the thing that navigates to fragments...","msgtype":"m.text"},"ts":1507641404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is not amused","msgtype":"m.emote"},"ts":1507641412000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: also, it seems this endpoint doesn't allow a BOM to override it","msgtype":"m.text"},"ts":1507641768000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: does not escaping % break the idempotency/parse-serialize-parse guarantees for URLs? Haven't checked but feels like it might.","msgtype":"m.text"},"ts":1507642819000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we only do something for %2e. But you cannot get that serialized I think.","msgtype":"m.text"},"ts":1507642928000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: at least not in a place where parse will then take it away again","msgtype":"m.text"},"ts":1507642948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: hope the module worker issue is clear now","msgtype":"m.text"},"ts":1507644290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: also, are implementations first shipping import()? Before <script type=module>?","msgtype":"m.text"},"ts":1507644313000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: or is <script type=module> happening before workers?","msgtype":"m.text"},"ts":1507644325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Web Socket as implented in Gecko, maybe?","msgtype":"m.text"},"ts":1507649253000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: that does indeed seem required as per https://tools.ietf.org/html/rfc6455#section-8.1","msgtype":"m.text"},"ts":1507650811000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: I'll make a note of that in the source","msgtype":"m.text"},"ts":1507650823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hsivonen: ta","msgtype":"m.text"},"ts":1507650887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm, NTLMv2","msgtype":"m.text"},"ts":1507655721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if I want to explore that further; probably not","msgtype":"m.text"},"ts":1507655734000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the answer is definitely not","msgtype":"m.text"},"ts":1507655760000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"JakeA: Thanks!","msgtype":"m.text"},"ts":1507655818000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"ondras: Yeah, what nox said - calc() represents a <number> or <length> or whatever according to its contents, and should be usable *literally everywhere* that any of those types are accepted.","msgtype":"m.text"},"ts":1507660498000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: thanks for confirmation. I already submitted a PR to web-platform-tests and there is an existing (~year) old report in mozilla's bugzilla.","msgtype":"m.text"},"ts":1507660983000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Cool.","msgtype":"m.text"},"ts":1507661168000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ondras: With Stylo landing soon, it will not get fixed in Firefox right now,","msgtype":"m.text"},"ts":1507661251000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: but after Stylo lands, the Rust code that do the parsing is way easier to update to support this, so that's nice.","msgtype":"m.text"},"ts":1507661270000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I understand that Stylo is some brand new css engine for Firefox and people are focused at delivering it instead of fixing old bugs in the old css engine?","msgtype":"m.text"},"ts":1507661295000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: Yes and no.","msgtype":"m.text"},"ts":1507661346000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: Not supporting that in font doesn't break anything currently,","msgtype":"m.text"},"ts":1507661383000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: supporting it *could* break things,","msgtype":"m.text"},"ts":1507661389000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: and we can't afford to deploy Stylo and suddenly realise it breaks websites because it supports more stuff than the previous engine.","msgtype":"m.text"},"ts":1507661448000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I see, okay. (calc in font works in both Chrome and Safari, though.)","msgtype":"m.text"},"ts":1507661531000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: Yeah, so for example, a website could have a font property with calc, for Firefox and Chrome,","msgtype":"m.text"},"ts":1507661552000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Err, Safari and Chrome*","msgtype":"m.text"},"ts":1507661563000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and a different font property for Firefox, without calc,","msgtype":"m.text"},"ts":1507661567000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"That is true.","msgtype":"m.text"},"ts":1507661603000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"and while it's not much probable, supporting calc in Firefox could then break the site under Firefox (for example if the two fonts were different, because they didn't combine well with the rest of the stylesheet as interpreted by Firefox),","msgtype":"m.text"},"ts":1507661606000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"and then we need to disable Stylo on that website, which sucks.","msgtype":"m.text"},"ts":1507661616000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Yeah, it's reasonable to want to separate out those concerns when doing a big launch. ^_^ It's not super-pressing, but it is important to fix eventually - calc() not working in random places is very frustrating for devs.","msgtype":"m.text"},"ts":1507662227000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"true that.","msgtype":"m.text"},"ts":1507662954000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"The point is that Custom Properties are almost useless without calc(), so I suppose that calc() is now getting a lot more attention. At least in my case :-)","msgtype":"m.text"},"ts":1507662993000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Ah, true!","msgtype":"m.text"},"ts":1507663302000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: It's frustrating to le me who participated into Stylo too!","msgtype":"m.text"},"ts":1507663302000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"It takes more code to not support calc() in some places, than to support it everywhere.","msgtype":"m.text"},"ts":1507663319000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"So we had issues about having to *unsupport* calc sometimes.","msgtype":"m.text"},"ts":1507663332000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Nice.","msgtype":"m.text"},"ts":1507663369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"nox: seems we can undo thos now with 57 having branched?","msgtype":"m.text"},"ts":1507663640000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The story is \"don't worry fam we won't forget about doing these changes afterwards\".","msgtype":"m.text"},"ts":1507663699000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I myself have been kidnapped for a different adventure, so I'm not in the know anymore about that kind of mundane details.","msgtype":"m.text"},"ts":1507663721000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Maybe SimonSapin knows? I’m curious now 😊","msgtype":"m.text"},"ts":1507663820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right now pretty much any style system change needs to be done twice. It’ll all be much easier when we can remove the old style system","msgtype":"m.text"},"ts":1507664007000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"but it’ll be a couple release cycles at least before we can","msgtype":"m.text"},"ts":1507664032000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"we need to enable Stylo on Android, support XBL, etc","msgtype":"m.text"},"ts":1507664075000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: ah ok, ta","msgtype":"m.text"},"ts":1507664138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm still not sure on why shared workers would be nondeterministic. They are keyed by (creator origin, worker script URL) so they'd always use the service worker of the creator origin.","msgtype":"m.text"},"ts":1507664214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but which service worker of that origin?","msgtype":"m.text"},"ts":1507664288000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Oh.","msgtype":"m.text"},"ts":1507664298000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yup","msgtype":"m.text"},"ts":1507664527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"curses scopes once more","msgtype":"m.emote"},"ts":1507664553000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"360 noscope 4ever","msgtype":"m.text"},"ts":1507664647000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: hey, so I found a reliable way to check that the WebIDL grammar stays LL(1)","msgtype":"m.text"},"ts":1507665014000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: Which btw uncovered 3 violations in the existing grammar. :)","msgtype":"m.text"},"ts":1507665034000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Exciting :)","msgtype":"m.text"},"ts":1507665040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, I'm not sure exciting is the best way to characterize that…","msgtype":"m.text"},"ts":1507665067000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But it's going to solve an otherwise painful problem.","msgtype":"m.text"},"ts":1507665083000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: It relies on node.js + jsdom + syntax-cli + a custom JS script.","msgtype":"m.text"},"ts":1507665094000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: and should be called by the deploy script (as it's going to be more robust if run on a build rather than on bs source)","msgtype":"m.text"},"ts":1507665145000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: what do you think the best strategy is to incorporate it into the repo/travis file?","msgtype":"m.text"},"ts":1507665170000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: this is basically what the script looks like: https://gist.github.com/tobie/ea7e12bb4cbbc5a28527684e7f14ef20","msgtype":"m.text"},"ts":1507665236000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(Use new jsdom API plz ^_^)","msgtype":"m.text"},"ts":1507665278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh. sure. :D","msgtype":"m.text"},"ts":1507665298000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Basically I would borrow from https://github.com/whatwg/streams","msgtype":"m.text"},"ts":1507665329000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Setup travis as if it's a node project","msgtype":"m.text"},"ts":1507665335000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Check in a package.json and the .js file","msgtype":"m.text"},"ts":1507665340000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and run `node script.js` inside the deploy.sh","msgtype":"m.text"},"ts":1507665363000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"be sure to update it to exit with return code 1 on failure","msgtype":"m.text"},"ts":1507665373000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool. That's perfect.","msgtype":"m.text"},"ts":1507665390000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"That's what I had in mind, but wasn't too sure about all the details of handling multiple scripts.","msgtype":"m.text"},"ts":1507665441000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"All set now. Thanks.","msgtype":"m.text"},"ts":1507665449000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1507665517000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: what did you do to jsdom!?!?!? it's about 2 orders of magnitude faster. o_O","msgtype":"m.text"},"ts":1507666174000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"🌈","msgtype":"m.text"},"ts":1507666187000,"senderName":"Sebmaster","senderId":"Sebmaster@irc"},
{"content":{"body":"lol, dunno, lots of work over time","msgtype":"m.text"},"ts":1507666188000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I was running 9.6.0, apparently","msgtype":"m.text"},"ts":1507666237000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: ah, probably https://github.com/tmpvar/jsdom/blob/master/Changelog.md#971","msgtype":"m.text"},"ts":1507666298000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: that sounds about right (and pretty close to 2 orders of magnitude indeed)","msgtype":"m.text"},"ts":1507666367000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I wonder how many poor souls are stuck on 9.5.0-9.7.0","msgtype":"m.text"},"ts":1507666402000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, one less today. :)","msgtype":"m.text"},"ts":1507668152000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"<a href=\"javascript:window.open();\" target=\"_blank\"> Should that open one or two windows","msgtype":"m.text"},"ts":1507669543000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I assume two, since that would make sense","msgtype":"m.text"},"ts":1507669557000,"senderName":"smaug____","senderId":"smaug____@irc"}
]