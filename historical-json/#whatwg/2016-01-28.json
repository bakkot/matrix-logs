[
{"content":{"body":"Hmm, GitHub is down","msgtype":"m.text"},"ts":1453942116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Fortunately Git is decentralized harhar","msgtype":"m.text"},"ts":1453942143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1453942352000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the graphs at https://status.github.com/ provide some entertainment value as we wait for life to begin again","msgtype":"m.text"},"ts":1453942527000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I like how the Server Availability one shows a 95% average for the day, since it was 100% all day til now that it's 0%","msgtype":"m.text"},"ts":1453942694000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway I guess I'll use the opportunity to stare out the window for a while","msgtype":"m.text"},"ts":1453942744000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"philipj is on an editing blitz while annevk and I are stuck in meetings this week :D","msgtype":"m.text"},"ts":1453962281000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: just doing some easy stuff to avoid the hard stuff (play() promises) :)","msgtype":"m.text"},"ts":1453962407000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1453962865000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan, at 2016-01-27 23:24 UTC, MikeSmith said: about <template><source src=\"\" srcset=\"\"></template> checking, if you mean the errors for the empty values, suppressing those is doable though somewhat significantly more work to implement in the checker than the attribute-is-just-missing case and at","msgtype":"m.text"},"ts":1453963887000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"2016-01-27 23:31 UTC, MikeSmith said: abou 「the spec has requirements forelements that are not in a document」I'm not sure what you mean, so please enlighten me further","msgtype":"m.text"},"ts":1453963888000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"MikeSmith: i meant that both src and srcset attributes were present","msgtype":"m.text"},"ts":1453963944000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: for the other, consider e.g. <script>var img = document.createElement('img');</script> - now that img element is not conforming because it lacks a src attribute","msgtype":"m.text"},"ts":1453964016000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"philipj: for these urls https://w3c.github.io/webappsec-csp/#initialise-global-object-csp (line 2661) https://w3c.github.io/webappsec-csp/#initialise-document-csp (lines 2661, 58669) , http should be done right?","msgtype":"m.text"},"ts":1453964081000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"MikeSmith: i think we need to allow arbitrary values for all attributes, so you can do <img src=\"{{url}}\"> etc","msgtype":"m.text"},"ts":1453964116000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ritsyy: I'm not sure what you mean, but see https://github.com/whatwg/html/pull/574 and the other PRs linked from https://github.com/whatwg/html/issues/573","msgtype":"m.text"},"ts":1453964175000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"MikeSmith: so what i wondered was if we should check presence of attributes based on other attributes, e.g. <template><input type=submit alt></template>, or don't bother","msgtype":"m.text"},"ts":1453964229000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ritsyy: I actually think I've taken care of most issues, so it may be best to wait until they've been merged to see what remains","msgtype":"m.text"},"ts":1453964293000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: i was seeing the \"broken URI fragments\" of the link checker results","msgtype":"m.text"},"ts":1453964295000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"philipj: oh okay","msgtype":"m.text"},"ts":1453964309000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"ritsyy: the CSP one was because of en-US vs. en-GB","msgtype":"m.text"},"ts":1453964323000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"initialize vs initialise","msgtype":"m.text"},"ts":1453964335000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: okay yes i see that, okay will wait until the PRs merge","msgtype":"m.text"},"ts":1453964430000,"senderName":"ritsyy","senderId":"ritsyy@irc"},
{"content":{"body":"zcorpan: so it seems like one way to consider the document-conformance requirements is that they can only apply to a specific state of a document, and certainly it's only possible to HTML-check a particular state","msgtype":"m.text"},"ts":1453968250000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so to me, the <script>var img = document.createElement('img');</script> case is sorta irrelevant","msgtype":"m.text"},"ts":1453968283000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because when you check the document in the state of the source prior to the JS executing, the contents of that script element are just an opaque string, text","msgtype":"m.text"},"ts":1453968368000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or when you consider it terms of the document-conformance requirements for the spec","msgtype":"m.text"},"ts":1453968426000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"of course if we're considering (or checking) the resulting DOM, that's a different case (state)","msgtype":"m.text"},"ts":1453968509000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I guess your point is that the <template> contents are similar to unexecuted JS in that regard","msgtype":"m.text"},"ts":1453968555000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"to me I think the big difference is that we have no way to evaluate any part of arbitrary unexecuted JS in terms of the document-conformance requirements for the DOM it would produce","msgtype":"m.text"},"ts":1453968669000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since it could be doing anything in any number of ways","msgtype":"m.text"},"ts":1453968699000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but in constrast we do have a way to evaluate (static) <template> contents prior to JS execution","msgtype":"m.text"},"ts":1453968769000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"we just clearly need to be more liberal about the requirements","msgtype":"m.text"},"ts":1453968792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: agreed on everything you just said, BUT it's not unreasonable to validate DOM at any point in time during a document's lifetime using a browser's devtools","msgtype":"m.text"},"ts":1453968962000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"MikeSmith: which could validate out-of-document trees just as easily as in-document trees, i would think","msgtype":"m.text"},"ts":1453969014000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah true","msgtype":"m.text"},"ts":1453969020000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"incidentally I want to write devtools integration to actually do that","msgtype":"m.text"},"ts":1453969042000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though would be glad if somebody else beat me to it","msgtype":"m.text"},"ts":1453969074000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I can imagine that browser project could run their own vnu somewhere and their devtools could call that through its HTTP API and show the results","msgtype":"m.text"},"ts":1453969137000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"sending the serialized DOM","msgtype":"m.text"},"ts":1453969155000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so yeah it's not actually so hypothetical a case","msgtype":"m.text"},"ts":1453969182000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I","msgtype":"m.text"},"ts":1453969183000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I am certain we will have it eventually","msgtype":"m.text"},"ts":1453969197000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but since for now the majority case is still people just checking their actual source, I guess I tend to think about the spec doc-conformance requirements more in terms of that, along with the checker behavior","msgtype":"m.text"},"ts":1453969314000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: what do you think about skipping validation for <template> children altogether, and effectively only report parse errors? that seems like it would be simple to implement and solve the issue, but we'd miss typoed attribute names and content model violations","msgtype":"m.text"},"ts":1453969349000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: that would be easier as far as the checker goes, but I think it would be less helpful to authors","msgtype":"m.text"},"ts":1453969427000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"for the reasons you mentioned","msgtype":"m.text"},"ts":1453969433000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"they can't catch typos","msgtype":"m.text"},"ts":1453969441000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and they may break the content-model rules in ways that, e.g., are going to result in a non-intuitive DOM","msgtype":"m.text"},"ts":1453969509000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"my thinking was that it could be more useful to validate the template's output, after transformation","msgtype":"m.text"},"ts":1453969528000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"aren't those parse errors anyway?","msgtype":"m.text"},"ts":1453969535000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I guess they are more parse errors than validation","msgtype":"m.text"},"ts":1453969562000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if someone does <template><ul> {{ if foo }} <li> bar </li> {{ /if }} </ul></template>, is it helpful to report the content model violation?","msgtype":"m.text"},"ts":1453969619000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and yeah it would be more useufl to validate the template's output and authors can actually do that now if they use something like the bookmarklets at https://validator.w3.org/nu/about.html#extras to send a DOM to the checker","msgtype":"m.text"},"ts":1453969686000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in teh case of <template><ul> {{ if foo }} <li> bar </li> {{ /if }} </ul></template>, no it's clearly not helpful to report errors there","msgtype":"m.text"},"ts":1453969726000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I get your point","msgtype":"m.text"},"ts":1453969744000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in that it would be very hard to have the validator not report an error for that case","msgtype":"m.text"},"ts":1453969776000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and the only way to avoid it would just be to not check the subtree at all","msgtype":"m.text"},"ts":1453969794000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"given that we want to allow things like duplicate IDs, empty table rows, etc, i'm leaning more towards skipping validation altogether and focus our work on the more useful validate the output in a good way","msgtype":"m.text"},"ts":1453969843000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I agree, given cases like <template><ul> {{ if foo }} <li> bar </li> {{ /if }} </ul></template> and the duplicate-ID case","msgtype":"m.text"},"ts":1453969894000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"really the content model for <template> should be \"empty\", since that's what it ends up being (unless you appendChild() to it)","msgtype":"m.text"},"ts":1453969977000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, in terms of the behavior/function of it","msgtype":"m.text"},"ts":1453970072000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's somewaht sad if we end up not being able to provide mistake-catching help for <template> contents in source, but I guess that gives me that much more motivation to make the devtools HTML checker integration happen, so that we can provide checking where it really should be in this regard","msgtype":"m.text"},"ts":1453970176000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"philipj is now officially the space-slash hitler :-D","msgtype":"m.text"},"ts":1453973137000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: it's a shit job, but someone has to do it","msgtype":"m.text"},"ts":1453973689000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"MikeSmith: there? I'm puzzled by [[ ! $QUIET = \"true\" || ! \"$WATTSI_RESULT\" = \"0\" ]] in build.sh","msgtype":"m.text"},"ts":1453973714000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"MikeSmith: trying to make wattsi run only once if there are no errors, which saves a few seconds every build","msgtype":"m.text"},"ts":1453973851000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"-> Arlanda","msgtype":"m.emote"},"ts":1453975271000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"so, service worker push messages","msgtype":"m.text"},"ts":1453980693000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the docs are so confusing","msgtype":"m.text"},"ts":1453980697000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"with respect to the \"push service\"","msgtype":"m.text"},"ts":1453980707000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"can *I* implement the push service on my server infrastructure?","msgtype":"m.text"},"ts":1453980719000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"or are my servers supposed to deliver push notifications by pushing them to {mozilla,google} ifrastructure?","msgtype":"m.text"},"ts":1453980736000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"can someone please provide some more insight -- or better, link to docs -- for this?","msgtype":"m.text"},"ts":1453980757000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"exit","msgtype":"m.text"},"ts":1453983391000,"senderName":"JeanCarloMachado","senderId":"JeanCarloMachado@irc"},
{"content":{"body":"JakeA: ^^","msgtype":"m.text"},"ts":1453984286000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"philipj: here now. did you get it worked out?","msgtype":"m.text"},"ts":1453985071000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I have some wattsi and html-build PRs pending to fix that","msgtype":"m.text"},"ts":1453985096000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in the mean time you'll need to edit the build script locally","msgtype":"m.text"},"ts":1453985121000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras: I believe you cannot implement the push service on your own server yet","msgtype":"m.text"},"ts":1453985156000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think google's implementation currently only works with gcm and they haven't yet implemented support for the IETF Web Push protocol spec","msgtype":"m.text"},"ts":1453985233000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think Mozilla has some support for them protocol already but not sure it's enough that you could implement a server yourself and have it work with Firefox","msgtype":"m.text"},"ts":1453985298000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"         unbanme <channel>","msgtype":"m.text"},"ts":1453985480000,"senderName":"JeanCarloMachado","senderId":"JeanCarloMachado@irc"},
{"content":{"body":"MikeSmith: now I am puzzled. So to support all browsers, my servers would push to every vendor's push endpoint?","msgtype":"m.text"},"ts":1453985551000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: sounds weird. Why no provide my own push enpoint as a parametrization to the service worker?","msgtype":"m.text"},"ts":1453985577000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"*not","msgtype":"m.text"},"ts":1453985587000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"because there's no standard protocol that's been implemented in browsers yet","msgtype":"m.text"},"ts":1453986776000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well at least not in Chrome yet as far as I understand","msgtype":"m.text"},"ts":1453986792000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ondras, MikeSmith: there will be some turbulence in both implementations in the next few months","msgtype":"m.text"},"ts":1453987641000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"encryption will slightly change, Chrome will switch to the Web Push protocol","msgtype":"m.text"},"ts":1453987660000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"but we have slightly different requirements and will use server authentication, whereas Mozilla allows \"anonymous\" pushes","msgtype":"m.text"},"ts":1453987697000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"happy to detail more if you're interested :)","msgtype":"m.text"},"ts":1453987703000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1453987736000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I am interested in having a browser impl that allows me to specify my own endpoint","msgtype":"m.text"},"ts":1453987749000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Ah, right. No, we're very unlikely to allow that","msgtype":"m.text"},"ts":1453987761000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: any particular reasons?","msgtype":"m.text"},"ts":1453987777000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"the reason of the push API is exactly to avoid needing multiple persistent connections","msgtype":"m.text"},"ts":1453987782000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: I mean, am I ultimately supposed to push data from my server to vendor{1..X}.pushservices.com ?","msgtype":"m.text"},"ts":1453987806000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"which costs a fair amount of resources for the user (i.e. power usage) and causes network noise","msgtype":"m.text"},"ts":1453987817000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1453987823000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1453987830000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1453987831000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"The goal of the standardization process is that you don't have to care how it gets to the user (whilst the user is protected by you not having their identity, only a key that may allow you to reach them)","msgtype":"m.text"},"ts":1453987847000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"oh, all good to hear","msgtype":"m.text"},"ts":1453987857000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"tickles are easy, but if you have payloads they must be encrypted because you don't know who the man in the middle is","msgtype":"m.text"},"ts":1453987866000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"beverloo: my priority here would be to have a guarantee of my own infrastructure for the delivery","msgtype":"m.text"},"ts":1453987908000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but I guess this is an unreal request","msgtype":"m.text"},"ts":1453987920000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"you could achieve that while the user is on the page, e.g. using web sockets, but for mobile devices it's much too expensive to keep a page (or even a Service Worker) running continuously","msgtype":"m.text"},"ts":1453987949000,"senderName":"beverloo","senderId":"beverloo@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1453987958000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"MikeSmith: I got distracted with other things","msgtype":"m.text"},"ts":1453991062000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"MikeSmith: like the html-build PR I just created, because it was on the same lines","msgtype":"m.text"},"ts":1453991130000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"smaug____: I got 48, but maybe that changes if I turn off the Fx tracking protection thing","msgtype":"m.text"},"ts":1453995896000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yup 624 in Chromew","msgtype":"m.text"},"ts":1453995955000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In case people were wondering: *that* is the biggest threat to the web. Not \"mobile has more APIs\"","msgtype":"m.text"},"ts":1453996060000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It's \"native apps aren't 90% ad delivery to 10% content\"","msgtype":"m.text"},"ts":1453996108000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"( I consider Facebook as the biggest threat to the web. )","msgtype":"m.text"},"ts":1453996151000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"only indirectly by being the biggest threat to humanity","msgtype":"m.text"},"ts":1453996464000,"senderName":"Hory_","senderId":"Hory_@irc"},
{"content":{"body":"smaug____: It's part of the same problem","msgtype":"m.text"},"ts":1453996593000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hey, annevk, dom standard asks to ping WHATWG when wanting to create new Event interface. I'm not sure that's what I need to do for the sensor spec, though.","msgtype":"m.text"},"ts":1453996624000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"If most websites are slow and messy it's not a surprise if people chose to use walled gardens, which then makes those walled gardens more attractive places to publish content","msgtype":"m.text"},"ts":1453996669000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"tobie: heh, me neither","msgtype":"m.text"},"ts":1453996705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I wonder if Streams can be reused in some way and/or what Domenic's thoughts are","msgtype":"m.text"},"ts":1453996727000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So we discussed that already and agreed that no.","msgtype":"m.text"},"ts":1453996752000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(reasoning, streams are for when you want to handle/buffer back-pressure, which isn't the case with sensors--mostly)","msgtype":"m.text"},"ts":1453996812000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Okay, would that not be a way to slow down the rate of signals from the sensor?","msgtype":"m.text"},"ts":1453996873000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: (for ref: https://github.com/w3c/sensors/issues/70)","msgtype":"m.text"},"ts":1453996904000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Anyway, if you want to use events, it's mostly suggesting to talk to us to see if your new Event subclass makes sense","msgtype":"m.text"},"ts":1453996915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which I think shouldn't be a problem for you, but who knows 😛","msgtype":"m.text"},"ts":1453996930000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah--who knows.","msgtype":"m.text"},"ts":1453996980000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So do all sensors really work identically enough that a single pattern makes sense?","msgtype":"m.text"},"ts":1453997022000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So basically, there are two broad categories of sensors. Those that are polled at regular intervals (e.g. gyroscopes, etc.)","msgtype":"m.text"},"ts":1453997049000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"... and those that are a bit smarter and sort of emit an event when they change beyond a certain threshold.","msgtype":"m.text"},"ts":1453997104000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"In practice, though, this distinction can be a bit muddied, as the latter type can actually be implemented in terms of the former.","msgtype":"m.text"},"ts":1453997162000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm still struggling to find the right way to represent these two types on the platform.","msgtype":"m.text"},"ts":1453997191000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"See https://github.com/w3c/sensors/issues/75 for details.","msgtype":"m.text"},"ts":1453997215000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I guess for polling perhaps just a method that returns a promise","msgtype":"m.text"},"ts":1453997236000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And the treshold ones seems like an event","msgtype":"m.text"},"ts":1453997244000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the polling is done at the hardware abstraction layer.","msgtype":"m.text"},"ts":1453997304000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"so the implementation basically sets a frequency and listens to the ouput.","msgtype":"m.text"},"ts":1453997338000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So basically both categories are event targets.","msgtype":"m.text"},"ts":1453997381000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"One gets an event a regular intervals. The other on configurable changes.","msgtype":"m.text"},"ts":1453997411000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"What I had in mind for the Event interface was something like:","msgtype":"m.text"},"ts":1453997434000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SensorReadingEvent : Event { readonly attribute SensorReading reading }","msgtype":"m.text"},"ts":1453997464000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"SensorReading basically contains a High resolution timestamp, an identifier to the sensor and sensor values (e.g. temperature, longitude, etc.)","msgtype":"m.text"},"ts":1453997576000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: i think the idl level thing is a different thing","msgtype":"m.text"},"ts":1453998155000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: that's about who may access that API at all","msgtype":"m.text"},"ts":1453998162000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"while the in code check is about the origin, not the effective origin","msgtype":"m.text"},"ts":1453998177000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1453998178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MDN also mentions this","msgtype":"m.text"},"ts":1453998186000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/Web/API/Document/open#Gecko-specific_notes","msgtype":"m.text"},"ts":1453998216000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1453998356000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: so do you want to make the style edits or shall I do that?","msgtype":"m.text"},"ts":1453998538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought I already did?","msgtype":"m.text"},"ts":1453999788000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Maybe I forgot to push","msgtype":"m.text"},"ts":1453999795000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"Apparently, I didn't :-(","msgtype":"m.text"},"ts":1453999867000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"On the subway right now, will push later","msgtype":"m.text"},"ts":1453999881000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1454000209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: is there a reason SensorReading is a separate interface instead of just properties on the event?","msgtype":"m.text"},"ts":1454001314000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://github.com/w3c/sensors/issues/82","msgtype":"m.text"},"ts":1454001381000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm the overwriting timestamp question is tricky","msgtype":"m.text"},"ts":1454001441000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think last we checked event timestamps cannot be changed as it breaks the web :(","msgtype":"m.text"},"ts":1454001453000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so dom needs high res timestamps as a separate property","msgtype":"m.text"},"ts":1454001471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk should just add that","msgtype":"m.text"},"ts":1454001471000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: there's also the oneshot, promise-returning method which needs to return a Reading object, not an event.","msgtype":"m.text"},"ts":1454001511000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I thought that was still ongoing","msgtype":"m.text"},"ts":1454001515000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: ah if that's the case then just a property makes sense to me","msgtype":"m.text"},"ts":1454001534000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"rbyers should know","msgtype":"m.text"},"ts":1454001540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think it broke Angular according to bz, which was game over","msgtype":"m.text"},"ts":1454001551000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Could also do `SensorReadingEvent implement SensorReading` or something of the like.","msgtype":"m.text"},"ts":1454001627000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1454001656000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"tobie: I was thinking that, little tricky with the initdict, but doable","msgtype":"m.text"},"ts":1454001704000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At which point I could also do: `Sensor implement SensorReading`","msgtype":"m.text"},"ts":1454001796000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So instead of doing: sensor.reading.temperature or event.reading.temperature you'd do sensor.temperature and event temperature in both cases.","msgtype":"m.text"},"ts":1454001872000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I'm not sure if this isn't trading looks against cognitive load, though. E.g. what does sensor.timestamp mean? (Compared to sensor.reading.timestamp)","msgtype":"m.text"},"ts":1454002016000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah I prefer separate object","msgtype":"m.text"},"ts":1454002134000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If SensorReading is going to be a first-class thing in other parts of the API it should be that here too","msgtype":"m.text"},"ts":1454002144000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ideally sensor.hrTimestamp or whatever we end up with is === sensor.reading.timestamp","msgtype":"m.text"},"ts":1454002156000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(Hmm I think we spell it timeStamp)","msgtype":"m.text"},"ts":1454002165000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well, that's a hard one, though.","msgtype":"m.text"},"ts":1454002188000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is it event timestamp or sensor reading timestamp?","msgtype":"m.text"},"ts":1454002205000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"sorry s/sensor.hrTimestamp/event.hrTimestamp","msgtype":"m.text"},"ts":1454002207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1454002211000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so maybe not ===","msgtype":"m.text"},"ts":1454002215000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that seems reasonable too","msgtype":"m.text"},"ts":1454002218000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i think people probably prefer the reading timestamp","msgtype":"m.text"},"ts":1454002226000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1454002229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"ideally latency = event.hrtimestamp - reading.timestamp","msgtype":"m.text"},"ts":1454002260000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"which screams for using hrtimestamp on the SensorReading too (or whatever it is going to be).","msgtype":"m.text"},"ts":1454002309000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Thanks both of you (annevk + Domenic ). This is super helpful feedback.","msgtype":"m.text"},"ts":1454002355000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"we should dig up those bugs and come to a conclusion and put it in the dom spec","msgtype":"m.text"},"ts":1454002389000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"<3","msgtype":"m.text"},"ts":1454002421000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: pushed the formating changes","msgtype":"m.text"},"ts":1454004073000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"yay, jochen__'s first HTML spec patch! \\o/","msgtype":"m.text"},"ts":1454005960000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I have another yay, we resolved the outstanding questions for HTML cross-origin objects, so once I integrate the answers, we can figure out how to merge the whole thing into the HTML standard","msgtype":"m.text"},"ts":1454020326000,"senderName":"annevk","senderId":"annevk@irc"}
]