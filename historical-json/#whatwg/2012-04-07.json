[
{"content":{"body":"from the archives: 5 years ago - \"XML for Dummies\" - http://flickr.com/photos/tantek/487522534/","msgtype":"m.text"},"ts":1333767012000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"who else is xml for?","msgtype":"m.text"},"ts":1333767196000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(bam)","msgtype":"m.text"},"ts":1333767200000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"oh yes","msgtype":"m.text"},"ts":1333784162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yay hober","msgtype":"m.text"},"ts":1333784165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm","msgtype":"m.text"},"ts":1333784307000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"One advantage to the previous D3E editors was that I didn't have to review so many changes...","msgtype":"m.text"},"ts":1333784337000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I wish we'd be working on the UI Events spec already","msgtype":"m.text"},"ts":1333784971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how is that link relevant?","msgtype":"m.text"},"ts":1333787314000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I was talking about setAttributeNS","msgtype":"m.text"},"ts":1333787337000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"sure once you use that all bets are off","msgtype":"m.text"},"ts":1333787455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but for HTML you can just use setAttribute to modify existing namespaced attributes","msgtype":"m.text"},"ts":1333787476000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you can, but you don't have to","msgtype":"m.text"},"ts":1333787573000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"which is a problem","msgtype":"m.text"},"ts":1333787580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"so if you use setAttributeNS and filter is for  name, attribute handling gets trickier","msgtype":"m.text"},"ts":1333787599000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I think we should focus on non-namespaced attributes, and get them work better","msgtype":"m.text"},"ts":1333787621000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and in that case namespace is null, and localname == name","msgtype":"m.text"},"ts":1333787643000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"how would they work better?","msgtype":"m.text"},"ts":1333787643000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"could point annevk to sicking's bugzilla comment :)","msgtype":"m.emote"},"ts":1333787749000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"the scenario where you only care about non-namespaced attributes and yet lots of namespaced attributes are mutated seems pretty alien to me","msgtype":"m.text"},"ts":1333787799000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and especially combined with the fact that'd you use the same attribute name in the non-namespace and a namespace","msgtype":"m.text"},"ts":1333787844000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"xlink:value doesn't exist btw","msgtype":"m.text"},"ts":1333787899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"xlink:href does","msgtype":"m.text"},"ts":1333787915000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"xlink :(","msgtype":"m.text"},"ts":1333787931000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1333787943000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yeah and when used in a non-namespaced context such as HTML it'll be prefixed","msgtype":"m.text"},"ts":1333787949000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"and then you can filter href, xlink:href and it's all cool","msgtype":"m.text"},"ts":1333787964000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"using your scheme observing link mutations in a HTML document that has some SVG becomes much harder","msgtype":"m.text"},"ts":1333788013000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why is it prefixed?","msgtype":"m.text"},"ts":1333788024000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"if you use setAttributeNS","msgtype":"m.text"},"ts":1333788034000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"because it has to be to work in HTML","msgtype":"m.text"},"ts":1333788040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"setAttributeNS doesn't change the prefix","msgtype":"m.text"},"ts":1333788053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if you do htmlelement.setAttributeNS(\"xlinkns\", \"href\", \"http://foobar.com\");","msgtype":"m.text"},"ts":1333788093000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"why optimize for unlikely scenarios?","msgtype":"m.text"},"ts":1333788158000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1333788199000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"optimize for the common scenario","msgtype":"m.text"},"ts":1333788211000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"where attributes don't have namespace","msgtype":"m.text"},"ts":1333788225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"right, and namespaced attributes have a fixed prefix","msgtype":"m.text"},"ts":1333788245000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"namespaced attributes don't have a fixed prefix","msgtype":"m.text"},"ts":1333788266000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"they have fixed prefix only for parsing purposes","msgtype":"m.text"},"ts":1333788286000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but you can create attributes also other ways","msgtype":"m.text"},"ts":1333788297000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and this API is about mutations, so it is expected that those other ways are used","msgtype":"m.text"},"ts":1333788320000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"setting an XLink attribute on an HTML element seems highly unlikely","msgtype":"m.text"},"ts":1333788371000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1333788390000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but setting it on an svg element isn't that unlikely","msgtype":"m.text"},"ts":1333788403000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"right, and there you want to observe it...","msgtype":"m.text"},"ts":1333788414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so you can't use filters","msgtype":"m.text"},"ts":1333788489000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"because namespaced aren't fixed","msgtype":"m.text"},"ts":1333788497000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"er, namespaces","msgtype":"m.text"},"ts":1333788505000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"er, namespace prefixes  :)","msgtype":"m.text"},"ts":1333788700000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"only if there's no such attribute with the same local name and namespace yet","msgtype":"m.text"},"ts":1333789278000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1333789736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"example.com is our number two most referenced URL","msgtype":"m.text"},"ts":1333789751000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt++","msgtype":"m.text"},"ts":1333793548000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The \"bathtub\" approach?","msgtype":"m.text"},"ts":1333800157000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"postincrement me, will you","msgtype":"m.text"},"ts":1333805017000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"++zewt","msgtype":"m.text"},"ts":1333807190000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I'm looking at the html5lib tokenizer tests, and they claim that tokenizing just plain \"\\u000B\" is a parse error. The only place I can see reference to 000B is in the entity parsing algorithm. I don't see any reason for plain \"\\u000B\" to enter the entity parsing algorithm. Why is it a parse error?","msgtype":"m.text"},"ts":1333817037000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Hixie: ^","msgtype":"m.text"},"ts":1333817039000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I'm not sure if those parts of the tests are reliable","msgtype":"m.text"},"ts":1333817308000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah, but it is a tree builder err","msgtype":"m.text"},"ts":1333817439000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1333817440000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wycats, ^","msgtype":"m.text"},"ts":1333817474000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: hm","msgtype":"m.text"},"ts":1333817492000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"where?","msgtype":"m.text"},"ts":1333817493000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I couldn't find it","msgtype":"m.text"},"ts":1333817499000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#the-initial-insertion-mode","msgtype":"m.text"},"ts":1333817509000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Any non-space character before the doctype is a parse error","msgtype":"m.text"},"ts":1333817527000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1333817572000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"this complicates the order in which I am writing the parser","msgtype":"m.text"},"ts":1333817584000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I have to get the tree builder involved now","msgtype":"m.text"},"ts":1333817590000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"maybe I should just strip out parse errors from the tests for now?","msgtype":"m.text"},"ts":1333817607000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Well, AIUI, you can't write a standalone tokenizer","msgtype":"m.text"},"ts":1333817645000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wycats: i assume you mean a string consisting of just a single U+000B?","msgtype":"m.text"},"ts":1333818404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wycats: that's an error for multiple reasons, including lack of DOCTYPE","msgtype":"m.text"},"ts":1333818414000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wycats: The html5lib tokenizer tests are meant to run without a tree constructor, including the parse errors","msgtype":"m.text"},"ts":1333818797000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: it shouldn't be a tokenizer error, though","msgtype":"m.text"},"ts":1333818887000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but Ms2ger is correct","msgtype":"m.text"},"ts":1333818894000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the spec doesn't distinguish between tokenizer errors and tree errors","msgtype":"m.text"},"ts":1333818908000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"on the other hand Philip` seems to be saying something different","msgtype":"m.text"},"ts":1333818908000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"there's just parse errors","msgtype":"m.text"},"ts":1333818911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I understand","msgtype":"m.text"},"ts":1333818916000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"my question is largely about the html5lib tests, and I would leave it at that except that Philip` seems to have some info about the tokenizer tests being designed to run without a tree constructor","msgtype":"m.text"},"ts":1333818942000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"ah, i am not the right person to ask about those tests specifically :-)","msgtype":"m.text"},"ts":1333819018000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wycats: \"Preprocessing the input stream\" says it's a parse error","msgtype":"m.text"},"ts":1333819162000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: no problem","msgtype":"m.text"},"ts":1333819174000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Philip`: lemme look","msgtype":"m.text"},"ts":1333819177000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(along with many other characters)","msgtype":"m.text"},"ts":1333819189000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"aha!","msgtype":"m.text"},"ts":1333819202000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the same characters that are parse errors in a character reference","msgtype":"m.text"},"ts":1333819212000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and html5lib treats the input stream as part of the tokenizer","msgtype":"m.text"},"ts":1333819227000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: cool","msgtype":"m.text"},"ts":1333819244000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"hence it being in the tokenizer tests","msgtype":"m.text"},"ts":1333819250000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: if you're interested, what I'm working on is a browser polyfill for the HTML5 parser","msgtype":"m.text"},"ts":1333819260000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"mostly just for fun","msgtype":"m.text"},"ts":1333819263000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"there's a node-based one, but it's pretty tied up with node's streaming semantics","msgtype":"m.text"},"ts":1333819277000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and I'm trying to stick closer to the spec for now, just for educational purposes","msgtype":"m.text"},"ts":1333819290000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: every member in HTML has to change somehow, because I currently check for infinity/nan myself for every member.","msgtype":"m.text"},"ts":1333819500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Only I always have to point out to people that you do :)","msgtype":"m.text"},"ts":1333819704000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"it's not clear to me that moving it to a different spec is going to make that better ;-)","msgtype":"m.text"},"ts":1333819888000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: so if I follow the preprocessing rules, that should be enough for the tests?","msgtype":"m.text"},"ts":1333819909000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I think the fact that WebIDL used to allow passing through NaN/Infinity, but you caught it somewhere between WebIDL and your algorithms made it particularly hard","msgtype":"m.text"},"ts":1333819993000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"wycats: Yeah, preprocessing plus tokenizing should be enough for the tests","msgtype":"m.text"},"ts":1333820676000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"though if you don't closely follow the spec then number/position of parse errors may change","msgtype":"m.text"},"ts":1333820736000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(I think validator.nu doesn't match parse errors precisely)","msgtype":"m.text"},"ts":1333820778000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: my setup should guarantee the proper position of the parse errors","msgtype":"m.text"},"ts":1333820795000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"here's an example of a state definition: https://gist.github.com/2330820","msgtype":"m.text"},"ts":1333820824000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"token is the current token, next is the character that was just consumed","msgtype":"m.text"},"ts":1333820849000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"tokens is the token stream","msgtype":"m.text"},"ts":1333820853000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"errorState emits a parse error and switches states","msgtype":"m.text"},"ts":1333820867000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"as you can see, it's pretty close to the spec text, so the parse error positions should be exact","msgtype":"m.text"},"ts":1333820881000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Philip`: is it expected to get two parse errors for character references containing the illegal characters?","msgtype":"m.text"},"ts":1333820962000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"once due to the preprocessing and once due to http://www.w3.org/TR/html5/tokenization.html#tokenizing-character-references","msgtype":"m.text"},"ts":1333820990000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"sweet kittens did you really just reference the TR/ page version of the spec","msgtype":"m.text"},"ts":1333821026000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"awooga awooga","msgtype":"m.text"},"ts":1333822094000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"wycats: I'm not quite sure what case you meant","msgtype":"m.text"},"ts":1333828863000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: yeah have these generic rules at the top of the spec that are only overridden for canvas","msgtype":"m.text"},"ts":1333831971000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: the new double aligns with those restrictions in throwing for Nan/Infinity","msgtype":"m.text"},"ts":1333831990000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"s/yeah/you/ ...","msgtype":"m.text"},"ts":1333832008000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1333832014000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`: ahh... the case I was looking at was &#..., which won't be invalid in the preprocessing phase","msgtype":"m.text"},"ts":1333833213000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"because it's just a number there","msgtype":"m.text"},"ts":1333833217000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: what are you writing the parser in?","msgtype":"m.text"},"ts":1333833295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: Indeed","msgtype":"m.text"},"ts":1333833531000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"annevk: JS","msgtype":"m.text"},"ts":1333833713000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so far I'm probably 70% done with the tokenizer","msgtype":"m.text"},"ts":1333833730000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I'm missing doctype, script, and entities in attribute values","msgtype":"m.text"},"ts":1333833740000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"annevk: specifically, browser-friendly JS","msgtype":"m.text"},"ts":1333833777000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"there's something written in node, but it makes heavy use of Node's streaming stuff","msgtype":"m.text"},"ts":1333833788000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I also wanted the code to somewhat resemble the spec for pedagogical reasons","msgtype":"m.text"},"ts":1333833820000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: did you have a look at flanagan's code?","msgtype":"m.text"},"ts":1333833823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I googled hard and didn't find anything","msgtype":"m.text"},"ts":1333833838000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"link please","msgtype":"m.text"},"ts":1333833840000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"wycats: http://www.davidflanagan.com/2011/10/html-parsing-wi.html","msgtype":"m.text"},"ts":1333833856000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wycats: https://github.com/andreasgal/dom.js/blob/master/src/impl/HTMLParser.js","msgtype":"m.text"},"ts":1333833866000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I hope my code will not end up to be 250k","msgtype":"m.text"},"ts":1333833918000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but unknown","msgtype":"m.text"},"ts":1333833920000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"maybe it will","msgtype":"m.text"},"ts":1333833922000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"probably a lot of it is the named character references","msgtype":"m.text"},"ts":1333833948000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hm bigger problem","msgtype":"m.text"},"ts":1333833955000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"it seems to heavily use ES5 features","msgtype":"m.text"},"ts":1333833962000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"https://github.com/andreasgal/dom.js/blob/master/src/impl/HTMLParser.js#L155","msgtype":"m.text"},"ts":1333833975000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"half the point of what I'm doing is as a polyfill for browsers without HTML5 parsers","msgtype":"m.text"},"ts":1333833997000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so I can't use new features","msgtype":"m.text"},"ts":1333834001000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1333834006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1333834010000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"too bad","msgtype":"m.text"},"ts":1333834013000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"anyway, you might be able to borrow some","msgtype":"m.text"},"ts":1333834014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"How are you getting the original HTML to reparse?","msgtype":"m.text"},"ts":1333834015000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: it's for things like innerHTML","msgtype":"m.text"},"ts":1333834035000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"where you have the string already","msgtype":"m.text"},"ts":1333834040000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and you want a document fragment","msgtype":"m.text"},"ts":1333834043000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"if all goes well, I'll also be able to prototype the context-free parser stuff","msgtype":"m.text"},"ts":1333834061000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"the stuff from the <template> discussion","msgtype":"m.text"},"ts":1333834085000,"senderName":"wycats","senderId":"wycats@irc"}
]