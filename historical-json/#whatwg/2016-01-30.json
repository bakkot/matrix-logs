[
{"content":{"body":"annevk, wanderview: we're doing SQL now? why?","msgtype":"m.text"},"ts":1454112422000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Jonas is quite right, by the way. If you don't spec the same query planner then you have algorithms with different orders of complexity on different browsers, which is intolerable.","msgtype":"m.text"},"ts":1454112461000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"IndexedDB doesn't have that problem","msgtype":"m.text"},"ts":1454112477000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"maybe the spec doesn't say what the complexity should be, but it's pretty clear lookup should be O(1) or O(log N), and iteration the same per item, amortized. The difference between O(1) and O(log N) is not significant in practice. O(1) vs O(N) vs O(N^2) very much is","msgtype":"m.text"},"ts":1454112596000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Is the some repository I'm not subscribed to, or something?","msgtype":"m.text"},"ts":1454113054000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"roc: i'm also wondering where this discussion is happening","msgtype":"m.text"},"ts":1454113078000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Just an idea, but the fact that developers write new SQL code against WebKit/Chromium is a problem","msgtype":"m.text"},"ts":1454113204000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roc: and you are correct that the IDB spec designers all assumed that reading/writing would be O(log N) and iteration would be O(1)","msgtype":"m.text"},"ts":1454113231000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"I think count() is the only function which I'm uncertain about the complexity for","msgtype":"m.text"},"ts":1454113279000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"What's the argument against putting the same effort into optimising https://github.com/google/lovefield ?","msgtype":"m.text"},"ts":1454113344000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: if we get to the point that we'll have to ship websql, the only realistic option is to just embed sqlite","msgtype":"m.text"},"ts":1454113357000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"annevk: writing a spec is effectively a waste of time","msgtype":"m.text"},"ts":1454113376000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"and then cross our fingers that sufficiently backwards compatible versions of sqlite will continue to be maintained forever","msgtype":"m.text"},"ts":1454113422000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"i guess another implementation strategy would be to run sqlite through emscripten","msgtype":"m.text"},"ts":1454113517000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Right, but if you can do that, why ship it with browsers?","msgtype":"m.text"},"ts":1454113794000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"An interesting exercise might be to work out what would stop sqlite-though-emscripten happening today, and plug those gaps","msgtype":"m.text"},"ts":1454113860000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if any","msgtype":"m.text"},"ts":1454113864000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"you'd need something like the filesystem API","msgtype":"m.text"},"ts":1454113954000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"since you need the ability to do in-place modification of files","msgtype":"m.text"},"ts":1454113969000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"Perhaps if we add fulltext search to IDB we can sway some folks","msgtype":"m.text"},"ts":1454114001000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you might also need a locking primitive, though you can do that with a shared worker","msgtype":"m.text"},"ts":1454114006000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"you could use indexedDB as a block-based storage backend.","msgtype":"m.text"},"ts":1454114790000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: yeah, but i suspect you'd have performance problems","msgtype":"m.text"},"ts":1454114812000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"SQLite over IndexedDB over SQLite would be a bit crazy, but whatever","msgtype":"m.text"},"ts":1454114819000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"sicking: it wouldn't be optimal, but if you want optimal, you don't use SQL anyway","msgtype":"m.text"},"ts":1454114831000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"roc: perf would need to be tested for sure. But I think using IDB as block storage might be problematic","msgtype":"m.text"},"ts":1454114891000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"if WebSQL is or becomes necessary for meaningful Web compat, then that would suck, but I guess we'd have to spec it. I think that's the only reason to.","msgtype":"m.text"},"ts":1454114899000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"indeed","msgtype":"m.text"},"ts":1454114914000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"though i'd argue that even then writing a spec isn't worth it. Or rather, I think the spec should just be \"be reasonably compatible with SQLite\"","msgtype":"m.text"},"ts":1454114940000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"since i doubt that we'd write a sql engine compatible with a spec. We'd just ship sqlite","msgtype":"m.text"},"ts":1454114964000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1454115127000,"senderName":"Guest38441","senderId":"Guest38441@irc"},
{"content":{"body":"Could I suggest an new function for the canvas handling here? Or is it better to do it on the mailing list?","msgtype":"m.text"},"ts":1454115182000,"senderName":"Guest38441","senderId":"Guest38441@irc"},
{"content":{"body":"Hi! I just was logged in as Guest38441. After logging out some minutes ago I looked at the logbot at http://logs.glob.uno/?c=freenode%23whatwg&s=today","msgtype":"m.text"},"ts":1454116299000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"and it simply doesn't show the text I posted here.","msgtype":"m.text"},"ts":1454116310000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"Could anyone who was online like 15 minutes ago tell me if my question showed up at all?","msgtype":"m.text"},"ts":1454116351000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"I just post my question again: Could I suggest an new function for the canvas handling here? Or is it better to do it on the mailing list?","msgtype":"m.text"},"ts":1454116402000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"Maybe someone could post it on the mailing list for me, please? :) I'm not good in using mailing lists.","msgtype":"m.text"},"ts":1454116403000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"When drawing a text on a canvas, a so far open path or subpath is closed and that way discarded. Could there be a function implemented like putTextPath?","msgtype":"m.text"},"ts":1454116412000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"So I can use the textpath in a row with other subpaths.","msgtype":"m.text"},"ts":1454116413000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"Annex: I wouldn't wonder that would be much slower for just drawing a single text, but for that the current functions would still be implemented.","msgtype":"m.text"},"ts":1454116413000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"2. Annex: I'm very sure, the current textdrawing functions are using paths themselves, as there is a high rated answer on stackoverflow on how to make a textdrawing animation, and the answer shows that using .setLineDash does that trick.","msgtype":"m.text"},"ts":1454116422000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"http://stackoverflow.com/questions/29911143/how-can-i-animate-the-drawing-of-text-on-a-web-page","msgtype":"m.text"},"ts":1454116422000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"Feel free to send me a link to an appropriate mailing list for suggesting a new function for the canvas handling, please! Thank you!","msgtype":"m.text"},"ts":1454116422000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"My Email is: John.rwhwhâŠ™sd","msgtype":"m.text"},"ts":1454116422000,"senderName":"John2016","senderId":"John2016@irc"},
{"content":{"body":"emailed John2016","msgtype":"m.emote"},"ts":1454118028000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ðŸ™Œ","msgtype":"m.text"},"ts":1454118843000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, Domenic: sorry for delay (was on a flight to Sydney).  We're still pushing ahead with shipping DOMHighRes timestamp - I'm told the angular breakage appears tolerable.  https://www.chromestatus.com/features/5523910145605632","msgtype":"m.text"},"ts":1454126090000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"But it may still fail.  If it does, yes we should just add a new property.","msgtype":"m.text"},"ts":1454126174000,"senderName":"rbyers","senderId":"rbyers@irc"},
{"content":{"body":"rbyers: oh cool, that's much better than I hoped. And it's in 49 which should be seeing some pretty widespread usage. Good to hear.","msgtype":"m.text"},"ts":1454144808000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"That is great to hear","msgtype":"m.text"},"ts":1454168272000,"senderName":"annevk","senderId":"annevk@irc"}
]