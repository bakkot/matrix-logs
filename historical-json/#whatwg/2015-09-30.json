[
{"content":{"body":"MikeSmith: FirefoxNightly","msgtype":"m.text"},"ts":1443591157000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah already running Nightly too","msgtype":"m.text"},"ts":1443591927000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: File a bug at https://crbug.com/new and ping me the ID?","msgtype":"m.text"},"ts":1443593340000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"Remember when Microsoft would never submit feedback unless we'd publish a fork at w3c? https://github.com/whatwg/html/issues/210#issuecomment-144211444","msgtype":"m.text"},"ts":1443599689000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mkwst: seems it's https://code.google.com/p/chromium/issues/detail?id=537360","msgtype":"m.text"},"ts":1443599739000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mkwst: chatted with scottmg about it a bit a few hours earlier","msgtype":"m.text"},"ts":1443599773000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Does https://code.google.com/p/chromium/issues/detail?id=537437 help? e.g. make sure that chrome://flags/#enable-javascript-harmony is disabled?","msgtype":"m.text"},"ts":1443599836000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"turns #whatwg into a Chrome support channel.","msgtype":"m.emote"},"ts":1443599849000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1443599947000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah I","msgtype":"m.text"},"ts":1443599950000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I'm posting a comment there now","msgtype":"m.text"},"ts":1443599961000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the problem in fact goes away if I disable chrome://flags/#enable-javascript-harmony","msgtype":"m.text"},"ts":1443599977000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Wunderbar! Solved! /me closes the bug","msgtype":"m.text"},"ts":1443600452000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"The V8 folks sit right behind me. I'll poke them.","msgtype":"m.text"},"ts":1443600630000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: cheers","msgtype":"m.text"},"ts":1443603833000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hello!...,  I am Vritika Soni.  I am interested in Outreach Program(Outreachy). I found Mozilla organization and I would like to work on its project. I am a newbie so I need guidance in this program.","msgtype":"m.text"},"ts":1443609110000,"senderName":"Vritika","senderId":"Vritika@irc"},
{"content":{"body":"Alright, first lesson: stay connected to IRC until someone answers your question","msgtype":"m.text"},"ts":1443609287000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1443609373000,"senderName":"ondras_","senderId":"ondras_@irc"},
{"content":{"body":"Or at least until someone *reads* your question","msgtype":"m.text"},"ts":1443609404000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mkwst: is much happening with Entry Point Regulation since last year?","msgtype":"m.text"},"ts":1443610238000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anybody working on implementing it other than the extension that was developed?","msgtype":"m.text"},"ts":1443610265000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: We published a draft in June (http://www.w3.org/TR/epr/).","msgtype":"m.text"},"ts":1443610277000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"MikeSmith: We haven't prioritized it in Chrome, but I know Google's infrastructure security team wants it.","msgtype":"m.text"},"ts":1443610303000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"MikeSmith: It will bubble back up in Q1, probably. Last I heard, David was working on a Service Worker-based polyfill.","msgtype":"m.text"},"ts":1443610333000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: OK, thanks","msgtype":"m.text"},"ts":1443610518000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Why do you ask? :)","msgtype":"m.text"},"ts":1443610536000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"just showed up on my github radar due to Wendy creating a new repo for it","msgtype":"m.text"},"ts":1443610578000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and then when I saw the notification I recalled that I hadn't heard much more about since the time when David introduced it last year or so","msgtype":"m.text"},"ts":1443610610000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Ah. Right. I'm splitting webappsec into a bajillion repositories. No normative change. :)","msgtype":"m.text"},"ts":1443611037000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: cool„Éºyeah, I support the move to multiple repos üçª","msgtype":"m.text"},"ts":1443611125000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*decision to move to multiple repos","msgtype":"m.text"},"ts":1443611161000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://www.google.com/#q=spec.whatwg.org Where does Google gets it weird metadata from?","msgtype":"m.text"},"ts":1443614020000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"XHR spec\"","msgtype":"m.text"},"ts":1443614030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"WhatWG\"","msgtype":"m.text"},"ts":1443614033000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"WHATWG: Living HTML - HTML Standard\"","msgtype":"m.text"},"ts":1443614054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: please, is space allowed in path of <img src=\"... ...\" /> ?","msgtype":"m.text"},"ts":1443622015000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"(src being http://stuff)","msgtype":"m.text"},"ts":1443622029000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: spaces are not allowed in URLs","msgtype":"m.text"},"ts":1443622045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, also ≈ô≈°≈æ are to be percent-encoded even inside a quoted src attribute?","msgtype":"m.text"},"ts":1443622109000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"(percent-encoded utf-8 bytes, more precisely)","msgtype":"m.text"},"ts":1443622124000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: no you can use those","msgtype":"m.text"},"ts":1443622202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: just make sure everything is utf-8","msgtype":"m.text"},"ts":1443622209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: and expect percent-encoded bytes in JavaScript and on the server","msgtype":"m.text"},"ts":1443622222000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okay, interesting. Firefox apparently silently converts space to %20 when parsing the img src","msgtype":"m.text"},"ts":1443622334000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"hm, other browsers as well","msgtype":"m.text"},"ts":1443622355000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: sure, everyone does that","msgtype":"m.text"},"ts":1443622715000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: also mandated by the URL standard :-)","msgtype":"m.text"},"ts":1443622723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: it's just a conformance error since it makes the URL less portable","msgtype":"m.text"},"ts":1443622739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The amount of confusion around SOP is too damn high","msgtype":"m.text"},"ts":1443622927000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Latest victim https://twitter.com/aerotwist/status/649214802305417216","msgtype":"m.text"},"ts":1443622931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Which was reviewed by mkwst and several others of Chrome security no less","msgtype":"m.text"},"ts":1443622957000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hrm? I think you might have misunderstood hjs point.","msgtype":"m.text"},"ts":1443622985000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"He wants to access insecure podcast data from a secure page. He can't.","msgtype":"m.text"},"ts":1443623019000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"He wants to access cross-origin podcast data from podcasters who don't serve CORS headers. He can't.","msgtype":"m.text"},"ts":1443623042000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"A proxy would allow him to do so, but he outlines some reasons that proxies are a bad idea.","msgtype":"m.text"},"ts":1443623079000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"He's bummed that a combination of SOP and MIX (both of which he suggests are good in and of themselves) stop him from building the thing he wants to build without a proxy. *shrug*","msgtype":"m.text"},"ts":1443623134000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"I don't want him to access my private podcasts","msgtype":"m.text"},"ts":1443623136000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"mkwst: he also says that a proxy shouldn't have access without CORS","msgtype":"m.text"},"ts":1443623143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: which is just wrong","msgtype":"m.text"},"ts":1443623148000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: perhaps you didn't read the ‚ÄúHow About a Big Proxy?‚Äù section?","msgtype":"m.text"},"ts":1443623159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: If he said that, I missed it when I talked with him.","msgtype":"m.text"},"ts":1443623163000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I mean I understand this problem","msgtype":"m.text"},"ts":1443623181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I wrote about it","msgtype":"m.text"},"ts":1443623184000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: I just don't understand the assertion about proxies and CORS","msgtype":"m.text"},"ts":1443623197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes. I agree with you that \"if the resource is delivered over HTTPS and without the CORS header, the proxy won‚Äôt be able to access it on behalf of the client\" seems wrong.","msgtype":"m.text"},"ts":1443623244000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"annevk: I don't see that as the crux of the article. :)","msgtype":"m.text"},"ts":1443623258000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: I mean the rest of the article was already known","msgtype":"m.text"},"ts":1443623289000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: and this new assertion is false","msgtype":"m.text"},"ts":1443623295000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkwst: hopefully it gets more folks to think about the problem","msgtype":"m.text"},"ts":1443623306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"*shrug* I don't see the new assertion as the important part. :)","msgtype":"m.text"},"ts":1443623311000,"senderName":"mkwst","senderId":"mkwst@irc"},
{"content":{"body":"mkwst: and hopefully he'll clarify that statement","msgtype":"m.text"},"ts":1443623314000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: is there something like a 'loading principal' and 'triggering principal' in spec language?","msgtype":"m.text"},"ts":1443623683000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"annevk: apparently these are concepts in firefox","msgtype":"m.text"},"ts":1443623698000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: I think request's client is somewhat close to triggering","msgtype":"m.text"},"ts":1443624109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: not sure about loading","msgtype":"m.text"},"ts":1443624127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: I haven't really found a need for them","msgtype":"m.text"},"ts":1443624136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hum","msgtype":"m.text"},"ts":1443624142000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"so I'm asking because the referrer thing","msgtype":"m.text"},"ts":1443624150000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"if a document includes a cross origin css file that in turn references an image","msgtype":"m.text"},"ts":1443624167000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"both chrome and firefox will use the css file's url as basis for the referrer for the load of the image","msgtype":"m.text"},"ts":1443624180000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: Gecko has some stuff they expose through those just for extensions and privileged code that would be hard to match, but we don't write specs for those","msgtype":"m.text"},"ts":1443624181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"now the question is what kind of term can I use to describe this situation in the referrer spec short of adding an exception for css documents?","msgtype":"m.text"},"ts":1443624201000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: the way that should work is that CSS should get its Fetch act together and define the referrer for their fetches","msgtype":"m.text"},"ts":1443624207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: when they define the referrer, they can just set it to the URL of the CSS resource if it's an external resource and leave it as \"client\" when it's inline","msgtype":"m.text"},"ts":1443624237000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: I guess you could add a warning that CSS (and SVG) haven't defined Fetch integration yet","msgtype":"m.text"},"ts":1443624271000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: numerous things are therefore unclear","msgtype":"m.text"},"ts":1443624277000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so the referrer spec always uses the current 'incumbent settings object' as source for the referrer","msgtype":"m.text"},"ts":1443624293000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"would that be the svg document once they got this sorted out?","msgtype":"m.text"},"ts":1443624305000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: the referrer spec should use request's client, no?","msgtype":"m.text"},"ts":1443624325000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: for SVG documents, yeah, it'll be the same as HTML documents","msgtype":"m.text"},"ts":1443624346000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: and SVG images cannot fetch external resources so don't matter","msgtype":"m.text"},"ts":1443624358000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ehrm, i meant css","msgtype":"m.text"},"ts":1443624370000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"i guess i'll just add an explicit section CSS documents","msgtype":"m.text"},"ts":1443624398000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: for CSS what happens is that CSS sets referrer to a URL","msgtype":"m.text"},"ts":1443624417000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: so you get an explicit URL that you then modify as you see fit","msgtype":"m.text"},"ts":1443624431000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: no settings objects involved","msgtype":"m.text"},"ts":1443624440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, somewhere the url has to come from","msgtype":"m.text"},"ts":1443624715000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"at least in chrome it comes from the css parser context","msgtype":"m.text"},"ts":1443624722000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"which in turn gets it from some document","msgtype":"m.text"},"ts":1443624732000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: I see","msgtype":"m.text"},"ts":1443624745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: well yes, some document fetches a CSS resource, then feeds that response to CSS along with sufficient other data, CSS then should do the rest, e.g., take the url from the response and use that as base URL and referrer","msgtype":"m.text"},"ts":1443624809000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is there a spec text for that?","msgtype":"m.text"},"ts":1443624845000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: see above where I mentioned that CSS does not really have its act together","msgtype":"m.text"},"ts":1443624860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, they don't use fetch","msgtype":"m.text"},"ts":1443624872000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"but there should be something that says how to load css images and fonts, no?","msgtype":"m.text"},"ts":1443624883000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"They don't really use anything, but if you were to take that literally CSS wouldn't use service workers either, etc.","msgtype":"m.text"},"ts":1443624898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CSS of course uses something, and everyone knows it's Fetch, it's just not written down","msgtype":"m.text"},"ts":1443624914000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So theoretically a ton of stuff breaks and the theory should really be fixed","msgtype":"m.text"},"ts":1443624925000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But in practice everyone has managed to deal","msgtype":"m.text"},"ts":1443624931000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sooo","msgtype":"m.text"},"ts":1443624975000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"i'll add some text to the referrer spec that says \"css should make sure it uses the referrer policy from whereever it felt like getting the referrer from in the first place\"","msgtype":"m.text"},"ts":1443625001000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"It seems very reasonable to add a warning or even try to explain how it should work","msgtype":"m.text"},"ts":1443625072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: did you start https://github.com/whatwg/html/issues/210 yet or shall I","msgtype":"m.text"},"ts":1443626640000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hello","msgtype":"m.text"},"ts":1443626769000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"i am interested in mozilla \"visual design with research data\" project.please inform me the irc channel for it.","msgtype":"m.text"},"ts":1443626896000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"so I will start contributing for it.","msgtype":"m.text"},"ts":1443626937000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"Domenic: I haven't","msgtype":"m.text"},"ts":1443627310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: k, taking it","msgtype":"m.text"},"ts":1443627325000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I've been meaning to do some more Fetch stuff, but I keep getting distracted","msgtype":"m.text"},"ts":1443627336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"parul: hey, I'm not familiar with that project","msgtype":"m.text"},"ts":1443627364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: do more URL stuff!","msgtype":"m.text"},"ts":1443627366000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"parul: do you know who's responsible?","msgtype":"m.text"},"ts":1443627373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no I don't know who is the mentor of this project","msgtype":"m.text"},"ts":1443627422000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"parul: from the wiki page it seems like you want to ping ilana on irc.mozilla.org","msgtype":"m.text"},"ts":1443627453000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"parul: assuming you were asking about https://wiki.mozilla.org/Outreachy/2016/December_to_March#Visual_Design_with_Research_Data","msgtype":"m.text"},"ts":1443627513000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk:I get the info of this project from this link https://wiki.mozilla.org/Outreachy/2016/December_to_March","msgtype":"m.text"},"ts":1443627518000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"parul: yeah, this IRC channel is only for \"Contribute to the HTML Standard!\"","msgtype":"m.text"},"ts":1443627549000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(from those projects, anyway)","msgtype":"m.text"},"ts":1443627572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: irc channels,mentors and the mailing list is not mention there.","msgtype":"m.text"},"ts":1443627588000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"Domenic: yeah, I've blocked on that since the base URL thing is still a bit unclear","msgtype":"m.text"},"ts":1443627595000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I guess I should update some issue","msgtype":"m.text"},"ts":1443627602000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"parul: it says \"Mentor: Ilana Segall\", no?","msgtype":"m.text"},"ts":1443627625000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"parul: and if you click that name an IRC nickname is suggested, and I can tell that person is active on irc.mozilla.org","msgtype":"m.text"},"ts":1443627652000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well fine, sorry my mistake","msgtype":"m.text"},"ts":1443627758000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"parul: no worries, happy to help","msgtype":"m.text"},"ts":1443627770000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: okey","msgtype":"m.text"},"ts":1443627789000,"senderName":"parul","senderId":"parul@irc"},
{"content":{"body":"Domenic: in particular, I was thinking that a base URL change thingie which is needed for :visited would help","msgtype":"m.text"},"ts":1443628202000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but then I realized it wouldn't do any good for elements not currently in the document","msgtype":"m.text"},"ts":1443628220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so I guess we still need to define the base URL updating on the getter thingie...","msgtype":"m.text"},"ts":1443628238000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but also have this base URL change thing...","msgtype":"m.text"},"ts":1443628261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, seems likely... :-/","msgtype":"m.text"},"ts":1443628280000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: or would it be better to just have the base URL change thing, but somehow iterate over all elements whose node document is the document","msgtype":"m.text"},"ts":1443628290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think doing the lazy thing mostly, and having the base URL change thing be a special thing for CSS, makes a lot of sense. matches implementations, and makes the weird thing special-cased.","msgtype":"m.text"},"ts":1443628323000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I doubt that matches Gecko","msgtype":"m.text"},"ts":1443628337000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: and it's not a big bone for custom elements either","msgtype":"m.text"},"ts":1443628353000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: really? it seems like the only sane implementation strategy.","msgtype":"m.text"},"ts":1443628369000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: because it's impossible to notify elements not in a document?","msgtype":"m.text"},"ts":1443628397000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: not impossible, but a lot more work to keep track of them all, and slower (although I guess changing base URLs should not happen that often).","msgtype":"m.text"},"ts":1443628442000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: and if everything else is lazy (because get the input wants to happen lazily), it only makes sense to do the same for base","msgtype":"m.text"},"ts":1443628478000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I guess I'm somewhat convinced with the lazy approach since base URL changes in general are just a really bad idea","msgtype":"m.text"},"ts":1443628500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: thanks for reminding me and talking through this, needed that","msgtype":"m.text"},"ts":1443628711000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1443628912000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"HTML has 121 closed PRs already","msgtype":"m.text"},"ts":1443631336000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is that about 4 a day or am I misrepresenting when we started?","msgtype":"m.text"},"ts":1443631366000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"philipj: i think bugzilla bugs should be RESOLVED MOVED when there's a PR","msgtype":"m.text"},"ts":1443631812000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: looks like we started about August 26-27","msgtype":"m.text"},"ts":1443632368000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so... yeah","msgtype":"m.text"},"ts":1443632376000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"time for a new REC?","msgtype":"m.text"},"ts":1443632859000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"cool to see edge bugs referenced in whatwg github issues... if only they were links","msgtype":"m.text"},"ts":1443639487000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"baby steps ^_^","msgtype":"m.text"},"ts":1443639768000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"grrr, why didn't i write the streams tests in web-platform-tests format the first time around...","msgtype":"m.text"},"ts":1443639820000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do people know the best pattern for a test that should run the same in both workers and window?","msgtype":"m.text"},"ts":1443639849000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Maybe it is something like this https://github.com/domenic/unhandled-rejections-browser-spec/blob/master/tests/promise-rejection-events.html","msgtype":"m.text"},"ts":1443639911000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hah, I remember people questioning why Opera bugs occasionally got referenced, given the lack of access.","msgtype":"m.text"},"ts":1443639935000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: that's more or less what i'd suggest","msgtype":"m.text"},"ts":1443639965000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: would be sweet if I could avoid generating that .html file manually for each test, somehow.","msgtype":"m.text"},"ts":1443639985000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: too quickly gets into magic, IMO","msgtype":"m.text"},"ts":1443640073000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"meh, don't really know","msgtype":"m.text"},"ts":1443640090000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"gsnedders: so this service_worker_test seems to be a blink-specific thing... any thoughts on how I should test in service workers?","msgtype":"m.text"},"ts":1443640518000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I think best worker/window approach is to make a .js file that gets run in both cases... in worker context you make a shim for asserts that proxies back to main thread","msgtype":"m.text"},"ts":1443640611000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"not sure that has been done yet for wpt anywhere yet","msgtype":"m.text"},"ts":1443640620000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: No.","msgtype":"m.text"},"ts":1443640624000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: I know next to nothing about service workers :)","msgtype":"m.text"},"ts":1443640639000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: service_worker_test() should be in upstream wpt","msgtype":"m.text"},"ts":1443640683000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Ah, I found it, yeah. https://github.com/w3c/web-platform-tests/blob/e5e8fb9ebc4d5b2220abff5679fa0781c01f2c05/service-workers/service-workers/resources/test-helpers.js","msgtype":"m.text"},"ts":1443640710000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1443640719000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: one complaint we have about a lot of the current wpt tests that involve workers... they tend to be all or nothing... not broken up into separate test cases so we can't mark the one thing we don't implement yet as EXPECTED_FAIL","msgtype":"m.text"},"ts":1443640776000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: thanks for writing wpt tests, though","msgtype":"m.text"},"ts":1443640797000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I plan to write lots of test cases in each file, then use a .html file that runs that file in all four types of workers...","msgtype":"m.text"},"ts":1443640829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"wanderview: will get your review","msgtype":"m.text"},"ts":1443640834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1443640839000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"r+","msgtype":"m.text"},"ts":1443640843000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: the way <input type> defaulting works is extremely common among most (if not all) enumerated attributes","msgtype":"m.text"},"ts":1443640894000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: if custom elements would not match that they would be weird","msgtype":"m.text"},"ts":1443640905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't think it's a good idea for custom elements to match, honestly.  enum properties work differently, CSS properties work differently, etc.","msgtype":"m.text"},"ts":1443640937000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"enum attributes are just weird, and matching the platform as we add new ones to HTML is fine, but I would not match that in a custom element.","msgtype":"m.text"},"ts":1443640985000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I totally would. Changing the attribute is actually what's completely alien","msgtype":"m.text"},"ts":1443641028000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Parsing the attribute and based on that potentially changing the default state is much more logical","msgtype":"m.text"},"ts":1443641052000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: html (and xml languages too) accept any value for attributes generally","msgtype":"m.text"},"ts":1443641491000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"There's no way for CSS to expose a *generic* mechanism addressing the issue, tho.  At best it can do something host-language specific, so that browsers hide the complexity of the big selector in their selector matching code instead.","msgtype":"m.text"},"ts":1443641548000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: Sure. But there's nothing requiring the attribute to *stay* the value it's set to, in the presence of JS.","msgtype":"m.text"},"ts":1443641575000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: maybe so, but JS does not need to be involved for this problem to appear, so it's a bit moot point :-)","msgtype":"m.text"},"ts":1443641660000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Right, the problem is that you can't define what set of keywords an enumerated attribute accepts.  I'm saying that, in the presence of JS, you can fix that (and imo should for your custom elements).","msgtype":"m.text"},"ts":1443641711000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":input-type(newtype) would also let you style the control differently only in UAs that support \"newtype\"","msgtype":"m.text"},"ts":1443641858000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yeah.  It's just a specialized \"only for <input type>\" mechanism.","msgtype":"m.text"},"ts":1443641930000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"awaits csswg members to Genericalize it so it can apply to Other Host Languages as well","msgtype":"m.emote"},"ts":1443641985000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Like I just said, we can't.","msgtype":"m.text"},"ts":1443642329000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is unsure at what level of sarcasm zcorpan is operating.","msgtype":"m.emote"},"ts":1443642351000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i can include the end tag for you: </sarcasm>","msgtype":"m.text"},"ts":1443642387000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"What I meant is that <input type> is not the only enumerated attribute with this behavior, and probably not the only enumerated attribute that wants to have UA-default styles based on itself.","msgtype":"m.text"},"ts":1443642435000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The SARCASM Host Language needs no end tag.","msgtype":"m.text"},"ts":1443642536000,"senderName":"tantek","senderId":"tantek@irc"},
{"content":{"body":"zcorpan: I'm struggle to infer the open tag","msgtype":"m.text"},"ts":1443642658000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: i can write you a DTD if you send me chocolate","msgtype":"m.text"},"ts":1443642711000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: hah, you admit British chocolate is better? ;P","msgtype":"m.text"},"ts":1443642860000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan: And without some form of \"generic-ness\", then specifying the pseudo-class is just moving the complexity from the UA stylesheet to the UA's selector definition.  It doesn't improve the brittleness/verbosity; either way you have a list of values that need to be maintained.","msgtype":"m.text"},"ts":1443642882000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: <button type>, <menu type>... i think there's not much more in html that makes sense to style differently based on an enum attribute","msgtype":"m.text"},"ts":1443642929000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"The benefits to authors are that (a) they can then use rando values in their own page and still match them as :input-type(text), which seems low value, and (b) they can use new types and match them with :input-type(new) if they're supported (but if they're not, they'll get caught by :input-type(text), so I'm unsure in practice of the usefulness of that).","msgtype":"m.text"},"ts":1443642969000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"gsnedders: i'll know it when i get it :-)","msgtype":"m.text"},"ts":1443642998000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: :)","msgtype":"m.text"},"ts":1443643004000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins: it seems useful to me to have :input-type(text) match unsupported types. why would you not want to style them as other regular text fields, assuming you don't polyfill them to something else?","msgtype":"m.text"},"ts":1443643112000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I dunno!","msgtype":"m.text"},"ts":1443643137000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What‚Äôs this? :input(text) selector?","msgtype":"m.text"},"ts":1443643142000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: CSS7!!","msgtype":"m.text"},"ts":1443643153000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<http://www.w3.org/mid/CAAWBYDCzcZ4dpNw3gjWnYrTOqN2UbSCKcYoGG7RSytHju8moqw‚äômgc>","msgtype":"m.text"},"ts":1443643199000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Neat.","msgtype":"m.text"},"ts":1443643245000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"zcorpan: (Note that, as I said in the email, I'm not opposed to :input-type(), I just don't currently believe this problem is sufficiently worthwhile to address with new syntax.)","msgtype":"m.text"},"ts":1443643296000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Neat. Like :input(text) => input:not([type]), input[type=\"text\"] ?","msgtype":"m.text"},"ts":1443643309000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: Also input:not([type=password]):not([type=tel])...","msgtype":"m.text"},"ts":1443643335000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Because <input type=foo> is a text input.","msgtype":"m.text"},"ts":1443643345000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Rather, it's explictly equivalent to `input:not([type]), input[type]:not([type=password])...`","msgtype":"m.text"},"ts":1443643417000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As an idle thought, a genericization would probably look like a switch statement...","msgtype":"m.text"},"ts":1443643562000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I am not really opposed to input:not([type=password i]):.......","msgtype":"m.text"},"ts":1443643960000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's ugly but for UA stylesheets it should be fine","msgtype":"m.text"},"ts":1443643966000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it's not like we're going to add new input types soon","msgtype":"m.text"},"ts":1443643974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"case insensitive?","msgtype":"m.text"},"ts":1443644100000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yes, <input type=\"PASSWORD\"> is still a password","msgtype":"m.text"},"ts":1443644116000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"TabAtkins: does Bikeshed have a mechanism to include the content of external resources similar to: https://www.w3.org/respec/ref.html#data-include ?","msgtype":"m.text"},"ts":1443645127000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Not currently.","msgtype":"m.text"},"ts":1443645138000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How could you even process that information so quickly?","msgtype":"m.text"},"ts":1443645162000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1443645176000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"!!!","msgtype":"m.text"},"ts":1443645204000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"had a long day.","msgtype":"m.emote"},"ts":1443645248000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Is this somehow planned?","msgtype":"m.text"},"ts":1443645262000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Easy/hard given the current architecture?","msgtype":"m.text"},"ts":1443645293000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It's not currently in my plans, but I'm not opposed.  Feel free to file an issue on me for it.  I'd appreciate some pointers to existing usage of this in ReSpec.","msgtype":"m.text"},"ts":1443645304000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm using it to include code samples of live apps.","msgtype":"m.text"},"ts":1443645321000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Why not include it inline?","msgtype":"m.text"},"ts":1443645608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tangent: [type=password i], in today CSS does this work, are attribute selectors even case-sensitive?","msgtype":"m.text"},"ts":1443645702000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I have the apps and use case doc in the same repo, like that I don't have any copy-pasting to do.","msgtype":"m.text"},"ts":1443645817000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Added the links to https://github.com/tabatkins/bikeshed/issues/496","msgtype":"m.text"},"ts":1443645852000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heya","msgtype":"m.text"},"ts":1443646058000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"i want to start to work on a spec for console.log and friends","msgtype":"m.text"},"ts":1443646116000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1443646122000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but before i start i was wondering if i need to use a special kind of test framework / test runner","msgtype":"m.text"},"ts":1443646143000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"Didn't somebody already start on that?","msgtype":"m.text"},"ts":1443646145000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yep, and stall","msgtype":"m.text"},"ts":1443646156000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right. Maybe it can be reused rather than starting from scratch.","msgtype":"m.text"},"ts":1443646171000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"robertkowalski: web-platform-tests are the best tests: https://github.com/w3c/web-platform-tests","msgtype":"m.text"},"ts":1443646185000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"robertkowalski: http://testthewebforward.org/docs/","msgtype":"m.text"},"ts":1443646200000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool thank you Domenic","msgtype":"m.text"},"ts":1443646245000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"iirc MikeSmith had a draft of the console API in the Browser Testing and Tools WG","msgtype":"m.text"},"ts":1443646367000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"It's mentioned in the charter but can't seem to find it online.","msgtype":"m.text"},"ts":1443646387000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: That makes sense.","msgtype":"m.text"},"ts":1443646408000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(re: using examples in both explainer and spec)","msgtype":"m.text"},"ts":1443646427000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"File an issue on me?","msgtype":"m.text"},"ts":1443646431000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://github.com/tabatkins/bikeshed/issues/496","msgtype":"m.text"},"ts":1443646447000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"danke","msgtype":"m.text"},"ts":1443646452000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"philipj (or anybody) about the 0.03% threshold of usage-counter data for blink intent-to-deprecate features, what does that work out as far as number of sites? (I mean the number within whatever sample the usage-counter data is collected from)","msgtype":"m.text"},"ts":1443646646000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"robertkowalski: found this: http://sideshowbarker.github.io/console-spec/","msgtype":"m.text"},"ts":1443646685000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"and it is sites, right? not URLs/documents","msgtype":"m.text"},"ts":1443646685000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah that doc is quite imcomplete","msgtype":"m.text"},"ts":1443646703000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the best resource for console still remains http://getfirebug.com/wiki/index.php/Console_API","msgtype":"m.text"},"ts":1443646732000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: Chrome's data is percentage of page views, so it can't be compared with number of sites in a corpus like httparchive","msgtype":"m.text"},"ts":1443646733000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: ah OK, makes sense","msgtype":"m.text"},"ts":1443646754000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: it's quite likely that there are some counters with high usage only due to youtube.com or similar","msgtype":"m.text"},"ts":1443646788000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1443646800000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zcorpan: oh, right, should I fix the two that I've closed?","msgtype":"m.text"},"ts":1443646834000,"senderName":"philipj","senderId":"philipj@irc"},
{"content":{"body":"philipj: naw","msgtype":"m.text"},"ts":1443646851000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"tobie: robertkowalski https://github.com/DeveloperToolsWG/console-object/blob/master/api.md is good","msgtype":"m.text"},"ts":1443646931000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and https://developer.mozilla.org/en-US/docs/Web/API/Console","msgtype":"m.text"},"ts":1443646957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: I'm having a hard time getting em-dashes to work. Shouldn't https://github.com/w3c/sensors/blob/gh-pages/index.bs#L119 so it?","msgtype":"m.text"},"ts":1443647245000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Assuming there's no spaces at the ends of those lines, yes, it should.","msgtype":"m.text"},"ts":1443647275000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"there isn't.","msgtype":"m.text"},"ts":1443647312000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmmm, it is indeed not working.  Will look.","msgtype":"m.text"},"ts":1443647376000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1443647428000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I kind of cargo-culted the boilerplate metadata, so I might be doing something dumb there.","msgtype":"m.text"},"ts":1443647487000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Nope, it was a dumb thing on my part.","msgtype":"m.text"},"ts":1443647608000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Accidentally required the following line to start with whitespace for the emdash conversion to happen.","msgtype":"m.text"},"ts":1443647626000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Just pushed the fix.","msgtype":"m.text"},"ts":1443647646000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, cool.","msgtype":"m.text"},"ts":1443647653000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(My specs tend to indent the text, to make headings more obvious on a quick scan, so i didn't notice the problem.","msgtype":"m.text"},"ts":1443647671000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":")","msgtype":"m.text"},"ts":1443647673000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, I got used to sticking everything as far left as possible to avoid weird markdown bugs.","msgtype":"m.text"},"ts":1443647741000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I don't (and won't) implement the \"indent means code block\" part of Markdown, so feel free to indent.","msgtype":"m.text"},"ts":1443647774000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Mind pulling in https://github.com/tabatkins/bikeshed/pull/493 while you're at it?","msgtype":"m.text"},"ts":1443647788000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, you're planning to cherry-pick markdown. Sounds fun.","msgtype":"m.text"},"ts":1443647817000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"CommonMark-- ?","msgtype":"m.text"},"ts":1443647825000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":":P","msgtype":"m.text"},"ts":1443647837000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"TabAtkins: I had added support for that in Respec https://github.com/w3c/respec/blob/develop/js/core/markdown.js#L141-L183","msgtype":"m.text"},"ts":1443647929000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"But it still acted weird on occasion. Or at least I feared it would.","msgtype":"m.text"},"ts":1443647960000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Yeah, Bikeshed's markdown handles HTML nesting properly.  Indented code is fundamentally incompatible with that.","msgtype":"m.text"},"ts":1443647981000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'm not sure what you mean by \"Bikeshed's markdown handles HTML nesting properly.\"","msgtype":"m.text"},"ts":1443648158000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Bikeshed intermixes HTML and Markdown in a sane way, I mean.","msgtype":"m.text"},"ts":1443648187000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah. Regular markdown certainly doesn't.","msgtype":"m.text"},"ts":1443648343000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Largely because of the historical mistake of indented code blocks. ^_^","msgtype":"m.text"},"ts":1443648381000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So yeah, I'm gradually approaching consistency with CommonMark except for that point.","msgtype":"m.text"},"ts":1443648404000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Unsure if I'll ever fully implement CommonMark's multi-line backtick semantics, tho. They require some weird back-and-forth integration between parser levels.)","msgtype":"m.text"},"ts":1443648454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: oh btw why did you stop working on the console api? was it too boring?","msgtype":"m.text"},"ts":1443648970000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"robertkowalski: I can't say I ever really put much work into it. I put it together intending that somebody else might pick up work on it","msgtype":"m.text"},"ts":1443649252000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that said it's never been a high priority for me personally","msgtype":"m.text"},"ts":1443649273000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I guess that's true of others as well","msgtype":"m.text"},"ts":1443649292000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's not clear how strong of a need we have for a high level of interoperability around it","msgtype":"m.text"},"ts":1443649329000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the main reason to have a spec is to ensure we get interoperability among implementations","msgtype":"m.text"},"ts":1443649358000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and to avoid creating interoperability frustrations for devs","msgtype":"m.text"},"ts":1443649393000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I could be wrong but I think console interoperability (or lack of) doesn't seem like a pain point for devs currently","msgtype":"m.text"},"ts":1443649458000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: http://stackoverflow.com/questions/32874967/html5-image-preloading if you have any insights","msgtype":"m.text"},"ts":1443649478000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: *nod*","msgtype":"m.text"},"ts":1443650210000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"MikeSmith: maybe i'll pick it up. i like to write those spec tests","msgtype":"m.text"},"ts":1443650244000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"i wrote some with another test framework ~1yr ago","msgtype":"m.text"},"ts":1443650264000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"TabAtkins: thanks (would upvote that but I'm out of votes for today until ~1hr or so from now)","msgtype":"m.text"},"ts":1443650312000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"robertkowalski: if you do pick up work on it I would be glad to help with review and such","msgtype":"m.text"},"ts":1443650345000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but note that terinjokes has been working on something too from time to time","msgtype":"m.text"},"ts":1443650361000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not sure where he's at with it currently but maybe y'all could collaborate","msgtype":"m.text"},"ts":1443650391000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"robertkowalski: https://github.com/terinjokes/console-spec","msgtype":"m.text"},"ts":1443650411000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"http://terinjokes.github.io/console-spec/","msgtype":"m.text"},"ts":1443650424000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"btw how do we test the console object?","msgtype":"m.text"},"ts":1443650465000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"given that it's not exposed to web content","msgtype":"m.text"},"ts":1443650491000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in node we could listen on stdout / stderr i guess and regarding browsers i was hoping that http://testthewebforward.org/ would support it in some way","msgtype":"m.text"},"ts":1443650619000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"robertkowalski: yeah the testharness for testtwf runs in-browser strictly in JS, so it has no way to get to console output afaict","msgtype":"m.text"},"ts":1443650969000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but yeah I had not been thinking about the node.js/io.js context","msgtype":"m.text"},"ts":1443651000000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah, you can't test the console method in a cross browser way afaik","msgtype":"m.text"},"ts":1443651169000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Unless we start exposing test-only APIs","msgtype":"m.text"},"ts":1443651178000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which has been sugggested, but I am somewhat sceptical about","msgtype":"m.text"},"ts":1443651196000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"could we implement the tests in node and browser vendors could port it into their testsuites?","msgtype":"m.text"},"ts":1443651364000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"feels a bit uncool, but better than nothing i guess","msgtype":"m.text"},"ts":1443651386000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"BTW, if anyone has any opinions on what needs sorted out with the CSS testsuite, prod me","msgtype":"m.text"},"ts":1443651442000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"robertkowalski: I don't see how node helps you here","msgtype":"m.text"},"ts":1443651771000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: build the reference testsuite or even reference implementation in node","msgtype":"m.text"},"ts":1443652111000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"jgraham: and hoping others will follow / start helping to make testing in browsers easier :)","msgtype":"m.text"},"ts":1443652162000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"<- specs newbie","msgtype":"m.text"},"ts":1443652223000,"senderName":"robertkowalski","senderId":"robertkowalski@irc"},
{"content":{"body":"robertkowalski: and how do you know the reference implementation is right?","msgtype":"m.text"},"ts":1443653006000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"robertkowalski: in terms of web tests the most important test will be the stuff that can be observed from scripts (and thus cause potential interop problems)","msgtype":"m.text"},"ts":1443653011000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"robertkowalski: so e.g. what methods exist on console, and when or if they ever throw errors","msgtype":"m.text"},"ts":1443653023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"robertkowalski: the \"side effect\" of logging to console is less important to test (but, would be nice for devs, so that they know they can use e.g. %s across all browsers and get useful results.)","msgtype":"m.text"},"ts":1443653057000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Right so there is some useful stuff you can test","msgtype":"m.text"},"ts":1443653246000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But without any way to read back the console it's unclear that an implementation like console = {log: function(data){}} wouldn't pass most tests","msgtype":"m.text"},"ts":1443653306000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"good enough for web compat","msgtype":"m.text"},"ts":1443653625000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah, just need a bunch of manual tests unfortunatekly.","msgtype":"m.text"},"ts":1443654759000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]