[
{"content":{"body":"Hmm... curious. So it looks like a numeric entity for \\r shows up as \\r ","msgtype":"m.text"},"ts":1248746280000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"in the spec?","msgtype":"m.text"},"ts":1248746340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oh no, it looks like I misread ","msgtype":"m.text"},"ts":1248746400000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"god i hate the gzip module on apache","msgtype":"m.text"},"ts":1248747720000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can't get it to work when i want it to, and i can't get it to go away when i need no compression","msgtype":"m.text"},"ts":1248747721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I cna't find the \"support '+' prefixes in integers\" edit in the HTML spec ","msgtype":"m.text"},"ts":1248748080000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"oh, that's because I'm in the wrong area of the spec ","msgtype":"m.text"},"ts":1248748140000,"senderName":"ezyang","senderId":"ezyang@irc"},
{"content":{"body":"SetEnv no-gzip 1","msgtype":"m.text"},"ts":1248748320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is what disables gzipping on apache 2.x","msgtype":"m.text"},"ts":1248748321000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"good to know","msgtype":"m.text"},"ts":1248748322000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1248773640000,"senderName":"annevk4","senderId":"annevk4@irc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1248773641000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"most of CSSOM View does not seem to take into account multiple boxes :/","msgtype":"m.text"},"ts":1248773642000,"senderName":"annevk4","senderId":"annevk4@irc"},
{"content":{"body":"annevk4, yt?","msgtype":"m.text"},"ts":1248787740000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or anyone familiar with the Web Databases spec?","msgtype":"m.text"},"ts":1248787800000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"in the executeSql() method, I can't tell what is supposed to happen when the SQL statemen† contains fewer question marks than there are items in the arguments array.","msgtype":"m.text"},"ts":1248787860000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"e..g transaction.executeSql(\"INSERT INTO t(id, label) VALUES (?, ?)\", [2, \"Two\", \"foo\"], statementCallback, errorCallback);","msgtype":"m.text"},"ts":1248787861000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"nevermind, I misread the spec","msgtype":"m.text"},"ts":1248787980000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"http://www.microsoft.com/presspass/presskits/eu-msft/docs/Microsoft_Interoperability_Undertaking.doc","msgtype":"m.text"},"ts":1248790020000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"notices potential irony in the file format","msgtype":"m.emote"},"ts":1248790021000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"\"Internet Explorer, as from version 8, in its default settings, shall pass the Acid 2 web page as it exists today (available at www.webstandards.org/action/acid2/ on the date of entry into effect of this Undertaking, assuming that the current version does not undergo substantial revision).\"","msgtype":"m.text"},"ts":1248790022000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and also \"the conformance test suite provided by W3C (available at www.w3c.org) for the HTML 4.0 specification\", and CSS 1.0, and CSS 2.1","msgtype":"m.text"},"ts":1248790023000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Also \"beginning on 31 March 2010, Microsoft shall make publicly available complete and accurate documentation of any variations or extensions it has made to the HTML 4.0, CSS 1.0, and CSS 2.1 specifications and to any other final approved web standards published by W3C (as “W3C Recommendations”), ECMA (as “Standards”), or ISO (as “International Standards”) as implemented by Internet Explorer.\"","msgtype":"m.text"},"ts":1248790024000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Is the compatability view default or not?","msgtype":"m.text"},"ts":1248793020000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"Dashiva: Not for most sites","msgtype":"m.text"},"ts":1248793080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hi","msgtype":"m.text"},"ts":1248796620000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"i'm trying to parse a page that has a very, very deep tag tree","msgtype":"m.text"},"ts":1248796680000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"the parser.parse(document) call takes at least two minutes and maxes out my CPU","msgtype":"m.text"},"ts":1248796740000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"With what tree builder?","msgtype":"m.text"},"ts":1248796741000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"BeautifulSoup","msgtype":"m.text"},"ts":1248796742000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"That may well be the problem there.","msgtype":"m.text"},"ts":1248796743000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1248796744000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"Try using cElementTree or lxml instead, and see how quick it is to parse","msgtype":"m.text"},"ts":1248796800000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1248796801000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"is there a way to limit the depth of the constructed tree?","msgtype":"m.text"},"ts":1248796802000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1248796860000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1248796920000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"any idea what it is about BeautifulSoup that's causing the problem?","msgtype":"m.text"},"ts":1248797160000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"No idea, it's a blind guess. But BeautifulSoup does generally suck.","msgtype":"m.text"},"ts":1248797161000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"there's existing code for traversing a BeautifulSoup tree I'd prefer to avoid rewriting","msgtype":"m.text"},"ts":1248797162000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"any way to convert between tree types?","msgtype":"m.text"},"ts":1248797163000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"Converting won't help, as you'll still have to build the BS one","msgtype":"m.text"},"ts":1248797220000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"(And the answer is no anyway)","msgtype":"m.text"},"ts":1248797221000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"sigh, k, thanks","msgtype":"m.text"},"ts":1248797280000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"doesn't know why the BS treebuilder would take an unusually long time with deep trees, but hasn't looked at the code enough to know if it's plausible that it's its fault","msgtype":"m.emote"},"ts":1248797281000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"the other parsers do seem to be much faster","msgtype":"m.text"},"ts":1248797282000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"http://rover.ebay.com/rover/1/711-53200-19255-0/1?campid=5336301508&customid=feed&toolid=10005&mpre=http%3A%2F%2Fcgi.ebay.com%2F20-coupons-Buy-1-Mountain-Dew-20oz-get-a-Vault-FREE_W0QQitemZ300332084204QQcmdZViewItemQQssPageNameZRSS%3AB%3ASRCH%3AUS%3A101","msgtype":"m.text"},"ts":1248797283000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"is the page","msgtype":"m.text"},"ts":1248797284000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"heh. predicable. BS sucks.","msgtype":"m.text"},"ts":1248797340000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"It might just be that the html5lib code that uses BS is broken, rather than being entirely BS's fault","msgtype":"m.text"},"ts":1248797341000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh, i was having the same problem with BeautifulSoup on it's own","msgtype":"m.text"},"ts":1248797342000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"Oh, okay","msgtype":"m.text"},"ts":1248797400000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: I think our BS code is more or less fine, minus bugs caused by working around BS bugs","msgtype":"m.text"},"ts":1248797401000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"gsnedders|work: I wrote some of our BS code, so I don't necessarily agree it's fine :-)","msgtype":"m.text"},"ts":1248797460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"but it passed more tests than before I wrote that code","msgtype":"m.text"},"ts":1248797461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"which was good enough for me","msgtype":"m.text"},"ts":1248797462000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Wow. That's a lot of nested font elements.","msgtype":"m.text"},"ts":1248797520000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"yeah.","msgtype":"m.text"},"ts":1248797521000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"i don't really care about them, i just don't want to get stuck parsing the page","msgtype":"m.text"},"ts":1248797580000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"I like the bit where it goes </FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT><FONT size=4><P></P><P></P></FONT><!-- End Description --></FONT><FONT size=4><FONT size=5></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT></FONT>","msgtype":"m.text"},"ts":1248797700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Of course the real problem is that it doesn't quote its attributes","msgtype":"m.text"},"ts":1248797760000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Yeah, if it did that, we could parse it in no time.","msgtype":"m.text"},"ts":1248797761000,"senderName":"gsnedders|work","senderId":"gsnedders|work@irc"},
{"content":{"body":"chortles","msgtype":"m.emote"},"ts":1248797820000,"senderName":"takkaria","senderId":"takkaria@irc"},
{"content":{"body":"i tried preprocessing it with http://countergram.com/software/pytidylib (which was also not fast, but better) but it didn't help","msgtype":"m.text"},"ts":1248797940000,"senderName":"palimpsest","senderId":"palimpsest@irc"},
{"content":{"body":"Hixie, I believe the old algorithm also changed UTF-16 to UTF-8","msgtype":"m.text"},"ts":1248820680000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Hixie, that also seems gone","msgtype":"m.text"},"ts":1248820681000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"don't tell me, tell them","msgtype":"m.text"},"ts":1248820682000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I actually did; I wasn't sure whether you were trying to be exhaustive","msgtype":"m.text"},"ts":1248820800000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"(I wasn't, FWIW, but I did catch that)","msgtype":"m.text"},"ts":1248820860000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1248820861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: yt?","msgtype":"m.text"},"ts":1248820862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"heycam: is there a way to override the class name of an interface? I have two HTMLCollection interfaces that are different but apparently need to both be HTMLCollection objects.","msgtype":"m.text"},"ts":1248820863000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not sure what should happen if you override HTMLCollection itself","msgtype":"m.text"},"ts":1248820920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"can't the implementation of the interface be different?","msgtype":"m.text"},"ts":1248820980000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"the interface itself is different","msgtype":"m.text"},"ts":1248821040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and in JS, the interfaces _are_ the implementations","msgtype":"m.text"},"ts":1248821041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since they have prototypes","msgtype":"m.text"},"ts":1248821042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not quite, we can have both static and a live NodeList","msgtype":"m.text"},"ts":1248821940000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Hixie: I don't think it makes sense to have the same interface object for interfaces with different methods","msgtype":"m.text"},"ts":1248822060000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and if you change namedItem to always return an Object...","msgtype":"m.text"},"ts":1248822061000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"othermaciej: no disagreement from me there","msgtype":"m.text"},"ts":1248822062000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(I assume this is about having tags() appear on the \"all\" HTMLCollection but not other HTMLCollections)","msgtype":"m.text"},"ts":1248822120000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"annevk2: yeah but the .item() method on the static one is the same as the .item() method on the live one, which isn't the case with these collections","msgtype":"m.text"},"ts":1248822121000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"othermaciej: yes","msgtype":"m.text"},"ts":1248822122000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think the only sensible way to do it is to make HTMLAllCollection a derived interface, is there a reason that would be a compatibility issue?","msgtype":"m.text"},"ts":1248822180000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(of course the other alternative is to just leave tags() on all HTMLCollections)","msgtype":"m.text"},"ts":1248822240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"right now i've done both. We have two interfaces, and .tags() is on both.","msgtype":"m.text"},"ts":1248822300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(there are other differences)","msgtype":"m.text"},"ts":1248822360000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, why have .tags() on all HTMLCollections?","msgtype":"m.text"},"ts":1248822420000,"senderName":"sicking","senderId":"sicking@irc"},
{"content":{"body":"because most browsers have it on all HTMLCollection objects","msgtype":"m.text"},"ts":1248822421000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"see the mail i just sent to the list","msgtype":"m.text"},"ts":1248822422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: is the return of namedItem the other difference?","msgtype":"m.text"},"ts":1248822660000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Hixie: I can imagine it might be a problem for HTMLCollection and HTMLAllCollection to have no inheritence relationship at all","msgtype":"m.text"},"ts":1248822661000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and the implementation of .namedItem, yeah","msgtype":"m.text"},"ts":1248822662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1248822663000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the other collection interfaces have no relationship either","msgtype":"m.text"},"ts":1248822664000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's five of them at this point","msgtype":"m.text"},"ts":1248822665000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they're all basically the same with weird minor differences","msgtype":"m.text"},"ts":1248822666000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't know that it is a problem for sure, but if someone wants to prototype-hack HTMLCollection to add or modify a method, it won't work on the unrelated types of collection","msgtype":"m.text"},"ts":1248822720000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1248822721000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't see any way around that given that the prototypes would have different .namedItem()s anyway","msgtype":"m.text"},"ts":1248822722000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so if that works in browsers currently, it could be a compat issue","msgtype":"m.text"},"ts":1248822723000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"i guess we'll find out","msgtype":"m.text"},"ts":1248822724000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you could just make namedItem() return Object and not worry about the fact that for some collections it's a more specific type","msgtype":"m.text"},"ts":1248822780000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"the implementation is still different","msgtype":"m.text"},"ts":1248822781000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so the prototype needs to be different","msgtype":"m.text"},"ts":1248822782000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"that's irrelevant to the interface","msgtype":"m.text"},"ts":1248822783000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"not in JS?","msgtype":"m.text"},"ts":1248822840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the prototype doesn't need to be different","msgtype":"m.text"},"ts":1248822841000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"we can have a single JS wrapper that can wrap multiple underlying C++ classes with different behavior","msgtype":"m.text"},"ts":1248822842000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so there's only one namedItem() implementation, and it just happens to act very differently in different contexts?","msgtype":"m.text"},"ts":1248822843000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the JS method just needs to call a C++ virtual method","msgtype":"m.text"},"ts":1248822844000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"freaky","msgtype":"m.text"},"ts":1248822845000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm thinking of adding an event to WebSocket that fires when the buffers are filling too fast","msgtype":"m.text"},"ts":1248823260000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what should i call it?","msgtype":"m.text"},"ts":1248823261000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"websocket.onoverflow ?","msgtype":"m.text"},"ts":1248823262000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"websocket.onthrottle ?","msgtype":"m.text"},"ts":1248823320000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"websocket.on... ?","msgtype":"m.text"},"ts":1248823500000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, the send buffer? or both buffers? the recv buffer must be taken care of by the underlying network layer, right?","msgtype":"m.text"},"ts":1248823560000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"send","msgtype":"m.text"},"ts":1248823561000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what's the semantics of this proposed event? does it fire from within send() that will fail?","msgtype":"m.text"},"ts":1248823680000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"it fires asynchronously whenever the user agent feels like it (when the UA is in danger of hitting some internal limit)","msgtype":"m.text"},"ts":1248823681000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"unless you have a better idea :-)","msgtype":"m.text"},"ts":1248823740000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I still think that there needs to be an indication when send() fails","msgtype":"m.text"},"ts":1248823800000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"you don't know when send fails","msgtype":"m.text"},"ts":1248823801000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: fails to take the data in its queue. sure you know that","msgtype":"m.text"},"ts":1248823860000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"\"take the data in its queue","msgtype":"m.text"},"ts":1248823861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"?","msgtype":"m.text"},"ts":1248823862000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: here's what TCP guarantees:","msgtype":"m.text"},"ts":1248823863000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"if you hit a hardware limitation, then you can do whatever you like","msgtype":"m.text"},"ts":1248823864000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: once you call send(), and it returns success","msgtype":"m.text"},"ts":1248823865000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"Hixie: it means that either the data will be delivered to the other side","msgtype":"m.text"},"ts":1248823920000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"Hixie: or no more data will be delivered to the other side over this connection","msgtype":"m.text"},"ts":1248823921000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"no, it doesn't, except for some definition of \"other side\" that is not really practically useful to the author.","msgtype":"m.text"},"ts":1248823922000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: huh?","msgtype":"m.text"},"ts":1248823980000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"what matters is whether the application level on the other side dealt with the data, and the only way you can know that is an acknowledgement.","msgtype":"m.text"},"ts":1248823981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I thought I explained it in detail in e-mail :(","msgtype":"m.text"},"ts":1248823982000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"you can't know from TCP whether the server on the other side is still alive or has had some sort of crash or is spilling all its data on the floor or whatever.","msgtype":"m.text"},"ts":1248823983000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: repeating it again, it means that \"either the data will be delivered to the other side, or no more data will be delivered to the other side over this connection\"","msgtype":"m.text"},"ts":1248824040000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"but that's not interesting information","msgtype":"m.text"},"ts":1248824041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that may sounds subtle, but it makes all the difference between TCP and UDP","msgtype":"m.text"},"ts":1248824042000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"i understand the difference between TCP and UDP :-)","msgtype":"m.text"},"ts":1248824100000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: with this guarantee, you can do simple app-level acks","msgtype":"m.text"},"ts":1248824101000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1248824102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: without it, you need much more complicated mechanisms for acks","msgtype":"m.text"},"ts":1248824103000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"we already expose \"the connection closed\"","msgtype":"m.text"},"ts":1248824104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't really see what you are proposing","msgtype":"m.text"},"ts":1248824160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what I'm saying is that there is absolutely no reason to provide UDP-level reliability when the underlying protocol is TCP","msgtype":"m.text"},"ts":1248824161000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ok... we're not doing that","msgtype":"m.text"},"ts":1248824162000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so where's the problem?","msgtype":"m.text"},"ts":1248824163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: that's actually exactly what the spec provides now (well, except that it still guarantees ordering)","msgtype":"m.text"},"ts":1248824220000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"how so?","msgtype":"m.text"},"ts":1248824221000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: if you call send() several times, and you get an ACK for the last, you cannot be sure that all the data arrived to the other side","msgtype":"m.text"},"ts":1248824222000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"you can't drop packets in the middle and keep sending them","msgtype":"m.text"},"ts":1248824223000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"how not?","msgtype":"m.text"},"ts":1248824280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if that's so, there's an error in the spec","msgtype":"m.text"},"ts":1248824281000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what text did i screw up?","msgtype":"m.text"},"ts":1248824282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: where does the spec say that once packets are dropped, the connection is closed?","msgtype":"m.text"},"ts":1248824283000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"you're not allowed to drop packets at all.","msgtype":"m.text"},"ts":1248824284000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: oh, do you mean that the current text suggests filling up RAM until it ends?","msgtype":"m.text"},"ts":1248824340000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"the current spec says that when you call send(), you have to send the bytes.","msgtype":"m.text"},"ts":1248824341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it doesn't say how exactly","msgtype":"m.text"},"ts":1248824342000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"they just have to be sent","msgtype":"m.text"},"ts":1248824343000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's no permission to not send","msgtype":"m.text"},"ts":1248824344000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i can add a line saying \"if you can't send, you have to close\" if you like","msgtype":"m.text"},"ts":1248824400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: neither sounds like useful behavior","msgtype":"m.text"},"ts":1248824401000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"so there is no notion of a send failing","msgtype":"m.text"},"ts":1248824402000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"ap: neither what?","msgtype":"m.text"},"ts":1248824403000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"franksalim: not currently","msgtype":"m.text"},"ts":1248824404000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you add a throttling event, there would have to still be a way to indicate that subsequent calls to send failed","msgtype":"m.text"},"ts":1248824405000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"Hixie: neither filling up the RAM or closing at UA's discretion","msgtype":"m.text"},"ts":1248824406000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ap: what would you like the spec to say?","msgtype":"m.text"},"ts":1248824460000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: as indicated in the mailing list, I like Jeremy Orlow's proposal","msgtype":"m.text"},"ts":1248824461000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"Hixie: an overflow event that is sent at UA's discretions sounds helpful, too","msgtype":"m.text"},"ts":1248824520000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"you want send() to throw an exception when the TCP layer failed to successfully send the packet to the other side?","msgtype":"m.text"},"ts":1248824521000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: it's just no substitute","msgtype":"m.text"},"ts":1248824522000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"that's what he suggested, but as far as i can tell it's impossible to implement, since send() has to be async.","msgtype":"m.text"},"ts":1248824580000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: actually not, that's not what he suggested","msgtype":"m.text"},"ts":1248824581000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ok, so what are you and he proposing, since i misunderstood what he suggested?","msgtype":"m.text"},"ts":1248824582000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: the suggestion is to raise an event when UA no longer wants to buffer the data in its queue (in practice, the buffer will be quite small, to allow for quick adaptation to network conditions)","msgtype":"m.text"},"ts":1248824640000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"(that's definitely not what he suggested, but ok)","msgtype":"m.text"},"ts":1248824641000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: raqise an exception, sorry","msgtype":"m.text"},"ts":1248824642000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"so you want send() to throw an exception (but leave the connection open) if the buffer is full?","msgtype":"m.text"},"ts":1248824700000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"btw, quoting the suggestion, \"Maybe the right behavior is to buffer in user-space (like Maciej explained) up until a limit (left up to the UA) and then anything beyond that results in an exception.\"","msgtype":"m.text"},"ts":1248824701000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"Hixie: yes","msgtype":"m.text"},"ts":1248824702000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"wouldn't that mean send() could arbitrarily and randomly fire exceptions? that seems like a _really_ bad idea","msgtype":"m.text"},"ts":1248824703000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and would effectively give you UDP-like behaviour","msgtype":"m.text"},"ts":1248824704000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I don't agree with either statement (neither that it's bad, nor that it's somehow related to UDP-like behavior)","msgtype":"m.text"},"ts":1248824760000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"Hixie: returning a boolean result would be as good as firing an exception in my eyes, btw","msgtype":"m.text"},"ts":1248824761000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"doesn't like getAsBinary and getAsBase64","msgtype":"m.emote"},"ts":1248824820000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"it's bad for the same reason that we are avoiding firing an exception if you call send() on a closed WebSocket","msgtype":"m.text"},"ts":1248824821000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, let it be a boolean return value. there just needs to be a clear indication that the data passed to send() is dropped on the floor","msgtype":"m.text"},"ts":1248824822000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"and it's UDP-like because it means that if you are calling send() on a timer at roughly the rate that you can send, then a random subset of the data will be sent, and the rest will be dropped on the floor.","msgtype":"m.text"},"ts":1248824823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which, as you said earlier, is really bad","msgtype":"m.text"},"ts":1248824880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: to determine the rate that you can send, one needs guidance","msgtype":"m.text"},"ts":1248824881000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"sure, so we have the overflow event, which you can use to back off","msgtype":"m.text"},"ts":1248824940000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: back off by how much?","msgtype":"m.text"},"ts":1248824941000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"(should probably be \"willsoonoverflow\" or something)","msgtype":"m.text"},"ts":1248824942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"who knows","msgtype":"m.text"},"ts":1248824943000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"a boolean won't tell you either","msgtype":"m.text"},"ts":1248824944000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what happens when it actually overflows?","msgtype":"m.text"},"ts":1248824945000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"Hixie: there are well established flow control protocols that work with \"the boolean\"","msgtype":"m.text"},"ts":1248824946000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"exception? binary value?","msgtype":"m.text"},"ts":1248824947000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"franksalim: i propose to make the connection close","msgtype":"m.text"},"ts":1248824948000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: like, every streaming protocol that works over TCP can adapt when send() fails","msgtype":"m.text"},"ts":1248825000000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ap: yeah, but they're all designed for experts","msgtype":"m.text"},"ts":1248825001000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ap: nobody except the experts are going to be checking for a return value from send(), realistically speaking","msgtype":"m.text"},"ts":1248825002000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ap: (they're also not going to be checking for an event)","msgtype":"m.text"},"ts":1248825003000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: with 128K or so buffered in the UA, non-experts will still be able to ignore the complexities, and control their toy trains","msgtype":"m.text"},"ts":1248825060000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"i'm happy to make the event provide more information","msgtype":"m.text"},"ts":1248825061000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you're now basically asking experts to come up with new flow control protocols, and non-experts will still not get decent streaming behavior","msgtype":"m.text"},"ts":1248825062000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"what's the problem with the UA buffering all calls to send() somehow?","msgtype":"m.text"},"ts":1248825120000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"annevk2, i think all of these proposed behaviors involve doing some amount of buffering","msgtype":"m.text"},"ts":1248825121000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"annevk2: the data will never get to the other side if it's sent faster than the network can transmit it","msgtype":"m.text"},"ts":1248825122000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ap: i would be ok with returning a number from send() which is how much more data can be buffered, and then failing the connection when you go over the limit","msgtype":"m.text"},"ts":1248825123000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but they differ in what to do when a buffer fills","msgtype":"m.text"},"ts":1248825124000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"Hixie: that sounds good to me, but it is not implementable","msgtype":"m.text"},"ts":1248825180000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"why fail the connection when you could indicate failure of that particular call to send?","msgtype":"m.text"},"ts":1248825181000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"ap, the UA can control how fast it is being sent","msgtype":"m.text"},"ts":1248825182000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"ap: which is similar to what you're suggesting, except that going over (returning false) is fatal","msgtype":"m.text"},"ts":1248825183000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ap: why not?","msgtype":"m.text"},"ts":1248825184000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk2: by blocking send() until the queue is free? we agreed to never block","msgtype":"m.text"},"ts":1248825185000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"franksalim: because people are going to ignore this data, and we don't want to make this UDP-like","msgtype":"m.text"},"ts":1248825186000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ap, it can queue up in the local RAM","msgtype":"m.text"},"ts":1248825240000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Hixie: hmm, maybe it can be implemented, let me think","msgtype":"m.text"},"ts":1248825241000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"annevk2: if you're calling send() faster than the network can handle, you'll eventually run out of RAM","msgtype":"m.text"},"ts":1248825242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ap, and when there's OOM it's just like any other platform implementation","msgtype":"m.text"},"ts":1248825243000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"there are many ways for a javascript application to eat arbitrarily large amounts of RAM if the author is careless or malicious","msgtype":"m.text"},"ts":1248825244000,"senderName":"franksalim","senderId":"franksalim@irc"},
{"content":{"body":"i'm rather with anne on this to be honest","msgtype":"m.text"},"ts":1248825300000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with implementation I meant limitation, sorry","msgtype":"m.text"},"ts":1248825301000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"annevk2: e.g. if you're sending a video stream from a capture device, there is no good in filling up RAM until OOM","msgtype":"m.text"},"ts":1248825420000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"annevk2: you want to be notified quickly, and to downscale your video","msgtype":"m.text"},"ts":1248825421000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"we don't support sending a video stream","msgtype":"m.text"},"ts":1248825422000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if that's the use case, we can fix this in v2","msgtype":"m.text"},"ts":1248825480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: why don't we?","msgtype":"m.text"},"ts":1248825481000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"I was just about to say that for specific types of data (e.g. files from the local disk) we should let send() accept dedicated types (e.g. FileData) and let the UA handle the specifics","msgtype":"m.text"},"ts":1248825482000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"Hixie: what about an audio stream?","msgtype":"m.text"},"ts":1248825483000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"it just handles text","msgtype":"m.text"},"ts":1248825484000,"senderName":"annevk2","senderId":"annevk2@irc"},
{"content":{"body":"ap: because we don't have any of the building blocks for that yet","msgtype":"m.text"},"ts":1248825485000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: what about data for/from SETI@home?","msgtype":"m.text"},"ts":1248825540000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ap: we don't have binary data, we don't have stream interfaces, we don't have audio or video hardware access","msgtype":"m.text"},"ts":1248825541000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: or any other programmatically generated data stream?","msgtype":"m.text"},"ts":1248825542000,"senderName":"ap","senderId":"ap@irc"},
{"content":{"body":"ap: SETI@home is rate-limited by the server","msgtype":"m.text"},"ts":1248825543000,"senderName":"Hixie","senderId":"Hixie@irc"}
]