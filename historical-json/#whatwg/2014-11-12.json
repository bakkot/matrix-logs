[
{"content":{"body":"Is there a Fetch test suite? https://fetch.spec.whatwg.org/","msgtype":"m.text"},"ts":1415750968000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: none that I know of","msgtype":"m.text"},"ts":1415752318000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Is the fetch API fairly simple? Is it a Promise-ified XMLHttpRequest?","msgtype":"m.text"},"ts":1415752349000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"yeah that would be fair way to describe it I guess","msgtype":"m.text"},"ts":1415752385000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Thanks, MikeSmith. Sounds good.","msgtype":"m.text"},"ts":1415752548000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: there's a polyfill at https://github.com/github/fetch in case you've not found it on your own yet","msgtype":"m.text"},"ts":1415752608000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that does have a few tests","msgtype":"m.text"},"ts":1415752639000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and I guess you realize this but there's a lot more to the Fetch spec than just the API that's exposed","msgtype":"m.text"},"ts":1415752738000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yes, I’m seeing that as I look through the Headers and CORS sections.","msgtype":"m.text"},"ts":1415752770000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"dear firefox, #1 thing that will make me turn off auto-updates entirely: having a dialog with \"update\" and \"later\" buttons, but no \"stop nagging me entirely\" button","msgtype":"m.text"},"ts":1415752800000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"stop nagging me entirely\" sounds like \"turn off auto-updates entirely\" anyway.","msgtype":"m.text"},"ts":1415752886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"telling me about an update once (and presumably downloading it for me) is different from disabling update checks outright","msgtype":"m.text"},"ts":1415753000000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"In practice, not really.  Most people will simple forget about it and not update.","msgtype":"m.text"},"ts":1415753065000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"apple does the same bullshit, and they're more deliberately-obtuse about it--the options are \"install now\", \"remind me in an hour\", and \"remind me tomorrow\" (or something to that effect), which is many miles beyond okay","msgtype":"m.text"},"ts":1415753091000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Chrome, of course, just makes the hamburger turn yellow, then red.  (And, though my coworkers keep denying it, I swear it also purposely starts breaking audio when you delay too long.)","msgtype":"m.text"},"ts":1415753143000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"chrome is pretty strict about not making the browser worse when you update, which firefox is not so good about","msgtype":"m.text"},"ts":1415753171000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"which makes me much less hesitant to let chrome update than firefox","msgtype":"m.text"},"ts":1415753180000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Can't comment on that.","msgtype":"m.text"},"ts":1415753192000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"chrome did basically remove user scripts at one point, which is the only reason I'm still loading firefox at all","msgtype":"m.text"},"ts":1415753232000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"the biggest breakage on a chrome update that I know of (for my usage patterns)","msgtype":"m.text"},"ts":1415753260000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"it's depressing that, for all the work people do, the web is unambiguously worse for me today than it was a year or two ago","msgtype":"m.text"},"ts":1415753328000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"as far as real-world day to day use","msgtype":"m.text"},"ts":1415753337000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"some of that's because of the hard work the bad guys are doing","msgtype":"m.text"},"ts":1415754504000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"what’s the hard work the bad guys are doing and who are the bad guys?","msgtype":"m.text"},"ts":1415757620000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"roc: ^","msgtype":"m.text"},"ts":1415760363000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"a ton of browser developer time and energy goes towards blocking the efforts of malware authors and","msgtype":"m.text"},"ts":1415760856000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"\"black hat\" hackers","msgtype":"m.text"},"ts":1415760860000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"and apart from the opportunity costs, this sometimes results directly in restrictions on what users and Web devs can do","msgtype":"m.text"},"ts":1415760897000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"Until things get better, the indie web helps, roc.","msgtype":"m.text"},"ts":1415764243000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"trying to block the efforts of malware distributors and plugging exploitable holes seems like a suitable thing to spend time on, though","msgtype":"m.text"},"ts":1415764479000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"agreed, the web is our new wild west","msgtype":"m.text"},"ts":1415765551000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"well, new like the 90’s is still kinda new.","msgtype":"m.text"},"ts":1415765583000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"annevk: something that's been bugging me about the http://w3c-test.org/encoding/iso-2022-jp-encoder.html and http://w3c-test.org/encoding/gb18030-encoder.html and http://w3c-test.org/encoding/gbk-encoder.html testーthose aren't strictly tests of the encoding spec only, they're actually also tests of the URL. In other words, I couldn't be review/evaluate them just by looking at the Encoding spec, I needed to look at the URL spec too. So I wonder whethe","msgtype":"m.text"},"ts":1415770445000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: also about the \"iso-2022-jp encoder: SI/SO ESC\" test, since nobody passes it and the actual behavior matches in gecko, webkit, and blink (they all return exactly the same thing, even though it doesn't match the spec), I wonder if the spec should change here to match the implementations","msgtype":"m.text"},"ts":1415771138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: or wait is that actually a problem in the test case itself?","msgtype":"m.text"},"ts":1415771504000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: so yeah looking back at https://github.com/w3c/web-platform-tests/blob/master/encoding/iso-2022-jp-encoder.html#L12 now, I don't understand why you're doing that res.split(\"%1B\").join(\"\\x1B\"). If that step in the test code is omitted, then the test passes as expected.","msgtype":"m.text"},"ts":1415772194000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: also r? https://github.com/w3c/web-platform-tests/pull/1383 (minor nit)","msgtype":"m.text"},"ts":1415774041000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: r+","msgtype":"m.text"},"ts":1415778341000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: seems you're correct about that, I made a mistake","msgtype":"m.text"},"ts":1415778365000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: although if you remove that split().join() line there's a few changes needed earlier too","msgtype":"m.text"},"ts":1415778386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: and there's no way to not have a dependency on either URLs or forms","msgtype":"m.text"},"ts":1415778399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: https://bugzilla.mozilla.org/show_bug.cgi?id=1093611 is about changing Gecko with respect to URL fragments","msgtype":"m.text"},"ts":1415782080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: i.e. align it with Safari and the original RFC","msgtype":"m.text"},"ts":1415782099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok cool","msgtype":"m.text"},"ts":1415782114000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: do you know if there's a blink bug?","msgtype":"m.text"},"ts":1415782149000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I don't know","msgtype":"m.text"},"ts":1415782159000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: it's only been fairly recent there's interest in URLs again","msgtype":"m.text"},"ts":1415782179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: although in Gecko we're mostly patching a broken setup","msgtype":"m.text"},"ts":1415782192000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hopefully at some point we're going for the rewrite","msgtype":"m.text"},"ts":1415782207000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"http://jxck.hatenablog.com/entry/whatwg-fetch :-)","msgtype":"m.text"},"ts":1415782315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'll wait and see what happens with that bug","msgtype":"m.text"},"ts":1415782329000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I feel like there isn't enough \"Stop trying to make fetch happen\" jokes","msgtype":"m.text"},"ts":1415782550000,"senderName":"Dashiva","senderId":"Dashiva@irc"},
{"content":{"body":"http://www.hcn.zaq.ne.jp/___/WEB/Fetch-ja.html wow","msgtype":"m.text"},"ts":1415782739000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: ah you already merged","msgtype":"m.text"},"ts":1415783175000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: thanks, will create a new thing to fix the issue you found","msgtype":"m.text"},"ts":1415783230000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm so firefox developer edition is aurora + a preinstalled extension?","msgtype":"m.text"},"ts":1415784841000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"the name and logo somehow makes me think of opera developer :-)","msgtype":"m.text"},"ts":1415784971000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess it's more inviting than \"aurora\" which maybe makes people think it's a decease","msgtype":"m.text"},"ts":1415785102000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"timezone math in Google is nifty","msgtype":"m.text"},"ts":1415786050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wish it supported \"4pm Amsterdam in Toronto\" as well","msgtype":"m.text"},"ts":1415786068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I never remember the timezone names","msgtype":"m.text"},"ts":1415786078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"4pm cet in toronto doesn't even work","msgtype":"m.text"},"ts":1415786114000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: AIUI \"aurora\" doesn't exist anymore; the release channels are nightly -> developer -> beta -> stable","msgtype":"m.text"},"ts":1415787756000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I haven't haven't actually verified that","msgtype":"m.text"},"ts":1415787771000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: looks correct per https://www.mozilla.org/en-US/firefox/channel/#aurora (though note the fragment)","msgtype":"m.text"},"ts":1415788488000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right, aurora still exists on android, and I doubt we managed to update every externally visible use of the term already","msgtype":"m.text"},"ts":1415788631000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I like dbaron's plan of removing beta","msgtype":"m.text"},"ts":1415788744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah I'm not sure how valuable the 12 week cycle is compared to a 6 week cycle, but I don't have the numbers on how many bugs we fix in that period","msgtype":"m.text"},"ts":1415788949000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Seems like it should be possible to figure out","msgtype":"m.text"},"ts":1415788974000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: wolframalpha's got you covered for timezone conversions… http://www.wolframalpha.com/input/?i=4pm+CET+in+toronto","msgtype":"m.text"},"ts":1415790302000,"senderName":"matijs","senderId":"matijs@irc"},
{"content":{"body":"sorry… https://www.wolframalpha.com/input/?i=4pm+CET+in+toronto","msgtype":"m.text"},"ts":1415790331000,"senderName":"matijs","senderId":"matijs@irc"},
{"content":{"body":"Yeah, but it's also really slow to load :(","msgtype":"m.text"},"ts":1415790779000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I really want Google to support U+XXXX for similar reasons","msgtype":"m.text"},"ts":1415793773000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"CSS property names and other web developer related aspects would be great too","msgtype":"m.text"},"ts":1415793823000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi, is there a way to get canvas composite operation `difference` work on non-100% opacity colors too?","msgtype":"m.text"},"ts":1415794742000,"senderName":"farnoy","senderId":"farnoy@irc"},
{"content":{"body":"Both `difference` and `xor` seem to work only on 100% opaque areas","msgtype":"m.text"},"ts":1415794749000,"senderName":"farnoy","senderId":"farnoy@irc"},
{"content":{"body":"jgraham: http://wptserve.readthedocs.org/en/latest/response.html is all I need a Python file with a handler definition or is there more to it?","msgtype":"m.text"},"ts":1415794835000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"farnoy: dev.w3.org/fxtf/compositing-1/#porterduffcompositingoperators_xor is the math, I don't really understand what it does, but if browsers don't match what that says, you might want to file a bug","msgtype":"m.text"},"ts":1415795056000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"argh address bar","msgtype":"m.text"},"ts":1415795065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm UK lunch times","msgtype":"m.text"},"ts":1415795152000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: In my case more like \"UK being on a train times\"","msgtype":"m.text"},"ts":1415796152000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: Yes, although note that the exact interface there is only needed for difficult cases","msgtype":"m.text"},"ts":1415796205000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"In simple cases the main() function can just return a status code / list of headers  / body","msgtype":"m.text"},"ts":1415796239000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(the first two are optional)","msgtype":"m.text"},"ts":1415796254000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: the example as is didn't work","msgtype":"m.text"},"ts":1415796284000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: main does seem to work (I copied some stuff from XHR)","msgtype":"m.text"},"ts":1415796298000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Sorry the documenation is a bit confusing","msgtype":"m.text"},"ts":1415796324000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the main() thing is a feature of web-platform-tests rather than vanilla wptserve","msgtype":"m.text"},"ts":1415796348000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: yeah sorry I hadn't checked the iso-2022-jp encoding test carefully enough before I merged it. Thanks for fixing it","msgtype":"m.text"},"ts":1415797407000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: also btw I think you'll be glad to know there are now bugzilla components for all the webappsec specs","msgtype":"m.text"},"ts":1415797451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: sweet","msgtype":"m.text"},"ts":1415797899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: fine to mix async_test and test?","msgtype":"m.text"},"ts":1415798617000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Yes","msgtype":"m.text"},"ts":1415798873000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith: https://github.com/w3c/web-platform-tests/pull/1384","msgtype":"m.text"},"ts":1415800743000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1415800755000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jgraham: ^ has the Python file I was asking about","msgtype":"m.text"},"ts":1415800761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah cool","msgtype":"m.text"},"ts":1415800767000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: will review","msgtype":"m.text"},"ts":1415800774000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If anyone can think of more things to test with the data I have there, I'd be open to adding more things","msgtype":"m.text"},"ts":1415800926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Actually using the data from the <iframe> is a bit tricky since the HTML parser mangles a couple of bytes","msgtype":"m.text"},"ts":1415800950000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Perhaps we should still do that though","msgtype":"m.text"},"ts":1415800969000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably only affects \\x00 and \\r","msgtype":"m.text"},"ts":1415800984000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'd bet zcorpan can think of more things. But it's sometimes dangerous to ask him unless you're prepared to actually do the more things","msgtype":"m.text"},"ts":1415801058000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: heh, if it's too much work I'll commit a TODO I guess","msgtype":"m.text"},"ts":1415801100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith++","msgtype":"m.text"},"ts":1415801307000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"MikeSmith++","msgtype":"m.text"},"ts":1415801816000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan++","msgtype":"m.text"},"ts":1415801823000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what did i do?","msgtype":"m.text"},"ts":1415801839000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Think of more things to test, for as long as I can remember :)","msgtype":"m.text"},"ts":1415801878000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"so how is the \"please address our issues with custom elements / shadow dom / etc\" thing coming? I'd love to be CC'd on such bugs if possible","msgtype":"m.text"},"ts":1415812823000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: you could go through the open bugs and copy yourself ;)","msgtype":"m.text"},"ts":1415813350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's impossible to find anything in there :(","msgtype":"m.text"},"ts":1415813376000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: anything recent you can find on public-webapps, as it's copied when a new bug is filed","msgtype":"m.text"},"ts":1415813472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: What do you mean by \"support u+xxxx\"? Show a onebox for it?","msgtype":"m.text"},"ts":1415814240000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: if that's what it's called","msgtype":"m.text"},"ts":1415814258000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yeah, dunno where the terminology comes from.","msgtype":"m.text"},"ts":1415814269000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I just always click the filesystem.info link. ^_^","msgtype":"m.text"},"ts":1415814282000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: me too, but if I just want to copy-and-paste the actual code point, it could be easier...","msgtype":"m.text"},"ts":1415814306000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"true that.","msgtype":"m.text"},"ts":1415814323000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We've got a thing to suggest new onebox results.  I'll ping. ^_^","msgtype":"m.text"},"ts":1415814339000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: heh, can you ask about \"4pm Amsterdam in Toronto\"?","msgtype":"m.text"},"ts":1415814381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"heh, k.","msgtype":"m.text"},"ts":1415814402000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(I always just ask for \"time in toronto\" and then add/subtract hours from current time as necessary.)","msgtype":"m.text"},"ts":1415814423000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: it seems some timezone support was rolled out, but it's fairly US-centric, e.g. not even \"4pm cet in toronto\" works","msgtype":"m.text"},"ts":1415814427000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"4pm pst in toronto\" works","msgtype":"m.text"},"ts":1415814440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so weird","msgtype":"m.text"},"ts":1415814443000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: how much would you mind if I removed all the hyphens from https://fetch.spec.whatwg.org/#requestmode ?","msgtype":"m.text"},"ts":1415818048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: apparently there's precedent for enumerations to be lowercase and no hyphens","msgtype":"m.text"},"ts":1415818068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: you have some sort of syntax error in your picture stuff","msgtype":"m.text"},"ts":1415818312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"search for \"<var>image request</span>\"","msgtype":"m.text"},"ts":1415818328000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: I'll ask the engineers how difficult it is to get a patch in for that. Will let you know.","msgtype":"m.text"},"ts":1415818364000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: to be clear, from all enum productions","msgtype":"m.text"},"ts":1415818387000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: everything in fetch right? So no-cors to nocors etc","msgtype":"m.text"},"ts":1415818457000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: yup","msgtype":"m.text"},"ts":1415818463000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1415818481000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I mean, hyphens seem loads better in terms of usability (or camelCase, whatever)","msgtype":"m.text"},"ts":1415818836000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Hixie: opinion?","msgtype":"m.text"},"ts":1415818858000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on?","msgtype":"m.text"},"ts":1415818864000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: enum naming","msgtype":"m.text"},"ts":1415818876000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: e.g. arraybuffer vs arrayBuffer vs array-buffer","msgtype":"m.text"},"ts":1415818893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"you mean strings in JS used as arguments?","msgtype":"m.text"},"ts":1415818896000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1415818900000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"if they're not used as identifiers, i'd just go with readable strings, e.g. \"fat array\"","msgtype":"m.text"},"ts":1415818913000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I think it's mostly justonelongstring","msgtype":"m.text"},"ts":1415818915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"but i view \"arraybuffer\" as one word, so...","msgtype":"m.text"},"ts":1415818928000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i definitely wouldn't camelcase in a string","msgtype":"m.text"},"ts":1415818937000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"no cors\"","msgtype":"m.text"},"ts":1415819111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1415819116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: thanks, fixed","msgtype":"m.text"},"ts":1415819134000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"but then same origin or same-origin...","msgtype":"m.text"},"ts":1415819140000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"baaah","msgtype":"m.text"},"ts":1415819143000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: coolio, regenning...","msgtype":"m.text"},"ts":1415819146000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if something is not documented, nobody depends on it and you're free to break it in any way you see fit","msgtype":"m.text"},"ts":1415819193000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"hahaha","msgtype":"m.text"},"ts":1415819235000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1415819236000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you're getting good at reading my sarcasm","msgtype":"m.text"},"ts":1415819248000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: well, you also suggested we could still change HTML parsing rules","msgtype":"m.text"},"ts":1415819286000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think it would be good to change it","msgtype":"m.text"},"ts":1415819315000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i wouldn't say it wouldn't break anyone =)","msgtype":"m.text"},"ts":1415819324000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"more just that I don't really care if people get broken due to depending on bogus misfeatures","msgtype":"m.text"},"ts":1415819436000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":":c","msgtype":"m.text"},"ts":1415819442000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"is something like \"new HTMLDivElement()\" supposed to work?","msgtype":"m.text"},"ts":1415819499000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: nope","msgtype":"m.text"},"ts":1415819512000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not afaik","msgtype":"m.text"},"ts":1415819513000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"at least on Chrome I can do \"new DocumentFragment()\", so I would expect other DOM APIs to have usable constructors as well","msgtype":"m.text"},"ts":1415819527000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: you can tell by the lack of [Constructor]","msgtype":"m.text"},"ts":1415819527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i think there have been some arguments that it \"should\" work, though","msgtype":"m.text"},"ts":1415819533000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"jarek: that's because I gave DocumentFragment a constructor: https://dom.spec.whatwg.org/#interface-documentfragment","msgtype":"m.text"},"ts":1415819557000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see, but there is nothing stopping WHATWG from adding the constructor in near future?","msgtype":"m.text"},"ts":1415819557000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: it's a bit hard for elements, since some interfaces are used for several elements","msgtype":"m.text"},"ts":1415819580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What's WebIDL for \"return type of a method that returns a promise that will fulfil to undefined\"? Promise<void> or ... ?","msgtype":"m.text"},"ts":1415819585000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: yes","msgtype":"m.text"},"ts":1415819598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thx","msgtype":"m.text"},"ts":1415819613000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"annevk: but those are abstract interfaces, right?","msgtype":"m.text"},"ts":1415819710000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"on Chrome it's also possible to use \"new\" with custom element class that inherits from HTMLDivElement and has no constructor","msgtype":"m.text"},"ts":1415819749000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"new HTMLDivElement()... Ugh","msgtype":"m.text"},"ts":1415819763000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Whatever happened to Element.create()?","msgtype":"m.text"},"ts":1415819771000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: got too complex","msgtype":"m.text"},"ts":1415819789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: what's wrong with \"new\" approach? Factory pattern was cool 10 years ago","msgtype":"m.text"},"ts":1415819800000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek, the interface name is awful","msgtype":"m.text"},"ts":1415819833000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jarek: the problem with the new approach is abstract interfaces (e.g. HTMLHeadingElement) and the verbosity","msgtype":"m.text"},"ts":1415819849000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek, and we have a localName <-> interface correspondence that makes that weird too","msgtype":"m.text"},"ts":1415819867000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"in 20 years, it will all be different, or irrelevant","msgtype":"m.text"},"ts":1415819939000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"pick one","msgtype":"m.text"},"ts":1415819945000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ms2ger: it's more generally HTML <-> JS correspondence","msgtype":"m.text"},"ts":1415819956000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: I don't think there's much opposition per se btw","msgtype":"m.text"},"ts":1415819970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek, I don't follow that","msgtype":"m.text"},"ts":1415819977000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: in JS I want to use constructors and in HTML localNames","msgtype":"m.text"},"ts":1415819982000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: it's just coming up with a good story that works for all elements","msgtype":"m.text"},"ts":1415819983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: e.g. that is why new DocumentFragment works, but new Element does not (yet?)","msgtype":"m.text"},"ts":1415820050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think Dart already does it (via some heavy wrappers)","msgtype":"m.text"},"ts":1415820054000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: it isn't immediately obvious how you'd create an element {test, test} other than createElementNS(\"test\", \"test\")","msgtype":"m.text"},"ts":1415820100000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: and if you were to suggest new Element(\"test\", \"test\") that'd be somewhat weird as new Element(\"http://www.w3.org/1999/xhtml\", \"div\") would return HTMLDivElement...","msgtype":"m.text"},"ts":1415820139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: isn't createElementNS going to be depracated?","msgtype":"m.text"},"ts":1415820139000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"I thought the plan was to move SVG and MathML into HTML namespace","msgtype":"m.text"},"ts":1415820150000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: ah yeah, I guess that's still somewhat a plan Google has","msgtype":"m.text"},"ts":1415820171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"all new geometry interfaces (DOMMatrix, DOMPoint, DOMRect) are created with \"new\" rather than factories","msgtype":"m.text"},"ts":1415820326000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"That seems like too much pain for too little gain","msgtype":"m.text"},"ts":1415820371000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"and the spec says that \"new SVGMatrix\" should also work because SVGMatrix should just reference DOMMatrix","msgtype":"m.text"},"ts":1415820403000,"senderName":"jarek","senderId":"jarek@irc"},
{"content":{"body":"jarek: sure, new objects use constructors","msgtype":"m.text"},"ts":1415820518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jarek: but as long as there's no plan for existing objects, nothing will happen","msgtype":"m.text"},"ts":1415820545000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The attempt to move SVG into the HTML namespace isn't a \"Google\" thing, it's a \"me\" thing, and the SVGWG explicitly agreed to try and do it at the last meeting, if possible.","msgtype":"m.text"},"ts":1415823070000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what difference would it make exactly? let people create SVG elements with createElement() instead of createElementNS() ?","msgtype":"m.text"},"ts":1415823201000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"seems like it wouldn't work with <a>","msgtype":"m.text"},"ts":1415823224000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yes, and making it a little less weird to intermix them more freely (putting <video>, <input>, etc inside of SVG)","msgtype":"m.text"},"ts":1415823234000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<a> is fine - SVG2 is dropping xlink:href in favor of href, so the elements'll match.","msgtype":"m.text"},"ts":1415823254000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"<script> and <style> similarly can be merged.","msgtype":"m.text"},"ts":1415823262000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so just getting rid of SVGAElement and using HTMLAnchorElement instead?","msgtype":"m.text"},"ts":1415823280000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"And now that SVG Fonts are dropped, just using the HTML <font> is fine.  That's all the clashes.","msgtype":"m.text"},"ts":1415823280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1415823284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's the *hope*.","msgtype":"m.text"},"ts":1415823289000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sorry for misattribution","msgtype":"m.text"},"ts":1415823333000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: No problem, I just don't like too many things getting attributed as \"google stuff\", because that plays into certain paranoid narratives.","msgtype":"m.text"},"ts":1415823447000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so then what happens to everyones SVGAElements that do in fact use xlink stuff :p","msgtype":"m.text"},"ts":1415823450000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"TabAtkins: Google will burn for destroying namespaces","msgtype":"m.text"},"ts":1415823482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SVG will allow xlink:href still, it'll just be lower-priority than href.","msgtype":"m.text"},"ts":1415823499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp has a point though that you cannot have both","msgtype":"m.text"},"ts":1415823521000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unless you make xlink:href work in HTML too...","msgtype":"m.text"},"ts":1415823532000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Some bleed-through back into HTML might be okay.  Or maybe we can hackily make xlink:href only work if there's an <svg> ancestor.","msgtype":"m.text"},"ts":1415823582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"plus people would be like \"hey this used to be an instance of SVGAElement but now it's not what happened\"","msgtype":"m.text"},"ts":1415824008000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean, it gets a bit murky I think","msgtype":"m.text"},"ts":1415824025000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"cool though","msgtype":"m.text"},"ts":1415824028000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"sure!","msgtype":"m.text"},"ts":1415824227000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"We're somewhat concerned about code that uses \"is this in the SVG namespace?\" to do something special.","msgtype":"m.text"},"ts":1415824284000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"We know that a decent chunk of code is for papering over differences in basic DOM operations between SVG and HTML elements, and now that most (and eventually all?) are consistent, having that sort of code go down the HTML path will be fine.","msgtype":"m.text"},"ts":1415824315000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in the ES6 iterator protocol, can done ever be true with value being set to some useful value?","msgtype":"m.text"},"ts":1415826639000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or is it always either done, or value?","msgtype":"m.text"},"ts":1415826644000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"A *valid* iterator won't ever do that.","msgtype":"m.text"},"ts":1415827292000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can make a custom iterator that violates the constraints, but that's your fault then.","msgtype":"m.text"},"ts":1415827309000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"from https://github.com/v8/v8-git-mirror/blob/d3d29c640cf14f0eac2057b4fbffa5fbc0a29231/src/x64/full-codegen-x64.cc#L1242-L1281, it looks like it's a `done or value` scenario, haven't checked the spec","msgtype":"m.text"},"ts":1415827474000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"right, i mean according to the protocol","msgtype":"m.text"},"ts":1415827477000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1415827480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, a valid iterator only ever produces a {value} object or a {done} object.","msgtype":"m.text"},"ts":1415827499000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Or {value: foo, done: false}, of course.)","msgtype":"m.text"},"ts":1415827513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i guess technically you could return anything you wanted from @@iterator though","msgtype":"m.text"},"ts":1415827581000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yeah, and then it's your fault for getting possibly-confusing results.","msgtype":"m.text"},"ts":1415827617000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"were you inclined to confuse the vm","msgtype":"m.text"},"ts":1415827618000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-iteratorresult-interface","msgtype":"m.text"},"ts":1415828378000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"man the ES6 iterator protocol really makes it a pain to work out if you're dealing with the last item in the list","msgtype":"m.text"},"ts":1415828449000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I suspect if you use a language feature you don't really have that problem","msgtype":"m.text"},"ts":1415828502000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Languages that make it easier for the consumer end up being *way* harder for the producer.  There was a lot of argument over this originally.","msgtype":"m.text"},"ts":1415828505000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1415828527000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well","msgtype":"m.text"},"ts":1415828533000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"either way :-)","msgtype":"m.text"},"ts":1415828535000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(You generally end up having to duplicate code between isEnded() and next(), or pre-compute next() to see if it's at the end and stash it away.)","msgtype":"m.text"},"ts":1415828544000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(personally i always prefer to make it harder on the producer)","msgtype":"m.text"},"ts":1415828552000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I've found that, while a \"late end\" is a little harder for the consumer, it's not a huge deal, and sometimes easier.","msgtype":"m.text"},"ts":1415828570000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(since there are fewer of those)","msgtype":"m.text"},"ts":1415828572000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Chaining iterables, for example, is slightly simpler, at least to me, with a late end.","msgtype":"m.text"},"ts":1415828596000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why is it hard btw? Just check if done is true?","msgtype":"m.text"},"ts":1415828635000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: Also, sometimes you *can't* early-end, while you can always late-end.  For example, your iterable might be lazily pulling stuff off the server.","msgtype":"m.text"},"ts":1415828652000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: say you want to add all the numbers in an iteration except hte last one","msgtype":"m.text"},"ts":1415828662000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: *shrug* i'm just saying it's a pain. not making a counter-proposal.","msgtype":"m.text"},"ts":1415828688000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Yeah, I know. I'm just providing more reasons why it was done the way it was, despite the pain.","msgtype":"m.text"},"ts":1415828706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do we have generator-iterators?","msgtype":"m.text"},"ts":1415828714000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1415828718000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"huh.","msgtype":"m.text"},"ts":1415828721000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Why \"huh\"?","msgtype":"m.text"},"ts":1415828726000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"while iterval.done != true ...?","msgtype":"m.text"},"ts":1415828728000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm just imagining that working in a for...of context","msgtype":"m.text"},"ts":1415828743000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: If you want all *but* the last, you have to specially stash the last one you've seen, and only add it in the *next* iteration if you're not done yet.","msgtype":"m.text"},"ts":1415828764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"which is the way everyone ought to want to use iterators, because it's nice :(","msgtype":"m.text"},"ts":1415828774000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Though this isn't a big deal - if you want all but the last *two*, you have to do something like this regardless of early/late end.","msgtype":"m.text"},"ts":1415828781000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"caitp: generators work fine in for-of.  What problem are you thinking about?","msgtype":"m.text"},"ts":1415828799000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah iterators in general have this problem, basically","msgtype":"m.text"},"ts":1415828816000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: as opposed to access by index","msgtype":"m.text"},"ts":1415828823000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: Of course, you can abstract this away with an iterator combinator that drops the last N elements.  It needs to seek ahead N elements, of course, but that's what you'd be manually doing anyway.","msgtype":"m.text"},"ts":1415828875000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: why do you have to wait for the next value? It tells you whether more is coming, no?","msgtype":"m.text"},"ts":1415828884000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then you can just do itersum(dropLast(1, iter))","msgtype":"m.text"},"ts":1415828892000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: interesting idea","msgtype":"m.text"},"ts":1415828899000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"annevk: No.  You either have a \"value\" frame, or a \"done\" frame.","msgtype":"m.text"},"ts":1415828905000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You don't know it's done until you ask for the next value and get a \"done\" frame instead.","msgtype":"m.text"},"ts":1415828917000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: probably not great for perf, but if it's not hot code, could work","msgtype":"m.text"},"ts":1415828925000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: ah sorry","msgtype":"m.text"},"ts":1415828936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: When working with iterators, more combinators is always the right answer.  They're easy to code up and easy to use.","msgtype":"m.text"},"ts":1415828939000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I see it now","msgtype":"m.text"},"ts":1415828941000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1415828943000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: It's the same thing you'll be doing manually, so I dont' see the perf concern (except for more function calls, I suppose.)","msgtype":"m.text"},"ts":1415828962000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: function calls can be expensive, depending on the language","msgtype":"m.text"},"ts":1415828981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Sure. Those languages aren't very good for iterator-based code, which is heavily functional.","msgtype":"m.text"},"ts":1415829000000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i have profiled this in JS, so i don't know what the overhead would be","msgtype":"m.text"},"ts":1415829116000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i wouldn't be surprised if it was measurable, though","msgtype":"m.text"},"ts":1415829126000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: you're actually writing JS these days?","msgtype":"m.text"},"ts":1415829146000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i often write js code :-P","msgtype":"m.text"},"ts":1415829206000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"our whole platform uses js :-P","msgtype":"m.text"},"ts":1415829213000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but in this instance, i'm basically trying to learn all the new stuff to get more up to date","msgtype":"m.text"},"ts":1415829233000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"[16:46]  <TabAtkins> caitp: generators work fine in for-of.  What problem are you thinking about? <<< well it's not generators that are the issue really, but in my head i'm expecting async iterators would be likely to use them --- but mostly it's the whole \"async for-of\" that i'm talking about, does that work?","msgtype":"m.text"},"ts":1415829246000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"it's hard to verify in d8, so I'm not sure","msgtype":"m.text"},"ts":1415829255000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ah, async generators will produce promises.  Consuming that directly with a for-of is obviously tricky, unless you really want to work with promises (which you might).  Along with async/await there's a proposal for an asynchronous version of for-of that handles async generators transparently.","msgtype":"m.text"},"ts":1415829326000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And I think it just returns promises of iterator frames, so using for-of over an async generator won't be useful, as it'll produce an infinite list.)","msgtype":"m.text"},"ts":1415829390000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"infinite lists don't sound very useful, no","msgtype":"m.text"},"ts":1415829512000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"They're very useful. Just not in a for-of when you can't actually verify where to manually break.","msgtype":"m.text"},"ts":1415829582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Like, I've used prime number generators before - clearly infinite.","msgtype":"m.text"},"ts":1415829594000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or just infinite ranges.","msgtype":"m.text"},"ts":1415829610000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Frex, Bikeshed's ID deduping appends an int to the end fo the ID to make it unique.  It just creates an infinite list starting from 0 and iterators until it finds a non-clashing one.","msgtype":"m.text"},"ts":1415829688000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s/ors/es/","msgtype":"m.text"},"ts":1415829886000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is \"let x; let x;\" valid?","msgtype":"m.text"},"ts":1415829985000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"\"var x; var x;\" is","msgtype":"m.text"},"ts":1415829992000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"though the second \"var x\" does sod all","msgtype":"m.text"},"ts":1415830010000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I don't *think* it is, but I'm not sure.","msgtype":"m.text"},"ts":1415830019000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"var has stupid scoping and nobody cares about it.","msgtype":"m.text"},"ts":1415830030000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i care about it, but ok","msgtype":"m.text"},"ts":1415830052000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let x; let x; is not valid","msgtype":"m.text"},"ts":1415830148000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1415830154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in fact var x; let x; is not valid","msgtype":"m.text"},"ts":1415830155000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"sure that makes sense","msgtype":"m.text"},"ts":1415830163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let x; if(...) { let x; } *is* valid, though.","msgtype":"m.text"},"ts":1415830280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"New scope.","msgtype":"m.text"},"ts":1415830285000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(As is putting the let inside the if condition - it shares scope with its contents.)","msgtype":"m.text"},"ts":1415830305000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1415830308000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the case i was looking at was:","msgtype":"m.text"},"ts":1415830312000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let x = 0; while (...) { ... }","msgtype":"m.text"},"ts":1415830326000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let x = 0; while (...) { ... }","msgtype":"m.text"},"ts":1415830328000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"where it would be aesthetically pleasing for the let to be valid","msgtype":"m.text"},"ts":1415830340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's just as easy to do:","msgtype":"m.text"},"ts":1415830345000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let x;","msgtype":"m.text"},"ts":1415830346000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"x = 0; while (...) { ... }","msgtype":"m.text"},"ts":1415830350000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"x = 0; while (...) { ... }","msgtype":"m.text"},"ts":1415830351000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for (let x = 0; ...; ) {...} ?","msgtype":"m.text"},"ts":1415830382000,"senderName":"jyasskin_","senderId":"jyasskin_@irc"},
{"content":{"body":"x isn't in the while loop","msgtype":"m.text"},"ts":1415830395000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1415830398000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in the condition","msgtype":"m.text"},"ts":1415830401000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's just an accumulator","msgtype":"m.text"},"ts":1415830406000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or similar","msgtype":"m.text"},"ts":1415830410000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or a state boolean","msgtype":"m.text"},"ts":1415830413000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or any number of other things","msgtype":"m.text"},"ts":1415830417000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yeah, you just can't do the repeated let. Do it once and set it twice, instead.","msgtype":"m.text"},"ts":1415830473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"classes have no syntax for value properties, right? you have to create the property in the constructor?","msgtype":"m.text"},"ts":1415830570000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and there's no privates in classes? not even using Symbols?","msgtype":"m.text"},"ts":1415830588000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Value properties being \"properties on the instance\"?","msgtype":"m.text"},"ts":1415830611000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And what do you mean by \"private\", specifically? That term is wrapped up in a lot of language-specific baggage, just like \"class\". ^_^","msgtype":"m.text"},"ts":1415830632000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"{ let x = 0; while (...) { ... } }","msgtype":"m.text"},"ts":1415830794000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"TabAtkins: value properties meaning values without getters or setters, which in the case of JS would be on the instance, yes","msgtype":"m.text"},"ts":1415830997000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"by \"private\" i mean \"not accessible to code outside the class\"","msgtype":"m.text"},"ts":1415831011000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Yes, instance properties are done in the constructor.","msgtype":"m.text"},"ts":1415831034000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can implement private state by using WeakMaps.","msgtype":"m.text"},"ts":1415831060000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(And that'll be easier to use when we figure out relations and their syntax.)","msgtype":"m.text"},"ts":1415831132000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do you do private state with weakmaps?","msgtype":"m.text"},"ts":1415831154000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You use the instance as the key, and the state as the value.  Then you use standard closure-based data-hiding to only expose the weakmap to the class's own methods.","msgtype":"m.text"},"ts":1415831199000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do you do the latter?","msgtype":"m.text"},"ts":1415831250000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(also, that's really ugly)","msgtype":"m.text"},"ts":1415831262000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(function(){ let x = new WeakMap();  class foo { ... }; })()","msgtype":"m.text"},"ts":1415831289000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"wouldn't \"foo\" also be non-visible then","msgtype":"m.text"},"ts":1415831315000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You can return it.","msgtype":"m.text"},"ts":1415831329000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...","msgtype":"m.text"},"ts":1415831332000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"var foo = (...)","msgtype":"m.text"},"ts":1415831335000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: this is what everyone does","msgtype":"m.text"},"ts":1415831365000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Some form of \"real\" private state would involve reifying classes more than we wanted to do at this point.  Maximin classes passed because they're sugar over the existing system.","msgtype":"m.text"},"ts":1415831379000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"well, nobody actually does this","msgtype":"m.text"},"ts":1415831380000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since class { } doesn't work yet","msgtype":"m.text"},"ts":1415831384000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but also, everyone says js sucks","msgtype":"m.text"},"ts":1415831389000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i was assuming we were trying to fix that :-)","msgtype":"m.text"},"ts":1415831396000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"They (and by that I mean, at least I) do this today with .prototype munging code.","msgtype":"m.text"},"ts":1415831401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"annevk: is there a reason to do https://www.w3.org/Bugs/Public/show_bug.cgi?id=27315 other than editorial clarity?","msgtype":"m.text"},"ts":1415833215000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: enum will limit the values that can be assigned, whereas DOMStrings won't, so that's useful maybe","msgtype":"m.text"},"ts":1415833571000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i mean, I guess it's kind of the same, but not really?","msgtype":"m.text"},"ts":1415833582000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"probably a good idea at any rate","msgtype":"m.text"},"ts":1415833607000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"the spec already doesn't allow invalid values to be assigned","msgtype":"m.text"},"ts":1415833658000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so that's not a difference","msgtype":"m.text"},"ts":1415833661000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well if browsers are implementing it as enums then there isn't much difference","msgtype":"m.text"},"ts":1415833718000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"but if they are then even if it's not a real difference, it would align better with reality?","msgtype":"m.text"},"ts":1415833736000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i dunno","msgtype":"m.text"},"ts":1415833747000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"The editorial clarify of enums is useful.","msgtype":"m.text"},"ts":1415833771000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yes, that much is clear","msgtype":"m.text"},"ts":1415833778000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the question is whether this is just an editorial change, or more than that","msgtype":"m.text"},"ts":1415833789000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"since if it's just editorial, then i can punt it to 2018, if it's something that actually matters, i should look at it now...","msgtype":"m.text"},"ts":1415833810000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well it sounds like you've decided that it doesn't really matter already, anyway it's time to stop caring about the internet and go make supper.","msgtype":"m.text"},"ts":1415833935000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"i haven't decided anything, that's why i was asking","msgtype":"m.text"},"ts":1415834181000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if i say:","msgtype":"m.text"},"ts":1415834353000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"foo.Bar = class Bar extends Baz { };","msgtype":"m.text"},"ts":1415834367000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"does it declare Bar in the local scope?","msgtype":"m.text"},"ts":1415834379000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as in, can the next line be:","msgtype":"m.text"},"ts":1415834384000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"let quux = new Bar();","msgtype":"m.text"},"ts":1415834392000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I am 90% sure it does not, but it does declare Bar inside the class body","msgtype":"m.text"},"ts":1415834405000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"or does using it in an expression mean that only foo.Bar is set to the class?","msgtype":"m.text"},"ts":1415834407000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"caitp: you're implementing js template strings in v8?","msgtype":"m.text"},"ts":1415834535000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"i'm pretty sure the answer is in http://people.mozilla.org/~jorendorff/es6-draft.html#sec-class-definitions-runtime-semantics-evaluation somewhere","msgtype":"m.text"},"ts":1415834550000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i think steps 7 and 8 of the first part not being in the second part means the answer is \"no\"","msgtype":"m.text"},"ts":1415834584000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Domenic is right, it's just like a function","msgtype":"m.text"},"ts":1415834586000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"there is a Bar binding, but only within the scope of the class itself","msgtype":"m.text"},"ts":1415834611000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"not the enclosing scope","msgtype":"m.text"},"ts":1415834621000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Domenic: Hm, I thought it did.  I thought you could declare anonymous classes to avoid that.","msgtype":"m.text"},"ts":1415834653000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok i'm pretty sure the spec supports jorendorff and Domenic here","msgtype":"m.text"},"ts":1415834665000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(pity)","msgtype":"m.text"},"ts":1415834675000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I didn't actually know that `var foo = function bar(){};` didn't also declare a local \"bar\" variable.","msgtype":"m.text"},"ts":1415834695000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"it used to in IE :)","msgtype":"m.text"},"ts":1415834704000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"at least, i think it did - there was some horrible bug or other","msgtype":"m.text"},"ts":1415834723000,"senderName":"jorendorff","senderId":"jorendorff@irc"}
]