[
{"content":{"body":"ecobos: I think we need to fix the standard on non-fetch schemes and ideally prevent the fingerprinting angles","msgtype":"m.text"},"ts":1585466334000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm extremely confused about both our old and our less-old behavior in that case","msgtype":"m.text"},"ts":1585466363000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: So this testcase:","msgtype":"m.text"},"ts":1585466383000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"```","msgtype":"m.text"},"ts":1585466401000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"<!doctype html>","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"<iframe id=\"myframe\"></iframe>","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"<pre id=\"log\"></pre>","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"<script>","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"onload = function() {","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"  let iframe = document.querySelector(\"iframe\");","msgtype":"m.text"},"ts":1585466402000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"  let log = document.getElementById(\"log\");","msgtype":"m.text"},"ts":1585466403000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"  let ex = null;","msgtype":"m.text"},"ts":1585466403000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"  try {","msgtype":"m.text"},"ts":1585466404000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"    iframe.contentWindow.location.href = \"very-unlikely-to-exist:foo\";","msgtype":"m.text"},"ts":1585466404000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"  } catch (e) {","msgtype":"m.text"},"ts":1585466405000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"err","msgtype":"m.text"},"ts":1585466418000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/7867","msgtype":"m.text"},"ts":1585466477000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: anyhow that test-case, before firefox 64 used to _both_ navigate and throw","msgtype":"m.text"},"ts":1585466495000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: that's so bonkers. We added a hack to not throw only for unknown protocol, which is terrible, https://bugzilla.mozilla.org/show_bug.cgi?id=680300. That didn't fix the underlying issue at all","msgtype":"m.text"},"ts":1585466550000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: and then at some later point we apparently fixed the underlying issue that was throwing for all those errors","msgtype":"m.text"},"ts":1585466587000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: but during all this time this has been detectable","msgtype":"m.text"},"ts":1585466597000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: by just trying to poke at the error page loaded at the frame","msgtype":"m.text"},"ts":1585466608000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"annevk: so... lol?","msgtype":"m.text"},"ts":1585466634000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"shrugs, rips off the hack, will file a bug for actual mitigations for this","msgtype":"m.emote"},"ts":1585466741000,"senderName":"ecobos","senderId":"ecobos@irc"},
{"content":{"body":"ecobos: ugh, I prolly dropped the ball on this at some point; throwing while still navigating is definitely bad news","msgtype":"m.text"},"ts":1585491171000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The real question is why are you talking about specs on a Sunday.","msgtype":"m.text"},"ts":1585491309000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: itâ€™s Sunday? Thanks for the heads up.","msgtype":"m.text"},"ts":1585491377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hah.","msgtype":"m.text"},"ts":1585493422000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Hm.. It appears column-width is forcing children to be limited by the column width (and leading to overflow). I had always imagined it would go as narrow as the child allows somehow, so that if in one cirumstance, the contents are too wide, there would be fewer columns. But I\"m seeing that Firefox, Safari, and Chromium all behave this way, E.g. at https://www.mediawiki.org/wiki/Category:Resource_loader_variables","msgtype":"m.text"},"ts":1585504140000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"https://usercontent.irccloud-cdn.com/file/dsjFpIFu/column-width%20problems.png","msgtype":"m.text"},"ts":1585504143000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I imagine there's a way to loosen that up, but not seeing it..","msgtype":"m.text"},"ts":1585504183000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I guess conceptually it's not very different from if a device were as narrow as the column width, and I'd need to handle that too, so I guess word-break is the only available option here. That works :)","msgtype":"m.text"},"ts":1585504403000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"or rather, overflow-wrap: break-word, in this case.","msgtype":"m.text"},"ts":1585504487000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Krinkle: Hmm, `column-width: max(33%, min-content);` should work, I think.  But yeah, you'll need to handle overflowing items on narrow viewports anyway, so might as well do that *too*.","msgtype":"m.text"},"ts":1585505513000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: interesting. min-content is something I can specify in column-width on a parent like <ul> and will be applied in context of each <li> element?","msgtype":"m.text"},"ts":1585507987000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I assumed 33% etc would be in relation to the <ul> itself.","msgtype":"m.text"},"ts":1585508001000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"The ul's min-content size involves asking its children for their min-content size.","msgtype":"m.text"},"ts":1585508025000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"https://drafts.csswg.org/css-sizing/#column-sizing","msgtype":"m.text"},"ts":1585508070000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(No *guarantees* on this working, btw; it's combining two newish things. Precede it with a `column-width: 33%;` in case it fails to parse.)","msgtype":"m.text"},"ts":1585508110000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh I see. min-content is a special value specific to column-width","msgtype":"m.text"},"ts":1585508123000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I assumed it was a generic width/height value as that would mean each column gets the width of the total of all children which is not what I want indeed.","msgtype":"m.text"},"ts":1585508149000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Firefox says the syntax is invalid","msgtype":"m.text"},"ts":1585508156000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Yeah, when used on column-width it does \"what you'd expect\" and asks the children. If used on the ul it'll ask the children, then multiply it by the # of columns.","msgtype":"m.text"},"ts":1585508172000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"on the ul\" I mean on the ul's `width`.","msgtype":"m.text"},"ts":1585508185000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"neat","msgtype":"m.text"},"ts":1585508207000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"Chromium rejects it as well.","msgtype":"m.text"},"ts":1585508234000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"and Safari too.","msgtype":"m.text"},"ts":1585508268000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I guess very new then :)","msgtype":"m.text"},"ts":1585508272000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"or priority victim by vendors","msgtype":"m.text"},"ts":1585508286000,"senderName":"Krinkle","senderId":"Krinkle@irc"},
{"content":{"body":"I don't think max() is in any public builds yet; it should be in the dev or beta channels for Safari, Chrome, and Firefox.","msgtype":"m.text"},"ts":1585508372000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Dunno about column-width:max-content","msgtype":"m.text"},"ts":1585508383000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"...oh wait, i'm dumb, there's no way that max-content would work, since we don't allow keywords in calculations yet.","msgtype":"m.text"},"ts":1585508401000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"NEVER MIND","msgtype":"m.text"},"ts":1585508403000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]