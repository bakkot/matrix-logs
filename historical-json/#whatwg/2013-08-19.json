[
{"content":{"body":"MikeSmith: ping","msgtype":"m.text"},"ts":1376891107000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"kochi1: away from my PC. will be back in 2 hours","msgtype":"m.text"},"ts":1376891845000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Okay.  I just wanted to check what's it going to be like next week.","msgtype":"m.text"},"ts":1376891876000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"will send you a mail about it.","msgtype":"m.text"},"ts":1376891885000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1376891899000,"senderName":"kochi1","senderId":"kochi1@irc"},
{"content":{"body":"kochi1: ok","msgtype":"m.text"},"ts":1376892569000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heycam|away: is this correct? if it is, is it because window is special?   window.hasOwnProperty(\"length\");  // Evaluates to true.","msgtype":"m.text"},"ts":1376897004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(from an example in webidl)","msgtype":"m.text"},"ts":1376897012000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes and yes","msgtype":"m.text"},"ts":1376897090000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"http://dev.w3.org/2006/webapi/WebIDL/#Global","msgtype":"m.text"},"ts":1376897116000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"thanks. so 'length' attributes on other objects are on prototype","msgtype":"m.text"},"ts":1376897719000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, yup","msgtype":"m.text"},"ts":1376897989000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"a recent change, but one that has been waiting to be made for a while","msgtype":"m.text"},"ts":1376897999000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"(otherwise 'var length;` breaks)","msgtype":"m.text"},"ts":1376898010000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1376898023000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i was reviewing a test that expected length on FileList instance to be an own property","msgtype":"m.text"},"ts":1376898109000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"r-","msgtype":"m.text"},"ts":1376898135000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"People always seem to do that at testtwf","msgtype":"m.text"},"ts":1376898228000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hmm, Chrome seems to match the argument to createEvent case-sensitively","msgtype":"m.text"},"ts":1376898331000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"r? https://github.com/w3c/web-platform-tests/pull/295","msgtype":"m.text"},"ts":1376898375000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gets all this githubmail about web-platform-tests now ;_;","msgtype":"m.emote"},"ts":1376898480000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I unwatched it","msgtype":"m.text"},"ts":1376898523000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Critic sends enough email for me","msgtype":"m.text"},"ts":1376898542000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"must look into this \"unwatching\" thing","msgtype":"m.emote"},"ts":1376898690000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Ms2ger: can you add a test about the case sensitivity thing? maybe also with turkish i's?","msgtype":"m.text"},"ts":1376898782000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"That's already tested further below","msgtype":"m.text"},"ts":1376898795000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Including the Turkish i :)","msgtype":"m.text"},"ts":1376898802000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1376898828000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is it useful to test the other turkish i (lowercase dotless)?","msgtype":"m.text"},"ts":1376898944000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess an impl could use toUpperCase()","msgtype":"m.text"},"ts":1376898983000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Probably somewhat useful, yes","msgtype":"m.text"},"ts":1376899510000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Same pull request?","msgtype":"m.text"},"ts":1376899520000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"sure, i added an issue about it there","msgtype":"m.text"},"ts":1376899698000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Done","msgtype":"m.text"},"ts":1376899886000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"kochi1: you still around?","msgtype":"m.text"},"ts":1376900018000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: reviewed","msgtype":"m.text"},"ts":1376900072000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"if i want to make changes to https://github.com/w3c/web-platform-tests/pull/55 i just clone web-platform-tests and push to that branch, right?","msgtype":"m.text"},"ts":1376902003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ah it even says so on that page :-)","msgtype":"m.text"},"ts":1376902092000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1376902236000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"where is toNativeLineEndings() defined? it's not in FileAPI editor's draft","msgtype":"m.text"},"ts":1376903616000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or was it dropped?","msgtype":"m.text"},"ts":1376903619000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it was dropped","msgtype":"m.text"},"ts":1376903642000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1376904078000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"found http://dev.w3.org/cvsweb/2006/webapi/FileAPI/Overview.html.diff?r1=1.181;r2=1.182;f=h","msgtype":"m.emote"},"ts":1376904169000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"found <http://www.w3.org/mid/CA+c2ei_ZLffRr=T-KWAOSGFqO3avtf=nrVoiini=f168fNm5ZQ⊙mgc>","msgtype":"m.emote"},"ts":1376904364000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Be happy it makes things easier to test :)","msgtype":"m.text"},"ts":1376904803000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Otherwise you are straight into \"test passes on platform A but fails on platform B\" territory","msgtype":"m.text"},"ts":1376904826000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah. though i still have to make sure that the 'endings' thing does nothing in the Blob constructor","msgtype":"m.text"},"ts":1376904877000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Indeed","msgtype":"m.text"},"ts":1376904959000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I recall lots of tests for it doing nothing, although I don't remember if they were in the constructor specifically","msgtype":"m.text"},"ts":1376904980000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"can i do 'git push' or do i need to say something more complicated like git push origin localbranch:origin/remotebranch or whatever?","msgtype":"m.text"},"ts":1376905567000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: It depends :)","msgtype":"m.text"},"ts":1376905637000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The way I would do it is:","msgtype":"m.text"},"ts":1376905655000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"git push","msgtype":"m.text"},"ts":1376905657000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(crap, that doesn't work)","msgtype":"m.text"},"ts":1376905661000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"git push <branch-name>","msgtype":"m.text"},"ts":1376905667000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"If the local branch is tracking the remote, and you configured git push to work in a sane way then git push will work","msgtype":"m.text"},"ts":1376905669000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(crap, that doesn't work either)","msgtype":"m.text"},"ts":1376905669000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"git push origin <branch-name>","msgtype":"m.text"},"ts":1376905673000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(maybe this works? if not, ask jgraham)","msgtype":"m.text"},"ts":1376905687000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But \"git push origin local:remote\" will always work (no need for origin/)","msgtype":"m.text"},"ts":1376905699000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Unless there's something wrong with your origin :)","msgtype":"m.text"},"ts":1376905738000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what i've done so far is: git fetch origin; git checkout -b submission/fileapi-opera origin/submission/fileapi-opera","msgtype":"m.text"},"ts":1376905752000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"git branch -vv will tell you what local branches track","msgtype":"m.text"},"ts":1376905764000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"* submission/fileapi-opera 19b27d8 [origin/submission/fileapi-opera: ahead 1] Test for non-support for endings and toNativeLineEndings","msgtype":"m.text"},"ts":1376905794000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(or git rev-parse --abbrev-ref @{u}, but that's a bit more advanced)","msgtype":"m.text"},"ts":1376905837000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zcorpan: Plain git push ought to work","msgtype":"m.text"},"ts":1376905854000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"thanks. it worked","msgtype":"m.text"},"ts":1376905887000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"matjas: so I'm thinking about introducing URL.domainToASCII / URL.domainToUnicode, should they return arrays or strings? I'm guessing strings, but I could go either way","msgtype":"m.text"},"ts":1376905898000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: why would you want to return an array? to get each label separately?","msgtype":"m.text"},"ts":1376905978000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"strings++ imho","msgtype":"m.text"},"ts":1376906012000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: that's how I represent domains internally","msgtype":"m.text"},"ts":1376906017000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: btw, polyfills for those would be cool, but quite a bit of work :/","msgtype":"m.text"},"ts":1376906043000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"should be trivial with punycode.js, no? well, depending on how you spec it exactly","msgtype":"m.text"},"ts":1376906090000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"URL.domainToASCII = punycode.toASCII; URL.domainToUnicode = punycode.toUnicode;","msgtype":"m.text"},"ts":1376906108000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"(more or less)","msgtype":"m.text"},"ts":1376906266000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I told you this before, IDNA is way more than punycode","msgtype":"m.text"},"ts":1376906272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i intend to implement IDNA in punycode.js as soon as you figure out what’s the best way to spec it","msgtype":"m.text"},"ts":1376906329000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"has the IDNA problem been solved yet?","msgtype":"m.text"},"ts":1376906341000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I decided to align with what browsers implemented. The parsing bit is in the specificaiton already, but I need to fill some holes.","msgtype":"m.text"},"ts":1376906372000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, cool! nice work","msgtype":"m.text"},"ts":1376906446000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"In particular http://tools.ietf.org/html/rfc3454 combined with its IDNA profile http://tools.ietf.org/html/rfc3491 is what's all the complication.","msgtype":"m.text"},"ts":1376906448000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I might write a post explaining IDNA 2003 at some point","msgtype":"m.text"},"ts":1376906542000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: TR46 is not viable?","msgtype":"m.text"},"ts":1376907664000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: it's not implemented","msgtype":"m.text"},"ts":1376907680000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what Mark Davis proposed as an alternative","msgtype":"m.text"},"ts":1376907680000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"is it implementable?","msgtype":"m.text"},"ts":1376907691000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"more implementable than IDNA 2008 I mean","msgtype":"m.text"},"ts":1376907707000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe, but I don't see anyone moving in that direction","msgtype":"m.text"},"ts":1376907712000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1376907717000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I suspect back to the drawing board would come first...","msgtype":"m.text"},"ts":1376907743000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: “I might write a post explaining IDNA 2003 at some point” → please do","msgtype":"m.text"},"ts":1376907964000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: also, domainToASCII can fail, throw?","msgtype":"m.text"},"ts":1376908231000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: or return original input","msgtype":"m.text"},"ts":1376908257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not sure what other alternatives there are","msgtype":"m.text"},"ts":1376908273000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"decided to return the original input, as that's how it works for <a href=...> too","msgtype":"m.text"},"ts":1376909993000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although I just realized new URL throws","msgtype":"m.text"},"ts":1376909999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1376910000000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well new URL can't really do anything else","msgtype":"m.text"},"ts":1376910024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I should also still deal with the case you presented, what to do with code points in the output that would affect reparsing","msgtype":"m.text"},"ts":1376910077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is {\"0\": \"foo\", \"length\":1} as \"user object\" per webidl?","msgtype":"m.text"},"ts":1376910658000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1376910673000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hrm","msgtype":"m.text"},"ts":1376910697000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"an object can be described as being a platform object, a user object, or neither\"","msgtype":"m.text"},"ts":1376910729000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heycam|away, what kind of object is neither?","msgtype":"m.text"},"ts":1376910739000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"goes with 'object with properties \"0\" and \"length\"'","msgtype":"m.emote"},"ts":1376910779000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ms2ger: maybe a Date?","msgtype":"m.text"},"ts":1376910802000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"interesting — NGPC prohibits the use of dotless domains: http://www.icann.org/en/groups/board/documents/resolutions-new-gtld-13aug13-en.htm#1.a","msgtype":"m.text"},"ts":1376910925000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"zcorpan: sounds like an array with a single element \"foo\"","msgtype":"m.text"},"ts":1376910985000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"matjas: not sure it's called that in webidl","msgtype":"m.text"},"ts":1376911013000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: what are the use cases for domainToASCII?","msgtype":"m.text"},"ts":1376912706000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"https://critic.hoppipolla.co.uk/a07afafa?review=262 looks like it makes sense, but i'm not familiar with that code","msgtype":"m.text"},"ts":1376912972000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: seemed like a primitive that ought to be exposed, given how libraries have implemented it as well","msgtype":"m.text"},"ts":1376914546000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"any idea when I am putting input field in a form it isn't shown? Also in the for I have 3 inline-block sections they are displayed in reverse order than they are in the source code like 3 2 1, in jsfiddle my same scenaqrio looks ok - http://jsfiddle.net/rgRX3/5/  If I delete form tags everything is ok","msgtype":"m.text"},"ts":1376914559000,"senderName":"rtc65","senderId":"rtc65@irc"},
{"content":{"body":"annevk: i was pondering abuot the right behavior for + <li><p>If <var title>asciiDomain</var> is failure, return <var title>domain</var>.","msgtype":"m.text"},"ts":1376914628000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah I figured","msgtype":"m.text"},"ts":1376914648000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"which libraries have this feature?","msgtype":"m.text"},"ts":1376914724000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: http://medialize.github.io/URI.js/docs.html normalizeHostname()","msgtype":"m.text"},"ts":1376914842000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(though new URL() does that by default)","msgtype":"m.text"},"ts":1376914862000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it just seems that given how complex those operations are exposing them will be useful","msgtype":"m.text"},"ts":1376914962000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"see also how often matjas' punycode is copied all over (even though it doesn't do IDNA 2003, people assume it's equivalent)","msgtype":"m.text"},"ts":1376914999000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'm not saying it shouldn't be added. i just want to know how it's used so i can evaluate whether the specced behavior is sane or not (maybe it should throw instead?)","msgtype":"m.text"},"ts":1376915389000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"It seems encodeURI / decodeURI do throw","msgtype":"m.text"},"ts":1376915501000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: emailed public-script-coord","msgtype":"m.text"},"ts":1376915721000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"grumbles some more about how the new Gmail reply interface is still unusable.","msgtype":"m.emote"},"ts":1376918183000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"If I have a handle to a window object and navigate it, is there any easy way to tell if the navigation succeeded?","msgtype":"m.text"},"ts":1376919251000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"By which I think I mean \"got status 200","msgtype":"m.text"},"ts":1376919292000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"\"","msgtype":"m.text"},"ts":1376919300000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"matjas: http://annevankesteren.nl/2013/08/idna2003","msgtype":"m.text"},"ts":1376919350000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: no, navigation to 404 is just as successful","msgtype":"m.text"},"ts":1376919381000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ♥","msgtype":"m.text"},"ts":1376919384000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"Well in this case I think the server died so I didn't get an HTTP response at all","msgtype":"m.text"},"ts":1376919470000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: you should get error for network errors","msgtype":"m.text"},"ts":1376919504000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"get error\"?","msgtype":"m.text"},"ts":1376919520000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"win.location = \"http://foo\"","msgtype":"m.text"},"ts":1376919531000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: oh a window object... hmm, can you get hold of its container?","msgtype":"m.text"},"ts":1376919543000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This one was window.opened() so it is a tlbc","msgtype":"m.text"},"ts":1376919569000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"window.open()ed I guess","msgtype":"m.text"},"ts":1376919581000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"doubt it then","msgtype":"m.text"},"ts":1376919594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"window.open(ed)","msgtype":"m.text"},"ts":1376919599000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"OK, well I guess I can set a timer and wait for a message","msgtype":"m.text"},"ts":1376919638000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Although that won't work for other cases","msgtype":"m.text"},"ts":1376919662000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: maybe link to http://unicode.org/reports/tr15/ for “Unicode normalization”","msgtype":"m.text"},"ts":1376919673000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"I could set a timer and poke at the DOM I guess","msgtype":"m.text"},"ts":1376919686000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: what are you trying to test?","msgtype":"m.text"},"ts":1376919713000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"matjas: sure","msgtype":"m.text"},"ts":1376919719000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: that particular bit you might be able to implement using a one-liner if you wait long enough ;)","msgtype":"m.text"},"ts":1376919874000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: or you could decide to write an ES6 polyfill for Unicode normalization...","msgtype":"m.text"},"ts":1376919895000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Well I think my server died when I was trying to run some tests. If it happens again I would like the test runner to handle it more gracefully, rather than keeping trying to load more and more tests that all fail","msgtype":"m.text"},"ts":1376919908000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: ah. ok. so it needs to be a top-level browsing context, and you presumably don't want to load the resource twice","msgtype":"m.text"},"ts":1376919984000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(e.g. <object> and XHR could tell you about 404)","msgtype":"m.text"},"ts":1376920007000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1376920032000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the tests are all testharness.js tests?","msgtype":"m.text"},"ts":1376920042000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"At the moment yes. So I can wait for the start event for a bit and fail if I don't get it","msgtype":"m.text"},"ts":1376920066000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I think this ought to handle reftests later too","msgtype":"m.text"},"ts":1376920077000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"did you actually get a 404 response or no http response at all?","msgtype":"m.text"},"ts":1376920151000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh you said that earlier","msgtype":"m.text"},"ts":1376920165000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think it was no response at all","msgtype":"m.text"},"ts":1376920166000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"A 404 would be a different kind of bad","msgtype":"m.text"},"ts":1376920183000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"then a custom 404 page that signals failure doesn't help (but might be a good idea to do also)","msgtype":"m.text"},"ts":1376920208000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: yeah, planning to. there’s https://github.com/walling/unorm/issues/6 but not sure how correct the output of that project really is","msgtype":"m.text"},"ts":1376920209000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"and then write a JS lib that performs stringprep","msgtype":"m.text"},"ts":1376920224000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"then nameprep","msgtype":"m.text"},"ts":1376920230000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"and only then, idna","msgtype":"m.text"},"ts":1376920240000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"oh cool","msgtype":"m.text"},"ts":1376920257000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wishes he could work on that kind of stuff full-time","msgtype":"m.emote"},"ts":1376920293000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"jgraham: poking at the DOM might work if tests are normally same-origin. but i guess some tests test document.domain and so won't be same-origin. chrome/firefox give a security exception when trying to access an error page","msgtype":"m.text"},"ts":1376920504000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jgraham: or have the framework periodically check if the server is still alive in some out-of-band fasion","msgtype":"m.text"},"ts":1376920773000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"giggles about @tribute","msgtype":"m.emote"},"ts":1376920802000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"matjas: that would be nice","msgtype":"m.text"},"ts":1376920831000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: Yeah, so I was hoping that the runner could only check the server if there is an indication of trouble","msgtype":"m.text"},"ts":1376920838000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"matjas: can't one of your many dev friends set you up?","msgtype":"m.text"},"ts":1376920851000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: (at large companies, that is)","msgtype":"m.text"},"ts":1376920859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jgraham: so poke at the DOM for each test, if it throws, check if the server is alive out-of-band","msgtype":"m.text"},"ts":1376920891000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Yep, it sounds like something like that could work. Thanks","msgtype":"m.text"},"ts":1376920932000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i noticed that blink-opera doesn't throw in that case but 'document' is undefined","msgtype":"m.text"},"ts":1376920979000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i guess that's a bug","msgtype":"m.text"},"ts":1376920989000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: i’m a bit of an asshole in that i really don’t want to relocate, which is a problem for most large companies","msgtype":"m.text"},"ts":1376921120000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"annevk, I'm curious since it wasn't mentioned in detail in your blog posting: is there new information, that browser developers won't implement IDNA 2008 and if so on what grounds?","msgtype":"m.text"},"ts":1376921367000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"ttepasse, no, nothing changed","msgtype":"m.text"},"ts":1376921389000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ttepasse, it isn't really clear anyway how IDNA2008 (no space) would be implemented as it doesn't address things to the level of detail IDNA2003 did","msgtype":"m.text"},"ts":1376921423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And escalating to a better IDNA algorithm is out of the question I fear?","msgtype":"m.text"},"ts":1376921486000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"ttepasse: maybe, not entirely clear what there is to gain","msgtype":"m.text"},"ts":1376921548000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sorry for needling you, by the way. It's just a pet peeve of mine since years, given that I've got an &szlig; in my last name. ;)","msgtype":"m.text"},"ts":1376921550000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1376921568000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not normalizing that to \"ss\" is a security problem","msgtype":"m.text"},"ts":1376921580000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"unless registrars would always couple registrations for both, which they don't","msgtype":"m.text"},"ts":1376921603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'd hoped the longer sunrise periods would see to that.","msgtype":"m.text"},"ts":1376921632000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"ttepasse: search for bank in http://unicode.org/reports/tr46/","msgtype":"m.text"},"ts":1376921634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(it seems that particular example is no longer problematic)","msgtype":"m.text"},"ts":1376921757000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Meh. It's always the tools a the edges. Thanks anyway.","msgtype":"m.text"},"ts":1376922064000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"(Uhm. That sounds more offensive than I intended. Thanks for your time and effort, I meant.)","msgtype":"m.text"},"ts":1376922124000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"ttepasse: I'm not particularly happy either, but I had to make a decision of sorts and given all the data and lack of interest in doing something else this seems the best","msgtype":"m.text"},"ts":1376922424000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ttepasse: if there was more interest maybe something like UTR #46 could be done","msgtype":"m.text"},"ts":1376922440000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm. I fear there are even less people interested in the greek final sigma than those interested in my funny little ligature/charakter. That is not a great base of generating interest.","msgtype":"m.text"},"ts":1376922889000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"ttepasse: maybe at some point we can tackle it differently","msgtype":"m.text"},"ts":1376923414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ttepasse: physical location remains the same, but there's some DNS-setting to have it presented differently","msgtype":"m.text"},"ts":1376923452000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So you'd have timtepasse.example shown as timtepaße.example...","msgtype":"m.text"},"ts":1376923498000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That sounds like an even more open doof for spoofing.","msgtype":"m.text"},"ts":1376923568000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"*door","msgtype":"m.text"},"ts":1376923572000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"well, with IDNA2003 they cannot resolve differently so dunno","msgtype":"m.text"},"ts":1376923598000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hm. � is also a candidate for normalisation, if I remember correctly. bestmantarays.com vs. bes�antarays.com. With a more spoofiger example, of course.","msgtype":"m.text"},"ts":1376923990000,"senderName":"ttepasse","senderId":"ttepasse@irc"},
{"content":{"body":"matjas: so handling of U+2101 seems fully conforming per IDNA2003","msgtype":"m.text"},"ts":1376928132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"matjas: it does seem problematic however","msgtype":"m.text"},"ts":1376928139000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hah, using uncommon IDNA2003 separators to bypass Twitter’s URL shortening: https://twitter.com/mikko/status/369487818013163521","msgtype":"m.text"},"ts":1376928949000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"seemed relevant","msgtype":"m.text"},"ts":1376928984000,"senderName":"matjas","senderId":"matjas@irc"},
{"content":{"body":"given how good Twitter is with Unicode they might just fix that","msgtype":"m.text"},"ts":1376929163000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Is NFKC that bad?","msgtype":"m.text"},"ts":1376929563000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: no it's fine","msgtype":"m.text"},"ts":1376929574000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so what is “Die, heretic scum!” about?","msgtype":"m.text"},"ts":1376929592000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: it's an obscure reference","msgtype":"m.text"},"ts":1376929603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SimonSapin: mpilgrim","msgtype":"m.text"},"ts":1376930097000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"What good would catching an error in a Promise init be? How would it forward the error to the reject method if .then or .catch had not yet been executed? http://dom.spec.whatwg.org/#promises","msgtype":"m.text"},"ts":1376931455000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: you can call `.then` or `.catch` later.","msgtype":"m.text"},"ts":1376931867000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JonathanNeal: promises represent asynchronous values. if an error was encountered setting the asyncrhonous value, then that error should be reflected in the promise's state, so the promise should become rejected.","msgtype":"m.text"},"ts":1376931912000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: If my promise's \"init\" function had something like \"var request = new AudioContext()\" and this threw an error (because there was no window.AudioContext) then would .then or .catch file when I attached them later?","msgtype":"m.text"},"ts":1376932030000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: yes.","msgtype":"m.text"},"ts":1376932077000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JonathanNeal: the promise's state would be rejected, so .then/catch would fire any onRejected handlers passed in to them.","msgtype":"m.text"},"ts":1376932104000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"e.g. var promise = new Promise(function () { var request = new AudioContext(); /* error thrown */ }); promise.catch(function (error) { console.log(error); }); promise.catch(function (error) { console.log(error); }); so both of these catches would be called?","msgtype":"m.text"},"ts":1376932131000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: yes.","msgtype":"m.text"},"ts":1376932141000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I see. Okay! Thanks.","msgtype":"m.text"},"ts":1376932216000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"np! :)","msgtype":"m.text"},"ts":1376932224000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I want to be extra clear on something related. Once a promise is resolved, any pending \"success\" functions will fire. Then, any \"success\" functions fired after resolution will (effectively) fire immediately?","msgtype":"m.text"},"ts":1376932392000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Then, any \"success\" functions *attached*","msgtype":"m.text"},"ts":1376932416000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: Not \"immediately\" - in the next tick (or microtask, whatever) after they're attached.","msgtype":"m.text"},"ts":1376932433000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You can't distinguish between a promise that is already fulfilled and one that got fulfilled between the time you registered and the first moment the callback could have been called.","msgtype":"m.text"},"ts":1376932460000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"As if I called setTimeout(onsuccess, 0) ?","msgtype":"m.text"},"ts":1376932469000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1376932473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, thanks for that clarification. Promise is very asynchronous.","msgtype":"m.text"},"ts":1376932541000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1376932555000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Does a Promise init run instantly, or also in a new setTimeout'ish thread?","msgtype":"m.text"},"ts":1376932569000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The possibility of \"excessive\" asynchrony is why there's discussion about switching promises over to using microtasks.","msgtype":"m.text"},"ts":1376932578000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The init runs instantly.","msgtype":"m.text"},"ts":1376932582000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you can easily extract resolver functions from a new promise by just setting up closure variables outside of it, and assigning to them inside the init.","msgtype":"m.text"},"ts":1376932623000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Why is there a PromiseResolver object, which seems to be a kind of restricted version of the Promise object?","msgtype":"m.text"},"ts":1376932640000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The Promise is what an API returns to consumers of the promise. The Resolver is what the API uses to actually deliver the result. You don't want the consumer of a promise to have that control.","msgtype":"m.text"},"ts":1376932682000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"new Promise(function (resolver) { this; /* the promise */ resolver; /* the promise without those extra methods */ });","msgtype":"m.text"},"ts":1376932705000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"PromiseResolver is not related to Promise at all (that is, not realted in an API way).","msgtype":"m.text"},"ts":1376932706000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The PromiseResolver *controls* the promise.","msgtype":"m.text"},"ts":1376932723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, I must misunderstand them.","msgtype":"m.text"},"ts":1376932725000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It is nothing like the promise - you dont' register callbacks on it.","msgtype":"m.text"},"ts":1376932732000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You're probably misinterpreting the names of the resolver functions.","msgtype":"m.text"},"ts":1376932742000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Those dont' take callbacks, they take *values*, and they set the promise's state accordingly.","msgtype":"m.text"},"ts":1376932755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"var promise = new Promise(); promise.resolve(); /* doesn't do the same thing as the promise resolver's .resolve()? */","msgtype":"m.text"},"ts":1376932774000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"No, promise.resolve() doesnt' exist.","msgtype":"m.text"},"ts":1376932786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The resolver functions aren't put on the promise itself, for good reason.","msgtype":"m.text"},"ts":1376932797000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There's the disconnect. Thanks TabAtkins. The spec confused me.","msgtype":"m.text"},"ts":1376932804000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"So you can safely pass promises around without stupid/malicious code fucking with the state.","msgtype":"m.text"},"ts":1376932815000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"interface Promise { ... static Promise resolve(any value); // same as any(value)\"","msgtype":"m.text"},"ts":1376932822000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yeah, the spec has two distinct sections - the model and the API.","msgtype":"m.text"},"ts":1376932828000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"I was looking at the API.","msgtype":"m.text"},"ts":1376932842000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"You should see what I was misunderstanding here http://dom.spec.whatwg.org/#promises-api","msgtype":"m.text"},"ts":1376932862000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Oh, that's a constructor","msgtype":"m.text"},"ts":1376932885000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Promise.resolve(\"5\") gives you a new Promise that's already resolved to \"5\"","msgtype":"m.text"},"ts":1376932909000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Yea, I misunderstood it.","msgtype":"m.text"},"ts":1376932928000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ah yeah, similarly-named methods to the resolver functions exist on the Promise *interface*.","msgtype":"m.text"},"ts":1376932930000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What's the difference between .fulfill and .resolve?","msgtype":"m.text"},"ts":1376932952000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"So you don't have to bother writing new Promise(function(resolver){resolver.resolve(\"5\")})  (give or take my memory of the API)","msgtype":"m.text"},"ts":1376932955000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Promise.resolve(5) === new Promise(function(r){r.resolve(5);})","msgtype":"m.text"},"ts":1376932955000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: fulfill just takes its argument and sets the promise to that value.","msgtype":"m.text"},"ts":1376932973000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"resolve looks at the argument first - if it's a promise as well, it instead waits for *that* promise to fulfill, and then fulfills with *that* value.","msgtype":"m.text"},"ts":1376932998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If \"flattens\" promises, as it were.","msgtype":"m.text"},"ts":1376933004000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s/If/It/","msgtype":"m.text"},"ts":1376933012000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So you can \"resolve\" a promise to the result of an XHR (once we have a promise-returning fetch() function), without having to bend over backwards to wait for the XHR's promise to resolve as well.","msgtype":"m.text"},"ts":1376933049000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"resolver.fulfill(5); resolver.resolve(); // so what happens here?","msgtype":"m.text"},"ts":1376933079000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"It fulfills to 5, and neuters the promise, so the .resolve() call silently fails.","msgtype":"m.text"},"ts":1376933104000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Once a promise reaches an end-state, it ignores any further resolver calls.","msgtype":"m.text"},"ts":1376933116000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I am so bummed I don't get the difference between fulfill and resolve. They both fulfill?","msgtype":"m.text"},"ts":1376933142000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Here's the difference:","msgtype":"m.text"},"ts":1376933163000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"x = Promise.fulfill(5);  y = Promise.fulfill(x);  y.then(function(val) { print(val); }); // prints <Object Promise> or whatever.","msgtype":"m.text"},"ts":1376933226000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"x = Promise.fulfill(5);  y = Promise.resolve(x);  y.then(function(val) { print(val); }); // prints 5","msgtype":"m.text"},"ts":1376933238000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"fulfill doesn't look at its argument, it just immediately fulfills its promise with it.","msgtype":"m.text"},"ts":1376933258000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But this will change; then will soon do full unwrapping and you will need `flatMap` to get at the wrapped value.","msgtype":"m.text"},"ts":1376933271000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"resolve does look at its argument, and if it's a promise, it \"flattens\" it so that you only see the value.","msgtype":"m.text"},"ts":1376933277000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"absorbing","msgtype":"m.text"},"ts":1376933286000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yes.  Soon there will be *no real difference* between fulfill and resolve for promises *if you use .then() to listen to them*.","msgtype":"m.text"},"ts":1376933314000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(You'll be able to use .flatMap() to listen to them as well, which'll retain the distinction.)","msgtype":"m.text"},"ts":1376933327000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if you want to be forward-compatible you should use resolve()","msgtype":"m.text"},"ts":1376933381000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Remind me again what the right verbs to use for the different things you can do to a promise are?","msgtype":"m.text"},"ts":1376933408000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: you can resolve or fulfill or reject a promise. A promise's state is either pending or fulfilled or rejected. We say \"settled\" to mean \"either fulfilled or rejected.\"","msgtype":"m.text"},"ts":1376933437000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Thanks.","msgtype":"m.text"},"ts":1376933446000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I don't quite understand the \"accept\" vs \"resolve\" thing Mark and you worked out, or at least, don't understand it well enough to explain it to anyone.","msgtype":"m.text"},"ts":1376933461000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It's fulfill/resolve, that's all.","msgtype":"m.text"},"ts":1376933473000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"DOM Promises previously used \"accept\" as the verb.","msgtype":"m.text"},"ts":1376933485000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But from what I understand Mark (and you?) purported to repurpose accept to mean some weird state only distinguishable by using flatMap.","msgtype":"m.text"},"ts":1376933507000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"No, there's been some misunderstanding.  ^_^","msgtype":"m.text"},"ts":1376933534000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, hm, maybe that is the terminology Mark was using.  I guess that's fine.","msgtype":"m.text"},"ts":1376933556000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Footnote [1] here http://esdiscuss.org/topic/promises-consensus#content-8","msgtype":"m.text"},"ts":1376933556000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Running with that...","msgtype":"m.text"},"ts":1376933563000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"accepted\" means that the promises fulfill or resolve functions have been called, and it's ready to call its flatMap() callbacks.","msgtype":"m.text"},"ts":1376933631000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"fulfilled\" means it's completely settled, and is ready to call its then() callbacks.","msgtype":"m.text"},"ts":1376933648000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think what I need is an example of a promise that's not resolved, but is accepted.","msgtype":"m.text"},"ts":1376933654000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"x = new Promise(); y = Promise.fulfill(x);  // y is accepted, but wont' be resolved until x settles.","msgtype":"m.text"},"ts":1376933688000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"s/wont' be resolved/won't be fulfilled/","msgtype":"m.text"},"ts":1376933723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Gah, terminology that uses close english words to draw important technical distinctions is hard.","msgtype":"m.text"},"ts":1376933740000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I think I see. As opposed to x = new Promise(); y = Promise.resolve(x);, which won't call any flatMap callbacks","msgtype":"m.text"},"ts":1376933748000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so .resolve is like .fulfill, except that it acts differently when it is passed a promise?","msgtype":"m.text"},"ts":1376933773000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Right, not until y settles.  Because you explicitly said, by calling .resolve(), that you want y's value to be the settled value of x.","msgtype":"m.text"},"ts":1376933786000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: Yes.","msgtype":"m.text"},"ts":1376933790000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: yes. resolve() matches the behavior of returning something inside the promise.","msgtype":"m.text"},"ts":1376933790000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"s/inside the promise/inside the onFulfilled/onRejected handlers","msgtype":"m.text"},"ts":1376933803000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so basically, just use fulfill if you plan to take advantage of chaining promises","msgtype":"m.text"},"ts":1376933861000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"*if you ever plan*","msgtype":"m.text"},"ts":1376933867000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: It doesn't really matter as long as you use .then() (once the spec switches to the new semantics we agreed on).","msgtype":"m.text"},"ts":1376933894000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So shrug.","msgtype":"m.text"},"ts":1376933896000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: I don't think that's right, or at least it misuses \"chaining promises\"","msgtype":"m.text"},"ts":1376933897000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: what word would better describe it than \"chaining\"?","msgtype":"m.text"},"ts":1376933918000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: the only reason to use fulfill is if you see a legitimate need for \"promises for promises,\" which I don't and never have (but disagree with TabAtkins on)","msgtype":"m.text"},"ts":1376933926000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JonathanNeal: If you think that .resolve() interferes with \"chaining\", you're still a little confused. :/","msgtype":"m.text"},"ts":1376933935000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"promises for promises\" = \"an asynchronous value representing an asynchronous value representing X\", ugh. </end rant>","msgtype":"m.text"},"ts":1376933962000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Yea, I think of that as asychronous chaining","msgtype":"m.text"},"ts":1376933977000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"\"arrays for arrays\" = \"a non-deterministic value representing non-deterministic values\", ugh. </end rant>","msgtype":"m.text"},"ts":1376934012000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: usually chaining with promises refers to things like `doXHR().then(result => { return processResult(result); /* returns a promise*/ }).then(processed => { ... })`","msgtype":"m.text"},"ts":1376934035000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: ah, that's because I didn't know the return value of then did something.","msgtype":"m.text"},"ts":1376934072000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Technically, it doesn't, but you can think of it as doing something, yes.","msgtype":"m.text"},"ts":1376934093000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Technically, it's the .then() call itself that does the \"something\" that lets you return a promise and then listen to it's value in the next .then() call.)","msgtype":"m.text"},"ts":1376934119000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But let's not get caught up in semantics.","msgtype":"m.text"},"ts":1376934131000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"var foo = somepromise.then(function () { return 5; }); /* foo = 5 ? */","msgtype":"m.text"},"ts":1376934230000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"or rather ... .then(function () { return 5; }).then(function (value) { print(value); /* prints 5 */ });","msgtype":"m.text"},"ts":1376934278000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"or rather ... return Promise.resolve(5);","msgtype":"m.text"},"ts":1376934300000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: both return 5 and return Promise.resolve(5) will work","msgtype":"m.text"},"ts":1376934396000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"In the first line, foo is set to a promise which'll eventually fulfill to 5.","msgtype":"m.text"},"ts":1376934419000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"But it's not 5 itself, because promises are asynchronous.","msgtype":"m.text"},"ts":1376934430000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Right, so var foo = new Promise(); var bar = foo.then(function () {}); foo === bar","msgtype":"m.text"},"ts":1376934454000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"In the second line, yes, it'll print 5.  Also the third line.","msgtype":"m.text"},"ts":1376934454000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No, they're !==, because they're different promise objects.","msgtype":"m.text"},"ts":1376934469000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"bar is a brand new promise which resolves after foo does.","msgtype":"m.text"},"ts":1376934486000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Good to know.","msgtype":"m.text"},"ts":1376934500000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I actually think we could kill resolve now, under the new semantics.  It doesn't really *do* anything.","msgtype":"m.text"},"ts":1376934561000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Promise.fulfill() and Promise.resolve() are identical under .then() semantics.","msgtype":"m.text"},"ts":1376934577000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"They're distinguishable under .flatMap() semantics, but in a confusing way.","msgtype":"m.text"},"ts":1376934587000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It expresses the flat/nested distinction on the value side, rather than the read side.","msgtype":"m.text"},"ts":1376934685000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, the return value of .then() is a promise no matter what","msgtype":"m.text"},"ts":1376934703000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1376934755000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: I find the fact that fulfill() doesn't create a fulfilled promies horrible","msgtype":"m.text"},"ts":1376934772000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Yeah, I'm writing up a blog post just now about the terminology, and I find it confusing as well.","msgtype":"m.text"},"ts":1376934794000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: we should keep resolve, and rename fulfill to something more monadey","msgtype":"m.text"},"ts":1376934808000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Let's just throw away .fulfill then and use .resolve(0.","msgtype":"m.text"},"ts":1376934810000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Thanks for breaking it down for me. I was very confused, admittedly by the helper methods on the Promise constructor.","msgtype":"m.text"},"ts":1376934819000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Nonono, keep resolve() and just give it the current fulfill() semantics.","msgtype":"m.text"},"ts":1376934828000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No need for a flattener on the value side.","msgtype":"m.text"},"ts":1376934840000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Plus, eagerly flattening is always going to be hostile to lazy promises.)","msgtype":"m.text"},"ts":1376934853000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: The spec doesn't help, definitely.","msgtype":"m.text"},"ts":1376934866000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: i guess, i don't care since i will only consume with .then.","msgtype":"m.text"},"ts":1376934869000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"JonathanNeal: yeah a lot of people seem to get tripped up on that, missing the \"static\" before those methods.","msgtype":"m.text"},"ts":1376934876000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"I actually think we could kill resolve now\" ... \"Let's just throw away .fulfill then and use .resolve\"","msgtype":"m.text"},"ts":1376934877000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Which one are you gonna kill?","msgtype":"m.text"},"ts":1376934895000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I changed my mind between those two.  ^_^","msgtype":"m.text"},"ts":1376934926000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Kill the .fulfill method, because the \"fulfilled\" state is already taken and means something different.","msgtype":"m.text"},"ts":1376934944000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"+1","msgtype":"m.text"},"ts":1376934951000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: Or... accept()?","msgtype":"m.text"},"ts":1376934967000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or we can change the name of the flatMap()-ready state to \"resolved\".","msgtype":"m.text"},"ts":1376934979000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no, resolve is what the promise community uses for \"has been locked in to follow a single value\"","msgtype":"m.text"},"ts":1376934996000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Okay, that's fine.","msgtype":"m.text"},"ts":1376935004000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yes I think that's it. from my POV it just means killing the accepted state","msgtype":"m.text"},"ts":1376935011000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Sure.","msgtype":"m.text"},"ts":1376935021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So, which word is it, resolve?","msgtype":"m.text"},"ts":1376935076000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Okay, so the functions are resolve() and reject().","msgtype":"m.text"},"ts":1376935080000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Okay, that's easy to remember, the ones that start with the same two letters.","msgtype":"m.text"},"ts":1376935101000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"The states are \"accepted\" (ready for flatMap(), no special behavior if the value is a promise) and \"fulfilled\" (ready for .then(), if the value is a promise it resolves to its value).","msgtype":"m.text"},"ts":1376935124000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hey, that's right.","msgtype":"m.text"},"ts":1376935129000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"No \"pending\"?","msgtype":"m.text"},"ts":1376935360000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Oh no, ther'es still pending and rejected.","msgtype":"m.text"},"ts":1376935371000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Those are the easy states. ^_^","msgtype":"m.text"},"ts":1376935374000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: no the \"fates\" are \"resolved\" and \"unresolved\"; the states are \"fulfilled\", \"rejected\", and \"pending\"","msgtype":"m.text"},"ts":1376935458000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Haha, sure.","msgtype":"m.text"},"ts":1376935470000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":":)","msgtype":"m.text"},"ts":1376935474000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Drafting es-discuss email now","msgtype":"m.text"},"ts":1376935493000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Okay, so .flatMap() callbacks are called as soon as you enter the fulfilled state, and .then() callbacks are called when you reach the eventual \"resolved fate\"?  (Which may happen at the same time, if you originally resolved to a non-promise value.)","msgtype":"m.text"},"ts":1376935544000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"no i don't think so","msgtype":"m.text"},"ts":1376935558000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I wasn't sure how you were intending fates to rule over states.","msgtype":"m.text"},"ts":1376935571000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"they are somewhat orthogonal","msgtype":"m.text"},"ts":1376935580000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Promise.resolve(foreverPending) produces a promise that is pending, but resolved","msgtype":"m.text"},"ts":1376935586000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"since it is resolved, flatMap can use it","msgtype":"m.text"},"ts":1376935596000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Oh, gotcha.","msgtype":"m.text"},"ts":1376935605000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"then() only operates on states","msgtype":"m.text"},"ts":1376935620000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"flatMap() only takes one callback now I think","msgtype":"m.text"},"ts":1376935663000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"See, the reason I preferred the terminology the other way around (.flatMap uses states, .then uses fates) is that .flatMap works on local information, stuff the promise knows by itself.","msgtype":"m.text"},"ts":1376935667000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(more monadic!)","msgtype":"m.text"},"ts":1376935669000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"No, flatMap() still takes two.","msgtype":"m.text"},"ts":1376935684000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"how do you produce a promise that flatMap will call the second callback on","msgtype":"m.text"},"ts":1376935697000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"There's nothing *preventing* the monad operation from taking more arguments.","msgtype":"m.text"},"ts":1376935700000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"remember: there is nothing different between Promise.reject(x) and Promise.resolve(Promise.reject(x))","msgtype":"m.text"},"ts":1376935718000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Promise.reject(5).flatMap(null, console.log) will log 5.","msgtype":"m.text"},"ts":1376935723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"There is!","msgtype":"m.text"},"ts":1376935730000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok i guess that doesn't matter","msgtype":"m.text"},"ts":1376935747000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"(to me)","msgtype":"m.text"},"ts":1376935751000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Do I want t know how to use flatMap?","msgtype":"m.text"},"ts":1376937324000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Ignore it for now.  It's useful if you have multiple operations which return promises with different semantics, and you need to distinguish between them.","msgtype":"m.text"},"ts":1376937640000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"What are all of the prototype methods on promise; then and catch?","msgtype":"m.text"},"ts":1376937805000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"then/catch/flatMap","msgtype":"m.text"},"ts":1376938316000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: we want to suggest removing navigator.vendor from blink. should i just file a bug or email blink-dev?","msgtype":"m.text"},"ts":1376938632000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"How will I know who Google, Inc. is?","msgtype":"m.text"},"ts":1376938963000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"TabAtkins: Are you left-handed, by any chance?","msgtype":"m.text"},"ts":1376939408000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: he's a bit sinister if that's what you're getting at :)","msgtype":"m.text"},"ts":1376940646000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"hober: Never! Just investigating a hypothesis.","msgtype":"m.text"},"ts":1376940678000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: I believe he is, FWIW","msgtype":"m.text"},"ts":1376940748000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"intersting","msgtype":"m.text"},"ts":1376940769000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"+e","msgtype":"m.text"},"ts":1376940800000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"intersting: the one that gets you in between","msgtype":"m.text"},"ts":1376940820000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"\"\"","msgtype":"m.text"},"ts":1376940833000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"oh are the speculative parsers ruining the <image xlink:href src> thing?","msgtype":"m.text"},"ts":1376941124000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://css-tricks.com/svg-fallbacks/ (\"In IE 9, you can see both images turn up in the Network timeline.\")","msgtype":"m.text"},"ts":1376941273000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wonder if it's possible to use some syntax that ie's speculative parser doesn't understand, like <image/src ...>","msgtype":"m.text"},"ts":1376941579000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":" zcorpan: IE10 & 11 have the same issue","msgtype":"m.text"},"ts":1376942771000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1376942786000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Blink-dev?","msgtype":"m.text"},"ts":1376943657000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"GPHemsley: Right-handed.  Why?","msgtype":"m.text"},"ts":1376943662000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: That wasn't asking what blink-dev was, just suggesting blink-dev with an uncertain tone.","msgtype":"m.text"},"ts":1376943675000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: man i was totally going to explain what it was :-)","msgtype":"m.text"},"ts":1376943713000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Hahaha","msgtype":"m.text"},"ts":1376943720000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1376943747000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Ooh, <image/src=foo xlink:href=bar> sounds like horrifying but wonderful hackery.","msgtype":"m.text"},"ts":1376943751000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do i need to subscribe to blink-dev to post to it? also, can i subscribe by sending an email to blink-dev+subscribe@ or some such?","msgtype":"m.text"},"ts":1376944752000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"No clue.  I was auto-migrated when it started.","msgtype":"m.text"},"ts":1376944767000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"boggle @ cancelling mouseup not stopping click from being dispatched","msgtype":"m.text"},"ts":1376946086000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zcorpan: it's a google group, so you can do the web browser thing to get there.","msgtype":"m.text"},"ts":1376946600000,"senderName":"odinho","senderId":"odinho@irc"},
{"content":{"body":"GPHemsley: Hey!  What did you want to know my handedness for?","msgtype":"m.text"},"ts":1376948641000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: is your index finger longer than your ring finger?","msgtype":"m.text"},"ts":1376948714000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"all the better to impersonate you?","msgtype":"m.text"},"ts":1376948716000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan: no","msgtype":"m.text"},"ts":1376948723000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: I've seen GPHemsley - he can't impersonate me that well.","msgtype":"m.text"},"ts":1376948764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie_: Also! Any chance you could review the scoped rules section of Cascade http://dev.w3.org/csswg/css-cascade/ and make sure it's sane to you?","msgtype":"m.text"},"ts":1376948792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"what's the rfc2119 status of this spec? should i be ignoring sentences that don't say \"is\" or \"must\", should i assume one overarching \"must fit this model\", something else?","msgtype":"m.text"},"ts":1376948872000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"2119 keywords should always mean what they say, but as usual, \"is\" implies \"must\".","msgtype":"m.text"},"ts":1376948978000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"If there's anything weird from that, let me know.","msgtype":"m.text"},"ts":1376948989000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1376949005000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in section 6, Cascading:","msgtype":"m.text"},"ts":1376949018000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TabAtkins: apparently the ratio between those fingers correlates with a number of things, including lefthandedness and gayness and respond-to-trainingness","msgtype":"m.text"},"ts":1376949020000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i don't see formal definitions for \"wins\", \"are considered to be\". first paragraph of \"Scope\" appears to not have normative weight.","msgtype":"m.text"},"ts":1376949044000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, the ratio of testosterone to estrogen in the fetal environment affects it.","msgtype":"m.text"},"ts":1376949049000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's defining sorting, so we figured \"wins\" was clear in its english definition.","msgtype":"m.text"},"ts":1376949066000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"do declarations here have an implied selector? i thought a declaration was just \"property:value[!important]\"","msgtype":"m.text"},"ts":1376949123000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the order is descending, so it's not clear to me if \"wins\" means \"has most priority\" (comes first) or \"has least priority\" (comes last)","msgtype":"m.text"},"ts":1376949166000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"if it was ascending order i would assume it meant \"had greatest value / comes last\"","msgtype":"m.text"},"ts":1376949193000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"There's only one relevant direction.  This isn't *really* sorting, it's just finding the winner for each element/property combo.  Using sorting terminology makes it clearer.","msgtype":"m.text"},"ts":1376949217000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(this is one of these things where honestly i sometimes wonder whether to bother defining it, since anyone who implements it wrong but tries to argue they're right is just being a pedant and their code won't work in such an obviously broken fashion that it's a lost cause)","msgtype":"m.text"},"ts":1376949249000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(but pedantically, i think it should be defined. your call, obviously.)","msgtype":"m.text"},"ts":1376949263000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Where are you seeing declarations having selectors?  The \"Specificity\" section mentions something like that, but is specific about \"the same specificity as the style rule it appears in\".","msgtype":"m.text"},"ts":1376949280000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, nevermind, i misread what the Scope section was saying\\","msgtype":"m.text"},"ts":1376949336000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"sorry, i'm 0lrhavign to fight my cat to read my screen her","msgtype":"m.text"},"ts":1376949343000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1376949358000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"so this is just talking about the precedence, not the matching, right?","msgtype":"m.text"},"ts":1376949424000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, matching is done by Selectors.","msgtype":"m.text"},"ts":1376949435000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"ok. lgtm.","msgtype":"m.text"},"ts":1376949439000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1376949444000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(modulo the comments above that i haven't retracted)","msgtype":"m.text"},"ts":1376949455000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(there's some glue code at the top of cascade defining how to say that a declaration attaches to an element, using selectors, but that's trivial)","msgtype":"m.text"},"ts":1376949468000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, just in case you ever need to define something in the HTML stylesheet as returning to the initial behavior, Cascade has the 'unset' keyword that's 'initial' or 'inherit', depending on the property.","msgtype":"m.text"},"ts":1376949668000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Also, the 'all' shorthand (shorthand for all properties, only takes the global values) omits 'direction' and 'unicode-bidi' from being reset by it, because authors should be using HTML for those features rather than CSS.","msgtype":"m.text"},"ts":1376949707000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"in the UA stylesheet? hopefully i should never need that, but noted. thanks.","msgtype":"m.text"},"ts":1376949715000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(They exist only for arbitrary XML, since xml:dir doesn't exist.)","msgtype":"m.text"},"ts":1376949718000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"all: unset\" ? you trying to put the reset.css people out of business?","msgtype":"m.text"},"ts":1376949757000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1376949764000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jolly good, carry on","msgtype":"m.text"},"ts":1376949775000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"afk, bbiab","msgtype":"m.text"},"ts":1376949789000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"can someone give me a brief example of a .then().then() ?","msgtype":"m.text"},"ts":1376949818000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Hixie_: Btw, the HTML spec can probably be revised to at least point at Cascade and Selectors for their parts of the definitions of scoped styles, at least until we write the Scoped Styles spec that'll be a clearinghouse for this thing.","msgtype":"m.text"},"ts":1376949928000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JonathanNeal: Easily.  Start with a promise for a filesystem entry.  When you get it, fire off an XHR based on what you found, in the first then.  The second then gets the result of the XHR.","msgtype":"m.text"},"ts":1376949994000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"How can I attach the .resolve in the first then to fire the second?","msgtype":"m.text"},"ts":1376950034000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"in the first .then","msgtype":"m.text"},"ts":1376950040000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"You just return the XHR's promise.","msgtype":"m.text"},"ts":1376950161000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"The .then() function automatically assimilates the return value of your callback.","msgtype":"m.text"},"ts":1376950172000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":".then(function () { var promise = new Promise( /* xhr stuff with a resolve */); return promise; } ?","msgtype":"m.text"},"ts":1376950466000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Followed by ).then(/* etc */)","msgtype":"m.text"},"ts":1376950481000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1376950501000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Or, more likely:","msgtype":"m.text"},"ts":1376950516000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":".then(function() { return XHRFetch(...); })","msgtype":"m.text"},"ts":1376950528000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"You shouldn't be creating promises manually unless you're doing something special that needs to be asynchronous.  Most usage will be implicit, using promises returned by the dom or generated by .then() calls.","msgtype":"m.text"},"ts":1376950558000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Can .resolve() take multiple arguments .e.g .resolve(5, 10), or should it only accept one?","msgtype":"m.text"},"ts":1376951357000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"No, it only takes one - the value the promise will resolve to.","msgtype":"m.text"},"ts":1376951367000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Nifty. I look forward to this being in a browser.","msgtype":"m.text"},"ts":1376951400000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"I think they're in nightly firefoxes, and soon to show up in chrome canary.","msgtype":"m.text"},"ts":1376951492000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"file api v2\"? sigh","msgtype":"m.text"},"ts":1376954991000,"senderName":"zewt","senderId":"zewt@irc"}
]