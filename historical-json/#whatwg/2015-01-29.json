[
{"content":{"body":"TabAtkins: would it be easier if I don't update DOM while you convert it? I can probably wait another week or so","msgtype":"m.text"},"ts":1422520935000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does anyone happen to know for which HTML elements notification of end tag popping during parsing is important?","msgtype":"m.text"},"ts":1422526653000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"<script> is obviously one of them, are there any others?","msgtype":"m.text"},"ts":1422526664000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"</object>","msgtype":"m.text"},"ts":1422526767000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"</style>","msgtype":"m.text"},"ts":1422526813000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"</video> </audio>","msgtype":"m.text"},"ts":1422526839000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"i think that's it, but impls might have more. i think blink did something for </input>","msgtype":"m.text"},"ts":1422526995000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"there's no such thing in the spec","msgtype":"m.text"},"ts":1422527064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for </input> no","msgtype":"m.text"},"ts":1422527089000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it's weird that the contract for the others isn't quite as explicit as it could be either","msgtype":"m.text"},"ts":1422527111000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"media elements tried to avoid it, but <track> screwed it over","msgtype":"m.text"},"ts":1422527225000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"How about picture?","msgtype":"m.text"},"ts":1422527263000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"link?","msgtype":"m.text"},"ts":1422527268000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1422527268000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"not per spec at least","msgtype":"m.text"},"ts":1422527288000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(picture doesn't do anything at all, it's the img that looks at its parent and previous siblings when it is inserted)","msgtype":"m.text"},"ts":1422527417000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: should I be using tinycss2 or is there something better?","msgtype":"m.text"},"ts":1422533613000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I haven’t made a tinycss3, if that’s your question :)","msgtype":"m.text"},"ts":1422534281000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: \"is this what I should be using to parse CSS in Python?\"","msgtype":"m.text"},"ts":1422534371000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1422534384000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"gsnedders: let me know if you find something that could be improved or added","msgtype":"m.text"},"ts":1422534520000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Will do. Though I scarcely need more than parse_color. Some nice way to serialise stuff would be nice, though.","msgtype":"m.text"},"ts":1422535006000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But rather out of scope, I suspect.","msgtype":"m.text"},"ts":1422535013000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: https://pythonhosted.org/tinycss2/#tinycss2.ast.Node.serialize","msgtype":"m.text"},"ts":1422535060000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: I was more thinking about serialising color3.RGBA","msgtype":"m.text"},"ts":1422535093000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"though the RGBA type is not a Node","msgtype":"m.text"},"ts":1422535099000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Exactly.","msgtype":"m.text"},"ts":1422535114000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Also one can bikeshed format endlessly :)","msgtype":"m.text"},"ts":1422535132000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"A dict of (str) keyword -> RGBA would be nice, too.","msgtype":"m.text"},"ts":1422535190000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I don’t think it needs to be more complicated than a string interpolation one-liner","msgtype":"m.text"},"ts":1422535193000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Oh, it's not that complex. The only fun thing is multiplying it so you have either a 0–255 int or percentage","msgtype":"m.text"},"ts":1422535241000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"serializing the alpha isn't obvious (see www-style)","msgtype":"m.text"},"ts":1422535244000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"that dict is tinycss2.color3._COLOR_KEYWORDS","msgtype":"m.text"},"ts":1422535256000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"https://github.com/SimonSapin/tinycss2/blob/a64d0a64057fa3b73146b8bc7759a882d53550ed/tinycss2/color3.py#L180","msgtype":"m.text"},"ts":1422535295000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Ah, cheers. I hadn't bothered digging into that yet.","msgtype":"m.text"},"ts":1422535304000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"zcorpan: is there a tl;dr of that?","msgtype":"m.text"},"ts":1422535318000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"it’s undocumented, but unlikely to change","msgtype":"m.text"},"ts":1422535332000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"This is a script I'm likely not gonna touch after today, so not really an issue.","msgtype":"m.text"},"ts":1422535361000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: how do you roundtrip rgba(1,1,1,0.5) when storing alpha in 8 bits?","msgtype":"m.text"},"ts":1422536133000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Ah, but tinycss2 stores it as a double. Then you just go for the shortest unique representation.","msgtype":"m.text"},"ts":1422536202000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: ah ok","msgtype":"m.text"},"ts":1422536257000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"when using registerElement with the \"extends\" feature, one has to use is= to instantiate? <x-stuff> cannot be used then?","msgtype":"m.text"},"ts":1422544972000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"that doesn't sound right","msgtype":"m.text"},"ts":1422545006000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I vaguely recall asking about this some time ago, receiving response approximately compatible with what I wrote","msgtype":"m.text"},"ts":1422545041000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but I am not sure","msgtype":"m.text"},"ts":1422545044000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"(and my poor english might be also the cause)","msgtype":"m.text"},"ts":1422545065000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"is= was supposed to be, if I understand, a way to work around the dumb aspects of the parser, and a way to ensure hard-to-polyfill features work well (although I'm not positive about that last one)","msgtype":"m.text"},"ts":1422545145000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: did you get any further writing up how ARIA bindings would work?","msgtype":"m.text"},"ts":1422546399000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm wondering if we can reuse that to explain title=\"\", contenteditable=\"\", etc.","msgtype":"m.text"},"ts":1422546415000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: no further than https://github.com/domenic/html-as-custom-elements/blob/master/docs/accessibility.md. I can turn the strawmen there into something more concrete maybe, if there is implementer interest.","msgtype":"m.text"},"ts":1422547866000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Why does title=\"\" need explaining?","msgtype":"m.text"},"ts":1422547870000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: e.g. you might want to overwrite the default behavior","msgtype":"m.text"},"ts":1422547905000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Mehhh just use a different attribute then","msgtype":"m.text"},"ts":1422547924000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If I were to say \"explain title\" I would mean \"add `window.showOSTooltip(\"string\", { x, y })\"","msgtype":"m.text"},"ts":1422547978000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"then I could explain title as some sort of global mutation observer + mouseover hooks","msgtype":"m.text"},"ts":1422548008000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"+ I think it impacts accessible name calculation","msgtype":"m.text"},"ts":1422548021000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"but that is already explained at the bottom of the above link","msgtype":"m.text"},"ts":1422548040000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: see https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/thread.html#msg324","msgtype":"m.text"},"ts":1422548044000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: if you want to allow <my-element someattr> we need to account for the fact that some day \"someattr\" might be a global attribute","msgtype":"m.text"},"ts":1422548078000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Sure. How is that related?","msgtype":"m.text"},"ts":1422548092000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's the same scenario, except \"title\" is already a global attribute","msgtype":"m.text"},"ts":1422548132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You can already use <div someattr>; how are we accounting for that?","msgtype":"m.text"},"ts":1422548135000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"We tell people to please use data-* or they might have a problem going forward","msgtype":"m.text"},"ts":1422548191000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I still don't understand the problem. Maybe jump to a strawman solution and tell me what new capabilities I will have when it is implemented?","msgtype":"m.text"},"ts":1422548207000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The problem is clashes and I don't really have a good solution","msgtype":"m.text"},"ts":1422548319000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Well, what new capabilities will I have if we solve the clashes solution?","msgtype":"m.text"},"ts":1422548397000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You can use any attribute name (including builtins) without future repercussions","msgtype":"m.text"},"ts":1422548473000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess I pretty much agree with Hixie's arguments in that thread that this isn't a big deal. But if you wanted to solve it maybe the custom element definition should blacklist or whitelist attributes.","msgtype":"m.text"},"ts":1422548556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: see. e.g. https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0440.html from that thread","msgtype":"m.text"},"ts":1422548563000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"E.g. registerElement(..., { ..., attrs: ['title', 'somefutureattr'] }) => 'title' and 'somefutureattr' won't get special treatment from the browser","msgtype":"m.text"},"ts":1422548588000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah maybe","msgtype":"m.text"},"ts":1422548603000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0440.html doesn't make much sense... you can use setters .osc2 for the attribute data-osc2","msgtype":"m.text"},"ts":1422548636000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1422550259000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So annoying that GitHub doesn't search through commit messages","msgtype":"m.text"},"ts":1422554045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Does anyone know what resulted in IDL adding back the [[HasInstance]] override?","msgtype":"m.text"},"ts":1422554068000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Maybe bz","msgtype":"m.text"},"ts":1422554083000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: search locally?","msgtype":"m.text"},"ts":1422554124000,"senderName":"hasather_","senderId":"hasather_@irc"},
{"content":{"body":"annevk: That would be a little easier, yeah, but not strictly necessary.  But I plan to finish up this weekend, so if you're okay with waiting a little bit, that'd be cool.","msgtype":"m.text"},"ts":1422555307000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: sure thing","msgtype":"m.text"},"ts":1422555388000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"Don't expose GC behavior\" strikes again! https://github.com/yutakahirano/fetch-with-streams/issues/15#issuecomment-72119046","msgtype":"m.text"},"ts":1422571269000,"senderName":"Domenic","senderId":"Domenic@irc"}
]