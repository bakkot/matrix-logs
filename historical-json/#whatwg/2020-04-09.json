[
{"content":{"body":"shu: I don't think that really works and if this is something Mozilla could object to I hope we do so","msgtype":"m.text"},"ts":1586434566000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Going all the way back to hosts having to monkey patch is such nonsense","msgtype":"m.text"},"ts":1586434599000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: yo","msgtype":"m.text"},"ts":1586441010000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"domfarolino: I'm working on lazy images today again :)","msgtype":"m.text"},"ts":1586441047000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: excellent. I should be around a bit","msgtype":"m.text"},"ts":1586441719000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: did you see https://github.com/whatwg/html/issues/5408#issuecomment-610033630 ? I'll look at httparchive today to test my hypothesis","msgtype":"m.text"},"ts":1586441835000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: I see that there was activity on that issue, haven’t looked at it yet but will check it out today! Sounds exciting","msgtype":"m.text"},"ts":1586442472000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: well, HTML doesn't have nullable DOMString for anything but enumerated attributes either","msgtype":"m.text"},"ts":1586443254000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so if that was the argument I'm confused","msgtype":"m.text"},"ts":1586443267000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I see, true.","msgtype":"m.text"},"ts":1586443285000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"did the async iterator api on streams ever get picked up by any implementations","msgtype":"m.text"},"ts":1586443297000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: sadly not yet","msgtype":"m.text"},"ts":1586443308000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"do you know if that's low priority or if something is preventing it","msgtype":"m.text"},"ts":1586443331000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: I think generally low priority but in Chrome the easiest path for us would be to get https://github.com/heycam/webidl/pull/808 merged and reviewed (cc edgarchen annevk) and then implement that in our Web IDL bindings system","msgtype":"m.text"},"ts":1586443456000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I remember that a few months back you pointed out a case to me where we had a Can I Use anno in the HTML spec that provided better information than the corresponding MDN anno","msgtype":"m.text"},"ts":1586443573000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://github.com/whatwg/html-build/issues/213","msgtype":"m.text"},"ts":1586443590000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1586443605000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"there we go","msgtype":"m.text"},"ts":1586443613000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1586443615000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"It would be nice to remove the caniuse stuff, for sure...","msgtype":"m.text"},"ts":1586443627000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah I can get make some patches for BCD","msgtype":"m.text"},"ts":1586443809000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the “MDN has 2 entries for Firefox and 2 for Firefox for Android” case was due to a bug that we since fixed","msgtype":"m.text"},"ts":1586443877000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Domenic: edgarchen said he would have time next week, if that falls through I'm happy to take a look","msgtype":"m.text"},"ts":1586444036000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Great","msgtype":"m.text"},"ts":1586444049000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: sorry i'm confused","msgtype":"m.text"},"ts":1586445253000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: what monkey patching?","msgtype":"m.text"},"ts":1586445256000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: if ECMAScript doesn't acknowledge it can be integrated as part of other specs, presumably the host hooks are going?","msgtype":"m.text"},"ts":1586445300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh it is acknowledging that, i think there's a miscommunication","msgtype":"m.text"},"ts":1586445360000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: in a mtg atm, will elaborate in a bit","msgtype":"m.text"},"ts":1586445366000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: https://github.com/heycam/webidl/pull/870#issuecomment-611586723","msgtype":"m.text"},"ts":1586445647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i am missing context here, unfortunately","msgtype":"m.text"},"ts":1586446106000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: ECMAScript is apparently inconsistent on how to spell builtin","msgtype":"m.text"},"ts":1586446137000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: it would be nice if it picked a single style so we could align","msgtype":"m.text"},"ts":1586446155000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: agreed. just making sure that was a separate thing from the \"doesn't acknowledge it can be integrated into other specs\" concern","msgtype":"m.text"},"ts":1586446194000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: as for that, you're talking about the host vs implementation discussion, right?","msgtype":"m.text"},"ts":1586446208000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: yeah","msgtype":"m.text"},"ts":1586446217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: in particular the conclusion of not distinguishing the NaN implementation-defined from how to allocate a Realm","msgtype":"m.text"},"ts":1586446252000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: so the editor group conclusion was to just pick a term of art, \"implementation\", to only mean \"blackbox indistinguishable\" from an observable behavior inside ecma262 point of view","msgtype":"m.text"},"ts":1586446301000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: and at the same time, address the spec layering issue directly by linking to upstream specs where appropriate","msgtype":"m.text"},"ts":1586446315000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: like for Realms, host hooks, etc, we'll actually link to the relevant HTML parts that specify the additional requirements","msgtype":"m.text"},"ts":1586446346000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the actual interface points of the spec are unchanged","msgtype":"m.text"},"ts":1586446368000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if this arrangement isn't acceptable for HTML folks, i'm happy to bring it up again next week and relitigate","msgtype":"m.text"},"ts":1586446398000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: it doesn't make sense to me to have interface points but then not distinguish the interface points from things that are actually up to implementations entirely","msgtype":"m.text"},"ts":1586446609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: that ECMAScript can be entirely self-hosted is fine and I think could be addressed by defining a basic self-hosting implementation in an appendix, that would also make it clear how various hooks are kinda broken and how agents don't have any","msgtype":"m.text"},"ts":1586446685000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: self hosted meaning the host doesn't provide any of its own behaviour for hooks?","msgtype":"m.text"},"ts":1586447339000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: self-hosted is where the hooks are all implementation-defined, is the way I think about it","msgtype":"m.text"},"ts":1586447487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"isn't that just \"normal\"","msgtype":"m.text"},"ts":1586447511000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"it's not my normal, but it could be yours","msgtype":"m.text"},"ts":1586447537000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't hooks only exist for implementation defined behaviour","msgtype":"m.text"},"ts":1586447798000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"annevk: concretely, we're planning on distinguishing the interface points by linking to the upstream specs","msgtype":"m.text"},"ts":1586448103000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: but I thought that was non-normative?","msgtype":"m.text"},"ts":1586448150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'm trying to understand if we distinguish the interface points explicitly somehow, is the host-implementation distinguish in prose still as important to you","msgtype":"m.text"},"ts":1586448152000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it kinda has to be","msgtype":"m.text"},"ts":1586448156000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: whether something is definable by an upstream spec or an implementation is certainly normative","msgtype":"m.text"},"ts":1586448189000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or do you mean whether something _is_ an interface point is non-normative?","msgtype":"m.text"},"ts":1586448198000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"both?","msgtype":"m.text"},"ts":1586448213000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I think all should be normative)","msgtype":"m.text"},"ts":1586448231000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'm kinda confused; to say something is defined elsewhere is definitely normative","msgtype":"m.text"},"ts":1586448232000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the problem right now is for the reader, they don't know if \"defined elsewhere\" means \"defined in another spec\" or \"go read the c++ of whatever implementation you're running\"","msgtype":"m.text"},"ts":1586448289000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Same, I guess I don't really see how this is going to work, an example might help","msgtype":"m.text"},"ts":1586448290000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we don't have any PRs up yet, but for example, i was imagining something like","msgtype":"m.text"},"ts":1586448481000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: in https://tc39.es/ecma262/#sec-initializehostdefinedrealm, there will be a note that links to https://html.spec.whatwg.org/#realms-settings-objects-global-objects directly, saying HTML spec has additional requirements here","msgtype":"m.text"},"ts":1586448542000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: as opposed to in something like https://tc39.es/ecma262/#sec-numeric-types-number-exponentiate, there'll be no links to upstream specs because there are no upstream specs that have additional requirements","msgtype":"m.text"},"ts":1586448672000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: but ecma262 doesn't want to preclude that possibility, in case in the future if there's some standardized embedded device host spec that does impose a particular exponentiate algorithm on all its implementations","msgtype":"m.text"},"ts":1586448744000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: any implementation might have its own usage, are they supposed to all link to their docs/spec there?","msgtype":"m.text"},"ts":1586449170000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"devsnek: if there *are* upstream specs, i recommend it","msgtype":"m.text"},"ts":1586449239000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not docs, specs","msgtype":"m.text"},"ts":1586449242000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"node doesn't have a spec but it implements some of these hooks","msgtype":"m.text"},"ts":1586449259000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"then it doesn't count","msgtype":"m.text"},"ts":1586449265000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why","msgtype":"m.text"},"ts":1586449280000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the point is to help readers understand additional requirements imposed by specifications that may have its own implementations","msgtype":"m.text"},"ts":1586449283000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"not enumerate how it's implemented","msgtype":"m.text"},"ts":1586449294000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if node has its own spec and independent implementations and interop requirements, then we should link","msgtype":"m.text"},"ts":1586449315000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the only difference between for example how promises are hooked between node and html is one has a spec and one has docs","msgtype":"m.text"},"ts":1586449344000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"no, the difference is one has at least 3 independent implementations that are expected to behave the same","msgtype":"m.text"},"ts":1586449372000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"node has 3","msgtype":"m.text"},"ts":1586449384000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"or 2","msgtype":"m.text"},"ts":1586449385000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"I think chakranode is dead now but Graal has nodejs","msgtype":"m.text"},"ts":1586449409000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there is a qualitative difference between a reference implementation and a standard in my opinion","msgtype":"m.text"},"ts":1586449516000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I don't see the difference between \"my impl of this hook has to support a browser\" and \"my impl of this hook has to support node\"","msgtype":"m.text"},"ts":1586449532000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"the difference is html has a spec that implementers consult to then implement it in their own browser","msgtype":"m.text"},"ts":1586449555000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"there is a compliance issue -- a standard exists for html","msgtype":"m.text"},"ts":1586449576000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"you're talking how mechanically it's the same","msgtype":"m.text"},"ts":1586449588000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"i mean if you say your runtime supports node","msgtype":"m.text"},"ts":1586449592000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"but it works differently","msgtype":"m.text"},"ts":1586449597000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"what is a runtime that supports node","msgtype":"m.text"},"ts":1586449616000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"chakranode, v8 node, graaljs node","msgtype":"m.text"},"ts":1586449632000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"although i don't think chakranode is maintained anymore","msgtype":"m.text"},"ts":1586449639000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"there was never a standard, that artifacts exist that may interop with a reference implementation may be a pre-step","msgtype":"m.text"},"ts":1586449663000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like maybe eventually there'll be a reason to guarantee ongoing interop and codify that in a standard and get through all the IPR hoops and all that","msgtype":"m.text"},"ts":1586449683000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so its a legal thing?","msgtype":"m.text"},"ts":1586449694000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"part of why standards exists is a legal thing, yes. for this editorial, it's mainly about expectations of where to look next for requirements","msgtype":"m.text"},"ts":1586449726000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"it's a reasonable line to draw at \"link to other specs\"","msgtype":"m.text"},"ts":1586449738000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and not \"link to c++ code\"","msgtype":"m.text"},"ts":1586449746000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"or \"link to docs\"","msgtype":"m.text"},"ts":1586449749000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"🤷🏻","msgtype":"m.text"},"ts":1586449758000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"are you saying to you standards are the same as reference implementations and docs?","msgtype":"m.text"},"ts":1586449793000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"no, but in terms of \"reasons this hook exists with these requirements\"","msgtype":"m.text"},"ts":1586449819000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"* yes in terms of \"reasons this hook exists with these requirements\"","msgtype":"m.text"},"ts":1586449834000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i disagree. they're only the same mechanically speaking","msgtype":"m.text"},"ts":1586449884000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"like someone representing html comes to tc39 and says \"hook needs to fulfill x\" and someone from node comes to tc39 and says \"hook needs to fulfill y\"","msgtype":"m.text"},"ts":1586449932000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"why do we list x but not y in the spec","msgtype":"m.text"},"ts":1586449951000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"also it occurs to me this is probably a bad channel for this","msgtype":"m.text"},"ts":1586449962000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"i feel like i'm repeating myself: because one has a standard and realistic expectations of independent implementations having interop, and the other has a reference implementation only","msgtype":"m.text"},"ts":1586450094000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"so in terms of someone implementing their js engine, they should care less about whether their exposing of the hook matches node's needs?","msgtype":"m.text"},"ts":1586450282000,"senderName":"devsnek","senderId":"devsnek@irc"},
{"content":{"body":"shu: aren't you precluding it by not having a host hook?","msgtype":"m.text"},"ts":1586452181000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: we're not removing host hooks","msgtype":"m.text"},"ts":1586452201000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: are you adding host hooks for everything that's implementation-defined?","msgtype":"m.text"},"ts":1586452224000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, i see what you're saying. not right now, but not having a host hook today also doesn't preclude","msgtype":"m.text"},"ts":1586452287000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: if an upstream spec user materializes we can technically add host hooks to anywhere that says \"implementation-defined\" without normative differences, really","msgtype":"m.text"},"ts":1586452318000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: right, so then it makes sense to me to acknowledge them directly","msgtype":"m.text"},"ts":1586452361000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: concrete suggestions?","msgtype":"m.text"},"ts":1586452416000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: have host hooks, acknowledge hosts, have the default implementation of each host hook be implementation-defined (this also helps HTML if you add hooks HTML doesn't want to override); I don't really see a need to reference HTML from the spec, but it might be nice","msgtype":"m.text"},"ts":1586452524000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: this would also allow you to enforce invariants on hosts, though I guess that can also be done through asserts and might be better","msgtype":"m.text"},"ts":1586452615000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that is basically the current plan, though we're not adding new host hooks","msgtype":"m.text"},"ts":1586454634000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: the difference is that the *word* that was settled on was \"implementation\". so the pushback i'm hearing now is that there is still very strong preference for the single word to be \"host\" and not \"implementation\"","msgtype":"m.text"},"ts":1586454709000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"what do you mean by acknowledge hosts?","msgtype":"m.text"},"ts":1586454743000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"If you 1:1 implementation and host, HTML is the implementation, what does implementation-defined for https://tc39.es/ecma262/#sec-numeric-types-number-exponentiate mean?","msgtype":"m.text"},"ts":1586454825000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it means HTML has the right (but not the obligation) to impose additional requirements","msgtype":"m.text"},"ts":1586454868000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: if it doesn't, that freedom passes through to HTML's implementations","msgtype":"m.text"},"ts":1586454881000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: literally it says that it's HTML-defined, but HTML doesn't want to define it","msgtype":"m.text"},"ts":1586454890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: you can't say implementation is both the host and the implementation, imo","msgtype":"m.text"},"ts":1586454907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it literally just means it's defined somewhere else","msgtype":"m.text"},"ts":1586454955000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: i'm having trouble understanding why the \"right but not the obligation\" part is confusing","msgtype":"m.text"},"ts":1586455001000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: there is no right either since there's no explicit hook","msgtype":"m.text"},"ts":1586455016000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: (nor should there be)","msgtype":"m.text"},"ts":1586455029000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's the basic disagreement","msgtype":"m.text"},"ts":1586455081000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: i don't think anybody in ecma262 sees the presence of hooks as conferring the right","msgtype":"m.text"},"ts":1586455092000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"annevk: well, anybody in the editor group","msgtype":"m.text"},"ts":1586455115000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"How would you do it without hook?","msgtype":"m.text"},"ts":1586455124000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"let me clarify","msgtype":"m.text"},"ts":1586455144000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"by \"the right\" i mean ecma262 already allows for upstream hosts or implementations to do its own thing there","msgtype":"m.text"},"ts":1586455207000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"host hooks are one way to provide easy hooking points for host-defined behavior","msgtype":"m.text"},"ts":1586455221000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"if HTML said, use the following algorithm for ecma262's Number::exponentiate, so long as its it follows the invariants laid out, HTML has the right to just provide its own algorithm, host hook or not","msgtype":"m.text"},"ts":1586455257000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I'm not a fan of that","msgtype":"m.text"},"ts":1586455296000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sure, but the point is host hooks are mechanics","msgtype":"m.text"},"ts":1586455311000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"That's what I would call monkey patching and an extremely bad practice when it comes to specifications","msgtype":"m.text"},"ts":1586455320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay, i see","msgtype":"m.text"},"ts":1586455328000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"why is it extremely bad practice in your opinion?","msgtype":"m.text"},"ts":1586455363000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"But I also think it's plain confusing that implementation sometimes means host and sometimes means implementation","msgtype":"m.text"},"ts":1586455373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: it's not clear to implementers from looking at the algorithm how to implement it","msgtype":"m.text"},"ts":1586455404000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: I guess if you're familiar with the weird way some in TC39 use implementation-defined, you might be alerted to the fact, but otherwise","msgtype":"m.text"},"ts":1586455423000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"shu: it can also lead to hard to iron out inconsistencies between hosts that force multiple implementations of the algorithm or even conflicts within a single host if it's large enough (e.g., if some non-HTML spec tried to take ownership of some things)","msgtype":"m.text"},"ts":1586455540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i'm very sympathetic to \"unclear to implementers\", which is how we ended up on \"link to the upstream spec (HTML) directly\"","msgtype":"m.text"},"ts":1586455561000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the host-vs-implementation distinction doesn't exist normatively in ecma262, and defining it into existence is very hard","msgtype":"m.text"},"ts":1586455614000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"It's also not the kind of abstraction you'd offer in code I think (supply your own algorithm that matches this one but fills in a couple of details differently)","msgtype":"m.text"},"ts":1586455623000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the distinction we're talking about for exponentiation vs, say, module loading, just doesn't exist in ecma262 currently","msgtype":"m.text"},"ts":1586455695000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"In practice I think it does","msgtype":"m.text"},"ts":1586455717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the way it's read by implementers I think it does","msgtype":"m.text"},"ts":1586455729000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Certainly in the way I read it, it does, but I don't think it offers enough hooks to implement a host (e.g., no way to set up an agent cluster and such)","msgtype":"m.text"},"ts":1586455771000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in practice it definitely does, but to define the difference normatively in ecma262 isn't going to get consensus","msgtype":"m.text"},"ts":1586455817000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: it even starts with talking about a host environment","msgtype":"m.text"},"ts":1586455830000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1586455837000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: and there was this whole host objects thing, etc.","msgtype":"m.text"},"ts":1586455839000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i understand the desire to disallow monkeypatching normatively","msgtype":"m.text"},"ts":1586455859000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"but there isn't consensus for that","msgtype":"m.text"},"ts":1586455874000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Is there consensus to replace every instance of host with implementation though?","msgtype":"m.text"},"ts":1586455887000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Again, I'd hope Mozilla objects if possible","msgtype":"m.text"},"ts":1586455899000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"we're replacing host-defined with implementation-defined","msgtype":"m.text"},"ts":1586455933000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"How are  the editors explaining \"Jobs are scheduled for execution by ECMAScript host environments.\"","msgtype":"m.text"},"ts":1586455936000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"not touching the word host otherwise","msgtype":"m.text"},"ts":1586455939000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"I gotta go relax for a bit as it's late here. I'm still rather confused about this direction, but I guess we'll see","msgtype":"m.text"},"ts":1586456026000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't know how to satisfy the stakeholders tbh, without actually precluding the right for hosts but not implementations to override e.g. exponentiate","msgtype":"m.text"},"ts":1586456056000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"TabAtkins: Is there any way to disable the Bikeshed thing where it will append \"of type X\" when I define things in a <dt>?","msgtype":"m.text"},"ts":1586462024000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I don't think so, lemme check...","msgtype":"m.text"},"ts":1586466642000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]