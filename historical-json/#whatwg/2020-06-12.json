[
{"content":{"body":"ondras: I think the accepted way to do that is to check for side effects. If the script you're attempting to check defines an object (lets say foo) and you don't know if that file has loaded yet, check to see if foo exists on the page. if it does then the script is probably done executing, or at least has yielded control...","msgtype":"m.text"},"ts":1591920272000,"senderName":"nbenner","senderId":"nbenner@irc"},
{"content":{"body":"nbenner: ok thanks","msgtype":"m.text"},"ts":1591946844000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"What's an easy way to call fetch() and have the promise resolve to a response whose type is \"error\" (things like 404 / CORS failures don't give me what I want)","msgtype":"m.text"},"ts":1591973892000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: fetch(\"bad-url:bad\")","msgtype":"m.text"},"ts":1591975339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: That seems to just reject the promise though, instead of resolve with an error response right?","msgtype":"m.text"},"ts":1591975408000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"domfarolino: network errors always reject the promise","msgtype":"m.text"},"ts":1591975419000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see, that's what I wasn't sure about","msgtype":"m.text"},"ts":1591975427000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Gotcha","msgtype":"m.text"},"ts":1591975431000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: OK so it's impossible to assert (request.type == error) in a fetch() then handler?","msgtype":"m.text"},"ts":1591975440000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1591975447000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cool ty","msgtype":"m.text"},"ts":1591975451000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I guess type === error is only possible for manually-constructed responses","msgtype":"m.text"},"ts":1591975489000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ah, yeah \"If response is a network error, then reject p with a TypeError and terminate these substeps.\"","msgtype":"m.text"},"ts":1591975490000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Domenic: right","msgtype":"m.text"},"ts":1591975496000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Response.error() for example","msgtype":"m.text"},"ts":1591975516000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Anyone here familiar with Cross-Origin Opener Policy? I'm having some trouble understanding a document from a Chromium dev https://docs.google.com/document/d/1zWqwI8PFrezwQpBSejIMUfdtsIYl9-h8epasdrDXVIM","msgtype":"m.text"},"ts":1591978602000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"annevk: double-check me... shared/service worker agents are not owned by anything in the spec? They're just allocated and kind of float freely?","msgtype":"m.text"},"ts":1591979958000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"s/agents/agent clusters","msgtype":"m.text"},"ts":1591979967000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, technically the user agent needs some kind of lookup table","msgtype":"m.text"},"ts":1591982696000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: but they are directly owned by the user agent","msgtype":"m.text"},"ts":1591982717000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"although their lifetime is impacted by \"related\" browsing sessions closing","msgtype":"m.text"},"ts":1591982753000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or documents/window agents I guess, not so much browsing sessions","msgtype":"m.text"},"ts":1591982774000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK cool, that's about what I thought. I guess nailing that down would be a bit of a pain so leaving things as-is is OK.","msgtype":"m.text"},"ts":1591983974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: we have a lot of things today that'll make it easier to do once there's a stronger need","msgtype":"m.text"},"ts":1591984032000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think the more problematic thing with workers is that we establish an environment before we fetch","msgtype":"m.text"},"ts":1591984093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: I'm a bit confused about the intention for SharedArrayBuffer and COOP/COEP","msgtype":"m.text"},"ts":1591994186000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"I used to think SAB was to be exposed always but only allowed for transfer in crossOriginIsolated contexts","msgtype":"m.text"},"ts":1591994248000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Like here https://github.com/whatwg/html/pull/4734","msgtype":"m.text"},"ts":1591994254000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"But I've recently read things that suggest that SAB will simply not be available outside of crossOriginIsolated contexts","msgtype":"m.text"},"ts":1591994310000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"like here https://web.dev/why-coop-coep/","msgtype":"m.text"},"ts":1591994327000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"That second source is more recent and matches Firefox's current behavior","msgtype":"m.text"},"ts":1591994563000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"But work is proceeding on the first","msgtype":"m.text"},"ts":1591994614000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Ah","msgtype":"m.text"},"ts":1591994736000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"\"SharedArrayBuffer objects are in principle always available, but unfortunately the constructor on the global object is hidden, unless the two headers mentioned above are set, for compatibility with web content. There is hope that this restriction can be removed in the future. WebAssembly.Memory can still be used to get an instance.\"","msgtype":"m.text"},"ts":1591994748000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"via https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes","msgtype":"m.text"},"ts":1591994772000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"So I guess the web.dev post is technically inaccurate, but explaining the distinction is unlikely to help anyone","msgtype":"m.text"},"ts":1591994931000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Right, it kind of depends on whether you're talking about SharedArrayBuffer, or \"shared array buffers\"","msgtype":"m.text"},"ts":1591995474000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ah, yeah, that's subtle","msgtype":"m.text"},"ts":1591995692000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"This one uses the term \"threaded SharedArrayBuffer\" https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit#","msgtype":"m.text"},"ts":1591995775000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"\"SharedArrayBuffer sharing\" would likely raise some eyebrows","msgtype":"m.text"},"ts":1591995872000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"},
{"content":{"body":"Stage 0 proposal: \"Rename SharedArrayBuffer to PotentiallyShareableArrayBuffer\"","msgtype":"m.text"},"ts":1591996047000,"senderName":"jugglinmike","senderId":"jugglinmike@irc"}
]