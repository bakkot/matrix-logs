[
{"content":{"body":"with the current spec, only the last simple selector in the sequence needs to match an element within context, whereas all others can match any ancestors or previous siblings (depending on the combinators)","msgtype":"m.text"},"ts":1209772800000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"JohnResig: Just in case it's of any interest: Of those 130K pages, http://philip.html5.org/misc/jquery-pages.txt lists the ones matching /<script[^>]*jquery/","msgtype":"m.text"},"ts":1209772801000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: neat - thanks!","msgtype":"m.text"},"ts":1209772802000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"\":scope>*\" isn't a valid use case for this, that's what the element traversal stuff is for","msgtype":"m.text"},"ts":1209772803000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: but :scope > div.foo.bar[baz] is totally valid here","msgtype":"m.text"},"ts":1209772860000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"yeah, what's the page that does that?","msgtype":"m.text"},"ts":1209772861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"most seem to just do a single simple selector chain","msgtype":"m.text"},"ts":1209772920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or whatever the term is these days","msgtype":"m.text"},"ts":1209772921000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Philip`, I only used * in :scope>* because I was referring to the general case","msgtype":"m.text"},"ts":1209772922000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"no combinators, i mean","msgtype":"m.text"},"ts":1209772923000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Lachy: s/Philip`/Hixie/ ?","msgtype":"m.text"},"ts":1209772924000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1209772925000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"here's one with at least two: jQuery(element.form || document).find('[@name=' + element.name + ']:checked')","msgtype":"m.text"},"ts":1209772926000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"that would work fine","msgtype":"m.text"},"ts":1209772980000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"there's no combinator there","msgtype":"m.text"},"ts":1209772981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie, there are a couple that I have seen using .find(\">x\")","msgtype":"m.text"},"ts":1209772982000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: interesting syntax","msgtype":"m.text"},"ts":1209772983000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"yeah, it's the equivalent to \":scope>x\"","msgtype":"m.text"},"ts":1209772984000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1209773040000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and it's the one I'm not sure how to solve without :scope","msgtype":"m.text"},"ts":1209773041000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"seems like most of them don't do this","msgtype":"m.text"},"ts":1209773042000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which would suggest it's not a high prioprity","msgtype":"m.text"},"ts":1209773043000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":" jQuery(\"> tbody:first/tr\",o).find(\"> td:eq(\" + COLUMN_LAST_INDEX + \")\")","msgtype":"m.text"},"ts":1209773044000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"priority","msgtype":"m.text"},"ts":1209773045000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: they don't do it because it's slow - the point of this whole new API is to make it fast","msgtype":"m.text"},"ts":1209773046000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"if we're not striving to make things faster - that pure JS can't make faster - then there's really no point","msgtype":"m.text"},"ts":1209773100000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"this data suggests many people use the api, just not with combinators","msgtype":"m.text"},"ts":1209773101000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i've no idea what \"tbody:first/tr\" is supposed to match","msgtype":"m.text"},"ts":1209773102000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"nor do I.","msgtype":"m.text"},"ts":1209773103000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but it certainly won't work with the api anyway, so that again isn't an argument in favour of this","msgtype":"m.text"},"ts":1209773104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i have to go to another building, but i'll be on irc again briefly","msgtype":"m.text"},"ts":1209773105000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"s/briefly/momentarily/","msgtype":"m.text"},"ts":1209773160000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"sure it is - we support some simple XPath expressions - we map them to CSS before parsing","msgtype":"m.text"},"ts":1209773161000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"ok, so it tbody/tr the same as \"tbody tr\" or \"tbody>tr\"?","msgtype":"m.text"},"ts":1209773162000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"\"tbody>tr\"","msgtype":"m.text"},"ts":1209773163000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"How would you do :eq with the Selectors API?","msgtype":"m.text"},"ts":1209773220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: we wouldn't - we'd have to fall back - which is why I've been arguing for good error reporting so that we can actually fallback gracefully","msgtype":"m.text"},"ts":1209773280000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"Is this almost like Array.forEach(o.querySelector('tbody').querySelectorAll('tr'), function (tr) { var td = tr.querySelectorAll('td')[COLUMN_LAST_INDEX]; foo(td) }) ?","msgtype":"m.text"},"ts":1209773460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"JohnResig, without :scope, how would you propose the API work to find child nodes of the context node in the following scenario?","msgtype":"m.text"},"ts":1209773461000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"(Oh, except that won't work with nested tables)","msgtype":"m.text"},"ts":1209773462000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: roughly, yeah - it would seem!","msgtype":"m.text"},"ts":1209773520000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"<div id=foo>A  <div>B  <div>C</div> B</div> A</div>","msgtype":"m.text"},"ts":1209773521000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: without scope, just look for the front-leading >. I'm not really sure what the purpose of introducing :scope is if there's only one combinator that it'll work on","msgtype":"m.text"},"ts":1209773580000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"with foo.querySelectorAll(\"...\"); how would you find all child divs (the ones labelled B)","msgtype":"m.text"},"ts":1209773581000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"After the querySelector('tbody'), it wants some way to find all the <tr>s that are direct children of that particular <tbody> (and not e.g. children of a tbody which is a descendant of that first tbody)","msgtype":"m.text"},"ts":1209773582000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"because \">div\" is an invalid selector","msgtype":"m.text"},"ts":1209773583000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: unless it's defined to be valid","msgtype":"m.text"},"ts":1209773584000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"and allowing that would require redefining the selector syntax","msgtype":"m.text"},"ts":1209773585000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: new syntax is already being defined with :scope - it's not a leap of imagination","msgtype":"m.text"},"ts":1209773640000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"the difference is :scope doesn't require chaning the grammar","msgtype":"m.text"},"ts":1209773641000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it's just another pseudo class","msgtype":"m.text"},"ts":1209773642000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"FWIW selectors like \">div\" strike me as a bad idea","msgtype":"m.text"},"ts":1209773700000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Lachy, JohnResig: since you're both here...","msgtype":"m.text"},"ts":1209773701000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I was going to suggest on the list that there could be queryScopedSelector()","msgtype":"m.text"},"ts":1209773702000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Lachy: but yeah, with the current spec, it's impossible to reliably find the <div>B one","msgtype":"m.text"},"ts":1209773703000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"which implicitly prepends \":scope \"","msgtype":"m.text"},"ts":1209773704000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and that might be what JS libraries want to use","msgtype":"m.text"},"ts":1209773760000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: I'd contend that it's what users want to use","msgtype":"m.text"},"ts":1209773761000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"at least that would clarify that it is using a different notion of a \"scoped selector\" instead of standard slector grammar and semantics","msgtype":"m.text"},"ts":1209773762000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"JohnResig: is that feedback in favor of or against my suggestion?","msgtype":"m.text"},"ts":1209773763000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej: I think it's fine if it's implied - I just think that querySelectorAll should do that to begin with.","msgtype":"m.text"},"ts":1209773820000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"othermaciej, are you suggesting that .queryScopedSelector(\">div\") implicitly becomes \":scope >div\"?","msgtype":"m.text"},"ts":1209773821000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Does HTML5's <style scoped> have exactly the same issues?","msgtype":"m.text"},"ts":1209773880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Lachy: yes","msgtype":"m.text"},"ts":1209773881000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Philip`, yeah, introducing :scope addresses use cases for that too","msgtype":"m.text"},"ts":1209773882000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"othermaciej: I'm also assuming that there'd be .queryScopedSelectorAll and .queryScopedSelector?","msgtype":"m.text"},"ts":1209773883000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"Lachy: similarly, queryScopedSelector(\"div\") becomes queryScopedSelector(\":scope div\")","msgtype":"m.text"},"ts":1209773884000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"Lachy: sorry, just querySelector the second time","msgtype":"m.text"},"ts":1209773940000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"JohnResig: presumably, yes","msgtype":"m.text"},"ts":1209773941000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"JohnResig: the de facto syntax for selectors supported by JS library query APIs does not match standard selectors, and I am not sure changing the core selector syntax is the way to go, but I think this could be a plausible workaround that gives a simple well-defined notion of a \"scoped selector\"","msgtype":"m.text"},"ts":1209774000000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"with grammar and semantics that better match JS libraries","msgtype":"m.text"},"ts":1209774001000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"of course there is still the fact that JS libraries support some extensions that CSS3 Selectors expressly forbids, which maybe should be handled by extending Selectors (things like \":not(a > b)\")","msgtype":"m.text"},"ts":1209774060000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I'm not sure what all the differences are","msgtype":"m.text"},"ts":1209774061000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I guess there's one advantage to introducing a separate method is that is allows libraries to test for it like: if (element.queryScopedSelector) {... }","msgtype":"m.text"},"ts":1209774180000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I'm just completely confused as to why this wasn't done in the first place - and why it's not the default. Alternatively, I'd like to propose that querySelectorAll(\"selector\") be equivalent to .queryGlobalSelector(\":scope selector\") (changing the primary querySelectorAll method to actually match precedence)","msgtype":"m.text"},"ts":1209774181000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"JohnResig: we had lots of input from UA implementors and CSS experts, but not so much from JS library authors or AJAX developers, when drafting the spec","msgtype":"m.text"},"ts":1209774240000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":":-|","msgtype":"m.text"},"ts":1209774300000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"so I think everyone assumed that normal selector syntax and semantics were what is desired","msgtype":"m.text"},"ts":1209774301000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I certainly assumed that","msgtype":"m.text"},"ts":1209774302000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"while I was aware of the problem, I wasn't aware it was such a priority","msgtype":"m.text"},"ts":1209774303000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"and assumed that it could be safely left to v2 and solved with :scope","msgtype":"m.text"},"ts":1209774304000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"in fact queryScopedSelector could even be defined without Selectors defining \":scope\" first, because it could say it acts as if an unspecified simple selector uniquely matching the scope element is prepended","msgtype":"m.text"},"ts":1209774420000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(I guess to each selector in a group of selectors, not just stringwise)","msgtype":"m.text"},"ts":1209774480000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"(since you want comma to work as expected)","msgtype":"m.text"},"ts":1209774481000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"so UAs could use an arbitrary mechanism to achieve that, and \":scope\" can be added to the CSS Selectors spec later","msgtype":"m.text"},"ts":1209774482000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, I'll think about it.","msgtype":"m.text"},"ts":1209774600000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"othermaciej: it seems like it would be better to not overload that method and, instead, provide a primary filtering method .filterSelector(\"div.class\")","msgtype":"m.text"},"ts":1209774601000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"othermaciej: of course, that's more useful if the method also exists on DOMNodeLists","msgtype":"m.text"},"ts":1209774602000,"senderName":"JohnResig","senderId":"JohnResig@irc"},
{"content":{"body":"I'm not sure how .filterSelector would work on anything but NodeLists","msgtype":"m.text"},"ts":1209774660000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"for NodeLists you obviously can't support scoped selectors","msgtype":"m.text"},"ts":1209774661000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"but then, as I wrote in the email, I really need to see the use cases for it","msgtype":"m.text"},"ts":1209774662000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I'm not sure what filterSelector does","msgtype":"m.text"},"ts":1209774720000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"indeed. .filterSelector() would have to use the global context","msgtype":"m.text"},"ts":1209774721000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"othermaciej, it takes a NodeList and evaluates the selector against the element in the context of the document","msgtype":"m.text"},"ts":1209774722000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"and returns all matching elements","msgtype":"m.text"},"ts":1209774780000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"that's sorta the same thing as querySelectorAll, as currently defined","msgtype":"m.text"},"ts":1209774781000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"isn't it?","msgtype":"m.text"},"ts":1209774782000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"it's not quite, but the reason I need use cases for it is because I can't see what it can solve that querySelectorAll can't","msgtype":"m.text"},"ts":1209774840000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"is it that it can only match immediate children?","msgtype":"m.text"},"ts":1209774900000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I guess thinking about it, querySelectorAll on a NodeList seems kind of weird","msgtype":"m.text"},"ts":1209774960000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"when would you want to do selector matching on a list of DOM subtrees?","msgtype":"m.text"},"ts":1209774961000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, so the advantages for queryScopedSelector/queryScopedSelectorAll() are: 1. Doesn't break the existing API, 2. Can be tested for by scripts, 3. Doesn't depend upon :scope being defined immediately","msgtype":"m.text"},"ts":1209774962000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"seems more likely you'd want to do it on a list of actual nodes","msgtype":"m.text"},"ts":1209774963000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"othermaciej, I think your interpretation of how it would work is different from mine","msgtype":"m.text"},"ts":1209775020000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"or I'm not sure what you meant by \"selector matching on a list of DOM subtrees?\"","msgtype":"m.text"},"ts":1209775080000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: I am not sure how you see it working either","msgtype":"m.text"},"ts":1209775081000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, consider this:","msgtype":"m.text"},"ts":1209775082000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I am drawing conclusions based on you saying filterSelector and querySelector all would be different","msgtype":"m.text"},"ts":1209775083000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"here is what I assumed the difference is:","msgtype":"m.text"},"ts":1209775084000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"var list = document.getElementsByTagName(\"div\");","msgtype":"m.text"},"ts":1209775085000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"filterSelector - can only match items actually in the node list, not their descendants","msgtype":"m.text"},"ts":1209775086000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"var list2 = list.filterSelector(\".foo\");","msgtype":"m.text"},"ts":1209775140000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"querySelectorAll - can match items in the node list, or any of their descendants","msgtype":"m.text"},"ts":1209775141000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"list 2 contains all the divs from the first list that had a class of foo","msgtype":"m.text"},"ts":1209775142000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"basically, the result is the same as querySelectorAll(\"div.foo\")","msgtype":"m.text"},"ts":1209775143000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"that seems to match my interpretation of filterSelector","msgtype":"m.text"},"ts":1209775144000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"which is useless","msgtype":"m.text"},"ts":1209775145000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ok, good","msgtype":"m.text"},"ts":1209775200000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Is my understanding of how NodeList.querySelectorAll would differ correct?","msgtype":"m.text"},"ts":1209775201000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I can see how you could do things with filterSelector + querySelectorAll that can't be done with just QSA","msgtype":"m.text"},"ts":1209775260000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I assumed they would were just different possible names for the same thing.","msgtype":"m.text"},"ts":1209775261000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"for instance:","msgtype":"m.text"},"ts":1209775262000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I didn't think there were 2 separate suggestions","msgtype":"m.text"},"ts":1209775263000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"var list = document.querySelectorAll(\"div *\")","msgtype":"m.text"},"ts":1209775320000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"var list2 = list.filterSelector(\"section *\")","msgtype":"m.text"},"ts":1209775321000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"list 2 is all elements contained in both a div and a section, in either order","msgtype":"m.text"},"ts":1209775322000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"no, I guess I am wrong","msgtype":"m.text"},"ts":1209775323000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"you could instead query for \"div section *, section div *\"","msgtype":"m.text"},"ts":1209775380000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"oh yeah, that's right. It's sort of like the :matches() proposal in Selectors","msgtype":"m.text"},"ts":1209775381000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"but with many independent conditions you could get a huge explosion of selector length","msgtype":"m.text"},"ts":1209775382000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"and maybe some trickier case is not trivially convertible to a group of two selectors","msgtype":"m.text"},"ts":1209775383000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"yeah, I'm sure there are some rather complicated cases that it could simplify. But are there any such use cases that people are actually attempting?","msgtype":"m.text"},"ts":1209775440000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"you might also want to do foo.childNodes.filterSelector(), but queryScopedSelectorAll could do that","msgtype":"m.text"},"ts":1209775441000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I dunno","msgtype":"m.text"},"ts":1209775442000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I am just trying to understand it","msgtype":"m.text"},"ts":1209775443000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"I think that would mean foo.queryScopedSelectorAll(\"div\").filterSelector(\"section *\"); would be equivalent to foo.querySelector(\"section div\");","msgtype":"m.text"},"ts":1209776040000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: I think that's right","msgtype":"m.text"},"ts":1209776100000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"queryScopedSelector() would need to prepend \":scope \" (or equivalent magical selector) to evey sequence of simple selectors, so \"strong, em\" became \":scope strong, :scope em\"","msgtype":"m.text"},"ts":1209776280000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1209776340000,"senderName":"othermaciej","senderId":"othermaciej@irc"},
{"content":{"body":"ok, I've got a lot too think about and a lot more to do. I have to find out if IE, Mozilla and Opera would be willing and able to implement queryScopedSelector, then define it, and still evaluate whether or not it really is the best solution to go for","msgtype":"m.text"},"ts":1209776520000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Hixie: seen this: http://xiphmont.livejournal.com/31209.html","msgtype":"m.text"},"ts":1209777300000,"senderName":"hasather","senderId":"hasather@irc"},
{"content":{"body":"queryScopedSelector() won't work as easily as I initially thought. :-(","msgtype":"m.text"},"ts":1209778560000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Consider this:","msgtype":"m.text"},"ts":1209778561000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"foo.queryScopedSelector(\">strong, >em\");","msgtype":"m.text"},"ts":1209778620000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"I would basically need to define a special grammar for selectors used in this method in a way that is compatible with normal selectors, and doesn't break forwards compatibility","msgtype":"m.text"},"ts":1209778680000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"it's basically a complete nightmare","msgtype":"m.text"},"ts":1209778681000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"hsivonen: that doesn't look like the kind of stuff i'd write","msgtype":"m.text"},"ts":1209778860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i don't even known how to spell antithesis","msgtype":"m.text"},"ts":1209778861000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I remember reading something about that months ago.","msgtype":"m.text"},"ts":1209778980000,"senderName":"kevogod","senderId":"kevogod@irc"},
{"content":{"body":"http://64.233.167.104/search?q=cache:VvbdPyHxdxAJ:ventnorsblog.blogspot.com/2008/04/rated-p-for-proprietary.html%3FshowComment%3D1209354480000+The+distinction+between+the+video+format+war+and+the+browser+war&hl=en&ct=clnk&cd=2&gl=us&client=firefox-a","msgtype":"m.text"},"ts":1209779040000,"senderName":"kevogod","senderId":"kevogod@irc"},
{"content":{"body":"yeah i just posted a link to that","msgtype":"m.text"},"ts":1209779041000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, sorry.","msgtype":"m.text"},"ts":1209779042000,"senderName":"kevogod","senderId":"kevogod@irc"},
{"content":{"body":"I am curious how \"Michael\" became Hixie.","msgtype":"m.text"},"ts":1209779100000,"senderName":"kevogod","senderId":"kevogod@irc"},
{"content":{"body":"Hixie, I was wondering why the article implied you no longer had a blog.","msgtype":"m.text"},"ts":1209779160000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"kevogod: The keys are like right next to each other","msgtype":"m.text"},"ts":1209779880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`, True, I can see how the mistake was made.","msgtype":"m.text"},"ts":1209779881000,"senderName":"kevogod","senderId":"kevogod@irc"},
{"content":{"body":"positioned elements (other than static) have a higher stacking order than floated non-positioned elements (z-index not explicitly set) , dont they?","msgtype":"m.text"},"ts":1209792480000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1209794820000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"have you run into any IE specific issues where IE does not honor the rightful stacking order, roc?","msgtype":"m.text"},"ts":1209795180000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"IE treats z-index:auto as z-index:0 IIRC","msgtype":"m.text"},"ts":1209795181000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"not sure about any other stacking order bugs","msgtype":"m.text"},"ts":1209795182000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"I hardly ever use IE :-)","msgtype":"m.text"},"ts":1209795240000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"no self proclaimed web dev would ever personally use it.. but clients..","msgtype":"m.text"},"ts":1209795241000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"I work on Firefox. I don't have clients :-)","msgtype":"m.text"},"ts":1209795242000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1209795300000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"I wish we could magically make CRLF disappear","msgtype":"m.text"},"ts":1209806040000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what's CRLF? ","msgtype":"m.text"},"ts":1209806520000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"\\r\\n ?","msgtype":"m.text"},"ts":1209806521000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"carriage return line feed?","msgtype":"m.text"},"ts":1209806580000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"Facedown: yes. It's evil.","msgtype":"m.text"},"ts":1209807000000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Sigh. Nice of Daniel to post such a well argued, non-inflammatory addition to the alt thread","msgtype":"m.text"},"ts":1209809520000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"oh, yeah, cause arguments like \"making alt optional in HTML 5 is ridiculous\" is exactly the kind of short and to the point arguments we need.","msgtype":"m.text"},"ts":1209810720000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"ponders the recursive nature of making non-conformance conforming","msgtype":"m.emote"},"ts":1209811620000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"hmm. perhaps I should just do a preflight on each buffer to get rid of CRLF instead of making the rest of the tokenizer really complex in order to avoid the preflight","msgtype":"m.text"},"ts":1209813300000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I don't usually admit to hating things, so I seriously dislike CRLF","msgtype":"m.text"},"ts":1209813360000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: IIRC we strip out CRLF when we buffer the data","msgtype":"m.text"},"ts":1209814200000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"(and have a flag to indicate trailing CR in case CRLF is split over two buffers)","msgtype":"m.text"},"ts":1209814260000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"So Nvu/KomoZer adds alt=\"\" even when you specify \"Don't add alternate text\"","msgtype":"m.text"},"ts":1209840000000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"And adds alt=\"image filename\" if you drag and drop an image file in","msgtype":"m.text"},"ts":1209840120000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"s/KomoZer/KompoZer/","msgtype":"m.text"},"ts":1209840121000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Which clearly sucks","msgtype":"m.text"},"ts":1209840122000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Maybe it'd be vaguely informative to correlate alt usage with <meta name=generator> values","msgtype":"m.text"},"ts":1209841080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"what's the best ftp client anyone here has ever used? (on windows preferably)? filezilla 3 is a memory hog like firefox.. slow as shit ","msgtype":"m.text"},"ts":1209842820000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"I use Krusader (on Linux)","msgtype":"m.text"},"ts":1209843120000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"i wonder why the alt=\"\" people aren't screaming about <object></object>","msgtype":"m.text"},"ts":1209847860000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is even worse since it doesn't distinguish between unknown important image and decorative image","msgtype":"m.text"},"ts":1209847920000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Probably because nobody uses <object> decoratively","msgtype":"m.text"},"ts":1209847921000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Probably because nobody uses <object> for images","msgtype":"m.text"},"ts":1209847980000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"and theoretical problems aren't worth worrying about","msgtype":"m.text"},"ts":1209847981000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"well then shouldn't they be arguing that <object> must never be empty?","msgtype":"m.text"},"ts":1209847982000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"what i find interesting is that the longer this argument goes on, the more people are coming out and defending what the spec says","msgtype":"m.text"},"ts":1209847983000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham_: I use <object> for images, at least twice in my life :-)","msgtype":"m.text"},"ts":1209847984000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"although actually one of those was purely decorative","msgtype":"m.text"},"ts":1209847985000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"OK \"nobody\" for large values of \"nobody\"","msgtype":"m.text"},"ts":1209848040000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Hixie: That's because people flock to authority, which the spec provides, rather than considering the technical arguments ;-)","msgtype":"m.text"},"ts":1209848100000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I used <object> for an image once, and I put an <img> inside it as fallback :-)","msgtype":"m.text"},"ts":1209848160000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: And an alt on the image as fallback?","msgtype":"m.text"},"ts":1209848161000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1209848162000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Philip`: if anyone is being an authority here it's the self-proclaimed accessibility experts who announce their opinions as unquestionable","msgtype":"m.text"},"ts":1209848163000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I am quite tempted to say why I think that the Nvu UI encourages bad alt text and required alt encourages Nvu-like UI. But if I do that it will be taken badly...","msgtype":"m.text"},"ts":1209848164000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"The logo on http://canvex.lazyilluminati.com/ does <h1><object><img alt></...>","msgtype":"m.text"},"ts":1209848220000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"which is hopefully sane","msgtype":"m.text"},"ts":1209848221000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"IMHO, Nvu is a really bad editor","msgtype":"m.text"},"ts":1209848222000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"jgraham_: just ask Philip` for a list of pages that have nvu's signature, and do a study","msgtype":"m.text"},"ts":1209848223000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: AFAICT Nvu doesn't have a signature","msgtype":"m.text"},"ts":1209848280000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"(at least the version that comes with Ubuntu)","msgtype":"m.text"},"ts":1209848281000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"jgraham_: and compare it to a list of pages that have the signature of tools that make it optional and don't complain and see what they're like","msgtype":"m.text"},"ts":1209848282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"actually this would be an interesting study","msgtype":"m.text"},"ts":1209848283000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I agree this would be an interesting study","msgtype":"m.text"},"ts":1209848284000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"i should get us a list of pages with various detailed generator strings","msgtype":"m.text"},"ts":1209848285000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"someone remind me later today and i'll see about setting that up","msgtype":"m.text"},"ts":1209848340000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"gotta go now though","msgtype":"m.text"},"ts":1209848341000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"http://philip.html5.org/data/underline-generators.txt was my last attempt at looking at generators","msgtype":"m.text"},"ts":1209848342000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie, at what time do you want to be reminded?","msgtype":"m.text"},"ts":1209848343000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Lachy: now + 8 hours","msgtype":"m.text"},"ts":1209848400000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"OK, I'll be asleep by then. Someone else will have to do it","msgtype":"m.text"},"ts":1209848401000,"senderName":"Lachy","senderId":"Lachy@irc"},
{"content":{"body":"Google Web History says 5am is not my time of greatest awakeness","msgtype":"m.text"},"ts":1209848460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"well remind me in 2 hours, i'll be gone then and will see the reminder when i get back :-D","msgtype":"m.text"},"ts":1209848461000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bbl :-)","msgtype":"m.text"},"ts":1209848520000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Looking for (?i)generator.*nvu I see one <meta name=\"GENERATOR\" content=\"NVu\"> and one <meta name=\"generator\" content=\"nvu\"> and one <meta name=\"generator\" content=\"Nvu v1.0\">","msgtype":"m.text"},"ts":1209848521000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"I see more pages with <comment title=\" ... \" xmlns=\"http://disruptive-innovations.com/zoo/nvu\">, which presumably come from some form of interaction with Nvu","msgtype":"m.text"},"ts":1209848640000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"...where \"more\" means 8","msgtype":"m.text"},"ts":1209848700000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Hixie: The problem with that kind of study is you have no way of knowing whether use of a particular authoring tool causes bad alt text, rather than some other external influence causing both, so you can't conclude anything","msgtype":"m.text"},"ts":1209848880000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"e.g. maybe people who choose Nvu are more technically competent than those who choose FrontPage, and they'll do better alt text regardless of the editor's UI","msgtype":"m.text"},"ts":1209848940000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Yeah there are systematic biases in all surveys like this","msgtype":"m.text"},"ts":1209849000000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"You just have to try and understand them","msgtype":"m.text"},"ts":1209849001000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"rather than conclude that everything is pointless","msgtype":"m.text"},"ts":1209849002000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"You should try to eliminate them","msgtype":"m.text"},"ts":1209849003000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and it's only pointless if you find you can't do that :-)","msgtype":"m.text"},"ts":1209849004000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Also pasting <comment title=\" ... \" xmlns=\"http://disruptive-innovations.com/zoo/nvu\">foo</comment> into the source view of KompoZer and then switching back to normal view seems to lock the application up with 100% CPU","msgtype":"m.text"},"ts":1209849060000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Just because it's not possible to do a good large-scale study, that doesn't mean you should do a bad one and think its conclusions have any relevance to reality","msgtype":"m.text"},"ts":1209849061000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: If you have an idea of what the biases are then you can determine whether they are likely to affect the outcome in the way that you observe","msgtype":"m.text"},"ts":1209849120000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"e.g. if you think that all Nvu users are more competent than Frontpage users but find that Nvu pages have worse alt text, the effect is most likely real","msgtype":"m.text"},"ts":1209849180000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"rather than an artifact of the people using the software","msgtype":"m.text"},"ts":1209849240000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"If that happened, it probably just means I didn't have a good idea of the biases","msgtype":"m.text"},"ts":1209849241000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(If it didn't happen, I still wouldn't think I had a good idea of the biases)","msgtype":"m.text"},"ts":1209849242000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Maybe Nvu users are less competent than FrontPage users, or maybe there's one extremely prolific Nvu-using author who writes really bad alt text","msgtype":"m.text"},"ts":1209849300000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: You don't make any progress by not doing things because you can't do them perfectly. Of course you should report any problems your study might have","msgtype":"m.text"},"ts":1209849301000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"jgraham_: Indeed, but 'not quite perfect' and 'so far from perfect that the results are meaningless' are not the same","msgtype":"m.text"},"ts":1209849420000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: Of course :) I don't think this study would necessarily produce meaningless results though","msgtype":"m.text"},"ts":1209849480000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"So how could we be sure it was not going to produce meaningless results? :-)","msgtype":"m.text"},"ts":1209849481000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"We couldn't — at least for a strict definition of \"sure\"","msgtype":"m.text"},"ts":1209849540000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"(preferably without first collecting a load of data and then checking whether it corresponds to our preconceived ideas of what the correct results should be :-) )","msgtype":"m.text"},"ts":1209849541000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/sure/reasonably confident/","msgtype":"m.text"},"ts":1209849542000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"s/reasonably confident/sufficiently confident that we could make language design decisions based on it/","msgtype":"m.text"},"ts":1209849543000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip` - <h1><object><img> ? hrm","msgtype":"m.text"},"ts":1209849544000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"But we could consider all the thinks that might be wrong with it and work out whether any effects should average out over the sample or have a systematic effect","msgtype":"m.text"},"ts":1209849600000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"I usually dont put my logos in h1 since i don't think they're real headings","msgtype":"m.text"},"ts":1209849601000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"<div id=\"logo\"><img></div> or just <img id=\"logo\"> usually does it.. ","msgtype":"m.text"},"ts":1209849602000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"We then decide if the systematic effect will be big enough to worry about","msgtype":"m.text"},"ts":1209849603000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"Facedown: A non-visual UA that replaces the image with its alt text ought to use heading formatting for the alt text","msgtype":"m.text"},"ts":1209849604000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"If we're not sure, we do the study, collect the results and see if the significant of the result is greater than our estimate of the systematic effects","msgtype":"m.text"},"ts":1209849660000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"? to say the logo out louder?","msgtype":"m.text"},"ts":1209849661000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"isnt that what aural styles are for?","msgtype":"m.text"},"ts":1209849662000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"hehe","msgtype":"m.text"},"ts":1209849663000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"Facedown: It could be a non-graphical text browser, rather than an aural one","msgtype":"m.text"},"ts":1209849720000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Facedown: and I'd rather aural browsers used the default <h1> aural styles, rather than some which I've made up myself and haven't been able to test","msgtype":"m.text"},"ts":1209849721000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(also if we were doing the analysis in a proper Bayesian sense, our preconceived idea of what the result should be is important)","msgtype":"m.text"},"ts":1209849722000,"senderName":"jgraham_","senderId":"jgraham_@irc"},
{"content":{"body":"My eyes usually go on the main heading in a newspaper rather than look at the logo","msgtype":"m.text"},"ts":1209849723000,"senderName":"Facedown","senderId":"Facedown@irc"},
{"content":{"body":"Facedown: In my case, the logo is the main heading (since it's just fancy text)","msgtype":"m.text"},"ts":1209849780000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"jgraham: So, how do we quantify the systematic biases in this case?","msgtype":"m.text"},"ts":1209849900000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"(Oops, I've got to go out and find food)","msgtype":"m.text"},"ts":1209849960000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"suggests eating the pigeons ","msgtype":"m.emote"},"ts":1209849961000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(since you sound o hunter-gather about it ;)","msgtype":"m.text"},"ts":1209850020000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/o/so/","msgtype":"m.text"},"ts":1209850021000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: I've not seen any pigeons around where I live :-(","msgtype":"m.text"},"ts":1209850080000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Quite a few cats wander around our garden, though","msgtype":"m.text"},"ts":1209850081000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Apparently carnivores taste quite bad","msgtype":"m.text"},"ts":1209850200000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hmm, I did manage to sneak up on a cat, but I didn't manage to actually see it before it had already decided to run away","msgtype":"m.text"},"ts":1209851460000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"and my spear arm wasn't quick enough","msgtype":"m.text"},"ts":1209851461000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"thinks \"market-leading HTML5 validator\" is an odd phrase to use when the entire market consists of about ten people and one validator","msgtype":"m.emote"},"ts":1209855600000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"Philip`: if there's only one, it's necessarily the top product in its category, isn't it? :-)","msgtype":"m.text"},"ts":1209856080000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: It's technically a true statement, but the phrase has connotations that are not applicable in this case :-)","msgtype":"m.text"},"ts":1209856320000,"senderName":"Philip`","senderId":"Philip`@irc"},
{"content":{"body":"hello","msgtype":"m.text"},"ts":1209856860000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"i think they should change the code tag","msgtype":"m.text"},"ts":1209856980000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"so it displays special characters","msgtype":"m.text"},"ts":1209857040000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"zokka: who's \"they\" and what special characters are you referring to?","msgtype":"m.text"},"ts":1209857160000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"<>","msgtype":"m.text"},"ts":1209857161000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"zokka: there's already <xmp> for that","msgtype":"m.text"},"ts":1209857162000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zokka: it doesn't add to the expressiveness of the language and has the problem of not being able to represent an example of itself","msgtype":"m.text"},"ts":1209857220000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"that went over my head","msgtype":"m.text"},"ts":1209857221000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1209857222000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"xmp is deprecreated though","msgtype":"m.text"},"ts":1209857280000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"zokka: you can use <code> and <pre> to show an example of <code> or <pre>","msgtype":"m.text"},"ts":1209857281000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zokka: you can't use <xmp> to show an example of <xmp>","msgtype":"m.text"},"ts":1209857282000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"zokka: and for the \"expressiveness\" part, <xmp> doesn't really help you say anything you couldn't say with <pre>","msgtype":"m.text"},"ts":1209857340000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"i like the auto escaping of special characterst though on it","msgtype":"m.text"},"ts":1209857341000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"it doesnt seem natural to use escape codes","msgtype":"m.text"},"ts":1209857342000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"i see your meaning though markup might look bad when using html","msgtype":"m.text"},"ts":1209857400000,"senderName":"zokka","senderId":"zokka@irc"},
{"content":{"body":"*cough* cdata *cough*","msgtype":"m.text"},"ts":1209857640000,"senderName":"jwalden","senderId":"jwalden@irc"},
{"content":{"body":"gotta go","msgtype":"m.text"},"ts":1209857700000,"senderName":"zokka","senderId":"zokka@irc"}
]