[
{"content":{"body":"are there any html parsers for python that are actually reliable? been using html5lib but apparently it throws exceptions on some escapes, and the bug has been open for over three years, which tells me i should be looking for a new library...","msgtype":"m.text"},"ts":1470961024000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: you have a link to that open html5lib issue?","msgtype":"m.text"},"ts":1470962726000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway, why not just use the default lxml html parser?","msgtype":"m.text"},"ts":1470962761000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it seems to work pretty well, even though it’s not completely conformant to the HTML parsing algorithm (and doesn’t claim to be)","msgtype":"m.text"},"ts":1470962825000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"WebIDL question: does required DOMString foo mean an instance of foo can be the empty string?","msgtype":"m.text"},"ts":1470962856000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"zewt: the bug with the lxml treebuilder and non-XML-respresentable trees? I wish it were easier to fix. :(","msgtype":"m.text"},"ts":1470963052000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(the narrow/wide split of Python 2 makes it absolutely horrible to fix…)","msgtype":"m.text"},"ts":1470963067000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(I guess we could just do some really ugly hack for element names on narrow builds, but that doesn't entirely fix the issue)","msgtype":"m.text"},"ts":1470963110000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is there actually some way in WebIDL to explicitely specify that something must be non-empty?","msgtype":"m.text"},"ts":1470963337000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/html5lib/html5lib-python/issues/96","msgtype":"m.text"},"ts":1470963369000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: yeah, that's the one","msgtype":"m.text"},"ts":1470963453000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"MikeSmith: \"required\" just means it must be present (in JS, \"not undefined\"). \"\" is a valid DOMString, so it's allowed in required dictionary elements.","msgtype":"m.text"},"ts":1470963610000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: OK that’s what I thought, thanks","msgtype":"m.text"},"ts":1470963656000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: WebIDL doesn't have a way to express constraints on the valid values in a field. In Bluetooth, I did it with https://webbluetoothcg.github.io/web-bluetooth/#uuids, but I also said what exception to throw in prose everywhere that uses a UUID.","msgtype":"m.text"},"ts":1470963672000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"The best fields are \"required Type?\": you can have null, but undefined is right out! ;-)","msgtype":"m.text"},"ts":1470963701000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1470963734000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"then I guess that is what we may need to do more of in the Payment Request API spec where needed","msgtype":"m.text"},"ts":1470963763000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"But I picked SyntaxError in WebBT, which I think is wrong, so don't copy that part. ;)","msgtype":"m.text"},"ts":1470963803000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"I am looking at https://bugs.chromium.org/p/chromium/issues/detail?id=636723 where Rouslan has “Accept any non-empty string” as the isssue title, but the Payment Request spec says nothing explicitly about it needing to be non-empty","msgtype":"m.text"},"ts":1470963831000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://w3c.github.io/browser-payment-api/#paymentcurrencyamount","msgtype":"m.text"},"ts":1470963840000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I also note \"MUST\"s being applied to dictionary fields that are passed from user code to interface operations. You can't \"MUST\" a website; you have to instead say what happens when they do something you disapprove of.","msgtype":"m.text"},"ts":1470964000000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"It's possible the spec already does that; the MUSTs just triggered my reflexes.","msgtype":"m.text"},"ts":1470964034000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: yeah me too. Those MUSTs should not be there, and I am actually right now at this moment writing a PR to change them to just (non-normative) “The following fields are required”","msgtype":"m.text"},"ts":1470964388000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Woot","msgtype":"m.text"},"ts":1470964397000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"but there are still some other places in the spec where it does not actually normatively specify what a UA should do with “invalid” instances of something","msgtype":"m.text"},"ts":1470964493000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"see https://github.com/w3c/browser-payment-api/issues/235","msgtype":"m.text"},"ts":1470964498000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://w3c.github.io/browser-payment-api/#dfn-value","msgtype":"m.text"},"ts":1470964514000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Indeed. My apologies for assuming you were responsible for the current spec text. :)","msgtype":"m.text"},"ts":1470964537000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1470964557000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you can blame Zach Koch :)","msgtype":"m.text"},"ts":1470964571000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway it is a very good spec overall","msgtype":"m.text"},"ts":1470964580000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I just ran into these misses when reviewing test cases","msgtype":"m.text"},"ts":1470964612000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"don't care about how control characters are parsed (it's junk anyway), just want it to not suddenly throw errors while parsing","msgtype":"m.text"},"ts":1470966155000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"there's a few \"authors must\" in the CSS specs. I suppose they should change to \"authors ought to\"","msgtype":"m.text"},"ts":1470968790000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"\"wouldn't it be nice if authors would\"","msgtype":"m.text"},"ts":1470968809000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"\"I'd like imagine that authors would\"","msgtype":"m.text"},"ts":1470968830000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: \"if people read the spec and cared about what it said, they would\"","msgtype":"m.text"},"ts":1470968882000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"why don't we just stop fantasizing and go with \"authors don't\"","msgtype":"m.text"},"ts":1470968929000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"astearns: there are some “authors must” and even “documents must” requirements in the HTML, but those are not ambiguous because the HTML spec defines an explicit “conforming documents” conformance class","msgtype":"m.text"},"ts":1470969335000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/infrastructure.html#conforming-documents","msgtype":"m.text"},"ts":1470969351000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"though we still have cases of implementors reading the spec and thinking those are meant to somehow be requirements for UAs","msgtype":"m.text"},"ts":1470969402000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think there is a good argument to be made for not trying to specify both kinds of requirements in the same spec","msgtype":"m.text"},"ts":1470969443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"in other words, not trying to have a spec that attempts to be both for UA implementors and authors","msgtype":"m.text"},"ts":1470969485000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"because in the end it just ends up being confusing for both implementors and authors","msgtype":"m.text"},"ts":1470969504000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and really in the case of the HTML spec, it’s a spec friendly for implementors in its style and content and not really friendly to authors","msgtype":"m.text"},"ts":1470969588000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think most authors have no business trying to read the HTML spec","msgtype":"m.text"},"ts":1470969604000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or maybe we have no business continuing to imply that authors should","msgtype":"m.text"},"ts":1470969632000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think there is a good argument to be made for a normative spec for document-conformance requirements that is written from the ground up with authors in mind","msgtype":"m.text"},"ts":1470969720000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"a separate spec","msgtype":"m.text"},"ts":1470969729000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"rather than what we have for authors now, which is stuff basically bolted onto the implementor spec","msgtype":"m.text"},"ts":1470969755000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: for the most part authors want tutorial like information, not spec like information, AFAICT","msgtype":"m.text"},"ts":1470969811000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"and that bolted-on stuff is distracting and sometimes confusing to authors","msgtype":"m.text"},"ts":1470969813000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"variable: right but we still need to have the normative requirements for authors defined somewhere","msgtype":"m.text"},"ts":1470969842000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what if spec text could be both normative and accurate, and also accessible","msgtype":"m.text"},"ts":1470969910000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"I really prefer the way that annevk writes specs, which are spare and clearly written for implementors only, in a way that they can implement from without distraction","msgtype":"m.text"},"ts":1470969912000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"caitp: would that it could","msgtype":"m.text"},"ts":1470969927000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think it cannot","msgtype":"m.text"},"ts":1470969933000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is why I like annevk’s approach more","msgtype":"m.text"},"ts":1470969977000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"would you have a div in a section or a section in a div or just use sections?","msgtype":"m.text"},"ts":1470970000000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: depends on what semantics you want","msgtype":"m.text"},"ts":1470970018000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"From the spec, Note: The section element is not a generic container element. When an element is needed for styling purposes or as a convenience for scripting, authors are encouraged to use the div element instead. A general rule is that the section element is appropriate only if the element's contents would be listed explicitly in the document's outline.","msgtype":"m.text"},"ts":1470970023000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"to me annevk’s style does not attempt to be particularly accessible to non-implementors, and that is a feature","msgtype":"m.text"},"ts":1470970027000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"howdoi: you should use <section> if you care about it from an outlining PoV","msgtype":"m.text"},"ts":1470970052000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"tbh outlining is not commonly used","msgtype":"m.text"},"ts":1470970061000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"others who understand the specs can write guides at MDN and places that accessible to authors, and optimized for authors","msgtype":"m.text"},"ts":1470970067000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think that is a reasonable approach","msgtype":"m.text"},"ts":1470970078000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"variable: outlining is a pretty confusing term.","msgtype":"m.text"},"ts":1470970095000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"howdoi: personally I think I would just not use section at all","msgtype":"m.text"},"ts":1470970105000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"howdoi: the short version is: if you think it should live in a \"table of contents\"","msgtype":"m.text"},"ts":1470970118000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"but MikeSmith's suggestion is reasonable","msgtype":"m.text"},"ts":1470970138000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"at this point IMHO there are no real benefits in practice to using section, nor article","msgtype":"m.text"},"ts":1470970138000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"since outlining is basically dead :(","msgtype":"m.text"},"ts":1470970152000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1470970157000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"just the readability?","msgtype":"m.text"},"ts":1470970190000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading. 🤔 😁","msgtype":"m.text"},"ts":1470970228000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"I implemented the outline algorithm in the HTML checker (validator) but I personally think authors are better of ignoring the outline algorithm and just using h1-h6 without section or even without div unless the div is needed for some other reason","msgtype":"m.text"},"ts":1470970258000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"howdoi: this is the conversation that MikeSmith and I are basically having: the spec isn't great for people like you, authors","msgtype":"m.text"},"ts":1470970268000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"variable: collusion of thoughts, it's a small world!","msgtype":"m.text"},"ts":1470970301000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"MikeSmith: I wish that assistive devices were capable of using the outlining stuff, and that authors (or more accurately, framework authors) would care about this stuff","msgtype":"m.text"},"ts":1470970315000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"we must start a session on how to read the spec","msgtype":"m.text"},"ts":1470970323000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"but if the semantic web has taught us anything, its that people will not manually do stuff, ever","msgtype":"m.text"},"ts":1470970334000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"later, how to submit a spec and convince the board :D","msgtype":"m.text"},"ts":1470970342000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"strongly agree there.","msgtype":"m.text"},"ts":1470970369000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"basically no one give a $hit about semantics, until it's affecting their page rank or something similar :(","msgtype":"m.emote"},"ts":1470970418000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"variable: yeah for AT software to use the outline stuff, browsers would first need to implement the requirements in the spec about actually exposing the outline in the right way to a11y APIs. Which browsers don’t, so there’s not much that AT software can do in the mean time","msgtype":"m.text"},"ts":1470970435000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but that said the JAWS vendor at least never implements anything unless they absolutely have to","msgtype":"m.text"},"ts":1470970505000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"case in point is language detection","msgtype":"m.text"},"ts":1470970518000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"language detection is something cheap and easy to implement","msgtype":"m.text"},"ts":1470970540000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe off-topic: If you were to do a simple PWA introduction to a crowd, say a workshop, what app would you do?","msgtype":"m.text"},"ts":1470970562000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"and it would be of real benefit for JAWS users to have built-in language-detection support","msgtype":"m.text"},"ts":1470970565000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but as far as I know, JAWS has no such support","msgtype":"m.text"},"ts":1470970582000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"howdoi: Ilya Grigorik’s O’Reilly book","msgtype":"m.text"},"ts":1470970634000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: https://hpbn.co/?","msgtype":"m.text"},"ts":1470970674000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1470970703000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"works offline","msgtype":"m.text"},"ts":1470970708000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that's already a PWA","msgtype":"m.text"},"ts":1470970711000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"automatically","msgtype":"m.text"},"ts":1470970715000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you mean to say, build something like that?","msgtype":"m.text"},"ts":1470970719000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"oh I guess I misunderstood your quesiton","msgtype":"m.text"},"ts":1470970724000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Say, you were asked to do a workshop on PWA, what would you build there?","msgtype":"m.text"},"ts":1470970743000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"a book I guess","msgtype":"m.text"},"ts":1470970749000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"please don't say a weather app :D","msgtype":"m.text"},"ts":1470970759000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"it is the simplest case","msgtype":"m.text"},"ts":1470970759000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"book with images","msgtype":"m.text"},"ts":1470970763000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"okies, I was planning for flickr images","msgtype":"m.text"},"ts":1470970770000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"or maybe XKCD","msgtype":"m.text"},"ts":1470970773000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"and some videos","msgtype":"m.text"},"ts":1470970777000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1470970788000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not sure if I need to cover push notifications and background sync.","msgtype":"m.text"},"ts":1470970790000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"yeah that would make it a lot more complicated","msgtype":"m.text"},"ts":1470970803000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: reminds of the html fixer","msgtype":"m.text"},"ts":1470970820000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"okies, will ditch them then, thanks for the feedback :)","msgtype":"m.text"},"ts":1470970825000,"senderName":"howdoi","senderId":"howdoi@irc"},
{"content":{"body":"it takes arbitrary input and produces valid HTML as output","msgtype":"m.text"},"ts":1470970831000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"\"rm\"","msgtype":"m.text"},"ts":1470970843000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"variable: not http://www.htmlfixer.com/ I guess","msgtype":"m.text"},"ts":1470970917000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: no, its a unix tool","msgtype":"m.text"},"ts":1470970924000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"\"rm\"","msgtype":"m.text"},"ts":1470970926000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"ah I know rm of course but I guess I’m not getting the joke","msgtype":"m.text"},"ts":1470971003000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: the joke is that rm will correctly produce an empty document","msgtype":"m.text"},"ts":1470971021000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"which is valid HTML","msgtype":"m.text"},"ts":1470971026000,"senderName":"variable","senderId":"variable@irc"},
{"content":{"body":"ah OK","msgtype":"m.text"},"ts":1470971029000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"seems like that would be more like touch(1)","msgtype":"m.text"},"ts":1470971063000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"usually that would result in a 404, which in your typical user agent would produce results inconsistent with the \"document\"","msgtype":"m.text"},"ts":1470971080000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"annevk: hello","msgtype":"m.text"},"ts":1470979317000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: heya, how are things?","msgtype":"m.text"},"ts":1470980470000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: coming back to custom elements","msgtype":"m.text"},"ts":1470980479000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: I have one question for you","msgtype":"m.text"},"ts":1470980484000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: hope you left the office","msgtype":"m.text"},"ts":1470980491000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: the namespace is supposed to be null","msgtype":"m.text"},"ts":1470980493000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: by default, right?","msgtype":"m.text"},"ts":1470980501000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: not empty string","msgtype":"m.text"},"ts":1470980503000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: this is kind of relevant in terms of attributeChangedCallback","msgtype":"m.text"},"ts":1470980512000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: for attributes?","msgtype":"m.text"},"ts":1470980518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: because it adds the namespace URI as the last argument","msgtype":"m.text"},"ts":1470980522000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1470980523000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: hmm I guess, mostly a legacy accident but all other APIs behave that way, right?","msgtype":"m.text"},"ts":1470980585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: https://gist.github.com/rniwa/a2b010863e8e6f111d540f29c7d45086","msgtype":"m.text"},"ts":1470980594000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: because attributeChangedCallback puts the namespace URI into an argument","msgtype":"m.text"},"ts":1470980614000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: it makes this somewhat internal implementation detail of the spec exposed","msgtype":"m.text"},"ts":1470980629000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: all existing APIs such as getAttribute has \"?\" qualifier","msgtype":"m.text"},"ts":1470980639000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: so that makes the null-ness of namespace URI kind of irrelevant but this API would expose it.","msgtype":"m.text"},"ts":1470980665000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: it should match mutation observers, can look up in 20 what that is","msgtype":"m.text"},"ts":1470980687000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that's a good point","msgtype":"m.text"},"ts":1470980819000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: we DO use null in that case","msgtype":"m.text"},"ts":1470980824000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: so yeah, https://dom.spec.whatwg.org/#concept-element-attributes-change does exactly the same for mutation observers and custom elements","msgtype":"m.text"},"ts":1470981197000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1470981205000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: cool","msgtype":"m.text"},"ts":1470981206000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: it looks like this is just a bug in Chrome's implementation","msgtype":"m.text"},"ts":1470981214000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: and https://dom.spec.whatwg.org/#dom-attr-namespaceuri returns that field literally too so I think we're good","msgtype":"m.text"},"ts":1470981217000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ah, okay","msgtype":"m.text"},"ts":1470981226000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Oh Chrome does empty string? Geez...","msgtype":"m.text"},"ts":1470981231000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1470981237000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: well, null / empty string different is somewhat subtle due to historical nullability/undefined implicit coercion :(","msgtype":"m.text"},"ts":1470981263000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: cdumez has been doing an amazing job updating our impl","msgtype":"m.text"},"ts":1470981277000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Yeah, this should never have allowed null","msgtype":"m.text"},"ts":1470981282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: but there is a lot of crazy edge cases in WebIDL around that area","msgtype":"m.text"},"ts":1470981289000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"cdumez is great","msgtype":"m.text"},"ts":1470981300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1470981461000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"sigh... our impl. of sequence conversion is completely busted :(","msgtype":"m.text"},"ts":1470981832000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"the finer details of sequences are hard due to all the subtle hooks in ECMAScript","msgtype":"m.text"},"ts":1470981891000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"bz explained it to me once and I promptly forgot 😟","msgtype":"m.text"},"ts":1470981907000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's not as bad as all the things Proxy can do","msgtype":"m.text"},"ts":1470982005000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: e.g. you can trap `Get(constructor, \"prototype\")` with Proxy","msgtype":"m.text"},"ts":1470982023000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I'm still a bit mystified as to why we have those","msgtype":"m.text"},"ts":1470982034000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: and create an infinitely recursive prototype chain :(","msgtype":"m.text"},"ts":1470982044000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: the part that sucks most about Proxy is that you can't do it per property","msgtype":"m.text"},"ts":1470982064000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: so all bets are off for optimizations :(","msgtype":"m.text"},"ts":1470982072000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I really hope the only justification wasn't just to explain the hooks a browser is using to implement some HTML features","msgtype":"m.text"},"ts":1470982090000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: which is still strictly less worse than https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable","msgtype":"m.text"},"ts":1470982194000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"one of my colleagues spent one entire month optimizing this feature to not regress the perf in regular case :(","msgtype":"m.text"},"ts":1470982214000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I literally can't think of a situation in which one would want to use this feature instead of simply calling push...","msgtype":"m.text"},"ts":1470982250000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"That TC39 doesn't let itself influence by performance concerns is rather frustrating","msgtype":"m.text"},"ts":1470982629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But one thing Apple could help with is sending people to those meetings (I know they can be dull) and object to these kind of things","msgtype":"m.text"},"ts":1470982668000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: oh i think we've been sending people to every TC39 meeting these days","msgtype":"m.text"},"ts":1470982693000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Implementers seem somewhat underrepresented at times","msgtype":"m.text"},"ts":1470982700000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ah good","msgtype":"m.text"},"ts":1470982703000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"And yeah, this happend a while ago, as did freeze() et al","msgtype":"m.text"},"ts":1470982713000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah","msgtype":"m.text"},"ts":1470982888000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: ES6 is quite a massive latency regression for us so we had to spend a lot of time optimizing various parts of the engine","msgtype":"m.text"},"ts":1470982911000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I need a demo string that encodes without unmappables into a legacy multibyte encoding. Does anyone happen to know what's used in programming examples in Chinese, Japanese or Korean where \"Hello, World!\" is used in English?","msgtype":"m.text"},"ts":1470984140000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Wikipedia suggests ハロー・ワールド in Japanese. Unclear if idiomatic.","msgtype":"m.text"},"ts":1470984389000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"I suppose that's good enough","msgtype":"m.text"},"ts":1470984407000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh. it looks like that's a phonetic rendering of English","msgtype":"m.text"},"ts":1470984568000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: phonetic renderings of English seems like exactly what the japanese would use","msgtype":"m.text"},"ts":1470988645000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: ok","msgtype":"m.text"},"ts":1470991091000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: yeah for Japanese what zewt said I think though all examples in https://ja.wikipedia.org/wiki/Hello_worldプログラムの一覧 just use literal latin “Hello world”","msgtype":"m.text"},"ts":1470991831000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hmm except for https://ja.wikipedia.org/wiki/Hello_worldプログラムの一覧#KQ","msgtype":"m.text"},"ts":1470991861000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I wonder what KQ is","msgtype":"m.text"},"ts":1470991937000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh man","msgtype":"m.text"},"ts":1470991959000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/fumieval/LazyKQ","msgtype":"m.text"},"ts":1470991962000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that is pretty cool","msgtype":"m.text"},"ts":1470991968000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"man the obnoxious of that is brilliant","msgtype":"m.text"},"ts":1470992207000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I will never again say that half-width katakana is useless","msgtype":"m.text"},"ts":1470992238000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"botie, inform rniwa hey somebody finally found an appropriate use for half-width katakana https://github.com/fumieval/LazyKQ","msgtype":"m.text"},"ts":1470992364000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"will do","msgtype":"m.text"},"ts":1470992364000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"as far as i can tell the main use of halfwidth katakana is to make my IME have an extra state to toggle through","msgtype":"m.text"},"ts":1470993595000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1470994443000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1470994444000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: how do I \"sync html\" in whatwg/xref?","msgtype":"m.text"},"ts":1470994486000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"the html.py script takes a while and does nothing","msgtype":"m.text"},"ts":1470994499000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: you need to manually add entries to html.json","msgtype":"m.text"},"ts":1470994509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"how many specs are still using this? it's not great :)","msgtype":"m.text"},"ts":1470994511000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: it's sad","msgtype":"m.text"},"ts":1470994511000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: only anolis, they need to become bikeshed at some point","msgtype":"m.text"},"ts":1470994531000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I assume you'd be happy to merge a bikeshed PR for fullscreen?","msgtype":"m.text"},"ts":1470994534000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: I'm mostly putting it off since it's a lot of work and the regressions from last couple of times haven't been great","msgtype":"m.text"},"ts":1470994555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: yeah","msgtype":"m.text"},"ts":1470994564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zewt: for the iPhone Apple dropped support for halfwidth katakana input in the IME a few years ago but then subsequently had to add it back","msgtype":"m.text"},"ts":1470994567000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which others are still left on anolis?","msgtype":"m.text"},"ts":1470994573000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: Fetch, XHR I guess","msgtype":"m.text"},"ts":1470994585000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"mkay","msgtype":"m.text"},"ts":1470994592000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"oh well, not today","msgtype":"m.text"},"ts":1470994595000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"I can just push directly to xref I guess?","msgtype":"m.text"},"ts":1470994606000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"foolip: yeah","msgtype":"m.text"},"ts":1470994621000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: enjoy https://github.com/w3c/permissions/issues/121","msgtype":"m.text"},"ts":1470994687000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"bah, not that one","msgtype":"m.text"},"ts":1470994698000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"https://github.com/whatwg/fullscreen/pull/46","msgtype":"m.text"},"ts":1470994724000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"ta","msgtype":"m.text"},"ts":1470994745000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I couldn't figure out the line wrapping rules so I went with inconsistent :)","msgtype":"m.text"},"ts":1470994765000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Oh, I should have looked at that more carefully, oh well","msgtype":"m.text"},"ts":1470994942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We can fix that when we bikeshed it","msgtype":"m.text"},"ts":1470994955000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or rather, after","msgtype":"m.text"},"ts":1470994970000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Best not to change line endings as part of the conversion as it'll make review too hard","msgtype":"m.text"},"ts":1470994983000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I use git diff --word-diff -w a lot when reviewing spec changes because never changing line wrapping is hard","msgtype":"m.text"},"ts":1470995275000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"oh wow","msgtype":"m.text"},"ts":1470995887000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I never heard of --word-diff","msgtype":"m.text"},"ts":1470995908000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this is great","msgtype":"m.text"},"ts":1470995912000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"https://github.com/w3c/webpayments-method-identifiers/issues/9 is all kinds of horrible","msgtype":"m.text"},"ts":1470996240000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Payments WG is basically in back in the dark ages with nothing learned about anything","msgtype":"m.text"},"ts":1470996268000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"I'll just fix @annevk\"","msgtype":"m.text"},"ts":1470996444000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic ping","msgtype":"m.text"},"ts":1470997091000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"interesting. Chrome uses HTMLDocument for svg images","msgtype":"m.text"},"ts":1470998259000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"but if one uses document.write for example, the document goes into some odd state without element","msgtype":"m.text"},"ts":1470998312000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"s","msgtype":"m.text"},"ts":1470998313000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"annevk: sorry to have roped you into that payments URL nonsense","msgtype":"m.text"},"ts":1470998987000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"anyway I think the actual browser Payment Request API spec is a quite good spec","msgtype":"m.text"},"ts":1470999059000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it is the only thing that’s actually implemented at this point so the rest of that stuff is not really affecting anything anyway","msgtype":"m.text"},"ts":1470999103000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: can you make javascript.spec.whatwg.org 301 to https://github.com/tc39/ecma262/labels/web%20reality? I can set up a <meta>/JS-based redirect for now, but hey…","msgtype":"m.text"},"ts":1471002928000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"mathiasbynens: done","msgtype":"m.text"},"ts":1471004451000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks! and woohoo","msgtype":"m.text"},"ts":1471005310000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"http://stackoverflow.com/questions/38917631/why-is-it-impossible-to-gather-parent-window-location-from-iframe-when-different","msgtype":"m.text"},"ts":1471005635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if the WebIDL for some field in a dictionary defines it as DOMString and my script sets it to null or undefined, then per WebIDL, the UA should throw?","msgtype":"m.text"},"ts":1471005893000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lacking the [TreatNullAsEmpty] annotation (or whatever teh exact name is)","msgtype":"m.text"},"ts":1471005951000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"youennf made really great Fetch tests","msgtype":"m.text"},"ts":1471006095000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: required DOMString or just DOMString?","msgtype":"m.text"},"ts":1471006132000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: either way, null should turn into \"null\" I think","msgtype":"m.text"},"ts":1471006149000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: required DOMString","msgtype":"m.text"},"ts":1471006150000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: then undefined should throw","msgtype":"m.text"},"ts":1471006160000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: OK but then null should not?","msgtype":"m.text"},"ts":1471006181000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: null should stringify","msgtype":"m.text"},"ts":1471006189000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or you mean it turns into the string \"null\"?","msgtype":"m.text"},"ts":1471006190000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1471006194000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hai","msgtype":"m.text"},"ts":1471006199000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1471006206000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"We use hai here at home all the time, such a great word","msgtype":"m.text"},"ts":1471006218000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1471006223000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah it’s pretty useful","msgtype":"m.text"},"ts":1471006231000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"mathiasbynens: \\o/","msgtype":"m.text"},"ts":1471006241000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"mathiasbynens: you should write a blog post for blog.whatwg.org about sunsetting the JavaScript Standard! It's a fun success story.","msgtype":"m.text"},"ts":1471006893000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: sounds fun, I’ll write something up next week!","msgtype":"m.text"},"ts":1471006926000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"uggg please no more drama","msgtype":"m.text"},"ts":1471007189000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1471007315000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: was referring to the idea of making a blog post about bugs w/ JS spec","msgtype":"m.text"},"ts":1471007419000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"???","msgtype":"m.text"},"ts":1471007423000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"who suggested that?","msgtype":"m.text"},"ts":1471007427000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"mathiasbynens: you should write a blog post for blog.whatwg.org about sunsetting the JavaScript Standard! It's a fun success story.\" must have misread?","msgtype":"m.text"},"ts":1471007481000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"Yeah, I think you did","msgtype":"m.text"},"ts":1471007494000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"then I am confused, w/e","msgtype":"m.text"},"ts":1471007514000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"don't see how it could be read diff w/ scrollback though","msgtype":"m.text"},"ts":1471007597000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"We're talking about https://github.com/whatwg/javascript/issues/29. You appear to be talking about a completely separate topic, bugs in ECMA262?","msgtype":"m.text"},"ts":1471007708000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yea, diff standard","msgtype":"m.text"},"ts":1471007800000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"thx for the link, was very confused","msgtype":"m.text"},"ts":1471007821000,"senderName":"bradleymeck","senderId":"bradleymeck@irc"},
{"content":{"body":"dang I was for a moment looking forward to some JS drama :-)","msgtype":"m.text"},"ts":1471009972000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: annevk: have we considered exposing self.clients Clients interface on window or other workers?  except for claim() it seems like it would work just as well from those globals","msgtype":"m.text"},"ts":1471012179000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"\"controlled\" doesn't make as much sense from a window, but yeah, I think it'd be fine to have in other contexts","msgtype":"m.text"},"ts":1471012252000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you mean for ClientQueryOptions?","msgtype":"m.text"},"ts":1471012300000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah","msgtype":"m.text"},"ts":1471012309000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it would be kind of nice if we could get people using Clients.openWindow() instead of window.open()","msgtype":"m.text"},"ts":1471012350000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: although… if you postmessage a client, would it still land on navigator.serviceWorker?","msgtype":"m.text"},"ts":1471012408000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: oh... I forgot about that part... thats kind of icky","msgtype":"m.text"},"ts":1471012426000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: it seems if we did this we would need to move .claim() into a specialization for service worker globals anyway... we could specialize postMessage() the same way","msgtype":"m.text"},"ts":1471012627000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Agreed","msgtype":"m.text"},"ts":1471012659000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I guess I could write an issue","msgtype":"m.text"},"ts":1471012679000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"work, work","msgtype":"m.text"},"ts":1471012683000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"There isn't a way to postmessage to SharedWorkers though","msgtype":"m.text"},"ts":1471012689000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"other than navigator.serviceWorker","msgtype":"m.text"},"ts":1471012701000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"self.onmessage doesn't exist","msgtype":"m.text"},"ts":1471012712000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: self.clients.onmessage?","msgtype":"m.text"},"ts":1471012733000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I mean.. we could hang it off of there for Client API postMessaging...","msgtype":"m.text"},"ts":1471012770000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: In retrospect, that's a better place for it than navigator.serviceWorker","msgtype":"m.text"},"ts":1471012777000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but sometimes it feels like we try to see how many messaging paths we can create","msgtype":"m.text"},"ts":1471012781000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: which reminds me... we talked about BroadcastChannel in service worker... would those messages get our new fangled ExtendableMessageEvent with waitUntil()?","msgtype":"m.text"},"ts":1471012817000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I don't think so, since you'd need to be in another event to create the channel","msgtype":"m.text"},"ts":1471012872000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I meant for receiving BroadcastChannel messages from a window, etc","msgtype":"m.text"},"ts":1471012893000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"but maybe thats what you meant","msgtype":"m.text"},"ts":1471012921000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1471012923000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: are you suggesting a new top-level thing like self.onbroadcastchannelmessage?","msgtype":"m.text"},"ts":1471012925000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: no... I was just wondering if BroadcastChannel is easily usable in SW... or if it has problems due to waitUNtil() being missing... but you correctly point out you already need to be in a place with a waitUntil","msgtype":"m.text"},"ts":1471012958000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I wonder how long until people start putting `self.waitUntil = evt.waitUntil` at the top of all their event handlers","msgtype":"m.text"},"ts":1471013008000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess we need async waitUntil for that to be more useful","msgtype":"m.text"},"ts":1471013025000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"may not be thinking right today...","msgtype":"m.emote"},"ts":1471013059000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"It'd still fall foul of overall limits right?","msgtype":"m.text"},"ts":1471013062000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you mean the timeout with a waitUntil() holding things alive too long?","msgtype":"m.text"},"ts":1471013084000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1471013102000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: it should I think","msgtype":"m.text"},"ts":1471013113000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: although if you keep getting functional events then I think the timer woudl be reset, of course","msgtype":"m.text"},"ts":1471013141000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: https://github.com/slightlyoff/ServiceWorker/issues/955","msgtype":"m.text"},"ts":1471013629000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Cheers!","msgtype":"m.text"},"ts":1471013645000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wilsonpage: pong","msgtype":"m.text"},"ts":1471014643000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic got a tricky situation with my fastdom library regarding multiple versions running on the same page","msgtype":"m.text"},"ts":1471014723000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"annevk pointed me your way :)","msgtype":"m.text"},"ts":1471014732000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"https://github.com/wilsonpage/fastdom/issues/90","msgtype":"m.text"},"ts":1471014732000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"Domenic I imagine the problem has been solved someplace beforebefore","msgtype":"m.text"},"ts":1471014755000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"Hmm not sure exactly what makes me qualified to help here, but I guess I can weigh in on option A/B/C...","msgtype":"m.text"},"ts":1471014792000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic that would be a mega help :)","msgtype":"m.text"},"ts":1471014907000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"Goodness this is a tough one :(","msgtype":"m.text"},"ts":1471014984000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Most libraries don't have this kind of coordination problem","msgtype":"m.text"},"ts":1471014992000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic yeah most the options I came up with are pretty lame","msgtype":"m.text"},"ts":1471015041000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"But I'm all out","msgtype":"m.text"},"ts":1471015045000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"Today I learned about <meta http-equiv=\"default-style\">. Whyyyy","msgtype":"m.text"},"ts":1471016417000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic great response, thanks mate!","msgtype":"m.text"},"ts":1471017375000,"senderName":"wilsonpage","senderId":"wilsonpage@irc"},
{"content":{"body":"astearns: No, \"authors must\" is intentional and should be kept. It's just a different conformance class that we can't actually test.  ^_^  It still, of course, has zero influence on what the implementors have to do.","msgtype":"m.text"},"ts":1471023855000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"MikeSmith: As an implementor / fellow spec editor, I'm actually not a fan of how extreme Anne takes his \"spare, details-only\" speccing.  Makes it very difficult to tell what the *intent* is of something, or sometimes what it even *means*.","msgtype":"m.text"},"ts":1471024332000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Despite the occasional implementor trying to interpret an informative detail as if it had normative consequences, I find it's worthwhile overall to give understandable context (to the point that a clueful web author could understand), as it's caught a lot of algorithm bugs when someone was able to go \"huh, that result doesn't seem to match what it claims it","msgtype":"m.text"},"ts":1471024404000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"should be doing...\".","msgtype":"m.text"},"ts":1471024405000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"conformance class that we can't actually test\" doesn't make any sense to me. The instances I saw were more like, \"If you don't do this, you're gonna have a bad time.\"","msgtype":"m.text"},"ts":1471025112000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"igrigorik: what does Math.random()  r  2 - r; mean in requestIdleCallback spec?","msgtype":"m.text"},"ts":1471025746000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"JakeA: Domenic: unfortunately I have to stop working streams API stuff in firefox for the time being... trying to find someone else to pick it up","msgtype":"m.text"},"ts":1471025833000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: awww sad! You seemed to be making a lot of progress! What happened?","msgtype":"m.text"},"ts":1471025853000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"smaug____: looks like some kind of markdown processing gone bad (replacing * r * with <em>r</em>","msgtype":"m.text"},"ts":1471025861000,"senderName":"Mek","senderId":"Mek@irc"},
{"content":{"body":"Domenic: we need to fix a number of service worker issues in order to enable multiple renderer processes in firefox... thats a high priority thing at the moment","msgtype":"m.text"},"ts":1471025884000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: ah well that's pretty understandable.","msgtype":"m.text"},"ts":1471025919000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: also, I was not making very good progress because I don't really know the js engine stuff very well","msgtype":"m.text"},"ts":1471025922000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Domenic: but with it shipped in both edge and chrome (and likely coming soon in safari) I think the pressure is on to implement it","msgtype":"m.text"},"ts":1471025963000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"you see, if it was a normal webidl based spec it would all be easier and understandabe ;)","msgtype":"m.text"},"ts":1471025966000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"understanable","msgtype":"m.text"},"ts":1471025972000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hoping we can get one or two people with better knowledge on it","msgtype":"m.text"},"ts":1471025976000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Mek: That's precisely why Bikeshed doesn't have inline-markdown support turned on by default. :/","msgtype":"m.text"},"ts":1471026074000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: if not, then I will circle back to it after we have multi-e10s working","msgtype":"m.text"},"ts":1471026085000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"Anyone remember the bugzilla bug about radio button names and unicode case matching?","msgtype":"m.text"},"ts":1471027424000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://www.w3.org/Bugs/Public/show_bug.cgi?id=16970","msgtype":"m.text"},"ts":1471027953000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: think we've had the conversation a few times before, but I disagree on \"authors must\"; it's just a confusingly poor choice of terminology","msgtype":"m.text"},"ts":1471028295000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"rniwa, at 2016-08-12 08:59 UTC, MikeSmith said: hey somebody finally found an appropriate use for half-width katakana https://github.com/fumieval/LazyKQ","msgtype":"m.text"},"ts":1471028447000,"senderName":"botie","senderId":"botie@irc"},
{"content":{"body":"annevk: thanks!","msgtype":"m.text"},"ts":1471028653000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"MikeSmith: that's some crazy language.","msgtype":"m.text"},"ts":1471029452000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"igrigorik: ping","msgtype":"m.text"},"ts":1471034580000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"igrigorik: what should timeRemaining() return if JS keeps IdleDeadline after the callback?","msgtype":"m.text"},"ts":1471034631000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"filed a bug","msgtype":"m.text"},"ts":1471034808000,"senderName":"smaug____","senderId":"smaug____@irc"}
]