[
{"content":{"body":"Mmm. Still confused about when to queue a task to do something vs. just doing something.","msgtype":"m.text"},"ts":1496215173000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"The other day, annevk wrote: \"Do not update state without a task\" but that doesn't really work for example for an object's state.","msgtype":"m.text"},"ts":1496215259000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"For example, in https://w3c.github.io/sensors/#sensor-start","msgtype":"m.text"},"ts":1496215309000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: it's fine to update state in response to method calls too","msgtype":"m.text"},"ts":1496215364000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If you sensor.start() is called twice in the same event turn, and sensor.[[state]] is changed in a task, than the guard it's supposed to provide no longer works.","msgtype":"m.text"},"ts":1496215370000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: Ah!","msgtype":"m.text"},"ts":1496215420000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: use a task was meant for \"async\" changes","msgtype":"m.text"},"ts":1496215425000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"async as \"in parallel\"","msgtype":"m.text"},"ts":1496215444000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, or later point in time","msgtype":"m.text"},"ts":1496215485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok, so basically the idea is to protect JS's single-threaded nature when faced with external interactions, right?","msgtype":"m.text"},"ts":1496215555000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: yeah, ensure obj.x === obj.x","msgtype":"m.text"},"ts":1496215592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: cool","msgtype":"m.text"},"ts":1496215599000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: what about the \"queue a task\" to fire an event. I'm seeing it used in places, but there's no consistency","msgtype":"m.text"},"ts":1496215649000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: generally good, depends on the trigger though","msgtype":"m.text"},"ts":1496216540000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: well, they're either coming from such an async event","msgtype":"m.text"},"ts":1496216805000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(so they're effectively already happening from within a queued task)","msgtype":"m.text"},"ts":1496216825000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: or from other platform hooks (e.g. asynchronously checking for the permission state in the permission API)","msgtype":"m.text"},"ts":1496216893000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: I guess a subsidiary question is: what if the event isn't queue and its handler throws? Will that affect the rest of my algorithm?","msgtype":"m.text"},"ts":1496217061000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"annevk: thanks, I'll not block on your feedback for fullscreen changes until you're back and recovered from inbox hangover then","msgtype":"m.text"},"ts":1496219798000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"tobie: no","msgtype":"m.text"},"ts":1496225260000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"relevant to this channel in reference to the U+FFFD discussion the other day: https://hsivonen.fi/broken-utf-8/","msgtype":"m.text"},"ts":1496233310000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: AFAICT, TextDecoder doesn't make a copy of the input. The binding layer probably copies the output. TextEncoding makes a copy of the output. The binding layer probably copies the input.","msgtype":"m.text"},"ts":1496233505000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"annevk: do you have an example of a performance-sensitive real-world use of either?","msgtype":"m.text"},"ts":1496233541000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Domenic: if you're around I'd love your opinion on the best way to tackle https://github.com/whatwg/html/pull/2588#issuecomment-305017268","msgtype":"m.text"},"ts":1496242085000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"also, as annevk is OOO, I'd love to land https://github.com/whatwg/fetch/pull/549 before he returns, so maybe you could review?","msgtype":"m.text"},"ts":1496242448000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: still catching up on backlog, will hopefully get to those today or tomorrow","msgtype":"m.text"},"ts":1496247145000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ok, thanks! :)","msgtype":"m.text"},"ts":1496247191000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"hsivonen: we have some internal Google person emailing us about TextEncoder/TextDecoder not being fast enough in Chrome for some large web site, let me see if they've commented anywhere publicly...","msgtype":"m.text"},"ts":1496247215000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Not a lot of detail on the actual use case, but they filed https://bugs.chromium.org/p/chromium/issues/detail?id=689753","msgtype":"m.text"},"ts":1496247278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Edge has started implementing the Encoding API: https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6558040-support-the-encoding-api?tracking_code=b4e7100132add183f16a703b4d089525 /cc annevk","msgtype":"m.text"},"ts":1496253162000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Can anyone confirm whether or not Safari 10.1 ships it? The internet is not helpful.","msgtype":"m.text"},"ts":1496253417000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk, Domenic: IIRC, in Gecko, the overhead from testing encoding_rs within TextDecoder was very large compared to testing it in a non-browser test harness without any binding layers involved","msgtype":"m.text"},"ts":1496254299000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"Domenic: retweeted from @encodings","msgtype":"m.text"},"ts":1496254915000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If url’s scheme is a special scheme and buffer is not, then return.","msgtype":"m.text"},"ts":1496264654000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"If url’s scheme is not a special scheme and buffer is, then return.","msgtype":"m.text"},"ts":1496264655000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(from URL)","msgtype":"m.text"},"ts":1496264660000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"is that checking whether buffer is a special scheme?","msgtype":"m.text"},"ts":1496264674000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley: pretty sure yes... let's see...","msgtype":"m.text"},"ts":1496265303000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"GPHemsley: yeah, pretty sure. That's not super-clear though.","msgtype":"m.text"},"ts":1496265325000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"cool, thanks","msgtype":"m.text"},"ts":1496265332000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"I'll file an issue","msgtype":"m.text"},"ts":1496265338000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"https://github.com/whatwg/url/issues/315","msgtype":"m.text"},"ts":1496265594000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"tobie: Do you happen to know why the legacy platform object [[Set]] algorithm (https://heycam.github.io/webidl/#legacy-platform-object-set) in step 1.2 stipulates that “P is not an array index property name”","msgtype":"m.text"},"ts":1496268804000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"tobie: my reading of it, and I very well may be missing something here, is that means that an object with a named property getter, but no indexed property getter will not support indexed properties","msgtype":"m.text"},"ts":1496268849000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"e.g window.localStorage[7] = “foo”","msgtype":"m.text"},"ts":1496268869000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: I remember stumbling on exactly the same issue a while back","msgtype":"m.text"},"ts":1496268917000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"weinig: and figuring out how/why I was reading the algo wrong.","msgtype":"m.text"},"ts":1496268936000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1496268942000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"tobie: does it have something to do with the “If O and Receiver are the same object” part, cause that I have not looked into yet","msgtype":"m.text"},"ts":1496268996000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"tobie: if you remember what you figured out, let me know ;)","msgtype":"m.text"},"ts":1496269142000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: I think it just means that if your interface supports both indexed and named props, then, indexed props take precedence","msgtype":"m.text"},"ts":1496269276000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Hmm... it seems to be saying if you support named properties, \"1\" does not count as a named property","msgtype":"m.text"},"ts":1496269310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which is believable","msgtype":"m.text"},"ts":1496269334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Yeah that's another way of looking at it.","msgtype":"m.text"},"ts":1496269379000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Basically that if you support both, than [[Set]]ing \"1\" will invoke the indexed prop setter and not both the indexed prop and the named prop setter as it would if the \"P is not an array index property name\" was missing from step 1.2","msgtype":"m.text"},"ts":1496269501000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"*then","msgtype":"m.text"},"ts":1496269527000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"(sorry for the horrendous grammar)","msgtype":"m.text"},"ts":1496269537000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"I think that means localStorage, as currently spec’d, doesn’t support [[Set]]ing “1”, but browsers seem to allow that","msgtype":"m.text"},"ts":1496269672000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"e.g window.localStorage[7] = “foo”","msgtype":"m.text"},"ts":1496269744000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Oooh OK, that's not great","msgtype":"m.text"},"ts":1496269767000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://html.spec.whatwg.org/multipage/webstorage.html#the-storage-interface (for reference)","msgtype":"m.text"},"ts":1496269818000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: can you file a bug so we can get bz to check that we're not missing something? Otherwise yeah we should fix this.","msgtype":"m.text"},"ts":1496269819000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1496269828000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Wow who knew... localStorage.key(2)","msgtype":"m.text"},"ts":1496269852000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"What a weird interface, it's clearly trying to be indexed, but not quite","msgtype":"m.text"},"ts":1496269876000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: mmm. Do we just want to change 1.2 to (P is not an array index property name or O does not supports indexed properties)?","msgtype":"m.text"},"ts":1496270201000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Or am I misunderstanding the issue?","msgtype":"m.text"},"ts":1496270229000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: I think we just want to remove \"P is not an array index property name\" from 1.2","msgtype":"m.text"},"ts":1496270247000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"for the record, that is what makes sense to me too","msgtype":"m.text"},"ts":1496270423000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"and it’s closer to what [[DefineOwnProperty]] does","msgtype":"m.text"},"ts":1496270452000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"though [[DefineOwnProperty]] also has a unforgeables check","msgtype":"m.text"},"ts":1496270473000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"omg, i did not know that the HTML spec had time travel laid out for us","msgtype":"m.text"},"ts":1496270474000,"senderName":"KiChjang","senderId":"KiChjang@irc"},
{"content":{"body":"and differs based on [OverrideBuiltins]","msgtype":"m.text"},"ts":1496270498000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"I feel like I’m missing something in this [[set]] business","msgtype":"m.text"},"ts":1496270544000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Domenic: well, we'd set the prop twice in those cases.","msgtype":"m.text"},"ts":1496270573000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: Nah, `return true` in 1.1.2, right?","msgtype":"m.text"},"ts":1496270594000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"While I have your attention, should window.EventListener exist as per (https://dom.spec.whatwg.org/#callbackdef-eventlistener)","msgtype":"m.text"},"ts":1496270647000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Domenic: you're right.","msgtype":"m.text"},"ts":1496270671000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"So yeah, that seems redundant and broken.","msgtype":"m.text"},"ts":1496270701000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"weinig: right, I answered that after you left. No, per https://heycam.github.io/webidl/#interface-object \"The interface object for a given ******non-callback***** interface I with...\"","msgtype":"m.text"},"ts":1496270708000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tobie: I mean, the current spec seems somewhat reasonable, e.g. if could be an attempt to allow adding indexed setters later without breaking code. But it sounds like it's not what people implemented.","msgtype":"m.text"},"ts":1496270735000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Unless we are missing something","msgtype":"m.text"},"ts":1496270739000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, hadn't thought of this future proof option.","msgtype":"m.text"},"ts":1496270776000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: then what’s the deal with https://dom.spec.whatwg.org/#interface-nodefilter","msgtype":"m.text"},"ts":1496270794000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"What is the deal indeed... I used to know this...","msgtype":"m.text"},"ts":1496270829000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"weinig: it's the only one of the lot with constants, no?","msgtype":"m.text"},"ts":1496270841000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ah yes: https://heycam.github.io/webidl/#legacy-callback-interface-object","msgtype":"m.text"},"ts":1496270845000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"\"and on which constants are defined\"","msgtype":"m.text"},"ts":1496270859000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"“ on which constants are defined, a corresponding property must exist on the ECMAScript environment’s global object\"","msgtype":"m.text"},"ts":1496270871000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"!!","msgtype":"m.text"},"ts":1496270873000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"boom, thanks","msgtype":"m.text"},"ts":1496270875000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"mystery solved :)","msgtype":"m.text"},"ts":1496270884000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"back to [[Set]], I’m betting the way this works, it expects to go into OrdinarySet which will end up calling [[DefineOwnProperty]]","msgtype":"m.text"},"ts":1496270931000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"but I don’t know how","msgtype":"m.text"},"ts":1496270935000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Oh, I see...","msgtype":"m.text"},"ts":1496270963000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I do like that it says “steps 3-11 of the default [[Set]] internal method”, but the default [[Set]] internal method only has 1 step :)","msgtype":"m.text"},"ts":1496271018000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: Oh, I think that's how it works","msgtype":"m.text"},"ts":1496271020000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"lol yes that is error prone","msgtype":"m.text"},"ts":1496271028000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"we should refactor ES to fix that somehow","msgtype":"m.text"},"ts":1496271035000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But yes, I think [[Set]] will fall through to calling [[DefineOwnProperty]] which will go to https://heycam.github.io/webidl/#legacy-platform-object-defineownproperty step 2.2.2","msgtype":"m.text"},"ts":1496271071000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So why do these shortcut steps exist in [[Set]] at all? I guess I could think up edge cases where it would matter, bleh.","msgtype":"m.text"},"ts":1496271131000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I’m un clear on what step 1 is for then, but I don’t really know what the Receiver is, so I will go bother some JSC folks into telling me instead of looking it up","msgtype":"m.text"},"ts":1496271137000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Domenic: exactly","msgtype":"m.text"},"ts":1496271142000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"anyway, thanks!","msgtype":"m.text"},"ts":1496271158000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"So O and the receiver will not be the same when a proxy is involved","msgtype":"m.text"},"ts":1496271161000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: ah","msgtype":"m.text"},"ts":1496271210000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: can you file issues for both these things (weird [[Set]] behavior for \"1\", and algo referring now-removed steps) so they don't fall through the cracks?","msgtype":"m.text"},"ts":1496271211000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: sure, I did the first already","msgtype":"m.text"},"ts":1496271225000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"weinig: thanks!","msgtype":"m.text"},"ts":1496271246000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"is hitting the sack. It's late here.","msgtype":"m.emote"},"ts":1496271281000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"tobie: weinig: I think the removed-steps one is https://github.com/heycam/webidl/issues/201","msgtype":"m.text"},"ts":1496271310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: indeed","msgtype":"m.text"},"ts":1496271332000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"enjoys that tobie filed it","msgtype":"m.emote"},"ts":1496271347000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"I’m off too","msgtype":"m.text"},"ts":1496271358000,"senderName":"weinig","senderId":"weinig@irc"},
{"content":{"body":"Arg!!","msgtype":"m.text"},"ts":1496271415000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"The funniest part is there was this little voice at the back of my head saying: \"this sounds vaguely familiar, we must have done it already in another part of the spec. Great I'll just need to look it up to see how we fixed this. This is going to be easy.\"","msgtype":"m.text"},"ts":1496271583000,"senderName":"tobie","senderId":"tobie@irc"}
]