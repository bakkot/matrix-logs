[
{"content":{"body":"jolvera: definitely, yeah.  We have one possibility in progress at https://github.com/whatwg/html/pull/2751 but it's client side and breaks some things that currently work, like where the spec highlights certain parts of the code as bad or good or changed.","msgtype":"m.text"},"ts":1499303310000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I'm hoping TabAtkins can factor out his highlighter from Bikeshed so we can run through that","msgtype":"m.text"},"ts":1499303336000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, you want that? It's just Pygments, with some extra code to merge highlighting into existing markup.","msgtype":"m.text"},"ts":1499303369000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Tho there's also now custom line-numbering/highlighting code too.","msgtype":"m.text"},"ts":1499303382000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Oh, plus it relies on widlparser for highlighting WebIDL, because Pygments doesn't do that language.","msgtype":"m.text"},"ts":1499303502000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Yeah, don't need the line number stuff really, but packaging up pygments + merge + Web IDL into something we could shell out to would be lovely","msgtype":"m.text"},"ts":1499303545000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Can you just shell out the html contents of a given element? Much easier if that's all I need to worry about, rather than parsing and finding the highlightable elements myself.","msgtype":"m.text"},"ts":1499303665000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if it's Pygments it can be added through the build process","msgtype":"m.text"},"ts":1499304120000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"right?","msgtype":"m.text"},"ts":1499304123000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"Actually, I need an intermediate format - text requires me to include a full parser, but markup doesn't have a cross-lang built-in data structure. You have the parsed spec, right? Can you generate a `[tagname, {attrs}, ...contents]`-style tree?","msgtype":"m.text"},"ts":1499304129000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"jolvera: It's not *just* Pygments, because Pygments only works on raw text. Bikeshed has extra smarts to merge it into existing markup.","msgtype":"m.text"},"ts":1499304152000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh ok, im not familiar with Bikeshed","msgtype":"m.text"},"ts":1499304277000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"TabAtkins: yes, that should work.","msgtype":"m.text"},"ts":1499304953000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh, then I read the intermediate format thing","msgtype":"m.text"},"ts":1499304969000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Probably still doable","msgtype":"m.text"},"ts":1499304988000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Let me capture this in an issue","msgtype":"m.text"},"ts":1499304991000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i've another question, that maybe i should ask in the issue, but","msgtype":"m.text"},"ts":1499305096000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"https://github.com/whatwg/html/issues/2779","msgtype":"m.text"},"ts":1499305097000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"the former implementation used a search_index.json that probably was generated on build process","msgtype":"m.text"},"ts":1499305113000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"https://github.com/benschwarz/developers.whatwg.org/blob/97ff943a8f5b8fe38f78e224b4b44b472ccefb57/javascript/master.js#L44-L53","msgtype":"m.text"},"ts":1499305171000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"jolvera: yep, re-generating that is the primary task. Unfortunately our build tooling is kind of hard to hack on :(.","msgtype":"m.text"},"ts":1499305206000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"generating the index on page load async isn't an option?","msgtype":"m.text"},"ts":1499305232000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"Like... downloading and spidering every page of the spec to assemble it each time? That seems pretty slow to me...","msgtype":"m.text"},"ts":1499305264000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"not on load, and if someone happen to click the search box before it's done adding a message of loading?","msgtype":"m.text"},"ts":1499305275000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"well, just getting the list of links to create a index on memory","msgtype":"m.text"},"ts":1499305284000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"as in https://dsh.re/c3498","msgtype":"m.text"},"ts":1499305310000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"Still, spidering 40+ pages to find all their headings seems pretty hard...","msgtype":"m.text"},"ts":1499305317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"And slow","msgtype":"m.text"},"ts":1499305336000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Better than nothing I guess?","msgtype":"m.text"},"ts":1499305345000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"worth a try","msgtype":"m.text"},"ts":1499305401000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"unless, is there a way to add separate processes like in python","msgtype":"m.text"},"ts":1499305496000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"a small python script could do this on build process","msgtype":"m.text"},"ts":1499305513000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"or node","msgtype":"m.text"},"ts":1499305528000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"Yeah, that is probably the best middle ground","msgtype":"m.text"},"ts":1499305572000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Ideally we would integrate it into our existing build tooling, which is already traversing the document","msgtype":"m.text"},"ts":1499305583000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think I'd like to try that, at least","msgtype":"m.text"},"ts":1499305589000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"But the tooling is written in FreePascal, which makes it hard to find contributors","msgtype":"m.text"},"ts":1499305599000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So we're open to slower alternatives written in normal languages","msgtype":"m.text"},"ts":1499305607000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1499305669000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"https://github.com/whatwg/html-build/issues/113 for syntax highlighting, TabAtkins","msgtype":"m.text"},"ts":1499305844000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic is it possible to add classes to h2, h3, and h4 inside the section page?","msgtype":"m.text"},"ts":1499308249000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"`<h3 id=\"is-this-html5?\">` to `<h3 id=\"is-this-html5?\" class=\"section-heading\">`","msgtype":"m.text"},"ts":1499308280000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"jolvera: I don't see why we'd need it? h3 is always a section heading","msgtype":"m.text"},"ts":1499308317000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"to generate the search_index.json and make the scrapping faster","msgtype":"m.text"},"ts":1499308346000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"and get each one ordered on the way","msgtype":"m.text"},"ts":1499308359000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"instead i'd have to get all  h3's then h4's and order based on the '.secno'","msgtype":"m.text"},"ts":1499308402000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"Why order based on secno? They're already in order","msgtype":"m.text"},"ts":1499308537000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"querySelectorAll(\"h3, h4\") --> all in order","msgtype":"m.text"},"ts":1499308546000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh ok, you right, that actually works on python too","msgtype":"m.text"},"ts":1499308700000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1499308729000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"html.cssselect('h3, h4') gives me the same output. nvm then :)","msgtype":"m.text"},"ts":1499308731000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"i've created a python script that generates the same search_index.json file as the ruby version","msgtype":"m.text"},"ts":1499319535000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"https://gist.github.com/thinkxl/f8722c6fba97e97d67e84cb32c22cb5f","msgtype":"m.text"},"ts":1499319538000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"if we would use this, how it could be integrated into the build process","msgtype":"m.text"},"ts":1499319648000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"it has two dependencies, lxml and cssselect","msgtype":"m.text"},"ts":1499319663000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"cc Domenic","msgtype":"m.text"},"ts":1499319668000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"i'll update the GitHub issue","msgtype":"m.text"},"ts":1499319782000,"senderName":"jolvera","senderId":"jolvera@irc"},
{"content":{"body":"TabAtkins: nox: I think the main concern with Houdini is that it might force slow paths in the future as it's primarily being built on top of a single-thread architecture for doing all things CSS","msgtype":"m.text"},"ts":1499333967000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"TabAtkins: nox: see e.g. https://twitter.com/pcwalton/status/835937849237106688","msgtype":"m.text"},"ts":1499334080000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(and replies)","msgtype":"m.text"},"ts":1499334088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: can you tell me the relationship between RFC2045 and mime type parsing algorithm in https://mimesniff.spec.whatwg.org/?","msgtype":"m.text"},"ts":1499342194000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"yhirano__: I haven't investigated MIME type parsing","msgtype":"m.text"},"ts":1499342527000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's referenced from XHR overrideMimeType, and you wrote a wpt depending on the behavior.","msgtype":"m.text"},"ts":1499342585000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"annevk: http://w3c-test.org/XMLHttpRequest/overridemimetype-blob.html","msgtype":"m.text"},"ts":1499342630000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"yhirano__: I tried to pick MIME types that are invalid in both the RFC and the MIME Sniffing","msgtype":"m.text"},"ts":1499342818000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: \"HI/x;test\", used in the last case, seems valid in the algorithm and invalid in RFC2045. Is that intentional?","msgtype":"m.text"},"ts":1499342819000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"yhirano__: it wasn't","msgtype":"m.text"},"ts":1499342902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yhirano__: I'd be okay if we changed that to ;test=test","msgtype":"m.text"},"ts":1499342920000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annvk: thanks, we","msgtype":"m.text"},"ts":1499342953000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"annevk: thanks, we'll change it.","msgtype":"m.text"},"ts":1499342968000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"yhirano__: It's been a while, but I might be of some assistance here","msgtype":"m.text"},"ts":1499345944000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yhirano__: As I recall, the decision to allow keys without values in the MIME type parsing algorithm was to accommodate 'base64' in data URLs","msgtype":"m.text"},"ts":1499346134000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"so we didn't have to special case","msgtype":"m.text"},"ts":1499346157000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"(see step 9 in serializing a MIME type0","msgtype":"m.text"},"ts":1499346246000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"GPHemsley:  We are currently using the parser for RFC2045 and as an implementer it would be really great if the spec could also use it. Maintaining many similar (but differnt) parsers is really hard...","msgtype":"m.text"},"ts":1499347152000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"GPHemsley:  It's OK to add or remove some restrictions to/from the RFC2045 rule, but with the current (really complicated) algorithmic style It's hard to see how different it is from the RFC2045 rule.","msgtype":"m.text"},"ts":1499347293000,"senderName":"yhirano__","senderId":"yhirano__@irc"},
{"content":{"body":"yhirano__: When the definition of a language goes from context-free to context-sensitive, the parsing algorithm necessarily becomes more complex.","msgtype":"m.text"},"ts":1499347657000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"yhirano__: That said, I'm no longer the maintainer of the spec, so changes (or lack thereof) are no longer my call.","msgtype":"m.text"},"ts":1499347681000,"senderName":"GPHemsley","senderId":"GPHemsley@irc"},
{"content":{"body":"JakeA: who cares about requestIdleCallback() in chrome?","msgtype":"m.text"},"ts":1499355706000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"eh, I'll just write an issue","msgtype":"m.text"},"ts":1499355768000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: igrigorik & Ross Mcilroy","msgtype":"m.text"},"ts":1499355790000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1499355859000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"igrigorik: is this expected behavior? https://bugs.chromium.org/p/chromium/issues/detail?id=739750","msgtype":"m.text"},"ts":1499355865000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"ohh that's a good one","msgtype":"m.text"},"ts":1499355927000,"senderName":"JakeA","senderId":"JakeA@irc"}
]