[
{"content":{"body":"jorendorff: what's a Module Instance Object?","msgtype":"m.text"},"ts":1407889938000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_:  === a Module Object.","msgtype":"m.text"},"ts":1407889951000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-module-exotic-objects ?","msgtype":"m.text"},"ts":1407889973000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1407889985000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"so, how does JS code create an object that has \"all the internal data properties of a Module Instance Object\"?","msgtype":"m.text"},"ts":1407890011000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"(context: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-linkdynamicmodules step 1.d)","msgtype":"m.text"},"ts":1407890033000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: the only way to do that is with newModule","msgtype":"m.text"},"ts":1407890053000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"ah, ok","msgtype":"m.text"},"ts":1407890069000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"man, linking is really complicated","msgtype":"m.text"},"ts":1407890290000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: and you aren't even talking about ELF","msgtype":"m.text"},"ts":1407890336000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"i'm amused that CreateModuleLinkageRecord creates an object, not a record...","msgtype":"m.text"},"ts":1407890728000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: any idea what CreateImportBinding is?","msgtype":"m.text"},"ts":1407891193000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"found http://lists.w3.org/Archives/Public/public-html-a11y/2014Jun/0115.html","msgtype":"m.emote"},"ts":1407907572000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<img src=\"logo\" alt=\"W3C\" longdesc=\"data:text/html;charset=utf-8;,%3C!DOCTYPE%20html%3E","msgtype":"m.text"},"ts":1407907762000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"%3Chtml%3E%3Chead%3E%3Ctitle%3EDescription%20of%20the%20W3C%20Logo%3C/title%3E%3C/head%3E","msgtype":"m.text"},"ts":1407907762000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"%3Cbody%3E%3Cp%3EA%20blue%20capital%20letter%20%22W%22%20with%20kerning%20so%20it%20","msgtype":"m.text"},"ts":1407907762000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"touches%20a%20blue%203%2C%20followed%20by%20a%20black%20shadow%20of%20a%20white%20","msgtype":"m.text"},"ts":1407907764000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"capital%20letter%20C%20all%20on%20a%20white%20background%3C/body%3E%3C/html%3E\">","msgtype":"m.text"},"ts":1407907766000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: crazyness!","msgtype":"m.text"},"ts":1407907827000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Go home, you're drunk.","msgtype":"m.text"},"ts":1407907930000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://www.w3.org/TR/2014/CR-html-longdesc-20140812/ also introduces the img.longdesc IDL attribute, in addition to the existing img.longDesc http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html#dom-img-longdesc","msgtype":"m.text"},"ts":1407908478000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"good times","msgtype":"m.text"},"ts":1407908494000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"\"If the longdesc document proceeds to CR and beyond, I believe the credibility of this WG will be materially harmed.\"","msgtype":"m.text"},"ts":1407915722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"The HTMLWG?","msgtype":"m.text"},"ts":1407915775000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hixie_: https://github.com/slightlyoff/ServiceWorker/issues/410 can't think of any problems with this offhand","msgtype":"m.text"},"ts":1407916015000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"What happens if you put <picture><p>your random longdesc text here</p></picture>?","msgtype":"m.text"},"ts":1407916062000,"senderName":"wilhelm_","senderId":"wilhelm_@irc"},
{"content":{"body":"goes off to actually read the <picture> spec.","msgtype":"m.emote"},"ts":1407916095000,"senderName":"wilhelm_","senderId":"wilhelm_@irc"},
{"content":{"body":"Hixie_: never mind","msgtype":"m.text"},"ts":1407916136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"anyone remember if chrome or firefox have ever logged warnings in the console about html parse errors?","msgtype":"m.text"},"ts":1407921953000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"wilhelm_: same as <span><p>your random longdesc text here</p></span>","msgtype":"m.text"},"ts":1407922003000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"hsivonen: ^","msgtype":"m.text"},"ts":1407922038000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: Firefox never has","msgtype":"m.text"},"ts":1407922044000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"https://bugzilla.mozilla.org/show_bug.cgi?id=878364","msgtype":"m.text"},"ts":1407922047000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: thx","msgtype":"m.text"},"ts":1407922089000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I don't think Chrome has either","msgtype":"m.text"},"ts":1407922103000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: might know?","msgtype":"m.text"},"ts":1407922106000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I don't think anyone ever has","msgtype":"m.text"},"ts":1407922220000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Presto did.","msgtype":"m.text"},"ts":1407922226000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407922230000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"For which kinds of errors?","msgtype":"m.text"},"ts":1407922237000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Firefox points them out in view source","msgtype":"m.text"},"ts":1407922240000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: You're the one who should know this!","msgtype":"m.text"},"ts":1407922252000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I remember presto having a link to the validator, but not actual error reporting. Obviously I'm wrong though","msgtype":"m.text"},"ts":1407922282000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: i think basically all html parser errors","msgtype":"m.text"},"ts":1407922305000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"like \"Doctype declaration has invalid format \"","msgtype":"m.text"},"ts":1407922323000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or \"Illegal content before DOCTYPE, or DOCTYPE missing \" for about:blank :-)","msgtype":"m.text"},"ts":1407922352000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think it was all parse errors, but I'm not really sure. I wasn't really around Lkpg by that point to overhear.","msgtype":"m.text"},"ts":1407922366000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I can't see that with 12.16/Linux","msgtype":"m.text"},"ts":1407922456000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Or the web suddenly fixed all its parse errors","msgtype":"m.text"},"ts":1407922468000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"did we stop doing this when the new parser landed?","msgtype":"m.text"},"ts":1407922578000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"did you load the page with the dev tools open?","msgtype":"m.text"},"ts":1407922614000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1407922628000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I got a lot of CSS errors","msgtype":"m.text"},"ts":1407922634000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i think you're looking at the wrong console","msgtype":"m.text"},"ts":1407922667000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh, it's in opera:config","msgtype":"m.text"},"ts":1407922672000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"opera:config#UserPrefs|ShowHTMLParsingErrors","msgtype":"m.text"},"ts":1407922687000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"IIRC the intention was to have no pref and have it shown when the dev tools were open","msgtype":"m.text"},"ts":1407922712000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I'm not sure that was the intention","msgtype":"m.text"},"ts":1407922770000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But OK, old Opera has it, but not by default","msgtype":"m.text"},"ts":1407922794000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh, didn't know i had that pref on (or that it existed)","msgtype":"m.text"},"ts":1407923460000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I just wondered why I wasn't getting any parse errors and looked in opera:config","msgtype":"m.text"},"ts":1407923541000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: might be pedantic, but the as* methods, some suggest reading the data as a particular format (text, JSON, formData) whilst others return a different view of the raw data (ArrayBuffer, Blob). I guess XHR has the same issue, maybe not worth worrying about.","msgtype":"m.text"},"ts":1407924264000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: you could also see it as bytes, text, JSON, form data, with different types for bytes","msgtype":"m.text"},"ts":1407926569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: if we ever get a true Unicode string we might add an accessor for that too","msgtype":"m.text"},"ts":1407926594000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(fwiw I believe Rust has a nice convention that as_* methods are zero-cost and things that aren't just returning a different view of the underlying data are not called as_. Something like that might be nice, but I guess the ship sailed)","msgtype":"m.text"},"ts":1407926742000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"annevk: yeah, I guess it's readAsJSON vs readIntoBlob","msgtype":"m.text"},"ts":1407926751000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Although the latter suggests you provide a blob to read into","msgtype":"m.text"},"ts":1407926776000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I think it's both the same really","msgtype":"m.text"},"ts":1407926885000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does html spec define reusing of Window objects ?","msgtype":"m.text"},"ts":1407927008000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"asJSON reads as JSON and returns js obj. asBlob reads as binary and returns Blob. asText reads as UTF8 and returns string.","msgtype":"m.text"},"ts":1407927076000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"smaug____: there's only reuse of a WindowProxy object","msgtype":"m.text"},"ts":1407927089000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: which is somewhat defined, though the details of WindowProxy leave to be desired","msgtype":"m.text"},"ts":1407927103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, so there is the initial about:blank right before the new page is loaded","msgtype":"m.text"},"ts":1407927493000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and at  least in Gecko the Window is reused","msgtype":"m.text"},"ts":1407927503000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"assuming about:blank and the new page are coming from the same domain","msgtype":"m.text"},"ts":1407927531000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"about:blank is different","msgtype":"m.text"},"ts":1407927647000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"smaug____: see e.g. this note: \"In general, there is a 1-to-1 mapping from the Window object to the Document object. There are two exceptions. First, a Window can be reused for the presentation of a second Document in the same browsing context, such that the mapping is then 1-to-2. This occurs when a browsing context is navigated from the initial about:blank Document to another, with replacement enabled. Second, a Document can end u","msgtype":"m.text"},"ts":1407927776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"p being reused for several Window objects when the document.open() method is used, such that the mapping is then many-to-1.\"","msgtype":"m.text"},"ts":1407927776000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, so spec is like Gecko here","msgtype":"m.text"},"ts":1407927872000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1407927874000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is just wondering the behavior of .localStorage","msgtype":"m.emote"},"ts":1407927885000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"in case Window is reused","msgtype":"m.text"},"ts":1407927891000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"aha, \" Each Document object must have a separate object for its Window's localStorage attribute.\"","msgtype":"m.text"},"ts":1407927949000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"looks utterly confused at getting email from jgraham reviewing html5lib stuff","msgtype":"m.emote"},"ts":1407928380000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"jgraham: are you ill? :P","msgtype":"m.text"},"ts":1407928387000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: who knows!","msgtype":"m.text"},"ts":1407928424000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"did someone define mime type parsing?","msgtype":"m.text"},"ts":1407929007000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"http://mimesniff.spec.whatwg.org/#parsing-a-mime-type ... a lot of red boxes","msgtype":"m.text"},"ts":1407929055000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yes :-(","msgtype":"m.text"},"ts":1407929436000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: care to fix it?","msgtype":"m.text"},"ts":1407929792000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: there's a bunch of issues there","msgtype":"m.text"},"ts":1407929797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"maybe. currently looking at behavior of the type attribute in general","msgtype":"m.text"},"ts":1407929832000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"seems like it's a mess even ignoring the issue of mime type parsing","msgtype":"m.text"},"ts":1407929853000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah, there's a number of problems","msgtype":"m.text"},"ts":1407930037000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. with whether or not parameters should block or not, whether it's just string matching","msgtype":"m.text"},"ts":1407930050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1407930063000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"or ASCII case-insensitive string matching","msgtype":"m.text"},"ts":1407930064000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"trim or not","msgtype":"m.text"},"ts":1407930073000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"<style> and <script> are different I think","msgtype":"m.text"},"ts":1407930076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"empty string equals absent attribute or not","msgtype":"m.text"},"ts":1407930085000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"string matching of sorts is the best I think","msgtype":"m.text"},"ts":1407930099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"e.g. registry based, no parameters","msgtype":"m.text"},"ts":1407930110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"for new attributes","msgtype":"m.text"},"ts":1407930134000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders, maybe relevant: https://twitter.com/csoghoian/status/499402368694616064","msgtype":"m.text"},"ts":1407933810000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh, heh","msgtype":"m.text"},"ts":1407934403000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I thought WorkerLocation_host.htm would test that the browser supports WorkerLocation.host","msgtype":"m.text"},"ts":1407934455000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"But it only tests WorkerLocation.host and Location.host both, or neither","msgtype":"m.text"},"ts":1407934492000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1407934637000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Given new Worker(\"support/WorkerLocation.js?\")","msgtype":"m.text"},"ts":1407934755000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"What is location.search?","msgtype":"m.text"},"ts":1407934761000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, ^","msgtype":"m.text"},"ts":1407934764000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"don't you discard the search query if they're not used in a relative url, when resolving a relative url?","msgtype":"m.text"},"ts":1407935069000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"What's the benefit of sharedWorker.port vs sharedWorker.postMessage and sharedWorker.onmessage?","msgtype":"m.text"},"ts":1407935607000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Ms2ger: the spec doesn't say?","msgtype":"m.text"},"ts":1407935847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"caitp: nope","msgtype":"m.text"},"ts":1407935859000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: there's no sharedWorker.postMessage","msgtype":"m.text"},"ts":1407935913000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1407935921000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but why? Why was .port a better idea?","msgtype":"m.text"},"ts":1407935936000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"are you serious? if window.location is `https://foo.com/path/index.html?search=puppies`, and I create a worker with a relative uri `resources/worker.js`, the resolved URI would still contain `?search=puppies`? that seems dumb","msgtype":"m.text"},"ts":1407935944000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"caitp: oh no, if your relative URL does not contain a query component it won't get one","msgtype":"m.text"},"ts":1407936059000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: good question","msgtype":"m.text"},"ts":1407936076000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that makes more sense :>","msgtype":"m.text"},"ts":1407936095000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Ms2ger was asking about something else","msgtype":"m.text"},"ts":1407936126000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I assume it is related to GC","msgtype":"m.text"},"ts":1407936136000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: smaug____ might know and Hixie_ otherwise","msgtype":"m.text"},"ts":1407936176000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Cheers. serviceworker has .postMessage and .onmessage, but maybe there's some reason it should be .port","msgtype":"m.text"},"ts":1407936220000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"doesn't know. He was against all the ports","msgtype":"m.emote"},"ts":1407936239000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Hixie_ had some idea of using ports passed over channels for some kind of object capability system. But I don't know if that's related to this","msgtype":"m.text"},"ts":1407936373000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"JakeA: it seems like we should have good reasons to diverge from the existing pattern for shared workers since we are copying them mostly","msgtype":"m.text"},"ts":1407936482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: only vaguely; doesn't address why they have it at all!","msgtype":"m.text"},"ts":1407936568000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: I don't think we're coping sharedworker all that much. The lifecycle is different is very different","msgtype":"m.text"},"ts":1407936588000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"copying*","msgtype":"m.text"},"ts":1407936594000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: well the global inherits from it","msgtype":"m.text"},"ts":1407936601000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and architecture-wise in browsers there's quite a bit of sharing as I understand it","msgtype":"m.text"},"ts":1407936618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: We're not inheriting from the global","msgtype":"m.text"},"ts":1407936657000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: We don't want onconnect or name","msgtype":"m.text"},"ts":1407936670000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: I take the point about sharing, but the terminating and spinning up just-in-time is very different to sharedworker","msgtype":"m.text"},"ts":1407936719000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk, oh, the spec does say, but I guess I misread it when implementing","msgtype":"m.text"},"ts":1407936786000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Oh I see","msgtype":"m.text"},"ts":1407936789000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, or did it change recently?","msgtype":"m.text"},"ts":1407936795000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: define recently","msgtype":"m.text"},"ts":1407936805000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, since end of June","msgtype":"m.text"},"ts":1407936836000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: there was https://github.com/whatwg/url/commit/f3bd39040ee1a2aabe0863879f2fc74f17c3b0f0","msgtype":"m.text"},"ts":1407936860000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: but that doesn't really affect this","msgtype":"m.text"},"ts":1407936868000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No","msgtype":"m.text"},"ts":1407936882000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Weird","msgtype":"m.text"},"ts":1407936896000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: I think it would be good to talk the current design through with Hixie_","msgtype":"m.text"},"ts":1407936974000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: or maybe file bugs on HTML that make API reuse easier","msgtype":"m.text"},"ts":1407936987000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: e.g. service worker not having to define IDL for postMessage or even defining postMessage seems sensible","msgtype":"m.text"},"ts":1407937014000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: and HTML is certainly not fixed","msgtype":"m.text"},"ts":1407937024000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fixes Servo","msgtype":"m.emote"},"ts":1407937067000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: we're not defining postMessage at the moment, we're inheriting from Worker to get it","msgtype":"m.text"},"ts":1407937084000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: but Worker has things we don't want","msgtype":"m.text"},"ts":1407937125000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: so coordinating with Hixie_ to get a subset interface would be good","msgtype":"m.text"},"ts":1407937138000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"terminate, yeah. Hmm","msgtype":"m.text"},"ts":1407937152000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"added my suggestion in the issue","msgtype":"m.text"},"ts":1407937468000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: we're planning on adding caches for documents","msgtype":"m.text"},"ts":1407937659000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: but we worry that window.caches might break","msgtype":"m.text"},"ts":1407937667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah, figured that might be the case","msgtype":"m.text"},"ts":1407937684000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: is it just that it's too short & potentially ambiguous a name?","msgtype":"m.text"},"ts":1407937711000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: mostly that it might clash with existing content in some way","msgtype":"m.text"},"ts":1407937733000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"right now I have it behind a pref at window.navigator.caches","msgtype":"m.text"},"ts":1407937766000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: e.g. if someone has <p id=caches> <script> caches.textContent = \"global object so bad\" </script>","msgtype":"m.text"},"ts":1407937783000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(<p id=navigator> <script> navigator.textContent = \"global object so bad\" </script> fails)","msgtype":"m.text"},"ts":1407937833000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess not crucial to get right now as its not spec'd, just wanted to know what we were leaning towards so I could make my prefed-off thing match","msgtype":"m.text"},"ts":1407937867000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"so fetch() is always on the global at the moment","msgtype":"m.text"},"ts":1407937976000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"navigator.caches isn't end of the world. window.resourceCaches is… probably worse","msgtype":"m.text"},"ts":1407938004000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but yeah, fetch has the same issue","msgtype":"m.text"},"ts":1407938009000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"fetchStore  ftw","msgtype":"m.text"},"ts":1407938027000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":":sadface:","msgtype":"m.text"},"ts":1407938049000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"that was a dark time","msgtype":"m.text"},"ts":1407938054000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"annevk: why isn't this a problem for fetch as well?  should we move it to window.navigator.fetch?","msgtype":"m.text"},"ts":1407938246000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"navigator - the *other* dumping ground","msgtype":"m.text"},"ts":1407938314000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"just call it XMLHttpFetch","msgtype":"m.text"},"ts":1407938372000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1407938390000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"resourceFetch resourceCaches","msgtype":"m.text"},"ts":1407938413000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"is sick in mouth","msgtype":"m.emote"},"ts":1407938418000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: the idea was to be bold and brave","msgtype":"m.text"},"ts":1407938455000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: until we move to navigator","msgtype":"m.text"},"ts":1407938464000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wanderview: with tail between our legs","msgtype":"m.text"},"ts":1407938472000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"or some such","msgtype":"m.text"},"ts":1407938475000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not particularly advocating that... just seems like a similarly common word to \"caches\"","msgtype":"m.text"},"ts":1407938500000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess we should try putting both on Window and see","msgtype":"m.text"},"ts":1407938526000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, I'll stick it on window","msgtype":"m.text"},"ts":1407938596000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"behind a pref","msgtype":"m.text"},"ts":1407938599000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"in my local patch queue, not committed to any repo","msgtype":"m.text"},"ts":1407938611000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I'm doing a quick search for id=\"caches\" and id=\"fetch\", see how many pages have it","msgtype":"m.text"},"ts":1407938767000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: not sure if that's the only possible problem","msgtype":"m.text"},"ts":1407938852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: I'm a bit hazy on compat hazards when it comes to adding new things to the global","msgtype":"m.text"},"ts":1407938870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"agreed, it's just a vague indicator","msgtype":"m.text"},"ts":1407938969000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"view-source:http://fuskator.com uses id=\"fetch\" (site is NSFW)","msgtype":"m.text"},"ts":1407939029000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"goes and invents a proper module system to supplant the global object, oh wait... : \\","msgtype":"m.emote"},"ts":1407939068000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"didn't find other id=fetch or caches but i didn't let the grep finish","msgtype":"m.text"},"ts":1407939148000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"bit annoyed with a lot of the module stuff happening in private","msgtype":"m.text"},"ts":1407939215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"don't get me started annevk : )","msgtype":"m.text"},"ts":1407939353000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"window.fetch -> window.JSONSpdyRequest kthxbai","msgtype":"m.text"},"ts":1407939721000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: requestPermission - should it reject if permission is denied, or resolve with \"false\"","msgtype":"m.text"},"ts":1407941477000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: that naming could go either way, but I think we have historically leaned toward reject","msgtype":"m.text"},"ts":1407941503000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Cheers","msgtype":"m.text"},"ts":1407941515000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: JakeA: https://github.com/slightlyoff/ServiceWorker/issues/413","msgtype":"m.text"},"ts":1407943088000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"already there","msgtype":"m.text"},"ts":1407943099000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"need streams sorted \\o/","msgtype":"m.text"},"ts":1407943582000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I'm not following #413. We have request for input, response for output. You can provide a readable stream for the request body.","msgtype":"m.text"},"ts":1407944306000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: good catch on MessagePort btw","msgtype":"m.text"},"ts":1407944383000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"ehsan: I think there's more. Window has postMessage & onmessage too. It loops back, but I don't think that matters","msgtype":"m.text"},"ts":1407944441000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: ah, yes, Window!","msgtype":"m.text"},"ts":1407944466000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"commented on the bug","msgtype":"m.text"},"ts":1407944512000,"senderName":"ehsan","senderId":"ehsan@irc"},
{"content":{"body":"JakeA: request has both input and output","msgtype":"m.text"},"ts":1407944736000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: response has both input and output","msgtype":"m.text"},"ts":1407944742000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It depends on if you're on the server or client, is the way I think about (based on my Node background)","msgtype":"m.text"},"ts":1407945017000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"foolip: sorry about the fullscreen stuff, obviously my head isn't in it","msgtype":"m.text"},"ts":1407945021000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(I wonder if other HTTP frameworks have similar nomenclature... checking)","msgtype":"m.text"},"ts":1407945036000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Perhaps what Request and Response expose should just depend on what side of the fence people are on, but that would make them slightly less generic","msgtype":"m.text"},"ts":1407945073000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Inside the server (service worker) you want both","msgtype":"m.text"},"ts":1407945096000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Well, and that wouldn't work if you wanted to pass a Request through","msgtype":"m.text"},"ts":1407945103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Or pass a Response through","msgtype":"m.text"},"ts":1407945109000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Right","msgtype":"m.text"},"ts":1407945116000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"foolip: do you mind that I just keep trying?","msgtype":"m.text"},"ts":1407945131000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"getSnapshots()? hmm","msgtype":"m.text"},"ts":1407945696000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: wut?","msgtype":"m.text"},"ts":1407946040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fricking Twitter, overrides CMD+T","msgtype":"m.text"},"ts":1407946065000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":">> can't reproduce","msgtype":"m.text"},"ts":1407946228000,"senderName":"caitp","senderId":"caitp@irc"},
{"content":{"body":"Domenic: read and write instead of input and output?","msgtype":"m.text"},"ts":1407946390000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"in my experience, you only need readable “body” streams for both requests and responses","msgtype":"m.text"},"ts":1407946489000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"uploading is a matter of constructing a readable stream that will produce the upload on demand","msgtype":"m.text"},"ts":1407946523000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal: like https://github.com/slightlyoff/ServiceWorker/issues/413#issuecomment-52071152?","msgtype":"m.text"},"ts":1407946537000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yes, you can design a stream system where there is nothing to represent things you write to","msgtype":"m.text"},"ts":1407946552000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"besides functions that accept readable streams","msgtype":"m.text"},"ts":1407946560000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"though if you *want* to write with a producer style, you can always use a buffer, generate on the in side, vend the output as the request body","msgtype":"m.text"},"ts":1407946625000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"yes, the point of designing a writable stream abstraction is so that nobody has to write their own buffering code","msgtype":"m.text"},"ts":1407946682000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: could make Request.streamed(url, opts, function(inputStream) {  }) which returns a Request","msgtype":"m.text"},"ts":1407946703000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"and Response.streamed that does the same but for response","msgtype":"m.text"},"ts":1407946719000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I don't understand what those do","msgtype":"m.text"},"ts":1407946806000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"You write/pipe to inputStream, it comes out of the .body stream","msgtype":"m.text"},"ts":1407946904000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i wrote a sketch of an object buffer the other day, http://kriskowal.github.io/gtor/docs/promise-buffer.html","msgtype":"m.text"},"ts":1407946906000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"still working on a byte buffer with the same interface","msgtype":"m.text"},"ts":1407946933000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"The thing is, there is an actual writable socket underlying the HTTP request body. You want to expose that as directly as possible.","msgtype":"m.text"},"ts":1407946940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I think that’s a dubious assumption.","msgtype":"m.text"},"ts":1407947037000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"I mean, clearly there are people that do want that, but I am not sure it is good for them.","msgtype":"m.text"},"ts":1407947062000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"There’s a tension between having applications factor nicely and being able to squeeze that last milisecond out of the system.","msgtype":"m.text"},"ts":1407947106000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"If you expose the request as a writable stream, you necessarily end up with Node.js/Connect style applications, with request and response arguments","msgtype":"m.text"},"ts":1407947147000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and of course it’s trivial to construct a Promise CGI-like abstraction atop that foundation","msgtype":"m.text"},"ts":1407947189000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and vice versa","msgtype":"m.text"},"ts":1407947429000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"annevk: req.body.read.read()/req.body.write.write()?","msgtype":"m.text"},"ts":1407947485000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"amazing","msgtype":"m.text"},"ts":1407947520000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"kriskowal: what you're saying sounds much more like what I'd like to see","msgtype":"m.text"},"ts":1407947614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"given how high-level promises can be, why can't streams","msgtype":"m.text"},"ts":1407947627000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i have about a month to do whatever i want, so i’ve been writing and article on the subject, with code sketches","msgtype":"m.text"},"ts":1407947700000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"I really think the writable stream of a request should be revealed by constructor function like resolve/reject in promises","msgtype":"m.text"},"ts":1407947721000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i just got it to the point that there aren’t any todo comments, but a lot of further work intended…","msgtype":"m.text"},"ts":1407947722000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"been hoping it would be useful in this context https://github.com/kriskowal/gtor/blob/master/README.md","msgtype":"m.text"},"ts":1407947733000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"JakeA: why not make it public?","msgtype":"m.text"},"ts":1407947740000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"async generators are going to look like the revealing constructor pattern","msgtype":"m.text"},"ts":1407947784000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"JakeA: it's an interesting idea","msgtype":"m.text"},"ts":1407947787000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"kriskowal: cool, will try to read that later (evening here)","msgtype":"m.text"},"ts":1407947791000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Isn't the writable stream of the request for the creator of the request?","msgtype":"m.text"},"ts":1407947807000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Yeah, now that I think about it, that's probably true, isn't it...","msgtype":"m.text"},"ts":1407947825000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"makes sense, true for response too","msgtype":"m.text"},"ts":1407947828000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"body: async *function () { await yield chunk; await yield chunk; await yield chunk; }","msgtype":"m.text"},"ts":1407947845000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i suspect that those awaits should be implicit, but not sure.","msgtype":"m.text"},"ts":1407947885000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal: you have some plan for feeding the whole thing back into TC39?","msgtype":"m.text"},"ts":1407947937000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so /* client*/ new Request(url, { method: \"POST\", streamer(body => { readableSource.pipeTo(body); }) })","msgtype":"m.text"},"ts":1407947940000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the revealing constructor would look like new PromiseIterator(function (doyield, doawait, doreturn, dothrow) {})","msgtype":"m.text"},"ts":1407947942000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal: Mark?","msgtype":"m.text"},"ts":1407947942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"In the current design you could provide a null transform stream as the body of the request, but a factory method could make that easier","msgtype":"m.text"},"ts":1407947944000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"streamer needs a better name","msgtype":"m.text"},"ts":1407947947000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I don't see the factory method thing","msgtype":"m.text"},"ts":1407947974000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Just the constructor seems fine","msgtype":"m.text"},"ts":1407947979000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: not sure what you’re asking","msgtype":"m.text"},"ts":1407947999000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"Domenic: you're a fan of overloading right? We've already got a body option that can take a stream, blob, string etc, it could take a function","msgtype":"m.text"},"ts":1407948056000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"kriskowal: TC39 is reportedly working on async generators","msgtype":"m.text"},"ts":1407948058000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":";_;","msgtype":"m.text"},"ts":1407948068000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"(I don't know if I'm serious or not)","msgtype":"m.text"},"ts":1407948098000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"It does solve the \"what if I put body and streamer in the same object\" problem...","msgtype":"m.text"},"ts":1407948121000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"JakeA: bad smell here","msgtype":"m.text"},"ts":1407948121000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"wafts","msgtype":"m.emote"},"ts":1407948142000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"if we had a better name for streamer I would feel better refuting the overload","msgtype":"m.text"},"ts":1407948152000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"annevk: yeah, Domenic informed me that they are asking questions about async generators. i think they’re on the right track based on reading the presentation, and you’ll see what i think in that paper i linked","msgtype":"m.text"},"ts":1407948156000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"streamer reminds me of https://twitter.com/ChromerShow","msgtype":"m.text"},"ts":1407948297000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"tell me again what streamer does?","msgtype":"m.text"},"ts":1407948327000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"it gives you access to the writable side of the body stream","msgtype":"m.text"},"ts":1407948445000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"so, you know how we fought hard to make sure all the promise libs split the promsie and resolver?","msgtype":"m.text"},"ts":1407948643000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"so that you could pass the observer capability without implicitly passing the resolver capability","msgtype":"m.text"},"ts":1407948687000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"this is a situation where the same design pattern applies","msgtype":"m.text"},"ts":1407948713000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"the input is the resolver, the output is the observer","msgtype":"m.text"},"ts":1407948730000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but it sort-of doesn’t apply because streams are cooperative and information necessarily flows both directions for congestion control purposes","msgtype":"m.text"},"ts":1407948762000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and because streams are cancelable","msgtype":"m.text"},"ts":1407948767000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"for that reason, it *might* be acceptable for the tangled pair to expose input.output and output.input","msgtype":"m.text"},"ts":1407948805000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and i could see a generator/writer having a method like streamer. i’ll think about the name.","msgtype":"m.text"},"ts":1407948851000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal: the streamer option is only settable on construct. You give it a function that's called back with the writable stream","msgtype":"m.text"},"ts":1407948974000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So it's very much like promises","msgtype":"m.text"},"ts":1407948988000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"looks at the syntax","msgtype":"m.emote"},"ts":1407949004000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"new Request(url, { streamer: function(writableStream){...} })","msgtype":"m.text"},"ts":1407949077000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"to be exactly analogous to a promise…","msgtype":"m.text"},"ts":1407949152000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"new Request(url, {body: new Reader(function (write, close, abort) {}) // where write means yield, close means return, and abort means throw","msgtype":"m.text"},"ts":1407949200000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and probably should be called ByteReader or Uint8Reader","msgtype":"m.text"},"ts":1407949263000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"well, depending on the content type","msgtype":"m.text"},"ts":1407949278000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and of course an immediately invoked async generator should be isomorphic to a reader","msgtype":"m.text"},"ts":1407949334000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"which i believe should be {next():Promise<{value:T, done:Boolean}>, throw(Error):Promise<Iteration<T>>}","msgtype":"m.text"},"ts":1407949404000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"Is Reader an alternative proposal for the ReadableStream constructor or something different?","msgtype":"m.text"},"ts":1407949548000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"You can already provide a readable stream as the body option for a response. I think Domenic is looking for something that can be piped to.","msgtype":"m.text"},"ts":1407949601000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"it’s an abstract idea, but serves the same role as ReadableStream","msgtype":"m.text"},"ts":1407949796000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"it’s really a promise iterator","msgtype":"m.text"},"ts":1407949813000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and a promise buffer is an {in, out} pair of promise generator and promise iterator","msgtype":"m.text"},"ts":1407949831000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"so if you were to var buffer = new Buffer(); and return new Request(url, {body: buffer.out}), you could then write to buffer.in","msgtype":"m.text"},"ts":1407949879000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"or pipe to buffer.in","msgtype":"m.text"},"ts":1407949887000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and by “pipe” i mean readable.forEach(writable.yield, writable).then(writable.return, writable)","msgtype":"m.text"},"ts":1407949907000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"or just readable.pipeTo(writable, {close: true}) in Domenic’s parlance","msgtype":"m.text"},"ts":1407949966000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal reading your general theory - i've been thinking along similar lines, producer/consumer with a promise-based buffer (pipe) as a separate mediating abstraction","msgtype":"m.text"},"ts":1407950871000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"yeah, it will work","msgtype":"m.text"},"ts":1407950947000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"though, just as with promises, there is some overhead to the approach","msgtype":"m.text"},"ts":1407950984000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and just as with promises, it’s usually acceptable","msgtype":"m.text"},"ts":1407950992000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but not always. i’m sympathetic to the call to expose a lower level core.","msgtype":"m.text"},"ts":1407951029000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"See, for example, http://www.xanthir.com/b4PV0","msgtype":"m.text"},"ts":1407951133000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: yeah, same germ of an idea","msgtype":"m.text"},"ts":1407951463000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i would only name things somewhat differently","msgtype":"m.text"},"ts":1407951482000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but there certainly is a tension between single and plural names","msgtype":"m.text"},"ts":1407951509000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and whether time series values are singular or plural","msgtype":"m.text"},"ts":1407951517000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"Right, I'd make different choices on names now too.","msgtype":"m.text"},"ts":1407951527000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"which just comes down to whether plural is spatial or temporal or both","msgtype":"m.text"},"ts":1407951538000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"Name more of the helper methods FooMap, etc.","msgtype":"m.text"},"ts":1407951539000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, map is the plural of then","msgtype":"m.text"},"ts":1407951553000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"Well, flatMap is.","msgtype":"m.text"},"ts":1407951566000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i might agree :P","msgtype":"m.text"},"ts":1407951585000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i would only use the term “stream” in situations with pressure and lossless ordered values","msgtype":"m.text"},"ts":1407951622000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i’m favoring signal and behavior for pull and pull lossy time series data","msgtype":"m.text"},"ts":1407951651000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but, my thoughts are very fluid atm","msgtype":"m.text"},"ts":1407951669000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and the pun wasn’t intended, but i don’t mind enjoying it anyway","msgtype":"m.text"},"ts":1407951690000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal i might think that a buffer would be able to move data to more than one consumer. no?","msgtype":"m.text"},"ts":1407951867000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"zenparsing: depends on what you mean","msgtype":"m.text"},"ts":1407951882000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"if you were to share the output with multiple consumers, they would round-robin","msgtype":"m.text"},"ts":1407951928000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but if you mean that they would all see the entire output, you would need to explicitly fork the stream, and all the consumers would be providing pressure","msgtype":"m.text"},"ts":1407951965000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"yes - the second meaning","msgtype":"m.text"},"ts":1407951981000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"a round-robin would effectively relieve pressure on the buffer, but a fork would probably increase the pressure","msgtype":"m.text"},"ts":1407951989000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"at least, the pressure would be the maximum of the forks","msgtype":"m.text"},"ts":1407952010000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"yes exactly","msgtype":"m.text"},"ts":1407952018000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"i have a note to sketch reader.fork()","msgtype":"m.text"},"ts":1407952033000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"that might make sense if you wanted to fork binary input from a file and write tar and zip to separate files, or something like that","msgtype":"m.text"},"ts":1407952072000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"the max pressure would fit in that case","msgtype":"m.text"},"ts":1407952102000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"you could probably write it much more elegantly, but this is where i headed:  https://github.com/zenparsing/streamware/blob/master/src/Pipe.js#L131","msgtype":"m.text"},"ts":1407952413000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"zenparsing: just a sketch, and only covers object transport https://gist.github.com/kriskowal/5bf27a3c734951d2b838","msgtype":"m.text"},"ts":1407953159000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"working with byte buffers is necessarily more messy","msgtype":"m.text"},"ts":1407953249000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i took a stab at writing a byte buffer with the same interface, but i’ll have to go at it again later.","msgtype":"m.text"},"ts":1407953295000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i think that byte buffers just necessitate some different hidden internals that take the fast path, but use the promise buffer machinery for anything that is not a byte buffer to byte buffer interaction","msgtype":"m.text"},"ts":1407953377000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"thanks for the gist - i need to finish reading your article before commenting intelligent-like : )","msgtype":"m.text"},"ts":1407953519000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"the thing about byte buffers, is that (i think) you want to reuse the underlying memory as much as possible","msgtype":"m.text"},"ts":1407953635000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"yes, so you have a circular queue backed by a uint8array. yield blocks until there’s room to write your chunk, next blocks until there’s enough content to generate a chunk (which is somewhat arbitrary but length>0, length>min || closed)","msgtype":"m.text"},"ts":1407953806000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"yep - and you might also want the circular queue length (total mem allocated to the pipe) to grow or shrink within bounds","msgtype":"m.text"},"ts":1407953954000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"Byte buffers dont' want to use the same interface as object streams.","msgtype":"m.text"},"ts":1407954721000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"JakeA: ping","msgtype":"m.text"},"ts":1407955413000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: is the CacheStorage caches attribute per-origin or per-domain?  all I currently see in the spec is \"Caches are not shared across domains\", although none of the algorithms for cache explicitly mention an origin/domain check","msgtype":"m.text"},"ts":1407955558000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: good point. Origin, like IDB","msgtype":"m.text"},"ts":1407955615000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: cool, I'll write an issue to clarify that in the spec","msgtype":"m.text"},"ts":1407955645000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"https://github.com/slightlyoff/ServiceWorker/issues/415","msgtype":"m.text"},"ts":1407955751000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1407955755000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: cheers!","msgtype":"m.text"},"ts":1407955829000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"i think i have caught up with JakeA’s idea of allowing body to be a function","msgtype":"m.text"},"ts":1407955883000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"the way i got here…","msgtype":"m.text"},"ts":1407955911000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i sketched a promise buffer as an {in, out} promise generator and iterator pair","msgtype":"m.text"},"ts":1407955942000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"kriskowal: 1% battery so sorry if late reply","msgtype":"m.text"},"ts":1407955956000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np, working on the narrative…","msgtype":"m.text"},"ts":1407955966000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"a deferred is conceptually an {in, out} {resolver, promise} pair","msgtype":"m.text"},"ts":1407955998000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but in that case, we have decided to be very output centric. we expose Promise only, and the constructor reveals the input side","msgtype":"m.text"},"ts":1407956035000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"if streams are a plural analog of Promise, then we would probably expose new Stream(function (_yield, _return, _throw) {}) in the same way we expose new Promise(function (_return, _throw) {})","msgtype":"m.text"},"ts":1407956102000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and we could expose Stream.buffer() -> {in, out} in the same way we could expose Promise.defer() -> {in, out} or {resolver, promise}","msgtype":"m.text"},"ts":1407956136000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"which would lead us toward new Request/Response(… {body: new Stream(function (_yield, _return, _throw) {})})","msgtype":"m.text"},"ts":1407956173000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but that would introduce a layer of buffering that Domenic and his constituents would like to avoid","msgtype":"m.text"},"ts":1407956189000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"and that layer of buffering could be eliminated by unwrapping the revealing constructor like new Request(url, {body: function (_yield, _return, _throw) {}})","msgtype":"m.text"},"ts":1407956229000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"which is actually quite elegant","msgtype":"m.text"},"ts":1407956235000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"JakeA: end of line","msgtype":"m.text"},"ts":1407956281000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"jorendorff: why are instantiate and translate diffrent hooks?","msgtype":"m.text"},"ts":1407956731000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"translate is a totally different thing","msgtype":"m.text"},"ts":1407956784000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"translate converts code from some other language to JS","msgtype":"m.text"},"ts":1407956799000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: sure but why couldn't that happen in instantiate? Just have instantiate return either a string or an object, instead of undefined or an object.","msgtype":"m.text"},"ts":1407957469000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: oh - well the reason there are different hooks to begin with, is that the theory is people will want to hack the loader","msgtype":"m.text"},"ts":1407957591000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"sure, but why those two hooks? Why not three? or one?","msgtype":"m.text"},"ts":1407957633000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't understand the value of separating thoe","msgtype":"m.text"},"ts":1407957641000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"the browser doesn't do any work between them, does it?","msgtype":"m.text"},"ts":1407957648000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i don't know. samth and wycats know more about them","msgtype":"m.text"},"ts":1407957651000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"it just passes the results of one into the other one","msgtype":"m.text"},"ts":1407957652000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: the loader doesn't do any work between those two... i don't think","msgtype":"m.text"},"ts":1407957663000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"in theory we could have had one giant async hook","msgtype":"m.text"},"ts":1407957674000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"right, and i would have liked that","msgtype":"m.text"},"ts":1407957686000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"but","msgtype":"m.text"},"ts":1407957687000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"the idea is to break up the process into a number of steps that it makes sense to override","msgtype":"m.text"},"ts":1407957688000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"so if someone wants to write a translation plugin, they don't need to opt into a separate plugin architecture (like require.js) to do that","msgtype":"m.text"},"ts":1407957711000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1407957726000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"wycats: when would you have one bit of code overriding translate and another independent bit of code overriding instantiate?","msgtype":"m.text"},"ts":1407957763000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"translate might be used for security","msgtype":"m.text"},"ts":1407957781000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"or for example to compile CS to JS","msgtype":"m.text"},"ts":1407957789000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"but once CoffeeScript is compiled to JS, the normal instantiate rules apply","msgtype":"m.text"},"ts":1407957799000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"and you may want your compiled CoffeeScript to use an instantiate hook separately defined for AMD compat","msgtype":"m.text"},"ts":1407957814000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"(AMD written in CoffeeScript)","msgtype":"m.text"},"ts":1407957819000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I honestly don't have a ton of time right this second (or most seconds) :/","msgtype":"m.text"},"ts":1407957922000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"realtime chat is great if you can swing it","msgtype":"m.text"},"ts":1407957948000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I have a job and whatnot","msgtype":"m.text"},"ts":1407957956000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"I can try to schedule time to hop in and chat -- gonna be hard to do on an ad hoc basis when tagged in","msgtype":"m.text"},"ts":1407957978000,"senderName":"wycats","senderId":"wycats@irc"},
{"content":{"body":"Hixie_: I think virtually every conceivable use case for translate will not also want to overload instantiate","msgtype":"m.text"},"ts":1407958238000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"they're pretty independent","msgtype":"m.text"},"ts":1407958251000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"about as independent as you can get","msgtype":"m.text"},"ts":1407958258000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: fair enough. It's hard for me to tell since the spec doesn't give any examples or anything explaining why you'd want to use the features.","msgtype":"m.text"},"ts":1407959181000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yeah, allen's view is that if you give any kind of rationale or even description of what something does, someone will interpret that as normative and do something stupid with it","msgtype":"m.text"},"ts":1407959268000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"therefore, paint over the signposts","msgtype":"m.text"},"ts":1407959278000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"i'm told HTML has in fact seen that vexing phenomenon, though (thankfully) you've not chosen the same response","msgtype":"m.text"},"ts":1407959333000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Someone will, certainly","msgtype":"m.text"},"ts":1407959341000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"More people will benefit, though","msgtype":"m.text"},"ts":1407959348000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"in the HTML spec we just try to paint \"NOT NORMATIVE\" signs eveywhere","msgtype":"m.text"},"ts":1407959378000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"And sometimes it catches bugs where the normative text doesn't specify what it means to","msgtype":"m.text"},"ts":1407959380000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"at this point we have bigger problems from the fact that the w3c is forking the spec than from the non-normative content","msgtype":"m.text"},"ts":1407959395000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: if this Loader stuff ever actually takes off, the translate hook is where you go to monkeypatch new *language features* into older browsers","msgtype":"m.text"},"ts":1407959432000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"jorendorff: and instantiate?","msgtype":"m.text"},"ts":1407959465000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"dherman had a gist illustrating this, but i forget where it was :(","msgtype":"m.text"},"ts":1407959473000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: well :( instantiate is an upgrade path --- it lets you load non-ES6 modules and use them with an 'import' decl, just like ES6 modules.","msgtype":"m.text"},"ts":1407959523000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"Hixie_: so you can have a hybrid app, you don't have to make a Big Leap to es6 modules","msgtype":"m.text"},"ts":1407959545000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"kinda like translating from old-ES to new-ES? :-)","msgtype":"m.text"},"ts":1407959564000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so i think my biggest problem with reusing the ES6 module loader thing to define the Web's dependency system is that there's no good way for me to declare dependencies before the 'fetch' hook. I really need a way to predeclare the dependencies somehow.","msgtype":"m.text"},"ts":1407959576000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: touche","msgtype":"m.text"},"ts":1407959589000,"senderName":"jorendorff","senderId":"jorendorff@irc"},
{"content":{"body":"(even for ES6 modules)","msgtype":"m.text"},"ts":1407959590000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"like, say you want to import a style sheet. In 'locate' I figure out you mean the <link>, in 'fetch' I tell the <link> \"ok, time to go fetch your stuff\" and I chain their promise onto the \"fetch\" result","msgtype":"m.text"},"ts":1407959653000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"translate's a no-op","msgtype":"m.text"},"ts":1407959658000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and in instantiate I can finally say \"oh by the way, this style sheet depends on that one over there\"","msgtype":"m.text"},"ts":1407959669000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"by which time it's too late","msgtype":"m.text"},"ts":1407959674000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I really want \"locate\" or \"fetch\" to be able to add dependencies","msgtype":"m.text"},"ts":1407959692000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wonders what \"execute\" is supposd to do","msgtype":"m.emote"},"ts":1407959827000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as in instantiateResult.execute?","msgtype":"m.text"},"ts":1407960003000,"senderName":"zenparsing","senderId":"zenparsing@irc"},
{"content":{"body":"zenparsing: yeah","msgtype":"m.text"},"ts":1407964206000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: do you know what instantiateResult.execute is supposed to do?","msgtype":"m.text"},"ts":1407965526000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: can you point me at what you’re looking at for reference?","msgtype":"m.text"},"ts":1407965697000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"http://people.mozilla.org/~jorendorff/es6-draft.html","msgtype":"m.text"},"ts":1407965706000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1407965740000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"(and http://www.gliffy.com/go/publish/6040024 is my conversion of that to a flowchart)","msgtype":"m.text"},"ts":1407965748000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"this is my implementation of something similar for commonjs in the browser https://github.com/montagejs/mr/blob/v2/common.js#L93-L208","msgtype":"m.text"},"ts":1407965940000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but you want definitive answers, not educated guesses, so i’ll lurk","msgtype":"m.text"},"ts":1407965968000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"something similar to what?","msgtype":"m.text"},"ts":1407965984000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"a loader","msgtype":"m.text"},"ts":1407965997000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i'm happy with educated guesses :-)","msgtype":"m.text"},"ts":1407966001000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i'm not sure how to interpret that code in the context of the question about instantiateResult.execute though","msgtype":"m.text"},"ts":1407966032000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1407966037000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i believe that execute is equivalent to calling the module factory function","msgtype":"m.text"},"ts":1407966047000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"so all dependencies have been linked, and it’s just a matter of stepping through the module","msgtype":"m.text"},"ts":1407966078000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"so say the module is an <img>. What should the execute callback do? nothing?","msgtype":"m.text"},"ts":1407966100000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"right, nothing","msgtype":"m.text"},"ts":1407966110000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"how about a style sheet. Should execute be the thing that adds it to the list of active sheets?","msgtype":"m.text"},"ts":1407966123000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"eh, perhaps set the default exports to whatever is appropriate","msgtype":"m.text"},"ts":1407966127000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"style sheets are an interesting case because they have their own internal notions of dependency","msgtype":"m.text"},"ts":1407966148000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"but if style sheets were integrated, i would expect @import() to be resolved by the loader","msgtype":"m.text"},"ts":1407966169000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"well that is exactly what i'm trying to spec right now","msgtype":"m.text"},"ts":1407966188000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and i would expect that the order of execution would be important for priority","msgtype":"m.text"},"ts":1407966206000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"i would expect that a loaded but not executed style sheet would have no effect. not sure whether that’s possible in the context of ES6 modules though.","msgtype":"m.text"},"ts":1407966247000,"senderName":"kriskowal","senderId":"kriskowal@irc"},
{"content":{"body":"jorendorff: while i'm at it, in \"15.2.4.1 LoadModule(loader, name, options) Abstract Operation\", step 9 refers to \"source\", but that doesn't seem to have ever been declared? what is it set to?","msgtype":"m.text"},"ts":1407966370000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jorendorff: also, what is \"name\" in 15.2.5.2.2 AddLoadToLinkSet(linkSet, load) Abstract Operation 3.c.i.1 ?","msgtype":"m.text"},"ts":1407968273000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"files 8 spec bugs for Modules","msgtype":"m.emote"},"ts":1407969096000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"about \"if you give any kind of rationale or even description of what something does, someone will interpret that as normative and do something stupid with it\" I think there's a lot to be said for choosing to adopt that and being consistent about not deviating from it","msgtype":"m.text"},"ts":1407969108000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah except there's still some notes and stuff in the ES spec","msgtype":"m.text"},"ts":1407969126000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"just search for \"NOTE\"","msgtype":"m.text"},"ts":1407969141000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ah ok","msgtype":"m.text"},"ts":1407969145000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(plus it makes the spec unreadable)","msgtype":"m.text"},"ts":1407969158000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"a lot of things seem to make the ES spec unreadable for most people","msgtype":"m.text"},"ts":1407969189000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it's pretty clearly not meant to be read by most people","msgtype":"m.text"},"ts":1407969204000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: but that said, you're not most people","msgtype":"m.text"},"ts":1407969213000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"and if it's unreadable for you, that's a problem","msgtype":"m.text"},"ts":1407969224000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: http://www.gliffy.com/go/publish/6040024","msgtype":"m.text"},"ts":1407969256000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I think even with the WHATWG HTML we have plenty of examples of people mis-interpreting non-normative parts as normative -- and mis-interpreting the document-conformance requirements as UA conformance requirements","msgtype":"m.text"},"ts":1407969288000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"jorendorff: so, is \"deps\" (returned from the \"instantiate\" hook\") intentionally supposed to be not checked as being a string? is that how i'm supposed to send metadata from \"instantiate\" to \"normalize\"?","msgtype":"m.text"},"ts":1407969291000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"looks","msgtype":"m.emote"},"ts":1407969293000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: oh yeah no kidding","msgtype":"m.text"},"ts":1407969300000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ah yeah I had seen that diagram","msgtype":"m.text"},"ts":1407969320000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: please don't show that diagram to other people :)","msgtype":"m.text"},"ts":1407969334000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1407969336000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's too scary","msgtype":"m.text"},"ts":1407969337000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"it has massively helped in my understanding of the spec","msgtype":"m.text"},"ts":1407969348000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"glad for that at least","msgtype":"m.text"},"ts":1407969357000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"specifically, being able to follow the promise chain (which isn't explicitly in the spec anywhere)","msgtype":"m.text"},"ts":1407969368000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"a h yeah","msgtype":"m.text"},"ts":1407969381000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(and which traverses the spec in a completely different order than the spec's explicit internal calls)","msgtype":"m.text"},"ts":1407969389000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I have been following some of your comments and questions here on IRC about the promise-chain stuff","msgtype":"m.text"},"ts":1407969417000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"looks like Reflect.Loader.prototype.define() doesn't let you use a non-string name...","msgtype":"m.text"},"ts":1407969417000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: my main feeling from reading your questions and the responses here is, glad it's you and not me :)","msgtype":"m.text"},"ts":1407969463000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1407969468000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1407969500000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"anyway, I think given that we're working in an interactive medium, we could take more advantage of the interactivity as far is presenting the non-normative parts to readers -- through more use of pop-ups, etc.","msgtype":"m.text"},"ts":1407969577000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"e.g., make the non-normative stuff into annotations","msgtype":"m.text"},"ts":1407969607000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: just hope that anyone of value that needs that img isn't color blind","msgtype":"m.text"},"ts":1407969608000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"the annotations approach is what I tried to do with http://es5.github.io (which was inspired by a hyperlinked version of the spec that jorendorff had made)","msgtype":"m.text"},"ts":1407969677000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I think that would require a version of the spec that wasn't in Word ;)","msgtype":"m.text"},"ts":1407969692000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1407969704000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"well Hixie_ should be glad at least that it now has internal hyperlinks","msgtype":"m.text"},"ts":1407969722000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: I didn't know you were the one behind es5.github.io!! I've been using that for years; it is brilliant.","msgtype":"m.text"},"ts":1407969723000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"before jorendorff got involved in production of it I think none of the uses of the defined terms in the spec where hyperlinked back to the defintions","msgtype":"m.text"},"ts":1407969782000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: btw I think the dfn pop-ups in the HTML spec could be inspiration for adding some more stuff like that -- and the implementation-status annotations","msgtype":"m.text"},"ts":1407969861000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"once i've actually done some real work (e.g. this loader/dependency thing) I plan to go back and do more on the HTML spec pipeline","msgtype":"m.text"},"ts":1407969921000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I think if we had a way for readers/users of the spec to submit annotations that would get added to a set of annotations for the spec after review, that would be great","msgtype":"m.text"},"ts":1407969922000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: yeah, I figured","msgtype":"m.text"},"ts":1407969930000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but i wasted enough time just getting more or less to parity :-)","msgtype":"m.text"},"ts":1407969943000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heh","msgtype":"m.text"},"ts":1407969949000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"another thing that it seems has always worked really well is the way the PHP docs incorporate user comments and examples (and the many other projects that since adopted similar things for their docs)","msgtype":"m.text"},"ts":1407970064000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"90% of the utility to users of those kinds of docs is in those user-contributed comments and examples","msgtype":"m.text"},"ts":1407970130000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"of course a spec is something quite a bit different, but stil","msgtype":"m.text"},"ts":1407970143000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the spec annotations get a lot of spam as it is","msgtype":"m.text"},"ts":1407970207000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and that's with them being basicaly invisible to most users","msgtype":"m.text"},"ts":1407970217000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"similarly, we had to clamp down on the wiki signups because of spam","msgtype":"m.text"},"ts":1407970245000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: sure, that's the cost of enabling those kinds of things","msgtype":"m.text"},"ts":1407970501000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"pretty high cost","msgtype":"m.text"},"ts":1407970509000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"speaking of which","msgtype":"m.text"},"ts":1407970511000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wanna be on the hook to give people wiki accounts? :-)","msgtype":"m.text"},"ts":1407970522000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: well these days I think a better way to collect user contributions would be using a mechanism based on gihub forks and PRs","msgtype":"m.text"},"ts":1407970556000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: see what html5please does","msgtype":"m.text"},"ts":1407970572000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hixie_: I am already on the hook!","msgtype":"m.text"},"ts":1407970579000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"you get teh admin@ e-mail?","msgtype":"m.text"},"ts":1407970604000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I've done a bunch of wiki user-account creations already","msgtype":"m.text"},"ts":1407970605000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh, cool","msgtype":"m.text"},"ts":1407970610000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: no, but would be glad to be on admin@ mail to help with whatever else is needed there","msgtype":"m.text"},"ts":1407970634000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"also, http://html5please.us/ o_O","msgtype":"m.text"},"ts":1407970653000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, cool","msgtype":"m.text"},"ts":1407970657000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"let me add you! :-D","msgtype":"m.text"},"ts":1407970666000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"cool","msgtype":"m.text"},"ts":1407970692000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lol. of course that site is related to Insurance Rates","msgtype":"m.text"},"ts":1407970903000,"senderName":"boogyman","senderId":"boogyman@irc"},
{"content":{"body":"MikeSmith: mike⊙wo ?","msgtype":"m.text"},"ts":1407970981000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: yeah please","msgtype":"m.text"},"ts":1407971030000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Just try this link. If it doesn't work right away, I'll switch to Vidyo","msgtype":"m.text"},"ts":1407971286000,"senderName":"roc","senderId":"roc@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1407971290000,"senderName":"roc","senderId":"roc@irc"}
]