[
{"content":{"body":"annevk: re script vs realm - my understanding of how ES is embedded in HTML is that every realm has a script or module","msgtype":"m.text"},"ts":1559024974000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: that is probably true; with n:m","msgtype":"m.text"},"ts":1559026083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jochen__: I think the problem is that promises are not always allocated with the appropriate context? If I can guess what this is about without context","msgtype":"m.text"},"ts":1559026162000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"the question from smaug about host promise resolver thing","msgtype":"m.text"},"ts":1559026386000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"where to get the mute error flag from","msgtype":"m.text"},"ts":1559026410000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"the spec says \"from the script of the context\"","msgtype":"m.text"},"ts":1559026416000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"which I claim is always defined (module implementation bugs)","msgtype":"m.text"},"ts":1559026430000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"If the current script is passed across the IDL boundary so it can use that to create promises, right?","msgtype":"m.text"},"ts":1559027048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Not sure how it is without that","msgtype":"m.text"},"ts":1559027062000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"passing the IDL boundary doesn't change the ES execution context stack","msgtype":"m.text"},"ts":1559027779000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: if that stack is global and that is what Chrome uses when a spec algorithm creates a promise that might be good","msgtype":"m.text"},"ts":1559028852000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i mean, what else would you do?","msgtype":"m.text"},"ts":1559029699000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"a promise is an ES object, so it needs to be constructed via a call to its constructor which is part of a realm","msgtype":"m.text"},"ts":1559029725000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"in any implementation it should be impossible to construct a promise without a realm","msgtype":"m.text"},"ts":1559029755000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: I'm guessing Gecko has some C++ equivalent, as most implementations do for non-promise objects. And for those implementations do often vary on what realm is used.","msgtype":"m.text"},"ts":1559029902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ok, that's possible","msgtype":"m.text"},"ts":1559029939000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"the spec however only knows one kind of promise","msgtype":"m.text"},"ts":1559029958000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"In theory it only knows one kind of document, yet it creates one before a global exist","msgtype":"m.text"},"ts":1559030093000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Anyway, all I'm saying is that there's plenty of opportunity for confusion here","msgtype":"m.text"},"ts":1559030106000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep :/","msgtype":"m.text"},"ts":1559030148000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"And if there's indeed a simple stack to look at for creating promises we should clarify that in the issue and hopefully eventually promise creation will be explicit enough that it's also clear there","msgtype":"m.text"},"ts":1559030161000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://tc39.github.io/ecma262/#execution-context-stack","msgtype":"m.text"},"ts":1559030278000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"jochen__: ooh also, reading https://github.com/whatwg/html/issues/4637 about the lazy allocation that does seem very weird","msgtype":"m.text"},"ts":1559030345000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, that's blink's code being funky","msgtype":"m.text"},"ts":1559030474000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"don't blame me for it","msgtype":"m.text"},"ts":1559030477000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"the spec is clear, it says it wants \"a new promise\" https://www.w3.org/2001/tag/doc/promises-guide/#a-new-promise","msgtype":"m.text"},"ts":1559030486000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"(should whatwg html link to this in all the algorithms that mention \"let p be a new promise\"?)","msgtype":"m.text"},"ts":1559030514000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"fwiw, there's a long term plan to merge that into IDL: https://github.com/heycam/webidl/issues/490","msgtype":"m.text"},"ts":1559030825000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"ah, cool","msgtype":"m.text"},"ts":1559030861000,"senderName":"jochen__","senderId":"jochen__@irc"},
{"content":{"body":"yeah, it should be merged","msgtype":"m.text"},"ts":1559031141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, lazy allocation + cache is probably okay, as long as we add a test for it","msgtype":"m.text"},"ts":1559031169000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hi there. Could any \"autoconfirmed user\" add a user account for me (roel.arentsâŠ™le) on wiki.whatwg.org? Because I'd like to propose \"application-version\" as a Meta Name Extension.","msgtype":"m.text"},"ts":1559050728000,"senderName":"roelal","senderId":"roelal@irc"},
{"content":{"body":"roelal: username?","msgtype":"m.text"},"ts":1559051564000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"roelal is my preferred username for the wiki","msgtype":"m.text"},"ts":1559051789000,"senderName":"roelal","senderId":"roelal@irc"},
{"content":{"body":"roelal: you'll get an email","msgtype":"m.text"},"ts":1559051826000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"received it, thx!","msgtype":"m.text"},"ts":1559051889000,"senderName":"roelal","senderId":"roelal@irc"},
{"content":{"body":"jochen__: annevk my guess is that Blink/V8 associate promises with realms, and use that to figure out the muted error checks. Whereas the error reporting parts of the spec use \"the current script\", instead of \"the promise's realm\". Probably the spec should be more like the Blink/V8 model since it's more straightforward and well-defined at all times. But then we get into the issue where we have the same problem for sync errors,","msgtype":"m.text"},"ts":1559055258000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"and that's a whole big mess...","msgtype":"m.text"},"ts":1559055258000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, the lazy getting is also weird, but if defined I guess I don't mind it so much","msgtype":"m.text"},"ts":1559055508000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"is it intended that given s' = URL serializer(URL parser(s)), s' will parse without validation errors?","msgtype":"m.text"},"ts":1559077082000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: https://bugzilla.mozilla.org/show_bug.cgi?id=1554014 :(","msgtype":"m.text"},"ts":1559082223000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"Waugh","msgtype":"m.text"},"ts":1559082606000,"senderName":"Domenic","senderId":"Domenic@irc"}
]