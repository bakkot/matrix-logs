[
{"content":{"body":"Hixie: sorry, I was not around, but I'll check your fix","msgtype":"m.text"},"ts":1391404678000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"Hixie: I'm in UTC+7 (Vietnam) now so I'll seldom be online when you are","msgtype":"m.text"},"ts":1391404708000,"senderName":"foolip","senderId":"foolip@irc"},
{"content":{"body":"should DOMException have [Exposed] also? annevk-cloud__ heycam|away","msgtype":"m.text"},"ts":1391423109000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: DOMException will be defined as part of IDL","msgtype":"m.text"},"ts":1391425050000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: in terms of JavaScript","msgtype":"m.text"},"ts":1391425051000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm not being logged","msgtype":"m.text"},"ts":1391425150000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh, is","msgtype":"m.text"},"ts":1391433414000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: ok. could you put in a note saying that the plan is to have it available in workers?","msgtype":"m.text"},"ts":1391433622000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"What's the rush?","msgtype":"m.text"},"ts":1391433944000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is [Expsosed] even defined for non-interface things?","msgtype":"m.text"},"ts":1391433945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"about https://www.w3.org/Bugs/Public/show_bug.cgi?id=24480 maybe we should add back the \"Web developer view\" button","msgtype":"m.text"},"ts":1391436183000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"or \"Hide UA implementation details\" or whatever it was called","msgtype":"m.text"},"ts":1391436202000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"because the commenter appears to be perturbed about the \"run synthetic click activation steps\" algorithm being in the section that gives info about the various types of content (flow, phrasing, etc.)","msgtype":"m.text"},"ts":1391436326000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"and because the experiment of providing a separate \"Developer Edition\" spec doesn't appear to have become a huge success","msgtype":"m.text"},"ts":1391436373000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"It hasn't?","msgtype":"m.text"},"ts":1391436509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"People rave about it on Twitter quite often","msgtype":"m.text"},"ts":1391436509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"developers.whatwg.org that is","msgtype":"m.text"},"ts":1391436509000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1391436556000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"I guess I'm just out of touch","msgtype":"m.text"},"ts":1391436562000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"and personally I really prefer Hixie's styling to the styling in that developer version","msgtype":"m.text"},"ts":1391436613000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"I find that developer version harder to read","msgtype":"m.text"},"ts":1391436648000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"Habit? :)","msgtype":"m.text"},"ts":1391436665000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"MikeSmit1: also, the person giving feedback in that bug is zcorpan, he's well aware of all those things","msgtype":"m.text"},"ts":1391436797000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"eh?","msgtype":"m.text"},"ts":1391436816000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"\"The MathML3 DTD has been updated\"","msgtype":"m.text"},"ts":1391436817000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Good that someone is doing useful work","msgtype":"m.text"},"ts":1391436826000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk: zcorpan filed that bug?","msgtype":"m.text"},"ts":1391436836000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"oh yeah I see he did","msgtype":"m.text"},"ts":1391436861000,"senderName":"MikeSmit1","senderId":"MikeSmit1@irc"},
{"content":{"body":"MikeSmith: i filed it because of https://www.w3.org/Bugs/Public/show_bug.cgi?id=24473","msgtype":"m.text"},"ts":1391437837000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"loooks","msgtype":"m.emote"},"ts":1391437862000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"ah yeah","msgtype":"m.text"},"ts":1391437889000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I <3 the developer version and refer people to it often","msgtype":"m.text"},"ts":1391438011000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: no rush but it might help test writers an implementers when deciding what self.DOMException should be in workers :-)","msgtype":"m.text"},"ts":1391438013000,"senderName":"zcorpan_","senderId":"zcorpan_@irc"},
{"content":{"body":"zcorpan_: what is self.Error in a worker?","msgtype":"m.text"},"ts":1391438077000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I suspect we're basically waiting for heycam to recover from jetlag at this point","msgtype":"m.text"},"ts":1391438141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Unless he went somewhere else after Seattle","msgtype":"m.text"},"ts":1391438141000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it's a function","msgtype":"m.text"},"ts":1391438285000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: everything defined in JS is available in workers i think","msgtype":"m.text"},"ts":1391438286000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I would assume that, yes","msgtype":"m.text"},"ts":1391438359000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So http://people.mozilla.org/~jorendorff/es6-draft.html#sec-%realm%.prototype.eval lacks a hook for CSP","msgtype":"m.text"},"ts":1391438386000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: should I just file a bug against JS for that?","msgtype":"m.text"},"ts":1391438395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"wonders how chromium people look at diffs","msgtype":"m.emote"},"ts":1391438856000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I filed https://bugs.ecmascript.org/show_bug.cgi?id=2494","msgtype":"m.text"},"ts":1391439142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: interesting. might be worth bringing in dave to the conversation since i think he's heading up the realm work.","msgtype":"m.text"},"ts":1391441060000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: added dherman","msgtype":"m.text"},"ts":1391441099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: I'm curious if there's more such trickery","msgtype":"m.text"},"ts":1391441777000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I think in pure ES5, eval and Function are the only eval-er.","msgtype":"m.text"},"ts":1391441830000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ES6 adds Realm and GeneratorFunction; it might add some stuff in Loader but I think that was all encapsulated by Realm.","msgtype":"m.text"},"ts":1391441853000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: there's structured clones of course which apparently are handled in the JS engine already","msgtype":"m.text"},"ts":1391441855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Seems bad to set these precedents that specification authors can just hack the JS engine on the side, although you wouldn't want to gate everything on TC39 either","msgtype":"m.text"},"ts":1391441855000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah...","msgtype":"m.text"},"ts":1391441880000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Oooh, so Realm needs a flag too for CSP","msgtype":"m.text"},"ts":1391442054000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Loader too http://people.mozilla.org/~jorendorff/es6-draft.html#sec-loader.prototype.eval","msgtype":"m.text"},"ts":1391442266000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hmm both reference IndirectEval but that doesn't exist according to Ctrl+F","msgtype":"m.text"},"ts":1391442292000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"seems like this stuff is still WIP","msgtype":"m.text"},"ts":1391442296000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Note that I also filed a complaint with those responsible: http://lists.w3.org/Archives/Public/public-webappsec/2014Feb/","msgtype":"m.text"},"ts":1391442342000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"At some point we need some kind of low-tolerance policy for forking someone else their algorithm in your own specification without prior coordination","msgtype":"m.text"},"ts":1391442442000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"looks for someone with experience with the v8 api","msgtype":"m.emote"},"ts":1391442443000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"has some","msgtype":"m.emote"},"ts":1391442547000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"being the author of an embedding alternative to node","msgtype":"m.text"},"ts":1391442563000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Ms2ger: ^","msgtype":"m.text"},"ts":1391442590000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but I have to leave soon, so I might reply later","msgtype":"m.text"},"ts":1391442598000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Domenic_: Function isn't relevant as an eval-er in ES5, given it's creates a new scope whose containing environment is the global-scope.","msgtype":"m.text"},"ts":1391443162000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(likewise indirect eval)","msgtype":"m.text"},"ts":1391443172000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I imagine CSP still cares.","msgtype":"m.text"},"ts":1391443359000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"if CSP doesn't care about indirect eval then it won't care about Loader or Realm either","msgtype":"m.text"},"ts":1391443388000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It cares","msgtype":"m.text"},"ts":1391443396000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: changes to the URL spec seem pretty great.","msgtype":"m.text"},"ts":1391443453000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I like my new advice section","msgtype":"m.text"},"ts":1391443471000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I made it up in bed in SF and then forgot about it for a while","msgtype":"m.text"},"ts":1391443484000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: Yeah. CSP cares. But CSP also needs to care about things at the DOM level to do what it needs.","msgtype":"m.text"},"ts":1391443488000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic_: (e.g., var s = document.createElement(\"script\"); s.textContent = \"blah\"; document.documentElement.appendChild(s); or whatever)","msgtype":"m.text"},"ts":1391443523000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"And fetch. CSP affects all.","msgtype":"m.text"},"ts":1391443539000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"This would be so much less confusing if I weren't in two conversations about two different CSPs. :)","msgtype":"m.text"},"ts":1391443569000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: still not sure i get \"scheme data.\" An example or two of the decomposition might be useful.","msgtype":"m.text"},"ts":1391443585000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: data:text/html,teehee","msgtype":"m.text"},"ts":1391443618000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"text/html,teehee is scheme data, but noted","msgtype":"m.text"},"ts":1391443629000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ahhh interesting.","msgtype":"m.text"},"ts":1391443632000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=580234 is INVALID now right?","msgtype":"m.text"},"ts":1391443646000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah I guess","msgtype":"m.text"},"ts":1391443669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: depending on what UAs align on for the URL parser","msgtype":"m.text"},"ts":1391443677000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: but yeah, that bug won't be used for aligning that","msgtype":"m.text"},"ts":1391443688000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan, as long as you have a test :)","msgtype":"m.text"},"ts":1391443695000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic_: most of this rewrite was done to fix blob URLs btw","msgtype":"m.text"},"ts":1391443761000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: where we introduce a component called \"object\" that holds a structured clone of the Blob the scheme data of a \"blob\" URL points to, which is then used when fetching...","msgtype":"m.text"},"ts":1391443800000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ah interesting... it might be worth pointing out in a non-normative section how blob URLs are indeed covered by the spec. I didn't even think of them, but it's great that they are covered.","msgtype":"m.text"},"ts":1391443857000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ms2ger: http://web-platform.test:8000/websockets/constructor/017.html","msgtype":"m.text"},"ts":1391443874000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Well, I need to write that integration bit still :-)","msgtype":"m.text"},"ts":1391443877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"It's going to be fairly explicit once everything is done","msgtype":"m.text"},"ts":1391443890000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan, nice how I can just click that link now :)","msgtype":"m.text"},"ts":1391443945000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hmm i don't get a result for that test","msgtype":"m.text"},"ts":1391443963000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I get all passes","msgtype":"m.text"},"ts":1391443983000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"yeah now i do too. had messed up my working copy","msgtype":"m.text"},"ts":1391444430000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic_: What were the Promise changes that were decided against?","msgtype":"m.text"},"ts":1391444512000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Domenic_: I assume it was \"welp, monads suck\".","msgtype":"m.text"},"ts":1391444580000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Also, presented without comment: http://lists.w3.org/Archives/Public/www-style/2014Feb/0024.html","msgtype":"m.text"},"ts":1391444594000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I see the stack of links","msgtype":"m.text"},"ts":1391444635000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I see the sender","msgtype":"m.text"},"ts":1391444638000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"closes tabs","msgtype":"m.emote"},"ts":1391444643000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"*tab","msgtype":"m.text"},"ts":1391444646000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"And not you","msgtype":"m.text"},"ts":1391444650000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Good job, you passed the test.","msgtype":"m.text"},"ts":1391444656000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_, do you know if there's a way to look at a side-by-side diff of a blink revision?","msgtype":"m.text"},"ts":1391444702000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No, I don't know.","msgtype":"m.text"},"ts":1391444712000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"is not much of a Blink dev.","msgtype":"m.emote"},"ts":1391444745000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"looks for blink devs, then :)","msgtype":"m.emote"},"ts":1391444769000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins_: yeah that's what it sounds like. Minutes coming out soon...","msgtype":"m.text"},"ts":1391444912000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I hate that the existing shitty promises led to monadic promises seeming like a complication rather than a simplification, as they got bolted on to the side.","msgtype":"m.text"},"ts":1391444972000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"And it means that we *will* have the possibility of problems with async maps, as we discussed in the Service Worker f2f. :/","msgtype":"m.text"},"ts":1391445000000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"sees monads, tunes out","msgtype":"m.emote"},"ts":1391445009000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Le sigh.  I also fucking hate the word \"monad\", because it's a crappy nonsense word that looks confusing.","msgtype":"m.text"},"ts":1391445048000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Like using \"Functor\" for \"Mappable\".","msgtype":"m.text"},"ts":1391445058000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"\"monad\" just sounds like a lonely nomad","msgtype":"m.text"},"ts":1391445091000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Which isn't at all scary","msgtype":"m.text"},"ts":1391445110000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But anyway, if we're stuck with crappy promises, it means you'll never be able to get a useful API out of an async map.","msgtype":"m.text"},"ts":1391445126000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I also tune out on \"responsive images\" :)","msgtype":"m.text"},"ts":1391445146000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Because it'll inherently mix up \"failed because the key wasn't in the map\" and \"key was in the map, but it was for a failed promise\".","msgtype":"m.text"},"ts":1391445157000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I thought there was a whole debate in which you had some way of getting monadic promises to coexist with whatever other people liked","msgtype":"m.text"},"ts":1391445173000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You'll have to handle both of these completely separate cases in the same .then() branch.","msgtype":"m.text"},"ts":1391445175000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"jgraham: Yes, there was.  But Domenic_ is making it sound like people gave up on that at last week's tc39 meeting.","msgtype":"m.text"},"ts":1391445198000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I'll wait for minutes, I guess.","msgtype":"m.text"},"ts":1391445201000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"(Getting them to coexist is easy - it's basically equivalent to saying that arrays can nest, but we'll also give you an iterator that moves through the flattened array instead so you can pretend they don't.)","msgtype":"m.text"},"ts":1391445247000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: There are certain choice words that you should use when people try to make decisions at face to face meetings like that","msgtype":"m.text"},"ts":1391445248000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"This is why you're careful with \"may\": https://twitter.com/aloria/status/429375273625452544","msgtype":"m.text"},"ts":1391445276000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(Actually it's exactly equivalent to that, because MONADS.)","msgtype":"m.text"},"ts":1391445277000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"jgraham: I also see the word \"gonad\" when I write \"monad\", which isn't great either.","msgtype":"m.text"},"ts":1391445423000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Tentative plan: recast current parser as base URL parser. Introduce new URL parser that invokes that and adds blob magic. Allows rest of the world to pretend blobs don't exist, makes it likely web standards pick the right parser.","msgtype":"m.text"},"ts":1391445559000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"You should just follow SPJ's view that it is misnamed and should instead be a \"warm fuzzy thing\", because people won't be scared of it.","msgtype":"m.text"},"ts":1391445567000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: It's not even a *thing*, though.  It's an interface or typeclass or abstract base class or trait or whatever-the-hell your language calls \"here's some behavior that multiple things can implement\".","msgtype":"m.text"},"ts":1391445638000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Giving it a \"thing\" name confused me when I first started learning about it, and I'm sure messes with a lot of other people too.","msgtype":"m.text"},"ts":1391445683000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Well the same applies to \"algebra\" or something; it's the name for a set of rules that allow computation. Actually \"algebra\" is worse because it's the general name to mean any set of rules that allow some kind of abstract computation.","msgtype":"m.text"},"ts":1391445908000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But I'm not sure that people find algebra confusing because of the name","msgtype":"m.text"},"ts":1391445940000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"They find it confusing because it's hard to internalise a system of rules and the consequences of those rules","msgtype":"m.text"},"ts":1391445972000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And yet they find it easy to internalize \"Mappable\" as being \"a thing with .map()\".","msgtype":"m.text"},"ts":1391446082000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Or \"Iterable\" as being \"a thing I can iterate\".","msgtype":"m.text"},"ts":1391446094000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Or \"Monad\" as being \"a thing I can moon\"","msgtype":"m.text"},"ts":1391446118000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"Monad\" is just a terrible name for \"Map-then-Flatten-able\".  (Which, granted, is also a terrible name.)","msgtype":"m.text"},"ts":1391446120000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"You get it, Ms2ger!","msgtype":"m.text"},"ts":1391446140000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Well iterable is easy because there is only a single operation which is familiar from other contexts","msgtype":"m.text"},"ts":1391446140000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Monad just combines two extremely familiar operations - map and flatten.","msgtype":"m.text"},"ts":1391446165000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Flatten?","msgtype":"m.text"},"ts":1391446228000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"isn't sure he's ever had to use it","msgtype":"m.emote"},"ts":1391446248000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You've never flattened an array?","msgtype":"m.text"},"ts":1391446266000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Not that I can remember","msgtype":"m.text"},"ts":1391446327000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I certainly wouldn't say its on the same level as map","msgtype":"m.text"},"ts":1391446345000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"All right.  Yeah, I grant that it's less common than \"map\", but still not anything exotic.","msgtype":"m.text"},"ts":1391446356000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"So it's a map that can push multiple values, or what?","msgtype":"m.text"},"ts":1391446403000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"In terms of arrays and other containers, yeah, that's it.  (Or zero values.)","msgtype":"m.text"},"ts":1391446436000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"\"Flatten\" ends up being a really generic concept that gets stretched all over the place, but for the most common cases, it's just that.","msgtype":"m.text"},"ts":1391446454000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Fascinating","msgtype":"m.text"},"ts":1391446456000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yay, back on this side of the split!","msgtype":"m.text"},"ts":1391446467000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(It's just \"how do I turn Thing<Thing<Foo>> into Thing<Foo>?\".)","msgtype":"m.text"},"ts":1391446482000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"You want to avoid the word monad","msgtype":"m.text"},"ts":1391446483000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"That may well be the first time someone managed to explain monads in an understandable way","msgtype":"m.text"},"ts":1391446488000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: BLAME HASKELL","msgtype":"m.text"},"ts":1391446495000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Sure, I'll blame haskell for a great good","msgtype":"m.text"},"ts":1391446507000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"TabAtkins_: A monad is just a definition of a sequence of computational actions. It is pretty much a thing that can do anything.","msgtype":"m.text"},"ts":1391446560000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Monads are among the simplest things I can describe in terms of generic behaviors, but they've built up this terrible mystique and also everyone's crap at explaining them for no reason I can fathom.","msgtype":"m.text"},"ts":1391446564000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"gsnedders: So you're also one of the people who's crap at explaining them. ^_^","msgtype":"m.text"},"ts":1391446578000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Clearly :)","msgtype":"m.text"},"ts":1391446583000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Jumping straight to the \"but 'flatten' is really just a way of describing computational sequencing!\" is why everyone hates monads.","msgtype":"m.text"},"ts":1391446615000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"You've got a Thing which contains a value. You define .map() so functions can work on the value without caring about the Thing. But sometimes your functions want to return a Thing too, and now you've got nested Things. Define a way to flatten a nested Thing into a single Thing, and you've got monads.","msgtype":"m.text"},"ts":1391446676000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: It's not even any behaviour.","msgtype":"m.text"},"ts":1391446741000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins_: It's not really a type.","msgtype":"m.text"},"ts":1391446741000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yes, it's a typeclass.","msgtype":"m.text"},"ts":1391446747000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Or interface, or trait, or ABC.","msgtype":"m.text"},"ts":1391446759000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Just like \"Mappable\" isn't a type.","msgtype":"m.text"},"ts":1391446774000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"You don't inherit from Mappable.","msgtype":"m.text"},"ts":1391446780000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"A map is a perfectly common name in category theory for functors. :P","msgtype":"m.text"},"ts":1391446849000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins_: :)","msgtype":"m.text"},"ts":1391446852000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins_: It's hard to explain *because* it's so abstract.","msgtype":"m.text"},"ts":1391446862000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"monads are living mirrors of the entire universe","msgtype":"m.text"},"ts":1391446895000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"(I only ever knew the philosophical term)","msgtype":"m.text"},"ts":1391446909000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"puts astearns on the list too","msgtype":"m.emote"},"ts":1391446914000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: Only if you're trying to explain it the most abstract terms.  Explain it in concrete terms, same as .map(), and nobody gets lost.  Let them build up to the abstract shit later, after they've gotten a hold on the most useful forms of it.","msgtype":"m.text"},"ts":1391446962000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Most people don't need to know that functions are containers for their return value, and thus are monads, with composition being the flattening operation.","msgtype":"m.text"},"ts":1391446991000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Sorry, composition is the mapping operation.","msgtype":"m.text"},"ts":1391447009000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Flattening is just calling the return value with the same args again.","msgtype":"m.text"},"ts":1391447039000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: Your way gives false insight though","msgtype":"m.text"},"ts":1391447050000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: No, it gives useful insight.  All learning goes from concrete to abstract, and most people are actually totally fine with staying at some level of concreteness.","msgtype":"m.text"},"ts":1391447075000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"You take something that people already understand (lists)","msgtype":"m.text"},"ts":1391447089000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And then you say \"look this thing is an example of X, so now you understand X\"","msgtype":"m.text"},"ts":1391447106000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1391447120000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"But they don't. They understand what they understood to begin with.","msgtype":"m.text"},"ts":1391447129000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"For most purposes, you *do* understand X.","msgtype":"m.text"},"ts":1391447130000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"From your example I couldn't tell you whether any non-list thing was a monad","msgtype":"m.text"},"ts":1391447171000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Specifically, for the purpose of stopping remarks like \"sees monads, tunes out\", when we're not doing anything that needs more than that basic understanding.","msgtype":"m.text"},"ts":1391447181000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"jgraham: From my example, no.  From my accompanying explanation (map, then flatten), you can.","msgtype":"m.text"},"ts":1391447197000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: \"map then flatten\" still doesn't tell me anything much","msgtype":"m.text"},"ts":1391447230000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You map, then you flatten.  What's there to tell?","msgtype":"m.text"},"ts":1391447244000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"If you map and end up with a nested Thing, you flatten back to a single Thing.","msgtype":"m.text"},"ts":1391447261000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"It's not complicated.  Don't try to make it so.","msgtype":"m.text"},"ts":1391447287000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I suspect you are taking people from \"thing I don't understand\" to \"thing that TabAtkins_ keeps insisting is easy and to do with lists, but I don't understand and therefore I am too stupid to understand\"","msgtype":"m.text"},"ts":1391447288000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Do you understand \"turn a nested Thing<Thing<value>> back to Thing<value>\", and how flattening arrays is an example of that?","msgtype":"m.text"},"ts":1391447326000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"TabAtkins_: Sure. For the record, I don't claim to have a good grasp of this, but I am slightly above the level at which I have given examples of how people will not understand","msgtype":"m.text"},"ts":1391447397000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"That's literally all you need to understand for most monads in practice.  If you've got a class with a .map() method, and a .flatten() method that will turn it from being nested to being flat, you're good.","msgtype":"m.text"},"ts":1391447452000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Also, \"most functions in most languages are actually monads\".","msgtype":"m.text"},"ts":1391447486000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"TabAtkins_: So, for example, one of the things that \"everyone knows\" about Monads is that Haskell uses them for IO (this is small values of \"everyone\", I admit). But it is entirely unclear from your example how monads work for that. Or for many of the other things that they are used for","msgtype":"m.text"},"ts":1391447497000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It is also very unclear why one would want to make one's own code monadic","msgtype":"m.text"},"ts":1391447516000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Monads for IO are one of those abstract things that you dont' need to know to understand monads.","msgtype":"m.text"},"ts":1391447520000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"jgraham: Sure, that takes a few (easy, concrete) examples to show.","msgtype":"m.text"},"ts":1391447538000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Arrays (and other containers), Option types, and you're pretty much good.","msgtype":"m.text"},"ts":1391447554000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"The IO monad leverages the \"flatten is just a way to sequence computations\" abstraction that is way above most uses of monads.","msgtype":"m.text"},"ts":1391447592000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"I'm not sure that map/flatten is very obvious for maybe.","msgtype":"m.text"},"ts":1391447802000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(which is about the most trivial example)","msgtype":"m.text"},"ts":1391447893000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Domenic_: does http://domenic.me/aplus-tests-against-the-browser/ match what’s in ES6 spec draft completely?","msgtype":"m.text"},"ts":1391447928000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"Sure, it's the first step outside of the base \"container\" concrete examples.","msgtype":"m.text"},"ts":1391447943000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"But it's easy to show - a Maybe either holds a value, or holds nothing.  When you map, you either map the value and return a new Maybe holding the return value, or just return an empty Maybe again.","msgtype":"m.text"},"ts":1391447976000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"mathiasbynens: it matches a subset of the ES6 spec.","msgtype":"m.text"},"ts":1391448008000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"If you have nested Maybes (because your mapped function also returned a Maybe), then you flatten a Maybe<Maybe<val>> into just a Maybe<val>, and a Maybe<Nothing> into a Nothing.","msgtype":"m.text"},"ts":1391448036000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Domenic_: thanks for confirming","msgtype":"m.text"},"ts":1391448044000,"senderName":"mathiasbynens","senderId":"mathiasbynens@irc"},
{"content":{"body":"(Maybe can be implemented as an Array that holds either 0 or 1 values, where its .map() is Array.map(), and it's .flatten() is Array.flatten().)","msgtype":"m.text"},"ts":1391448123000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"good morning, Whatwg!","msgtype":"m.text"},"ts":1391448731000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"hi, using html5lib python I would like to clean up a webpage. For instance I would like to remove (including it's content) the script tags","msgtype":"m.text"},"ts":1391448904000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"I'm confused between filters, tokenizer and sanitizer","msgtype":"m.text"},"ts":1391448941000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"what is the difference?","msgtype":"m.text"},"ts":1391448948000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"aleray: The honest answer is the sanitizer API is a mess and needs completely changed. If you want something more stable, Bleach may or may not be suitable for your purposes.","msgtype":"m.text"},"ts":1391449877000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(Bleach uses html5lib internally)","msgtype":"m.text"},"ts":1391449941000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(But provides a stable API, and will magically stay up-to-date with html5lib when all the breakage happens there.)","msgtype":"m.text"},"ts":1391449964000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"But basically the tokenizer takes the tokens produced by reading the HTML before they are built into a tree (start-tag, end-tag, etc.)","msgtype":"m.text"},"ts":1391449992000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Using this for sanitising is rather broken and will not be supported in the future","msgtype":"m.text"},"ts":1391450014000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"s/sanitising/anything/","msgtype":"m.text"},"ts":1391450024000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Using it for treebuilding is just fine :)","msgtype":"m.text"},"ts":1391450041000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"A filter is something that runs on the output of a treewalker. A treewalker is something that takes a parsed HTML tree and produces a series of events like start-tag, end-tag, etc. that would reconstruct that tree","msgtype":"m.text"},"ts":1391450099000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Some filters currently operate (and only work) on the tokeniser. Such as the sanitizer.","msgtype":"m.text"},"ts":1391450116000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"So it's a bit like a tokenizer with different input","msgtype":"m.text"},"ts":1391450123000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No, no","msgtype":"m.text"},"ts":1391450132000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"The sanitiser tries to operate on both","msgtype":"m.text"},"ts":1391450142000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Badly","msgtype":"m.text"},"ts":1391450146000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But only works on the tokenizer. It will *always* fail with a tree-walker.","msgtype":"m.text"},"ts":1391450166000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Though it tries to work with it.","msgtype":"m.text"},"ts":1391450176000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"A serializer takes the output from a tree walker, possibly after it passed though a filter, and writes it as markup","msgtype":"m.text"},"ts":1391450207000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"So the setup you want is tokenizer -> treebuilder -> treewalker -> sanitizer filter -> serializer","msgtype":"m.text"},"ts":1391450242000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"But that doesn't wuite work right now","msgtype":"m.text"},"ts":1391450254000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"*quite","msgtype":"m.text"},"ts":1391450257000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"I think it might if the document has no attributes.","msgtype":"m.text"},"ts":1391450267000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(the first two parts are just called \"parser\")","msgtype":"m.text"},"ts":1391450271000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"On the other hand, the probability of having a document with no attributes… :)","msgtype":"m.text"},"ts":1391450291000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://esdiscuss.org/topic/specification-styles#content-11 Well, anti-IDL camp, curious to see your move :-)","msgtype":"m.text"},"ts":1391450614000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: you're missing that there's associated state with running a script","msgtype":"m.text"},"ts":1391450854000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: I don't get it. What state. Where is it captured.","msgtype":"m.text"},"ts":1391450880000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Is this another thing where DOM specs have forked ES execution semantics?","msgtype":"m.text"},"ts":1391450900000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so that [[Call]] takes some invisible parameter in DOM land?","msgtype":"m.text"},"ts":1391450911000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it's script thread state","msgtype":"m.text"},"ts":1391450912000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: no, it's just some global associated with the current task","msgtype":"m.text"},"ts":1391450926000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic_: ES is just not complete in its task description","msgtype":"m.text"},"ts":1391450938000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so that state isn't captured in the ES spec anywhere?","msgtype":"m.text"},"ts":1391450939000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"gsnedders, sorry I missed your answer.","msgtype":"m.text"},"ts":1391450946000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"Domenic_: it doesn't have tasks","msgtype":"m.text"},"ts":1391450946000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm actually using bleach, but I don't find how to remove a tag and its content (eg. script tags)","msgtype":"m.text"},"ts":1391450986000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":".then, and ES in general, does not specify or care about this DOM thing. It just invokes [[Call]]. If window.postMessage.bind(...) has a special [[Call]] that uses some global state, then it needs to be specified by window.postMessage; it's not the promise spec's job","msgtype":"m.text"},"ts":1391451054000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"gsnedders, so if I don't want to use bleach, I'd rather use filters right?","msgtype":"m.text"},"ts":1391451116000,"senderName":"aleray","senderId":"aleray@irc"},
{"content":{"body":"Domenic_: ES5 doesn't queue tasks","msgtype":"m.text"},"ts":1391451303000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk-cloud: I don’t really like the idea of \"initial value\" for the components of URL objects","msgtype":"m.text"},"ts":1391453192000,"senderName":"SimonSapin__","senderId":"SimonSapin__@irc"},
{"content":{"body":"or rather, baking mutability in the standard","msgtype":"m.text"},"ts":1391453244000,"senderName":"SimonSapin__","senderId":"SimonSapin__@irc"},
{"content":{"body":"annevk-cloud: Should the model also define constraints like \"in the ASCII range\" or \"ASCII digits\" (port) ?","msgtype":"m.text"},"ts":1391453865000,"senderName":"SimonSapin__","senderId":"SimonSapin__@irc"},
{"content":{"body":"annevk-cloud: Also, was it deliberate to go with a \"flat\" model where every component always exists, rather than expressing in the model constraints like \"scheme data is exclusive with (user, password, host, port, path)\"? https://github.com/SimonSapin/rust-url/blob/1db0239ec2c2cfcee5b7fb6e7402571844cb2135/url.rs#L33","msgtype":"m.text"},"ts":1391454402000,"senderName":"SimonSapin__","senderId":"SimonSapin__@irc"},
{"content":{"body":"TabAtkins_: Any motion on (or interest in) EventStream since last April?","msgtype":"m.text"},"ts":1391456725000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"jsbell: Nope.","msgtype":"m.text"},"ts":1391457391000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"annevk-cloud: only file URLs can have a null host, right?","msgtype":"m.text"},"ts":1391459109000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"dglazkov: I assume with http://lists.w3.org/Archives/Public/www-style/2014Feb/0032.html  you mean that blink will ship something but changes are still expected","msgtype":"m.text"},"ts":1391462161000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"to shadow dom handling","msgtype":"m.text"},"ts":1391462164000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(like event propagation and what not)","msgtype":"m.text"},"ts":1391462170000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: yep","msgtype":"m.text"},"ts":1391462184000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"and you just want some css stuff to be a bit more stable","msgtype":"m.text"},"ts":1391462193000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"But syntax has a habit of freezing much faster than those things.","msgtype":"m.text"},"ts":1391462196000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1391462197000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"smaug____: also CSS stuff is hard to tweak with polyfills :-\\","msgtype":"m.text"},"ts":1391462245000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1391462250000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Does blink have plans to implement <style scoped> independent of shadow DOM?","msgtype":"m.text"},"ts":1391462267000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It's not a priority right now, I don't think.","msgtype":"m.text"},"ts":1391462281000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"there was an implementation in there, but nobody watned it","msgtype":"m.text"},"ts":1391462283000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"sad","msgtype":"m.text"},"ts":1391462287000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"It is just that http://lists.w3.org/Archives/Public/www-style/2014Feb/0036.html used rather strong and generic language","msgtype":"m.text"},"ts":1391462299000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"(I hadn't noticed those emails but bz mentioned  in moznet#content)","msgtype":"m.text"},"ts":1391462341000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: Sorry for the generic language - I was addressing the CSSWG, so \"API\" was understood to be \"CSS API\".","msgtype":"m.text"},"ts":1391462347000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"CSS has APIs? :)","msgtype":"m.text"},"ts":1391462375000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zcorpan: You around?","msgtype":"m.text"},"ts":1391463683000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1391463689000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Regarding the <img src crossorigin> stuff discussed on blink-dev","msgtype":"m.text"},"ts":1391463714000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I can't find a browser that complies with the spec","msgtype":"m.text"},"ts":1391463776000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"zcorpan: see http://jsbin.com/OnOkuQE/1","msgtype":"m.text"},"ts":1391463867000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Can't find a browser where bla.gif is requested with an \"origin\" header","msgtype":"m.text"},"ts":1391463907000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"so...","msgtype":"m.text"},"ts":1391463927000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"did ES kill the convenience type \"ArrayBufferView\"?","msgtype":"m.text"},"ts":1391463935000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yoav: quite possible yeah. also i don't see the origin header in either request in firefox, but 'crossOrigin' in new Image() returns true","msgtype":"m.text"},"ts":1391464226000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1391464274000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Firefox does fail to add \"origin\" on both","msgtype":"m.text"},"ts":1391464286000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Chrome adds it to bla2.gif, as well as IE","msgtype":"m.text"},"ts":1391464308000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Hixie_, annevk-cloud: per our discussion on Friday about Path/Path2D, this should work in Safari http://goo.gl/2uY5aA","msgtype":"m.text"},"ts":1391464327000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"I'm guessing Opera would too, but I can't test it, since there's no Linux version :P","msgtype":"m.text"},"ts":1391464334000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"wtf is \"c.currentPath\"","msgtype":"m.text"},"ts":1391464375000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jcgregorio: yeah, ok, i didn't realise the safari implementation had no bearing on reality","msgtype":"m.text"},"ts":1391464389000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jcgregorio: let's rename it!","msgtype":"m.text"},"ts":1391464392000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"that was a proposed attribute, it's in Webkit, and behind a flag in blink","msgtype":"m.text"},"ts":1391464425000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"zcorpan: The point is, the part in the standard you pointed at regarding \"stable state\" doesn't seem to be implemented anywhere","msgtype":"m.text"},"ts":1391464432000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"reading the list it looks like it got shot down, but still","msgtype":"m.text"},"ts":1391464443000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"ended up implemented","msgtype":"m.text"},"ts":1391464453000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"yoav: right","msgtype":"m.text"},"ts":1391464476000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jcgregorio: yeah the attribute doesn't make much sense","msgtype":"m.text"},"ts":1391464507000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yoav: that's bad :-)","msgtype":"m.text"},"ts":1391464510000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"jcgregorio: (hence the result on the list)","msgtype":"m.text"},"ts":1391464512000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jcgregorio: Path objects are supposed to be just used in arguments to e.g. fill() and stroke()","msgtype":"m.text"},"ts":1391464535000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jcgregorio: changing the canvas' implied default path (or whatever i called it) is just weird","msgtype":"m.text"},"ts":1391464552000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: agreed, which is what I'm trying to land in Blink","msgtype":"m.text"},"ts":1391464572000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"jcgregorio: cool","msgtype":"m.text"},"ts":1391464581000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"jcgregorio: if you land it with a different name for Path, like Path2D or CanvasPath or whatever, i'll use whatever name you used","msgtype":"m.text"},"ts":1391464599000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan: Yeah. Not sure what the next step should be. I can open a bug about it,but with it not working in all other browsers, it might be tough","msgtype":"m.text"},"ts":1391464605000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Hixie_: not sure about \"killed\" but http://people.mozilla.org/~jorendorff/es6-draft.html#sec-typedarray-objects seems relevant","msgtype":"m.text"},"ts":1391464650000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: ok","msgtype":"m.text"},"ts":1391464651000,"senderName":"jcgregorio","senderId":"jcgregorio@irc"},
{"content":{"body":"Domenic_: yeah looks like the spec just dropped that name on the floor, probably didn't realise that a bunch of other specs were depending on it","msgtype":"m.text"},"ts":1391464675000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: i'm introducing a typedef on my side to ease the transition","msgtype":"m.text"},"ts":1391464696000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"yoav: indeed, it seems high risk, but still is easy to argue that the spec's behavior is better for authors","msgtype":"m.text"},"ts":1391464712000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"still no idea what i can do about \"ArrayBuffer implements Transferable\" though","msgtype":"m.text"},"ts":1391464720000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i wish the JS spec was more WebIDLy","msgtype":"m.text"},"ts":1391464734000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan: I agree. It's also better for srcset, not just crossorigin","msgtype":"m.text"},"ts":1391464745000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: <video> already does this (presto follows the spec closely there, not sure about other engines)","msgtype":"m.text"},"ts":1391464757000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1391464758000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"and picture too","msgtype":"m.text"},"ts":1391464768000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391464773000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"i wonder if JS still has the concept of a \"readonly ArrayBuffer\"","msgtype":"m.text"},"ts":1391464949000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"frozen?","msgtype":"m.text"},"ts":1391464960000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"no frozen means all kinds of other crap","msgtype":"m.text"},"ts":1391465001000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"like you can't change its properties","msgtype":"m.text"},"ts":1391465004000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"indeed.","msgtype":"m.text"},"ts":1391465015000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I guess I don't know what readonly means","msgtype":"m.text"},"ts":1391465024000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i basically never want frozen in my specs except for the Window and Location objects in cross-origin situations, if then","msgtype":"m.text"},"ts":1391465025000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"read only means \"can't mutate underlying data\"","msgtype":"m.text"},"ts":1391465032000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"So you can still add expandos?","msgtype":"m.text"},"ts":1391465054000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1391465067000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, that's a useful definition of it for me, for most purposes.  Just that the properties the spec defines can't be altered by userland code.","msgtype":"m.text"},"ts":1391465142000,"senderName":"TabAtkins_","senderId":"TabAtkins_@irc"},
{"content":{"body":"i wonder if you can mutate teh data returned by an xhr.response","msgtype":"m.text"},"ts":1391465344000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Is the work at http://wiki.whatwg.org/wiki/Adaptive_Streaming just a proposal, or is that able to be implemented immediately?","msgtype":"m.text"},"ts":1391465397000,"senderName":"TheSeeker","senderId":"TheSeeker@irc"},
{"content":{"body":"given that it starts with \"Here is a (rough and incomplete) proposal\", i'm going to guess \"proposal\"","msgtype":"m.text"},"ts":1391465428000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wow. http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2794","msgtype":"m.text"},"ts":1391465693000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it's mutable.","msgtype":"m.text"},"ts":1391465696000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I was hoping that maybe someone might have implemented some proof of concepts of the idea since 2011, I guess not? :/","msgtype":"m.text"},"ts":1391466096000,"senderName":"TheSeeker","senderId":"TheSeeker@irc"},
{"content":{"body":"no idea","msgtype":"m.text"},"ts":1391466111000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"doesn't recall seeing this page before","msgtype":"m.emote"},"ts":1391466120000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan, annevk-cloud, so do we want to expose DOMException to workers? I guess yes, as there's nothing really DOM-ish about it, and if we have APIs that use DOMExceptions that we then want to expose to workers it would be good not to use a different exception there.","msgtype":"m.text"},"ts":1391466131000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"TheSeeker: (the wiki is more a scratch space for the whatwg, we don't really work on the wiki)","msgtype":"m.text"},"ts":1391466135000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"TheSeeker: (work happens on the mailing list or in bugs, mainly)","msgtype":"m.text"},"ts":1391466146000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heycam: i throw DOMExceptions on workers, fwiw","msgtype":"m.text"},"ts":1391466165000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_, ok cool, will make it so","msgtype":"m.text"},"ts":1391466179000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: we already have WebSocket, EventSource, XMLHttpRequest...","msgtype":"m.text"},"ts":1391466186000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24454 is proving to be a pain in the ass to fix btw :-P","msgtype":"m.text"},"ts":1391466220000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan, since DOMException is going to be built in, I'll just make it exposed in all globals","msgtype":"m.text"},"ts":1391466222000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"I'm trying to work out the best way to get streaming video working over Freenet ... which will require either major changes to Freenet (allowing for range-requests) or some kind of chunked video format where chunks are <= 4 MB each...","msgtype":"m.text"},"ts":1391466258000,"senderName":"TheSeeker","senderId":"TheSeeker@irc"},
{"content":{"body":"Hixie_: oh, does it affect everything that uses typed arrays?","msgtype":"m.text"},"ts":1391466296000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391466303000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan: i'm having to rework all the prose to use the new hooks","msgtype":"m.text"},"ts":1391466311000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ok :-|","msgtype":"m.text"},"ts":1391466321000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it had to happen eventually","msgtype":"m.text"},"ts":1391466327000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"heycam: sounds good","msgtype":"m.text"},"ts":1391466342000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"oh well, I guess I'll start lookign somewhere else, thanks anyway.","msgtype":"m.text"},"ts":1391466603000,"senderName":"TheSeeker","senderId":"TheSeeker@irc"},
{"content":{"body":"i've really no idea how to use these hooks","msgtype":"m.text"},"ts":1391466667000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"do they really expect the HTML spec to have lots of [[blabla]] %blabla% BlaBla(...) so on in the prose?","msgtype":"m.text"},"ts":1391466720000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan: i'm actually going to not bother trying to call the precise hooks. if you think it needs to be more closely defined, then please file a bug saying exactly what you want the spec to say. i can't work out what to say short of making the spec full of ugly things that i'm not convinced would actually improve interop.","msgtype":"m.text"},"ts":1391466910000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: ok i'll have a look tomorrow","msgtype":"m.text"},"ts":1391467004000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"is a bit surprised <svg>'s content model allows stuff in any order","msgtype":"m.emote"},"ts":1391467080000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"structured clone of arraybufferview","msgtype":"m.text"},"ts":1391467191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"ow","msgtype":"m.text"},"ts":1391467191000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"wtf does https://people.mozilla.org/~jorendorff/es6-draft.html#sec-new-dataview-argumentslist mean","msgtype":"m.text"},"ts":1391467308000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It's the standard boilerplate for saying that calling new on DataView does the normal thing, not a special thing like it does on e.g. Array","msgtype":"m.text"},"ts":1391467397000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"the meat is in https://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview-buffer-byteoffset-bytelength and a bit in https://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview-@@create","msgtype":"m.text"},"ts":1391467442000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i'm all for making specs be well-defined and all","msgtype":"m.text"},"ts":1391467447000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"but this goes beyond that and reaches a level of obscurity that i can't even dream of achieving.","msgtype":"m.text"},"ts":1391467464000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"it does seem a bit redundant. i can't actually find any examples that are nonstandard. (Array wasn't one of them it turns out.)","msgtype":"m.text"},"ts":1391467521000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Ah, wow, Object is the exception it seems. https://people.mozilla.org/~jorendorff/es6-draft.html#sec-new-object-argumentslist","msgtype":"m.text"},"ts":1391467565000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ok, open this:","msgtype":"m.text"},"ts":1391467589000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-dom-interfaces.html#safe-passing-of-structured-data","msgtype":"m.text"},"ts":1391467590000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"and look where it says \"ArrayBufferView\"","msgtype":"m.text"},"ts":1391467595000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"how do i translate that to match the JS spec?","msgtype":"m.text"},"ts":1391467600000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i cannot figure it out at _all_","msgtype":"m.text"},"ts":1391467605000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan, for <title>?","msgtype":"m.text"},"ts":1391467611000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"zcorpan, it's just like in HTML where <title> can be any child of <head>, doesn't need to be the first or whatever","msgtype":"m.text"},"ts":1391467629000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: yeah i for some reason expected the descriptive elements to have to come first","msgtype":"m.text"},"ts":1391467661000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"heycam: well html separates <head> stuff from <body> stuff","msgtype":"m.text"},"ts":1391467686000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, oh you know SVG Tiny 1.2 has more strict author requirements about the position of <title>/<desc>","msgtype":"m.text"},"ts":1391467741000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"it's not in SVG 2 though (yet? maybe should port some of that wording across)","msgtype":"m.text"},"ts":1391467755000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie_: https://bugs.ecmascript.org/show_bug.cgi?id=2495 FWIW","msgtype":"m.text"},"ts":1391467757000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: it's not that it's repeated that i find confusing, btw. it's that it's utterly impenetrable.","msgtype":"m.text"},"ts":1391467787000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: i've literally no idea what that means","msgtype":"m.text"},"ts":1391467793000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, well, i'm guessing that's just a matter of ES spec familiarity","msgtype":"m.text"},"ts":1391467809000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I would translate it this way:","msgtype":"m.text"},"ts":1391467842000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"there's spec familiarity, and then there's the %foo% @@foo [[foo]] Foo() stuff that they use instead of English","msgtype":"m.text"},"ts":1391467846000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: do you have any idea how to translate the above HTML spec prose into JS-compatible prose?","msgtype":"m.text"},"ts":1391467863000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"as a rule of thumb, if Hixie_ doesn't understand your spec prose after multiple reads, your spec is wrong. :)","msgtype":"m.text"},"ts":1391467872000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"sorry, \"prose\"","msgtype":"m.text"},"ts":1391467880000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"i dunno about wrong, but i could certainly get behind \"overly obtuse\"","msgtype":"m.text"},"ts":1391467897000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"s/wrong/bad/ then","msgtype":"m.text"},"ts":1391467934000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"heycam: now you made me try to read svg tiny 1.2's relaxng schema :-P","msgtype":"m.text"},"ts":1391467955000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, sorry","msgtype":"m.text"},"ts":1391467970000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"zcorpan, it may or may not describe the requirements reflected in the prose, who knows :)","msgtype":"m.text"},"ts":1391467988000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: i didn't find it in prose so i guessed maybe it just has its content model requirements in the schema","msgtype":"m.text"},"ts":1391468030000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: I see the rough outlines of how to do this. But getting the appropriate references right will take some time. I will work on it later tonight.","msgtype":"m.text"},"ts":1391468031000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"zcorpan, yeah it might be where I'm remembering it from","msgtype":"m.text"},"ts":1391468045000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: anyway i think any order seems better","msgtype":"m.text"},"ts":1391468053000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Domenic_: don't worry about it, it'll become moot when JS takes over defining this stuff","msgtype":"m.text"},"ts":1391468058000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"zcorpan, ok","msgtype":"m.text"},"ts":1391468060000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Hixie_: wait, I think it's as simple as: \"Let _output_ be %TypedArray%(_input_)\"","msgtype":"m.text"},"ts":1391468215000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Using https://people.mozilla.org/~jorendorff/es6-draft.html#sec-%typedarray%-typedarray","msgtype":"m.text"},"ts":1391468226000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"i sometimes don't understand Hixie_'s spec prose after multiple reads, too. but i think that has more to do with the relevant thing being complex than with the way it is written","msgtype":"m.text"},"ts":1391468238000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: right","msgtype":"m.text"},"ts":1391468255000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"You could change the predicate to \"If _input_ has a [[TypedArrayName]] internal slot\" as well.","msgtype":"m.text"},"ts":1391468270000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: the underlying buffer is changed by this (to a new buffer that's in the algorithm's \"memory\")","msgtype":"m.text"},"ts":1391468270000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: i think [[DataView]] is the internal property you're supposed to look for","msgtype":"m.text"},"ts":1391468296000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I think that matches; %TypedArray% re-allocates a new buffer for its return value","msgtype":"m.text"},"ts":1391468309000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"\"W3C DOM4\"","msgtype":"m.text"},"ts":1391468310000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"Domenic_: i don't want it to allocate a new buffer, i need it to use the buffer that was cloned from the original one","msgtype":"m.text"},"ts":1391468335000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: I would bet they come together. The %TypedArray% algorithm does a predicate assert for [[TypedArrayName]] though.","msgtype":"m.text"},"ts":1391468336000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"ahhh","msgtype":"m.text"},"ts":1391468342000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"wow where is that captured in the HTML spec?","msgtype":"m.text"},"ts":1391468367000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: there are a bunch of IDL bugs open on integrating with ArrayBuffer and friends, I recommend waiting for that","msgtype":"m.text"},"ts":1391468372000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Domenic_: it's the result of calling the algorithm recursively","msgtype":"m.text"},"ts":1391468446000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SimonSapin: patches welcome","msgtype":"m.text"},"ts":1391468447000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"heycam: yes to workers :)","msgtype":"m.text"},"ts":1391468471000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: Some of it is opinions rather than clear bugs","msgtype":"m.text"},"ts":1391468487000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Hixie_: which clause gets entered on the recursion? I don't know what the IDL attributes of ArrayBufferViews are","msgtype":"m.text"},"ts":1391468494000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: (if you're cloning the ArrayBuffer, then it'll be cloned and put in the /memory/ variable before you get to this algorithm)","msgtype":"m.text"},"ts":1391468494000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_:","msgtype":"m.text"},"ts":1391468520000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"er","msgtype":"m.text"},"ts":1391468521000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: \"buffer\", primarily","msgtype":"m.text"},"ts":1391468525000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"SimonSapin: I agree with some, eg immutable, but not clear how to do it simply","msgtype":"m.text"},"ts":1391468532000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"annevk-cloud: btw, https://github.com/SimonSapin/rust-url/blob/master/parser.rs now passes your tests, with functional-style code rather than a state machine","msgtype":"m.text"},"ts":1391468543000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"So \"If input is an ArrayBuffer object\"?","msgtype":"m.text"},"ts":1391468543000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: no, it gets as far as step 1, then returns","msgtype":"m.text"},"ts":1391468554000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: because the buffer is in /memory/","msgtype":"m.text"},"ts":1391468560000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though I found some issues (meaning we need more tests :))","msgtype":"m.text"},"ts":1391468566000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Domenic_: the mapping of old buffer to new buffer, that is","msgtype":"m.text"},"ts":1391468567000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: (it's cloned as part of creating the \"transfer map\" in the postMessage() methods)","msgtype":"m.text"},"ts":1391468610000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1391468617000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"SimonSapin: cool","msgtype":"m.text"},"ts":1391468654000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"heycam: i think document.title should be strict about using an svg:title child of the root when the root is svg:svg","msgtype":"m.text"},"ts":1391468833000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, yes I agree. what's the alternative though?","msgtype":"m.text"},"ts":1391468856000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"heycam: alternatives include ignoring the root and return the first html:title or svg:title in the document, for instance","msgtype":"m.text"},"ts":1391468892000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan, ok. but yes selecting the first svg:title child of the root sounds like the right thing to me.","msgtype":"m.text"},"ts":1391468928000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"same on setting, and appending a title to the root if there isn't a title","msgtype":"m.text"},"ts":1391468973000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1391469024000,"senderName":"heycam","senderId":"heycam@irc"},
{"content":{"body":"and here i started to wonder about <svg>'s content model :-)","msgtype":"m.text"},"ts":1391469032000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"for comic relief http://stackoverflow.com/questions/21405066/is-this-an-ie11-radio-button-rendering-bug-they-look-like-googly-eyes","msgtype":"m.text"},"ts":1391469039000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"optical illusion, heh","msgtype":"m.text"},"ts":1391469129000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Structured clone proposal Dimitry and I wrote was accepted by TC39 last week btw I saw somewhere","msgtype":"m.text"},"ts":1391469164000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"So at some point that too should be somebody else their problem","msgtype":"m.text"},"ts":1391469198000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"well, it'll still be my problem for a lot of it, i assume","msgtype":"m.text"},"ts":1391469220000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i mean, i doubt they're going to actually spec how postMessage() works, for example","msgtype":"m.text"},"ts":1391469233000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"You get hooks","msgtype":"m.text"},"ts":1391469239000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"i hope they're better hooks than i get for ArrayBuffer","msgtype":"m.text"},"ts":1391469254000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"They are similar in need, no?","msgtype":"m.text"},"ts":1391469299000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"the hooks for ArrayBuffer are incomprehensible","msgtype":"m.text"},"ts":1391469318000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"You are hacking around something ES does not define but ES engines have","msgtype":"m.text"},"ts":1391469330000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"It has no hooks for the host environment afaict","msgtype":"m.text"},"ts":1391469358000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"Anyway, I recommend postponing those issues for a bit","msgtype":"m.text"},"ts":1391469415000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"btw what's the status on the event loop hooks?","msgtype":"m.text"},"ts":1391469476000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i still haven't heard anything from anyone about that","msgtype":"m.text"},"ts":1391469491000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"which you'd think i'd hear about, since right now i'm the guy speccing the event loop","msgtype":"m.text"},"ts":1391469508000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-enqueuetask","msgtype":"m.text"},"ts":1391469547000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think the idea was to do a minimal amount of work and leave most of that in your capable hands still","msgtype":"m.text"},"ts":1391469586000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-nexttask-result-algorithm-step is probably the most likely to step on your toes, but seems sufficiently small and vague as to not do so that badly","msgtype":"m.text"},"ts":1391469653000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: maybe you can take inspiration from microsoft and close spec bugs claiming optical illusion","msgtype":"m.text"},"ts":1391469683000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: i believe the w3c already uses that kind of approach, so i'll let them be in charge of that","msgtype":"m.text"},"ts":1391469712000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Domenic_: so should i be invoking this stuff somewhere?","msgtype":"m.text"},"ts":1391469724000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"allen has so many typos... -_-","msgtype":"m.text"},"ts":1391469725000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"seems like EnqueueTask() should invoke a callback on my side so i can add an HTML-spec \"task\" to an HTML-spec \"task queue\" to do something useful","msgtype":"m.text"},"ts":1391469772000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"I think the intent is to let the \"implementation defined\" stuff give control back over to your more-fleshed-out event loop","msgtype":"m.text"},"ts":1391469808000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"e.g. \"If all Task Queues are empty, the result is implementation defined.\"","msgtype":"m.text"},"ts":1391469825000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Note that ES task === HTML microtask","msgtype":"m.text"},"ts":1391469844000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":":/","msgtype":"m.text"},"ts":1391469849000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"I am trying to find how you get *in* to this system though","msgtype":"m.text"},"ts":1391469855000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"yeah that was unnecessarily confusing annevk-cloud","msgtype":"m.text"},"ts":1391469856000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"for some definition of \"===\"","msgtype":"m.text"},"ts":1391469863000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"in earlier drafts he showed me it said microtask","msgtype":"m.text"},"ts":1391469863000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hixie_: 😀","msgtype":"m.text"},"ts":1391469919000,"senderName":"annevk-cloud","senderId":"annevk-cloud@irc"},
{"content":{"body":"does the ES event loop know about 'stable state'?","msgtype":"m.text"},"ts":1391469938000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Ah this is how you get in. \"When there is no running execution context and the execution context stack is empty, the ECMAScript implementation removes the first PendingTask from a Task Queue and uses the information contained in it to create an execution context and starts execution of associated Task abstraction operation.\"","msgtype":"m.text"},"ts":1391469955000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"interestingly that sounds related to \"stable state\"?","msgtype":"m.text"},"ts":1391469963000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"so e.g. that prose sentence will launch you into something like PromiseReactionTask. Which will then call NextTask when it's done with its stuff. Which when there are no more ES microtasks, will have an implementation-defined result. Which is where things can go back to HTML's control","msgtype":"m.text"},"ts":1391470063000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"I think it would be more friendly if instead of that prose sentence there was some kind of Drain(Micro)TaskQueue operation you could call","msgtype":"m.text"},"ts":1391470229000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Domenic_: k well... i'll await a bug or e-mail requesting integration with a proposal for how to do it, i guess :-)","msgtype":"m.text"},"ts":1391470732000,"senderName":"Hixie_","senderId":"Hixie_@irc"}
]