[
{"content":{"body":"Is there a benefit of using multiple link tags w/ media attributes as opposed to stuffing ALL styles into one file and using @media throughout? My guess is there will be less render blocking CSS since the parser doesn't have to actually parse ALL styles up front (and of course wait for that larger file to download) to display page...is this accurate?","msgtype":"m.text"},"ts":1496898536000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"MikeSmith: hmmm. the script is loading cross-references when selecting some text. is that intentional?","msgtype":"m.text"},"ts":1496904211000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: nope","msgtype":"m.text"},"ts":1496904285000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"dunno why it would do that..","msgtype":"m.text"},"ts":1496904292000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but will investigate and fix it","msgtype":"m.text"},"ts":1496904305000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but I guess it’s just the event listener","msgtype":"m.text"},"ts":1496904332000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I mean, it’s probably not the select but just the click event?","msgtype":"m.text"},"ts":1496904365000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"which is ignore if you’re clicking on a hyperlink","msgtype":"m.text"},"ts":1496904407000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but otherwise do not ignore it seems","msgtype":"m.text"},"ts":1496904418000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so I think it will happen every time you click anywhere in a page other than a hyperlink","msgtype":"m.text"},"ts":1496904451000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: right","msgtype":"m.text"},"ts":1496904506000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"OK I’ll figure out how to make it not do that and write a patch and PR it","msgtype":"m.text"},"ts":1496904590000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: i guess the listener should check if e.target or e.target.parentNode or e.target.parentNode.parentNode is a dfn, and none of those are <a>","msgtype":"m.text"},"ts":1496904876000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"(or walk up to <body> maybe)","msgtype":"m.text"},"ts":1496904951000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: yeah was trying to think of a more elegant way but I guress that will do","msgtype":"m.text"},"ts":1496904957000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"matchesSelector could work but is likely more expensive. but maybe that doesn't matter if it happens on each click","msgtype":"m.text"},"ts":1496905038000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"well I guess just iterating up to body is simple and fast","msgtype":"m.text"},"ts":1496905142000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"TabAtkins: So regarding our discussion about computed values and serialisation,","msgtype":"m.text"},"ts":1496906490000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: Does that mean that https://drafts.csswg.org/css-shapes/#basic-shape-computed-values doesn't matter when it comes to serialising these computed values, and that parts that can be omitted should be?","msgtype":"m.text"},"ts":1496906520000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"MikeSmith: i'm looking at html-dfn now","msgtype":"m.text"},"ts":1496913832000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"ok thanks","msgtype":"m.text"},"ts":1496913846000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"(sorry I didn’t get teh PR raised earlier; needed to pick up my little one from daycare)","msgtype":"m.text"},"ts":1496913901000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"nox: Yes","msgtype":"m.text"},"ts":1496928995000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"zcorpan: sorry, I don't know how to fix that with nginx","msgtype":"m.text"},"ts":1496929074000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"TabAtkins: Nice!","msgtype":"m.text"},"ts":1496929233000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: is that Shapes section incorrect?","msgtype":"m.text"},"ts":1496936238000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"or is it just that it's not applicable to serialization?","msgtype":"m.text"},"ts":1496936305000,"senderName":"astearns","senderId":"astearns@irc"},
{"content":{"body":"astearns: Not applicable to serialization.","msgtype":"m.text"},"ts":1496936502000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"It's just normalizing the computed value to have all the information readily available.","msgtype":"m.text"},"ts":1496936521000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And then serialization outputs the shortest form of it, which will often omit some of that information.","msgtype":"m.text"},"ts":1496936534000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"is there work under way getting link preload with integrity|nonce attribs working with fetch and csp sri for script|style ?","msgtype":"m.text"},"ts":1496939291000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: And OTOH we serialise to the shortest form for specified basic shapes only because of the spec, right?","msgtype":"m.text"},"ts":1496940911000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Because of CSSOM","msgtype":"m.text"},"ts":1496940940000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Other properties, by default, should serialise to whatever was in the property rule, just normalising whitespace and whatnot, is that correct?","msgtype":"m.text"},"ts":1496940940000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"This is for computed values. Specified values should match what was input (modulo whitespace/etc)","msgtype":"m.text"},"ts":1496941021000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Except in the case of basic shapes and similar cases, where the spec states how they should be serialised, right?","msgtype":"m.text"},"ts":1496941061000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"No, it shouldn't be.","msgtype":"m.text"},"ts":1496941103000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(Our story isn't too straight here.)","msgtype":"m.text"},"ts":1496941117000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I would love to be able to just serialise shortest forms all the time, but I guess that's wishful thinking.","msgtype":"m.text"},"ts":1496941150000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"People depend on specified values equaling what they entered, in general.","msgtype":"m.text"},"ts":1496941210000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Adding that this part isn't too clear for now makes a lot of sense, I'm ok with that.","msgtype":"m.text"},"ts":1496941212000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: Sometimes you state things as if they are crystal clear from the prose in the various specs and it confuses the hell out of me hah.","msgtype":"m.text"},"ts":1496941242000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"This is only observable by looking at a stylesheet directly or reading .style, of course.","msgtype":"m.text"},"ts":1496941247000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hehe, sorry.","msgtype":"m.text"},"ts":1496941252000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"My specs aren't golden in this regard either.","msgtype":"m.text"},"ts":1496941264000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Well, I don't blame you, given how implementing that stuff is a huge task, I don't want to even think about how to specify them.","msgtype":"m.text"},"ts":1496941300000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"One of my tasks for Typed OM is too define the \"shortest form serialization\" for every single property.","msgtype":"m.text"},"ts":1496941328000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Joy.","msgtype":"m.text"},"ts":1496941330000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: In Servo we switched a lot of code to use generic types, parameterised for example by a specified or computed length,","msgtype":"m.text"},"ts":1496941358000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"so simpler properties share the same code for serialisation,","msgtype":"m.text"},"ts":1496941376000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"that's why I would like both of them to just serialise the same, but I guess real world won't let me have that. :)","msgtype":"m.text"},"ts":1496941392000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Understandable.","msgtype":"m.text"},"ts":1496941422000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I'd do it if I could!","msgtype":"m.text"},"ts":1496941428000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: And the cherry on the cake,","msgtype":"m.text"},"ts":1496941435000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"TabAtkins: I recently implemented #[derive(ToCss)], so we don't even have to write serialisation code anymore for many properties.","msgtype":"m.text"},"ts":1496941461000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Rust's #[derive(...)] has been damn useful to implement many aspects of the CSS properties, whether a value contains viewport percentages, how to compute values, and serialisation.","msgtype":"m.text"},"ts":1496941536000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Interesting!","msgtype":"m.text"},"ts":1496941590000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]