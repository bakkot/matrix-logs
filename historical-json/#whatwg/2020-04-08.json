[
{"content":{"body":"in documentation in interfaces defined with Web IDL in specs, is it OK to describe instances as “objects that are instances of the Foo interface”?","msgtype":"m.text"},"ts":1586309439000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"*documentation on interfaces","msgtype":"m.text"},"ts":1586309452000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: technically it's \"objects that implement the Foo interface\" per https://heycam.github.io/webidl/#implements,https://heycam.github.io/webidl/#implements, but isn't it easier to say \"Foo objects\"","msgtype":"m.text"},"ts":1586309523000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"TimothyGu: well the specific context I am trying to deal with is a general case, so I don’t have one specific Foo object in this context.","msgtype":"m.text"},"ts":1586309633000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lemme show you the exact wording I have...","msgtype":"m.text"},"ts":1586309648000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"> See _Iterator-like methods_ in _Information contained in a WebIDL file_ for information on how an iterable declaration in an interface definition causes entries(), forEach(), keys(), and values() methods to be exposed in objects that are instances of the interface.","msgtype":"m.text"},"ts":1586309679000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"where _Iterator-like methods_ hypertext is a link to https://wiki.developer.mozilla.org/en-US/docs/MDN/Contribute/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file#Iterator-like_methods","msgtype":"m.text"},"ts":1586309713000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Okay. Yeah, \"objects that implement the interface\" would be the technically proper wording","msgtype":"m.text"},"ts":1586309758000,"senderName":"TimothyGu","senderId":"TimothyGu@irc"},
{"content":{"body":"OK super","msgtype":"m.text"},"ts":1586309786000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"thanks much","msgtype":"m.text"},"ts":1586309789000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1586309850000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"\"exposed *from* objects that implement the interface\"?","msgtype":"m.text"},"ts":1586309877000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"what preposition is best there?","msgtype":"m.text"},"ts":1586309895000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If this is MDN documentation, I have a long-standing pet peeve to remove all uses of the term \"interface\", since it it is a COBOL-ism holdover and the correct thing in JavaScript is \"class\".","msgtype":"m.text"},"ts":1586312686000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I've tried suggesting this before and been convinced it will be easier to change Web IDL first before we can convince the MDN maintainers to change.","msgtype":"m.text"},"ts":1586312705000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah I personally would be much happier if we could make it align with JavaScript","msgtype":"m.text"},"ts":1586315273000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"that’d certainly be more clear for web developers","msgtype":"m.text"},"ts":1586315291000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I would love to see that change in IDL","msgtype":"m.text"},"ts":1586342309000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I want to tackle some easier ones first, in particular https://github.com/heycam/webidl/issues/350","msgtype":"m.text"},"ts":1586354124000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"if we wanted to get more changes made to the IDL spec more quickly, my impression is that it could happen if we had somebody willing to put (more) money into a contract to pay for the necessary work","msgtype":"m.text"},"ts":1586357769000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"or maybe not and the real bottleneck is still just not having enough people to work on it, regardless of money","msgtype":"m.text"},"ts":1586357818000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I think the problem is in part that the payoff is not direct and that there's a lot of cross-cutting concerns.","msgtype":"m.text"},"ts":1586358006000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1586358109000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so by the way about the MDN annos, I notice a kind of bad usability/discoverability problem that happens in a small number of cases","msgtype":"m.text"},"ts":1586358242000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"if you go to https://html-mdn.herokuapp.com/output/multipage/semantics-other.html#selector-read-only","msgtype":"m.text"},"ts":1586358253000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... there is actually an MDN anno for \":read-only\"","msgtype":"m.text"},"ts":1586358277000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but it’s not visible right there at point of use","msgtype":"m.text"},"ts":1586358317000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"not aligned there","msgtype":"m.text"},"ts":1586358328000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"the reason is, if you go to https://html-mdn.herokuapp.com/output/multipage/semantics-other.html#pseudo-classes and open the second anno there","msgtype":"m.text"},"ts":1586358383000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"... you’ll see it’s one giant long anno with info for every single pseudo-class in that dl/dt/dd list in the body of the spec","msgtype":"m.text"},"ts":1586358463000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but no normal reader would ever realize that they need to scroll all the way back up there to find the anno","msgtype":"m.text"},"ts":1586358581000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"this is why, when I first added the MDN annos, I made them un-minimized by default — because otherwise, we run into discoverability issues like that","msgtype":"m.text"},"ts":1586358635000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"so anyway if anybody has some good ideas about how we could better handle discoverability of the annos in cases like that, lemme know","msgtype":"m.text"},"ts":1586358698000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: \"Pseudo-classes / No support in current engines. / No support data\" seems not so good","msgtype":"m.text"},"ts":1586360339000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah that’s a bug","msgtype":"m.text"},"ts":1586360382000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: interesting, I guess the problem there is that we're going up to child-of-body, which is the entire <dl>.","msgtype":"m.text"},"ts":1586360396000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah, that is the cause","msgtype":"m.text"},"ts":1586360423000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"maybe we can special-case <dt>","msgtype":"m.text"},"ts":1586360448000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Yeah that's what I'm wondering","msgtype":"m.text"},"ts":1586360452000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"yeah will look into that","msgtype":"m.text"},"ts":1586360461000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"If we had a before/after diff to judge the impact i'd be comfortable with that","msgtype":"m.text"},"ts":1586360463000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"To make sure it doesn't have worse impacts elsewhere","msgtype":"m.text"},"ts":1586360472000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1586360476000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"yeah good point","msgtype":"m.text"},"ts":1586360481000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I can do it in a way that gives us a diff","msgtype":"m.text"},"ts":1586360493000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Hm, why go up to child-of-body, rather than just nearest-ancestor-not-autoclosed-by-an-aside?","msgtype":"m.text"},"ts":1586363426000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That sounds more complicated :)","msgtype":"m.text"},"ts":1586364164000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If it was easy to know what that list was then we could probably do it","msgtype":"m.text"},"ts":1586364214000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"If only there were a spec around that described the auto-closing behavior, or perhaps an editor of said spec... ^_^","msgtype":"m.text"},"ts":1586374709000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: mind elaborating the confusion on https://github.com/tc39/ecma262/issues/1524#issuecomment-611222892?","msgtype":"m.text"},"ts":1586385546000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"shu: just confused/sad that we got to that conclusion given the arguments presented.","msgtype":"m.text"},"ts":1586385592000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"AIUI the problem we want to solve was to not mislead -- currently, sometimes implementations mean a user agent, sometimes all user agents","msgtype":"m.text"},"ts":1586385599000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"the compromise was to directly address that issue by enumerating all the places where implementation actually means host","msgtype":"m.text"},"ts":1586385612000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"and linking to the actual host spec","msgtype":"m.text"},"ts":1586385618000,"senderName":"shu","senderId":"shu@irc"},
{"content":{"body":"Sure. We've just lost a valuable word to discuss the distinction.","msgtype":"m.text"},"ts":1586385663000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"that's fair -- the plan is to clarify that in the front matter somehow, non-normatively","msgtype":"m.text"},"ts":1586385692000,"senderName":"shu","senderId":"shu@irc"}
]