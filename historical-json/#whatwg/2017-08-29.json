[
{"content":{"body":"Do we have any examples of inheriting NoInterfaceObjects? I think not, but I want to be sure.","msgtype":"m.text"},"ts":1503999138000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"There used to be one in XHR","msgtype":"m.text"},"ts":1503999232000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I think we removed it because NoInterfaceObject should only be used on mixins","msgtype":"m.text"},"ts":1503999250000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: so the reason I'm asking is because I'm busy adding dedicated mixin syntax right now","msgtype":"m.text"},"ts":1503999358000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Then we should not need NoInterfaceObject anymore","msgtype":"m.text"},"ts":1503999376000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: and I want to be sure I can eschew inheritance altogether.","msgtype":"m.text"},"ts":1503999380000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Oh, inheriting mixins? Dunno","msgtype":"m.text"},"ts":1503999398000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: we still need it for a bunch of things. But we'll call it LegacyNoInterfaceObjct","msgtype":"m.text"},"ts":1503999419000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"E.g. this guy: https://www.w3.org/TR/geolocation-API/#geolocation","msgtype":"m.text"},"ts":1503999507000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: well, if there are no inheriting NoInterfaceObjects right now, we can keep things saner by preventing them altogether in the mixin design","msgtype":"m.text"},"ts":1503999591000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Makes sense","msgtype":"m.text"},"ts":1503999603000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"The follow-up question is whether there are any mixins with anything other than regular attributes and operations","msgtype":"m.text"},"ts":1503999789000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"i.e. statics? specials ops? etc.","msgtype":"m.text"},"ts":1503999811000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Ms2ger: is moz-central still mirrored on Git somewhere?","msgtype":"m.text"},"ts":1504001153000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"https://github.com/mozilla/gecko-dev","msgtype":"m.text"},"ts":1504001177000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: ta","msgtype":"m.text"},"ts":1504001464000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"always want to know why it isn't mozilla-central but rather gecko-dev","msgtype":"m.emote"},"ts":1504001501000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Np","msgtype":"m.text"},"ts":1504001608000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: to promote irc interactions between Mozillians and non-Mozillians","msgtype":"m.text"},"ts":1504001636000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"gsnedders: works like a charm","msgtype":"m.text"},"ts":1504001647000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"downloading gecko-dev is the new \"waiting for the code to compile\"","msgtype":"m.text"},"ts":1504001690000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"foolip: I'll let you merge the quirks PRs","msgtype":"m.text"},"ts":1504004769000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"finds files under demos/ with <!DOCTYPE html PUBLIC \"-//WHATWG//NONSGML HTML5//EN\">","msgtype":"m.emote"},"ts":1504008672000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Nice","msgtype":"m.text"},"ts":1504009313000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"where does that PUBLIC ID even come from?","msgtype":"m.text"},"ts":1504009995000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Any ideas why Chrome refuses to accept \"793\" and shows a value that \"793.01\" is valid when using an <input type=\"number\"> field?","msgtype":"m.text"},"ts":1504010046000,"senderName":"oal_","senderId":"oal_@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1504010521000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"The server at wiki.ecmascript.org is taking too long to respond.","msgtype":"m.text"},"ts":1504010523000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"tobie: sounds like you're on the right track with mixins. I do not know of any statics or special ops yet, so we can start conservative.","msgtype":"m.text"},"ts":1504013439000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, turns out awk + grep do wonders for that kind of research","msgtype":"m.text"},"ts":1504013524000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Special ops and even statics don't seem problematic in theory. But why make it more complex than it needs to be, IMO.","msgtype":"m.text"},"ts":1504013556000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yeah, this is the occasion to enforce cleaner design, so let's do it","msgtype":"m.text"},"ts":1504013593000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"Domenic: as you said, we can always add more stuff if there are compelling use cases","msgtype":"m.text"},"ts":1504013640000,"senderName":"tobie","senderId":"tobie@irc"},
{"content":{"body":"JakeA: are there any real blockers to landing the fetch abort PR?","msgtype":"m.text"},"ts":1504013799000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there were some additional comments, but I haven't gone through them yet. It feels close. Really close.","msgtype":"m.text"},"ts":1504014080000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea, we already have the tests","msgtype":"m.text"},"ts":1504014108000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: do you think there is any reason to ship Abort API without the fetch integration?  I think no, but baku was proposing it","msgtype":"m.text"},"ts":1504014154000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: there are other specs interested in using it, but I don't see a huge benefit. I guess there's a danger that developers would think !!self.AbortController means fetch abort is supported","msgtype":"m.text"},"ts":1504014238000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"yea","msgtype":"m.text"},"ts":1504014264000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"just like ReadableStream!","msgtype":"m.text"},"ts":1504014271000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: so we are having trouble getting this test case to pass with the proposed webidl: https://hg.mozilla.org/integration/mozilla-inbound/file/92692c9a4f1e/testing/web-platform/meta/fetch/api/abort/general-serviceworker.https.html.ini#l3","msgtype":"m.text"},"ts":1504015336000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: baku tells me he has to change RequestInit.signal to `AbortSignal?` instead of `AbortSignal` for it to work","msgtype":"m.text"},"ts":1504015353000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: this is a mistake in the test, thanks for flagging it","msgtype":"m.text"},"ts":1504015390000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: I'll fix that now","msgtype":"m.text"},"ts":1504015420000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: thanks!","msgtype":"m.text"},"ts":1504015512000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: also, is the timing of this test guaranteed? http://searchfox.org/mozilla-central/source/testing/web-platform/tests/fetch/api/abort/general.js#439","msgtype":"m.text"},"ts":1504015519000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I don't understand how you can ensure the empty.txt file loads through the network stack before the abort() happens","msgtype":"m.text"},"ts":1504015543000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: hmm, I thought that since it had an empty body it'd be done by the time headers arrived, since that's all there was. I could clone the response and await responseClone.text(), would that help?","msgtype":"m.text"},"ts":1504015700000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I mean, is there something in the spec that guarantees the network stack will detect the body is complete when it completes receiving the headers and resolves the fetch() promise?  we have some async steps that close the body shortly after, but its a separate task","msgtype":"m.text"},"ts":1504015703000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I guess teeing the body stream and exhausting it would be better?","msgtype":"m.text"},"ts":1504015795000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no wait, teeing wouldn't work","msgtype":"m.text"},"ts":1504015802000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"await response.clone().text()","msgtype":"m.text"},"ts":1504015826000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I don't understand what you are trying to test here... that a complete empty stream is not errored on abort?","msgtype":"m.text"},"ts":1504015831000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: going to double check how I'm using streams here. A previous draft treated things like the readable canceling, but it was changed to erroring. Going to double check the assumptions in that test","msgtype":"m.text"},"ts":1504016024000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"no, it's still cancelling, I remembered wrong. Actually, I'll stop piping brain to IRC until I'm sure","msgtype":"m.text"},"ts":1504016091000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"I... think I've managed to confuse myself https://github.com/whatwg/html/issues/2973","msgtype":"m.text"},"ts":1504016281000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"JakeA: well, I think we are not going to block shipping on this test for now... right now we fail it","msgtype":"m.text"},"ts":1504016284000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: it's definitely an edge case","msgtype":"m.text"},"ts":1504016381000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I do want this one fixed before shipping, though: https://bugzilla.mozilla.org/show_bug.cgi?id=1394102","msgtype":"m.text"},"ts":1504016419000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: and unfortunately I don't think there is a WPT test for it yet","msgtype":"m.text"},"ts":1504016427000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: is this something you want to add or do you want me to have baku write the WPT test and upstream it through gecko?","msgtype":"m.text"},"ts":1504016462000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: happy for baku to do it","msgtype":"m.text"},"ts":1504016507000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1504016513000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"sorry there wasn't a test already","msgtype":"m.text"},"ts":1504016518000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np","msgtype":"m.text"},"ts":1504016521000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: at least in our implementation we often lose data on Request going to FetchEvent.request... because of how we have to convert to an itnernal network thing and then back to Request... so its a common bug I've started to look for","msgtype":"m.text"},"ts":1504016555000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: honestly its surprising how many of the tests work correctly without having an implementation to run them against initially","msgtype":"m.text"},"ts":1504016832000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I built *the worst* polyfill so I could kinda test some of the tests","msgtype":"m.text"},"ts":1504016884000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but yeah, it helped catch mistakes","msgtype":"m.text"},"ts":1504016909000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: any chance you could rubber stamp this WPT change to SW tests? https://github.com/w3c/web-platform-tests/pull/6745","msgtype":"m.text"},"ts":1504016955000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"test bug on the uplift from blink that wasn't caught because blink doesn't pass the test yet","msgtype":"m.text"},"ts":1504017025000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: merged!","msgtype":"m.text"},"ts":1504017086000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"thanks!","msgtype":"m.text"},"ts":1504017091000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: I'm always conflicted about whether to do WPT changes in gecko and then pester jgraham to sync them... or to do an upstream PR directly","msgtype":"m.text"},"ts":1504017527000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I HATH RETURN'D FROM THE DEPTHS OF THE STREAMS SPEC","msgtype":"m.text"},"ts":1504017592000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: ok, so, https://streams.spec.whatwg.org/#readable-stream-default-controller-close - this is called when the stream is closed","msgtype":"m.text"},"ts":1504017640000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: Usually, the closing operation is in effect added to the end of a queue, behind data that's already been added","msgtype":"m.text"},"ts":1504017712000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So the stream doesn't become actually closed until something reads all the data","msgtype":"m.text"},"ts":1504017734000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"However, if there's no data, the stream is closed immediately","msgtype":"m.text"},"ts":1504017752000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"And once it's closed, it can't error","msgtype":"m.text"},"ts":1504017767000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So, if a byte is added to the stream, then it's closed, that stream can still error as the result of aborting","msgtype":"m.text"},"ts":1504017809000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: sure, but in fetch when does it make the determination that there is no data?","msgtype":"m.text"},"ts":1504017828000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: yeah, the timing of that test is broken. It assumes close() has already been called, which may not be the case","msgtype":"m.text"},"ts":1504017893000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"perfect!","msgtype":"m.text"},"ts":1504017914000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: I'm trying to test that a closed response stream with nothing in the queue will not reject with AbortError","msgtype":"m.text"},"ts":1504017972000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"but I'm not sure it's testable","msgtype":"m.text"},"ts":1504017990000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"outside of a controlled streams test of course","msgtype":"m.text"},"ts":1504018003000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: would awaiting response.clone().text() sort it, or is that still unreliable?","msgtype":"m.text"},"ts":1504018133000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: I believe it would avoid the race, I'm just not 100% sure if aborting at that point tests what you want","msgtype":"m.text"},"ts":1504018175000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I guess it does?","msgtype":"m.text"},"ts":1504018178000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"wanderview: the test would clone, read all of the response, abort, then read from the original request's stream","msgtype":"m.text"},"ts":1504019729000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: that means the browser would now have the whole response, but I guess it doesn't guarantee that the stream object has closed","msgtype":"m.text"},"ts":1504019792000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Domenic: If a response is empty, is response.body.getReader().closed guaranteed to fulfill?","msgtype":"m.text"},"ts":1504020069000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Pretty sure yes","msgtype":"m.text"},"ts":1504020082000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The underlying source may be waiting on a pull to call controller.close(), but I guess that will always happen, even without reader.read()","msgtype":"m.text"},"ts":1504020153000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"wanderview: ok so I got distracted and didn't change those tests, but it's on my todos for tomorrow","msgtype":"m.text"},"ts":1504022302000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"np, thanks","msgtype":"m.text"},"ts":1504023042000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"TabAtkins: how is perf under pypy nowadays?","msgtype":"m.text"},"ts":1504039607000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Not a clue.","msgtype":"m.text"},"ts":1504039613000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I wish WPT tests would include comments about the intent of the test... sometimes its hard to infer what its trying to test","msgtype":"m.text"},"ts":1504040674000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"like this test: https://github.com/w3c/web-platform-tests/blob/master/service-workers/service-worker/navigation-redirect-body.https.html","msgtype":"m.text"},"ts":1504040683000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"I think its trying to verify the POST gets converted to a GET on the redirect, but its a bit vague","msgtype":"m.text"},"ts":1504040738000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"oh god the number of arguments we've had over that","msgtype":"m.text"},"ts":1504040752000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"because 99% of the time a fair number of people go \"my tests are obvious what they're testing and I'm not going back and adding comments so you're not getting them\"","msgtype":"m.text"},"ts":1504040797000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: I'm not saying to go back and add them... but we could encourage people to document future tests","msgtype":"m.text"},"ts":1504040822000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"and unfortunately a lot of tests are not obvious when they are spread across main window, an iframe, a service worker event handler, and a .py server script","msgtype":"m.text"},"ts":1504040861000,"senderName":"wanderview","senderId":"wanderview@irc"},
{"content":{"body":"JakeA: with foreign fetch going away, are we keeping link registration of service workers?  I assume so, but they were added together so wasn't sure","msgtype":"m.text"},"ts":1504041098000,"senderName":"wanderview","senderId":"wanderview@irc"}
]