[
{"content":{"body":"annevk's offhand comment has launched me into a topsy-turvy what-if world where every time i see some CSS selectors juxtaposed I contemplate what could have been, and whether it would have been better.","msgtype":"m.text"},"ts":1379253054000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"Hah, sorry Domenic_!","msgtype":"m.text"},"ts":1379255373000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is there a standard test suite for <canvas>?","msgtype":"m.text"},"ts":1379257991000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I found http://philip.html5.org/tests/canvas/suite/tests/ but it seems to be really outdated.","msgtype":"m.text"},"ts":1379258084000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"http://w3c-test.org/html/tests/approved/canvas/ I suspect","msgtype":"m.text"},"ts":1379258208000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Aha, thanks.","msgtype":"m.text"},"ts":1379258247000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"annevk, yeah, that doesn't seem to test what I'm looking for. Is there a way to submit new tests to that?","msgtype":"m.text"},"ts":1379258544000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: pull requests to https://github.com/w3c/web-platform-tests I suspect","msgtype":"m.text"},"ts":1379258569000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jasper: seems there's a 2dcontext directory too...","msgtype":"m.text"},"ts":1379258592000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Probably has something to do with the W3C making the silly decision to publish them as distinct documents while there's still only one person writing them...","msgtype":"m.text"},"ts":1379258641000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"OK, yeah. Every browser that I can test with does not seem to use the clipping path when rendering text.","msgtype":"m.text"},"ts":1379258831000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"even though: \"These shapes are painted without affecting the current path, and are subject to shadow effects, global alpha, the clipping region, and global composition operators.\"","msgtype":"m.text"},"ts":1379258850000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"I wonder if we should just remove \"clipping path\" from that sentence, since fixing that bug might cause backwards compatibility issues. But then in order to clip text I'd need to create a new scratch canvas and copy pixels over","msgtype":"m.text"},"ts":1379258899000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: I guess you're familiar with posting issues to whatwgâŠ™wo?","msgtype":"m.text"},"ts":1379259010000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I'm not, actually.","msgtype":"m.text"},"ts":1379259019000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: http://www.whatwg.org/mailing-list#specs","msgtype":"m.text"},"ts":1379259040000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jasper: you can also file a bug, but emailing will give other implementers a better heads up, generally","msgtype":"m.text"},"ts":1379259066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, do I need to subscribe to the list, or can I just send one email?","msgtype":"m.text"},"ts":1379259092000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: need to subscribe unfortunately, we're bad at handling spam :/","msgtype":"m.text"},"ts":1379259120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk, sent http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2013-September/040835.html","msgtype":"m.text"},"ts":1379259522000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"sorry if I broke some etiquette or didn't explain myself clearly enough","msgtype":"m.text"},"ts":1379259532000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Jasper: seems fine","msgtype":"m.text"},"ts":1379259555000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Jasper: might take a while for people to get back to you, mind","msgtype":"m.text"},"ts":1379259567000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Yep.","msgtype":"m.text"},"ts":1379259572000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"It's a weekend, too.","msgtype":"m.text"},"ts":1379259575000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"annevk, thanks!","msgtype":"m.text"},"ts":1379259580000,"senderName":"Jasper","senderId":"Jasper@irc"},
{"content":{"body":"Hixie_: So your change about lone surrogates is still a change from the old html5lib tests and what the spec used to say. Lone surrogates used to get converted to U+FFFD. Now, is that desirable or not? Dunno.","msgtype":"m.text"},"ts":1379268978000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"That's what they do in CSS. I think we should be consistent at least... Rationale for one ought to apply to the other...","msgtype":"m.text"},"ts":1379276667000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: i tried to do that and people screamed at me that DOM APIs shouldn't do unicode sanitising... *shrug*","msgtype":"m.text"},"ts":1379277670000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Oh well. Anyone feel like updating a ton of tests?","msgtype":"m.text"},"ts":1379279091000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"annevk: CSS doesn't U+FFFD lone surrogates, i think","msgtype":"m.text"},"ts":1379281009000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: per recent changes to css3-syntax it does, not at the CSSOM level though","msgtype":"m.text"},"ts":1379281031000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I thought this discussion was about the parser because html5lib tests were mentioned...","msgtype":"m.text"},"ts":1379281060000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's at the parser level but only for document.write() and innerHTML","msgtype":"m.text"},"ts":1379281098000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Fucking lone surrogates. We should really make up a set of principles and start applying them everywhere.","msgtype":"m.text"},"ts":1379281103000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: css-syntax only U+FFFDs lone surrogates in css escapes","msgtype":"m.text"},"ts":1379281121000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"annevk: which html does also","msgtype":"m.text"},"ts":1379281129000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: okay, and you can't get them in the input stream, so I guess that's consistent then","msgtype":"m.text"},"ts":1379281144000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah. except when the input stream comes from cssom i guess","msgtype":"m.text"},"ts":1379281172000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"So it seems the principles are what I thought they'd be. Script is 16-bit code units and includes lone surrogates. Just parsing from network guarantees Unicode scalar values, including if you use escapes...","msgtype":"m.text"},"ts":1379281215000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1379281230000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"I think I'd prefer to just use 16-bit code units everywhere, but oh well...","msgtype":"m.text"},"ts":1379281255000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it's somewhat nicer if you don't have JavaScript and still want to interpret some HTML and use non-browser strings... But the difference seems marginal and if you want code sharing you'll end up with browser strings anyway.","msgtype":"m.text"},"ts":1379281317000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i'd be nicer if javascript was unicode scalar values and you never saw utf-16 anywhere ever ever ever","msgtype":"m.text"},"ts":1379281504000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Well, that'd be easier if JS didn't predate UTF-16.","msgtype":"m.text"},"ts":1379281619000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"UTF-16 predates the web, let alone JS","msgtype":"m.text"},"ts":1379281754000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"though i guess teh surrogates don't predate the web","msgtype":"m.text"},"ts":1379281798000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so practically you're right","msgtype":"m.text"},"ts":1379281819000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"UCS-2 predates the web, no?","msgtype":"m.text"},"ts":1379281820000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"UTF-16 comes later.","msgtype":"m.text"},"ts":1379281827000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"err, surrogates define utf-16","msgtype":"m.text"},"ts":1379281828000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Well we can't change JavaScript. I'm not sure JavaScript predated utf-16","msgtype":"m.text"},"ts":1379281837000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"surrogates are 1996","msgtype":"m.text"},"ts":1379281855000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"UTF-16 was Unicode 2.0, 1996.","msgtype":"m.text"},"ts":1379281864000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"and livescript was 1995","msgtype":"m.text"},"ts":1379281877000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"so there we go","msgtype":"m.text"},"ts":1379281884000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Superseding UCS-2.","msgtype":"m.text"},"ts":1379281885000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"(is this a conversation about how powerful we need to build our time machine)","msgtype":"m.text"},"ts":1379281895000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1379281902000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Yeah, copying Java :/","msgtype":"m.text"},"ts":1379281902000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"well, before utf-16, ucs2 made a lot of sense","msgtype":"m.text"},"ts":1379281924000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"It could map the entire Unicode codespace.","msgtype":"m.text"},"ts":1379281936000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"The problem is the codespace got expanded.","msgtype":"m.text"},"ts":1379281942000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Sure, when 16-bit was enough for all code points...","msgtype":"m.text"},"ts":1379281945000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Which it was when JS was created.","msgtype":"m.text"},"ts":1379281955000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Now it's 21-bit, hopefully that'll last","msgtype":"m.text"},"ts":1379281965000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"gsnedders: yeah I know","msgtype":"m.text"},"ts":1379281975000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ucs-2 makes a lot more sense than utf-16, now and then, it's just limited","msgtype":"m.text"},"ts":1379281980000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"annevk: Well, given we're still at a point of most things being unassigned, it probably depends mostly on the rate of language change. Which I'm dubious about, given everything is typed nowadays.","msgtype":"m.text"},"ts":1379282034000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Anyway, this keeps coming up. We should sort it out somehow...","msgtype":"m.text"},"ts":1379282045000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Language change insofar as it changes alphabets, that is","msgtype":"m.text"},"ts":1379282052000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"votes lone surrogates always map to U+FFFD","msgtype":"m.emote"},"ts":1379282067000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: that's not gonna happen","msgtype":"m.text"},"ts":1379282083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Why not?","msgtype":"m.text"},"ts":1379282099000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: we can't change the nature of strings in JavaScript","msgtype":"m.text"},"ts":1379282110000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Oh, no, at that level it makes sense.","msgtype":"m.text"},"ts":1379282122000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: and we don't want the perf impact for every API","msgtype":"m.text"},"ts":1379282127000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then do we want to never convert them?","msgtype":"m.text"},"ts":1379282143000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"I think accepting 16-bit code units everywhere is the logical outcome, yes","msgtype":"m.text"},"ts":1379282165000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Then we should probably change what &#xd800; does. But maybe we can't?","msgtype":"m.text"},"ts":1379282172000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"http://lists.w3.org/Archives/Public/public-whatwg-archive/2011Nov/0020.html","msgtype":"m.text"},"ts":1379282181000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"But it depends on what other arguments are put forward. E.g. I can see compatibility with clients that don't want 16-bit code units to be seen as important. Although I'm not sure how important that is...","msgtype":"m.text"},"ts":1379282212000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"can we please not change this stuff? it's irrelevant to the wider world and just wastes implementer time.","msgtype":"m.text"},"ts":1379282223000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i agree with Hixie_. we have interop on this now iirc","msgtype":"m.text"},"ts":1379282269000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: the thing is, but this still being in flux it's still wasting time","msgtype":"m.text"},"ts":1379282272000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: e.g. for Rust / Servo","msgtype":"m.text"},"ts":1379282282000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie_: and the design of encoders/decoders","msgtype":"m.text"},"ts":1379282294000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"just, don't change what's implemented, that's all i ask","msgtype":"m.text"},"ts":1379282327000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"Hixie_: see recent thread on whatwgâŠ™wo, see thread on www-internationalâŠ™wo about text rendering, etc.","msgtype":"m.text"},"ts":1379282330000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"do mutation observers not provide a simple way to just detect when an element is removed from the DOM?","msgtype":"m.text"},"ts":1379282464000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i just want to observe an element until it's removed from its parent","msgtype":"m.text"},"ts":1379282498000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"You can observe the parent changes to its children.","msgtype":"m.text"},"ts":1379282697000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah but that means i have to filter out all the other children and then disconnect when i finally see what i care about","msgtype":"m.text"},"ts":1379282721000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"which is like twenty times more code than i want","msgtype":"m.text"},"ts":1379282735000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"File a bug? Could look into new mutation observer features at some point... I wonder if we should do that before or after MVC stuff is done.","msgtype":"m.text"},"ts":1379282942000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I need to get some sleep. If anyone here has feedback for TC39, please let me know. W3C TAG feedback welcome too... Will be in Boston / NY for a couple of weeks starting next week to talk to those guys.","msgtype":"m.text"},"ts":1379283023000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so here's a problem","msgtype":"m.text"},"ts":1379283082000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"i need to follow the node's parent","msgtype":"m.text"},"ts":1379283087000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"before i know what it is","msgtype":"m.text"},"ts":1379283091000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"since the element hasn't been added to the dom yet","msgtype":"m.text"},"ts":1379283098000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"at the point where i want to set up observing its parent going away","msgtype":"m.text"},"ts":1379283108000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"https://www.w3.org/Bugs/Public/show_bug.cgi?id=23250","msgtype":"m.text"},"ts":1379283371000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"is there a way to do \"instanceof Document\" that actually works? i.e. won't only be true for the current browsing context's Document?","msgtype":"m.text"},"ts":1379283947000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"o.ownerDocument == o, i guess...","msgtype":"m.text"},"ts":1379283996000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"oh, crap, that returns null for documents","msgtype":"m.text"},"ts":1379284018000,"senderName":"Hixie_","senderId":"Hixie_@irc"},
{"content":{"body":"well, o.ownerDocument == null, then, if i know it's a Node","msgtype":"m.text"},"ts":1379284029000,"senderName":"Hixie_","senderId":"Hixie_@irc"}
]