[
{"content":{"body":"Domenic: the constructor's realm in not in the same realm as MyDocCreatedForHavingASeparateRegistry","msgtype":"m.text"},"ts":1456876806000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so I think you DO need to get the global object out of [[Prototype]] internal slot","msgtype":"m.text"},"ts":1456876817000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: if you cared about that use case that is","msgtype":"m.text"},"ts":1456876828000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I see!","msgtype":"m.text"},"ts":1456876834000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Hmm so we're inside HTMLElement already","msgtype":"m.text"},"ts":1456876861000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I wonder if we can get the realm/global object of the currently running function","msgtype":"m.text"},"ts":1456876875000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I guess you kind of can but that might be hard to implement?","msgtype":"m.text"},"ts":1456876933000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: oh I see","msgtype":"m.text"},"ts":1456876960000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: yeah you can probably just get the realm of the callee","msgtype":"m.text"},"ts":1456876967000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"is getting uncomfortably familiar with JS these days...","msgtype":"m.emote"},"ts":1456877098000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: https://github.com/w3c/webcomponents/commit/73ae047c90529546ad61ccc43cb995edf3bfb14f","msgtype":"m.text"},"ts":1456877151000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: do we need \\ in [[\\GlobalObject]] ?","msgtype":"m.text"},"ts":1456877181000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah it's a ReSpec thing. Doesn't show up in the output","msgtype":"m.text"},"ts":1456877201000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1456877234000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: oh funny, we're not using upgrading for document.createElement?","msgtype":"m.text"},"ts":1456877336000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: (I like that)","msgtype":"m.text"},"ts":1456877363000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: hmmmm good question. I think it ended up being observably the same, and annevk wanted to use upgrading for uniformity, maybe? And I just forgot that?","msgtype":"m.text"},"ts":1456877407000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: your document.createElement is missing the case where we create HTMLUnknownElement.","msgtype":"m.text"},"ts":1456877409000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: no, it's still observable if you construct yourself inside a constructor before calling super","msgtype":"m.text"},"ts":1456877430000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I think that is covered by \"Let interface be the element interface for localName and the HTML namespace\" like it always was.","msgtype":"m.text"},"ts":1456877433000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"oh I see","msgtype":"m.text"},"ts":1456877451000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Hmmmm. Well it seems pretty reasonable to not use upgrading there but I'll add a line comment for annevk to check it out.","msgtype":"m.text"},"ts":1456877469000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: here's a \"better\" proposal that makes this completely non-observable: http://lists.w3.org/Archives/Public/public-webapps/2016JanMar/0114.html","msgtype":"m.text"},"ts":1456877475000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: it adds an extra environmental record and an argument to `Construct`","msgtype":"m.text"},"ts":1456877499000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: yeah... I tried to get my head around that and it seemed pretty intrusive to the JS engine...","msgtype":"m.text"},"ts":1456877511000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: but that can do away with all the stack nonsensee so that's nice","msgtype":"m.text"},"ts":1456877515000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: indeed but it might be useful in the long term though","msgtype":"m.text"},"ts":1456877526000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: nonetheless, the difference manifests in such an edge case (and results in unexpected behavior) that we can probably change it in the future","msgtype":"m.text"},"ts":1456877561000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: if we wanted to","msgtype":"m.text"},"ts":1456877565000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: so I'm not too concerned even if we went with the stack approach at least in v1","msgtype":"m.text"},"ts":1456877577000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"That's good to hear. Yeah, I'd be interested in trying to figure out a way to do that within existing ES spec constructs.","msgtype":"m.text"},"ts":1456877584000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, I think it's not too intrusive.","msgtype":"m.text"},"ts":1456877599000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"I dunno an extra parameter to construct is pretty big","msgtype":"m.text"},"ts":1456877609000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Environment records are extensible though","msgtype":"m.text"},"ts":1456877614000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: the only problem is that it may not be too easy for each JS engine to support it","msgtype":"m.text"},"ts":1456877616000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: indeed, that's the biggest question for perf","msgtype":"m.text"},"ts":1456877626000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Yeah I tried to get ajklein to take a look at it but he hasn't had the time","msgtype":"m.text"},"ts":1456877635000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"adding an extra argument in JS engine everywhere for this one edge case is such an over-engineering","msgtype":"m.text"},"ts":1456877654000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"given the observable behavioral difference is so damn small","msgtype":"m.text"},"ts":1456877677000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"having said that, it's a lot cleaner so I'll still put up for the future consideration","msgtype":"m.text"},"ts":1456877691000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"üëç","msgtype":"m.text"},"ts":1456877713000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: btw, you're missing one important thing in document.createElement","msgtype":"m.text"},"ts":1456877736000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: which is that you need to ensure whatever the constructor returned is indeed an Element","msgtype":"m.text"},"ts":1456877744000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and probably best to return null or undefined or throw something in the case it isn't.","msgtype":"m.text"},"ts":1456877759000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"rniwa: ah, great catch!","msgtype":"m.text"},"ts":1456877801000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"The parser will also need that","msgtype":"m.text"},"ts":1456877818000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yup","msgtype":"m.text"},"ts":1456877826000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and create HTMLUnknownElement when it failed","msgtype":"m.text"},"ts":1456877831000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: since parser can't stop","msgtype":"m.text"},"ts":1456877838000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Yeah parser is going to be so much work :(","msgtype":"m.text"},"ts":1456877858000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: yup! I've been working on it for the last two weeks or so and boy, it's not fun.","msgtype":"m.text"},"ts":1456877891000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"maybe you can spec it! i hear parsers in browsers follow the spec pretty closely...","msgtype":"m.text"},"ts":1456877934000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: it's actually not that much work in the spec.","msgtype":"m.text"},"ts":1456877955000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: it's more that our implementation of HTML5 parser isn't prepared to do these kinds of stuff","msgtype":"m.text"},"ts":1456877969000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1456878031000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"i just assume it'll require similar contortions to <script>.","msgtype":"m.text"},"ts":1456878038000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"which is like most of the parsing spec","msgtype":"m.text"},"ts":1456878046000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: well, not really","msgtype":"m.text"},"ts":1456878055000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: the only reason we have to pause parser, etc... is because of the perf optimizations we have","msgtype":"m.text"},"ts":1456878066000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and script has a bunch of legacy re-entrancy problems","msgtype":"m.text"},"ts":1456878081000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: but those things don't exist for custom elements (luckily)","msgtype":"m.text"},"ts":1456878091000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: but you're right that someone has to figure out how to update the spec...","msgtype":"m.text"},"ts":1456878106000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"and make sure all details are covered","msgtype":"m.text"},"ts":1456878113000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: one more note: https://github.com/w3c/webcomponents/pull/405/files#r54660611","msgtype":"m.text"},"ts":1456878263000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"thanks, saw that. gtg food, will pick this up later tonight or maybe tomorrow.","msgtype":"m.text"},"ts":1456878278000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: okay!","msgtype":"m.text"},"ts":1456878297000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: great work! thanks a lot for doing this!","msgtype":"m.text"},"ts":1456878306000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1456878336000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: btw, we just added the support for ::slotted","msgtype":"m.text"},"ts":1456878381000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Domenic: and I'm half way there on adding the parser support","msgtype":"m.text"},"ts":1456878392000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"\\o/","msgtype":"m.text"},"ts":1456878401000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'll let you guys know once the parser work is done because then you guys can play around with it","msgtype":"m.text"},"ts":1456878405000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"ETA is like 1-2 weeks","msgtype":"m.text"},"ts":1456878410000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"annevk: Heads-up, I spent today doing a lot of perf hacking, so you should see a *significant* decrease in built time.  I've been testing against real specs while doing this, so I shouldn't have regressed behavior anywhere, but let me know if you hit anything bad.","msgtype":"m.text"},"ts":1456878953000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Domenic: Shouldn't Document.all use elements' IDs (as in \"An element can have an associated unique identifier (ID)\") rather than the id attribute?","msgtype":"m.text"},"ts":1456878971000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't think there's a difference? I didn't touch that text I believe","msgtype":"m.text"},"ts":1456879023000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Oh right.","msgtype":"m.text"},"ts":1456879032000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Reviewed.","msgtype":"m.text"},"ts":1456879084000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: thanks, good catch","msgtype":"m.text"},"ts":1456879108000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"How do you not kill your eyes reviewing that stuff all the time? :P","msgtype":"m.text"},"ts":1456879126000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"If Elements is a subclass of Array, should concat/map/sort/etc return a new Elements object or a new Array?","msgtype":"m.text"},"ts":1456881172000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"JonathanNeal: a new Elements in ES2015","msgtype":"m.text"},"ts":1456881546000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"although we might want to override map (and concat??) to return an Array instead","msgtype":"m.text"},"ts":1456881593000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"the alternative is allowing Elements to contain non-elements and just ignore them when doing .query/.queryAll","msgtype":"m.text"},"ts":1456881612000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Is this Elements a new DOM/HTML interface we're adding?","msgtype":"m.text"},"ts":1456881651000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"It's been in the spec for a while, but blocked on implementations supporting subclassing of Array. I guess that is probably not a blocker anymore.","msgtype":"m.text"},"ts":1456881691000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://dom.spec.whatwg.org/#element-collections","msgtype":"m.text"},"ts":1456881707000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I‚Äôm writing a polyfill. I‚Äôm hoping to match spec (best as one can).","msgtype":"m.text"},"ts":1456881785000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Perhaps .concat is a bad thing to expect on Elements.","msgtype":"m.text"},"ts":1456883313000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"For instance, I would expect that queryAll('span').queryAll('span') on <span 1><span 2><span 3/></span></span> should only return [<span 2/>, <span 3/>] because I would expect it to sort the collections and remove duplicates. Is that a bad expectation?","msgtype":"m.text"},"ts":1456883462000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"And, if that is the case and .concat returns a new Elements collection, would it also sort and remove duplicates?","msgtype":"m.text"},"ts":1456883535000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Domenic , TabAtkins, was this already worked out?","msgtype":"m.text"},"ts":1456883661000,"senderName":"JonathanNeal","senderId":"JonathanNeal@irc"},
{"content":{"body":"Domenic: rniwa: I was not against synchronous createElement. Maybe someone else? Don't think it matters much. Did you make the code reusable for the parser?","msgtype":"m.text"},"ts":1456899646000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JonathanNeal: seems reasonable","msgtype":"m.text"},"ts":1456899699000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it is, other than the fact we need to swallow the exception and create a HTMLUnknownElement instead","msgtype":"m.text"},"ts":1456899726000,"senderName":"rniwa","senderId":"rniwa@irc"},
{"content":{"body":"Right, you do different things with the result","msgtype":"m.text"},"ts":1456899790000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"zcorpan: they way you fixed the square-brackets problem with https://github.com/whatwg/wattsi/pull/23 is very nice","msgtype":"m.text"},"ts":1456906771000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: thanks","msgtype":"m.text"},"ts":1456906800000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"Hixie_: want to have a quick look at the PR ^ ?","msgtype":"m.text"},"ts":1456906833000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"it may seem obvious but to me at least it wasn‚Äôt, because when I saw that issue my first thought was instead, shit now I have to write a percent-encoder","msgtype":"m.text"},"ts":1456906861000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"I had seen that MungeTopicToID function in the code but hadn‚Äôt bothered to pay attention to it","msgtype":"m.text"},"ts":1456906941000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"lesson learned","msgtype":"m.text"},"ts":1456906947000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"but glad you go to that before me, because I probably would have burned up time trying to write a percent-encoder and then ended up realizing that was not the right way","msgtype":"m.text"},"ts":1456907023000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Oh look, glazou found the webkit* events in the DOM spec","msgtype":"m.text"},"ts":1456913092000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"No fault in that reaction","msgtype":"m.text"},"ts":1456913179000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hopefully he recovers before noticing webkitMatchesSelector","msgtype":"m.text"},"ts":1456913193000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I think he will find it hard to read specs whilst passed out","msgtype":"m.text"},"ts":1456913390000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1456918752000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"Ms2ger: Where is that?","msgtype":"m.text"},"ts":1456919533000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://twitter.com/glazou","msgtype":"m.text"},"ts":1456919574000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah ah.","msgtype":"m.text"},"ts":1456919603000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk, btw https://twitter.com/glazou/status/700321457734356992","msgtype":"m.text"},"ts":1456919612000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, what should new Blob(undefined) do?","msgtype":"m.text"},"ts":1456919775000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: it's ugly, but don't really have the same reaction to it as I used to","msgtype":"m.text"},"ts":1456919788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: hmm, throw?","msgtype":"m.text"},"ts":1456919836000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: iirc that's equivalent to new Blob(), which throws","msgtype":"m.text"},"ts":1456919847000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"new Blob() doesn't throw","msgtype":"m.text"},"ts":1456919856000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oh right, well it should do that then","msgtype":"m.text"},"ts":1456919870000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Actually, (undefined) does throw :)","msgtype":"m.text"},"ts":1456919886000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I don't understand why the first argument is not simply marked as optional","msgtype":"m.text"},"ts":1456919893000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If I had time I'd clean up File API","msgtype":"m.text"},"ts":1456919909000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"If the spec did use `optional`, you would have been right","msgtype":"m.text"},"ts":1456919920000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"files an issue on webidl (sorry bz)","msgtype":"m.emote"},"ts":1456920006000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Why sorry?","msgtype":"m.text"},"ts":1456920023000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: the spec should use optional","msgtype":"m.text"},"ts":1456920041000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: or is there some compat thing?","msgtype":"m.text"},"ts":1456920053000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I don't think so","msgtype":"m.text"},"ts":1456920080000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"So passing undefined == omitting an optional parameter?","msgtype":"m.text"},"ts":1456920122000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: yes","msgtype":"m.text"},"ts":1456920133000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"But it's weird that the current code is not equivalent to `optional`","msgtype":"m.text"},"ts":1456920134000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"An ECMAScript value V is converted to an IDL sequence<T> value as follows:","msgtype":"m.text"},"ts":1456920198000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"If V is not an object, throw a TypeError.Ms2ger: Does it say that for sequence<T>, undefined == empty sequence?","msgtype":"m.text"},"ts":1456920199000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"I can't copy-paste.","msgtype":"m.text"},"ts":1456920208000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://heycam.github.io/webidl/#es-overloads","msgtype":"m.text"},"ts":1456920209000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: nah, that's because of XMLHttpRequest","msgtype":"m.text"},"ts":1456920209000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"\"An ECMAScript value V is converted to an IDL sequence<T> value as follows: If V is not an object, throw a TypeError.\"","msgtype":"m.text"},"ts":1456920216000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: search for \"Unfortunately legacy content prevents treating the async argument being undefined identical from it being omitted.\"","msgtype":"m.text"},"ts":1456920220000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"undefined isn't an object, right?","msgtype":"m.text"},"ts":1456920220000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox, that happens before we get to \"An ECMAScript value V is converted to an IDL sequence<T> value as follows\"","msgtype":"m.text"},"ts":1456920242000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk, hmm","msgtype":"m.text"},"ts":1456920247000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: so this seems like a File API issue","msgtype":"m.text"},"ts":1456920261000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see, and the second argument is optional.","msgtype":"m.text"},"ts":1456920272000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: unless you can figure out a way to make the File API IDL work while not breaking the XMLHttpRequest IDL...","msgtype":"m.text"},"ts":1456920279000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Ms2ger: But why would omitting a sequence argument be like the empty sequence?","msgtype":"m.text"},"ts":1456920292000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(it does not seem ideal though, since it's rather magical)","msgtype":"m.text"},"ts":1456920300000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"nox, it isn't","msgtype":"m.text"},"ts":1456920322000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ah, I thought that's what you meant by \"But it's weird that the current code is not equivalent to `optional`\".","msgtype":"m.text"},"ts":1456920351000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"https://github.com/w3c/FileAPI/issues/33","msgtype":"m.text"},"ts":1456920391000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"JakeA: http://stackoverflow.com/questions/35711724/progress-indicators-for-fetch","msgtype":"m.text"},"ts":1456920924000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: ‚¨Ü","msgtype":"m.text"},"ts":1456920947000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"„ÄåHow would I write \"a pass-through stream to monitor the bytes\" sent?„Äç","msgtype":"m.text"},"ts":1456920975000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"MikeSmith: will answer. We're waiting to see how streams pan out there, if not we'll have to find another way to manage progress","msgtype":"m.text"},"ts":1456921000000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"There's a lot of weirdness here due to how uploads interact with redirects","msgtype":"m.text"},"ts":1456921021000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"Quite","msgtype":"m.text"},"ts":1456921049000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"MikeSmith: http://stackoverflow.com/a/35747208/123395","msgtype":"m.text"},"ts":1456921525000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: super„Éºthanks","msgtype":"m.text"},"ts":1456921570000,"senderName":"MikeSmith","senderId":"MikeSmith@irc"},
{"content":{"body":"annevk: do I understand correctly that a cross-origin XHR with a custom Accept header must not be redirected (302)?","msgtype":"m.text"},"ts":1456924402000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"I have a basic question about legacy single-byte encodings. What are the columns in https://encoding.spec.whatwg.org/index-windows-1252.txt ?","msgtype":"m.text"},"ts":1456924884000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"single-byte value, code point, unicode visualisation, description ?","msgtype":"m.text"},"ts":1456925010000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but what does this single-byte value actually represent","msgtype":"m.text"},"ts":1456925025000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"it seems like there's a + 0x80 step?","msgtype":"m.text"},"ts":1456925045000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"apparently, as one-byte encodings differ only in 127-255 values?","msgtype":"m.text"},"ts":1456925106000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1456925113000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"right ok","msgtype":"m.text"},"ts":1456925125000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*128-255","msgtype":"m.text"},"ts":1456925310000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Is there a name for the single-byte encoding that just encodes things as their equivalent unicode?","msgtype":"m.text"},"ts":1456926225000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So the byte 0x8B just goes to U+008B PARTIAL LINE DOWN","msgtype":"m.text"},"ts":1456926239000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I can't find any index table with that","msgtype":"m.text"},"ts":1456926257000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"well such encoding would have to be pre-dated by unicode, right?","msgtype":"m.text"},"ts":1456926286000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"heh, yeah, i guess so","msgtype":"m.text"},"ts":1456926331000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"V8 comes with one built in","msgtype":"m.text"},"ts":1456926334000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"So UTF-8 but with lone code units interpreted as Latin-1? Or something like that?","msgtype":"m.text"},"ts":1456926393000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: ^","msgtype":"m.text"},"ts":1456926400000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"(Just curious about what you mean.)","msgtype":"m.text"},"ts":1456926407000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or do you just mean Latin-1? oO","msgtype":"m.text"},"ts":1456926427000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"hmmh, https://en.wikipedia.org/wiki/Latin-1_Supplement_%28Unicode_block%29 ?","msgtype":"m.text"},"ts":1456926505000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Code point wise, Unicode is a superset of Latin-1, so maybe that's what you meant?","msgtype":"m.text"},"ts":1456926582000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: I don't think that's true. For 128-159, they mismatch","msgtype":"m.text"},"ts":1456926782000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nox: according to https://encoding.spec.whatwg.org/index-windows-1252.txt at least","msgtype":"m.text"},"ts":1456926792000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: https://en.wikipedia.org/wiki/ISO/IEC_8859#Relationship_to_Unicode_and_the_UCS","msgtype":"m.text"},"ts":1456926846000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"e.g. 0x8B in latin1 is U+2039 ‚Äπ (SINGLE LEFT-POINTING ANGLE QUOTATION MARK)","msgtype":"m.text"},"ts":1456926848000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: That is ISO 8859-1 no?","msgtype":"m.text"},"ts":1456926857000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"nox: according to the Encoding Standard latin1 === windows-1252 === iso-8859-1, in browsers","msgtype":"m.text"},"ts":1456926889000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Whereas http://www.open-std.org/JTC1/SC2/WG3/docs/n411.pdf for ISO 8859-1 just fails to define what happens in the range 0-159","msgtype":"m.text"},"ts":1456926981000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"*128-159","msgtype":"m.text"},"ts":1456927007000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"ondras: not per browsers, works per spec now","msgtype":"m.text"},"ts":1456927395000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://en.wikipedia.org/wiki/C0_and_C1_control_codes is a decent summary of C1 stuff","msgtype":"m.text"},"ts":1456927398000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: working of tables is defined in spec, mostly a pointer to code point mapping","msgtype":"m.text"},"ts":1456927523000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: yeah just got thrown off by the +/0 0x80","msgtype":"m.text"},"ts":1456927539000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"+/-","msgtype":"m.text"},"ts":1456927541000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: This is really confusing.","msgtype":"m.text"},"ts":1456927714000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: I think the Encoding Standard redefined that.","msgtype":"m.text"},"ts":1456927795000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: I am confused. The spec says that such redir is an error, no?","msgtype":"m.text"},"ts":1456927803000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"If the response has an HTTP status code of 301, 302, 303, 307, or 308","msgtype":"m.text"},"ts":1456927826000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"Apply the cache and network error steps.","msgtype":"m.text"},"ts":1456927826000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: I think the Encoding Standard defined what browsers already do with meta charset=\"iso-8859-1\" or the UI switcher toggling to iso-8859-1","msgtype":"m.text"},"ts":1456927833000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"browsers don't have the luxury of saying \"welp, you used something between 128-159 which the spec doesn't define; better crash your page!","msgtype":"m.text"},"ts":1456927855000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Sure but what is the Latin 1 in https://en.wikipedia.org/wiki/Latin-1_Supplement_%28Unicode_block%29#Latin-1_punctuation_and_symbols?","msgtype":"m.text"},"ts":1456927884000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ah there is an explanation in https://en.wikipedia.org/wiki/ISO/IEC_8859-1#Coverage","msgtype":"m.text"},"ts":1456927972000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"'ISO-8859-1 is (according to the standards at least) the default encoding of documents delivered via HTTP with a MIME type beginning with \"text/\" (however the HTML5 specification requires that documents advertised as ISO-8859-1 actually be parsed with the Windows-1252 encoding.[4])'","msgtype":"m.text"},"ts":1456928041000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"ondras: what spec?","msgtype":"m.text"},"ts":1456928055000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: So the name you are looking for is IANA ISO-8859-1","msgtype":"m.text"},"ts":1456928071000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Domenic: Not HTML5 ISO-8859-1, nor ISO's ISO 8859-1.","msgtype":"m.text"},"ts":1456928088000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Erlang uses IANA ISO-8859-1. That's where I got the \"it is a subset of Unicode\".","msgtype":"m.text"},"ts":1456928116000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Can someone check http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3933 on Edge?","msgtype":"m.text"},"ts":1456928121000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"annevk?","msgtype":"m.text"},"ts":1456928122000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Domenic: Are you satisfied by that answer?","msgtype":"m.text"},"ts":1456928148000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Or not.","msgtype":"m.text"},"ts":1456928488000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gives up, too many similar names everywhere.","msgtype":"m.emote"},"ts":1456928496000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"annevk: https://www.w3.org/TR/cors/","msgtype":"m.text"},"ts":1456928537000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"nox: browsers used ISO-8859-1 as Windows-1252 since forever ago. AFAIK IE always has, and I /think/ Netscape always has too.","msgtype":"m.text"},"ts":1456928927000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: Yeah but then I would like to know where Erlang's definition comes from. :)","msgtype":"m.text"},"ts":1456928948000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"But I got ISOitis and stopped looking for it.","msgtype":"m.text"},"ts":1456928970000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"gsnedders, you don't have Edge?","msgtype":"m.text"},"ts":1456929225000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: It's failing to auto-update to the latest version :\\","msgtype":"m.text"},"ts":1456930010000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Summarized encoding situation at https://github.com/nodejs/node/pull/5504#issuecomment-191266052","msgtype":"m.text"},"ts":1456930060000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"nox: Erlang's definition came from ISO-8859-1 and ECMA-48 (IIRC), and is what most things outside of the web use the \"iso-8859-1\" label to mean. (Note the \"latin1\" label has a lot more variation)","msgtype":"m.text"},"ts":1456930212000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Still looking for someone who'll admit to having Edge around","msgtype":"m.text"},"ts":1456930272000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: https://dev.windows.com/en-us/microsoft-edge/tools/vms/linux/","msgtype":"m.text"},"ts":1456930318000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Thank you, mr helpful","msgtype":"m.text"},"ts":1456930331000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"You got one of those?","msgtype":"m.text"},"ts":1456930337000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"gsnedders: Takk.","msgtype":"m.text"},"ts":1456930369000,"senderName":"nox","senderId":"nox@irc"},
{"content":{"body":"Ms2ger: No, but you could have","msgtype":"m.text"},"ts":1456930379000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: so yeah, I have Edge 20, and it claims there are no updates available.","msgtype":"m.text"},"ts":1456931637000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: still no Edge","msgtype":"m.text"},"ts":1456932705000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: that's not the standard you're looking for","msgtype":"m.text"},"ts":1456932716000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: https://fetch.spec.whatwg.org/","msgtype":"m.text"},"ts":1456932724000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: thanks, hmm, CORS specced within the fetch spec?","msgtype":"m.text"},"ts":1456932878000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"annevk: I am going to use XHR for this...","msgtype":"m.text"},"ts":1456932895000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: XHR sits atop Fetch","msgtype":"m.text"},"ts":1456933048000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"honestly confused by the rich list of 5.x chapters under \"fetching\"","msgtype":"m.emote"},"ts":1456933113000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"now where does my question fit into this","msgtype":"m.text"},"ts":1456933121000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"http-redirect-fetch probably","msgtype":"m.text"},"ts":1456933168000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: step 4 of https://fetch.spec.whatwg.org/#http-fetch basically","msgtype":"m.text"},"ts":1456933182000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I would say step 5 with","msgtype":"m.text"},"ts":1456933279000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"redirect status","msgtype":"m.text"},"ts":1456933280000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"but anyway, according to this spec, it should work","msgtype":"m.text"},"ts":1456933292000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1456933293000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"also, custom request headers are to be persisted across redirections, right?","msgtype":"m.text"},"ts":1456933305000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"ondras: yes","msgtype":"m.text"},"ts":1456933716000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ondras: that should be very clear from the algorithm","msgtype":"m.text"},"ts":1456933723000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"fine fine, thanks for assistance","msgtype":"m.text"},"ts":1456933875000,"senderName":"ondras","senderId":"ondras@irc"},
{"content":{"body":"can we change the topic to \"this entire API is a mysterious clusterfuck of legacy garbage\"","msgtype":"m.text"},"ts":1456936620000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"that seems reasonable to me","msgtype":"m.text"},"ts":1456936939000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Domenic: I was just told by baku why awb was correct","msgtype":"m.text"},"ts":1456937360000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: MessageChannel has a queue, and the target MessagePort can switch realms before messages are actually delivered (when you invoke start())","msgtype":"m.text"},"ts":1456937403000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: so if you want to properly account for that, you need to serialize and deserialize","msgtype":"m.text"},"ts":1456937419000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: makes sense","msgtype":"m.text"},"ts":1456937425000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and if SAB indeed wants varying behavior based on realm, we'd have to go there...","msgtype":"m.text"},"ts":1456937456000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I feel sad now that I didn't know that ahead of time, oh well, SAB can wait a bit","msgtype":"m.text"},"ts":1456938485000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"document.all is the worst. custom bindings are the worst.","msgtype":"m.text"},"ts":1456940886000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"having to write test cases for elements with ids like \"Infinity\" \"0x0\", and \"+0\" is the worst.","msgtype":"m.text"},"ts":1456940905000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"haha","msgtype":"m.text"},"ts":1456940917000,"senderName":"miketaylr","senderId":"miketaylr@irc"},
{"content":{"body":"Domenic: will you get to https://github.com/whatwg/html/pull/783 today? It's not that big","msgtype":"m.text"},"ts":1456950408000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: literally just clicked on that email","msgtype":"m.text"},"ts":1456950422000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: and fixes the last \"regression\"","msgtype":"m.text"},"ts":1456950426000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1456950429000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"(as in, clicked on the email that i earlier flagged, as now i am reviewing it)","msgtype":"m.text"},"ts":1456950503000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: I'm somewhat glad I accidentally discovered that even ordinary objects have internal slots","msgtype":"m.text"},"ts":1456950722000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Domenic: which I kinda knew, but not actively, if that makes sense","msgtype":"m.text"},"ts":1456950744000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yeah that surprised me a bit","msgtype":"m.text"},"ts":1456950791000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"I thought https://twitter.com/glazou/status/705089928238125056 was advice from CSS","msgtype":"m.text"},"ts":1456951030000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Is this the grownup version of the kid saying the other parent endorsed some plan?","msgtype":"m.text"},"ts":1456951099000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1456951205000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this is literally not a whatwg decision","msgtype":"m.text"},"ts":1456951216000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"this is a tab and fantasai decision","msgtype":"m.text"},"ts":1456951220000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"when you find out someone is using your polyfill via npm and you made an API-breaking change and forgot to bump the minor version","msgtype":"m.text"},"ts":1456951458000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Domenic: https://twitter.com/rillian/status/705109214885126144 is relevant to your interests","msgtype":"m.text"},"ts":1456951609000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"lol i just switched to win64 yesterday","msgtype":"m.text"},"ts":1456952210000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"hah","msgtype":"m.text"},"ts":1456952374000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Don't worry, glazou just got angry about the decision on the call today.","msgtype":"m.text"},"ts":1456952574000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(His entire argument is that the name \"list-item\" makes it seem a little confusing to apply to <summary>, which isn't a list item.  He wasn't impressed by the reply that 'display' has no semantic value.)","msgtype":"m.text"},"ts":1456952633000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]