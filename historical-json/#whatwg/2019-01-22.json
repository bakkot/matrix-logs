[
{"content":{"body":"sounds more like cancellable promises than just an extension of abortable fetch","msgtype":"m.text"},"ts":1548115213000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"Would someone mind reopening https://github.com/whatwg/html/issues/284 for me, please?","msgtype":"m.text"},"ts":1548118750000,"senderName":"fantasai","senderId":"fantasai@irc"},
{"content":{"body":"reopened","msgtype":"m.text"},"ts":1548119118000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"annevk: If you wouldn't mind giving https://github.com/whatwg/html/pull/4048 a look now that I've rebased it that would be great. It should be done now","msgtype":"m.text"},"ts":1548135276000,"senderName":"domfarolino","senderId":"domfarolino@irc"},
{"content":{"body":"I think the signal propagates?","msgtype":"m.text"},"ts":1548143462000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"domfarolino: k, should have time","msgtype":"m.text"},"ts":1548143495000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"oh wow, a source set is not an actual set","msgtype":"m.text"},"ts":1548150310000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's a struct consisting of a set and some other field","msgtype":"m.text"},"ts":1548150320000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I guess it's already somewhat questionable practice to name the type in a name, but getting it wrong is another level ðŸ˜Š","msgtype":"m.text"},"ts":1548150385000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Although I tend to make an exception for lists/sets/maps, they somewhat make sense to name at times","msgtype":"m.text"},"ts":1548150413000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"When specs \"rethrow any exceptions\", what's the purpose of that? I thought rethrowing would be the default unless exceptions were caught","msgtype":"m.text"},"ts":1548168638000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"JakeA: old-style","msgtype":"m.text"},"ts":1548168661000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"JakeA: aka pre-Infra-making-it-better","msgtype":"m.text"},"ts":1548168675000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"ahaaaa thanks","msgtype":"m.text"},"ts":1548168679000,"senderName":"JakeA","senderId":"JakeA@irc"},
{"content":{"body":"So Glitch is pretty great, should have tried that sooner","msgtype":"m.text"},"ts":1548172487000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Basically avoids all the issues that Live DOM Viewer has due to the nested frames, though you'll need to use developer tools for the remaining features, which is okayish","msgtype":"m.text"},"ts":1548172538000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"One problem I ran into is that they name the Preview window, which tainted my test, but that's easy enough to work around once you know it","msgtype":"m.text"},"ts":1548172572000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"https://w3c.github.io/network-error-logging/#generate-a-network-error-report creates a \"new ECMAScript object\" for the primary purpose of calling JSON.stringify() in https://w3c.github.io/reporting/#try-delivery. I feel like bz won't like this setup. Would y'all suggest building a big WebIDL structure and JSON'ing it manually, or something else?","msgtype":"m.text"},"ts":1548179850000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"jyasskin: we lack good infrastructure around JSON","msgtype":"m.text"},"ts":1548182072000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"jyasskin: so I suspect that approach is fine as long as serialize is the intrinsics method and not a potentially modified one","msgtype":"m.text"},"ts":1548182120000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: If you're happy with it, I'm happy with it. The wording is \"executing the JSON.stringify() algorithm on collection [ECMA-262]\", which looks like an attempt to avoid any modifications.","msgtype":"m.text"},"ts":1548182220000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"You prolly want something similar to what Infra does for parse, but thatâ€™s WIP","msgtype":"m.text"},"ts":1548182266000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"We have serialize","msgtype":"m.text"},"ts":1548185484000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"https://infra.spec.whatwg.org/#serialize-json-to-bytes","msgtype":"m.text"},"ts":1548185494000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"jyasskin: in general that looks OK, the only question being types. Like, I have to infer that IP addresses are probably stored as strings because of the \"Otherwise, the empty string\"","msgtype":"m.text"},"ts":1548187262000,"senderName":"Domenic","senderId":"Domenic@irc"},
{"content":{"body":"Domenic: Yes, types are fuzzy throughout.","msgtype":"m.text"},"ts":1548187733000,"senderName":"jyasskin","senderId":"jyasskin@irc"},
{"content":{"body":"Aaah forgot Jeff landed that","msgtype":"m.text"},"ts":1548188633000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"So yeah, it should use that","msgtype":"m.text"},"ts":1548188647000,"senderName":"annevk","senderId":"annevk@irc"}
]