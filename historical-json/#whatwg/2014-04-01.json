[
{"content":{"body":"for the window.onerror example, are we talking about parsing an error log later on, or programmatically doing something with the magic string?","msgtype":"m.text"},"ts":1396310439000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"TabAtkins: why 60 million, btw?","msgtype":"m.text"},"ts":1396310512000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: what's your definition of \"expect\"?","msgtype":"m.text"},"ts":1396310519000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"36^5, the sqrt of 36^10.","msgtype":"m.text"},"ts":1396310524000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"50% expectation","msgtype":"m.text"},"ts":1396310527000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"oh, i see","msgtype":"m.text"},"ts":1396310548000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"the alphabet only actually has 16 characters","msgtype":"m.text"},"ts":1396310555000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"so 16^5","msgtype":"m.text"},"ts":1396310560000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Oh, you're only genning hex?","msgtype":"m.text"},"ts":1396310571000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I didnt' notice that","msgtype":"m.text"},"ts":1396310575000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"That's only about 1M then.","msgtype":"m.text"},"ts":1396310589000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"er wait","msgtype":"m.text"},"ts":1396310620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not 16...","msgtype":"m.text"},"ts":1396310627000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1396310640000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it is 16","msgtype":"m.text"},"ts":1396310642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but it's supposed to be more","msgtype":"m.text"},"ts":1396310648000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"26 or so","msgtype":"m.text"},"ts":1396310650000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"2346789abcdefghjkmnpqrtwxy","msgtype":"m.text"},"ts":1396310653000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Ah, the easy-to-distinguish alphanums.","msgtype":"m.text"},"ts":1396310690000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yeah, that's the idea","msgtype":"m.text"},"ts":1396310701000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1396310719000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i need this to be a power of 2 for the logic to work better","msgtype":"m.text"},"ts":1396310725000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"wonders whether to add or remove","msgtype":"m.emote"},"ts":1396310737000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"What's your logic?","msgtype":"m.text"},"ts":1396310795000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"geenerate hmax sha 512 of increasing number, use the first n bits to generate a 10 character string","msgtype":"m.text"},"ts":1396310854000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Interesting.","msgtype":"m.text"},"ts":1396310873000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i can add z5suv back in but i'm still short a character...","msgtype":"m.text"},"ts":1396310884000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"just reading /dev/urandom will probably give you equally non-repeating results, without depending on a last-used-number state","msgtype":"m.text"},"ts":1396310892000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Why not just generate a num between 0 and 26^10, then encode it in base 26?","msgtype":"m.text"},"ts":1396310892000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"really don't want to add il1o0","msgtype":"m.text"},"ts":1396310898000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"And yes, the lowercase z/s aren't really confusable for 2/5.","msgtype":"m.text"},"ts":1396310931000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(since /dev/urandom these days is basically just a crypto hash on top of entropy)","msgtype":"m.text"},"ts":1396310942000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i like to avoid actual randomness in my code","msgtype":"m.text"},"ts":1396310977000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"You're effectively grabbing randomness by taking an arbitrary chunk of a hash.","msgtype":"m.text"},"ts":1396310998000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1396311037000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"reproducible \"randomness\"","msgtype":"m.text"},"ts":1396311045000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i prefer to avoid state that has to be persisted, myself","msgtype":"m.text"},"ts":1396311049000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"also a bunch of new complexity if two clients might race and generate from the same index","msgtype":"m.text"},"ts":1396311177000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Yup.","msgtype":"m.text"},"ts":1396311209000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(which itself can be really hard to write tests for; i hate writing tests for things like locking and atomicity)","msgtype":"m.text"},"ts":1396311272000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"locking files is a solved problem :-)","msgtype":"m.text"},"ts":1396311282000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"with a solution that's much more complex than open('/dev/urandom').read(16) :----------)","msgtype":"m.text"},"ts":1396311321000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess it comes down to what your environment provides, and how much you trust it","msgtype":"m.text"},"ts":1396311345000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(i don't include \"make sure /dev/urandom is really random\" in my tests, after all)","msgtype":"m.text"},"ts":1396311363000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(\"really random\" as in \"not /dev/zero\")","msgtype":"m.text"},"ts":1396311420000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(in case someone was going to nit about PRNGs)","msgtype":"m.text"},"ts":1396311429000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Any system that doesn't implement a decent /dev/urandom would be *super* insecure anyway.","msgtype":"m.text"},"ts":1396311450000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"i tend to suspect security inexperience in people who still use /dev/random because it's \"more secure\", heh","msgtype":"m.text"},"ts":1396311499000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"locking files is like lines of code including importing the relevant constants and unlocking...","msgtype":"m.text"},"ts":1396311539000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like three lines, even","msgtype":"m.text"},"ts":1396311545000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"ok, now using a 32 character alphabet.","msgtype":"m.text"},"ts":1396311576000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"using the first 5 bits of each of the first ten bytes of the hmac sha 512 of numbers in sequential order.","msgtype":"m.text"},"ts":1396311607000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"bbiab","msgtype":"m.text"},"ts":1396311620000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe your environment has additional helpers for the busywork (blocking if the lockfile already exists, cleaning up if the pid contained in the lockfile doesn't exist, etc)","msgtype":"m.text"},"ts":1396311715000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"It's perl, so that's plausible.","msgtype":"m.text"},"ts":1396311738000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"also the need to atomically write the state file containing the last-used index (write new file, sync, rename), which is something all languages really should provide, but few do","msgtype":"m.text"},"ts":1396311753000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"While you're locked, that works anyway, right?","msgtype":"m.text"},"ts":1396311846000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"if the machine crashes, you don't want to reboot and come back up with a zero-byte file","msgtype":"m.text"},"ts":1396312027000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Ah, right.","msgtype":"m.text"},"ts":1396312044000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"(restore from backup and you lose that day's index delta)","msgtype":"m.text"},"ts":1396312052000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"''.join('23456789abcdefghijkmnpqrstuvwxyz'[ord(x) >> 3] for x in hashlib.sha512(open('/dev/urandom').read(32)).digest()[0:10]) # one-liners are evil, even in python","msgtype":"m.text"},"ts":1396312090000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i ended up testing 30,058,310 codes with the new algorithm, no dupes.","msgtype":"m.text"},"ts":1396324742000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(by tab's maths, there would be a 50% chance of a dupe at about 33 million, if i understand it right)","msgtype":"m.text"},"ts":1396324829000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"man, the tokeniser sure does have a lot of states","msgtype":"m.text"},"ts":1396329918000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: is unprefixing transitions *and* transforms both covered under the umbrella of this bug? https://code.google.com/p/chromium/issues/detail?id=154772","msgtype":"m.text"},"ts":1396335189000,"senderName":"sangwhan","senderId":"sangwhan@irc"},
{"content":{"body":"Hixie: sounds like a plan, will devote some time to it eventually. I need to do a write up with use cases, possibilities (e.g. generated vs. human readable), impact on existing/future specs, etc.","msgtype":"m.text"},"ts":1396336377000,"senderName":"Domenic_","senderId":"Domenic_@irc"},
{"content":{"body":"TabAtkins: ping","msgtype":"m.text"},"ts":1396346414000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"TabAtkins: unping....will catch you later","msgtype":"m.text"},"ts":1396346832000,"senderName":"a-ja","senderId":"a-ja@irc"},
{"content":{"body":"The new css spec style sheet is so funny...","msgtype":"m.text"},"ts":1396346875000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"looks like the support status markers on CSS specs haven't been updated to reflect the demise of Presto and Blink forking off of WebKit","msgtype":"m.text"},"ts":1396347745000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"MikeSmith: I don't know what to do about bugzilla.validator.nu cookies. The urlbase and cookiepath settings look right to me.","msgtype":"m.text"},"ts":1396348899000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"oh, hsivonen is alive","msgtype":"m.text"},"ts":1396349542000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"is this where I'm supposed to say that rumors of my demise have been exaggerated?","msgtype":"m.text"},"ts":1396349637000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"There were rumours?","msgtype":"m.text"},"ts":1396349909000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"hsivonen, oh, better news than your death, congratulations :)","msgtype":"m.text"},"ts":1396351953000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Ms2ger: thanks","msgtype":"m.text"},"ts":1396351967000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"what's the news?","msgtype":"m.text"},"ts":1396352063000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: a baby (that is, I'm now back from paternity leave)","msgtype":"m.text"},"ts":1396352101000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"hsivonen: ok, congrats!","msgtype":"m.text"},"ts":1396352130000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"zcorpan: thanks","msgtype":"m.text"},"ts":1396352136000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"congratulations","msgtype":"m.text"},"ts":1396352267000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: thanks","msgtype":"m.text"},"ts":1396352286000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"wow. there's now a community group for MPEG-2 in-band captioning in <video>","msgtype":"m.text"},"ts":1396360649000,"senderName":"hsivonen","senderId":"hsivonen@irc"},
{"content":{"body":"there's a community group for everything","msgtype":"m.text"},"ts":1396360758000,"senderName":"darobin","senderId":"darobin@irc"},
{"content":{"body":"Sounds more like a business group","msgtype":"m.text"},"ts":1396360831000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"heycam|away: maybe we should drop support for webidl in blink","msgtype":"m.text"},"ts":1396361819000,"senderName":"zcorpan","senderId":"zcorpan@irc"},
{"content":{"body":"SimonSapin: Around?","msgtype":"m.text"},"ts":1396368932000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1396368941000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Got a Q regarding http://dev.w3.org/csswg/css-syntax/#consume-an-escaped-code-point","msgtype":"m.text"},"ts":1396368981000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Also: OMG WUT IS THIS BG","msgtype":"m.text"},"ts":1396368999000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"It’s the new spec design :)","msgtype":"m.text"},"ts":1396369018000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"is also here. TabAtkins is so alone...","msgtype":"m.emote"},"ts":1396369025000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: Hey","msgtype":"m.text"},"ts":1396369044000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"I'm assuming the design is your fault","msgtype":"m.text"},"ts":1396369056000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Is '\\r' an escaped code point?","msgtype":"m.text"},"ts":1396369075000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"\\r is a carriage return?","msgtype":"m.text"},"ts":1396369112000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yoav: yes, it represents 'r'","msgtype":"m.text"},"ts":1396369113000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"in CSS","msgtype":"m.text"},"ts":1396369117000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Wat","msgtype":"m.text"},"ts":1396369120000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"anything else : Return the current input code point. \"","msgtype":"m.text"},"ts":1396369135000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Oh, yeah, if you literally type \\r in a CSS document, it's the same as just typing r.","msgtype":"m.text"},"ts":1396369150000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"So why is \"(max-width: \\r6000px)\" is parsed OK in anything that's not my MQ parser?","msgtype":"m.text"},"ts":1396369204000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Is the \\r getting pre processed?","msgtype":"m.text"},"ts":1396369218000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Because browsers' existing MQ parsers are usually crazy-stupid.","msgtype":"m.text"},"ts":1396369230000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"And/or yeah, they're stupidly interpreting \\r as a CR, which is just whitespace.","msgtype":"m.text"},"ts":1396369252000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yoav: do you have a test case?","msgtype":"m.text"},"ts":1396369259000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"if a JS literal string is involved, it does its own backslash-unescaping first","msgtype":"m.text"},"ts":1396369293000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Ahh","msgtype":"m.text"},"ts":1396369319000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"That explains it","msgtype":"m.text"},"ts":1396369330000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Layers upon layers of escapes.","msgtype":"m.text"},"ts":1396369343000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"I like that HTML has a completely different escape syntax. It avoids the stacked-escapes problem.","msgtype":"m.text"},"ts":1396369370000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"\"The escaped onion\" would make a good children's book title","msgtype":"m.text"},"ts":1396369373000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"SimonSapin: OK, cool. That's what was messing me up","msgtype":"m.text"},"ts":1396369485000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"So, '\\r' is 'r' and everything works fine","msgtype":"m.text"},"ts":1396369506000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"try \"\\\\r\" in a JS string","msgtype":"m.text"},"ts":1396369525000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"Any cool examples for escaped MQs I can use for testing?","msgtype":"m.text"},"ts":1396369637000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"hum, replace an character on an identifier with '\\' + hex value of the code point + ' '","msgtype":"m.text"},"ts":1396369804000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"add leading zeros to go up to 6 hex digits","msgtype":"m.text"},"ts":1396369839000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"add leading zeros to go up to 6 hex digits and omit the space","msgtype":"m.text"},"ts":1396369844000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin: Trying \"(max-width:6000px \\u0020 )\" and getting nothing","msgtype":"m.text"},"ts":1396369847000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"omit the space if the next char is not an hex digit","msgtype":"m.text"},"ts":1396369870000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"there is no u","msgtype":"m.text"},"ts":1396369879000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"and escapes (unless in a quoted string) give you identifiers","msgtype":"m.text"},"ts":1396369912000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"also: replace any non-hex-digit character in an identifier by '\\' followed by itself","msgtype":"m.text"},"ts":1396369960000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"and see https://github.com/SimonSapin/css-parsing-tests","msgtype":"m.text"},"ts":1396369970000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"eg. https://github.com/SimonSapin/css-parsing-tests/blob/101c330cb06b3e6de7f30509b4237421b94e3f28/component_value_list.json#L25-L38","msgtype":"m.text"},"ts":1396369999000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"https://github.com/SimonSapin/css-parsing-tests/blob/101c330cb06b3e6de7f30509b4237421b94e3f28/component_value_list.json#L25-L52, actually","msgtype":"m.text"},"ts":1396370036000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"SimonSapin & TabAtkins: Is it normal that neither Firefox nor Chrome actually match MQs with that? Or am I doing it wrong?","msgtype":"m.text"},"ts":1396370146000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"yoav: with what? (Test case please)","msgtype":"m.text"},"ts":1396370167000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"\"(max-width:6000px \\0020)\" *should* match nothing, because you've got an ident hanging out there.","msgtype":"m.text"},"ts":1396370221000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"http://jsbin.com/texaqabu/3/edit","msgtype":"m.text"},"ts":1396370226000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"An ident whose value is a single U+0020 character.","msgtype":"m.text"},"ts":1396370232000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yoav: What characters are those?\\","msgtype":"m.text"},"ts":1396370278000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"yoav: CSS numeric escapes are always hex","msgtype":"m.text"},"ts":1396370295000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"a 0 prefix does not make it octal","msgtype":"m.text"},"ts":1396370303000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I was going with \"px\"","msgtype":"m.text"},"ts":1396370322000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"that’d be \\70\\78 in hex","msgtype":"m.text"},"ts":1396370340000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"That's dumb of me","msgtype":"m.text"},"ts":1396370374000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"^_^","msgtype":"m.text"},"ts":1396370378000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"OK!","msgtype":"m.text"},"ts":1396370409000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Breakthrough","msgtype":"m.text"},"ts":1396370413000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Working in Firefox","msgtype":"m.text"},"ts":1396370420000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"No dice in Chrome tho, but that gives me something to fix!","msgtype":"m.text"},"ts":1396370444000,"senderName":"yoav","senderId":"yoav@irc"},
{"content":{"body":"Yeah, as mentioned previously, our MQ parser is mega-broken.","msgtype":"m.text"},"ts":1396370464000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"hmm, should I alias mediawiki's UTF-8 tracking bug as \"UTF-8\", \"utf-8\", or \"utf8\" ... practically all existing aliases are lowercase ...","msgtype":"m.text"},"ts":1396376079000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oh, wait, it's also about Unicode so I'll just alias it as \"unicode\" ...","msgtype":"m.text"},"ts":1396376296000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: yt?","msgtype":"m.text"},"ts":1396377076000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: yes","msgtype":"m.text"},"ts":1396377083000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: how do you feel about putting document.title in DOM","msgtype":"m.text"},"ts":1396377092000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: your timezone for the next seven days","msgtype":"m.text"},"ts":1396377094000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: it needs to interact with SVG and HTML <title>","msgtype":"m.text"},"ts":1396377104000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: can't HTML just do that?","msgtype":"m.text"},"ts":1396377117000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: or does the SVG WG still pretend it can have SVG without HTML? (because they cannot, they don't have an event loop and things)","msgtype":"m.text"},"ts":1396377142000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: i could, but it seems weird for HTML to be defining some SVG-specific stuff, so i was thinking HTML and SVG would hook into something DOM specifies","msgtype":"m.text"},"ts":1396377143000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"maybe i should just do it and not worry about it though","msgtype":"m.text"},"ts":1396377169000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: I'm happy to blur the lines further, either way","msgtype":"m.text"},"ts":1396377178000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"has always found html <title> rather magical","msgtype":"m.emote"},"ts":1396377186000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"(Well, ever since I discovered that you can't get the same results with custom XML and CSS)","msgtype":"m.text"},"ts":1396377297000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well all the useful elements in HTML are \"magical\" by that definition","msgtype":"m.text"},"ts":1396377472000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in the sense that they have semantics as well as presentation, sure","msgtype":"m.text"},"ts":1396377562000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"in the sense that the user agent is required to do stuff with them more than you can do with custom XML and CSS","msgtype":"m.text"},"ts":1396377625000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. <form>, <a>, <input>, <video>, ...","msgtype":"m.text"},"ts":1396377643000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"you are clearly using a different sense of the term \"useful\" than I am","msgtype":"m.text"},"ts":1396377661000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1396377684000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"well, mine includes stuff like <h2>","msgtype":"m.text"},"ts":1396377726000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"s/useful/interesting/?","msgtype":"m.text"},"ts":1396377815000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"anyway, it might have been 15 years ago that I got the idea \"<title> is magical\" into my head ...","msgtype":"m.text"},"ts":1396378084000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"well, i'm not a fan of the word \"magical\", but <title> has non-mundane behaviour, certainly","msgtype":"m.text"},"ts":1396378168000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"like <details>, <output>, <progres>, <canvas>, etc","msgtype":"m.text"},"ts":1396378185000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"TabAtkins: I totally love what you've done w/ the non-element selectors spec: http://dev.w3.org/csswg/selectors-nonelement/","msgtype":"m.text"},"ts":1396379141000,"senderName":"manu-","senderId":"manu-@irc"},
{"content":{"body":"(W3C Stylesheets hacked) https://twitter.com/jirkakosek/status/451067752703197184/photo/1","msgtype":"m.text"},"ts":1396379178000,"senderName":"manu-","senderId":"manu-@irc"},
{"content":{"body":"manu-, *all dev.w3.org/csswg/ specs","msgtype":"m.text"},"ts":1396379188000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It really is a step in the right direction... the dot-com bubble just messed everything up, glad to see a move back to fundamentals.","msgtype":"m.text"},"ts":1396379243000,"senderName":"manu-","senderId":"manu-@irc"},
{"content":{"body":"It's kinda unimaginative... Same thing from last year","msgtype":"m.text"},"ts":1396379291000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"oooh, right... April fools - forgot about that... had turned off all of my news feeds waiting for it to blow over.","msgtype":"m.text"},"ts":1396379324000,"senderName":"manu-","senderId":"manu-@irc"},
{"content":{"body":"Ms2ger: Yeah, I'd forgotten to prepare anything new.  I'll actually do a new joke next year, I promise. ^_^","msgtype":"m.text"},"ts":1396380197000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"TabAtkins: but will it resolve?","msgtype":"m.text"},"ts":1396381877000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: It'll take a year, but yeah.","msgtype":"m.text"},"ts":1396382309000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"},
{"content":{"body":"Hixie: with MessagePort, how does one side realize that the other side is no longer listening (due to untimely demise, for instance)","msgtype":"m.text"},"ts":1396382312000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1396382316000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: you don't, you need to implement ping","msgtype":"m.text"},"ts":1396382339000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: reason is GC","msgtype":"m.text"},"ts":1396382355000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"okay","msgtype":"m.text"},"ts":1396382372000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"Which reminds me, at some point we need to figure out the SW story around garbage collection","msgtype":"m.text"},"ts":1396382384000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"SW?","msgtype":"m.text"},"ts":1396382424000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"why is GC being detectable a problem?","msgtype":"m.text"},"ts":1396382426000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: there have been some proposals on the position to not expose GC / make memory leaks likelier","msgtype":"m.text"},"ts":1396382433000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"does not like memory leaks","msgtype":"m.emote"},"ts":1396382456000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"dglazkov: exposing the details of GC is bad as it might lead to having to define GC","msgtype":"m.text"},"ts":1396382457000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: ask TC39","msgtype":"m.text"},"ts":1396382466000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: that doesn't seem bad, just hard","msgtype":"m.text"},"ts":1396382474000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: why not, we have changed GC strategies many many times over the years due to it not being exposed","msgtype":"m.text"},"ts":1396382493000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: if it's exposed we cannot change strategies","msgtype":"m.text"},"ts":1396382500000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"that's not necessarily true, right?","msgtype":"m.text"},"ts":1396382508000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"I'm not sure I can speak much to all of the constraints here. I do know it's been one of the things we have tried very hard to avoid ever doing.","msgtype":"m.text"},"ts":1396382573000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"hmm, that sounds kind of like a silly reason to have no way to detect a broken socket","msgtype":"m.text"},"ts":1396382576000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"just make sure the GC is already sufficiently hard to predict","msgtype":"m.text"},"ts":1396382609000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"\"just\"","msgtype":"m.text"},"ts":1396382634000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what, you mean it isn't?","msgtype":"m.text"},"ts":1396382644000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it's not like there's refcounting involved like in CPython ...","msgtype":"m.text"},"ts":1396382682000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk: totally understand. It seems though the times are changing. With where asm.js is going, exposing GC in one way or another looks inevitable.","msgtype":"m.text"},"ts":1396382697000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"dglazkov: I don't know, would have to ask dherman, but exposing to asm.js does not necessarily mean we want to expose it higher-level too","msgtype":"m.text"},"ts":1396382765000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1396382793000,"senderName":"dglazkov","senderId":"dglazkov@irc"},
{"content":{"body":"annevk: I guess you must be worried about exposing what happens when a whole compartment goes away?","msgtype":"m.text"},"ts":1396383037000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"SamB: exposing GC in general","msgtype":"m.text"},"ts":1396383067000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"what else is there that's presently deterministic enough that stuff might grow to depend on it?","msgtype":"m.text"},"ts":1396383158000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Anything? Content has a tendency to rely on anything we expose, whether intentional or not","msgtype":"m.text"},"ts":1396383211000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I mean, what other situations can cause objects to be collected more-or-less immediately, rather than whenever the GC finally kicks in?","msgtype":"m.text"},"ts":1396383367000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Depends on your GC","msgtype":"m.text"},"ts":1396383482000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"dglazkov: what has asm.js to do with gc?","msgtype":"m.text"},"ts":1396383848000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"asm.js makes such js that gc doesn't have to run at all","msgtype":"m.text"},"ts":1396383925000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"SamB: you might implement the whole system using a cycle collector and traditional refcounting","msgtype":"m.text"},"ts":1396384123000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"SamB: then objects would usually die when the last ref goes away","msgtype":"m.text"},"ts":1396384138000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and in case of cycles, when the collector runs","msgtype":"m.text"},"ts":1396384158000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"smaug____: who would be stupid enough to actually do it that way","msgtype":"m.text"},"ts":1396384172000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"what is wrong with that?","msgtype":"m.text"},"ts":1396384197000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"refcounting is actually pretty slow","msgtype":"m.text"},"ts":1396384208000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"there are algorithms to optimize out most of it","msgtype":"m.text"},"ts":1396384225000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"and GC is hard if you have lots of objects","msgtype":"m.text"},"ts":1396384237000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"since GC deals with live objects and CC only possible garbage objects","msgtype":"m.text"},"ts":1396384252000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"hmm","msgtype":"m.text"},"ts":1396384269000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"annevk FWIW: dbh = indexedDB.open('db', 1); indexedDB.open('db', 2).onsuccess = function(){alert('GC-or-equivalent must have happened');}; dbh = null;","msgtype":"m.text"},"ts":1396384323000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"best performing systems are, at least per certain literature and research, combination of gc and cc","msgtype":"m.text"},"ts":1396384344000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"I guess refcounting *does* at least only do the extra work on objects that are probably of interest","msgtype":"m.text"},"ts":1396384376000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"jsbell: you don't define that in terms of event loops and lifetimes?","msgtype":"m.text"},"ts":1396384377000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: The spec says \"If the connection is GCed  .... the connection is closed\", which unblocks the second connection.","msgtype":"m.text"},"ts":1396384478000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"Oh my","msgtype":"m.text"},"ts":1396384518000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"whaaat?","msgtype":"m.text"},"ts":1396384534000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"files a spec bug","msgtype":"m.emote"},"ts":1396384538000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"Yeah. I was poking around for precedent for \"what if a transaction could waitUntil() a Promise, but the Promise was never resolved\"","msgtype":"m.text"},"ts":1396384574000,"senderName":"jsbell","senderId":"jsbell@irc"},
{"content":{"body":"https://www.youtube.com/watch?v=_eT7sl7bR1A oh man","msgtype":"m.text"},"ts":1396386066000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I wonder if there's a 2048 homescreen","msgtype":"m.text"},"ts":1396386081000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"annevk: Higher score == better apps you can launch?","msgtype":"m.text"},"ts":1396386506000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"And 2048 gives you the browser","msgtype":"m.text"},"ts":1396386525000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: yeah, maybe one screen has the game, and another has the apps available thus far","msgtype":"m.text"},"ts":1396386530000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"No, the game tiles are the launchers","msgtype":"m.text"},"ts":1396386549000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"oh man","msgtype":"m.text"},"ts":1396386669000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"so at some point you can no longer access 1024 until you hit it again?","msgtype":"m.text"},"ts":1396386690000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hmm?","msgtype":"m.text"},"ts":1396386769000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"the app corresponding to 1024 if that was unclear","msgtype":"m.text"},"ts":1396386788000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I still haven't hit 8192 btw","msgtype":"m.text"},"ts":1396386803000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"got 4096 several times","msgtype":"m.text"},"ts":1396386810000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"I get sloppy after a while :/","msgtype":"m.text"},"ts":1396386820000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"threes ftw :)","msgtype":"m.text"},"ts":1396387384000,"senderName":"hober","senderId":"hober@irc"},
{"content":{"body":"refcounting is comparatively slow, but in most layers it doesn't matter today","msgtype":"m.text"},"ts":1396387672000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"in systems where you can get away with not breaking cycles (eg. not the web), it also has the huge advantage of being deterministic","msgtype":"m.text"},"ts":1396387691000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"slow relative to what? managed memory and walking the entire heap every few seconds?","msgtype":"m.text"},"ts":1396387726000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"or slow relative to a defined ownership model?","msgtype":"m.text"},"ts":1396387741000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"relative to mark and sweep, since you don't have to adjust refcounts all the time (though I guess that also depends on how smart you can be about optimizing those out)","msgtype":"m.text"},"ts":1396387766000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"really? do you have data on that?","msgtype":"m.text"},"ts":1396387787000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"no, just my recollection","msgtype":"m.text"},"ts":1396387793000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"refcounting is like 2 extra instructions per assignment","msgtype":"m.text"},"ts":1396387804000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but if true, I still think it's irrelevant today, except maybe for really performance-sensitive stuff","msgtype":"m.text"},"ts":1396387810000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"compared to walking the entire heap, that seems cheap.","msgtype":"m.text"},"ts":1396387811000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hober: There you are again promoting iOS rather than the open web ;)","msgtype":"m.text"},"ts":1396387815000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: that doesn't happen every assignment though ...","msgtype":"m.text"},"ts":1396387850000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"true, but still","msgtype":"m.text"},"ts":1396387858000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it's an extra two writes, and in some (also non-web) cases an atomic write (don't know how expensive those are today)","msgtype":"m.text"},"ts":1396387868000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i have no data one way or the other, i just find it surprising","msgtype":"m.text"},"ts":1396387880000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i would have thought refcounting would win hands down in terms of raw cpu cycles spent on memory management over the lifetime of a task","msgtype":"m.text"},"ts":1396387906000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i'm sure it depends massively on the access patterns and language, so I'm overgeneralizing for sure","msgtype":"m.text"},"ts":1396387909000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i mean, wouldn't a GC model require at least as many instructions per assignment as well?","msgtype":"m.text"},"ts":1396387942000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"not following","msgtype":"m.text"},"ts":1396387954000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i guess you could just know where the pointers are","msgtype":"m.text"},"ts":1396387972000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if it's a strongly typed system","msgtype":"m.text"},"ts":1396387981000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"and walk it that way","msgtype":"m.text"},"ts":1396388007000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"if you have a memory model where you can walk around and look at pointers (like you need for that), \"x = y\" is simply what it says, set the storage for x to a pointer to y","msgtype":"m.text"},"ts":1396388031000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"usually just uses a defined ownership model, which seems faster than either :-)","msgtype":"m.emote"},"ts":1396388047000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"for refcounting, you have to say \"if x was set to something, decrease its refcount\" and then \"increase y's refcount\" after the assignment","msgtype":"m.text"},"ts":1396388048000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"which might also mean a branch","msgtype":"m.text"},"ts":1396388058000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"definitely faster, it just tends to lose on other fronts :P","msgtype":"m.text"},"ts":1396388092000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"yeah, it's definitely not a perfect solution :-)","msgtype":"m.text"},"ts":1396388134000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i find it makes me think more about the design though","msgtype":"m.text"},"ts":1396388145000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which is a win","msgtype":"m.text"},"ts":1396388148000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i grew up on C++, i guess I should be a little sad that I almost never use it these days","msgtype":"m.text"},"ts":1396388172000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i spent a decade or more writing lots of perl","msgtype":"m.text"},"ts":1396388350000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i avoided that trap","msgtype":"m.text"},"ts":1396388400000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"but recently i've come to realise that for anything serious, I really prefer a strongly typed non-GCed true OO natively compiled modern language","msgtype":"m.text"},"ts":1396388409000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"is there such a thing?","msgtype":"m.text"},"ts":1396388424000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"http://ian.hixie.ch/programming/","msgtype":"m.text"},"ts":1396388427000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"(I think this is where someone says that there is no strongly typed OO language)","msgtype":"m.text"},"ts":1396388439000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"(which indeed zewt did)","msgtype":"m.text"},"ts":1396388447000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"i've spent enough time at a high level to find things like closures hard to live without, and closures essentially require GC","msgtype":"m.text"},"ts":1396388455000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"jgraham: what I meant is \"modern\"","msgtype":"m.text"},"ts":1396388467000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Rust has closures","msgtype":"m.text"},"ts":1396388476000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"C++ does closures without GC","msgtype":"m.text"},"ts":1396388479000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as do some variants of ObjectPascal (sadly not the variant i'm using, yet.)","msgtype":"m.text"},"ts":1396388493000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i haven't touched any of the \"C++digitdigit\" things (since I don't think they'll go anywhere, not to the level of availability of real C++)","msgtype":"m.text"},"ts":1396388506000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(it doesn't do OO but unless you are implementing the DOM it doesn't seem to matter. And for implementing the DOM we will probably get single inheritance)","msgtype":"m.text"},"ts":1396388514000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie, Rust might be interesting to you","msgtype":"m.text"},"ts":1396388515000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Rust is an odd type of OO, though","msgtype":"m.text"},"ts":1396388540000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: i find the rust language to be a bit weird to read.","msgtype":"m.text"},"ts":1396388569000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Rust currently has typeclasses rather than inheritance","msgtype":"m.text"},"ts":1396388570000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: (too much like perl in its liberal use of unusual punctuation)","msgtype":"m.text"},"ts":1396388589000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"i have trouble visualizing closures without GC to handle the locals attached to the closure","msgtype":"m.text"},"ts":1396388589000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: I dunno, I thought this a few years ago, yet now almost all embedded platforms with a C++ compiler support C++11.","msgtype":"m.text"},"ts":1396388596000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Most of the punctuation is gone","msgtype":"m.text"},"ts":1396388604000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie, that's been improved a little... @ is gone, at least","msgtype":"m.text"},"ts":1396388608000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zewt: When a decade ago many didn't support stuff as basic as namespaces.","msgtype":"m.text"},"ts":1396388609000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"gsnedders: msvc?","msgtype":"m.text"},"ts":1396388612000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Well @ at least","msgtype":"m.text"},"ts":1396388613000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"jgraham: Is it really typecalsses? They didn't seem to quite be typeclasses last time I looked.","msgtype":"m.text"},"ts":1396388624000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Ms2ger: still has a long way to go. consider that my favourite language has so little punctuation it doesn't even use { } for blocks :-P","msgtype":"m.text"},"ts":1396388642000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"pascal? :P","msgtype":"m.text"},"ts":1396388657000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"(don't say yes)","msgtype":"m.text"},"ts":1396388663000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: They support most of it now","msgtype":"m.text"},"ts":1396388666000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1396388667000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(old python was pretty good in this regard, though modern python has taken a bit of a turn for the punctuationy)","msgtype":"m.text"},"ts":1396388667000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: modern variants thereof, but yeah","msgtype":"m.text"},"ts":1396388674000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"my only major, fundamental issue with python is the indentation block gimmick","msgtype":"m.text"},"ts":1396388695000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"I have used perl (and lived to tell the tale) and Rust, and Rust doesn't use punctuation like Perl","msgtype":"m.text"},"ts":1396388712000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: that and it's just not a fast language","msgtype":"m.text"},"ts":1396388716000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"jgraham: yeah, it's not at the level of perl.","msgtype":"m.text"},"ts":1396388727000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"which means it structurally has no way to do inline functions, and it can't do the inverted-template thing of php and ruby","msgtype":"m.text"},"ts":1396388736000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie, it does tend to follow C conventions for that, to avoid scaring the C programmers too much :)","msgtype":"m.text"},"ts":1396388736000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"jgraham: At least most things claim traits aren't quite type classes.","msgtype":"m.text"},"ts":1396388749000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"Like the usage in Rust generally follows straightforward patterns","msgtype":"m.text"},"ts":1396388753000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: it's extremely fast to develop in; fast to execute I don't know (except that it's never been a problem for me)","msgtype":"m.text"},"ts":1396388755000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"gsnedders: Well I don't exactly know","msgtype":"m.text"},"ts":1396388769000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"the problem with rust is that i look at some random rust and i can't tell what it's doing off the top of my head","msgtype":"m.text"},"ts":1396388783000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"in that respect it's like perl","msgtype":"m.text"},"ts":1396388787000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"e.g. code like: fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) { ... }","msgtype":"m.text"},"ts":1396388816000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":|","msgtype":"m.text"},"ts":1396388823000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"That's not the most readable of rust :)","msgtype":"m.text"},"ts":1396388828000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"finds that perfectly readable…","msgtype":"m.emote"},"ts":1396388829000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"the \"map: &mut M\" part in particular","msgtype":"m.text"},"ts":1396388840000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Argument map of type &mut M","msgtype":"m.text"},"ts":1396388849000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(And I've not touched that much Rust)","msgtype":"m.text"},"ts":1396388856000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"For M a type parameter that fulfills MutableMap<uint, uint>","msgtype":"m.text"},"ts":1396388870000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"what is \"&mut M\" ?","msgtype":"m.text"},"ts":1396388870000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Mutable pointer to M","msgtype":"m.text"},"ts":1396388877000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(non-owning)","msgtype":"m.text"},"ts":1396388884000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"A mutable borrowed pointer  to M","msgtype":"m.text"},"ts":1396388889000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"mutable pointer?","msgtype":"m.text"},"ts":1396388890000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"as opposed to?","msgtype":"m.text"},"ts":1396388891000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Immutable","msgtype":"m.text"},"ts":1396388896000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"An immutable pointer","msgtype":"m.text"},"ts":1396388897000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Ms2ger: Oh, then I misunderstood what it meant, so maybe not so readable :)","msgtype":"m.text"},"ts":1396388907000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"is an immutable pointer just a constant reference?","msgtype":"m.text"},"ts":1396388911000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Stronger","msgtype":"m.text"},"ts":1396388917000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"\"immutable pointer\" sounds like \"reference\" (c++)","msgtype":"m.text"},"ts":1396388921000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"You can only have one mutable pointer to an object in scope at a time so that the compiler can reason about lifetimes","msgtype":"m.text"},"ts":1396388928000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"It also guarantees that there are no mutable pointers to that value","msgtype":"m.text"},"ts":1396388937000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(that might be wrong)","msgtype":"m.text"},"ts":1396388943000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"You can only have one mutable pointer to an object in scope at a time so that you don't have data races","msgtype":"m.text"},"ts":1396388960000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"Yeah, that makes more sense","msgtype":"m.text"},"ts":1396388976000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"Hixie: yes. Rust makes stuff constant by default, you need the 'mut' keyword to change that. (Opposite of C/C++ and the 'const' keyword.)","msgtype":"m.text"},"ts":1396388977000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"mutable pointer as in const foo *x or mutable pointer as in foo *const x?","msgtype":"m.text"},"ts":1396388986000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"You can mutate what's behind it","msgtype":"m.text"},"ts":1396389013000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zewt: As in the thing it points to is mutable using that reference","msgtype":"m.text"},"ts":1396389013000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"so \"mut\" is more like the opposite of C++ const than it is like pascal argument \"var\" or the opposite of pascal argument \"const\"?","msgtype":"m.text"},"ts":1396389018000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Rust doesn't have pointer arithmetic","msgtype":"m.text"},"ts":1396389044000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"always thought the C++ \"const\" thing was a bit weird","msgtype":"m.emote"},"ts":1396389045000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"I haven't done pascal in 6 years or so, no idea :)","msgtype":"m.text"},"ts":1396389049000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"zewt: foo *const x if I remember which way around they are. :P","msgtype":"m.text"},"ts":1396389052000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"yeah I have to think about it too heh","msgtype":"m.text"},"ts":1396389061000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"zewt: i.e., &x is constant","msgtype":"m.text"},"ts":1396389062000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"another line of random rust, no idea what this does at all: vec!(~\"\", ~\"20\")","msgtype":"m.text"},"ts":1396389081000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"looks like a smiley","msgtype":"m.text"},"ts":1396389089000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"The ! means that vec is a macro","msgtype":"m.text"},"ts":1396389100000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"if a peculiar one","msgtype":"m.text"},"ts":1396389101000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"~\"\" is an owned pointer to the empty string","msgtype":"m.text"},"ts":1396389116000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"No idea what the vec macro does","msgtype":"m.text"},"ts":1396389125000,"senderName":"jgraham","senderId":"jgraham@irc"},
{"content":{"body":"zewt: essentially all you have is foo * const and const foo * const in Rust","msgtype":"m.text"},"ts":1396389174000,"senderName":"gsnedders","senderId":"gsnedders@irc"},
{"content":{"body":"vec!() is like []","msgtype":"m.text"},"ts":1396389218000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"anyway. i haven't studied rust much yet. i will eventually. i expect it'll be similar to Go, though, which is to say, a lot of interesting ideas, some really bad decisions, and odd syntax, the total of which isn't really interesting enough to me :-)","msgtype":"m.text"},"ts":1396389227000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"It constructs a new Vec, which is a growable vector","msgtype":"m.text"},"ts":1396389232000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"I hope we're getting better syntax for that at some point","msgtype":"m.text"},"ts":1396389243000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"how about []","msgtype":"m.text"},"ts":1396389256000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"just saying :P","msgtype":"m.text"},"ts":1396389261000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"i'm skeptical of any language I can't read intuitively, without having to study first","msgtype":"m.text"},"ts":1396389308000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Yeah, that's used for a type that's currently being transitioned to being a non-growable vector","msgtype":"m.text"},"ts":1396389322000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"It's confusing right now :)","msgtype":"m.text"},"ts":1396389330000,"senderName":"Ms2ger","senderId":"Ms2ger@irc"},
{"content":{"body":"(not to say read every nuance of, but to a reasonable level)","msgtype":"m.text"},"ts":1396389366000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"afk","msgtype":"m.text"},"ts":1396389410000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"Hixie: we’d be interested in knowing what you consider bad decisions, with 1.0 coming soon","msgtype":"m.text"},"ts":1396390934000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"wonders: 1.0 of what?","msgtype":"m.emote"},"ts":1396391023000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"Rust","msgtype":"m.text"},"ts":1396391040000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"http://www.rust-lang.org/","msgtype":"m.text"},"ts":1396391047000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"does know roughly what rust is, even if he can't remember who is working on it","msgtype":"m.emote"},"ts":1396391071000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"it's a better name than, uh, Go","msgtype":"m.text"},"ts":1396391081000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"we try not to brand it as such, but it’s lead mostly by Mozilla Research","msgtype":"m.text"},"ts":1396391133000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"though admittedly still seems awfully common of a word to use for a software product's name","msgtype":"m.text"},"ts":1396391138000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"worse than Perl, Java, Ruby, and Python? :)","msgtype":"m.text"},"ts":1396391154000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"or C","msgtype":"m.text"},"ts":1396391162000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"I don't know why Perl is in that list","msgtype":"m.text"},"ts":1396391174000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"though you have a point","msgtype":"m.text"},"ts":1396391183000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"oh, it’s spelled pearl in english, sorry","msgtype":"m.text"},"ts":1396391205000,"senderName":"SimonSapin","senderId":"SimonSapin@irc"},
{"content":{"body":"not that I've personally seen/heard Java used of the coffee all that often","msgtype":"m.text"},"ts":1396391207000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"is amused by VERA's first entry for perl","msgtype":"m.emote"},"ts":1396391256000,"senderName":"SamB","senderId":"SamB@irc"},
{"content":{"body":"none as bad as calling a browser \"chrome\"","msgtype":"m.text"},"ts":1396391357000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"thus making it forever impossible to search for anything regarding firefox's chrome","msgtype":"m.text"},"ts":1396391384000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"just saw firefox's current fullscreen implementation for the first time, it's ... pretty terrible :|","msgtype":"m.text"},"ts":1396391665000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"every time i focus firefox on the other monitor a giant thing pops up FIREFOX IS NOW FULLSCREEN (which it already told me the first time)","msgtype":"m.text"},"ts":1396391686000,"senderName":"zewt","senderId":"zewt@irc"},
{"content":{"body":"SimonSapin: using abbreviations like \"fn\" and \"mod\" instead of \"function\" and \"module\", using non-standard punctuation like || and !, having multiple string syntaxes, non-standard attribute syntax, that kind of thing","msgtype":"m.text"},"ts":1396395242000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: also i don't understand some decisions, which, unless they have good reasons, would also fall into that bucket, like needing to explicitly give the type name before a { } struct literal","msgtype":"m.text"},"ts":1396395280000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"SimonSapin: (the non-standard punctuation thing extends to e.g. the way ~ is used. I'd personally think it'd be much more readable if it was keywords rather than punctuation.)","msgtype":"m.text"},"ts":1396395685000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"hth","msgtype":"m.text"},"ts":1396395689000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"zewt: file a bug","msgtype":"m.text"},"ts":1396396215000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"zewt: not too many users have several monitors","msgtype":"m.text"},"ts":1396396232000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"nor developers","msgtype":"m.text"},"ts":1396396245000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"SimonSapin: btw looks like I agree with Hixie on bad design decisions of Rust. It is just too alien comparing to other languages, and mostly without any good reason.","msgtype":"m.text"},"ts":1396396375000,"senderName":"smaug____","senderId":"smaug____@irc"},
{"content":{"body":"i should add that i have zero experience writing rust, so, you know, take what i said with a grain of salt ;-)","msgtype":"m.text"},"ts":1396396427000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"but in general, where the language isn't being innovative, i would recommend sticking with what people know","msgtype":"m.text"},"ts":1396396480000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"it'll make it easier for people to pick up the actually new stuff","msgtype":"m.text"},"ts":1396396489000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"on a different note, i don't understand the difference between https://developer.mozilla.org/en-US/docs/NSS_Certificate_Download_Specification and https://wiki.mozilla.org/index.php?title=CA:Certificate_Download_Specification&action=history","msgtype":"m.text"},"ts":1396396545000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1396396555000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/NSS_Certificate_Download_Specification and https://wiki.mozilla.org/CA:Certificate_Download_Specification","msgtype":"m.text"},"ts":1396396568000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: file a bug?","msgtype":"m.text"},"ts":1396396628000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"on?","msgtype":"m.text"},"ts":1396396632000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: MDN I suspect","msgtype":"m.text"},"ts":1396396639000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"i don't really know what the bug is","msgtype":"m.text"},"ts":1396396678000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Hixie: duplication of content","msgtype":"m.text"},"ts":1396396735000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: without clarity on what is canonical","msgtype":"m.text"},"ts":1396396746000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"it's not quite duplicate","msgtype":"m.text"},"ts":1396396754000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":":-)","msgtype":"m.text"},"ts":1396396755000,"senderName":"Hixie","senderId":"Hixie@irc"},
{"content":{"body":"Not sure that makes it better","msgtype":"m.text"},"ts":1396396769000,"senderName":"annevk","senderId":"annevk@irc"},
{"content":{"body":"Hixie: The \"fn\" abbreviation, at least, has a pretty good pedigree.  Several languages use it.","msgtype":"m.text"},"ts":1396396792000,"senderName":"TabAtkins","senderId":"TabAtkins@irc"}
]